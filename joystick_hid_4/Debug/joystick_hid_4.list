
joystick_hid_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a20  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007ba8  08007ba8  00017ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c10  08007c10  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08007c10  08007c10  00017c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c18  08007c18  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c18  08007c18  00017c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c1c  08007c1c  00017c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08007c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020104  2**0
                  CONTENTS
 10 .bss          00000acc  20000104  20000104  00020104  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bd0  20000bd0  00020104  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011dba  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d30  00000000  00000000  00031eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  00034c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c70  00000000  00000000  000359a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e61  00000000  00000000  00036618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a64  00000000  00000000  00059479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c65ca  00000000  00000000  0006aedd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001314a7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003704  00000000  00000000  001314f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000104 	.word	0x20000104
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007b90 	.word	0x08007b90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000108 	.word	0x20000108
 80001c4:	08007b90 	.word	0x08007b90

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_UART_RxCpltCallback>:
	uint8_t left_y;
	uint8_t buttons;

}gamepadhid;
gamepadhid gamepad = {1,0,0,0};
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_DMA(&huart4, datapack, 4);
 80004d4:	2204      	movs	r2, #4
 80004d6:	4905      	ldr	r1, [pc, #20]	; (80004ec <HAL_UART_RxCpltCallback+0x20>)
 80004d8:	4805      	ldr	r0, [pc, #20]	; (80004f0 <HAL_UART_RxCpltCallback+0x24>)
 80004da:	f003 f882 	bl	80035e2 <HAL_UART_Receive_DMA>
	dataflag=1;
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <HAL_UART_RxCpltCallback+0x28>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	701a      	strb	r2, [r3, #0]


}
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	200001c8 	.word	0x200001c8
 80004f0:	20000120 	.word	0x20000120
 80004f4:	200001c4 	.word	0x200001c4

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fa5a 	bl	80009b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f832 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f8e4 	bl	80006d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000508:	f000 f8c2 	bl	8000690 <MX_DMA_Init>
  MX_UART4_Init();
 800050c:	f000 f896 	bl	800063c <MX_UART4_Init>
  MX_USB_DEVICE_Init();
 8000510:	f006 fecc 	bl	80072ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  extern USBD_HandleTypeDef hUsbDeviceFS;
  HAL_UART_Receive_DMA(&huart4, datapack, 4);
 8000514:	2204      	movs	r2, #4
 8000516:	490f      	ldr	r1, [pc, #60]	; (8000554 <main+0x5c>)
 8000518:	480f      	ldr	r0, [pc, #60]	; (8000558 <main+0x60>)
 800051a:	f003 f862 	bl	80035e2 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (dataflag==1){
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <main+0x64>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d1fb      	bne.n	800051e <main+0x26>

		  if(datapack[0]==0 && datapack[3]==8){
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <main+0x5c>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d1f7      	bne.n	800051e <main+0x26>
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <main+0x5c>)
 8000530:	78db      	ldrb	r3, [r3, #3]
 8000532:	2b08      	cmp	r3, #8
 8000534:	d1f3      	bne.n	800051e <main+0x26>
			  gamepad.left_x = datapack[1];
 8000536:	4b07      	ldr	r3, [pc, #28]	; (8000554 <main+0x5c>)
 8000538:	785a      	ldrb	r2, [r3, #1]
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <main+0x68>)
 800053c:	705a      	strb	r2, [r3, #1]
			  gamepad.left_y = datapack[2];
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <main+0x5c>)
 8000540:	789a      	ldrb	r2, [r3, #2]
 8000542:	4b07      	ldr	r3, [pc, #28]	; (8000560 <main+0x68>)
 8000544:	709a      	strb	r2, [r3, #2]

			  USBD_HID_SendReport(&hUsbDeviceFS, &gamepad, 5);
 8000546:	2205      	movs	r2, #5
 8000548:	4905      	ldr	r1, [pc, #20]	; (8000560 <main+0x68>)
 800054a:	4806      	ldr	r0, [pc, #24]	; (8000564 <main+0x6c>)
 800054c:	f005 fb34 	bl	8005bb8 <USBD_HID_SendReport>
	  if (dataflag==1){
 8000550:	e7e5      	b.n	800051e <main+0x26>
 8000552:	bf00      	nop
 8000554:	200001c8 	.word	0x200001c8
 8000558:	20000120 	.word	0x20000120
 800055c:	200001c4 	.word	0x200001c4
 8000560:	20000000 	.word	0x20000000
 8000564:	200001d4 	.word	0x200001d4

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f007 fb02 	bl	8007b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b28      	ldr	r3, [pc, #160]	; (8000634 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a27      	ldr	r2, [pc, #156]	; (8000634 <SystemClock_Config+0xcc>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <SystemClock_Config+0xcc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <SystemClock_Config+0xd0>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <SystemClock_Config+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d8:	2308      	movs	r3, #8
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e6:	2307      	movs	r3, #7
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fb12 	bl	8002c18 <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005fa:	f000 f8b9 	bl	8000770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2302      	movs	r3, #2
 8000604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800060e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000614:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2105      	movs	r1, #5
 800061c:	4618      	mov	r0, r3
 800061e:	f002 fd73 	bl	8003108 <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000628:	f000 f8a2 	bl	8000770 <Error_Handler>
  }
}
 800062c:	bf00      	nop
 800062e:	3750      	adds	r7, #80	; 0x50
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_UART4_Init+0x4c>)
 8000642:	4a12      	ldr	r2, [pc, #72]	; (800068c <MX_UART4_Init+0x50>)
 8000644:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_UART4_Init+0x4c>)
 8000648:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800064c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_UART4_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_UART4_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_UART4_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_UART4_Init+0x4c>)
 8000662:	2204      	movs	r2, #4
 8000664:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_UART4_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_UART4_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_UART4_Init+0x4c>)
 8000674:	f002 ff68 	bl	8003548 <HAL_UART_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800067e:	f000 f877 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000120 	.word	0x20000120
 800068c:	40004c00 	.word	0x40004c00

08000690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_DMA_Init+0x3c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <MX_DMA_Init+0x3c>)
 80006a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_DMA_Init+0x3c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	200d      	movs	r0, #13
 80006b8:	f000 faed 	bl	8000c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80006bc:	200d      	movs	r0, #13
 80006be:	f000 fb06 	bl	8000cce <HAL_NVIC_EnableIRQ>

}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_GPIO_Init+0x98>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <MX_GPIO_Init+0x98>)
 80006f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_GPIO_Init+0x98>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_GPIO_Init+0x98>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a17      	ldr	r2, [pc, #92]	; (8000768 <MX_GPIO_Init+0x98>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_GPIO_Init+0x98>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_GPIO_Init+0x98>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a10      	ldr	r2, [pc, #64]	; (8000768 <MX_GPIO_Init+0x98>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_GPIO_Init+0x98>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2101      	movs	r1, #1
 800073e:	480b      	ldr	r0, [pc, #44]	; (800076c <MX_GPIO_Init+0x9c>)
 8000740:	f000 ffec 	bl	800171c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000744:	2301      	movs	r3, #1
 8000746:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	4619      	mov	r1, r3
 800075a:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_GPIO_Init+0x9c>)
 800075c:	f000 fe42 	bl	80013e4 <HAL_GPIO_Init>

}
 8000760:	bf00      	nop
 8000762:	3720      	adds	r7, #32
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40020800 	.word	0x40020800

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	e7fe      	b.n	8000778 <Error_Handler+0x8>
	...

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <HAL_MspInit+0x4c>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <HAL_MspInit+0x4c>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <HAL_MspInit+0x4c>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_MspInit+0x4c>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <HAL_MspInit+0x4c>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_MspInit+0x4c>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ba:	2007      	movs	r0, #7
 80007bc:	f000 fa60 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40023800 	.word	0x40023800

080007cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a30      	ldr	r2, [pc, #192]	; (80008ac <HAL_UART_MspInit+0xe0>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d159      	bne.n	80008a2 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b2f      	ldr	r3, [pc, #188]	; (80008b0 <HAL_UART_MspInit+0xe4>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	4a2e      	ldr	r2, [pc, #184]	; (80008b0 <HAL_UART_MspInit+0xe4>)
 80007f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007fc:	6413      	str	r3, [r2, #64]	; 0x40
 80007fe:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <HAL_UART_MspInit+0xe4>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <HAL_UART_MspInit+0xe4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a27      	ldr	r2, [pc, #156]	; (80008b0 <HAL_UART_MspInit+0xe4>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <HAL_UART_MspInit+0xe4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000826:	2303      	movs	r3, #3
 8000828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000832:	2303      	movs	r3, #3
 8000834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000836:	2308      	movs	r3, #8
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	481c      	ldr	r0, [pc, #112]	; (80008b4 <HAL_UART_MspInit+0xe8>)
 8000842:	f000 fdcf 	bl	80013e4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <HAL_UART_MspInit+0xec>)
 8000848:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <HAL_UART_MspInit+0xf0>)
 800084a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <HAL_UART_MspInit+0xec>)
 800084e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000852:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_UART_MspInit+0xec>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <HAL_UART_MspInit+0xec>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_UART_MspInit+0xec>)
 8000862:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000866:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <HAL_UART_MspInit+0xec>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_UART_MspInit+0xec>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <HAL_UART_MspInit+0xec>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_UART_MspInit+0xec>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <HAL_UART_MspInit+0xec>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000886:	480c      	ldr	r0, [pc, #48]	; (80008b8 <HAL_UART_MspInit+0xec>)
 8000888:	f000 fa3c 	bl	8000d04 <HAL_DMA_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000892:	f7ff ff6d 	bl	8000770 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <HAL_UART_MspInit+0xec>)
 800089a:	639a      	str	r2, [r3, #56]	; 0x38
 800089c:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <HAL_UART_MspInit+0xec>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40004c00 	.word	0x40004c00
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020000 	.word	0x40020000
 80008b8:	20000164 	.word	0x20000164
 80008bc:	40026040 	.word	0x40026040

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <NMI_Handler+0x4>

080008c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <MemManage_Handler+0x4>

080008d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <UsageFault_Handler+0x4>

080008de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090c:	f000 f8a4 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <DMA1_Stream2_IRQHandler+0x10>)
 800091a:	f000 faf9 	bl	8000f10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000164 	.word	0x20000164

08000928 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <OTG_FS_IRQHandler+0x10>)
 800092e:	f001 f85e 	bl	80019ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200006b0 	.word	0x200006b0

0800093c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <SystemInit+0x20>)
 8000942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000946:	4a05      	ldr	r2, [pc, #20]	; (800095c <SystemInit+0x20>)
 8000948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800094c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000998 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000966:	490e      	ldr	r1, [pc, #56]	; (80009a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000968:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097a:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800097c:	4c0b      	ldr	r4, [pc, #44]	; (80009ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800098a:	f7ff ffd7 	bl	800093c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800098e:	f007 f8d3 	bl	8007b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000992:	f7ff fdb1 	bl	80004f8 <main>
  bx  lr    
 8000996:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000998:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800099c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a0:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 80009a4:	08007c20 	.word	0x08007c20
  ldr r2, =_sbss
 80009a8:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 80009ac:	20000bd0 	.word	0x20000bd0

080009b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC_IRQHandler>
	...

080009b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_Init+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0d      	ldr	r2, [pc, #52]	; (80009f4 <HAL_Init+0x40>)
 80009be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <HAL_Init+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <HAL_Init+0x40>)
 80009ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_Init+0x40>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <HAL_Init+0x40>)
 80009d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 f94f 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e2:	2000      	movs	r0, #0
 80009e4:	f000 f808 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e8:	f7ff fec8 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023c00 	.word	0x40023c00

080009f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_InitTick+0x54>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x58>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f967 	bl	8000cea <HAL_SYSTICK_Config>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e00e      	b.n	8000a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	d80a      	bhi.n	8000a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f000 f92f 	bl	8000c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <HAL_InitTick+0x5c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e000      	b.n	8000a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000004 	.word	0x20000004
 8000a50:	2000000c 	.word	0x2000000c
 8000a54:	20000008 	.word	0x20000008

08000a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_IncTick+0x20>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x24>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <HAL_IncTick+0x24>)
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	2000000c 	.word	0x2000000c
 8000a7c:	200001cc 	.word	0x200001cc

08000a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <HAL_GetTick+0x14>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	200001cc 	.word	0x200001cc

08000a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa0:	f7ff ffee 	bl	8000a80 <HAL_GetTick>
 8000aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab0:	d005      	beq.n	8000abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_Delay+0x44>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4413      	add	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000abe:	bf00      	nop
 8000ac0:	f7ff ffde 	bl	8000a80 <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d8f7      	bhi.n	8000ac0 <HAL_Delay+0x28>
  {
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2000000c 	.word	0x2000000c

08000ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <__NVIC_GetPriorityGrouping+0x18>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	f003 0307 	and.w	r3, r3, #7
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	db0b      	blt.n	8000b6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	f003 021f 	and.w	r2, r3, #31
 8000b5c:	4907      	ldr	r1, [pc, #28]	; (8000b7c <__NVIC_EnableIRQ+0x38>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	095b      	lsrs	r3, r3, #5
 8000b64:	2001      	movs	r0, #1
 8000b66:	fa00 f202 	lsl.w	r2, r0, r2
 8000b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000e100 	.word	0xe000e100

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	; (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
         );
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	; 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c4c:	d301      	bcc.n	8000c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00f      	b.n	8000c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <SysTick_Config+0x40>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f7ff ff8e 	bl	8000b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <SysTick_Config+0x40>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <SysTick_Config+0x40>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff29 	bl	8000ae0 <__NVIC_SetPriorityGrouping>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca8:	f7ff ff3e 	bl	8000b28 <__NVIC_GetPriorityGrouping>
 8000cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	68b9      	ldr	r1, [r7, #8]
 8000cb2:	6978      	ldr	r0, [r7, #20]
 8000cb4:	f7ff ff8e 	bl	8000bd4 <NVIC_EncodePriority>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff5d 	bl	8000b80 <__NVIC_SetPriority>
}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff31 	bl	8000b44 <__NVIC_EnableIRQ>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ffa2 	bl	8000c3c <SysTick_Config>
 8000cf8:	4603      	mov	r3, r0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff feb6 	bl	8000a80 <HAL_GetTick>
 8000d14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e099      	b.n	8000e54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2202      	movs	r2, #2
 8000d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f022 0201 	bic.w	r2, r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d40:	e00f      	b.n	8000d62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d42:	f7ff fe9d 	bl	8000a80 <HAL_GetTick>
 8000d46:	4602      	mov	r2, r0
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	2b05      	cmp	r3, #5
 8000d4e:	d908      	bls.n	8000d62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2220      	movs	r2, #32
 8000d54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2203      	movs	r2, #3
 8000d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e078      	b.n	8000e54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1e8      	bne.n	8000d42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	4b38      	ldr	r3, [pc, #224]	; (8000e5c <HAL_DMA_Init+0x158>)
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000da6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a1b      	ldr	r3, [r3, #32]
 8000dac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	d107      	bne.n	8000dcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f023 0307 	bic.w	r3, r3, #7
 8000de2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d117      	bne.n	8000e26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00e      	beq.n	8000e26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 fa6f 	bl	80012ec <DMA_CheckFifoParam>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d008      	beq.n	8000e26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2240      	movs	r2, #64	; 0x40
 8000e18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e22:	2301      	movs	r3, #1
 8000e24:	e016      	b.n	8000e54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 fa26 	bl	8001280 <DMA_CalcBaseAndBitshift>
 8000e34:	4603      	mov	r3, r0
 8000e36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e3c:	223f      	movs	r2, #63	; 0x3f
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	f010803f 	.word	0xf010803f

08000e60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
 8000e6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d101      	bne.n	8000e86 <HAL_DMA_Start_IT+0x26>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e040      	b.n	8000f08 <HAL_DMA_Start_IT+0xa8>
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d12f      	bne.n	8000efa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	f000 f9b8 	bl	8001224 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eb8:	223f      	movs	r2, #63	; 0x3f
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 0216 	orr.w	r2, r2, #22
 8000ece:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d007      	beq.n	8000ee8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f042 0208 	orr.w	r2, r2, #8
 8000ee6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f042 0201 	orr.w	r2, r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	e005      	b.n	8000f06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f02:	2302      	movs	r3, #2
 8000f04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000f1c:	4b8e      	ldr	r3, [pc, #568]	; (8001158 <HAL_DMA_IRQHandler+0x248>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a8e      	ldr	r2, [pc, #568]	; (800115c <HAL_DMA_IRQHandler+0x24c>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	0a9b      	lsrs	r3, r3, #10
 8000f28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f3a:	2208      	movs	r2, #8
 8000f3c:	409a      	lsls	r2, r3
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	4013      	ands	r3, r2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d01a      	beq.n	8000f7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d013      	beq.n	8000f7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 0204 	bic.w	r2, r2, #4
 8000f62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f68:	2208      	movs	r2, #8
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f74:	f043 0201 	orr.w	r2, r3, #1
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f80:	2201      	movs	r2, #1
 8000f82:	409a      	lsls	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4013      	ands	r3, r2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d012      	beq.n	8000fb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00b      	beq.n	8000fb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	409a      	lsls	r2, r3
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000faa:	f043 0202 	orr.w	r2, r3, #2
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fb6:	2204      	movs	r2, #4
 8000fb8:	409a      	lsls	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d012      	beq.n	8000fe8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00b      	beq.n	8000fe8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fe0:	f043 0204 	orr.w	r2, r3, #4
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fec:	2210      	movs	r2, #16
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d043      	beq.n	8001080 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0308 	and.w	r3, r3, #8
 8001002:	2b00      	cmp	r3, #0
 8001004:	d03c      	beq.n	8001080 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800100a:	2210      	movs	r2, #16
 800100c:	409a      	lsls	r2, r3
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d018      	beq.n	8001052 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d108      	bne.n	8001040 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	2b00      	cmp	r3, #0
 8001034:	d024      	beq.n	8001080 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	4798      	blx	r3
 800103e:	e01f      	b.n	8001080 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001044:	2b00      	cmp	r3, #0
 8001046:	d01b      	beq.n	8001080 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	4798      	blx	r3
 8001050:	e016      	b.n	8001080 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105c:	2b00      	cmp	r3, #0
 800105e:	d107      	bne.n	8001070 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0208 	bic.w	r2, r2, #8
 800106e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001084:	2220      	movs	r2, #32
 8001086:	409a      	lsls	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4013      	ands	r3, r2
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 808f 	beq.w	80011b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0310 	and.w	r3, r3, #16
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 8087 	beq.w	80011b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a6:	2220      	movs	r2, #32
 80010a8:	409a      	lsls	r2, r3
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b05      	cmp	r3, #5
 80010b8:	d136      	bne.n	8001128 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0216 	bic.w	r2, r2, #22
 80010c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	695a      	ldr	r2, [r3, #20]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d103      	bne.n	80010ea <HAL_DMA_IRQHandler+0x1da>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d007      	beq.n	80010fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 0208 	bic.w	r2, r2, #8
 80010f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fe:	223f      	movs	r2, #63	; 0x3f
 8001100:	409a      	lsls	r2, r3
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800111a:	2b00      	cmp	r3, #0
 800111c:	d07e      	beq.n	800121c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	4798      	blx	r3
        }
        return;
 8001126:	e079      	b.n	800121c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d01d      	beq.n	8001172 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10d      	bne.n	8001160 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001148:	2b00      	cmp	r3, #0
 800114a:	d031      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	4798      	blx	r3
 8001154:	e02c      	b.n	80011b0 <HAL_DMA_IRQHandler+0x2a0>
 8001156:	bf00      	nop
 8001158:	20000004 	.word	0x20000004
 800115c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001164:	2b00      	cmp	r3, #0
 8001166:	d023      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	4798      	blx	r3
 8001170:	e01e      	b.n	80011b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10f      	bne.n	80011a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0210 	bic.w	r2, r2, #16
 800118e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2201      	movs	r2, #1
 8001194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d032      	beq.n	800121e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d022      	beq.n	800120a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2205      	movs	r2, #5
 80011c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0201 	bic.w	r2, r2, #1
 80011da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	3301      	adds	r3, #1
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d307      	bcc.n	80011f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f2      	bne.n	80011dc <HAL_DMA_IRQHandler+0x2cc>
 80011f6:	e000      	b.n	80011fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80011f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	4798      	blx	r3
 800121a:	e000      	b.n	800121e <HAL_DMA_IRQHandler+0x30e>
        return;
 800121c:	bf00      	nop
    }
  }
}
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001240:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2b40      	cmp	r3, #64	; 0x40
 8001250:	d108      	bne.n	8001264 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001262:	e007      	b.n	8001274 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	60da      	str	r2, [r3, #12]
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	3b10      	subs	r3, #16
 8001290:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <DMA_CalcBaseAndBitshift+0x64>)
 8001292:	fba2 2303 	umull	r2, r3, r2, r3
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800129a:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <DMA_CalcBaseAndBitshift+0x68>)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4413      	add	r3, r2
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d909      	bls.n	80012c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012b6:	f023 0303 	bic.w	r3, r3, #3
 80012ba:	1d1a      	adds	r2, r3, #4
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	659a      	str	r2, [r3, #88]	; 0x58
 80012c0:	e007      	b.n	80012d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012ca:	f023 0303 	bic.w	r3, r3, #3
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	aaaaaaab 	.word	0xaaaaaaab
 80012e8:	08007c08 	.word	0x08007c08

080012ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d11f      	bne.n	8001346 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	2b03      	cmp	r3, #3
 800130a:	d856      	bhi.n	80013ba <DMA_CheckFifoParam+0xce>
 800130c:	a201      	add	r2, pc, #4	; (adr r2, 8001314 <DMA_CheckFifoParam+0x28>)
 800130e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001312:	bf00      	nop
 8001314:	08001325 	.word	0x08001325
 8001318:	08001337 	.word	0x08001337
 800131c:	08001325 	.word	0x08001325
 8001320:	080013bb 	.word	0x080013bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001328:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d046      	beq.n	80013be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001334:	e043      	b.n	80013be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800133e:	d140      	bne.n	80013c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001344:	e03d      	b.n	80013c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800134e:	d121      	bne.n	8001394 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	2b03      	cmp	r3, #3
 8001354:	d837      	bhi.n	80013c6 <DMA_CheckFifoParam+0xda>
 8001356:	a201      	add	r2, pc, #4	; (adr r2, 800135c <DMA_CheckFifoParam+0x70>)
 8001358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135c:	0800136d 	.word	0x0800136d
 8001360:	08001373 	.word	0x08001373
 8001364:	0800136d 	.word	0x0800136d
 8001368:	08001385 	.word	0x08001385
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
      break;
 8001370:	e030      	b.n	80013d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001376:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d025      	beq.n	80013ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001382:	e022      	b.n	80013ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800138c:	d11f      	bne.n	80013ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001392:	e01c      	b.n	80013ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d903      	bls.n	80013a2 <DMA_CheckFifoParam+0xb6>
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	2b03      	cmp	r3, #3
 800139e:	d003      	beq.n	80013a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80013a0:	e018      	b.n	80013d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	73fb      	strb	r3, [r7, #15]
      break;
 80013a6:	e015      	b.n	80013d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00e      	beq.n	80013d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
      break;
 80013b8:	e00b      	b.n	80013d2 <DMA_CheckFifoParam+0xe6>
      break;
 80013ba:	bf00      	nop
 80013bc:	e00a      	b.n	80013d4 <DMA_CheckFifoParam+0xe8>
      break;
 80013be:	bf00      	nop
 80013c0:	e008      	b.n	80013d4 <DMA_CheckFifoParam+0xe8>
      break;
 80013c2:	bf00      	nop
 80013c4:	e006      	b.n	80013d4 <DMA_CheckFifoParam+0xe8>
      break;
 80013c6:	bf00      	nop
 80013c8:	e004      	b.n	80013d4 <DMA_CheckFifoParam+0xe8>
      break;
 80013ca:	bf00      	nop
 80013cc:	e002      	b.n	80013d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80013ce:	bf00      	nop
 80013d0:	e000      	b.n	80013d4 <DMA_CheckFifoParam+0xe8>
      break;
 80013d2:	bf00      	nop
    }
  } 
  
  return status; 
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop

080013e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	e16b      	b.n	80016d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001400:	2201      	movs	r2, #1
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	429a      	cmp	r2, r3
 800141a:	f040 815a 	bne.w	80016d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	2b01      	cmp	r3, #1
 8001428:	d005      	beq.n	8001436 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001432:	2b02      	cmp	r3, #2
 8001434:	d130      	bne.n	8001498 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	2203      	movs	r2, #3
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800146c:	2201      	movs	r2, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	091b      	lsrs	r3, r3, #4
 8001482:	f003 0201 	and.w	r2, r3, #1
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d017      	beq.n	80014d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d123      	bne.n	8001528 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	08da      	lsrs	r2, r3, #3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3208      	adds	r2, #8
 80014e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	220f      	movs	r2, #15
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	691a      	ldr	r2, [r3, #16]
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	08da      	lsrs	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3208      	adds	r2, #8
 8001522:	69b9      	ldr	r1, [r7, #24]
 8001524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	2203      	movs	r2, #3
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0203 	and.w	r2, r3, #3
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 80b4 	beq.w	80016d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b60      	ldr	r3, [pc, #384]	; (80016f0 <HAL_GPIO_Init+0x30c>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a5f      	ldr	r2, [pc, #380]	; (80016f0 <HAL_GPIO_Init+0x30c>)
 8001574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b5d      	ldr	r3, [pc, #372]	; (80016f0 <HAL_GPIO_Init+0x30c>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001586:	4a5b      	ldr	r2, [pc, #364]	; (80016f4 <HAL_GPIO_Init+0x310>)
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	3302      	adds	r3, #2
 800158e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	220f      	movs	r2, #15
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a52      	ldr	r2, [pc, #328]	; (80016f8 <HAL_GPIO_Init+0x314>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d02b      	beq.n	800160a <HAL_GPIO_Init+0x226>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a51      	ldr	r2, [pc, #324]	; (80016fc <HAL_GPIO_Init+0x318>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d025      	beq.n	8001606 <HAL_GPIO_Init+0x222>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a50      	ldr	r2, [pc, #320]	; (8001700 <HAL_GPIO_Init+0x31c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d01f      	beq.n	8001602 <HAL_GPIO_Init+0x21e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4f      	ldr	r2, [pc, #316]	; (8001704 <HAL_GPIO_Init+0x320>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d019      	beq.n	80015fe <HAL_GPIO_Init+0x21a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4e      	ldr	r2, [pc, #312]	; (8001708 <HAL_GPIO_Init+0x324>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d013      	beq.n	80015fa <HAL_GPIO_Init+0x216>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4d      	ldr	r2, [pc, #308]	; (800170c <HAL_GPIO_Init+0x328>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d00d      	beq.n	80015f6 <HAL_GPIO_Init+0x212>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4c      	ldr	r2, [pc, #304]	; (8001710 <HAL_GPIO_Init+0x32c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d007      	beq.n	80015f2 <HAL_GPIO_Init+0x20e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4b      	ldr	r2, [pc, #300]	; (8001714 <HAL_GPIO_Init+0x330>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_GPIO_Init+0x20a>
 80015ea:	2307      	movs	r3, #7
 80015ec:	e00e      	b.n	800160c <HAL_GPIO_Init+0x228>
 80015ee:	2308      	movs	r3, #8
 80015f0:	e00c      	b.n	800160c <HAL_GPIO_Init+0x228>
 80015f2:	2306      	movs	r3, #6
 80015f4:	e00a      	b.n	800160c <HAL_GPIO_Init+0x228>
 80015f6:	2305      	movs	r3, #5
 80015f8:	e008      	b.n	800160c <HAL_GPIO_Init+0x228>
 80015fa:	2304      	movs	r3, #4
 80015fc:	e006      	b.n	800160c <HAL_GPIO_Init+0x228>
 80015fe:	2303      	movs	r3, #3
 8001600:	e004      	b.n	800160c <HAL_GPIO_Init+0x228>
 8001602:	2302      	movs	r3, #2
 8001604:	e002      	b.n	800160c <HAL_GPIO_Init+0x228>
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <HAL_GPIO_Init+0x228>
 800160a:	2300      	movs	r3, #0
 800160c:	69fa      	ldr	r2, [r7, #28]
 800160e:	f002 0203 	and.w	r2, r2, #3
 8001612:	0092      	lsls	r2, r2, #2
 8001614:	4093      	lsls	r3, r2
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800161c:	4935      	ldr	r1, [pc, #212]	; (80016f4 <HAL_GPIO_Init+0x310>)
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3302      	adds	r3, #2
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800162a:	4b3b      	ldr	r3, [pc, #236]	; (8001718 <HAL_GPIO_Init+0x334>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800164e:	4a32      	ldr	r2, [pc, #200]	; (8001718 <HAL_GPIO_Init+0x334>)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001654:	4b30      	ldr	r3, [pc, #192]	; (8001718 <HAL_GPIO_Init+0x334>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001678:	4a27      	ldr	r2, [pc, #156]	; (8001718 <HAL_GPIO_Init+0x334>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800167e:	4b26      	ldr	r3, [pc, #152]	; (8001718 <HAL_GPIO_Init+0x334>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016a2:	4a1d      	ldr	r2, [pc, #116]	; (8001718 <HAL_GPIO_Init+0x334>)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <HAL_GPIO_Init+0x334>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016cc:	4a12      	ldr	r2, [pc, #72]	; (8001718 <HAL_GPIO_Init+0x334>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3301      	adds	r3, #1
 80016d6:	61fb      	str	r3, [r7, #28]
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	2b0f      	cmp	r3, #15
 80016dc:	f67f ae90 	bls.w	8001400 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3724      	adds	r7, #36	; 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40013800 	.word	0x40013800
 80016f8:	40020000 	.word	0x40020000
 80016fc:	40020400 	.word	0x40020400
 8001700:	40020800 	.word	0x40020800
 8001704:	40020c00 	.word	0x40020c00
 8001708:	40021000 	.word	0x40021000
 800170c:	40021400 	.word	0x40021400
 8001710:	40021800 	.word	0x40021800
 8001714:	40021c00 	.word	0x40021c00
 8001718:	40013c00 	.word	0x40013c00

0800171c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]
 8001728:	4613      	mov	r3, r2
 800172a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800172c:	787b      	ldrb	r3, [r7, #1]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001732:	887a      	ldrh	r2, [r7, #2]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001738:	e003      	b.n	8001742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800173a:	887b      	ldrh	r3, [r7, #2]
 800173c:	041a      	lsls	r2, r3, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	619a      	str	r2, [r3, #24]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800174e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001750:	b08f      	sub	sp, #60	; 0x3c
 8001752:	af0a      	add	r7, sp, #40	; 0x28
 8001754:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e10f      	b.n	8001980 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d106      	bne.n	8001780 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f005 fecc 	bl	8007518 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2203      	movs	r2, #3
 8001784:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f002 fd1b 	bl	80041da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	687e      	ldr	r6, [r7, #4]
 80017ac:	466d      	mov	r5, sp
 80017ae:	f106 0410 	add.w	r4, r6, #16
 80017b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017be:	e885 0003 	stmia.w	r5, {r0, r1}
 80017c2:	1d33      	adds	r3, r6, #4
 80017c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017c6:	6838      	ldr	r0, [r7, #0]
 80017c8:	f002 fbf2 	bl	8003fb0 <USB_CoreInit>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d005      	beq.n	80017de <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2202      	movs	r2, #2
 80017d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e0d0      	b.n	8001980 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f002 fd09 	bl	80041fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	73fb      	strb	r3, [r7, #15]
 80017ee:	e04a      	b.n	8001886 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017f0:	7bfa      	ldrb	r2, [r7, #15]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4413      	add	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	333d      	adds	r3, #61	; 0x3d
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	333c      	adds	r3, #60	; 0x3c
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001818:	7bfa      	ldrb	r2, [r7, #15]
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	b298      	uxth	r0, r3
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	3344      	adds	r3, #68	; 0x44
 800182c:	4602      	mov	r2, r0
 800182e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001830:	7bfa      	ldrb	r2, [r7, #15]
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	3340      	adds	r3, #64	; 0x40
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001844:	7bfa      	ldrb	r2, [r7, #15]
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4413      	add	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	3348      	adds	r3, #72	; 0x48
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001858:	7bfa      	ldrb	r2, [r7, #15]
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4413      	add	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	334c      	adds	r3, #76	; 0x4c
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800186c:	7bfa      	ldrb	r2, [r7, #15]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	3354      	adds	r3, #84	; 0x54
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	3301      	adds	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
 8001886:	7bfa      	ldrb	r2, [r7, #15]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	429a      	cmp	r2, r3
 800188e:	d3af      	bcc.n	80017f0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001890:	2300      	movs	r3, #0
 8001892:	73fb      	strb	r3, [r7, #15]
 8001894:	e044      	b.n	8001920 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001896:	7bfa      	ldrb	r2, [r7, #15]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018ac:	7bfa      	ldrb	r2, [r7, #15]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80018be:	7bfa      	ldrb	r2, [r7, #15]
 80018c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018c2:	7bfa      	ldrb	r2, [r7, #15]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018d8:	7bfa      	ldrb	r2, [r7, #15]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018ee:	7bfa      	ldrb	r2, [r7, #15]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4413      	add	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	440b      	add	r3, r1
 80018fc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	3301      	adds	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
 8001920:	7bfa      	ldrb	r2, [r7, #15]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	429a      	cmp	r2, r3
 8001928:	d3b5      	bcc.n	8001896 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	687e      	ldr	r6, [r7, #4]
 8001932:	466d      	mov	r5, sp
 8001934:	f106 0410 	add.w	r4, r6, #16
 8001938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800193a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800193c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800193e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001940:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001944:	e885 0003 	stmia.w	r5, {r0, r1}
 8001948:	1d33      	adds	r3, r6, #4
 800194a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800194c:	6838      	ldr	r0, [r7, #0]
 800194e:	f002 fca1 	bl	8004294 <USB_DevInit>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e00d      	b.n	8001980 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f003 fdf0 	bl	800555e <USB_DevDisconnect>

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001988 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800199c:	2b01      	cmp	r3, #1
 800199e:	d101      	bne.n	80019a4 <HAL_PCD_Start+0x1c>
 80019a0:	2302      	movs	r3, #2
 80019a2:	e020      	b.n	80019e6 <HAL_PCD_Start+0x5e>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d109      	bne.n	80019c8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d005      	beq.n	80019c8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f002 fbf3 	bl	80041b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 fda0 	bl	800551c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019ee:	b590      	push	{r4, r7, lr}
 80019f0:	b08d      	sub	sp, #52	; 0x34
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 fe5e 	bl	80056c6 <USB_GetMode>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f040 848a 	bne.w	8002326 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 fdc2 	bl	80055a0 <USB_ReadInterrupts>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 8480 	beq.w	8002324 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f003 fdaf 	bl	80055a0 <USB_ReadInterrupts>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d107      	bne.n	8001a5c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	695a      	ldr	r2, [r3, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f002 0202 	and.w	r2, r2, #2
 8001a5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f003 fd9d 	bl	80055a0 <USB_ReadInterrupts>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f003 0310 	and.w	r3, r3, #16
 8001a6c:	2b10      	cmp	r3, #16
 8001a6e:	d161      	bne.n	8001b34 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	699a      	ldr	r2, [r3, #24]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0210 	bic.w	r2, r2, #16
 8001a7e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a80:	6a3b      	ldr	r3, [r7, #32]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	f003 020f 	and.w	r2, r3, #15
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4413      	add	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	0c5b      	lsrs	r3, r3, #17
 8001aa4:	f003 030f 	and.w	r3, r3, #15
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d124      	bne.n	8001af6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d035      	beq.n	8001b24 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	091b      	lsrs	r3, r3, #4
 8001ac0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ac2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	461a      	mov	r2, r3
 8001aca:	6a38      	ldr	r0, [r7, #32]
 8001acc:	f003 fbd4 	bl	8005278 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	091b      	lsrs	r3, r3, #4
 8001ad8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001adc:	441a      	add	r2, r3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	6a1a      	ldr	r2, [r3, #32]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	091b      	lsrs	r3, r3, #4
 8001aea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aee:	441a      	add	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	621a      	str	r2, [r3, #32]
 8001af4:	e016      	b.n	8001b24 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	0c5b      	lsrs	r3, r3, #17
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d110      	bne.n	8001b24 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001b08:	2208      	movs	r2, #8
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6a38      	ldr	r0, [r7, #32]
 8001b0e:	f003 fbb3 	bl	8005278 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	6a1a      	ldr	r2, [r3, #32]
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b1e:	441a      	add	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699a      	ldr	r2, [r3, #24]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0210 	orr.w	r2, r2, #16
 8001b32:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f003 fd31 	bl	80055a0 <USB_ReadInterrupts>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b48:	f040 80a7 	bne.w	8001c9a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f003 fd36 	bl	80055c6 <USB_ReadDevAllOutEpInterrupt>
 8001b5a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001b5c:	e099      	b.n	8001c92 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 808e 	beq.w	8001c86 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f003 fd5a 	bl	800562e <USB_ReadDevOutEPInterrupt>
 8001b7a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00c      	beq.n	8001ba0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	015a      	lsls	r2, r3, #5
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b92:	461a      	mov	r2, r3
 8001b94:	2301      	movs	r3, #1
 8001b96:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 feaa 	bl	80028f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00c      	beq.n	8001bc4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	015a      	lsls	r2, r3, #5
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	2308      	movs	r3, #8
 8001bba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001bbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 ff80 	bl	8002ac4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d008      	beq.n	8001be0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	015a      	lsls	r2, r3, #5
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bda:	461a      	mov	r2, r3
 8001bdc:	2310      	movs	r3, #16
 8001bde:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d030      	beq.n	8001c4c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf2:	2b80      	cmp	r3, #128	; 0x80
 8001bf4:	d109      	bne.n	8001c0a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c08:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	78db      	ldrb	r3, [r3, #3]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d108      	bne.n	8001c3a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	4619      	mov	r1, r3
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f005 fd83 	bl	8007740 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	015a      	lsls	r2, r3, #5
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c46:	461a      	mov	r2, r3
 8001c48:	2302      	movs	r3, #2
 8001c4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	f003 0320 	and.w	r3, r3, #32
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d008      	beq.n	8001c68 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	015a      	lsls	r2, r3, #5
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c62:	461a      	mov	r2, r3
 8001c64:	2320      	movs	r3, #32
 8001c66:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d009      	beq.n	8001c86 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	015a      	lsls	r2, r3, #5
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	4413      	add	r3, r2
 8001c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c84:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	3301      	adds	r3, #1
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8e:	085b      	lsrs	r3, r3, #1
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f47f af62 	bne.w	8001b5e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 fc7e 	bl	80055a0 <USB_ReadInterrupts>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001caa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001cae:	f040 80db 	bne.w	8001e68 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f003 fc9f 	bl	80055fa <USB_ReadDevAllInEpInterrupt>
 8001cbc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001cc2:	e0cd      	b.n	8001e60 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 80c2 	beq.w	8001e54 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	4611      	mov	r1, r2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f003 fcc5 	bl	800566a <USB_ReadDevInEPInterrupt>
 8001ce0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d057      	beq.n	8001d9c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69f9      	ldr	r1, [r7, #28]
 8001d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	015a      	lsls	r2, r3, #5
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	4413      	add	r3, r2
 8001d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	2301      	movs	r3, #1
 8001d20:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d132      	bne.n	8001d90 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	334c      	adds	r3, #76	; 0x4c
 8001d3a:	6819      	ldr	r1, [r3, #0]
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4403      	add	r3, r0
 8001d4a:	3348      	adds	r3, #72	; 0x48
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4419      	add	r1, r3
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d54:	4613      	mov	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4403      	add	r3, r0
 8001d5e:	334c      	adds	r3, #76	; 0x4c
 8001d60:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d113      	bne.n	8001d90 <HAL_PCD_IRQHandler+0x3a2>
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4413      	add	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	3354      	adds	r3, #84	; 0x54
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d108      	bne.n	8001d90 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d88:	461a      	mov	r2, r3
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	f003 fccc 	bl	8005728 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	4619      	mov	r1, r3
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f005 fc4d 	bl	8007636 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d008      	beq.n	8001db8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	015a      	lsls	r2, r3, #5
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001db2:	461a      	mov	r2, r3
 8001db4:	2308      	movs	r3, #8
 8001db6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d008      	beq.n	8001dd4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dce:	461a      	mov	r2, r3
 8001dd0:	2310      	movs	r3, #16
 8001dd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d008      	beq.n	8001df0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	015a      	lsls	r2, r3, #5
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	4413      	add	r3, r2
 8001de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dea:	461a      	mov	r2, r3
 8001dec:	2340      	movs	r3, #64	; 0x40
 8001dee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d023      	beq.n	8001e42 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001dfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dfc:	6a38      	ldr	r0, [r7, #32]
 8001dfe:	f002 fbad 	bl	800455c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e04:	4613      	mov	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	3338      	adds	r3, #56	; 0x38
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	3304      	adds	r3, #4
 8001e14:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	78db      	ldrb	r3, [r3, #3]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d108      	bne.n	8001e30 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2200      	movs	r2, #0
 8001e22:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	4619      	mov	r1, r3
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f005 fc9a 	bl	8007764 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	015a      	lsls	r2, r3, #5
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2302      	movs	r3, #2
 8001e40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fcc3 	bl	80027da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	3301      	adds	r3, #1
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5c:	085b      	lsrs	r3, r3, #1
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f47f af2e 	bne.w	8001cc4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f003 fb97 	bl	80055a0 <USB_ReadInterrupts>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e7c:	d122      	bne.n	8001ec4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e8c:	f023 0301 	bic.w	r3, r3, #1
 8001e90:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d108      	bne.n	8001eae <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 feaa 	bl	8002c00 <HAL_PCDEx_LPM_Callback>
 8001eac:	e002      	b.n	8001eb4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f005 fc38 	bl	8007724 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 fb69 	bl	80055a0 <USB_ReadInterrupts>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ed8:	d112      	bne.n	8001f00 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d102      	bne.n	8001ef0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f005 fbf4 	bl	80076d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	695a      	ldr	r2, [r3, #20]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001efe:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f003 fb4b 	bl	80055a0 <USB_ReadInterrupts>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f14:	f040 80b7 	bne.w	8002086 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2110      	movs	r1, #16
 8001f32:	4618      	mov	r0, r3
 8001f34:	f002 fb12 	bl	800455c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f3c:	e046      	b.n	8001fcc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f40:	015a      	lsls	r2, r3, #5
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f50:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f62:	0151      	lsls	r1, r2, #5
 8001f64:	69fa      	ldr	r2, [r7, #28]
 8001f66:	440a      	add	r2, r1
 8001f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f84:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f96:	0151      	lsls	r1, r2, #5
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	440a      	add	r2, r1
 8001f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001fa0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fa4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fb6:	0151      	lsls	r1, r2, #5
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	440a      	add	r2, r1
 8001fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001fc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fc4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc8:	3301      	adds	r3, #1
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d3b3      	bcc.n	8001f3e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fe4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001fe8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d016      	beq.n	8002020 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ffc:	69fa      	ldr	r2, [r7, #28]
 8001ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002002:	f043 030b 	orr.w	r3, r3, #11
 8002006:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002018:	f043 030b 	orr.w	r3, r3, #11
 800201c:	6453      	str	r3, [r2, #68]	; 0x44
 800201e:	e015      	b.n	800204c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	69fa      	ldr	r2, [r7, #28]
 800202a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800202e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002032:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002036:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002046:	f043 030b 	orr.w	r3, r3, #11
 800204a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800205a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800205e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002070:	461a      	mov	r2, r3
 8002072:	f003 fb59 	bl	8005728 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	695a      	ldr	r2, [r3, #20]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002084:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f003 fa88 	bl	80055a0 <USB_ReadInterrupts>
 8002090:	4603      	mov	r3, r0
 8002092:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800209a:	d124      	bne.n	80020e6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f003 fb1e 	bl	80056e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f002 fad3 	bl	8004656 <USB_GetDevSpeed>
 80020b0:	4603      	mov	r3, r0
 80020b2:	461a      	mov	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681c      	ldr	r4, [r3, #0]
 80020bc:	f001 fa10 	bl	80034e0 <HAL_RCC_GetHCLKFreq>
 80020c0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	4620      	mov	r0, r4
 80020cc:	f001 ffd2 	bl	8004074 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f005 fad8 	bl	8007686 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695a      	ldr	r2, [r3, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80020e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 fa58 	bl	80055a0 <USB_ReadInterrupts>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d10a      	bne.n	8002110 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f005 fab5 	bl	800766a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f002 0208 	and.w	r2, r2, #8
 800210e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f003 fa43 	bl	80055a0 <USB_ReadInterrupts>
 800211a:	4603      	mov	r3, r0
 800211c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002120:	2b80      	cmp	r3, #128	; 0x80
 8002122:	d122      	bne.n	800216a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002130:	2301      	movs	r3, #1
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
 8002134:	e014      	b.n	8002160 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213a:	4613      	mov	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d105      	bne.n	800215a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	b2db      	uxtb	r3, r3
 8002152:	4619      	mov	r1, r3
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fb0f 	bl	8002778 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	3301      	adds	r3, #1
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002166:	429a      	cmp	r2, r3
 8002168:	d3e5      	bcc.n	8002136 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f003 fa16 	bl	80055a0 <USB_ReadInterrupts>
 8002174:	4603      	mov	r3, r0
 8002176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800217e:	d13b      	bne.n	80021f8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002180:	2301      	movs	r3, #1
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
 8002184:	e02b      	b.n	80021de <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	4413      	add	r3, r2
 800218e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	3340      	adds	r3, #64	; 0x40
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d115      	bne.n	80021d8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80021ac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	da12      	bge.n	80021d8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	333f      	adds	r3, #63	; 0x3f
 80021c2:	2201      	movs	r2, #1
 80021c4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	4619      	mov	r1, r3
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fad0 	bl	8002778 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	3301      	adds	r3, #1
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d3ce      	bcc.n	8002186 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80021f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 f9cf 	bl	80055a0 <USB_ReadInterrupts>
 8002202:	4603      	mov	r3, r0
 8002204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002208:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800220c:	d155      	bne.n	80022ba <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800220e:	2301      	movs	r3, #1
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
 8002212:	e045      	b.n	80022a0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	4413      	add	r3, r2
 800221c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4413      	add	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d12e      	bne.n	800229a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800223c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800223e:	2b00      	cmp	r3, #0
 8002240:	da2b      	bge.n	800229a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800224e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002252:	429a      	cmp	r2, r3
 8002254:	d121      	bne.n	800229a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002268:	2201      	movs	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10a      	bne.n	800229a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002296:	6053      	str	r3, [r2, #4]
            break;
 8002298:	e007      	b.n	80022aa <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	3301      	adds	r3, #1
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d3b4      	bcc.n	8002214 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80022b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f003 f96e 	bl	80055a0 <USB_ReadInterrupts>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80022ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ce:	d10a      	bne.n	80022e6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f005 fa59 	bl	8007788 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80022e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f003 f958 	bl	80055a0 <USB_ReadInterrupts>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d115      	bne.n	8002326 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f005 fa49 	bl	80077a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6859      	ldr	r1, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	430a      	orrs	r2, r1
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	e000      	b.n	8002326 <HAL_PCD_IRQHandler+0x938>
      return;
 8002324:	bf00      	nop
    }
  }
}
 8002326:	3734      	adds	r7, #52	; 0x34
 8002328:	46bd      	mov	sp, r7
 800232a:	bd90      	pop	{r4, r7, pc}

0800232c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_PCD_SetAddress+0x1a>
 8002342:	2302      	movs	r3, #2
 8002344:	e013      	b.n	800236e <HAL_PCD_SetAddress+0x42>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	78fa      	ldrb	r2, [r7, #3]
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f003 f8b6 	bl	80054d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	4608      	mov	r0, r1
 8002380:	4611      	mov	r1, r2
 8002382:	461a      	mov	r2, r3
 8002384:	4603      	mov	r3, r0
 8002386:	70fb      	strb	r3, [r7, #3]
 8002388:	460b      	mov	r3, r1
 800238a:	803b      	strh	r3, [r7, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002398:	2b00      	cmp	r3, #0
 800239a:	da0f      	bge.n	80023bc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	f003 020f 	and.w	r2, r3, #15
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	3338      	adds	r3, #56	; 0x38
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	4413      	add	r3, r2
 80023b0:	3304      	adds	r3, #4
 80023b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2201      	movs	r2, #1
 80023b8:	705a      	strb	r2, [r3, #1]
 80023ba:	e00f      	b.n	80023dc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	f003 020f 	and.w	r2, r3, #15
 80023c2:	4613      	mov	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	3304      	adds	r3, #4
 80023d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023e8:	883a      	ldrh	r2, [r7, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	78ba      	ldrb	r2, [r7, #2]
 80023f2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	785b      	ldrb	r3, [r3, #1]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d004      	beq.n	8002406 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002406:	78bb      	ldrb	r3, [r7, #2]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d102      	bne.n	8002412 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_PCD_EP_Open+0xaa>
 800241c:	2302      	movs	r3, #2
 800241e:	e00e      	b.n	800243e <HAL_PCD_EP_Open+0xc8>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68f9      	ldr	r1, [r7, #12]
 800242e:	4618      	mov	r0, r3
 8002430:	f002 f936 	bl	80046a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800243c:	7afb      	ldrb	r3, [r7, #11]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b084      	sub	sp, #16
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	460b      	mov	r3, r1
 8002450:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002452:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002456:	2b00      	cmp	r3, #0
 8002458:	da0f      	bge.n	800247a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	f003 020f 	and.w	r2, r3, #15
 8002460:	4613      	mov	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4413      	add	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	3338      	adds	r3, #56	; 0x38
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	3304      	adds	r3, #4
 8002470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2201      	movs	r2, #1
 8002476:	705a      	strb	r2, [r3, #1]
 8002478:	e00f      	b.n	800249a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	f003 020f 	and.w	r2, r3, #15
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	4413      	add	r3, r2
 8002490:	3304      	adds	r3, #4
 8002492:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_PCD_EP_Close+0x6e>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e00e      	b.n	80024d2 <HAL_PCD_EP_Close+0x8c>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68f9      	ldr	r1, [r7, #12]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f002 f974 	bl	80047b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b086      	sub	sp, #24
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
 80024e6:	460b      	mov	r3, r1
 80024e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ea:	7afb      	ldrb	r3, [r7, #11]
 80024ec:	f003 020f 	and.w	r2, r3, #15
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4413      	add	r3, r2
 8002500:	3304      	adds	r3, #4
 8002502:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2200      	movs	r2, #0
 8002514:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2200      	movs	r2, #0
 800251a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800251c:	7afb      	ldrb	r3, [r7, #11]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	b2da      	uxtb	r2, r3
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d102      	bne.n	8002536 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002536:	7afb      	ldrb	r3, [r7, #11]
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	2b00      	cmp	r3, #0
 800253e:	d109      	bne.n	8002554 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	6979      	ldr	r1, [r7, #20]
 800254e:	f002 fc53 	bl	8004df8 <USB_EP0StartXfer>
 8002552:	e008      	b.n	8002566 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	6979      	ldr	r1, [r7, #20]
 8002562:	f002 fa01 	bl	8004968 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	460b      	mov	r3, r1
 800257e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002580:	7afb      	ldrb	r3, [r7, #11]
 8002582:	f003 020f 	and.w	r2, r3, #15
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	3338      	adds	r3, #56	; 0x38
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4413      	add	r3, r2
 8002594:	3304      	adds	r3, #4
 8002596:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	2200      	movs	r2, #0
 80025a8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2201      	movs	r2, #1
 80025ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025b0:	7afb      	ldrb	r3, [r7, #11]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d102      	bne.n	80025ca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025ca:	7afb      	ldrb	r3, [r7, #11]
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d109      	bne.n	80025e8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	461a      	mov	r2, r3
 80025e0:	6979      	ldr	r1, [r7, #20]
 80025e2:	f002 fc09 	bl	8004df8 <USB_EP0StartXfer>
 80025e6:	e008      	b.n	80025fa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	6979      	ldr	r1, [r7, #20]
 80025f6:	f002 f9b7 	bl	8004968 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	f003 020f 	and.w	r2, r3, #15
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	429a      	cmp	r2, r3
 800261c:	d901      	bls.n	8002622 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e050      	b.n	80026c4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002622:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002626:	2b00      	cmp	r3, #0
 8002628:	da0f      	bge.n	800264a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	f003 020f 	and.w	r2, r3, #15
 8002630:	4613      	mov	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4413      	add	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	3338      	adds	r3, #56	; 0x38
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	3304      	adds	r3, #4
 8002640:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	705a      	strb	r2, [r3, #1]
 8002648:	e00d      	b.n	8002666 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	4613      	mov	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	4413      	add	r3, r2
 800265c:	3304      	adds	r3, #4
 800265e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	b2da      	uxtb	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_PCD_EP_SetStall+0x82>
 8002682:	2302      	movs	r3, #2
 8002684:	e01e      	b.n	80026c4 <HAL_PCD_EP_SetStall+0xc0>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68f9      	ldr	r1, [r7, #12]
 8002694:	4618      	mov	r0, r3
 8002696:	f002 fe47 	bl	8005328 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	f003 030f 	and.w	r3, r3, #15
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	b2d9      	uxtb	r1, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026b4:	461a      	mov	r2, r3
 80026b6:	f003 f837 	bl	8005728 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	f003 020f 	and.w	r2, r3, #15
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d901      	bls.n	80026ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e042      	b.n	8002770 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	da0f      	bge.n	8002712 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026f2:	78fb      	ldrb	r3, [r7, #3]
 80026f4:	f003 020f 	and.w	r2, r3, #15
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	3338      	adds	r3, #56	; 0x38
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	3304      	adds	r3, #4
 8002708:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	705a      	strb	r2, [r3, #1]
 8002710:	e00f      	b.n	8002732 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	f003 020f 	and.w	r2, r3, #15
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	4413      	add	r3, r2
 8002728:	3304      	adds	r3, #4
 800272a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	b2da      	uxtb	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_PCD_EP_ClrStall+0x86>
 800274e:	2302      	movs	r3, #2
 8002750:	e00e      	b.n	8002770 <HAL_PCD_EP_ClrStall+0xa4>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68f9      	ldr	r1, [r7, #12]
 8002760:	4618      	mov	r0, r3
 8002762:	f002 fe4f 	bl	8005404 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002784:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002788:	2b00      	cmp	r3, #0
 800278a:	da0c      	bge.n	80027a6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	f003 020f 	and.w	r2, r3, #15
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	3338      	adds	r3, #56	; 0x38
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	4413      	add	r3, r2
 80027a0:	3304      	adds	r3, #4
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	e00c      	b.n	80027c0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	f003 020f 	and.w	r2, r3, #15
 80027ac:	4613      	mov	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4413      	add	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	4413      	add	r3, r2
 80027bc:	3304      	adds	r3, #4
 80027be:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68f9      	ldr	r1, [r7, #12]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f002 fc6e 	bl	80050a8 <USB_EPStopXfer>
 80027cc:	4603      	mov	r3, r0
 80027ce:	72fb      	strb	r3, [r7, #11]

  return ret;
 80027d0:	7afb      	ldrb	r3, [r7, #11]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b08a      	sub	sp, #40	; 0x28
 80027de:	af02      	add	r7, sp, #8
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	4613      	mov	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	3338      	adds	r3, #56	; 0x38
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	3304      	adds	r3, #4
 8002800:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a1a      	ldr	r2, [r3, #32]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	429a      	cmp	r2, r3
 800280c:	d901      	bls.n	8002812 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e06c      	b.n	80028ec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	699a      	ldr	r2, [r3, #24]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	429a      	cmp	r2, r3
 8002826:	d902      	bls.n	800282e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3303      	adds	r3, #3
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002836:	e02b      	b.n	8002890 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	699a      	ldr	r2, [r3, #24]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	429a      	cmp	r2, r3
 800284c:	d902      	bls.n	8002854 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	3303      	adds	r3, #3
 8002858:	089b      	lsrs	r3, r3, #2
 800285a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6919      	ldr	r1, [r3, #16]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	b2da      	uxtb	r2, r3
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800286c:	b2db      	uxtb	r3, r3
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	4603      	mov	r3, r0
 8002872:	6978      	ldr	r0, [r7, #20]
 8002874:	f002 fcc2 	bl	80051fc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	441a      	add	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a1a      	ldr	r2, [r3, #32]
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	441a      	add	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4413      	add	r3, r2
 8002898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d809      	bhi.n	80028ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a1a      	ldr	r2, [r3, #32]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d203      	bcs.n	80028ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1be      	bne.n	8002838 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	699a      	ldr	r2, [r3, #24]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d811      	bhi.n	80028ea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	f003 030f 	and.w	r3, r3, #15
 80028cc:	2201      	movs	r2, #1
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	43db      	mvns	r3, r3
 80028e0:	6939      	ldr	r1, [r7, #16]
 80028e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028e6:	4013      	ands	r3, r2
 80028e8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3720      	adds	r7, #32
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	333c      	adds	r3, #60	; 0x3c
 800290c:	3304      	adds	r3, #4
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4413      	add	r3, r2
 800291a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d17b      	bne.n	8002a22 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d015      	beq.n	8002960 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	4a61      	ldr	r2, [pc, #388]	; (8002abc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	f240 80b9 	bls.w	8002ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80b3 	beq.w	8002ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4413      	add	r3, r2
 8002952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002956:	461a      	mov	r2, r3
 8002958:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800295c:	6093      	str	r3, [r2, #8]
 800295e:	e0a7      	b.n	8002ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b00      	cmp	r3, #0
 8002968:	d009      	beq.n	800297e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	4413      	add	r3, r2
 8002972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002976:	461a      	mov	r2, r3
 8002978:	2320      	movs	r3, #32
 800297a:	6093      	str	r3, [r2, #8]
 800297c:	e098      	b.n	8002ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002984:	2b00      	cmp	r3, #0
 8002986:	f040 8093 	bne.w	8002ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	4a4b      	ldr	r2, [pc, #300]	; (8002abc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d90f      	bls.n	80029b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a8:	461a      	mov	r2, r3
 80029aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ae:	6093      	str	r3, [r2, #8]
 80029b0:	e07e      	b.n	8002ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	4413      	add	r3, r2
 80029c4:	3304      	adds	r3, #4
 80029c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	69da      	ldr	r2, [r3, #28]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	0159      	lsls	r1, r3, #5
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	440b      	add	r3, r1
 80029d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029de:	1ad2      	subs	r2, r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d114      	bne.n	8002a14 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029fc:	461a      	mov	r2, r3
 80029fe:	2101      	movs	r1, #1
 8002a00:	f002 fe92 	bl	8005728 <USB_EP0_OutStart>
 8002a04:	e006      	b.n	8002a14 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	441a      	add	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	4619      	mov	r1, r3
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f004 fdf0 	bl	8007600 <HAL_PCD_DataOutStageCallback>
 8002a20:	e046      	b.n	8002ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	4a26      	ldr	r2, [pc, #152]	; (8002ac0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d124      	bne.n	8002a74 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a40:	461a      	mov	r2, r3
 8002a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a46:	6093      	str	r3, [r2, #8]
 8002a48:	e032      	b.n	8002ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a60:	461a      	mov	r2, r3
 8002a62:	2320      	movs	r3, #32
 8002a64:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f004 fdc7 	bl	8007600 <HAL_PCD_DataOutStageCallback>
 8002a72:	e01d      	b.n	8002ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d114      	bne.n	8002aa4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d108      	bne.n	8002aa4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	f002 fe42 	bl	8005728 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f004 fda8 	bl	8007600 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3720      	adds	r7, #32
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	4f54300a 	.word	0x4f54300a
 8002ac0:	4f54310a 	.word	0x4f54310a

08002ac4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	333c      	adds	r3, #60	; 0x3c
 8002adc:	3304      	adds	r3, #4
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4a15      	ldr	r2, [pc, #84]	; (8002b4c <PCD_EP_OutSetupPacket_int+0x88>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d90e      	bls.n	8002b18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d009      	beq.n	8002b18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b10:	461a      	mov	r2, r3
 8002b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f004 fd5f 	bl	80075dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4a0a      	ldr	r2, [pc, #40]	; (8002b4c <PCD_EP_OutSetupPacket_int+0x88>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d90c      	bls.n	8002b40 <PCD_EP_OutSetupPacket_int+0x7c>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d108      	bne.n	8002b40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	f002 fdf4 	bl	8005728 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	4f54300a 	.word	0x4f54300a

08002b50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	70fb      	strb	r3, [r7, #3]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d107      	bne.n	8002b7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b6e:	883b      	ldrh	r3, [r7, #0]
 8002b70:	0419      	lsls	r1, r3, #16
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b7c:	e028      	b.n	8002bd0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b84:	0c1b      	lsrs	r3, r3, #16
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	4413      	add	r3, r2
 8002b8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	73fb      	strb	r3, [r7, #15]
 8002b90:	e00d      	b.n	8002bae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	3340      	adds	r3, #64	; 0x40
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	0c1b      	lsrs	r3, r3, #16
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	3301      	adds	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d3ec      	bcc.n	8002b92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002bb8:	883b      	ldrh	r3, [r7, #0]
 8002bba:	0418      	lsls	r0, r3, #16
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6819      	ldr	r1, [r3, #0]
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	4302      	orrs	r2, r0
 8002bc8:	3340      	adds	r3, #64	; 0x40
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	887a      	ldrh	r2, [r7, #2]
 8002bf0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e267      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d075      	beq.n	8002d22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c36:	4b88      	ldr	r3, [pc, #544]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d00c      	beq.n	8002c5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c42:	4b85      	ldr	r3, [pc, #532]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d112      	bne.n	8002c74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4e:	4b82      	ldr	r3, [pc, #520]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c5a:	d10b      	bne.n	8002c74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	4b7e      	ldr	r3, [pc, #504]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d05b      	beq.n	8002d20 <HAL_RCC_OscConfig+0x108>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d157      	bne.n	8002d20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e242      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7c:	d106      	bne.n	8002c8c <HAL_RCC_OscConfig+0x74>
 8002c7e:	4b76      	ldr	r3, [pc, #472]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a75      	ldr	r2, [pc, #468]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e01d      	b.n	8002cc8 <HAL_RCC_OscConfig+0xb0>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x98>
 8002c96:	4b70      	ldr	r3, [pc, #448]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a6f      	ldr	r2, [pc, #444]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b6d      	ldr	r3, [pc, #436]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a6c      	ldr	r2, [pc, #432]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e00b      	b.n	8002cc8 <HAL_RCC_OscConfig+0xb0>
 8002cb0:	4b69      	ldr	r3, [pc, #420]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a68      	ldr	r2, [pc, #416]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b66      	ldr	r3, [pc, #408]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a65      	ldr	r2, [pc, #404]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d013      	beq.n	8002cf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7fd fed6 	bl	8000a80 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7fd fed2 	bl	8000a80 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	; 0x64
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e207      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	4b5b      	ldr	r3, [pc, #364]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0xc0>
 8002cf6:	e014      	b.n	8002d22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7fd fec2 	bl	8000a80 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d00:	f7fd febe 	bl	8000a80 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	; 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e1f3      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d12:	4b51      	ldr	r3, [pc, #324]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0xe8>
 8002d1e:	e000      	b.n	8002d22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d063      	beq.n	8002df6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d2e:	4b4a      	ldr	r3, [pc, #296]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d3a:	4b47      	ldr	r3, [pc, #284]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d11c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d46:	4b44      	ldr	r3, [pc, #272]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d116      	bne.n	8002d80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d52:	4b41      	ldr	r3, [pc, #260]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d005      	beq.n	8002d6a <HAL_RCC_OscConfig+0x152>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d001      	beq.n	8002d6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e1c7      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6a:	4b3b      	ldr	r3, [pc, #236]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4937      	ldr	r1, [pc, #220]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	e03a      	b.n	8002df6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d020      	beq.n	8002dca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d88:	4b34      	ldr	r3, [pc, #208]	; (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8e:	f7fd fe77 	bl	8000a80 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d96:	f7fd fe73 	bl	8000a80 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e1a8      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da8:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db4:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4925      	ldr	r1, [pc, #148]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	600b      	str	r3, [r1, #0]
 8002dc8:	e015      	b.n	8002df6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dca:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7fd fe56 	bl	8000a80 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd8:	f7fd fe52 	bl	8000a80 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e187      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dea:	4b1b      	ldr	r3, [pc, #108]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d036      	beq.n	8002e70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d016      	beq.n	8002e38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <HAL_RCC_OscConfig+0x248>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e10:	f7fd fe36 	bl	8000a80 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e18:	f7fd fe32 	bl	8000a80 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e167      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x200>
 8002e36:	e01b      	b.n	8002e70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_RCC_OscConfig+0x248>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3e:	f7fd fe1f 	bl	8000a80 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e44:	e00e      	b.n	8002e64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e46:	f7fd fe1b 	bl	8000a80 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d907      	bls.n	8002e64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e150      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	42470000 	.word	0x42470000
 8002e60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e64:	4b88      	ldr	r3, [pc, #544]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1ea      	bne.n	8002e46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 8097 	beq.w	8002fac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e82:	4b81      	ldr	r3, [pc, #516]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10f      	bne.n	8002eae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	4b7d      	ldr	r3, [pc, #500]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	4a7c      	ldr	r2, [pc, #496]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9e:	4b7a      	ldr	r3, [pc, #488]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eae:	4b77      	ldr	r3, [pc, #476]	; (800308c <HAL_RCC_OscConfig+0x474>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d118      	bne.n	8002eec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eba:	4b74      	ldr	r3, [pc, #464]	; (800308c <HAL_RCC_OscConfig+0x474>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a73      	ldr	r2, [pc, #460]	; (800308c <HAL_RCC_OscConfig+0x474>)
 8002ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec6:	f7fd fddb 	bl	8000a80 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ece:	f7fd fdd7 	bl	8000a80 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e10c      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee0:	4b6a      	ldr	r3, [pc, #424]	; (800308c <HAL_RCC_OscConfig+0x474>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0f0      	beq.n	8002ece <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d106      	bne.n	8002f02 <HAL_RCC_OscConfig+0x2ea>
 8002ef4:	4b64      	ldr	r3, [pc, #400]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef8:	4a63      	ldr	r2, [pc, #396]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6713      	str	r3, [r2, #112]	; 0x70
 8002f00:	e01c      	b.n	8002f3c <HAL_RCC_OscConfig+0x324>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b05      	cmp	r3, #5
 8002f08:	d10c      	bne.n	8002f24 <HAL_RCC_OscConfig+0x30c>
 8002f0a:	4b5f      	ldr	r3, [pc, #380]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	4a5e      	ldr	r2, [pc, #376]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f10:	f043 0304 	orr.w	r3, r3, #4
 8002f14:	6713      	str	r3, [r2, #112]	; 0x70
 8002f16:	4b5c      	ldr	r3, [pc, #368]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1a:	4a5b      	ldr	r2, [pc, #364]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6713      	str	r3, [r2, #112]	; 0x70
 8002f22:	e00b      	b.n	8002f3c <HAL_RCC_OscConfig+0x324>
 8002f24:	4b58      	ldr	r3, [pc, #352]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f28:	4a57      	ldr	r2, [pc, #348]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f2a:	f023 0301 	bic.w	r3, r3, #1
 8002f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f30:	4b55      	ldr	r3, [pc, #340]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	4a54      	ldr	r2, [pc, #336]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f36:	f023 0304 	bic.w	r3, r3, #4
 8002f3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d015      	beq.n	8002f70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f44:	f7fd fd9c 	bl	8000a80 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7fd fd98 	bl	8000a80 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e0cb      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f62:	4b49      	ldr	r3, [pc, #292]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0ee      	beq.n	8002f4c <HAL_RCC_OscConfig+0x334>
 8002f6e:	e014      	b.n	8002f9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f70:	f7fd fd86 	bl	8000a80 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f78:	f7fd fd82 	bl	8000a80 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e0b5      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8e:	4b3e      	ldr	r3, [pc, #248]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1ee      	bne.n	8002f78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d105      	bne.n	8002fac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa0:	4b39      	ldr	r3, [pc, #228]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	4a38      	ldr	r2, [pc, #224]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002faa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80a1 	beq.w	80030f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fb6:	4b34      	ldr	r3, [pc, #208]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d05c      	beq.n	800307c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d141      	bne.n	800304e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fca:	4b31      	ldr	r3, [pc, #196]	; (8003090 <HAL_RCC_OscConfig+0x478>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fd fd56 	bl	8000a80 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7fd fd52 	bl	8000a80 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e087      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fea:	4b27      	ldr	r3, [pc, #156]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69da      	ldr	r2, [r3, #28]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	019b      	lsls	r3, r3, #6
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	085b      	lsrs	r3, r3, #1
 800300e:	3b01      	subs	r3, #1
 8003010:	041b      	lsls	r3, r3, #16
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	061b      	lsls	r3, r3, #24
 800301a:	491b      	ldr	r1, [pc, #108]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003020:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <HAL_RCC_OscConfig+0x478>)
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003026:	f7fd fd2b 	bl	8000a80 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302e:	f7fd fd27 	bl	8000a80 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e05c      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003040:	4b11      	ldr	r3, [pc, #68]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x416>
 800304c:	e054      	b.n	80030f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304e:	4b10      	ldr	r3, [pc, #64]	; (8003090 <HAL_RCC_OscConfig+0x478>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fd fd14 	bl	8000a80 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305c:	f7fd fd10 	bl	8000a80 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e045      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_RCC_OscConfig+0x470>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x444>
 800307a:	e03d      	b.n	80030f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d107      	bne.n	8003094 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e038      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
 8003088:	40023800 	.word	0x40023800
 800308c:	40007000 	.word	0x40007000
 8003090:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003094:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <HAL_RCC_OscConfig+0x4ec>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d028      	beq.n	80030f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d121      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d11a      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030c4:	4013      	ands	r3, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d111      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	085b      	lsrs	r3, r3, #1
 80030dc:	3b01      	subs	r3, #1
 80030de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d107      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800

08003108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0cc      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800311c:	4b68      	ldr	r3, [pc, #416]	; (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d90c      	bls.n	8003144 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312a:	4b65      	ldr	r3, [pc, #404]	; (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003132:	4b63      	ldr	r3, [pc, #396]	; (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d001      	beq.n	8003144 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0b8      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d020      	beq.n	8003192 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800315c:	4b59      	ldr	r3, [pc, #356]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	4a58      	ldr	r2, [pc, #352]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003166:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003174:	4b53      	ldr	r3, [pc, #332]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	4a52      	ldr	r2, [pc, #328]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800317e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003180:	4b50      	ldr	r3, [pc, #320]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	494d      	ldr	r1, [pc, #308]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d044      	beq.n	8003228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d107      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a6:	4b47      	ldr	r3, [pc, #284]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d119      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e07f      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d003      	beq.n	80031c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d107      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c6:	4b3f      	ldr	r3, [pc, #252]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e06f      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d6:	4b3b      	ldr	r3, [pc, #236]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e067      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e6:	4b37      	ldr	r3, [pc, #220]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f023 0203 	bic.w	r2, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4934      	ldr	r1, [pc, #208]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f8:	f7fd fc42 	bl	8000a80 <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	e00a      	b.n	8003216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003200:	f7fd fc3e 	bl	8000a80 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f241 3288 	movw	r2, #5000	; 0x1388
 800320e:	4293      	cmp	r3, r2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e04f      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003216:	4b2b      	ldr	r3, [pc, #172]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 020c 	and.w	r2, r3, #12
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	429a      	cmp	r2, r3
 8003226:	d1eb      	bne.n	8003200 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003228:	4b25      	ldr	r3, [pc, #148]	; (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d20c      	bcs.n	8003250 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003236:	4b22      	ldr	r3, [pc, #136]	; (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323e:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d001      	beq.n	8003250 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e032      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800325c:	4b19      	ldr	r3, [pc, #100]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4916      	ldr	r1, [pc, #88]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	4313      	orrs	r3, r2
 800326c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d009      	beq.n	800328e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800327a:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	490e      	ldr	r1, [pc, #56]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	4313      	orrs	r3, r2
 800328c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800328e:	f000 f821 	bl	80032d4 <HAL_RCC_GetSysClockFreq>
 8003292:	4602      	mov	r2, r0
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	490a      	ldr	r1, [pc, #40]	; (80032c8 <HAL_RCC_ClockConfig+0x1c0>)
 80032a0:	5ccb      	ldrb	r3, [r1, r3]
 80032a2:	fa22 f303 	lsr.w	r3, r2, r3
 80032a6:	4a09      	ldr	r2, [pc, #36]	; (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032aa:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <HAL_RCC_ClockConfig+0x1c8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd fba2 	bl	80009f8 <HAL_InitTick>

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40023c00 	.word	0x40023c00
 80032c4:	40023800 	.word	0x40023800
 80032c8:	08007bf0 	.word	0x08007bf0
 80032cc:	20000004 	.word	0x20000004
 80032d0:	20000008 	.word	0x20000008

080032d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d8:	b094      	sub	sp, #80	; 0x50
 80032da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	647b      	str	r3, [r7, #68]	; 0x44
 80032e0:	2300      	movs	r3, #0
 80032e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032e4:	2300      	movs	r3, #0
 80032e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032ec:	4b79      	ldr	r3, [pc, #484]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d00d      	beq.n	8003314 <HAL_RCC_GetSysClockFreq+0x40>
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	f200 80e1 	bhi.w	80034c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0x34>
 8003302:	2b04      	cmp	r3, #4
 8003304:	d003      	beq.n	800330e <HAL_RCC_GetSysClockFreq+0x3a>
 8003306:	e0db      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003308:	4b73      	ldr	r3, [pc, #460]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800330a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800330c:	e0db      	b.n	80034c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800330e:	4b73      	ldr	r3, [pc, #460]	; (80034dc <HAL_RCC_GetSysClockFreq+0x208>)
 8003310:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003312:	e0d8      	b.n	80034c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003314:	4b6f      	ldr	r3, [pc, #444]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800331c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800331e:	4b6d      	ldr	r3, [pc, #436]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d063      	beq.n	80033f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800332a:	4b6a      	ldr	r3, [pc, #424]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	099b      	lsrs	r3, r3, #6
 8003330:	2200      	movs	r2, #0
 8003332:	63bb      	str	r3, [r7, #56]	; 0x38
 8003334:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800333c:	633b      	str	r3, [r7, #48]	; 0x30
 800333e:	2300      	movs	r3, #0
 8003340:	637b      	str	r3, [r7, #52]	; 0x34
 8003342:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003346:	4622      	mov	r2, r4
 8003348:	462b      	mov	r3, r5
 800334a:	f04f 0000 	mov.w	r0, #0
 800334e:	f04f 0100 	mov.w	r1, #0
 8003352:	0159      	lsls	r1, r3, #5
 8003354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003358:	0150      	lsls	r0, r2, #5
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4621      	mov	r1, r4
 8003360:	1a51      	subs	r1, r2, r1
 8003362:	6139      	str	r1, [r7, #16]
 8003364:	4629      	mov	r1, r5
 8003366:	eb63 0301 	sbc.w	r3, r3, r1
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003378:	4659      	mov	r1, fp
 800337a:	018b      	lsls	r3, r1, #6
 800337c:	4651      	mov	r1, sl
 800337e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003382:	4651      	mov	r1, sl
 8003384:	018a      	lsls	r2, r1, #6
 8003386:	4651      	mov	r1, sl
 8003388:	ebb2 0801 	subs.w	r8, r2, r1
 800338c:	4659      	mov	r1, fp
 800338e:	eb63 0901 	sbc.w	r9, r3, r1
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800339e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033a6:	4690      	mov	r8, r2
 80033a8:	4699      	mov	r9, r3
 80033aa:	4623      	mov	r3, r4
 80033ac:	eb18 0303 	adds.w	r3, r8, r3
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	462b      	mov	r3, r5
 80033b4:	eb49 0303 	adc.w	r3, r9, r3
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033c6:	4629      	mov	r1, r5
 80033c8:	024b      	lsls	r3, r1, #9
 80033ca:	4621      	mov	r1, r4
 80033cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033d0:	4621      	mov	r1, r4
 80033d2:	024a      	lsls	r2, r1, #9
 80033d4:	4610      	mov	r0, r2
 80033d6:	4619      	mov	r1, r3
 80033d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033da:	2200      	movs	r2, #0
 80033dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80033de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033e4:	f7fc fef0 	bl	80001c8 <__aeabi_uldivmod>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4613      	mov	r3, r2
 80033ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033f0:	e058      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f2:	4b38      	ldr	r3, [pc, #224]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	099b      	lsrs	r3, r3, #6
 80033f8:	2200      	movs	r2, #0
 80033fa:	4618      	mov	r0, r3
 80033fc:	4611      	mov	r1, r2
 80033fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003402:	623b      	str	r3, [r7, #32]
 8003404:	2300      	movs	r3, #0
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
 8003408:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800340c:	4642      	mov	r2, r8
 800340e:	464b      	mov	r3, r9
 8003410:	f04f 0000 	mov.w	r0, #0
 8003414:	f04f 0100 	mov.w	r1, #0
 8003418:	0159      	lsls	r1, r3, #5
 800341a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800341e:	0150      	lsls	r0, r2, #5
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4641      	mov	r1, r8
 8003426:	ebb2 0a01 	subs.w	sl, r2, r1
 800342a:	4649      	mov	r1, r9
 800342c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800343c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003440:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003444:	ebb2 040a 	subs.w	r4, r2, sl
 8003448:	eb63 050b 	sbc.w	r5, r3, fp
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	00eb      	lsls	r3, r5, #3
 8003456:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800345a:	00e2      	lsls	r2, r4, #3
 800345c:	4614      	mov	r4, r2
 800345e:	461d      	mov	r5, r3
 8003460:	4643      	mov	r3, r8
 8003462:	18e3      	adds	r3, r4, r3
 8003464:	603b      	str	r3, [r7, #0]
 8003466:	464b      	mov	r3, r9
 8003468:	eb45 0303 	adc.w	r3, r5, r3
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	e9d7 4500 	ldrd	r4, r5, [r7]
 800347a:	4629      	mov	r1, r5
 800347c:	028b      	lsls	r3, r1, #10
 800347e:	4621      	mov	r1, r4
 8003480:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003484:	4621      	mov	r1, r4
 8003486:	028a      	lsls	r2, r1, #10
 8003488:	4610      	mov	r0, r2
 800348a:	4619      	mov	r1, r3
 800348c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800348e:	2200      	movs	r2, #0
 8003490:	61bb      	str	r3, [r7, #24]
 8003492:	61fa      	str	r2, [r7, #28]
 8003494:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003498:	f7fc fe96 	bl	80001c8 <__aeabi_uldivmod>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4613      	mov	r3, r2
 80034a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	0c1b      	lsrs	r3, r3, #16
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	3301      	adds	r3, #1
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80034b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034be:	e002      	b.n	80034c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034c0:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80034c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3750      	adds	r7, #80	; 0x50
 80034cc:	46bd      	mov	sp, r7
 80034ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034d2:	bf00      	nop
 80034d4:	40023800 	.word	0x40023800
 80034d8:	00f42400 	.word	0x00f42400
 80034dc:	007a1200 	.word	0x007a1200

080034e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034e6:	681b      	ldr	r3, [r3, #0]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	20000004 	.word	0x20000004

080034f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034fc:	f7ff fff0 	bl	80034e0 <HAL_RCC_GetHCLKFreq>
 8003500:	4602      	mov	r2, r0
 8003502:	4b05      	ldr	r3, [pc, #20]	; (8003518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	0a9b      	lsrs	r3, r3, #10
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	4903      	ldr	r1, [pc, #12]	; (800351c <HAL_RCC_GetPCLK1Freq+0x24>)
 800350e:	5ccb      	ldrb	r3, [r1, r3]
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40023800 	.word	0x40023800
 800351c:	08007c00 	.word	0x08007c00

08003520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003524:	f7ff ffdc 	bl	80034e0 <HAL_RCC_GetHCLKFreq>
 8003528:	4602      	mov	r2, r0
 800352a:	4b05      	ldr	r3, [pc, #20]	; (8003540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	0b5b      	lsrs	r3, r3, #13
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	4903      	ldr	r1, [pc, #12]	; (8003544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003536:	5ccb      	ldrb	r3, [r1, r3]
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800353c:	4618      	mov	r0, r3
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40023800 	.word	0x40023800
 8003544:	08007c00 	.word	0x08007c00

08003548 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e03f      	b.n	80035da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fd f92c 	bl	80007cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2224      	movs	r2, #36	; 0x24
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800358a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fa9b 	bl	8003ac8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695a      	ldr	r2, [r3, #20]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	4613      	mov	r3, r2
 80035ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	d11d      	bne.n	8003638 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <HAL_UART_Receive_DMA+0x26>
 8003602:	88fb      	ldrh	r3, [r7, #6]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e016      	b.n	800363a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_UART_Receive_DMA+0x38>
 8003616:	2302      	movs	r3, #2
 8003618:	e00f      	b.n	800363a <HAL_UART_Receive_DMA+0x58>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	461a      	mov	r2, r3
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f920 	bl	8003874 <UART_Start_Receive_DMA>
 8003634:	4603      	mov	r3, r0
 8003636:	e000      	b.n	800363a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003638:	2302      	movs	r3, #2
  }
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	460b      	mov	r3, r1
 8003674:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b09c      	sub	sp, #112	; 0x70
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369a:	2b00      	cmp	r3, #0
 800369c:	d172      	bne.n	8003784 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800369e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a0:	2200      	movs	r2, #0
 80036a2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	330c      	adds	r3, #12
 80036aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ae:	e853 3f00 	ldrex	r3, [r3]
 80036b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80036bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	330c      	adds	r3, #12
 80036c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80036c6:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036cc:	e841 2300 	strex	r3, r2, [r1]
 80036d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e5      	bne.n	80036a4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3314      	adds	r3, #20
 80036de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e2:	e853 3f00 	ldrex	r3, [r3]
 80036e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ea:	f023 0301 	bic.w	r3, r3, #1
 80036ee:	667b      	str	r3, [r7, #100]	; 0x64
 80036f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	3314      	adds	r3, #20
 80036f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80036f8:	647a      	str	r2, [r7, #68]	; 0x44
 80036fa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003700:	e841 2300 	strex	r3, r2, [r1]
 8003704:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1e5      	bne.n	80036d8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800370c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3314      	adds	r3, #20
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	e853 3f00 	ldrex	r3, [r3]
 800371a:	623b      	str	r3, [r7, #32]
   return(result);
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003722:	663b      	str	r3, [r7, #96]	; 0x60
 8003724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3314      	adds	r3, #20
 800372a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800372c:	633a      	str	r2, [r7, #48]	; 0x30
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003730:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003734:	e841 2300 	strex	r3, r2, [r1]
 8003738:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1e5      	bne.n	800370c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003742:	2220      	movs	r2, #32
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800374a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374c:	2b01      	cmp	r3, #1
 800374e:	d119      	bne.n	8003784 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	330c      	adds	r3, #12
 8003756:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	e853 3f00 	ldrex	r3, [r3]
 800375e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0310 	bic.w	r3, r3, #16
 8003766:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	330c      	adds	r3, #12
 800376e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003770:	61fa      	str	r2, [r7, #28]
 8003772:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003774:	69b9      	ldr	r1, [r7, #24]
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	617b      	str	r3, [r7, #20]
   return(result);
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e5      	bne.n	8003750 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	2b01      	cmp	r3, #1
 800378a:	d106      	bne.n	800379a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800378c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800378e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003790:	4619      	mov	r1, r3
 8003792:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003794:	f7ff ff69 	bl	800366a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003798:	e002      	b.n	80037a0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800379a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800379c:	f7fc fe96 	bl	80004cc <HAL_UART_RxCpltCallback>
}
 80037a0:	bf00      	nop
 80037a2:	3770      	adds	r7, #112	; 0x70
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d108      	bne.n	80037d0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037c2:	085b      	lsrs	r3, r3, #1
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	4619      	mov	r1, r3
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f7ff ff4e 	bl	800366a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80037ce:	e002      	b.n	80037d6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f7ff ff36 	bl	8003642 <HAL_UART_RxHalfCpltCallback>
}
 80037d6:	bf00      	nop
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fa:	2b80      	cmp	r3, #128	; 0x80
 80037fc:	bf0c      	ite	eq
 80037fe:	2301      	moveq	r3, #1
 8003800:	2300      	movne	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b21      	cmp	r3, #33	; 0x21
 8003810:	d108      	bne.n	8003824 <UART_DMAError+0x46>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2200      	movs	r2, #0
 800381c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800381e:	68b8      	ldr	r0, [r7, #8]
 8003820:	f000 f8c6 	bl	80039b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	bf0c      	ite	eq
 8003832:	2301      	moveq	r3, #1
 8003834:	2300      	movne	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b22      	cmp	r3, #34	; 0x22
 8003844:	d108      	bne.n	8003858 <UART_DMAError+0x7a>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2200      	movs	r2, #0
 8003850:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003852:	68b8      	ldr	r0, [r7, #8]
 8003854:	f000 f8d4 	bl	8003a00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	f043 0210 	orr.w	r2, r3, #16
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003864:	68b8      	ldr	r0, [r7, #8]
 8003866:	f7ff fef6 	bl	8003656 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b098      	sub	sp, #96	; 0x60
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	4613      	mov	r3, r2
 8003880:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	88fa      	ldrh	r2, [r7, #6]
 800388c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2222      	movs	r2, #34	; 0x22
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	4a40      	ldr	r2, [pc, #256]	; (80039a4 <UART_Start_Receive_DMA+0x130>)
 80038a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	4a3f      	ldr	r2, [pc, #252]	; (80039a8 <UART_Start_Receive_DMA+0x134>)
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	4a3e      	ldr	r2, [pc, #248]	; (80039ac <UART_Start_Receive_DMA+0x138>)
 80038b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	2200      	movs	r2, #0
 80038ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80038bc:	f107 0308 	add.w	r3, r7, #8
 80038c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3304      	adds	r3, #4
 80038cc:	4619      	mov	r1, r3
 80038ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	f7fd fac4 	bl	8000e60 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80038d8:	2300      	movs	r3, #0
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	613b      	str	r3, [r7, #16]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d019      	beq.n	8003932 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	330c      	adds	r3, #12
 8003904:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800390e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003914:	65bb      	str	r3, [r7, #88]	; 0x58
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	330c      	adds	r3, #12
 800391c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800391e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003920:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003924:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800392c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e5      	bne.n	80038fe <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3314      	adds	r3, #20
 8003938:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	657b      	str	r3, [r7, #84]	; 0x54
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3314      	adds	r3, #20
 8003950:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003952:	63ba      	str	r2, [r7, #56]	; 0x38
 8003954:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e5      	bne.n	8003932 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3314      	adds	r3, #20
 800396c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	617b      	str	r3, [r7, #20]
   return(result);
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800397c:	653b      	str	r3, [r7, #80]	; 0x50
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3314      	adds	r3, #20
 8003984:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003986:	627a      	str	r2, [r7, #36]	; 0x24
 8003988:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	6a39      	ldr	r1, [r7, #32]
 800398c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	61fb      	str	r3, [r7, #28]
   return(result);
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e5      	bne.n	8003966 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3760      	adds	r7, #96	; 0x60
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	08003683 	.word	0x08003683
 80039a8:	080037a9 	.word	0x080037a9
 80039ac:	080037df 	.word	0x080037df

080039b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	; 0x24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	330c      	adds	r3, #12
 80039be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	e853 3f00 	ldrex	r3, [r3]
 80039c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039ce:	61fb      	str	r3, [r7, #28]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	330c      	adds	r3, #12
 80039d6:	69fa      	ldr	r2, [r7, #28]
 80039d8:	61ba      	str	r2, [r7, #24]
 80039da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039dc:	6979      	ldr	r1, [r7, #20]
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	e841 2300 	strex	r3, r2, [r1]
 80039e4:	613b      	str	r3, [r7, #16]
   return(result);
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1e5      	bne.n	80039b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80039f4:	bf00      	nop
 80039f6:	3724      	adds	r7, #36	; 0x24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b095      	sub	sp, #84	; 0x54
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	330c      	adds	r3, #12
 8003a0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a12:	e853 3f00 	ldrex	r3, [r3]
 8003a16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	330c      	adds	r3, #12
 8003a26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a28:	643a      	str	r2, [r7, #64]	; 0x40
 8003a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a30:	e841 2300 	strex	r3, r2, [r1]
 8003a34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1e5      	bne.n	8003a08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3314      	adds	r3, #20
 8003a42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	e853 3f00 	ldrex	r3, [r3]
 8003a4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f023 0301 	bic.w	r3, r3, #1
 8003a52:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3314      	adds	r3, #20
 8003a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a64:	e841 2300 	strex	r3, r2, [r1]
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1e5      	bne.n	8003a3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d119      	bne.n	8003aac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	e853 3f00 	ldrex	r3, [r3]
 8003a86:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f023 0310 	bic.w	r3, r3, #16
 8003a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	330c      	adds	r3, #12
 8003a96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a98:	61ba      	str	r2, [r7, #24]
 8003a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9c:	6979      	ldr	r1, [r7, #20]
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	e841 2300 	strex	r3, r2, [r1]
 8003aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e5      	bne.n	8003a78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003aba:	bf00      	nop
 8003abc:	3754      	adds	r7, #84	; 0x54
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
	...

08003ac8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003acc:	b0c0      	sub	sp, #256	; 0x100
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae4:	68d9      	ldr	r1, [r3, #12]
 8003ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	ea40 0301 	orr.w	r3, r0, r1
 8003af0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	431a      	orrs	r2, r3
 8003b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b20:	f021 010c 	bic.w	r1, r1, #12
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b42:	6999      	ldr	r1, [r3, #24]
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	ea40 0301 	orr.w	r3, r0, r1
 8003b4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	4b8f      	ldr	r3, [pc, #572]	; (8003d94 <UART_SetConfig+0x2cc>)
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d005      	beq.n	8003b68 <UART_SetConfig+0xa0>
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4b8d      	ldr	r3, [pc, #564]	; (8003d98 <UART_SetConfig+0x2d0>)
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d104      	bne.n	8003b72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b68:	f7ff fcda 	bl	8003520 <HAL_RCC_GetPCLK2Freq>
 8003b6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b70:	e003      	b.n	8003b7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b72:	f7ff fcc1 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8003b76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b84:	f040 810c 	bne.w	8003da0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b9a:	4622      	mov	r2, r4
 8003b9c:	462b      	mov	r3, r5
 8003b9e:	1891      	adds	r1, r2, r2
 8003ba0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ba2:	415b      	adcs	r3, r3
 8003ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ba6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003baa:	4621      	mov	r1, r4
 8003bac:	eb12 0801 	adds.w	r8, r2, r1
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	eb43 0901 	adc.w	r9, r3, r1
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bca:	4690      	mov	r8, r2
 8003bcc:	4699      	mov	r9, r3
 8003bce:	4623      	mov	r3, r4
 8003bd0:	eb18 0303 	adds.w	r3, r8, r3
 8003bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bd8:	462b      	mov	r3, r5
 8003bda:	eb49 0303 	adc.w	r3, r9, r3
 8003bde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003bf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	18db      	adds	r3, r3, r3
 8003bfa:	653b      	str	r3, [r7, #80]	; 0x50
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	eb42 0303 	adc.w	r3, r2, r3
 8003c02:	657b      	str	r3, [r7, #84]	; 0x54
 8003c04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c0c:	f7fc fadc 	bl	80001c8 <__aeabi_uldivmod>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4b61      	ldr	r3, [pc, #388]	; (8003d9c <UART_SetConfig+0x2d4>)
 8003c16:	fba3 2302 	umull	r2, r3, r3, r2
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	011c      	lsls	r4, r3, #4
 8003c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c30:	4642      	mov	r2, r8
 8003c32:	464b      	mov	r3, r9
 8003c34:	1891      	adds	r1, r2, r2
 8003c36:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c38:	415b      	adcs	r3, r3
 8003c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c40:	4641      	mov	r1, r8
 8003c42:	eb12 0a01 	adds.w	sl, r2, r1
 8003c46:	4649      	mov	r1, r9
 8003c48:	eb43 0b01 	adc.w	fp, r3, r1
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c60:	4692      	mov	sl, r2
 8003c62:	469b      	mov	fp, r3
 8003c64:	4643      	mov	r3, r8
 8003c66:	eb1a 0303 	adds.w	r3, sl, r3
 8003c6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c6e:	464b      	mov	r3, r9
 8003c70:	eb4b 0303 	adc.w	r3, fp, r3
 8003c74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	18db      	adds	r3, r3, r3
 8003c90:	643b      	str	r3, [r7, #64]	; 0x40
 8003c92:	4613      	mov	r3, r2
 8003c94:	eb42 0303 	adc.w	r3, r2, r3
 8003c98:	647b      	str	r3, [r7, #68]	; 0x44
 8003c9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ca2:	f7fc fa91 	bl	80001c8 <__aeabi_uldivmod>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4611      	mov	r1, r2
 8003cac:	4b3b      	ldr	r3, [pc, #236]	; (8003d9c <UART_SetConfig+0x2d4>)
 8003cae:	fba3 2301 	umull	r2, r3, r3, r1
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	2264      	movs	r2, #100	; 0x64
 8003cb6:	fb02 f303 	mul.w	r3, r2, r3
 8003cba:	1acb      	subs	r3, r1, r3
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cc2:	4b36      	ldr	r3, [pc, #216]	; (8003d9c <UART_SetConfig+0x2d4>)
 8003cc4:	fba3 2302 	umull	r2, r3, r3, r2
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cd0:	441c      	add	r4, r3
 8003cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cdc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ce0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ce4:	4642      	mov	r2, r8
 8003ce6:	464b      	mov	r3, r9
 8003ce8:	1891      	adds	r1, r2, r2
 8003cea:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cec:	415b      	adcs	r3, r3
 8003cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cf4:	4641      	mov	r1, r8
 8003cf6:	1851      	adds	r1, r2, r1
 8003cf8:	6339      	str	r1, [r7, #48]	; 0x30
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	414b      	adcs	r3, r1
 8003cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d0c:	4659      	mov	r1, fp
 8003d0e:	00cb      	lsls	r3, r1, #3
 8003d10:	4651      	mov	r1, sl
 8003d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d16:	4651      	mov	r1, sl
 8003d18:	00ca      	lsls	r2, r1, #3
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4603      	mov	r3, r0
 8003d20:	4642      	mov	r2, r8
 8003d22:	189b      	adds	r3, r3, r2
 8003d24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d28:	464b      	mov	r3, r9
 8003d2a:	460a      	mov	r2, r1
 8003d2c:	eb42 0303 	adc.w	r3, r2, r3
 8003d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d48:	460b      	mov	r3, r1
 8003d4a:	18db      	adds	r3, r3, r3
 8003d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d4e:	4613      	mov	r3, r2
 8003d50:	eb42 0303 	adc.w	r3, r2, r3
 8003d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d5e:	f7fc fa33 	bl	80001c8 <__aeabi_uldivmod>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <UART_SetConfig+0x2d4>)
 8003d68:	fba3 1302 	umull	r1, r3, r3, r2
 8003d6c:	095b      	lsrs	r3, r3, #5
 8003d6e:	2164      	movs	r1, #100	; 0x64
 8003d70:	fb01 f303 	mul.w	r3, r1, r3
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	3332      	adds	r3, #50	; 0x32
 8003d7a:	4a08      	ldr	r2, [pc, #32]	; (8003d9c <UART_SetConfig+0x2d4>)
 8003d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	f003 0207 	and.w	r2, r3, #7
 8003d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4422      	add	r2, r4
 8003d8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d90:	e105      	b.n	8003f9e <UART_SetConfig+0x4d6>
 8003d92:	bf00      	nop
 8003d94:	40011000 	.word	0x40011000
 8003d98:	40011400 	.word	0x40011400
 8003d9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003da4:	2200      	movs	r2, #0
 8003da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003daa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003dae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003db2:	4642      	mov	r2, r8
 8003db4:	464b      	mov	r3, r9
 8003db6:	1891      	adds	r1, r2, r2
 8003db8:	6239      	str	r1, [r7, #32]
 8003dba:	415b      	adcs	r3, r3
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dc2:	4641      	mov	r1, r8
 8003dc4:	1854      	adds	r4, r2, r1
 8003dc6:	4649      	mov	r1, r9
 8003dc8:	eb43 0501 	adc.w	r5, r3, r1
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	00eb      	lsls	r3, r5, #3
 8003dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dda:	00e2      	lsls	r2, r4, #3
 8003ddc:	4614      	mov	r4, r2
 8003dde:	461d      	mov	r5, r3
 8003de0:	4643      	mov	r3, r8
 8003de2:	18e3      	adds	r3, r4, r3
 8003de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003de8:	464b      	mov	r3, r9
 8003dea:	eb45 0303 	adc.w	r3, r5, r3
 8003dee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	f04f 0300 	mov.w	r3, #0
 8003e0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e0e:	4629      	mov	r1, r5
 8003e10:	008b      	lsls	r3, r1, #2
 8003e12:	4621      	mov	r1, r4
 8003e14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e18:	4621      	mov	r1, r4
 8003e1a:	008a      	lsls	r2, r1, #2
 8003e1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e20:	f7fc f9d2 	bl	80001c8 <__aeabi_uldivmod>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4b60      	ldr	r3, [pc, #384]	; (8003fac <UART_SetConfig+0x4e4>)
 8003e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	011c      	lsls	r4, r3, #4
 8003e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e36:	2200      	movs	r2, #0
 8003e38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e44:	4642      	mov	r2, r8
 8003e46:	464b      	mov	r3, r9
 8003e48:	1891      	adds	r1, r2, r2
 8003e4a:	61b9      	str	r1, [r7, #24]
 8003e4c:	415b      	adcs	r3, r3
 8003e4e:	61fb      	str	r3, [r7, #28]
 8003e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e54:	4641      	mov	r1, r8
 8003e56:	1851      	adds	r1, r2, r1
 8003e58:	6139      	str	r1, [r7, #16]
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	414b      	adcs	r3, r1
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e6c:	4659      	mov	r1, fp
 8003e6e:	00cb      	lsls	r3, r1, #3
 8003e70:	4651      	mov	r1, sl
 8003e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e76:	4651      	mov	r1, sl
 8003e78:	00ca      	lsls	r2, r1, #3
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4603      	mov	r3, r0
 8003e80:	4642      	mov	r2, r8
 8003e82:	189b      	adds	r3, r3, r2
 8003e84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e88:	464b      	mov	r3, r9
 8003e8a:	460a      	mov	r2, r1
 8003e8c:	eb42 0303 	adc.w	r3, r2, r3
 8003e90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003eac:	4649      	mov	r1, r9
 8003eae:	008b      	lsls	r3, r1, #2
 8003eb0:	4641      	mov	r1, r8
 8003eb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eb6:	4641      	mov	r1, r8
 8003eb8:	008a      	lsls	r2, r1, #2
 8003eba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ebe:	f7fc f983 	bl	80001c8 <__aeabi_uldivmod>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4b39      	ldr	r3, [pc, #228]	; (8003fac <UART_SetConfig+0x4e4>)
 8003ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	2164      	movs	r1, #100	; 0x64
 8003ed0:	fb01 f303 	mul.w	r3, r1, r3
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	3332      	adds	r3, #50	; 0x32
 8003eda:	4a34      	ldr	r2, [pc, #208]	; (8003fac <UART_SetConfig+0x4e4>)
 8003edc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ee6:	441c      	add	r4, r3
 8003ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eec:	2200      	movs	r2, #0
 8003eee:	673b      	str	r3, [r7, #112]	; 0x70
 8003ef0:	677a      	str	r2, [r7, #116]	; 0x74
 8003ef2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ef6:	4642      	mov	r2, r8
 8003ef8:	464b      	mov	r3, r9
 8003efa:	1891      	adds	r1, r2, r2
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	415b      	adcs	r3, r3
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f06:	4641      	mov	r1, r8
 8003f08:	1851      	adds	r1, r2, r1
 8003f0a:	6039      	str	r1, [r7, #0]
 8003f0c:	4649      	mov	r1, r9
 8003f0e:	414b      	adcs	r3, r1
 8003f10:	607b      	str	r3, [r7, #4]
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	f04f 0300 	mov.w	r3, #0
 8003f1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f1e:	4659      	mov	r1, fp
 8003f20:	00cb      	lsls	r3, r1, #3
 8003f22:	4651      	mov	r1, sl
 8003f24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f28:	4651      	mov	r1, sl
 8003f2a:	00ca      	lsls	r2, r1, #3
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4603      	mov	r3, r0
 8003f32:	4642      	mov	r2, r8
 8003f34:	189b      	adds	r3, r3, r2
 8003f36:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f38:	464b      	mov	r3, r9
 8003f3a:	460a      	mov	r2, r1
 8003f3c:	eb42 0303 	adc.w	r3, r2, r3
 8003f40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	663b      	str	r3, [r7, #96]	; 0x60
 8003f4c:	667a      	str	r2, [r7, #100]	; 0x64
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f5a:	4649      	mov	r1, r9
 8003f5c:	008b      	lsls	r3, r1, #2
 8003f5e:	4641      	mov	r1, r8
 8003f60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f64:	4641      	mov	r1, r8
 8003f66:	008a      	lsls	r2, r1, #2
 8003f68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f6c:	f7fc f92c 	bl	80001c8 <__aeabi_uldivmod>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <UART_SetConfig+0x4e4>)
 8003f76:	fba3 1302 	umull	r1, r3, r3, r2
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	2164      	movs	r1, #100	; 0x64
 8003f7e:	fb01 f303 	mul.w	r3, r1, r3
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	3332      	adds	r3, #50	; 0x32
 8003f88:	4a08      	ldr	r2, [pc, #32]	; (8003fac <UART_SetConfig+0x4e4>)
 8003f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	f003 020f 	and.w	r2, r3, #15
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4422      	add	r2, r4
 8003f9c:	609a      	str	r2, [r3, #8]
}
 8003f9e:	bf00      	nop
 8003fa0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003faa:	bf00      	nop
 8003fac:	51eb851f 	.word	0x51eb851f

08003fb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	f107 001c 	add.w	r0, r7, #28
 8003fbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d122      	bne.n	800400e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d105      	bne.n	8004002 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f001 fbee 	bl	80057e4 <USB_CoreReset>
 8004008:	4603      	mov	r3, r0
 800400a:	73fb      	strb	r3, [r7, #15]
 800400c:	e01a      	b.n	8004044 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f001 fbe2 	bl	80057e4 <USB_CoreReset>
 8004020:	4603      	mov	r3, r0
 8004022:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	639a      	str	r2, [r3, #56]	; 0x38
 8004036:	e005      	b.n	8004044 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004046:	2b01      	cmp	r3, #1
 8004048:	d10b      	bne.n	8004062 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f043 0206 	orr.w	r2, r3, #6
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f043 0220 	orr.w	r2, r3, #32
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004062:	7bfb      	ldrb	r3, [r7, #15]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800406e:	b004      	add	sp, #16
 8004070:	4770      	bx	lr
	...

08004074 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	4613      	mov	r3, r2
 8004080:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004082:	79fb      	ldrb	r3, [r7, #7]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d165      	bne.n	8004154 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4a41      	ldr	r2, [pc, #260]	; (8004190 <USB_SetTurnaroundTime+0x11c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d906      	bls.n	800409e <USB_SetTurnaroundTime+0x2a>
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	4a40      	ldr	r2, [pc, #256]	; (8004194 <USB_SetTurnaroundTime+0x120>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d202      	bcs.n	800409e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004098:	230f      	movs	r3, #15
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	e062      	b.n	8004164 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	4a3c      	ldr	r2, [pc, #240]	; (8004194 <USB_SetTurnaroundTime+0x120>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d306      	bcc.n	80040b4 <USB_SetTurnaroundTime+0x40>
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	4a3b      	ldr	r2, [pc, #236]	; (8004198 <USB_SetTurnaroundTime+0x124>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d202      	bcs.n	80040b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80040ae:	230e      	movs	r3, #14
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	e057      	b.n	8004164 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4a38      	ldr	r2, [pc, #224]	; (8004198 <USB_SetTurnaroundTime+0x124>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d306      	bcc.n	80040ca <USB_SetTurnaroundTime+0x56>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4a37      	ldr	r2, [pc, #220]	; (800419c <USB_SetTurnaroundTime+0x128>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d202      	bcs.n	80040ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80040c4:	230d      	movs	r3, #13
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	e04c      	b.n	8004164 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	4a33      	ldr	r2, [pc, #204]	; (800419c <USB_SetTurnaroundTime+0x128>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d306      	bcc.n	80040e0 <USB_SetTurnaroundTime+0x6c>
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4a32      	ldr	r2, [pc, #200]	; (80041a0 <USB_SetTurnaroundTime+0x12c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d802      	bhi.n	80040e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80040da:	230c      	movs	r3, #12
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	e041      	b.n	8004164 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4a2f      	ldr	r2, [pc, #188]	; (80041a0 <USB_SetTurnaroundTime+0x12c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d906      	bls.n	80040f6 <USB_SetTurnaroundTime+0x82>
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4a2e      	ldr	r2, [pc, #184]	; (80041a4 <USB_SetTurnaroundTime+0x130>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d802      	bhi.n	80040f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80040f0:	230b      	movs	r3, #11
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	e036      	b.n	8004164 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	4a2a      	ldr	r2, [pc, #168]	; (80041a4 <USB_SetTurnaroundTime+0x130>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d906      	bls.n	800410c <USB_SetTurnaroundTime+0x98>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	4a29      	ldr	r2, [pc, #164]	; (80041a8 <USB_SetTurnaroundTime+0x134>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d802      	bhi.n	800410c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004106:	230a      	movs	r3, #10
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	e02b      	b.n	8004164 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4a26      	ldr	r2, [pc, #152]	; (80041a8 <USB_SetTurnaroundTime+0x134>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d906      	bls.n	8004122 <USB_SetTurnaroundTime+0xae>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4a25      	ldr	r2, [pc, #148]	; (80041ac <USB_SetTurnaroundTime+0x138>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d202      	bcs.n	8004122 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800411c:	2309      	movs	r3, #9
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	e020      	b.n	8004164 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	4a21      	ldr	r2, [pc, #132]	; (80041ac <USB_SetTurnaroundTime+0x138>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d306      	bcc.n	8004138 <USB_SetTurnaroundTime+0xc4>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	4a20      	ldr	r2, [pc, #128]	; (80041b0 <USB_SetTurnaroundTime+0x13c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d802      	bhi.n	8004138 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004132:	2308      	movs	r3, #8
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	e015      	b.n	8004164 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4a1d      	ldr	r2, [pc, #116]	; (80041b0 <USB_SetTurnaroundTime+0x13c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d906      	bls.n	800414e <USB_SetTurnaroundTime+0xda>
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4a1c      	ldr	r2, [pc, #112]	; (80041b4 <USB_SetTurnaroundTime+0x140>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d202      	bcs.n	800414e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004148:	2307      	movs	r3, #7
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	e00a      	b.n	8004164 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800414e:	2306      	movs	r3, #6
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	e007      	b.n	8004164 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004154:	79fb      	ldrb	r3, [r7, #7]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d102      	bne.n	8004160 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800415a:	2309      	movs	r3, #9
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	e001      	b.n	8004164 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004160:	2309      	movs	r3, #9
 8004162:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	029b      	lsls	r3, r3, #10
 8004178:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800417c:	431a      	orrs	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	371c      	adds	r7, #28
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	00d8acbf 	.word	0x00d8acbf
 8004194:	00e4e1c0 	.word	0x00e4e1c0
 8004198:	00f42400 	.word	0x00f42400
 800419c:	01067380 	.word	0x01067380
 80041a0:	011a499f 	.word	0x011a499f
 80041a4:	01312cff 	.word	0x01312cff
 80041a8:	014ca43f 	.word	0x014ca43f
 80041ac:	016e3600 	.word	0x016e3600
 80041b0:	01a6ab1f 	.word	0x01a6ab1f
 80041b4:	01e84800 	.word	0x01e84800

080041b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f043 0201 	orr.w	r2, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f023 0201 	bic.w	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d115      	bne.n	800424a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800422a:	2001      	movs	r0, #1
 800422c:	f7fc fc34 	bl	8000a98 <HAL_Delay>
      ms++;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3301      	adds	r3, #1
 8004234:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f001 fa45 	bl	80056c6 <USB_GetMode>
 800423c:	4603      	mov	r3, r0
 800423e:	2b01      	cmp	r3, #1
 8004240:	d01e      	beq.n	8004280 <USB_SetCurrentMode+0x84>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b31      	cmp	r3, #49	; 0x31
 8004246:	d9f0      	bls.n	800422a <USB_SetCurrentMode+0x2e>
 8004248:	e01a      	b.n	8004280 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d115      	bne.n	800427c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800425c:	2001      	movs	r0, #1
 800425e:	f7fc fc1b 	bl	8000a98 <HAL_Delay>
      ms++;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3301      	adds	r3, #1
 8004266:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f001 fa2c 	bl	80056c6 <USB_GetMode>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <USB_SetCurrentMode+0x84>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b31      	cmp	r3, #49	; 0x31
 8004278:	d9f0      	bls.n	800425c <USB_SetCurrentMode+0x60>
 800427a:	e001      	b.n	8004280 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e005      	b.n	800428c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b32      	cmp	r3, #50	; 0x32
 8004284:	d101      	bne.n	800428a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004294:	b084      	sub	sp, #16
 8004296:	b580      	push	{r7, lr}
 8004298:	b086      	sub	sp, #24
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80042a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80042ae:	2300      	movs	r3, #0
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	e009      	b.n	80042c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	3340      	adds	r3, #64	; 0x40
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	2200      	movs	r2, #0
 80042c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	3301      	adds	r3, #1
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	2b0e      	cmp	r3, #14
 80042cc:	d9f2      	bls.n	80042b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80042ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d11c      	bne.n	800430e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042e2:	f043 0302 	orr.w	r3, r3, #2
 80042e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004304:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	639a      	str	r2, [r3, #56]	; 0x38
 800430c:	e00b      	b.n	8004326 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800432c:	461a      	mov	r2, r3
 800432e:	2300      	movs	r3, #0
 8004330:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004338:	4619      	mov	r1, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004340:	461a      	mov	r2, r3
 8004342:	680b      	ldr	r3, [r1, #0]
 8004344:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004348:	2b01      	cmp	r3, #1
 800434a:	d10c      	bne.n	8004366 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434e:	2b00      	cmp	r3, #0
 8004350:	d104      	bne.n	800435c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004352:	2100      	movs	r1, #0
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f965 	bl	8004624 <USB_SetDevSpeed>
 800435a:	e008      	b.n	800436e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800435c:	2101      	movs	r1, #1
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f960 	bl	8004624 <USB_SetDevSpeed>
 8004364:	e003      	b.n	800436e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004366:	2103      	movs	r1, #3
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f95b 	bl	8004624 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800436e:	2110      	movs	r1, #16
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f8f3 	bl	800455c <USB_FlushTxFifo>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f91f 	bl	80045c4 <USB_FlushRxFifo>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004396:	461a      	mov	r2, r3
 8004398:	2300      	movs	r3, #0
 800439a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a2:	461a      	mov	r2, r3
 80043a4:	2300      	movs	r3, #0
 80043a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ae:	461a      	mov	r2, r3
 80043b0:	2300      	movs	r3, #0
 80043b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043b4:	2300      	movs	r3, #0
 80043b6:	613b      	str	r3, [r7, #16]
 80043b8:	e043      	b.n	8004442 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043d0:	d118      	bne.n	8004404 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10a      	bne.n	80043ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e4:	461a      	mov	r2, r3
 80043e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	e013      	b.n	8004416 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043fa:	461a      	mov	r2, r3
 80043fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	e008      	b.n	8004416 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004410:	461a      	mov	r2, r3
 8004412:	2300      	movs	r3, #0
 8004414:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004422:	461a      	mov	r2, r3
 8004424:	2300      	movs	r3, #0
 8004426:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004434:	461a      	mov	r2, r3
 8004436:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800443a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	3301      	adds	r3, #1
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	429a      	cmp	r2, r3
 8004448:	d3b7      	bcc.n	80043ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800444a:	2300      	movs	r3, #0
 800444c:	613b      	str	r3, [r7, #16]
 800444e:	e043      	b.n	80044d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004462:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004466:	d118      	bne.n	800449a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10a      	bne.n	8004484 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4413      	add	r3, r2
 8004476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447a:	461a      	mov	r2, r3
 800447c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	e013      	b.n	80044ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004490:	461a      	mov	r2, r3
 8004492:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	e008      	b.n	80044ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a6:	461a      	mov	r2, r3
 80044a8:	2300      	movs	r3, #0
 80044aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b8:	461a      	mov	r2, r3
 80044ba:	2300      	movs	r3, #0
 80044bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ca:	461a      	mov	r2, r3
 80044cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	3301      	adds	r3, #1
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d3b7      	bcc.n	8004450 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004500:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	2b00      	cmp	r3, #0
 8004506:	d105      	bne.n	8004514 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	f043 0210 	orr.w	r2, r3, #16
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699a      	ldr	r2, [r3, #24]
 8004518:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <USB_DevInit+0x2c4>)
 800451a:	4313      	orrs	r3, r2
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004522:	2b00      	cmp	r3, #0
 8004524:	d005      	beq.n	8004532 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	f043 0208 	orr.w	r2, r3, #8
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004534:	2b01      	cmp	r3, #1
 8004536:	d107      	bne.n	8004548 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004540:	f043 0304 	orr.w	r3, r3, #4
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004548:	7dfb      	ldrb	r3, [r7, #23]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004554:	b004      	add	sp, #16
 8004556:	4770      	bx	lr
 8004558:	803c3800 	.word	0x803c3800

0800455c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3301      	adds	r3, #1
 800456e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4a13      	ldr	r2, [pc, #76]	; (80045c0 <USB_FlushTxFifo+0x64>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d901      	bls.n	800457c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e01b      	b.n	80045b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	daf2      	bge.n	800456a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	019b      	lsls	r3, r3, #6
 800458c:	f043 0220 	orr.w	r2, r3, #32
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3301      	adds	r3, #1
 8004598:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4a08      	ldr	r2, [pc, #32]	; (80045c0 <USB_FlushTxFifo+0x64>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d901      	bls.n	80045a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e006      	b.n	80045b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0320 	and.w	r3, r3, #32
 80045ae:	2b20      	cmp	r3, #32
 80045b0:	d0f0      	beq.n	8004594 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	00030d40 	.word	0x00030d40

080045c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	3301      	adds	r3, #1
 80045d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4a11      	ldr	r2, [pc, #68]	; (8004620 <USB_FlushRxFifo+0x5c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d901      	bls.n	80045e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e018      	b.n	8004614 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	daf2      	bge.n	80045d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2210      	movs	r2, #16
 80045f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3301      	adds	r3, #1
 80045f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4a08      	ldr	r2, [pc, #32]	; (8004620 <USB_FlushRxFifo+0x5c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e006      	b.n	8004614 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f003 0310 	and.w	r3, r3, #16
 800460e:	2b10      	cmp	r3, #16
 8004610:	d0f0      	beq.n	80045f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	00030d40 	.word	0x00030d40

08004624 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	68f9      	ldr	r1, [r7, #12]
 8004640:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004644:	4313      	orrs	r3, r2
 8004646:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004656:	b480      	push	{r7}
 8004658:	b087      	sub	sp, #28
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 0306 	and.w	r3, r3, #6
 800466e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d102      	bne.n	800467c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004676:	2300      	movs	r3, #0
 8004678:	75fb      	strb	r3, [r7, #23]
 800467a:	e00a      	b.n	8004692 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d002      	beq.n	8004688 <USB_GetDevSpeed+0x32>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b06      	cmp	r3, #6
 8004686:	d102      	bne.n	800468e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004688:	2302      	movs	r3, #2
 800468a:	75fb      	strb	r3, [r7, #23]
 800468c:	e001      	b.n	8004692 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800468e:	230f      	movs	r3, #15
 8004690:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004692:	7dfb      	ldrb	r3, [r7, #23]
}
 8004694:	4618      	mov	r0, r3
 8004696:	371c      	adds	r7, #28
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	785b      	ldrb	r3, [r3, #1]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d13a      	bne.n	8004732 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	f003 030f 	and.w	r3, r3, #15
 80046cc:	2101      	movs	r1, #1
 80046ce:	fa01 f303 	lsl.w	r3, r1, r3
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	68f9      	ldr	r1, [r7, #12]
 80046d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046da:	4313      	orrs	r3, r2
 80046dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d155      	bne.n	80047a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	791b      	ldrb	r3, [r3, #4]
 800470e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004710:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	059b      	lsls	r3, r3, #22
 8004716:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004718:	4313      	orrs	r3, r2
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	0151      	lsls	r1, r2, #5
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	440a      	add	r2, r1
 8004722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	e036      	b.n	80047a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004738:	69da      	ldr	r2, [r3, #28]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	2101      	movs	r1, #1
 8004744:	fa01 f303 	lsl.w	r3, r1, r3
 8004748:	041b      	lsls	r3, r3, #16
 800474a:	68f9      	ldr	r1, [r7, #12]
 800474c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004750:	4313      	orrs	r3, r2
 8004752:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d11a      	bne.n	80047a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	791b      	ldrb	r3, [r3, #4]
 8004784:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004786:	430b      	orrs	r3, r1
 8004788:	4313      	orrs	r3, r2
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	0151      	lsls	r1, r2, #5
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	440a      	add	r2, r1
 8004792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800479a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800479e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
	...

080047b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	785b      	ldrb	r3, [r3, #1]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d161      	bne.n	8004890 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047e2:	d11f      	bne.n	8004824 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	0151      	lsls	r1, r2, #5
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	440a      	add	r2, r1
 80047fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004802:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	0151      	lsls	r1, r2, #5
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	440a      	add	r2, r1
 800481a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800481e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004822:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	2101      	movs	r1, #1
 8004836:	fa01 f303 	lsl.w	r3, r1, r3
 800483a:	b29b      	uxth	r3, r3
 800483c:	43db      	mvns	r3, r3
 800483e:	68f9      	ldr	r1, [r7, #12]
 8004840:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004844:	4013      	ands	r3, r2
 8004846:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	2101      	movs	r1, #1
 800485a:	fa01 f303 	lsl.w	r3, r1, r3
 800485e:	b29b      	uxth	r3, r3
 8004860:	43db      	mvns	r3, r3
 8004862:	68f9      	ldr	r1, [r7, #12]
 8004864:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004868:	4013      	ands	r3, r2
 800486a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	0159      	lsls	r1, r3, #5
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	440b      	add	r3, r1
 8004882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004886:	4619      	mov	r1, r3
 8004888:	4b35      	ldr	r3, [pc, #212]	; (8004960 <USB_DeactivateEndpoint+0x1b0>)
 800488a:	4013      	ands	r3, r2
 800488c:	600b      	str	r3, [r1, #0]
 800488e:	e060      	b.n	8004952 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048a6:	d11f      	bne.n	80048e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	0151      	lsls	r1, r2, #5
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	440a      	add	r2, r1
 80048be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	0151      	lsls	r1, r2, #5
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	440a      	add	r2, r1
 80048de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	f003 030f 	and.w	r3, r3, #15
 80048f8:	2101      	movs	r1, #1
 80048fa:	fa01 f303 	lsl.w	r3, r1, r3
 80048fe:	041b      	lsls	r3, r3, #16
 8004900:	43db      	mvns	r3, r3
 8004902:	68f9      	ldr	r1, [r7, #12]
 8004904:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004908:	4013      	ands	r3, r2
 800490a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	2101      	movs	r1, #1
 800491e:	fa01 f303 	lsl.w	r3, r1, r3
 8004922:	041b      	lsls	r3, r3, #16
 8004924:	43db      	mvns	r3, r3
 8004926:	68f9      	ldr	r1, [r7, #12]
 8004928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800492c:	4013      	ands	r3, r2
 800492e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	0159      	lsls	r1, r3, #5
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	440b      	add	r3, r1
 8004946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494a:	4619      	mov	r1, r3
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <USB_DeactivateEndpoint+0x1b4>)
 800494e:	4013      	ands	r3, r2
 8004950:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	ec337800 	.word	0xec337800
 8004964:	eff37800 	.word	0xeff37800

08004968 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08a      	sub	sp, #40	; 0x28
 800496c:	af02      	add	r7, sp, #8
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	4613      	mov	r3, r2
 8004974:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	785b      	ldrb	r3, [r3, #1]
 8004984:	2b01      	cmp	r3, #1
 8004986:	f040 815c 	bne.w	8004c42 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d132      	bne.n	80049f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	0151      	lsls	r1, r2, #5
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	440a      	add	r2, r1
 80049a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	0151      	lsls	r1, r2, #5
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	440a      	add	r2, r1
 80049cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	0151      	lsls	r1, r2, #5
 80049e8:	69fa      	ldr	r2, [r7, #28]
 80049ea:	440a      	add	r2, r1
 80049ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f0:	0cdb      	lsrs	r3, r3, #19
 80049f2:	04db      	lsls	r3, r3, #19
 80049f4:	6113      	str	r3, [r2, #16]
 80049f6:	e074      	b.n	8004ae2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	0151      	lsls	r1, r2, #5
 8004a0a:	69fa      	ldr	r2, [r7, #28]
 8004a0c:	440a      	add	r2, r1
 8004a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a12:	0cdb      	lsrs	r3, r3, #19
 8004a14:	04db      	lsls	r3, r3, #19
 8004a16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	0151      	lsls	r1, r2, #5
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	440a      	add	r2, r1
 8004a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a48:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	6999      	ldr	r1, [r3, #24]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	440b      	add	r3, r1
 8004a54:	1e59      	subs	r1, r3, #1
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a5e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a60:	4b9d      	ldr	r3, [pc, #628]	; (8004cd8 <USB_EPStartXfer+0x370>)
 8004a62:	400b      	ands	r3, r1
 8004a64:	69b9      	ldr	r1, [r7, #24]
 8004a66:	0148      	lsls	r0, r1, #5
 8004a68:	69f9      	ldr	r1, [r7, #28]
 8004a6a:	4401      	add	r1, r0
 8004a6c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a70:	4313      	orrs	r3, r2
 8004a72:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a8a:	69b9      	ldr	r1, [r7, #24]
 8004a8c:	0148      	lsls	r0, r1, #5
 8004a8e:	69f9      	ldr	r1, [r7, #28]
 8004a90:	4401      	add	r1, r0
 8004a92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a96:	4313      	orrs	r3, r2
 8004a98:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	791b      	ldrb	r3, [r3, #4]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d11f      	bne.n	8004ae2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	0151      	lsls	r1, r2, #5
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	440a      	add	r2, r1
 8004ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004abc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ac0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	0151      	lsls	r1, r2, #5
 8004ad4:	69fa      	ldr	r2, [r7, #28]
 8004ad6:	440a      	add	r2, r1
 8004ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004adc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ae0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d14b      	bne.n	8004b80 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d009      	beq.n	8004b04 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afc:	461a      	mov	r2, r3
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	791b      	ldrb	r3, [r3, #4]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d128      	bne.n	8004b5e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d110      	bne.n	8004b3e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	0151      	lsls	r1, r2, #5
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	440a      	add	r2, r1
 8004b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	e00f      	b.n	8004b5e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	0151      	lsls	r1, r2, #5
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	440a      	add	r2, r1
 8004b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b5c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	0151      	lsls	r1, r2, #5
 8004b70:	69fa      	ldr	r2, [r7, #28]
 8004b72:	440a      	add	r2, r1
 8004b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	e133      	b.n	8004de8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	0151      	lsls	r1, r2, #5
 8004b92:	69fa      	ldr	r2, [r7, #28]
 8004b94:	440a      	add	r2, r1
 8004b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b9e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	791b      	ldrb	r3, [r3, #4]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d015      	beq.n	8004bd4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 811b 	beq.w	8004de8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc8:	69f9      	ldr	r1, [r7, #28]
 8004bca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	634b      	str	r3, [r1, #52]	; 0x34
 8004bd2:	e109      	b.n	8004de8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d110      	bne.n	8004c06 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	0151      	lsls	r1, r2, #5
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	440a      	add	r2, r1
 8004bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c02:	6013      	str	r3, [r2, #0]
 8004c04:	e00f      	b.n	8004c26 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	0151      	lsls	r1, r2, #5
 8004c18:	69fa      	ldr	r2, [r7, #28]
 8004c1a:	440a      	add	r2, r1
 8004c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c24:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	6919      	ldr	r1, [r3, #16]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	781a      	ldrb	r2, [r3, #0]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	b298      	uxth	r0, r3
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	4603      	mov	r3, r0
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fade 	bl	80051fc <USB_WritePacket>
 8004c40:	e0d2      	b.n	8004de8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	0151      	lsls	r1, r2, #5
 8004c54:	69fa      	ldr	r2, [r7, #28]
 8004c56:	440a      	add	r2, r1
 8004c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c5c:	0cdb      	lsrs	r3, r3, #19
 8004c5e:	04db      	lsls	r3, r3, #19
 8004c60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	0151      	lsls	r1, r2, #5
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	440a      	add	r2, r1
 8004c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c84:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d126      	bne.n	8004cdc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca4:	69b9      	ldr	r1, [r7, #24]
 8004ca6:	0148      	lsls	r0, r1, #5
 8004ca8:	69f9      	ldr	r1, [r7, #28]
 8004caa:	4401      	add	r1, r0
 8004cac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	0151      	lsls	r1, r2, #5
 8004cc6:	69fa      	ldr	r2, [r7, #28]
 8004cc8:	440a      	add	r2, r1
 8004cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cd2:	6113      	str	r3, [r2, #16]
 8004cd4:	e03a      	b.n	8004d4c <USB_EPStartXfer+0x3e4>
 8004cd6:	bf00      	nop
 8004cd8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	699a      	ldr	r2, [r3, #24]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	1e5a      	subs	r2, r3, #1
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	8afa      	ldrh	r2, [r7, #22]
 8004cf8:	fb03 f202 	mul.w	r2, r3, r2
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0c:	691a      	ldr	r2, [r3, #16]
 8004d0e:	8afb      	ldrh	r3, [r7, #22]
 8004d10:	04d9      	lsls	r1, r3, #19
 8004d12:	4b38      	ldr	r3, [pc, #224]	; (8004df4 <USB_EPStartXfer+0x48c>)
 8004d14:	400b      	ands	r3, r1
 8004d16:	69b9      	ldr	r1, [r7, #24]
 8004d18:	0148      	lsls	r0, r1, #5
 8004d1a:	69f9      	ldr	r1, [r7, #28]
 8004d1c:	4401      	add	r1, r0
 8004d1e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d22:	4313      	orrs	r3, r2
 8004d24:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d3c:	69b9      	ldr	r1, [r7, #24]
 8004d3e:	0148      	lsls	r0, r1, #5
 8004d40:	69f9      	ldr	r1, [r7, #28]
 8004d42:	4401      	add	r1, r0
 8004d44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d4c:	79fb      	ldrb	r3, [r7, #7]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d10d      	bne.n	8004d6e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d009      	beq.n	8004d6e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	6919      	ldr	r1, [r3, #16]
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6a:	460a      	mov	r2, r1
 8004d6c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	791b      	ldrb	r3, [r3, #4]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d128      	bne.n	8004dc8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d110      	bne.n	8004da8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	0151      	lsls	r1, r2, #5
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	440a      	add	r2, r1
 8004d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	e00f      	b.n	8004dc8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	0151      	lsls	r1, r2, #5
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	0151      	lsls	r1, r2, #5
 8004dda:	69fa      	ldr	r2, [r7, #28]
 8004ddc:	440a      	add	r2, r1
 8004dde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004de2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004de6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3720      	adds	r7, #32
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	1ff80000 	.word	0x1ff80000

08004df8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	4613      	mov	r3, r2
 8004e04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	785b      	ldrb	r3, [r3, #1]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	f040 80ce 	bne.w	8004fb6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d132      	bne.n	8004e88 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	0151      	lsls	r1, r2, #5
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	440a      	add	r2, r1
 8004e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	0151      	lsls	r1, r2, #5
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	440a      	add	r2, r1
 8004e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	0151      	lsls	r1, r2, #5
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	440a      	add	r2, r1
 8004e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e80:	0cdb      	lsrs	r3, r3, #19
 8004e82:	04db      	lsls	r3, r3, #19
 8004e84:	6113      	str	r3, [r2, #16]
 8004e86:	e04e      	b.n	8004f26 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	0151      	lsls	r1, r2, #5
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	440a      	add	r2, r1
 8004e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea2:	0cdb      	lsrs	r3, r3, #19
 8004ea4:	04db      	lsls	r3, r3, #19
 8004ea6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	0151      	lsls	r1, r2, #5
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	440a      	add	r2, r1
 8004ebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ec2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ec6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004eca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	699a      	ldr	r2, [r3, #24]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d903      	bls.n	8004ee0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	0151      	lsls	r1, r2, #5
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	440a      	add	r2, r1
 8004ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004efa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004efe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f16:	6939      	ldr	r1, [r7, #16]
 8004f18:	0148      	lsls	r0, r1, #5
 8004f1a:	6979      	ldr	r1, [r7, #20]
 8004f1c:	4401      	add	r1, r0
 8004f1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f22:	4313      	orrs	r3, r2
 8004f24:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d11e      	bne.n	8004f6a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d009      	beq.n	8004f48 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f40:	461a      	mov	r2, r3
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	0151      	lsls	r1, r2, #5
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	440a      	add	r2, r1
 8004f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	e097      	b.n	800509a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	0151      	lsls	r1, r2, #5
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	440a      	add	r2, r1
 8004f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f88:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 8083 	beq.w	800509a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8004faa:	6979      	ldr	r1, [r7, #20]
 8004fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	634b      	str	r3, [r1, #52]	; 0x34
 8004fb4:	e071      	b.n	800509a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	0151      	lsls	r1, r2, #5
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	440a      	add	r2, r1
 8004fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd0:	0cdb      	lsrs	r3, r3, #19
 8004fd2:	04db      	lsls	r3, r3, #19
 8004fd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	0151      	lsls	r1, r2, #5
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	440a      	add	r2, r1
 8004fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ff0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ff4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ff8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	440a      	add	r2, r1
 8005028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800502c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005030:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005048:	6939      	ldr	r1, [r7, #16]
 800504a:	0148      	lsls	r0, r1, #5
 800504c:	6979      	ldr	r1, [r7, #20]
 800504e:	4401      	add	r1, r0
 8005050:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005054:	4313      	orrs	r3, r2
 8005056:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d10d      	bne.n	800507a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d009      	beq.n	800507a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	6919      	ldr	r1, [r3, #16]
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005076:	460a      	mov	r2, r1
 8005078:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	0151      	lsls	r1, r2, #5
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	440a      	add	r2, r1
 8005090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005094:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005098:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	371c      	adds	r7, #28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80050b6:	2300      	movs	r3, #0
 80050b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	785b      	ldrb	r3, [r3, #1]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d14a      	bne.n	800515c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050de:	f040 8086 	bne.w	80051ee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	7812      	ldrb	r2, [r2, #0]
 80050f6:	0151      	lsls	r1, r2, #5
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	440a      	add	r2, r1
 80050fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005100:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005104:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	7812      	ldrb	r2, [r2, #0]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	440a      	add	r2, r1
 8005120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005124:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005128:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3301      	adds	r3, #1
 800512e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f242 7210 	movw	r2, #10000	; 0x2710
 8005136:	4293      	cmp	r3, r2
 8005138:	d902      	bls.n	8005140 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	75fb      	strb	r3, [r7, #23]
          break;
 800513e:	e056      	b.n	80051ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005154:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005158:	d0e7      	beq.n	800512a <USB_EPStopXfer+0x82>
 800515a:	e048      	b.n	80051ee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005170:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005174:	d13b      	bne.n	80051ee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	7812      	ldrb	r2, [r2, #0]
 800518a:	0151      	lsls	r1, r2, #5
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	440a      	add	r2, r1
 8005190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005194:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005198:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	7812      	ldrb	r2, [r2, #0]
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3301      	adds	r3, #1
 80051c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d902      	bls.n	80051d4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	75fb      	strb	r3, [r7, #23]
          break;
 80051d2:	e00c      	b.n	80051ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051ec:	d0e7      	beq.n	80051be <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80051ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b089      	sub	sp, #36	; 0x24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	4611      	mov	r1, r2
 8005208:	461a      	mov	r2, r3
 800520a:	460b      	mov	r3, r1
 800520c:	71fb      	strb	r3, [r7, #7]
 800520e:	4613      	mov	r3, r2
 8005210:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800521a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800521e:	2b00      	cmp	r3, #0
 8005220:	d123      	bne.n	800526a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005222:	88bb      	ldrh	r3, [r7, #4]
 8005224:	3303      	adds	r3, #3
 8005226:	089b      	lsrs	r3, r3, #2
 8005228:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800522a:	2300      	movs	r3, #0
 800522c:	61bb      	str	r3, [r7, #24]
 800522e:	e018      	b.n	8005262 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	031a      	lsls	r2, r3, #12
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	4413      	add	r3, r2
 8005238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800523c:	461a      	mov	r2, r3
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	3301      	adds	r3, #1
 8005248:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	3301      	adds	r3, #1
 800524e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	3301      	adds	r3, #1
 8005254:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	3301      	adds	r3, #1
 800525a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	3301      	adds	r3, #1
 8005260:	61bb      	str	r3, [r7, #24]
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	429a      	cmp	r2, r3
 8005268:	d3e2      	bcc.n	8005230 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3724      	adds	r7, #36	; 0x24
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005278:	b480      	push	{r7}
 800527a:	b08b      	sub	sp, #44	; 0x2c
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	4613      	mov	r3, r2
 8005284:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800528e:	88fb      	ldrh	r3, [r7, #6]
 8005290:	089b      	lsrs	r3, r3, #2
 8005292:	b29b      	uxth	r3, r3
 8005294:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005296:	88fb      	ldrh	r3, [r7, #6]
 8005298:	f003 0303 	and.w	r3, r3, #3
 800529c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800529e:	2300      	movs	r3, #0
 80052a0:	623b      	str	r3, [r7, #32]
 80052a2:	e014      	b.n	80052ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	3301      	adds	r3, #1
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	3301      	adds	r3, #1
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	3301      	adds	r3, #1
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	3301      	adds	r3, #1
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	3301      	adds	r3, #1
 80052cc:	623b      	str	r3, [r7, #32]
 80052ce:	6a3a      	ldr	r2, [r7, #32]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d3e6      	bcc.n	80052a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052d6:	8bfb      	ldrh	r3, [r7, #30]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01e      	beq.n	800531a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e6:	461a      	mov	r2, r3
 80052e8:	f107 0310 	add.w	r3, r7, #16
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	fa22 f303 	lsr.w	r3, r2, r3
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	701a      	strb	r2, [r3, #0]
      i++;
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	3301      	adds	r3, #1
 8005306:	623b      	str	r3, [r7, #32]
      pDest++;
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	3301      	adds	r3, #1
 800530c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800530e:	8bfb      	ldrh	r3, [r7, #30]
 8005310:	3b01      	subs	r3, #1
 8005312:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005314:	8bfb      	ldrh	r3, [r7, #30]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1ea      	bne.n	80052f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800531c:	4618      	mov	r0, r3
 800531e:	372c      	adds	r7, #44	; 0x2c
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	785b      	ldrb	r3, [r3, #1]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d12c      	bne.n	800539e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	db12      	blt.n	800537c <USB_EPSetStall+0x54>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00f      	beq.n	800537c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	0151      	lsls	r1, r2, #5
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	440a      	add	r2, r1
 8005372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005376:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800537a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	440a      	add	r2, r1
 8005392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005396:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	e02b      	b.n	80053f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	db12      	blt.n	80053d6 <USB_EPSetStall+0xae>
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00f      	beq.n	80053d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	0151      	lsls	r1, r2, #5
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	440a      	add	r2, r1
 80053cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	0151      	lsls	r1, r2, #5
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	440a      	add	r2, r1
 80053ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	785b      	ldrb	r3, [r3, #1]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d128      	bne.n	8005472 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	0151      	lsls	r1, r2, #5
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	440a      	add	r2, r1
 8005436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800543a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800543e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	791b      	ldrb	r3, [r3, #4]
 8005444:	2b03      	cmp	r3, #3
 8005446:	d003      	beq.n	8005450 <USB_EPClearStall+0x4c>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	791b      	ldrb	r3, [r3, #4]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d138      	bne.n	80054c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	440a      	add	r2, r1
 8005466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800546a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	e027      	b.n	80054c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	0151      	lsls	r1, r2, #5
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	440a      	add	r2, r1
 8005488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800548c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005490:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	791b      	ldrb	r3, [r3, #4]
 8005496:	2b03      	cmp	r3, #3
 8005498:	d003      	beq.n	80054a2 <USB_EPClearStall+0x9e>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	791b      	ldrb	r3, [r3, #4]
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d10f      	bne.n	80054c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	0151      	lsls	r1, r2, #5
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	440a      	add	r2, r1
 80054b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80054f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005504:	68f9      	ldr	r1, [r7, #12]
 8005506:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800550a:	4313      	orrs	r3, r2
 800550c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005536:	f023 0303 	bic.w	r3, r3, #3
 800553a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800554a:	f023 0302 	bic.w	r3, r3, #2
 800554e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800555e:	b480      	push	{r7}
 8005560:	b085      	sub	sp, #20
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005578:	f023 0303 	bic.w	r3, r3, #3
 800557c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800558c:	f043 0302 	orr.w	r3, r3, #2
 8005590:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	4013      	ands	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80055b8:	68fb      	ldr	r3, [r7, #12]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b085      	sub	sp, #20
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	4013      	ands	r3, r2
 80055e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	0c1b      	lsrs	r3, r3, #16
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b085      	sub	sp, #20
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	4013      	ands	r3, r2
 800561c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	b29b      	uxth	r3, r3
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800562e:	b480      	push	{r7}
 8005630:	b085      	sub	sp, #20
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	460b      	mov	r3, r1
 8005638:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800563e:	78fb      	ldrb	r3, [r7, #3]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	4013      	ands	r3, r2
 800565a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800565c:	68bb      	ldr	r3, [r7, #8]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800566a:	b480      	push	{r7}
 800566c:	b087      	sub	sp, #28
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	460b      	mov	r3, r1
 8005674:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800568e:	78fb      	ldrb	r3, [r7, #3]
 8005690:	f003 030f 	and.w	r3, r3, #15
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	fa22 f303 	lsr.w	r3, r2, r3
 800569a:	01db      	lsls	r3, r3, #7
 800569c:	b2db      	uxtb	r3, r3
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80056a4:	78fb      	ldrb	r3, [r7, #3]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4013      	ands	r3, r2
 80056b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056b8:	68bb      	ldr	r3, [r7, #8]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	371c      	adds	r7, #28
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	f003 0301 	and.w	r3, r3, #1
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b085      	sub	sp, #20
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005700:	f023 0307 	bic.w	r3, r3, #7
 8005704:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005718:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005728:	b480      	push	{r7}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	460b      	mov	r3, r1
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	333c      	adds	r3, #60	; 0x3c
 800573e:	3304      	adds	r3, #4
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	4a26      	ldr	r2, [pc, #152]	; (80057e0 <USB_EP0_OutStart+0xb8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d90a      	bls.n	8005762 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005758:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800575c:	d101      	bne.n	8005762 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	e037      	b.n	80057d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005768:	461a      	mov	r2, r3
 800576a:	2300      	movs	r3, #0
 800576c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800577c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005780:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005790:	f043 0318 	orr.w	r3, r3, #24
 8005794:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80057a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80057aa:	7afb      	ldrb	r3, [r7, #11]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d10f      	bne.n	80057d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b6:	461a      	mov	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80057ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	4f54300a 	.word	0x4f54300a

080057e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3301      	adds	r3, #1
 80057f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4a13      	ldr	r2, [pc, #76]	; (8005848 <USB_CoreReset+0x64>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e01b      	b.n	800583a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	daf2      	bge.n	80057f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f043 0201 	orr.w	r2, r3, #1
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	3301      	adds	r3, #1
 800581e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4a09      	ldr	r2, [pc, #36]	; (8005848 <USB_CoreReset+0x64>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d901      	bls.n	800582c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e006      	b.n	800583a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b01      	cmp	r3, #1
 8005836:	d0f0      	beq.n	800581a <USB_CoreReset+0x36>

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	00030d40 	.word	0x00030d40

0800584c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005858:	2010      	movs	r0, #16
 800585a:	f002 f929 	bl	8007ab0 <USBD_static_malloc>
 800585e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d109      	bne.n	800587a <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	32b0      	adds	r2, #176	; 0xb0
 8005870:	2100      	movs	r1, #0
 8005872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005876:	2302      	movs	r3, #2
 8005878:	e048      	b.n	800590c <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	32b0      	adds	r2, #176	; 0xb0
 8005884:	68f9      	ldr	r1, [r7, #12]
 8005886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	32b0      	adds	r2, #176	; 0xb0
 8005894:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	7c1b      	ldrb	r3, [r3, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10d      	bne.n	80058c2 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80058a6:	4b1b      	ldr	r3, [pc, #108]	; (8005914 <USBD_HID_Init+0xc8>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	f003 020f 	and.w	r2, r3, #15
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	4613      	mov	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	440b      	add	r3, r1
 80058ba:	3326      	adds	r3, #38	; 0x26
 80058bc:	2207      	movs	r2, #7
 80058be:	801a      	strh	r2, [r3, #0]
 80058c0:	e00c      	b.n	80058dc <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80058c2:	4b14      	ldr	r3, [pc, #80]	; (8005914 <USBD_HID_Init+0xc8>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	f003 020f 	and.w	r2, r3, #15
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	4613      	mov	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	440b      	add	r3, r1
 80058d6:	3326      	adds	r3, #38	; 0x26
 80058d8:	220a      	movs	r2, #10
 80058da:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80058dc:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <USBD_HID_Init+0xc8>)
 80058de:	7819      	ldrb	r1, [r3, #0]
 80058e0:	2304      	movs	r3, #4
 80058e2:	2203      	movs	r2, #3
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f001 ffd2 	bl	800788e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80058ea:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <USBD_HID_Init+0xc8>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	f003 020f 	and.w	r2, r3, #15
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	440b      	add	r3, r1
 80058fe:	3324      	adds	r3, #36	; 0x24
 8005900:	2201      	movs	r2, #1
 8005902:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	200000b0 	.word	0x200000b0

08005918 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005924:	4b1f      	ldr	r3, [pc, #124]	; (80059a4 <USBD_HID_DeInit+0x8c>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	4619      	mov	r1, r3
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f001 ffd5 	bl	80078da <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005930:	4b1c      	ldr	r3, [pc, #112]	; (80059a4 <USBD_HID_DeInit+0x8c>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	f003 020f 	and.w	r2, r3, #15
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	4613      	mov	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	440b      	add	r3, r1
 8005944:	3324      	adds	r3, #36	; 0x24
 8005946:	2200      	movs	r2, #0
 8005948:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800594a:	4b16      	ldr	r3, [pc, #88]	; (80059a4 <USBD_HID_DeInit+0x8c>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	f003 020f 	and.w	r2, r3, #15
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	440b      	add	r3, r1
 800595e:	3326      	adds	r3, #38	; 0x26
 8005960:	2200      	movs	r2, #0
 8005962:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	32b0      	adds	r2, #176	; 0xb0
 800596e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d011      	beq.n	800599a <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	32b0      	adds	r2, #176	; 0xb0
 8005980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005984:	4618      	mov	r0, r3
 8005986:	f002 f8a1 	bl	8007acc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	32b0      	adds	r2, #176	; 0xb0
 8005994:	2100      	movs	r1, #0
 8005996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	200000b0 	.word	0x200000b0

080059a8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	32b0      	adds	r2, #176	; 0xb0
 80059bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e0e8      	b.n	8005ba6 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d046      	beq.n	8005a6e <USBD_HID_Setup+0xc6>
 80059e0:	2b20      	cmp	r3, #32
 80059e2:	f040 80d8 	bne.w	8005b96 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	785b      	ldrb	r3, [r3, #1]
 80059ea:	3b02      	subs	r3, #2
 80059ec:	2b09      	cmp	r3, #9
 80059ee:	d836      	bhi.n	8005a5e <USBD_HID_Setup+0xb6>
 80059f0:	a201      	add	r2, pc, #4	; (adr r2, 80059f8 <USBD_HID_Setup+0x50>)
 80059f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f6:	bf00      	nop
 80059f8:	08005a4f 	.word	0x08005a4f
 80059fc:	08005a2f 	.word	0x08005a2f
 8005a00:	08005a5f 	.word	0x08005a5f
 8005a04:	08005a5f 	.word	0x08005a5f
 8005a08:	08005a5f 	.word	0x08005a5f
 8005a0c:	08005a5f 	.word	0x08005a5f
 8005a10:	08005a5f 	.word	0x08005a5f
 8005a14:	08005a5f 	.word	0x08005a5f
 8005a18:	08005a3d 	.word	0x08005a3d
 8005a1c:	08005a21 	.word	0x08005a21
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	885b      	ldrh	r3, [r3, #2]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	461a      	mov	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	601a      	str	r2, [r3, #0]
          break;
 8005a2c:	e01e      	b.n	8005a6c <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	4619      	mov	r1, r3
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f001 fbd5 	bl	80071e4 <USBD_CtlSendData>
          break;
 8005a3a:	e017      	b.n	8005a6c <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	885b      	ldrh	r3, [r3, #2]
 8005a40:	0a1b      	lsrs	r3, r3, #8
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	605a      	str	r2, [r3, #4]
          break;
 8005a4c:	e00e      	b.n	8005a6c <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	3304      	adds	r3, #4
 8005a52:	2201      	movs	r2, #1
 8005a54:	4619      	mov	r1, r3
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f001 fbc4 	bl	80071e4 <USBD_CtlSendData>
          break;
 8005a5c:	e006      	b.n	8005a6c <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005a5e:	6839      	ldr	r1, [r7, #0]
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f001 fb4e 	bl	8007102 <USBD_CtlError>
          ret = USBD_FAIL;
 8005a66:	2303      	movs	r3, #3
 8005a68:	75fb      	strb	r3, [r7, #23]
          break;
 8005a6a:	bf00      	nop
      }
      break;
 8005a6c:	e09a      	b.n	8005ba4 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	785b      	ldrb	r3, [r3, #1]
 8005a72:	2b0b      	cmp	r3, #11
 8005a74:	f200 8086 	bhi.w	8005b84 <USBD_HID_Setup+0x1dc>
 8005a78:	a201      	add	r2, pc, #4	; (adr r2, 8005a80 <USBD_HID_Setup+0xd8>)
 8005a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7e:	bf00      	nop
 8005a80:	08005ab1 	.word	0x08005ab1
 8005a84:	08005b93 	.word	0x08005b93
 8005a88:	08005b85 	.word	0x08005b85
 8005a8c:	08005b85 	.word	0x08005b85
 8005a90:	08005b85 	.word	0x08005b85
 8005a94:	08005b85 	.word	0x08005b85
 8005a98:	08005adb 	.word	0x08005adb
 8005a9c:	08005b85 	.word	0x08005b85
 8005aa0:	08005b85 	.word	0x08005b85
 8005aa4:	08005b85 	.word	0x08005b85
 8005aa8:	08005b33 	.word	0x08005b33
 8005aac:	08005b5d 	.word	0x08005b5d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b03      	cmp	r3, #3
 8005aba:	d107      	bne.n	8005acc <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005abc:	f107 030a 	add.w	r3, r7, #10
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f001 fb8d 	bl	80071e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005aca:	e063      	b.n	8005b94 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005acc:	6839      	ldr	r1, [r7, #0]
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f001 fb17 	bl	8007102 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	75fb      	strb	r3, [r7, #23]
          break;
 8005ad8:	e05c      	b.n	8005b94 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	885b      	ldrh	r3, [r3, #2]
 8005ade:	0a1b      	lsrs	r3, r3, #8
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b22      	cmp	r3, #34	; 0x22
 8005ae4:	d108      	bne.n	8005af8 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	88db      	ldrh	r3, [r3, #6]
 8005aea:	2b2c      	cmp	r3, #44	; 0x2c
 8005aec:	bf28      	it	cs
 8005aee:	232c      	movcs	r3, #44	; 0x2c
 8005af0:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005af2:	4b2f      	ldr	r3, [pc, #188]	; (8005bb0 <USBD_HID_Setup+0x208>)
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	e015      	b.n	8005b24 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	885b      	ldrh	r3, [r3, #2]
 8005afc:	0a1b      	lsrs	r3, r3, #8
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b21      	cmp	r3, #33	; 0x21
 8005b02:	d108      	bne.n	8005b16 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005b04:	4b2b      	ldr	r3, [pc, #172]	; (8005bb4 <USBD_HID_Setup+0x20c>)
 8005b06:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	88db      	ldrh	r3, [r3, #6]
 8005b0c:	2b09      	cmp	r3, #9
 8005b0e:	bf28      	it	cs
 8005b10:	2309      	movcs	r3, #9
 8005b12:	82bb      	strh	r3, [r7, #20]
 8005b14:	e006      	b.n	8005b24 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005b16:	6839      	ldr	r1, [r7, #0]
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 faf2 	bl	8007102 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	75fb      	strb	r3, [r7, #23]
            break;
 8005b22:	e037      	b.n	8005b94 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005b24:	8abb      	ldrh	r3, [r7, #20]
 8005b26:	461a      	mov	r2, r3
 8005b28:	6939      	ldr	r1, [r7, #16]
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f001 fb5a 	bl	80071e4 <USBD_CtlSendData>
          break;
 8005b30:	e030      	b.n	8005b94 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b03      	cmp	r3, #3
 8005b3c:	d107      	bne.n	8005b4e <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	3308      	adds	r3, #8
 8005b42:	2201      	movs	r2, #1
 8005b44:	4619      	mov	r1, r3
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f001 fb4c 	bl	80071e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b4c:	e022      	b.n	8005b94 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f001 fad6 	bl	8007102 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b56:	2303      	movs	r3, #3
 8005b58:	75fb      	strb	r3, [r7, #23]
          break;
 8005b5a:	e01b      	b.n	8005b94 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d106      	bne.n	8005b76 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	885b      	ldrh	r3, [r3, #2]
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	461a      	mov	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b74:	e00e      	b.n	8005b94 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005b76:	6839      	ldr	r1, [r7, #0]
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f001 fac2 	bl	8007102 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	75fb      	strb	r3, [r7, #23]
          break;
 8005b82:	e007      	b.n	8005b94 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f001 fabb 	bl	8007102 <USBD_CtlError>
          ret = USBD_FAIL;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	75fb      	strb	r3, [r7, #23]
          break;
 8005b90:	e000      	b.n	8005b94 <USBD_HID_Setup+0x1ec>
          break;
 8005b92:	bf00      	nop
      }
      break;
 8005b94:	e006      	b.n	8005ba4 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005b96:	6839      	ldr	r1, [r7, #0]
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f001 fab2 	bl	8007102 <USBD_CtlError>
      ret = USBD_FAIL;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ba2:	bf00      	nop
  }

  return (uint8_t)ret;
 8005ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000084 	.word	0x20000084
 8005bb4:	2000006c 	.word	0x2000006c

08005bb8 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	32b0      	adds	r2, #176	; 0xb0
 8005bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd4:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e014      	b.n	8005c0a <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b03      	cmp	r3, #3
 8005bea:	d10d      	bne.n	8005c08 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	7b1b      	ldrb	r3, [r3, #12]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d109      	bne.n	8005c08 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8005bfa:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <USBD_HID_SendReport+0x5c>)
 8005bfc:	7819      	ldrb	r1, [r3, #0]
 8005bfe:	88fb      	ldrh	r3, [r7, #6]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f001 ff11 	bl	8007a2a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	200000b0 	.word	0x200000b0

08005c18 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005c20:	2181      	movs	r1, #129	; 0x81
 8005c22:	4809      	ldr	r0, [pc, #36]	; (8005c48 <USBD_HID_GetFSCfgDesc+0x30>)
 8005c24:	f000 fc35 	bl	8006492 <USBD_GetEpDesc>
 8005c28:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	220a      	movs	r2, #10
 8005c34:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2222      	movs	r2, #34	; 0x22
 8005c3a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005c3c:	4b02      	ldr	r3, [pc, #8]	; (8005c48 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20000048 	.word	0x20000048

08005c4c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005c54:	2181      	movs	r1, #129	; 0x81
 8005c56:	4809      	ldr	r0, [pc, #36]	; (8005c7c <USBD_HID_GetHSCfgDesc+0x30>)
 8005c58:	f000 fc1b 	bl	8006492 <USBD_GetEpDesc>
 8005c5c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2207      	movs	r2, #7
 8005c68:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2222      	movs	r2, #34	; 0x22
 8005c6e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005c70:	4b02      	ldr	r3, [pc, #8]	; (8005c7c <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20000048 	.word	0x20000048

08005c80 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005c88:	2181      	movs	r1, #129	; 0x81
 8005c8a:	4809      	ldr	r0, [pc, #36]	; (8005cb0 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005c8c:	f000 fc01 	bl	8006492 <USBD_GetEpDesc>
 8005c90:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	220a      	movs	r2, #10
 8005c9c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2222      	movs	r2, #34	; 0x22
 8005ca2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005ca4:	4b02      	ldr	r3, [pc, #8]	; (8005cb0 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	20000048 	.word	0x20000048

08005cb4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	32b0      	adds	r2, #176	; 0xb0
 8005cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	220a      	movs	r2, #10
 8005cec:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005cee:	4b03      	ldr	r3, [pc, #12]	; (8005cfc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	20000078 	.word	0x20000078

08005d00 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e01f      	b.n	8005d58 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	79fa      	ldrb	r2, [r7, #7]
 8005d4a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f001 fd37 	bl	80077c0 <USBD_LL_Init>
 8005d52:	4603      	mov	r3, r0
 8005d54:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e025      	b.n	8005dc4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	32ae      	adds	r2, #174	; 0xae
 8005d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00f      	beq.n	8005db4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	32ae      	adds	r2, #174	; 0xae
 8005d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	f107 020e 	add.w	r2, r7, #14
 8005da8:	4610      	mov	r0, r2
 8005daa:	4798      	blx	r3
 8005dac:	4602      	mov	r2, r0
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f001 fd3f 	bl	8007858 <USBD_LL_Start>
 8005dda:	4603      	mov	r3, r0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005dec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b084      	sub	sp, #16
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	460b      	mov	r3, r1
 8005e04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d009      	beq.n	8005e28 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	78fa      	ldrb	r2, [r7, #3]
 8005e1e:	4611      	mov	r1, r2
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	4798      	blx	r3
 8005e24:	4603      	mov	r3, r0
 8005e26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b084      	sub	sp, #16
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	78fa      	ldrb	r2, [r7, #3]
 8005e4c:	4611      	mov	r1, r2
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	4798      	blx	r3
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f001 f908 	bl	800708e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e9a:	f003 031f 	and.w	r3, r3, #31
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d01a      	beq.n	8005ed8 <USBD_LL_SetupStage+0x72>
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d822      	bhi.n	8005eec <USBD_LL_SetupStage+0x86>
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <USBD_LL_SetupStage+0x4a>
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d00a      	beq.n	8005ec4 <USBD_LL_SetupStage+0x5e>
 8005eae:	e01d      	b.n	8005eec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fb5f 	bl	800657c <USBD_StdDevReq>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ec2:	e020      	b.n	8005f06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005eca:	4619      	mov	r1, r3
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fbc7 	bl	8006660 <USBD_StdItfReq>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ed6:	e016      	b.n	8005f06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fc29 	bl	8006738 <USBD_StdEPReq>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8005eea:	e00c      	b.n	8005f06 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ef2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	4619      	mov	r1, r3
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f001 fd0c 	bl	8007918 <USBD_LL_StallEP>
 8005f00:	4603      	mov	r3, r0
 8005f02:	73fb      	strb	r3, [r7, #15]
      break;
 8005f04:	bf00      	nop
  }

  return ret;
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	607a      	str	r2, [r7, #4]
 8005f1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005f22:	7afb      	ldrb	r3, [r7, #11]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d16e      	bne.n	8006006 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	f040 8098 	bne.w	800606c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d913      	bls.n	8005f70 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	1ad2      	subs	r2, r2, r3
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	bf28      	it	cs
 8005f62:	4613      	movcs	r3, r2
 8005f64:	461a      	mov	r2, r3
 8005f66:	6879      	ldr	r1, [r7, #4]
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f001 f967 	bl	800723c <USBD_CtlContinueRx>
 8005f6e:	e07d      	b.n	800606c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f76:	f003 031f 	and.w	r3, r3, #31
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d014      	beq.n	8005fa8 <USBD_LL_DataOutStage+0x98>
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d81d      	bhi.n	8005fbe <USBD_LL_DataOutStage+0xae>
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <USBD_LL_DataOutStage+0x7c>
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d003      	beq.n	8005f92 <USBD_LL_DataOutStage+0x82>
 8005f8a:	e018      	b.n	8005fbe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	75bb      	strb	r3, [r7, #22]
            break;
 8005f90:	e018      	b.n	8005fc4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 fa5e 	bl	800645e <USBD_CoreFindIF>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	75bb      	strb	r3, [r7, #22]
            break;
 8005fa6:	e00d      	b.n	8005fc4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 fa60 	bl	8006478 <USBD_CoreFindEP>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	75bb      	strb	r3, [r7, #22]
            break;
 8005fbc:	e002      	b.n	8005fc4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	75bb      	strb	r3, [r7, #22]
            break;
 8005fc2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005fc4:	7dbb      	ldrb	r3, [r7, #22]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d119      	bne.n	8005ffe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d113      	bne.n	8005ffe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005fd6:	7dba      	ldrb	r2, [r7, #22]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	32ae      	adds	r2, #174	; 0xae
 8005fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00b      	beq.n	8005ffe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005fe6:	7dba      	ldrb	r2, [r7, #22]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005fee:	7dba      	ldrb	r2, [r7, #22]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	32ae      	adds	r2, #174	; 0xae
 8005ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f001 f92d 	bl	800725e <USBD_CtlSendStatus>
 8006004:	e032      	b.n	800606c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006006:	7afb      	ldrb	r3, [r7, #11]
 8006008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800600c:	b2db      	uxtb	r3, r3
 800600e:	4619      	mov	r1, r3
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 fa31 	bl	8006478 <USBD_CoreFindEP>
 8006016:	4603      	mov	r3, r0
 8006018:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800601a:	7dbb      	ldrb	r3, [r7, #22]
 800601c:	2bff      	cmp	r3, #255	; 0xff
 800601e:	d025      	beq.n	800606c <USBD_LL_DataOutStage+0x15c>
 8006020:	7dbb      	ldrb	r3, [r7, #22]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d122      	bne.n	800606c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b03      	cmp	r3, #3
 8006030:	d117      	bne.n	8006062 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006032:	7dba      	ldrb	r2, [r7, #22]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	32ae      	adds	r2, #174	; 0xae
 8006038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00f      	beq.n	8006062 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006042:	7dba      	ldrb	r2, [r7, #22]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800604a:	7dba      	ldrb	r2, [r7, #22]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	32ae      	adds	r2, #174	; 0xae
 8006050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	7afa      	ldrb	r2, [r7, #11]
 8006058:	4611      	mov	r1, r2
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	4798      	blx	r3
 800605e:	4603      	mov	r3, r0
 8006060:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006062:	7dfb      	ldrb	r3, [r7, #23]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d001      	beq.n	800606c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006068:	7dfb      	ldrb	r3, [r7, #23]
 800606a:	e000      	b.n	800606e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b086      	sub	sp, #24
 800607a:	af00      	add	r7, sp, #0
 800607c:	60f8      	str	r0, [r7, #12]
 800607e:	460b      	mov	r3, r1
 8006080:	607a      	str	r2, [r7, #4]
 8006082:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006084:	7afb      	ldrb	r3, [r7, #11]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d16f      	bne.n	800616a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3314      	adds	r3, #20
 800608e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006096:	2b02      	cmp	r3, #2
 8006098:	d15a      	bne.n	8006150 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d914      	bls.n	80060d0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	1ad2      	subs	r2, r2, r3
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	461a      	mov	r2, r3
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f001 f8ac 	bl	800721a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060c2:	2300      	movs	r3, #0
 80060c4:	2200      	movs	r2, #0
 80060c6:	2100      	movs	r1, #0
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f001 fccf 	bl	8007a6c <USBD_LL_PrepareReceive>
 80060ce:	e03f      	b.n	8006150 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d11c      	bne.n	8006116 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d316      	bcc.n	8006116 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d20f      	bcs.n	8006116 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80060f6:	2200      	movs	r2, #0
 80060f8:	2100      	movs	r1, #0
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f001 f88d 	bl	800721a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006108:	2300      	movs	r3, #0
 800610a:	2200      	movs	r2, #0
 800610c:	2100      	movs	r1, #0
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f001 fcac 	bl	8007a6c <USBD_LL_PrepareReceive>
 8006114:	e01c      	b.n	8006150 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b03      	cmp	r3, #3
 8006120:	d10f      	bne.n	8006142 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d009      	beq.n	8006142 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006142:	2180      	movs	r1, #128	; 0x80
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f001 fbe7 	bl	8007918 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f001 f89a 	bl	8007284 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d03a      	beq.n	80061d0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f7ff fe42 	bl	8005de4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006168:	e032      	b.n	80061d0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800616a:	7afb      	ldrb	r3, [r7, #11]
 800616c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006170:	b2db      	uxtb	r3, r3
 8006172:	4619      	mov	r1, r3
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 f97f 	bl	8006478 <USBD_CoreFindEP>
 800617a:	4603      	mov	r3, r0
 800617c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800617e:	7dfb      	ldrb	r3, [r7, #23]
 8006180:	2bff      	cmp	r3, #255	; 0xff
 8006182:	d025      	beq.n	80061d0 <USBD_LL_DataInStage+0x15a>
 8006184:	7dfb      	ldrb	r3, [r7, #23]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d122      	bne.n	80061d0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b03      	cmp	r3, #3
 8006194:	d11c      	bne.n	80061d0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006196:	7dfa      	ldrb	r2, [r7, #23]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	32ae      	adds	r2, #174	; 0xae
 800619c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d014      	beq.n	80061d0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80061a6:	7dfa      	ldrb	r2, [r7, #23]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80061ae:	7dfa      	ldrb	r2, [r7, #23]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	32ae      	adds	r2, #174	; 0xae
 80061b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	7afa      	ldrb	r2, [r7, #11]
 80061bc:	4611      	mov	r1, r2
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	4798      	blx	r3
 80061c2:	4603      	mov	r3, r0
 80061c4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80061c6:	7dbb      	ldrb	r3, [r7, #22]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80061cc:	7dbb      	ldrb	r3, [r7, #22]
 80061ce:	e000      	b.n	80061d2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b084      	sub	sp, #16
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006212:	2b00      	cmp	r3, #0
 8006214:	d014      	beq.n	8006240 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00e      	beq.n	8006240 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6852      	ldr	r2, [r2, #4]
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	4611      	mov	r1, r2
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	4798      	blx	r3
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800623c:	2303      	movs	r3, #3
 800623e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006240:	2340      	movs	r3, #64	; 0x40
 8006242:	2200      	movs	r2, #0
 8006244:	2100      	movs	r1, #0
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f001 fb21 	bl	800788e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2240      	movs	r2, #64	; 0x40
 8006258:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800625c:	2340      	movs	r3, #64	; 0x40
 800625e:	2200      	movs	r2, #0
 8006260:	2180      	movs	r1, #128	; 0x80
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f001 fb13 	bl	800788e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2240      	movs	r2, #64	; 0x40
 8006272:	621a      	str	r2, [r3, #32]

  return ret;
 8006274:	7bfb      	ldrb	r3, [r7, #15]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	460b      	mov	r3, r1
 8006288:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	78fa      	ldrb	r2, [r7, #3]
 800628e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2204      	movs	r2, #4
 80062b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d106      	bne.n	80062ec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b082      	sub	sp, #8
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b03      	cmp	r3, #3
 800630c:	d110      	bne.n	8006330 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00b      	beq.n	8006330 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d005      	beq.n	8006330 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b082      	sub	sp, #8
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	460b      	mov	r3, r1
 8006344:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	32ae      	adds	r2, #174	; 0xae
 8006350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006358:	2303      	movs	r3, #3
 800635a:	e01c      	b.n	8006396 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b03      	cmp	r3, #3
 8006366:	d115      	bne.n	8006394 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	32ae      	adds	r2, #174	; 0xae
 8006372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00b      	beq.n	8006394 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	32ae      	adds	r2, #174	; 0xae
 8006386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	78fa      	ldrb	r2, [r7, #3]
 800638e:	4611      	mov	r1, r2
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b082      	sub	sp, #8
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	460b      	mov	r3, r1
 80063a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	32ae      	adds	r2, #174	; 0xae
 80063b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80063bc:	2303      	movs	r3, #3
 80063be:	e01c      	b.n	80063fa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d115      	bne.n	80063f8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	32ae      	adds	r2, #174	; 0xae
 80063d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00b      	beq.n	80063f8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	32ae      	adds	r2, #174	; 0xae
 80063ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	78fa      	ldrb	r2, [r7, #3]
 80063f2:	4611      	mov	r1, r2
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006420:	2300      	movs	r3, #0
 8006422:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00e      	beq.n	8006454 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6852      	ldr	r2, [r2, #4]
 8006442:	b2d2      	uxtb	r2, r2
 8006444:	4611      	mov	r1, r2
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	4798      	blx	r3
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006450:	2303      	movs	r3, #3
 8006452:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006454:	7bfb      	ldrb	r3, [r7, #15]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	460b      	mov	r3, r1
 8006468:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800646a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800646c:	4618      	mov	r0, r3
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006484:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006486:	4618      	mov	r0, r3
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b086      	sub	sp, #24
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	460b      	mov	r3, r1
 800649c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80064a6:	2300      	movs	r3, #0
 80064a8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	885b      	ldrh	r3, [r3, #2]
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d920      	bls.n	80064fc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80064c2:	e013      	b.n	80064ec <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80064c4:	f107 030a 	add.w	r3, r7, #10
 80064c8:	4619      	mov	r1, r3
 80064ca:	6978      	ldr	r0, [r7, #20]
 80064cc:	f000 f81b 	bl	8006506 <USBD_GetNextDesc>
 80064d0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	785b      	ldrb	r3, [r3, #1]
 80064d6:	2b05      	cmp	r3, #5
 80064d8:	d108      	bne.n	80064ec <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	789b      	ldrb	r3, [r3, #2]
 80064e2:	78fa      	ldrb	r2, [r7, #3]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d008      	beq.n	80064fa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80064e8:	2300      	movs	r3, #0
 80064ea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	885b      	ldrh	r3, [r3, #2]
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	897b      	ldrh	r3, [r7, #10]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d8e5      	bhi.n	80064c4 <USBD_GetEpDesc+0x32>
 80064f8:	e000      	b.n	80064fc <USBD_GetEpDesc+0x6a>
          break;
 80064fa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80064fc:	693b      	ldr	r3, [r7, #16]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006506:	b480      	push	{r7}
 8006508:	b085      	sub	sp, #20
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	881a      	ldrh	r2, [r3, #0]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	4413      	add	r3, r2
 8006520:	b29a      	uxth	r2, r3
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	461a      	mov	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4413      	add	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006532:	68fb      	ldr	r3, [r7, #12]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	3301      	adds	r3, #1
 8006556:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800655e:	8a3b      	ldrh	r3, [r7, #16]
 8006560:	021b      	lsls	r3, r3, #8
 8006562:	b21a      	sxth	r2, r3
 8006564:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006568:	4313      	orrs	r3, r2
 800656a:	b21b      	sxth	r3, r3
 800656c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800656e:	89fb      	ldrh	r3, [r7, #14]
}
 8006570:	4618      	mov	r0, r3
 8006572:	371c      	adds	r7, #28
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006592:	2b40      	cmp	r3, #64	; 0x40
 8006594:	d005      	beq.n	80065a2 <USBD_StdDevReq+0x26>
 8006596:	2b40      	cmp	r3, #64	; 0x40
 8006598:	d857      	bhi.n	800664a <USBD_StdDevReq+0xce>
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00f      	beq.n	80065be <USBD_StdDevReq+0x42>
 800659e:	2b20      	cmp	r3, #32
 80065a0:	d153      	bne.n	800664a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	32ae      	adds	r2, #174	; 0xae
 80065ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	4798      	blx	r3
 80065b8:	4603      	mov	r3, r0
 80065ba:	73fb      	strb	r3, [r7, #15]
      break;
 80065bc:	e04a      	b.n	8006654 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	785b      	ldrb	r3, [r3, #1]
 80065c2:	2b09      	cmp	r3, #9
 80065c4:	d83b      	bhi.n	800663e <USBD_StdDevReq+0xc2>
 80065c6:	a201      	add	r2, pc, #4	; (adr r2, 80065cc <USBD_StdDevReq+0x50>)
 80065c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065cc:	08006621 	.word	0x08006621
 80065d0:	08006635 	.word	0x08006635
 80065d4:	0800663f 	.word	0x0800663f
 80065d8:	0800662b 	.word	0x0800662b
 80065dc:	0800663f 	.word	0x0800663f
 80065e0:	080065ff 	.word	0x080065ff
 80065e4:	080065f5 	.word	0x080065f5
 80065e8:	0800663f 	.word	0x0800663f
 80065ec:	08006617 	.word	0x08006617
 80065f0:	08006609 	.word	0x08006609
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fa3c 	bl	8006a74 <USBD_GetDescriptor>
          break;
 80065fc:	e024      	b.n	8006648 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fba1 	bl	8006d48 <USBD_SetAddress>
          break;
 8006606:	e01f      	b.n	8006648 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fbe0 	bl	8006dd0 <USBD_SetConfig>
 8006610:	4603      	mov	r3, r0
 8006612:	73fb      	strb	r3, [r7, #15]
          break;
 8006614:	e018      	b.n	8006648 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006616:	6839      	ldr	r1, [r7, #0]
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fc83 	bl	8006f24 <USBD_GetConfig>
          break;
 800661e:	e013      	b.n	8006648 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fcb4 	bl	8006f90 <USBD_GetStatus>
          break;
 8006628:	e00e      	b.n	8006648 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800662a:	6839      	ldr	r1, [r7, #0]
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fce3 	bl	8006ff8 <USBD_SetFeature>
          break;
 8006632:	e009      	b.n	8006648 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fd07 	bl	800704a <USBD_ClrFeature>
          break;
 800663c:	e004      	b.n	8006648 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800663e:	6839      	ldr	r1, [r7, #0]
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 fd5e 	bl	8007102 <USBD_CtlError>
          break;
 8006646:	bf00      	nop
      }
      break;
 8006648:	e004      	b.n	8006654 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fd58 	bl	8007102 <USBD_CtlError>
      break;
 8006652:	bf00      	nop
  }

  return ret;
 8006654:	7bfb      	ldrb	r3, [r7, #15]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop

08006660 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006676:	2b40      	cmp	r3, #64	; 0x40
 8006678:	d005      	beq.n	8006686 <USBD_StdItfReq+0x26>
 800667a:	2b40      	cmp	r3, #64	; 0x40
 800667c:	d852      	bhi.n	8006724 <USBD_StdItfReq+0xc4>
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <USBD_StdItfReq+0x26>
 8006682:	2b20      	cmp	r3, #32
 8006684:	d14e      	bne.n	8006724 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800668c:	b2db      	uxtb	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	2b02      	cmp	r3, #2
 8006692:	d840      	bhi.n	8006716 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	889b      	ldrh	r3, [r3, #4]
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b01      	cmp	r3, #1
 800669c:	d836      	bhi.n	800670c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	889b      	ldrh	r3, [r3, #4]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	4619      	mov	r1, r3
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7ff fed9 	bl	800645e <USBD_CoreFindIF>
 80066ac:	4603      	mov	r3, r0
 80066ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066b0:	7bbb      	ldrb	r3, [r7, #14]
 80066b2:	2bff      	cmp	r3, #255	; 0xff
 80066b4:	d01d      	beq.n	80066f2 <USBD_StdItfReq+0x92>
 80066b6:	7bbb      	ldrb	r3, [r7, #14]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d11a      	bne.n	80066f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80066bc:	7bba      	ldrb	r2, [r7, #14]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	32ae      	adds	r2, #174	; 0xae
 80066c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00f      	beq.n	80066ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80066cc:	7bba      	ldrb	r2, [r7, #14]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80066d4:	7bba      	ldrb	r2, [r7, #14]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	32ae      	adds	r2, #174	; 0xae
 80066da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	4798      	blx	r3
 80066e6:	4603      	mov	r3, r0
 80066e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80066ea:	e004      	b.n	80066f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80066ec:	2303      	movs	r3, #3
 80066ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80066f0:	e001      	b.n	80066f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80066f2:	2303      	movs	r3, #3
 80066f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	88db      	ldrh	r3, [r3, #6]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d110      	bne.n	8006720 <USBD_StdItfReq+0xc0>
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10d      	bne.n	8006720 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fdaa 	bl	800725e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800670a:	e009      	b.n	8006720 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800670c:	6839      	ldr	r1, [r7, #0]
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fcf7 	bl	8007102 <USBD_CtlError>
          break;
 8006714:	e004      	b.n	8006720 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fcf2 	bl	8007102 <USBD_CtlError>
          break;
 800671e:	e000      	b.n	8006722 <USBD_StdItfReq+0xc2>
          break;
 8006720:	bf00      	nop
      }
      break;
 8006722:	e004      	b.n	800672e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fceb 	bl	8007102 <USBD_CtlError>
      break;
 800672c:	bf00      	nop
  }

  return ret;
 800672e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	889b      	ldrh	r3, [r3, #4]
 800674a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006754:	2b40      	cmp	r3, #64	; 0x40
 8006756:	d007      	beq.n	8006768 <USBD_StdEPReq+0x30>
 8006758:	2b40      	cmp	r3, #64	; 0x40
 800675a:	f200 817f 	bhi.w	8006a5c <USBD_StdEPReq+0x324>
 800675e:	2b00      	cmp	r3, #0
 8006760:	d02a      	beq.n	80067b8 <USBD_StdEPReq+0x80>
 8006762:	2b20      	cmp	r3, #32
 8006764:	f040 817a 	bne.w	8006a5c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006768:	7bbb      	ldrb	r3, [r7, #14]
 800676a:	4619      	mov	r1, r3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff fe83 	bl	8006478 <USBD_CoreFindEP>
 8006772:	4603      	mov	r3, r0
 8006774:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006776:	7b7b      	ldrb	r3, [r7, #13]
 8006778:	2bff      	cmp	r3, #255	; 0xff
 800677a:	f000 8174 	beq.w	8006a66 <USBD_StdEPReq+0x32e>
 800677e:	7b7b      	ldrb	r3, [r7, #13]
 8006780:	2b00      	cmp	r3, #0
 8006782:	f040 8170 	bne.w	8006a66 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006786:	7b7a      	ldrb	r2, [r7, #13]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800678e:	7b7a      	ldrb	r2, [r7, #13]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	32ae      	adds	r2, #174	; 0xae
 8006794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 8163 	beq.w	8006a66 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80067a0:	7b7a      	ldrb	r2, [r7, #13]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	32ae      	adds	r2, #174	; 0xae
 80067a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	4798      	blx	r3
 80067b2:	4603      	mov	r3, r0
 80067b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067b6:	e156      	b.n	8006a66 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d008      	beq.n	80067d2 <USBD_StdEPReq+0x9a>
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	f300 8145 	bgt.w	8006a50 <USBD_StdEPReq+0x318>
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 809b 	beq.w	8006902 <USBD_StdEPReq+0x1ca>
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d03c      	beq.n	800684a <USBD_StdEPReq+0x112>
 80067d0:	e13e      	b.n	8006a50 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d002      	beq.n	80067e4 <USBD_StdEPReq+0xac>
 80067de:	2b03      	cmp	r3, #3
 80067e0:	d016      	beq.n	8006810 <USBD_StdEPReq+0xd8>
 80067e2:	e02c      	b.n	800683e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067e4:	7bbb      	ldrb	r3, [r7, #14]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00d      	beq.n	8006806 <USBD_StdEPReq+0xce>
 80067ea:	7bbb      	ldrb	r3, [r7, #14]
 80067ec:	2b80      	cmp	r3, #128	; 0x80
 80067ee:	d00a      	beq.n	8006806 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80067f0:	7bbb      	ldrb	r3, [r7, #14]
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 f88f 	bl	8007918 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80067fa:	2180      	movs	r1, #128	; 0x80
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 f88b 	bl	8007918 <USBD_LL_StallEP>
 8006802:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006804:	e020      	b.n	8006848 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fc7a 	bl	8007102 <USBD_CtlError>
              break;
 800680e:	e01b      	b.n	8006848 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	885b      	ldrh	r3, [r3, #2]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10e      	bne.n	8006836 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006818:	7bbb      	ldrb	r3, [r7, #14]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00b      	beq.n	8006836 <USBD_StdEPReq+0xfe>
 800681e:	7bbb      	ldrb	r3, [r7, #14]
 8006820:	2b80      	cmp	r3, #128	; 0x80
 8006822:	d008      	beq.n	8006836 <USBD_StdEPReq+0xfe>
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	88db      	ldrh	r3, [r3, #6]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d104      	bne.n	8006836 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800682c:	7bbb      	ldrb	r3, [r7, #14]
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f001 f871 	bl	8007918 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fd11 	bl	800725e <USBD_CtlSendStatus>

              break;
 800683c:	e004      	b.n	8006848 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fc5e 	bl	8007102 <USBD_CtlError>
              break;
 8006846:	bf00      	nop
          }
          break;
 8006848:	e107      	b.n	8006a5a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d002      	beq.n	800685c <USBD_StdEPReq+0x124>
 8006856:	2b03      	cmp	r3, #3
 8006858:	d016      	beq.n	8006888 <USBD_StdEPReq+0x150>
 800685a:	e04b      	b.n	80068f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800685c:	7bbb      	ldrb	r3, [r7, #14]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00d      	beq.n	800687e <USBD_StdEPReq+0x146>
 8006862:	7bbb      	ldrb	r3, [r7, #14]
 8006864:	2b80      	cmp	r3, #128	; 0x80
 8006866:	d00a      	beq.n	800687e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006868:	7bbb      	ldrb	r3, [r7, #14]
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f001 f853 	bl	8007918 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006872:	2180      	movs	r1, #128	; 0x80
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f001 f84f 	bl	8007918 <USBD_LL_StallEP>
 800687a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800687c:	e040      	b.n	8006900 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fc3e 	bl	8007102 <USBD_CtlError>
              break;
 8006886:	e03b      	b.n	8006900 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	885b      	ldrh	r3, [r3, #2]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d136      	bne.n	80068fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006890:	7bbb      	ldrb	r3, [r7, #14]
 8006892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006896:	2b00      	cmp	r3, #0
 8006898:	d004      	beq.n	80068a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800689a:	7bbb      	ldrb	r3, [r7, #14]
 800689c:	4619      	mov	r1, r3
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f001 f859 	bl	8007956 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fcda 	bl	800725e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80068aa:	7bbb      	ldrb	r3, [r7, #14]
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7ff fde2 	bl	8006478 <USBD_CoreFindEP>
 80068b4:	4603      	mov	r3, r0
 80068b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068b8:	7b7b      	ldrb	r3, [r7, #13]
 80068ba:	2bff      	cmp	r3, #255	; 0xff
 80068bc:	d01f      	beq.n	80068fe <USBD_StdEPReq+0x1c6>
 80068be:	7b7b      	ldrb	r3, [r7, #13]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d11c      	bne.n	80068fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80068c4:	7b7a      	ldrb	r2, [r7, #13]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80068cc:	7b7a      	ldrb	r2, [r7, #13]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	32ae      	adds	r2, #174	; 0xae
 80068d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d010      	beq.n	80068fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80068dc:	7b7a      	ldrb	r2, [r7, #13]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	32ae      	adds	r2, #174	; 0xae
 80068e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	4798      	blx	r3
 80068ee:	4603      	mov	r3, r0
 80068f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80068f2:	e004      	b.n	80068fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fc03 	bl	8007102 <USBD_CtlError>
              break;
 80068fc:	e000      	b.n	8006900 <USBD_StdEPReq+0x1c8>
              break;
 80068fe:	bf00      	nop
          }
          break;
 8006900:	e0ab      	b.n	8006a5a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d002      	beq.n	8006914 <USBD_StdEPReq+0x1dc>
 800690e:	2b03      	cmp	r3, #3
 8006910:	d032      	beq.n	8006978 <USBD_StdEPReq+0x240>
 8006912:	e097      	b.n	8006a44 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006914:	7bbb      	ldrb	r3, [r7, #14]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d007      	beq.n	800692a <USBD_StdEPReq+0x1f2>
 800691a:	7bbb      	ldrb	r3, [r7, #14]
 800691c:	2b80      	cmp	r3, #128	; 0x80
 800691e:	d004      	beq.n	800692a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006920:	6839      	ldr	r1, [r7, #0]
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fbed 	bl	8007102 <USBD_CtlError>
                break;
 8006928:	e091      	b.n	8006a4e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800692a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800692e:	2b00      	cmp	r3, #0
 8006930:	da0b      	bge.n	800694a <USBD_StdEPReq+0x212>
 8006932:	7bbb      	ldrb	r3, [r7, #14]
 8006934:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006938:	4613      	mov	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	3310      	adds	r3, #16
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	4413      	add	r3, r2
 8006946:	3304      	adds	r3, #4
 8006948:	e00b      	b.n	8006962 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800694a:	7bbb      	ldrb	r3, [r7, #14]
 800694c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	4413      	add	r3, r2
 8006960:	3304      	adds	r3, #4
 8006962:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2200      	movs	r2, #0
 8006968:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	2202      	movs	r2, #2
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fc37 	bl	80071e4 <USBD_CtlSendData>
              break;
 8006976:	e06a      	b.n	8006a4e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006978:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800697c:	2b00      	cmp	r3, #0
 800697e:	da11      	bge.n	80069a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006980:	7bbb      	ldrb	r3, [r7, #14]
 8006982:	f003 020f 	and.w	r2, r3, #15
 8006986:	6879      	ldr	r1, [r7, #4]
 8006988:	4613      	mov	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	440b      	add	r3, r1
 8006992:	3324      	adds	r3, #36	; 0x24
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d117      	bne.n	80069ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fbb0 	bl	8007102 <USBD_CtlError>
                  break;
 80069a2:	e054      	b.n	8006a4e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80069a4:	7bbb      	ldrb	r3, [r7, #14]
 80069a6:	f003 020f 	and.w	r2, r3, #15
 80069aa:	6879      	ldr	r1, [r7, #4]
 80069ac:	4613      	mov	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	440b      	add	r3, r1
 80069b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d104      	bne.n	80069ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fb9d 	bl	8007102 <USBD_CtlError>
                  break;
 80069c8:	e041      	b.n	8006a4e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	da0b      	bge.n	80069ea <USBD_StdEPReq+0x2b2>
 80069d2:	7bbb      	ldrb	r3, [r7, #14]
 80069d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069d8:	4613      	mov	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	3310      	adds	r3, #16
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	4413      	add	r3, r2
 80069e6:	3304      	adds	r3, #4
 80069e8:	e00b      	b.n	8006a02 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069ea:	7bbb      	ldrb	r3, [r7, #14]
 80069ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069f0:	4613      	mov	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	4413      	add	r3, r2
 8006a00:	3304      	adds	r3, #4
 8006a02:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a04:	7bbb      	ldrb	r3, [r7, #14]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d002      	beq.n	8006a10 <USBD_StdEPReq+0x2d8>
 8006a0a:	7bbb      	ldrb	r3, [r7, #14]
 8006a0c:	2b80      	cmp	r3, #128	; 0x80
 8006a0e:	d103      	bne.n	8006a18 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	e00e      	b.n	8006a36 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a18:	7bbb      	ldrb	r3, [r7, #14]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 ffb9 	bl	8007994 <USBD_LL_IsStallEP>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d003      	beq.n	8006a30 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	e002      	b.n	8006a36 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	2202      	movs	r2, #2
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fbd1 	bl	80071e4 <USBD_CtlSendData>
              break;
 8006a42:	e004      	b.n	8006a4e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fb5b 	bl	8007102 <USBD_CtlError>
              break;
 8006a4c:	bf00      	nop
          }
          break;
 8006a4e:	e004      	b.n	8006a5a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fb55 	bl	8007102 <USBD_CtlError>
          break;
 8006a58:	bf00      	nop
      }
      break;
 8006a5a:	e005      	b.n	8006a68 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fb4f 	bl	8007102 <USBD_CtlError>
      break;
 8006a64:	e000      	b.n	8006a68 <USBD_StdEPReq+0x330>
      break;
 8006a66:	bf00      	nop
  }

  return ret;
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
	...

08006a74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	885b      	ldrh	r3, [r3, #2]
 8006a8e:	0a1b      	lsrs	r3, r3, #8
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	3b01      	subs	r3, #1
 8006a94:	2b06      	cmp	r3, #6
 8006a96:	f200 8128 	bhi.w	8006cea <USBD_GetDescriptor+0x276>
 8006a9a:	a201      	add	r2, pc, #4	; (adr r2, 8006aa0 <USBD_GetDescriptor+0x2c>)
 8006a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa0:	08006abd 	.word	0x08006abd
 8006aa4:	08006ad5 	.word	0x08006ad5
 8006aa8:	08006b15 	.word	0x08006b15
 8006aac:	08006ceb 	.word	0x08006ceb
 8006ab0:	08006ceb 	.word	0x08006ceb
 8006ab4:	08006c8b 	.word	0x08006c8b
 8006ab8:	08006cb7 	.word	0x08006cb7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	7c12      	ldrb	r2, [r2, #16]
 8006ac8:	f107 0108 	add.w	r1, r7, #8
 8006acc:	4610      	mov	r0, r2
 8006ace:	4798      	blx	r3
 8006ad0:	60f8      	str	r0, [r7, #12]
      break;
 8006ad2:	e112      	b.n	8006cfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	7c1b      	ldrb	r3, [r3, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10d      	bne.n	8006af8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae4:	f107 0208 	add.w	r2, r7, #8
 8006ae8:	4610      	mov	r0, r2
 8006aea:	4798      	blx	r3
 8006aec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3301      	adds	r3, #1
 8006af2:	2202      	movs	r2, #2
 8006af4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006af6:	e100      	b.n	8006cfa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b00:	f107 0208 	add.w	r2, r7, #8
 8006b04:	4610      	mov	r0, r2
 8006b06:	4798      	blx	r3
 8006b08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	2202      	movs	r2, #2
 8006b10:	701a      	strb	r2, [r3, #0]
      break;
 8006b12:	e0f2      	b.n	8006cfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	885b      	ldrh	r3, [r3, #2]
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b05      	cmp	r3, #5
 8006b1c:	f200 80ac 	bhi.w	8006c78 <USBD_GetDescriptor+0x204>
 8006b20:	a201      	add	r2, pc, #4	; (adr r2, 8006b28 <USBD_GetDescriptor+0xb4>)
 8006b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b26:	bf00      	nop
 8006b28:	08006b41 	.word	0x08006b41
 8006b2c:	08006b75 	.word	0x08006b75
 8006b30:	08006ba9 	.word	0x08006ba9
 8006b34:	08006bdd 	.word	0x08006bdd
 8006b38:	08006c11 	.word	0x08006c11
 8006b3c:	08006c45 	.word	0x08006c45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00b      	beq.n	8006b64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	7c12      	ldrb	r2, [r2, #16]
 8006b58:	f107 0108 	add.w	r1, r7, #8
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	4798      	blx	r3
 8006b60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b62:	e091      	b.n	8006c88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 facb 	bl	8007102 <USBD_CtlError>
            err++;
 8006b6c:	7afb      	ldrb	r3, [r7, #11]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	72fb      	strb	r3, [r7, #11]
          break;
 8006b72:	e089      	b.n	8006c88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00b      	beq.n	8006b98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	7c12      	ldrb	r2, [r2, #16]
 8006b8c:	f107 0108 	add.w	r1, r7, #8
 8006b90:	4610      	mov	r0, r2
 8006b92:	4798      	blx	r3
 8006b94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b96:	e077      	b.n	8006c88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fab1 	bl	8007102 <USBD_CtlError>
            err++;
 8006ba0:	7afb      	ldrb	r3, [r7, #11]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ba6:	e06f      	b.n	8006c88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00b      	beq.n	8006bcc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	7c12      	ldrb	r2, [r2, #16]
 8006bc0:	f107 0108 	add.w	r1, r7, #8
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	4798      	blx	r3
 8006bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bca:	e05d      	b.n	8006c88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fa97 	bl	8007102 <USBD_CtlError>
            err++;
 8006bd4:	7afb      	ldrb	r3, [r7, #11]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8006bda:	e055      	b.n	8006c88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00b      	beq.n	8006c00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	7c12      	ldrb	r2, [r2, #16]
 8006bf4:	f107 0108 	add.w	r1, r7, #8
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	4798      	blx	r3
 8006bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bfe:	e043      	b.n	8006c88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c00:	6839      	ldr	r1, [r7, #0]
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fa7d 	bl	8007102 <USBD_CtlError>
            err++;
 8006c08:	7afb      	ldrb	r3, [r7, #11]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c0e:	e03b      	b.n	8006c88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00b      	beq.n	8006c34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	7c12      	ldrb	r2, [r2, #16]
 8006c28:	f107 0108 	add.w	r1, r7, #8
 8006c2c:	4610      	mov	r0, r2
 8006c2e:	4798      	blx	r3
 8006c30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c32:	e029      	b.n	8006c88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fa63 	bl	8007102 <USBD_CtlError>
            err++;
 8006c3c:	7afb      	ldrb	r3, [r7, #11]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	72fb      	strb	r3, [r7, #11]
          break;
 8006c42:	e021      	b.n	8006c88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00b      	beq.n	8006c68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	7c12      	ldrb	r2, [r2, #16]
 8006c5c:	f107 0108 	add.w	r1, r7, #8
 8006c60:	4610      	mov	r0, r2
 8006c62:	4798      	blx	r3
 8006c64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c66:	e00f      	b.n	8006c88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c68:	6839      	ldr	r1, [r7, #0]
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fa49 	bl	8007102 <USBD_CtlError>
            err++;
 8006c70:	7afb      	ldrb	r3, [r7, #11]
 8006c72:	3301      	adds	r3, #1
 8006c74:	72fb      	strb	r3, [r7, #11]
          break;
 8006c76:	e007      	b.n	8006c88 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fa41 	bl	8007102 <USBD_CtlError>
          err++;
 8006c80:	7afb      	ldrb	r3, [r7, #11]
 8006c82:	3301      	adds	r3, #1
 8006c84:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006c86:	bf00      	nop
      }
      break;
 8006c88:	e037      	b.n	8006cfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	7c1b      	ldrb	r3, [r3, #16]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d109      	bne.n	8006ca6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c9a:	f107 0208 	add.w	r2, r7, #8
 8006c9e:	4610      	mov	r0, r2
 8006ca0:	4798      	blx	r3
 8006ca2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ca4:	e029      	b.n	8006cfa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fa2a 	bl	8007102 <USBD_CtlError>
        err++;
 8006cae:	7afb      	ldrb	r3, [r7, #11]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	72fb      	strb	r3, [r7, #11]
      break;
 8006cb4:	e021      	b.n	8006cfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	7c1b      	ldrb	r3, [r3, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10d      	bne.n	8006cda <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc6:	f107 0208 	add.w	r2, r7, #8
 8006cca:	4610      	mov	r0, r2
 8006ccc:	4798      	blx	r3
 8006cce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	2207      	movs	r2, #7
 8006cd6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cd8:	e00f      	b.n	8006cfa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fa10 	bl	8007102 <USBD_CtlError>
        err++;
 8006ce2:	7afb      	ldrb	r3, [r7, #11]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ce8:	e007      	b.n	8006cfa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fa08 	bl	8007102 <USBD_CtlError>
      err++;
 8006cf2:	7afb      	ldrb	r3, [r7, #11]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	72fb      	strb	r3, [r7, #11]
      break;
 8006cf8:	bf00      	nop
  }

  if (err != 0U)
 8006cfa:	7afb      	ldrb	r3, [r7, #11]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d11e      	bne.n	8006d3e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	88db      	ldrh	r3, [r3, #6]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d016      	beq.n	8006d36 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006d08:	893b      	ldrh	r3, [r7, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00e      	beq.n	8006d2c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	88da      	ldrh	r2, [r3, #6]
 8006d12:	893b      	ldrh	r3, [r7, #8]
 8006d14:	4293      	cmp	r3, r2
 8006d16:	bf28      	it	cs
 8006d18:	4613      	movcs	r3, r2
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d1e:	893b      	ldrh	r3, [r7, #8]
 8006d20:	461a      	mov	r2, r3
 8006d22:	68f9      	ldr	r1, [r7, #12]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fa5d 	bl	80071e4 <USBD_CtlSendData>
 8006d2a:	e009      	b.n	8006d40 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f9e7 	bl	8007102 <USBD_CtlError>
 8006d34:	e004      	b.n	8006d40 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fa91 	bl	800725e <USBD_CtlSendStatus>
 8006d3c:	e000      	b.n	8006d40 <USBD_GetDescriptor+0x2cc>
    return;
 8006d3e:	bf00      	nop
  }
}
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop

08006d48 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	889b      	ldrh	r3, [r3, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d131      	bne.n	8006dbe <USBD_SetAddress+0x76>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	88db      	ldrh	r3, [r3, #6]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d12d      	bne.n	8006dbe <USBD_SetAddress+0x76>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	885b      	ldrh	r3, [r3, #2]
 8006d66:	2b7f      	cmp	r3, #127	; 0x7f
 8006d68:	d829      	bhi.n	8006dbe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	885b      	ldrh	r3, [r3, #2]
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d104      	bne.n	8006d8c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f9bc 	bl	8007102 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d8a:	e01d      	b.n	8006dc8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	7bfa      	ldrb	r2, [r7, #15]
 8006d90:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fe27 	bl	80079ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fa5d 	bl	800725e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d004      	beq.n	8006db4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2202      	movs	r2, #2
 8006dae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006db2:	e009      	b.n	8006dc8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dbc:	e004      	b.n	8006dc8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f99e 	bl	8007102 <USBD_CtlError>
  }
}
 8006dc6:	bf00      	nop
 8006dc8:	bf00      	nop
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	885b      	ldrh	r3, [r3, #2]
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	4b4e      	ldr	r3, [pc, #312]	; (8006f20 <USBD_SetConfig+0x150>)
 8006de6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006de8:	4b4d      	ldr	r3, [pc, #308]	; (8006f20 <USBD_SetConfig+0x150>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d905      	bls.n	8006dfc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f985 	bl	8007102 <USBD_CtlError>
    return USBD_FAIL;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e08c      	b.n	8006f16 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d002      	beq.n	8006e0e <USBD_SetConfig+0x3e>
 8006e08:	2b03      	cmp	r3, #3
 8006e0a:	d029      	beq.n	8006e60 <USBD_SetConfig+0x90>
 8006e0c:	e075      	b.n	8006efa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006e0e:	4b44      	ldr	r3, [pc, #272]	; (8006f20 <USBD_SetConfig+0x150>)
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d020      	beq.n	8006e58 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006e16:	4b42      	ldr	r3, [pc, #264]	; (8006f20 <USBD_SetConfig+0x150>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e20:	4b3f      	ldr	r3, [pc, #252]	; (8006f20 <USBD_SetConfig+0x150>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	4619      	mov	r1, r3
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7fe ffe7 	bl	8005dfa <USBD_SetClassConfig>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d008      	beq.n	8006e48 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f962 	bl	8007102 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2202      	movs	r2, #2
 8006e42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e46:	e065      	b.n	8006f14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fa08 	bl	800725e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2203      	movs	r2, #3
 8006e52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e56:	e05d      	b.n	8006f14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fa00 	bl	800725e <USBD_CtlSendStatus>
      break;
 8006e5e:	e059      	b.n	8006f14 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006e60:	4b2f      	ldr	r3, [pc, #188]	; (8006f20 <USBD_SetConfig+0x150>)
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d112      	bne.n	8006e8e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006e70:	4b2b      	ldr	r3, [pc, #172]	; (8006f20 <USBD_SetConfig+0x150>)
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	461a      	mov	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e7a:	4b29      	ldr	r3, [pc, #164]	; (8006f20 <USBD_SetConfig+0x150>)
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7fe ffd6 	bl	8005e32 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f9e9 	bl	800725e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e8c:	e042      	b.n	8006f14 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006e8e:	4b24      	ldr	r3, [pc, #144]	; (8006f20 <USBD_SetConfig+0x150>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	461a      	mov	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d02a      	beq.n	8006ef2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7fe ffc4 	bl	8005e32 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006eaa:	4b1d      	ldr	r3, [pc, #116]	; (8006f20 <USBD_SetConfig+0x150>)
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006eb4:	4b1a      	ldr	r3, [pc, #104]	; (8006f20 <USBD_SetConfig+0x150>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7fe ff9d 	bl	8005dfa <USBD_SetClassConfig>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00f      	beq.n	8006eea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f918 	bl	8007102 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7fe ffa9 	bl	8005e32 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006ee8:	e014      	b.n	8006f14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f9b7 	bl	800725e <USBD_CtlSendStatus>
      break;
 8006ef0:	e010      	b.n	8006f14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f9b3 	bl	800725e <USBD_CtlSendStatus>
      break;
 8006ef8:	e00c      	b.n	8006f14 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f900 	bl	8007102 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f02:	4b07      	ldr	r3, [pc, #28]	; (8006f20 <USBD_SetConfig+0x150>)
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	4619      	mov	r1, r3
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7fe ff92 	bl	8005e32 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	73fb      	strb	r3, [r7, #15]
      break;
 8006f12:	bf00      	nop
  }

  return ret;
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	200001d0 	.word	0x200001d0

08006f24 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	88db      	ldrh	r3, [r3, #6]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d004      	beq.n	8006f40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f8e2 	bl	8007102 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006f3e:	e023      	b.n	8006f88 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	dc02      	bgt.n	8006f52 <USBD_GetConfig+0x2e>
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	dc03      	bgt.n	8006f58 <USBD_GetConfig+0x34>
 8006f50:	e015      	b.n	8006f7e <USBD_GetConfig+0x5a>
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	d00b      	beq.n	8006f6e <USBD_GetConfig+0x4a>
 8006f56:	e012      	b.n	8006f7e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	3308      	adds	r3, #8
 8006f62:	2201      	movs	r2, #1
 8006f64:	4619      	mov	r1, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f93c 	bl	80071e4 <USBD_CtlSendData>
        break;
 8006f6c:	e00c      	b.n	8006f88 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	3304      	adds	r3, #4
 8006f72:	2201      	movs	r2, #1
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f934 	bl	80071e4 <USBD_CtlSendData>
        break;
 8006f7c:	e004      	b.n	8006f88 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f8be 	bl	8007102 <USBD_CtlError>
        break;
 8006f86:	bf00      	nop
}
 8006f88:	bf00      	nop
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d81e      	bhi.n	8006fe6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	88db      	ldrh	r3, [r3, #6]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d004      	beq.n	8006fba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f8a5 	bl	8007102 <USBD_CtlError>
        break;
 8006fb8:	e01a      	b.n	8006ff0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d005      	beq.n	8006fd6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	f043 0202 	orr.w	r2, r3, #2
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	330c      	adds	r3, #12
 8006fda:	2202      	movs	r2, #2
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f900 	bl	80071e4 <USBD_CtlSendData>
      break;
 8006fe4:	e004      	b.n	8006ff0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f88a 	bl	8007102 <USBD_CtlError>
      break;
 8006fee:	bf00      	nop
  }
}
 8006ff0:	bf00      	nop
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	885b      	ldrh	r3, [r3, #2]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d107      	bne.n	800701a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f923 	bl	800725e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007018:	e013      	b.n	8007042 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	885b      	ldrh	r3, [r3, #2]
 800701e:	2b02      	cmp	r3, #2
 8007020:	d10b      	bne.n	800703a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	889b      	ldrh	r3, [r3, #4]
 8007026:	0a1b      	lsrs	r3, r3, #8
 8007028:	b29b      	uxth	r3, r3
 800702a:	b2da      	uxtb	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f913 	bl	800725e <USBD_CtlSendStatus>
}
 8007038:	e003      	b.n	8007042 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800703a:	6839      	ldr	r1, [r7, #0]
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f860 	bl	8007102 <USBD_CtlError>
}
 8007042:	bf00      	nop
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b082      	sub	sp, #8
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800705a:	b2db      	uxtb	r3, r3
 800705c:	3b01      	subs	r3, #1
 800705e:	2b02      	cmp	r3, #2
 8007060:	d80b      	bhi.n	800707a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	885b      	ldrh	r3, [r3, #2]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d10c      	bne.n	8007084 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f8f3 	bl	800725e <USBD_CtlSendStatus>
      }
      break;
 8007078:	e004      	b.n	8007084 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f840 	bl	8007102 <USBD_CtlError>
      break;
 8007082:	e000      	b.n	8007086 <USBD_ClrFeature+0x3c>
      break;
 8007084:	bf00      	nop
  }
}
 8007086:	bf00      	nop
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b084      	sub	sp, #16
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	781a      	ldrb	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	3301      	adds	r3, #1
 80070a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	781a      	ldrb	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3301      	adds	r3, #1
 80070b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f7ff fa41 	bl	8006540 <SWAPBYTE>
 80070be:	4603      	mov	r3, r0
 80070c0:	461a      	mov	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3301      	adds	r3, #1
 80070ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	3301      	adds	r3, #1
 80070d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f7ff fa34 	bl	8006540 <SWAPBYTE>
 80070d8:	4603      	mov	r3, r0
 80070da:	461a      	mov	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3301      	adds	r3, #1
 80070e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	3301      	adds	r3, #1
 80070ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f7ff fa27 	bl	8006540 <SWAPBYTE>
 80070f2:	4603      	mov	r3, r0
 80070f4:	461a      	mov	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	80da      	strh	r2, [r3, #6]
}
 80070fa:	bf00      	nop
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b082      	sub	sp, #8
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800710c:	2180      	movs	r1, #128	; 0x80
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fc02 	bl	8007918 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007114:	2100      	movs	r1, #0
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fbfe 	bl	8007918 <USBD_LL_StallEP>
}
 800711c:	bf00      	nop
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d036      	beq.n	80071a8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800713e:	6938      	ldr	r0, [r7, #16]
 8007140:	f000 f836 	bl	80071b0 <USBD_GetLen>
 8007144:	4603      	mov	r3, r0
 8007146:	3301      	adds	r3, #1
 8007148:	b29b      	uxth	r3, r3
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	b29a      	uxth	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007152:	7dfb      	ldrb	r3, [r7, #23]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	4413      	add	r3, r2
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	7812      	ldrb	r2, [r2, #0]
 800715c:	701a      	strb	r2, [r3, #0]
  idx++;
 800715e:	7dfb      	ldrb	r3, [r7, #23]
 8007160:	3301      	adds	r3, #1
 8007162:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007164:	7dfb      	ldrb	r3, [r7, #23]
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	4413      	add	r3, r2
 800716a:	2203      	movs	r2, #3
 800716c:	701a      	strb	r2, [r3, #0]
  idx++;
 800716e:	7dfb      	ldrb	r3, [r7, #23]
 8007170:	3301      	adds	r3, #1
 8007172:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007174:	e013      	b.n	800719e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007176:	7dfb      	ldrb	r3, [r7, #23]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	4413      	add	r3, r2
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	7812      	ldrb	r2, [r2, #0]
 8007180:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	3301      	adds	r3, #1
 8007186:	613b      	str	r3, [r7, #16]
    idx++;
 8007188:	7dfb      	ldrb	r3, [r7, #23]
 800718a:	3301      	adds	r3, #1
 800718c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800718e:	7dfb      	ldrb	r3, [r7, #23]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	4413      	add	r3, r2
 8007194:	2200      	movs	r2, #0
 8007196:	701a      	strb	r2, [r3, #0]
    idx++;
 8007198:	7dfb      	ldrb	r3, [r7, #23]
 800719a:	3301      	adds	r3, #1
 800719c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1e7      	bne.n	8007176 <USBD_GetString+0x52>
 80071a6:	e000      	b.n	80071aa <USBD_GetString+0x86>
    return;
 80071a8:	bf00      	nop
  }
}
 80071aa:	3718      	adds	r7, #24
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80071c0:	e005      	b.n	80071ce <USBD_GetLen+0x1e>
  {
    len++;
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
 80071c4:	3301      	adds	r3, #1
 80071c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	3301      	adds	r3, #1
 80071cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1f5      	bne.n	80071c2 <USBD_GetLen+0x12>
  }

  return len;
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3714      	adds	r7, #20
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	2100      	movs	r1, #0
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f000 fc0d 	bl	8007a2a <USBD_LL_Transmit>

  return USBD_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b084      	sub	sp, #16
 800721e:	af00      	add	r7, sp, #0
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	2100      	movs	r1, #0
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 fbfc 	bl	8007a2a <USBD_LL_Transmit>

  return USBD_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	2100      	movs	r1, #0
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 fc0c 	bl	8007a6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b082      	sub	sp, #8
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2204      	movs	r2, #4
 800726a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800726e:	2300      	movs	r3, #0
 8007270:	2200      	movs	r2, #0
 8007272:	2100      	movs	r1, #0
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fbd8 	bl	8007a2a <USBD_LL_Transmit>

  return USBD_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2205      	movs	r2, #5
 8007290:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007294:	2300      	movs	r3, #0
 8007296:	2200      	movs	r2, #0
 8007298:	2100      	movs	r1, #0
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fbe6 	bl	8007a6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
	...

080072ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80072b0:	2200      	movs	r2, #0
 80072b2:	490e      	ldr	r1, [pc, #56]	; (80072ec <MX_USB_DEVICE_Init+0x40>)
 80072b4:	480e      	ldr	r0, [pc, #56]	; (80072f0 <MX_USB_DEVICE_Init+0x44>)
 80072b6:	f7fe fd23 	bl	8005d00 <USBD_Init>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80072c0:	f7f9 fa56 	bl	8000770 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80072c4:	490b      	ldr	r1, [pc, #44]	; (80072f4 <MX_USB_DEVICE_Init+0x48>)
 80072c6:	480a      	ldr	r0, [pc, #40]	; (80072f0 <MX_USB_DEVICE_Init+0x44>)
 80072c8:	f7fe fd4a 	bl	8005d60 <USBD_RegisterClass>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80072d2:	f7f9 fa4d 	bl	8000770 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80072d6:	4806      	ldr	r0, [pc, #24]	; (80072f0 <MX_USB_DEVICE_Init+0x44>)
 80072d8:	f7fe fd78 	bl	8005dcc <USBD_Start>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80072e2:	f7f9 fa45 	bl	8000770 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80072e6:	bf00      	nop
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	200000b4 	.word	0x200000b4
 80072f0:	200001d4 	.word	0x200001d4
 80072f4:	20000010 	.word	0x20000010

080072f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	4603      	mov	r3, r0
 8007300:	6039      	str	r1, [r7, #0]
 8007302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	2212      	movs	r2, #18
 8007308:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800730a:	4b03      	ldr	r3, [pc, #12]	; (8007318 <USBD_FS_DeviceDescriptor+0x20>)
}
 800730c:	4618      	mov	r0, r3
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	200000d0 	.word	0x200000d0

0800731c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	4603      	mov	r3, r0
 8007324:	6039      	str	r1, [r7, #0]
 8007326:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	2204      	movs	r2, #4
 800732c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800732e:	4b03      	ldr	r3, [pc, #12]	; (800733c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007330:	4618      	mov	r0, r3
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	200000e4 	.word	0x200000e4

08007340 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	4603      	mov	r3, r0
 8007348:	6039      	str	r1, [r7, #0]
 800734a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800734c:	79fb      	ldrb	r3, [r7, #7]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d105      	bne.n	800735e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	4907      	ldr	r1, [pc, #28]	; (8007374 <USBD_FS_ProductStrDescriptor+0x34>)
 8007356:	4808      	ldr	r0, [pc, #32]	; (8007378 <USBD_FS_ProductStrDescriptor+0x38>)
 8007358:	f7ff fee4 	bl	8007124 <USBD_GetString>
 800735c:	e004      	b.n	8007368 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	4904      	ldr	r1, [pc, #16]	; (8007374 <USBD_FS_ProductStrDescriptor+0x34>)
 8007362:	4805      	ldr	r0, [pc, #20]	; (8007378 <USBD_FS_ProductStrDescriptor+0x38>)
 8007364:	f7ff fede 	bl	8007124 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007368:	4b02      	ldr	r3, [pc, #8]	; (8007374 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800736a:	4618      	mov	r0, r3
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	200004b0 	.word	0x200004b0
 8007378:	08007ba8 	.word	0x08007ba8

0800737c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	4603      	mov	r3, r0
 8007384:	6039      	str	r1, [r7, #0]
 8007386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	4904      	ldr	r1, [pc, #16]	; (800739c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800738c:	4804      	ldr	r0, [pc, #16]	; (80073a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800738e:	f7ff fec9 	bl	8007124 <USBD_GetString>
  return USBD_StrDesc;
 8007392:	4b02      	ldr	r3, [pc, #8]	; (800739c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007394:	4618      	mov	r0, r3
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	200004b0 	.word	0x200004b0
 80073a0:	08007bc0 	.word	0x08007bc0

080073a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	4603      	mov	r3, r0
 80073ac:	6039      	str	r1, [r7, #0]
 80073ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	221a      	movs	r2, #26
 80073b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80073b6:	f000 f843 	bl	8007440 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80073ba:	4b02      	ldr	r3, [pc, #8]	; (80073c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	200000e8 	.word	0x200000e8

080073c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	4603      	mov	r3, r0
 80073d0:	6039      	str	r1, [r7, #0]
 80073d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80073d4:	79fb      	ldrb	r3, [r7, #7]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d105      	bne.n	80073e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	4907      	ldr	r1, [pc, #28]	; (80073fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80073de:	4808      	ldr	r0, [pc, #32]	; (8007400 <USBD_FS_ConfigStrDescriptor+0x38>)
 80073e0:	f7ff fea0 	bl	8007124 <USBD_GetString>
 80073e4:	e004      	b.n	80073f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	4904      	ldr	r1, [pc, #16]	; (80073fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80073ea:	4805      	ldr	r0, [pc, #20]	; (8007400 <USBD_FS_ConfigStrDescriptor+0x38>)
 80073ec:	f7ff fe9a 	bl	8007124 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073f0:	4b02      	ldr	r3, [pc, #8]	; (80073fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	200004b0 	.word	0x200004b0
 8007400:	08007bd4 	.word	0x08007bd4

08007404 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	4603      	mov	r3, r0
 800740c:	6039      	str	r1, [r7, #0]
 800740e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007410:	79fb      	ldrb	r3, [r7, #7]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d105      	bne.n	8007422 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	4907      	ldr	r1, [pc, #28]	; (8007438 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800741a:	4808      	ldr	r0, [pc, #32]	; (800743c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800741c:	f7ff fe82 	bl	8007124 <USBD_GetString>
 8007420:	e004      	b.n	800742c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	4904      	ldr	r1, [pc, #16]	; (8007438 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007426:	4805      	ldr	r0, [pc, #20]	; (800743c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007428:	f7ff fe7c 	bl	8007124 <USBD_GetString>
  }
  return USBD_StrDesc;
 800742c:	4b02      	ldr	r3, [pc, #8]	; (8007438 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	200004b0 	.word	0x200004b0
 800743c:	08007be0 	.word	0x08007be0

08007440 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007446:	4b0f      	ldr	r3, [pc, #60]	; (8007484 <Get_SerialNum+0x44>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800744c:	4b0e      	ldr	r3, [pc, #56]	; (8007488 <Get_SerialNum+0x48>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007452:	4b0e      	ldr	r3, [pc, #56]	; (800748c <Get_SerialNum+0x4c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4413      	add	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d009      	beq.n	800747a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007466:	2208      	movs	r2, #8
 8007468:	4909      	ldr	r1, [pc, #36]	; (8007490 <Get_SerialNum+0x50>)
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f000 f814 	bl	8007498 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007470:	2204      	movs	r2, #4
 8007472:	4908      	ldr	r1, [pc, #32]	; (8007494 <Get_SerialNum+0x54>)
 8007474:	68b8      	ldr	r0, [r7, #8]
 8007476:	f000 f80f 	bl	8007498 <IntToUnicode>
  }
}
 800747a:	bf00      	nop
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	1fff7a10 	.word	0x1fff7a10
 8007488:	1fff7a14 	.word	0x1fff7a14
 800748c:	1fff7a18 	.word	0x1fff7a18
 8007490:	200000ea 	.word	0x200000ea
 8007494:	200000fa 	.word	0x200000fa

08007498 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007498:	b480      	push	{r7}
 800749a:	b087      	sub	sp, #28
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	4613      	mov	r3, r2
 80074a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80074a6:	2300      	movs	r3, #0
 80074a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80074aa:	2300      	movs	r3, #0
 80074ac:	75fb      	strb	r3, [r7, #23]
 80074ae:	e027      	b.n	8007500 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	0f1b      	lsrs	r3, r3, #28
 80074b4:	2b09      	cmp	r3, #9
 80074b6:	d80b      	bhi.n	80074d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	0f1b      	lsrs	r3, r3, #28
 80074bc:	b2da      	uxtb	r2, r3
 80074be:	7dfb      	ldrb	r3, [r7, #23]
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	4619      	mov	r1, r3
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	440b      	add	r3, r1
 80074c8:	3230      	adds	r2, #48	; 0x30
 80074ca:	b2d2      	uxtb	r2, r2
 80074cc:	701a      	strb	r2, [r3, #0]
 80074ce:	e00a      	b.n	80074e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	0f1b      	lsrs	r3, r3, #28
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
 80074d8:	005b      	lsls	r3, r3, #1
 80074da:	4619      	mov	r1, r3
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	440b      	add	r3, r1
 80074e0:	3237      	adds	r2, #55	; 0x37
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	011b      	lsls	r3, r3, #4
 80074ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	3301      	adds	r3, #1
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	4413      	add	r3, r2
 80074f6:	2200      	movs	r2, #0
 80074f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80074fa:	7dfb      	ldrb	r3, [r7, #23]
 80074fc:	3301      	adds	r3, #1
 80074fe:	75fb      	strb	r3, [r7, #23]
 8007500:	7dfa      	ldrb	r2, [r7, #23]
 8007502:	79fb      	ldrb	r3, [r7, #7]
 8007504:	429a      	cmp	r2, r3
 8007506:	d3d3      	bcc.n	80074b0 <IntToUnicode+0x18>
  }
}
 8007508:	bf00      	nop
 800750a:	bf00      	nop
 800750c:	371c      	adds	r7, #28
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
	...

08007518 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b08a      	sub	sp, #40	; 0x28
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007520:	f107 0314 	add.w	r3, r7, #20
 8007524:	2200      	movs	r2, #0
 8007526:	601a      	str	r2, [r3, #0]
 8007528:	605a      	str	r2, [r3, #4]
 800752a:	609a      	str	r2, [r3, #8]
 800752c:	60da      	str	r2, [r3, #12]
 800752e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007538:	d147      	bne.n	80075ca <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800753a:	2300      	movs	r3, #0
 800753c:	613b      	str	r3, [r7, #16]
 800753e:	4b25      	ldr	r3, [pc, #148]	; (80075d4 <HAL_PCD_MspInit+0xbc>)
 8007540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007542:	4a24      	ldr	r2, [pc, #144]	; (80075d4 <HAL_PCD_MspInit+0xbc>)
 8007544:	f043 0301 	orr.w	r3, r3, #1
 8007548:	6313      	str	r3, [r2, #48]	; 0x30
 800754a:	4b22      	ldr	r3, [pc, #136]	; (80075d4 <HAL_PCD_MspInit+0xbc>)
 800754c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	613b      	str	r3, [r7, #16]
 8007554:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800755a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800755c:	2300      	movs	r3, #0
 800755e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007560:	2300      	movs	r3, #0
 8007562:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007564:	f107 0314 	add.w	r3, r7, #20
 8007568:	4619      	mov	r1, r3
 800756a:	481b      	ldr	r0, [pc, #108]	; (80075d8 <HAL_PCD_MspInit+0xc0>)
 800756c:	f7f9 ff3a 	bl	80013e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007570:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007576:	2302      	movs	r3, #2
 8007578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800757a:	2300      	movs	r3, #0
 800757c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800757e:	2303      	movs	r3, #3
 8007580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007582:	230a      	movs	r3, #10
 8007584:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007586:	f107 0314 	add.w	r3, r7, #20
 800758a:	4619      	mov	r1, r3
 800758c:	4812      	ldr	r0, [pc, #72]	; (80075d8 <HAL_PCD_MspInit+0xc0>)
 800758e:	f7f9 ff29 	bl	80013e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007592:	4b10      	ldr	r3, [pc, #64]	; (80075d4 <HAL_PCD_MspInit+0xbc>)
 8007594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007596:	4a0f      	ldr	r2, [pc, #60]	; (80075d4 <HAL_PCD_MspInit+0xbc>)
 8007598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800759c:	6353      	str	r3, [r2, #52]	; 0x34
 800759e:	2300      	movs	r3, #0
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	4b0c      	ldr	r3, [pc, #48]	; (80075d4 <HAL_PCD_MspInit+0xbc>)
 80075a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a6:	4a0b      	ldr	r2, [pc, #44]	; (80075d4 <HAL_PCD_MspInit+0xbc>)
 80075a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075ac:	6453      	str	r3, [r2, #68]	; 0x44
 80075ae:	4b09      	ldr	r3, [pc, #36]	; (80075d4 <HAL_PCD_MspInit+0xbc>)
 80075b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80075ba:	2200      	movs	r2, #0
 80075bc:	2100      	movs	r1, #0
 80075be:	2043      	movs	r0, #67	; 0x43
 80075c0:	f7f9 fb69 	bl	8000c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80075c4:	2043      	movs	r0, #67	; 0x43
 80075c6:	f7f9 fb82 	bl	8000cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80075ca:	bf00      	nop
 80075cc:	3728      	adds	r7, #40	; 0x28
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	40023800 	.word	0x40023800
 80075d8:	40020000 	.word	0x40020000

080075dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80075f0:	4619      	mov	r1, r3
 80075f2:	4610      	mov	r0, r2
 80075f4:	f7fe fc37 	bl	8005e66 <USBD_LL_SetupStage>
}
 80075f8:	bf00      	nop
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	460b      	mov	r3, r1
 800760a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007612:	78fa      	ldrb	r2, [r7, #3]
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	4613      	mov	r3, r2
 8007618:	00db      	lsls	r3, r3, #3
 800761a:	4413      	add	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	440b      	add	r3, r1
 8007620:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	78fb      	ldrb	r3, [r7, #3]
 8007628:	4619      	mov	r1, r3
 800762a:	f7fe fc71 	bl	8005f10 <USBD_LL_DataOutStage>
}
 800762e:	bf00      	nop
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	460b      	mov	r3, r1
 8007640:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007648:	78fa      	ldrb	r2, [r7, #3]
 800764a:	6879      	ldr	r1, [r7, #4]
 800764c:	4613      	mov	r3, r2
 800764e:	00db      	lsls	r3, r3, #3
 8007650:	4413      	add	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	440b      	add	r3, r1
 8007656:	334c      	adds	r3, #76	; 0x4c
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	78fb      	ldrb	r3, [r7, #3]
 800765c:	4619      	mov	r1, r3
 800765e:	f7fe fd0a 	bl	8006076 <USBD_LL_DataInStage>
}
 8007662:	bf00      	nop
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b082      	sub	sp, #8
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007678:	4618      	mov	r0, r3
 800767a:	f7fe fe3e 	bl	80062fa <USBD_LL_SOF>
}
 800767e:	bf00      	nop
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800768e:	2301      	movs	r3, #1
 8007690:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800769a:	2300      	movs	r3, #0
 800769c:	73fb      	strb	r3, [r7, #15]
 800769e:	e008      	b.n	80076b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d102      	bne.n	80076ae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80076a8:	2301      	movs	r3, #1
 80076aa:	73fb      	strb	r3, [r7, #15]
 80076ac:	e001      	b.n	80076b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80076ae:	f7f9 f85f 	bl	8000770 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80076b8:	7bfa      	ldrb	r2, [r7, #15]
 80076ba:	4611      	mov	r1, r2
 80076bc:	4618      	mov	r0, r3
 80076be:	f7fe fdde 	bl	800627e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fe fd86 	bl	80061da <USBD_LL_Reset>
}
 80076ce:	bf00      	nop
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
	...

080076d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fe fdd9 	bl	800629e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	6812      	ldr	r2, [r2, #0]
 80076fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076fe:	f043 0301 	orr.w	r3, r3, #1
 8007702:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a1b      	ldr	r3, [r3, #32]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d005      	beq.n	8007718 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800770c:	4b04      	ldr	r3, [pc, #16]	; (8007720 <HAL_PCD_SuspendCallback+0x48>)
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	4a03      	ldr	r2, [pc, #12]	; (8007720 <HAL_PCD_SuspendCallback+0x48>)
 8007712:	f043 0306 	orr.w	r3, r3, #6
 8007716:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007718:	bf00      	nop
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	e000ed00 	.word	0xe000ed00

08007724 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007732:	4618      	mov	r0, r3
 8007734:	f7fe fdc9 	bl	80062ca <USBD_LL_Resume>
}
 8007738:	bf00      	nop
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007752:	78fa      	ldrb	r2, [r7, #3]
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f7fe fe21 	bl	800639e <USBD_LL_IsoOUTIncomplete>
}
 800775c:	bf00      	nop
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	460b      	mov	r3, r1
 800776e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007776:	78fa      	ldrb	r2, [r7, #3]
 8007778:	4611      	mov	r1, r2
 800777a:	4618      	mov	r0, r3
 800777c:	f7fe fddd 	bl	800633a <USBD_LL_IsoINIncomplete>
}
 8007780:	bf00      	nop
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007796:	4618      	mov	r0, r3
 8007798:	f7fe fe33 	bl	8006402 <USBD_LL_DevConnected>
}
 800779c:	bf00      	nop
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fe fe30 	bl	8006418 <USBD_LL_DevDisconnected>
}
 80077b8:	bf00      	nop
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d13c      	bne.n	800784a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80077d0:	4a20      	ldr	r2, [pc, #128]	; (8007854 <USBD_LL_Init+0x94>)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a1e      	ldr	r2, [pc, #120]	; (8007854 <USBD_LL_Init+0x94>)
 80077dc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80077e0:	4b1c      	ldr	r3, [pc, #112]	; (8007854 <USBD_LL_Init+0x94>)
 80077e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80077e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80077e8:	4b1a      	ldr	r3, [pc, #104]	; (8007854 <USBD_LL_Init+0x94>)
 80077ea:	2204      	movs	r2, #4
 80077ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80077ee:	4b19      	ldr	r3, [pc, #100]	; (8007854 <USBD_LL_Init+0x94>)
 80077f0:	2202      	movs	r2, #2
 80077f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80077f4:	4b17      	ldr	r3, [pc, #92]	; (8007854 <USBD_LL_Init+0x94>)
 80077f6:	2200      	movs	r2, #0
 80077f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80077fa:	4b16      	ldr	r3, [pc, #88]	; (8007854 <USBD_LL_Init+0x94>)
 80077fc:	2202      	movs	r2, #2
 80077fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007800:	4b14      	ldr	r3, [pc, #80]	; (8007854 <USBD_LL_Init+0x94>)
 8007802:	2200      	movs	r2, #0
 8007804:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007806:	4b13      	ldr	r3, [pc, #76]	; (8007854 <USBD_LL_Init+0x94>)
 8007808:	2200      	movs	r2, #0
 800780a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800780c:	4b11      	ldr	r3, [pc, #68]	; (8007854 <USBD_LL_Init+0x94>)
 800780e:	2200      	movs	r2, #0
 8007810:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007812:	4b10      	ldr	r3, [pc, #64]	; (8007854 <USBD_LL_Init+0x94>)
 8007814:	2201      	movs	r2, #1
 8007816:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007818:	4b0e      	ldr	r3, [pc, #56]	; (8007854 <USBD_LL_Init+0x94>)
 800781a:	2200      	movs	r2, #0
 800781c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800781e:	480d      	ldr	r0, [pc, #52]	; (8007854 <USBD_LL_Init+0x94>)
 8007820:	f7f9 ff95 	bl	800174e <HAL_PCD_Init>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800782a:	f7f8 ffa1 	bl	8000770 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800782e:	2180      	movs	r1, #128	; 0x80
 8007830:	4808      	ldr	r0, [pc, #32]	; (8007854 <USBD_LL_Init+0x94>)
 8007832:	f7fb f9d4 	bl	8002bde <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007836:	2240      	movs	r2, #64	; 0x40
 8007838:	2100      	movs	r1, #0
 800783a:	4806      	ldr	r0, [pc, #24]	; (8007854 <USBD_LL_Init+0x94>)
 800783c:	f7fb f988 	bl	8002b50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007840:	2280      	movs	r2, #128	; 0x80
 8007842:	2101      	movs	r1, #1
 8007844:	4803      	ldr	r0, [pc, #12]	; (8007854 <USBD_LL_Init+0x94>)
 8007846:	f7fb f983 	bl	8002b50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	200006b0 	.word	0x200006b0

08007858 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007864:	2300      	movs	r3, #0
 8007866:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800786e:	4618      	mov	r0, r3
 8007870:	f7fa f88a 	bl	8001988 <HAL_PCD_Start>
 8007874:	4603      	mov	r3, r0
 8007876:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007878:	7bfb      	ldrb	r3, [r7, #15]
 800787a:	4618      	mov	r0, r3
 800787c:	f000 f930 	bl	8007ae0 <USBD_Get_USB_Status>
 8007880:	4603      	mov	r3, r0
 8007882:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007884:	7bbb      	ldrb	r3, [r7, #14]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	4608      	mov	r0, r1
 8007898:	4611      	mov	r1, r2
 800789a:	461a      	mov	r2, r3
 800789c:	4603      	mov	r3, r0
 800789e:	70fb      	strb	r3, [r7, #3]
 80078a0:	460b      	mov	r3, r1
 80078a2:	70bb      	strb	r3, [r7, #2]
 80078a4:	4613      	mov	r3, r2
 80078a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80078b6:	78bb      	ldrb	r3, [r7, #2]
 80078b8:	883a      	ldrh	r2, [r7, #0]
 80078ba:	78f9      	ldrb	r1, [r7, #3]
 80078bc:	f7fa fd5b 	bl	8002376 <HAL_PCD_EP_Open>
 80078c0:	4603      	mov	r3, r0
 80078c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 f90a 	bl	8007ae0 <USBD_Get_USB_Status>
 80078cc:	4603      	mov	r3, r0
 80078ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	460b      	mov	r3, r1
 80078e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078f4:	78fa      	ldrb	r2, [r7, #3]
 80078f6:	4611      	mov	r1, r2
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fa fda4 	bl	8002446 <HAL_PCD_EP_Close>
 80078fe:	4603      	mov	r3, r0
 8007900:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007902:	7bfb      	ldrb	r3, [r7, #15]
 8007904:	4618      	mov	r0, r3
 8007906:	f000 f8eb 	bl	8007ae0 <USBD_Get_USB_Status>
 800790a:	4603      	mov	r3, r0
 800790c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800790e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	460b      	mov	r3, r1
 8007922:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007932:	78fa      	ldrb	r2, [r7, #3]
 8007934:	4611      	mov	r1, r2
 8007936:	4618      	mov	r0, r3
 8007938:	f7fa fe64 	bl	8002604 <HAL_PCD_EP_SetStall>
 800793c:	4603      	mov	r3, r0
 800793e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007940:	7bfb      	ldrb	r3, [r7, #15]
 8007942:	4618      	mov	r0, r3
 8007944:	f000 f8cc 	bl	8007ae0 <USBD_Get_USB_Status>
 8007948:	4603      	mov	r3, r0
 800794a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800794c:	7bbb      	ldrb	r3, [r7, #14]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	460b      	mov	r3, r1
 8007960:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007970:	78fa      	ldrb	r2, [r7, #3]
 8007972:	4611      	mov	r1, r2
 8007974:	4618      	mov	r0, r3
 8007976:	f7fa fea9 	bl	80026cc <HAL_PCD_EP_ClrStall>
 800797a:	4603      	mov	r3, r0
 800797c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	4618      	mov	r0, r3
 8007982:	f000 f8ad 	bl	8007ae0 <USBD_Get_USB_Status>
 8007986:	4603      	mov	r3, r0
 8007988:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800798a:	7bbb      	ldrb	r3, [r7, #14]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80079a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	da0b      	bge.n	80079c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80079b0:	78fb      	ldrb	r3, [r7, #3]
 80079b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079b6:	68f9      	ldr	r1, [r7, #12]
 80079b8:	4613      	mov	r3, r2
 80079ba:	00db      	lsls	r3, r3, #3
 80079bc:	4413      	add	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	440b      	add	r3, r1
 80079c2:	333e      	adds	r3, #62	; 0x3e
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	e00b      	b.n	80079e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80079c8:	78fb      	ldrb	r3, [r7, #3]
 80079ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079ce:	68f9      	ldr	r1, [r7, #12]
 80079d0:	4613      	mov	r3, r2
 80079d2:	00db      	lsls	r3, r3, #3
 80079d4:	4413      	add	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	440b      	add	r3, r1
 80079da:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80079de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a06:	78fa      	ldrb	r2, [r7, #3]
 8007a08:	4611      	mov	r1, r2
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fa fc8e 	bl	800232c <HAL_PCD_SetAddress>
 8007a10:	4603      	mov	r3, r0
 8007a12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a14:	7bfb      	ldrb	r3, [r7, #15]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f000 f862 	bl	8007ae0 <USBD_Get_USB_Status>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b086      	sub	sp, #24
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	607a      	str	r2, [r7, #4]
 8007a34:	603b      	str	r3, [r7, #0]
 8007a36:	460b      	mov	r3, r1
 8007a38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007a48:	7af9      	ldrb	r1, [r7, #11]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	f7fa fd8f 	bl	8002570 <HAL_PCD_EP_Transmit>
 8007a52:	4603      	mov	r3, r0
 8007a54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 f841 	bl	8007ae0 <USBD_Get_USB_Status>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a62:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3718      	adds	r7, #24
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	607a      	str	r2, [r7, #4]
 8007a76:	603b      	str	r3, [r7, #0]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007a8a:	7af9      	ldrb	r1, [r7, #11]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	f7fa fd23 	bl	80024da <HAL_PCD_EP_Receive>
 8007a94:	4603      	mov	r3, r0
 8007a96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a98:	7dfb      	ldrb	r3, [r7, #23]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 f820 	bl	8007ae0 <USBD_Get_USB_Status>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007aa4:	7dbb      	ldrb	r3, [r7, #22]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3718      	adds	r7, #24
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
	...

08007ab0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007ab8:	4b03      	ldr	r3, [pc, #12]	; (8007ac8 <USBD_static_malloc+0x18>)
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	20000bbc 	.word	0x20000bbc

08007acc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]

}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007aee:	79fb      	ldrb	r3, [r7, #7]
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d817      	bhi.n	8007b24 <USBD_Get_USB_Status+0x44>
 8007af4:	a201      	add	r2, pc, #4	; (adr r2, 8007afc <USBD_Get_USB_Status+0x1c>)
 8007af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afa:	bf00      	nop
 8007afc:	08007b0d 	.word	0x08007b0d
 8007b00:	08007b13 	.word	0x08007b13
 8007b04:	08007b19 	.word	0x08007b19
 8007b08:	08007b1f 	.word	0x08007b1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b10:	e00b      	b.n	8007b2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b12:	2303      	movs	r3, #3
 8007b14:	73fb      	strb	r3, [r7, #15]
    break;
 8007b16:	e008      	b.n	8007b2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b1c:	e005      	b.n	8007b2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	73fb      	strb	r3, [r7, #15]
    break;
 8007b22:	e002      	b.n	8007b2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007b24:	2303      	movs	r3, #3
 8007b26:	73fb      	strb	r3, [r7, #15]
    break;
 8007b28:	bf00      	nop
  }
  return usb_status;
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <__libc_init_array>:
 8007b38:	b570      	push	{r4, r5, r6, lr}
 8007b3a:	4d0d      	ldr	r5, [pc, #52]	; (8007b70 <__libc_init_array+0x38>)
 8007b3c:	4c0d      	ldr	r4, [pc, #52]	; (8007b74 <__libc_init_array+0x3c>)
 8007b3e:	1b64      	subs	r4, r4, r5
 8007b40:	10a4      	asrs	r4, r4, #2
 8007b42:	2600      	movs	r6, #0
 8007b44:	42a6      	cmp	r6, r4
 8007b46:	d109      	bne.n	8007b5c <__libc_init_array+0x24>
 8007b48:	4d0b      	ldr	r5, [pc, #44]	; (8007b78 <__libc_init_array+0x40>)
 8007b4a:	4c0c      	ldr	r4, [pc, #48]	; (8007b7c <__libc_init_array+0x44>)
 8007b4c:	f000 f820 	bl	8007b90 <_init>
 8007b50:	1b64      	subs	r4, r4, r5
 8007b52:	10a4      	asrs	r4, r4, #2
 8007b54:	2600      	movs	r6, #0
 8007b56:	42a6      	cmp	r6, r4
 8007b58:	d105      	bne.n	8007b66 <__libc_init_array+0x2e>
 8007b5a:	bd70      	pop	{r4, r5, r6, pc}
 8007b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b60:	4798      	blx	r3
 8007b62:	3601      	adds	r6, #1
 8007b64:	e7ee      	b.n	8007b44 <__libc_init_array+0xc>
 8007b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b6a:	4798      	blx	r3
 8007b6c:	3601      	adds	r6, #1
 8007b6e:	e7f2      	b.n	8007b56 <__libc_init_array+0x1e>
 8007b70:	08007c18 	.word	0x08007c18
 8007b74:	08007c18 	.word	0x08007c18
 8007b78:	08007c18 	.word	0x08007c18
 8007b7c:	08007c1c 	.word	0x08007c1c

08007b80 <memset>:
 8007b80:	4402      	add	r2, r0
 8007b82:	4603      	mov	r3, r0
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d100      	bne.n	8007b8a <memset+0xa>
 8007b88:	4770      	bx	lr
 8007b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b8e:	e7f9      	b.n	8007b84 <memset+0x4>

08007b90 <_init>:
 8007b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b92:	bf00      	nop
 8007b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b96:	bc08      	pop	{r3}
 8007b98:	469e      	mov	lr, r3
 8007b9a:	4770      	bx	lr

08007b9c <_fini>:
 8007b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9e:	bf00      	nop
 8007ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ba2:	bc08      	pop	{r3}
 8007ba4:	469e      	mov	lr, r3
 8007ba6:	4770      	bx	lr
