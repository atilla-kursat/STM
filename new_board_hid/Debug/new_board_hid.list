
new_board_hid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08007fd0  08007fd0  00017fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008114  08008114  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008114  08008114  00018114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800811c  0800811c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800811c  0800811c  0001811c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008120  08008120  00018120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000007fc  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000088c  2000088c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000139a0  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037ef  00000000  00000000  00033a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  00037250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bc8  00000000  00000000  00037fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024484  00000000  00000000  00038b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f6e  00000000  00000000  0005cfec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8d1a  00000000  00000000  0006ff5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00138c74  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036f0  00000000  00000000  00138cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007fb8 	.word	0x08007fb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007fb8 	.word	0x08007fb8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <USBH_HID_EventCallback>:
/* USER CODE BEGIN 0 */
uint8_t keypress[7];
uint8_t keypressflag=0;
HID_KEYBD_Info_TypeDef *keyboard;

void USBH_HID_EventCallback(USBH_HandleTypeDef *phost){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

	keyboard = USBH_HID_GetKeybdInfo(phost);
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f005 fb71 	bl	8005bbc <USBH_HID_GetKeybdInfo>
 80004da:	4603      	mov	r3, r0
 80004dc:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <USBH_HID_EventCallback+0x24>)
 80004de:	6013      	str	r3, [r2, #0]
	/*
	keypress[keycount] = USBH_HID_GetASCIICode(keyboard);
	keycount++;
	 */
	keypressflag=1;
 80004e0:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <USBH_HID_EventCallback+0x28>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000158 	.word	0x20000158
 80004f4:	20000157 	.word	0x20000157

080004f8 <HAL_USART_TxCpltCallback>:

void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart){
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	keypressflag=0;
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <HAL_USART_TxCpltCallback+0x1c>)
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]

}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	20000157 	.word	0x20000157

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fb05 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f85d 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 f911 	bl	800074c <MX_GPIO_Init>
  MX_DMA_Init();
 800052a:	f000 f8ef 	bl	800070c <MX_DMA_Init>
  MX_USB_HOST_Init();
 800052e:	f007 f8fb 	bl	8007728 <MX_USB_HOST_Init>
  MX_USART2_Init();
 8000532:	f000 f8bf 	bl	80006b4 <MX_USART2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000536:	f007 f91d 	bl	8007774 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (keypressflag==1){
 800053a:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <main+0xb8>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d1f9      	bne.n	8000536 <main+0x1e>
    	int j=1;
 8000542:	2301      	movs	r3, #1
 8000544:	607b      	str	r3, [r7, #4]
    	keypress[0]=(keyboard->lshift | keyboard->lalt | keyboard->lctrl | keyboard->lgui | keyboard->ralt | keyboard->rctrl | keyboard->rgui | keyboard->rshift);
 8000546:	4b23      	ldr	r3, [pc, #140]	; (80005d4 <main+0xbc>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	789a      	ldrb	r2, [r3, #2]
 800054c:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <main+0xbc>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	78db      	ldrb	r3, [r3, #3]
 8000552:	4313      	orrs	r3, r2
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <main+0xbc>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	785b      	ldrb	r3, [r3, #1]
 800055c:	4313      	orrs	r3, r2
 800055e:	b2da      	uxtb	r2, r3
 8000560:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <main+0xbc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	791b      	ldrb	r3, [r3, #4]
 8000566:	4313      	orrs	r3, r2
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <main+0xbc>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	79db      	ldrb	r3, [r3, #7]
 8000570:	4313      	orrs	r3, r2
 8000572:	b2da      	uxtb	r2, r3
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <main+0xbc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	795b      	ldrb	r3, [r3, #5]
 800057a:	4313      	orrs	r3, r2
 800057c:	b2da      	uxtb	r2, r3
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <main+0xbc>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	7a1b      	ldrb	r3, [r3, #8]
 8000584:	4313      	orrs	r3, r2
 8000586:	b2da      	uxtb	r2, r3
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <main+0xbc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	799b      	ldrb	r3, [r3, #6]
 800058e:	4313      	orrs	r3, r2
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <main+0xc0>)
 8000594:	701a      	strb	r2, [r3, #0]
    	for (int i=0; i<6; i++){
 8000596:	2300      	movs	r3, #0
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	e010      	b.n	80005be <main+0xa6>
    		keypress[j]=keyboard->keys[i];
 800059c:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <main+0xbc>)
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	3309      	adds	r3, #9
 80005a6:	7819      	ldrb	r1, [r3, #0]
 80005a8:	4a0b      	ldr	r2, [pc, #44]	; (80005d8 <main+0xc0>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	460a      	mov	r2, r1
 80005b0:	701a      	strb	r2, [r3, #0]
    		j++;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	3301      	adds	r3, #1
 80005b6:	607b      	str	r3, [r7, #4]
    	for (int i=0; i<6; i++){
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	3301      	adds	r3, #1
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	2b05      	cmp	r3, #5
 80005c2:	ddeb      	ble.n	800059c <main+0x84>
    	}
    	HAL_USART_Transmit_DMA(&husart2, keypress, 7);
 80005c4:	2207      	movs	r2, #7
 80005c6:	4904      	ldr	r1, [pc, #16]	; (80005d8 <main+0xc0>)
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <main+0xc4>)
 80005ca:	f003 fa61 	bl	8003a90 <HAL_USART_Transmit_DMA>
    MX_USB_HOST_Process();
 80005ce:	e7b2      	b.n	8000536 <main+0x1e>
 80005d0:	20000157 	.word	0x20000157
 80005d4:	20000158 	.word	0x20000158
 80005d8:	20000150 	.word	0x20000150
 80005dc:	200000ac 	.word	0x200000ac

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	; 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f007 fbdc 	bl	8007dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	4b28      	ldr	r3, [pc, #160]	; (80006ac <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a27      	ldr	r2, [pc, #156]	; (80006ac <SystemClock_Config+0xcc>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b25      	ldr	r3, [pc, #148]	; (80006ac <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a21      	ldr	r2, [pc, #132]	; (80006b0 <SystemClock_Config+0xd0>)
 800062a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063c:	2301      	movs	r3, #1
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000650:	2304      	movs	r3, #4
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000654:	23a8      	movs	r3, #168	; 0xa8
 8000656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800065c:	2307      	movs	r3, #7
 800065e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	4618      	mov	r0, r3
 8000666:	f002 fd39 	bl	80030dc <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000670:	f000 f904 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2302      	movs	r3, #2
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000680:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2105      	movs	r1, #5
 8000692:	4618      	mov	r0, r3
 8000694:	f002 ff9a 	bl	80035cc <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800069e:	f000 f8ed 	bl	800087c <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	; 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_USART2_Init+0x50>)
 80006ba:	4a13      	ldr	r2, [pc, #76]	; (8000708 <MX_USART2_Init+0x54>)
 80006bc:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART2_Init+0x50>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_USART2_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80006cc:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <MX_USART2_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART2_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <MX_USART2_Init+0x50>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART2_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <MX_USART2_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART2_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_USART2_Init+0x50>)
 80006f2:	f003 f98b 	bl	8003a0c <HAL_USART_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 80006fc:	f000 f8be 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200000ac 	.word	0x200000ac
 8000708:	40004400 	.word	0x40004400

0800070c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_DMA_Init+0x3c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a0b      	ldr	r2, [pc, #44]	; (8000748 <MX_DMA_Init+0x3c>)
 800071c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_DMA_Init+0x3c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	2011      	movs	r0, #17
 8000734:	f000 fb6b 	bl	8000e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000738:	2011      	movs	r0, #17
 800073a:	f000 fb84 	bl	8000e46 <HAL_NVIC_EnableIRQ>

}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	4b41      	ldr	r3, [pc, #260]	; (800086c <MX_GPIO_Init+0x120>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a40      	ldr	r2, [pc, #256]	; (800086c <MX_GPIO_Init+0x120>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b3e      	ldr	r3, [pc, #248]	; (800086c <MX_GPIO_Init+0x120>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	4b3a      	ldr	r3, [pc, #232]	; (800086c <MX_GPIO_Init+0x120>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a39      	ldr	r2, [pc, #228]	; (800086c <MX_GPIO_Init+0x120>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b37      	ldr	r3, [pc, #220]	; (800086c <MX_GPIO_Init+0x120>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	4b33      	ldr	r3, [pc, #204]	; (800086c <MX_GPIO_Init+0x120>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a32      	ldr	r2, [pc, #200]	; (800086c <MX_GPIO_Init+0x120>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b30      	ldr	r3, [pc, #192]	; (800086c <MX_GPIO_Init+0x120>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b2c      	ldr	r3, [pc, #176]	; (800086c <MX_GPIO_Init+0x120>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a2b      	ldr	r2, [pc, #172]	; (800086c <MX_GPIO_Init+0x120>)
 80007c0:	f043 0308 	orr.w	r3, r3, #8
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b29      	ldr	r3, [pc, #164]	; (800086c <MX_GPIO_Init+0x120>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0308 	and.w	r3, r3, #8
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b25      	ldr	r3, [pc, #148]	; (800086c <MX_GPIO_Init+0x120>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a24      	ldr	r2, [pc, #144]	; (800086c <MX_GPIO_Init+0x120>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b22      	ldr	r3, [pc, #136]	; (800086c <MX_GPIO_Init+0x120>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2101      	movs	r1, #1
 80007f2:	481f      	ldr	r0, [pc, #124]	; (8000870 <MX_GPIO_Init+0x124>)
 80007f4:	f001 f84e 	bl	8001894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007fe:	481d      	ldr	r0, [pc, #116]	; (8000874 <MX_GPIO_Init+0x128>)
 8000800:	f001 f848 	bl	8001894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2180      	movs	r1, #128	; 0x80
 8000808:	481b      	ldr	r0, [pc, #108]	; (8000878 <MX_GPIO_Init+0x12c>)
 800080a:	f001 f843 	bl	8001894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800080e:	2301      	movs	r3, #1
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	4812      	ldr	r0, [pc, #72]	; (8000870 <MX_GPIO_Init+0x124>)
 8000826:	f000 fe99 	bl	800155c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800082a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_GPIO_Init+0x128>)
 8000844:	f000 fe8a 	bl	800155c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	4806      	ldr	r0, [pc, #24]	; (8000878 <MX_GPIO_Init+0x12c>)
 8000860:	f000 fe7c 	bl	800155c <HAL_GPIO_Init>

}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	; 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40020800 	.word	0x40020800
 8000874:	40020c00 	.word	0x40020c00
 8000878:	40020400 	.word	0x40020400

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	e7fe      	b.n	8000884 <Error_Handler+0x8>
	...

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <HAL_MspInit+0x4c>)
 8000898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089c:	6453      	str	r3, [r2, #68]	; 0x44
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <HAL_MspInit+0x4c>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a30      	ldr	r2, [pc, #192]	; (80009b8 <HAL_USART_MspInit+0xe0>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d159      	bne.n	80009ae <HAL_USART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <HAL_USART_MspInit+0xe4>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	4a2e      	ldr	r2, [pc, #184]	; (80009bc <HAL_USART_MspInit+0xe4>)
 8000904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
 800090a:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <HAL_USART_MspInit+0xe4>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b28      	ldr	r3, [pc, #160]	; (80009bc <HAL_USART_MspInit+0xe4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a27      	ldr	r2, [pc, #156]	; (80009bc <HAL_USART_MspInit+0xe4>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b25      	ldr	r3, [pc, #148]	; (80009bc <HAL_USART_MspInit+0xe4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000932:	231c      	movs	r3, #28
 8000934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000942:	2307      	movs	r3, #7
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	481c      	ldr	r0, [pc, #112]	; (80009c0 <HAL_USART_MspInit+0xe8>)
 800094e:	f000 fe05 	bl	800155c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <HAL_USART_MspInit+0xec>)
 8000954:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <HAL_USART_MspInit+0xf0>)
 8000956:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <HAL_USART_MspInit+0xec>)
 800095a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800095e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <HAL_USART_MspInit+0xec>)
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_USART_MspInit+0xec>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_USART_MspInit+0xec>)
 800096e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000972:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000974:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <HAL_USART_MspInit+0xec>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_USART_MspInit+0xec>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <HAL_USART_MspInit+0xec>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <HAL_USART_MspInit+0xec>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_USART_MspInit+0xec>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000992:	480c      	ldr	r0, [pc, #48]	; (80009c4 <HAL_USART_MspInit+0xec>)
 8000994:	f000 fa72 	bl	8000e7c <HAL_DMA_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_USART_MspInit+0xca>
    {
      Error_Handler();
 800099e:	f7ff ff6d 	bl	800087c <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart2_tx);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <HAL_USART_MspInit+0xec>)
 80009a6:	635a      	str	r2, [r3, #52]	; 0x34
 80009a8:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <HAL_USART_MspInit+0xec>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ae:	bf00      	nop
 80009b0:	3728      	adds	r7, #40	; 0x28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40004400 	.word	0x40004400
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020000 	.word	0x40020000
 80009c4:	200000f0 	.word	0x200000f0
 80009c8:	400260a0 	.word	0x400260a0

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler+0x4>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler+0x4>

080009de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a18:	f000 f8da 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <DMA1_Stream6_IRQHandler+0x10>)
 8000a26:	f000 fb2f 	bl	8001088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000f0 	.word	0x200000f0

08000a34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <OTG_FS_IRQHandler+0x10>)
 8000a3a:	f001 f9af 	bl	8001d9c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000578 	.word	0x20000578

08000a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a50:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <_sbrk+0x5c>)
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <_sbrk+0x60>)
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <_sbrk+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d102      	bne.n	8000a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <_sbrk+0x64>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <_sbrk+0x68>)
 8000a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d207      	bcs.n	8000a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a78:	f007 f95e 	bl	8007d38 <__errno>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	220c      	movs	r2, #12
 8000a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	e009      	b.n	8000a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	4a05      	ldr	r2, [pc, #20]	; (8000aac <_sbrk+0x64>)
 8000a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20020000 	.word	0x20020000
 8000aa8:	00000400 	.word	0x00000400
 8000aac:	2000015c 	.word	0x2000015c
 8000ab0:	20000890 	.word	0x20000890

08000ab4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <SystemInit+0x20>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000abe:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <SystemInit+0x20>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000adc:	480d      	ldr	r0, [pc, #52]	; (8000b14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ade:	490e      	ldr	r1, [pc, #56]	; (8000b18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ae0:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000af4:	4c0b      	ldr	r4, [pc, #44]	; (8000b24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b02:	f7ff ffd7 	bl	8000ab4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b06:	f007 f91d 	bl	8007d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0a:	f7ff fd05 	bl	8000518 <main>
  bx  lr    
 8000b0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000b1c:	08008124 	.word	0x08008124
  ldr r2, =_sbss
 8000b20:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000b24:	2000088c 	.word	0x2000088c

08000b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <HAL_Init+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <HAL_Init+0x40>)
 8000b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <HAL_Init+0x40>)
 8000b42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <HAL_Init+0x40>)
 8000b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f94f 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	f000 f808 	bl	8000b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b60:	f7ff fe92 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023c00 	.word	0x40023c00

08000b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <HAL_InitTick+0x54>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_InitTick+0x58>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f967 	bl	8000e62 <HAL_SYSTICK_Config>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e00e      	b.n	8000bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	d80a      	bhi.n	8000bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f000 f92f 	bl	8000e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb0:	4a06      	ldr	r2, [pc, #24]	; (8000bcc <HAL_InitTick+0x5c>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e000      	b.n	8000bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	20000004 	.word	0x20000004

08000bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000160 	.word	0x20000160

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000160 	.word	0x20000160

08000c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c18:	f7ff ffee 	bl	8000bf8 <HAL_GetTick>
 8000c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c28:	d005      	beq.n	8000c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_Delay+0x44>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4413      	add	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c36:	bf00      	nop
 8000c38:	f7ff ffde 	bl	8000bf8 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d8f7      	bhi.n	8000c38 <HAL_Delay+0x28>
  {
  }
}
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008

08000c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 0307 	and.w	r3, r3, #7
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db0b      	blt.n	8000ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f003 021f 	and.w	r2, r3, #31
 8000cd4:	4907      	ldr	r1, [pc, #28]	; (8000cf4 <__NVIC_EnableIRQ+0x38>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	095b      	lsrs	r3, r3, #5
 8000cdc:	2001      	movs	r0, #1
 8000cde:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	; (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	; (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
         );
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc4:	d301      	bcc.n	8000dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00f      	b.n	8000dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <SysTick_Config+0x40>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f7ff ff8e 	bl	8000cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <SysTick_Config+0x40>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <SysTick_Config+0x40>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff29 	bl	8000c58 <__NVIC_SetPriorityGrouping>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e20:	f7ff ff3e 	bl	8000ca0 <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ff8e 	bl	8000d4c <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff5d 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff31 	bl	8000cbc <__NVIC_EnableIRQ>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffa2 	bl	8000db4 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e88:	f7ff feb6 	bl	8000bf8 <HAL_GetTick>
 8000e8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d101      	bne.n	8000e98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e099      	b.n	8000fcc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f022 0201 	bic.w	r2, r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eb8:	e00f      	b.n	8000eda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000eba:	f7ff fe9d 	bl	8000bf8 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b05      	cmp	r3, #5
 8000ec6:	d908      	bls.n	8000eda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2220      	movs	r2, #32
 8000ecc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e078      	b.n	8000fcc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1e8      	bne.n	8000eba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <HAL_DMA_Init+0x158>)
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f30:	2b04      	cmp	r3, #4
 8000f32:	d107      	bne.n	8000f44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	f023 0307 	bic.w	r3, r3, #7
 8000f5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	d117      	bne.n	8000f9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00e      	beq.n	8000f9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 fa6f 	bl	8001464 <DMA_CheckFifoParam>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d008      	beq.n	8000f9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2240      	movs	r2, #64	; 0x40
 8000f90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e016      	b.n	8000fcc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 fa26 	bl	80013f8 <DMA_CalcBaseAndBitshift>
 8000fac:	4603      	mov	r3, r0
 8000fae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fb4:	223f      	movs	r2, #63	; 0x3f
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	f010803f 	.word	0xf010803f

08000fd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
 8000fe4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d101      	bne.n	8000ffe <HAL_DMA_Start_IT+0x26>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e040      	b.n	8001080 <HAL_DMA_Start_IT+0xa8>
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b01      	cmp	r3, #1
 8001010:	d12f      	bne.n	8001072 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2202      	movs	r2, #2
 8001016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2200      	movs	r2, #0
 800101e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	68b9      	ldr	r1, [r7, #8]
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	f000 f9b8 	bl	800139c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001030:	223f      	movs	r2, #63	; 0x3f
 8001032:	409a      	lsls	r2, r3
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f042 0216 	orr.w	r2, r2, #22
 8001046:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	2b00      	cmp	r3, #0
 800104e:	d007      	beq.n	8001060 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 0208 	orr.w	r2, r2, #8
 800105e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 0201 	orr.w	r2, r2, #1
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	e005      	b.n	800107e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800107a:	2302      	movs	r3, #2
 800107c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800107e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001094:	4b8e      	ldr	r3, [pc, #568]	; (80012d0 <HAL_DMA_IRQHandler+0x248>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a8e      	ldr	r2, [pc, #568]	; (80012d4 <HAL_DMA_IRQHandler+0x24c>)
 800109a:	fba2 2303 	umull	r2, r3, r2, r3
 800109e:	0a9b      	lsrs	r3, r3, #10
 80010a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b2:	2208      	movs	r2, #8
 80010b4:	409a      	lsls	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d01a      	beq.n	80010f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d013      	beq.n	80010f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0204 	bic.w	r2, r2, #4
 80010da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e0:	2208      	movs	r2, #8
 80010e2:	409a      	lsls	r2, r3
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ec:	f043 0201 	orr.w	r2, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f8:	2201      	movs	r2, #1
 80010fa:	409a      	lsls	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4013      	ands	r3, r2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d012      	beq.n	800112a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00b      	beq.n	800112a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001116:	2201      	movs	r2, #1
 8001118:	409a      	lsls	r2, r3
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001122:	f043 0202 	orr.w	r2, r3, #2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800112e:	2204      	movs	r2, #4
 8001130:	409a      	lsls	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d012      	beq.n	8001160 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00b      	beq.n	8001160 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800114c:	2204      	movs	r2, #4
 800114e:	409a      	lsls	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001158:	f043 0204 	orr.w	r2, r3, #4
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001164:	2210      	movs	r2, #16
 8001166:	409a      	lsls	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4013      	ands	r3, r2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d043      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b00      	cmp	r3, #0
 800117c:	d03c      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001182:	2210      	movs	r2, #16
 8001184:	409a      	lsls	r2, r3
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d018      	beq.n	80011ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d108      	bne.n	80011b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d024      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	4798      	blx	r3
 80011b6:	e01f      	b.n	80011f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d01b      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	4798      	blx	r3
 80011c8:	e016      	b.n	80011f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d107      	bne.n	80011e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 0208 	bic.w	r2, r2, #8
 80011e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fc:	2220      	movs	r2, #32
 80011fe:	409a      	lsls	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4013      	ands	r3, r2
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 808f 	beq.w	8001328 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0310 	and.w	r3, r3, #16
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 8087 	beq.w	8001328 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800121e:	2220      	movs	r2, #32
 8001220:	409a      	lsls	r2, r3
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b05      	cmp	r3, #5
 8001230:	d136      	bne.n	80012a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 0216 	bic.w	r2, r2, #22
 8001240:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	695a      	ldr	r2, [r3, #20]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001250:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	2b00      	cmp	r3, #0
 8001258:	d103      	bne.n	8001262 <HAL_DMA_IRQHandler+0x1da>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800125e:	2b00      	cmp	r3, #0
 8001260:	d007      	beq.n	8001272 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0208 	bic.w	r2, r2, #8
 8001270:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001276:	223f      	movs	r2, #63	; 0x3f
 8001278:	409a      	lsls	r2, r3
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001292:	2b00      	cmp	r3, #0
 8001294:	d07e      	beq.n	8001394 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	4798      	blx	r3
        }
        return;
 800129e:	e079      	b.n	8001394 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d01d      	beq.n	80012ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10d      	bne.n	80012d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d031      	beq.n	8001328 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	4798      	blx	r3
 80012cc:	e02c      	b.n	8001328 <HAL_DMA_IRQHandler+0x2a0>
 80012ce:	bf00      	nop
 80012d0:	20000000 	.word	0x20000000
 80012d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d023      	beq.n	8001328 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	4798      	blx	r3
 80012e8:	e01e      	b.n	8001328 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10f      	bne.n	8001318 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0210 	bic.w	r2, r2, #16
 8001306:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132c:	2b00      	cmp	r3, #0
 800132e:	d032      	beq.n	8001396 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b00      	cmp	r3, #0
 800133a:	d022      	beq.n	8001382 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2205      	movs	r2, #5
 8001340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0201 	bic.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	3301      	adds	r3, #1
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	429a      	cmp	r2, r3
 800135e:	d307      	bcc.n	8001370 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f2      	bne.n	8001354 <HAL_DMA_IRQHandler+0x2cc>
 800136e:	e000      	b.n	8001372 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001370:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	4798      	blx	r3
 8001392:	e000      	b.n	8001396 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001394:	bf00      	nop
    }
  }
}
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b40      	cmp	r3, #64	; 0x40
 80013c8:	d108      	bne.n	80013dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80013da:	e007      	b.n	80013ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	60da      	str	r2, [r3, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	3b10      	subs	r3, #16
 8001408:	4a14      	ldr	r2, [pc, #80]	; (800145c <DMA_CalcBaseAndBitshift+0x64>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	091b      	lsrs	r3, r3, #4
 8001410:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001412:	4a13      	ldr	r2, [pc, #76]	; (8001460 <DMA_CalcBaseAndBitshift+0x68>)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4413      	add	r3, r2
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2b03      	cmp	r3, #3
 8001424:	d909      	bls.n	800143a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800142e:	f023 0303 	bic.w	r3, r3, #3
 8001432:	1d1a      	adds	r2, r3, #4
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	659a      	str	r2, [r3, #88]	; 0x58
 8001438:	e007      	b.n	800144a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001442:	f023 0303 	bic.w	r3, r3, #3
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800144e:	4618      	mov	r0, r3
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	aaaaaaab 	.word	0xaaaaaaab
 8001460:	08007fec 	.word	0x08007fec

08001464 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d11f      	bne.n	80014be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	2b03      	cmp	r3, #3
 8001482:	d856      	bhi.n	8001532 <DMA_CheckFifoParam+0xce>
 8001484:	a201      	add	r2, pc, #4	; (adr r2, 800148c <DMA_CheckFifoParam+0x28>)
 8001486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148a:	bf00      	nop
 800148c:	0800149d 	.word	0x0800149d
 8001490:	080014af 	.word	0x080014af
 8001494:	0800149d 	.word	0x0800149d
 8001498:	08001533 	.word	0x08001533
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d046      	beq.n	8001536 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014ac:	e043      	b.n	8001536 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014b6:	d140      	bne.n	800153a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014bc:	e03d      	b.n	800153a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014c6:	d121      	bne.n	800150c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d837      	bhi.n	800153e <DMA_CheckFifoParam+0xda>
 80014ce:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <DMA_CheckFifoParam+0x70>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	080014e5 	.word	0x080014e5
 80014d8:	080014eb 	.word	0x080014eb
 80014dc:	080014e5 	.word	0x080014e5
 80014e0:	080014fd 	.word	0x080014fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
      break;
 80014e8:	e030      	b.n	800154c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d025      	beq.n	8001542 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014fa:	e022      	b.n	8001542 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001504:	d11f      	bne.n	8001546 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800150a:	e01c      	b.n	8001546 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d903      	bls.n	800151a <DMA_CheckFifoParam+0xb6>
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	2b03      	cmp	r3, #3
 8001516:	d003      	beq.n	8001520 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001518:	e018      	b.n	800154c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
      break;
 800151e:	e015      	b.n	800154c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00e      	beq.n	800154a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
      break;
 8001530:	e00b      	b.n	800154a <DMA_CheckFifoParam+0xe6>
      break;
 8001532:	bf00      	nop
 8001534:	e00a      	b.n	800154c <DMA_CheckFifoParam+0xe8>
      break;
 8001536:	bf00      	nop
 8001538:	e008      	b.n	800154c <DMA_CheckFifoParam+0xe8>
      break;
 800153a:	bf00      	nop
 800153c:	e006      	b.n	800154c <DMA_CheckFifoParam+0xe8>
      break;
 800153e:	bf00      	nop
 8001540:	e004      	b.n	800154c <DMA_CheckFifoParam+0xe8>
      break;
 8001542:	bf00      	nop
 8001544:	e002      	b.n	800154c <DMA_CheckFifoParam+0xe8>
      break;   
 8001546:	bf00      	nop
 8001548:	e000      	b.n	800154c <DMA_CheckFifoParam+0xe8>
      break;
 800154a:	bf00      	nop
    }
  } 
  
  return status; 
 800154c:	7bfb      	ldrb	r3, [r7, #15]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop

0800155c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	e16b      	b.n	8001850 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001578:	2201      	movs	r2, #1
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	429a      	cmp	r2, r3
 8001592:	f040 815a 	bne.w	800184a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d005      	beq.n	80015ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d130      	bne.n	8001610 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	2203      	movs	r2, #3
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e4:	2201      	movs	r2, #1
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	f003 0201 	and.w	r2, r3, #1
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	2b03      	cmp	r3, #3
 800161a:	d017      	beq.n	800164c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2203      	movs	r2, #3
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d123      	bne.n	80016a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	08da      	lsrs	r2, r3, #3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3208      	adds	r2, #8
 8001660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001664:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	220f      	movs	r2, #15
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	691a      	ldr	r2, [r3, #16]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	08da      	lsrs	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3208      	adds	r2, #8
 800169a:	69b9      	ldr	r1, [r7, #24]
 800169c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	2203      	movs	r2, #3
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0203 	and.w	r2, r3, #3
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 80b4 	beq.w	800184a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b60      	ldr	r3, [pc, #384]	; (8001868 <HAL_GPIO_Init+0x30c>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	4a5f      	ldr	r2, [pc, #380]	; (8001868 <HAL_GPIO_Init+0x30c>)
 80016ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f0:	6453      	str	r3, [r2, #68]	; 0x44
 80016f2:	4b5d      	ldr	r3, [pc, #372]	; (8001868 <HAL_GPIO_Init+0x30c>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016fe:	4a5b      	ldr	r2, [pc, #364]	; (800186c <HAL_GPIO_Init+0x310>)
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	089b      	lsrs	r3, r3, #2
 8001704:	3302      	adds	r3, #2
 8001706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	220f      	movs	r2, #15
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a52      	ldr	r2, [pc, #328]	; (8001870 <HAL_GPIO_Init+0x314>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d02b      	beq.n	8001782 <HAL_GPIO_Init+0x226>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a51      	ldr	r2, [pc, #324]	; (8001874 <HAL_GPIO_Init+0x318>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d025      	beq.n	800177e <HAL_GPIO_Init+0x222>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a50      	ldr	r2, [pc, #320]	; (8001878 <HAL_GPIO_Init+0x31c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d01f      	beq.n	800177a <HAL_GPIO_Init+0x21e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4f      	ldr	r2, [pc, #316]	; (800187c <HAL_GPIO_Init+0x320>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d019      	beq.n	8001776 <HAL_GPIO_Init+0x21a>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4e      	ldr	r2, [pc, #312]	; (8001880 <HAL_GPIO_Init+0x324>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d013      	beq.n	8001772 <HAL_GPIO_Init+0x216>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4d      	ldr	r2, [pc, #308]	; (8001884 <HAL_GPIO_Init+0x328>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d00d      	beq.n	800176e <HAL_GPIO_Init+0x212>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4c      	ldr	r2, [pc, #304]	; (8001888 <HAL_GPIO_Init+0x32c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d007      	beq.n	800176a <HAL_GPIO_Init+0x20e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4b      	ldr	r2, [pc, #300]	; (800188c <HAL_GPIO_Init+0x330>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d101      	bne.n	8001766 <HAL_GPIO_Init+0x20a>
 8001762:	2307      	movs	r3, #7
 8001764:	e00e      	b.n	8001784 <HAL_GPIO_Init+0x228>
 8001766:	2308      	movs	r3, #8
 8001768:	e00c      	b.n	8001784 <HAL_GPIO_Init+0x228>
 800176a:	2306      	movs	r3, #6
 800176c:	e00a      	b.n	8001784 <HAL_GPIO_Init+0x228>
 800176e:	2305      	movs	r3, #5
 8001770:	e008      	b.n	8001784 <HAL_GPIO_Init+0x228>
 8001772:	2304      	movs	r3, #4
 8001774:	e006      	b.n	8001784 <HAL_GPIO_Init+0x228>
 8001776:	2303      	movs	r3, #3
 8001778:	e004      	b.n	8001784 <HAL_GPIO_Init+0x228>
 800177a:	2302      	movs	r3, #2
 800177c:	e002      	b.n	8001784 <HAL_GPIO_Init+0x228>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <HAL_GPIO_Init+0x228>
 8001782:	2300      	movs	r3, #0
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	f002 0203 	and.w	r2, r2, #3
 800178a:	0092      	lsls	r2, r2, #2
 800178c:	4093      	lsls	r3, r2
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001794:	4935      	ldr	r1, [pc, #212]	; (800186c <HAL_GPIO_Init+0x310>)
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	089b      	lsrs	r3, r3, #2
 800179a:	3302      	adds	r3, #2
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017a2:	4b3b      	ldr	r3, [pc, #236]	; (8001890 <HAL_GPIO_Init+0x334>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017c6:	4a32      	ldr	r2, [pc, #200]	; (8001890 <HAL_GPIO_Init+0x334>)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017cc:	4b30      	ldr	r3, [pc, #192]	; (8001890 <HAL_GPIO_Init+0x334>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f0:	4a27      	ldr	r2, [pc, #156]	; (8001890 <HAL_GPIO_Init+0x334>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017f6:	4b26      	ldr	r3, [pc, #152]	; (8001890 <HAL_GPIO_Init+0x334>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800181a:	4a1d      	ldr	r2, [pc, #116]	; (8001890 <HAL_GPIO_Init+0x334>)
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <HAL_GPIO_Init+0x334>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001844:	4a12      	ldr	r2, [pc, #72]	; (8001890 <HAL_GPIO_Init+0x334>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3301      	adds	r3, #1
 800184e:	61fb      	str	r3, [r7, #28]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	2b0f      	cmp	r3, #15
 8001854:	f67f ae90 	bls.w	8001578 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3724      	adds	r7, #36	; 0x24
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800
 800186c:	40013800 	.word	0x40013800
 8001870:	40020000 	.word	0x40020000
 8001874:	40020400 	.word	0x40020400
 8001878:	40020800 	.word	0x40020800
 800187c:	40020c00 	.word	0x40020c00
 8001880:	40021000 	.word	0x40021000
 8001884:	40021400 	.word	0x40021400
 8001888:	40021800 	.word	0x40021800
 800188c:	40021c00 	.word	0x40021c00
 8001890:	40013c00 	.word	0x40013c00

08001894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
 80018a0:	4613      	mov	r3, r2
 80018a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018a4:	787b      	ldrb	r3, [r7, #1]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018aa:	887a      	ldrh	r2, [r7, #2]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018b0:	e003      	b.n	80018ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018b2:	887b      	ldrh	r3, [r7, #2]
 80018b4:	041a      	lsls	r2, r3, #16
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	619a      	str	r2, [r3, #24]
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c8:	b08f      	sub	sp, #60	; 0x3c
 80018ca:	af0a      	add	r7, sp, #40	; 0x28
 80018cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e054      	b.n	8001982 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d106      	bne.n	80018f8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f005 ff76 	bl	80077e4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2203      	movs	r2, #3
 80018fc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f002 fd0a 	bl	8004330 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	687e      	ldr	r6, [r7, #4]
 8001924:	466d      	mov	r5, sp
 8001926:	f106 0410 	add.w	r4, r6, #16
 800192a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800192c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800192e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001932:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001936:	e885 0003 	stmia.w	r5, {r0, r1}
 800193a:	1d33      	adds	r3, r6, #4
 800193c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800193e:	6838      	ldr	r0, [r7, #0]
 8001940:	f002 fc84 	bl	800424c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2101      	movs	r1, #1
 800194a:	4618      	mov	r0, r3
 800194c:	f002 fd01 	bl	8004352 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	603b      	str	r3, [r7, #0]
 8001956:	687e      	ldr	r6, [r7, #4]
 8001958:	466d      	mov	r5, sp
 800195a:	f106 0410 	add.w	r4, r6, #16
 800195e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001966:	e894 0003 	ldmia.w	r4, {r0, r1}
 800196a:	e885 0003 	stmia.w	r5, {r0, r1}
 800196e:	1d33      	adds	r3, r6, #4
 8001970:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001972:	6838      	ldr	r0, [r7, #0]
 8001974:	f002 fe8a 	bl	800468c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800198a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800198a:	b590      	push	{r4, r7, lr}
 800198c:	b089      	sub	sp, #36	; 0x24
 800198e:	af04      	add	r7, sp, #16
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	4608      	mov	r0, r1
 8001994:	4611      	mov	r1, r2
 8001996:	461a      	mov	r2, r3
 8001998:	4603      	mov	r3, r0
 800199a:	70fb      	strb	r3, [r7, #3]
 800199c:	460b      	mov	r3, r1
 800199e:	70bb      	strb	r3, [r7, #2]
 80019a0:	4613      	mov	r3, r2
 80019a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_HCD_HC_Init+0x28>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e076      	b.n	8001aa0 <HAL_HCD_HC_Init+0x116>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	212c      	movs	r1, #44	; 0x2c
 80019c0:	fb01 f303 	mul.w	r3, r1, r3
 80019c4:	4413      	add	r3, r2
 80019c6:	333d      	adds	r3, #61	; 0x3d
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	212c      	movs	r1, #44	; 0x2c
 80019d2:	fb01 f303 	mul.w	r3, r1, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	3338      	adds	r3, #56	; 0x38
 80019da:	787a      	ldrb	r2, [r7, #1]
 80019dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	212c      	movs	r1, #44	; 0x2c
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	3340      	adds	r3, #64	; 0x40
 80019ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019ee:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	212c      	movs	r1, #44	; 0x2c
 80019f6:	fb01 f303 	mul.w	r3, r1, r3
 80019fa:	4413      	add	r3, r2
 80019fc:	3339      	adds	r3, #57	; 0x39
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	212c      	movs	r1, #44	; 0x2c
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	333f      	adds	r3, #63	; 0x3f
 8001a10:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	78ba      	ldrb	r2, [r7, #2]
 8001a1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a1e:	b2d0      	uxtb	r0, r2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	212c      	movs	r1, #44	; 0x2c
 8001a24:	fb01 f303 	mul.w	r3, r1, r3
 8001a28:	4413      	add	r3, r2
 8001a2a:	333a      	adds	r3, #58	; 0x3a
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	da09      	bge.n	8001a4c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	212c      	movs	r1, #44	; 0x2c
 8001a3e:	fb01 f303 	mul.w	r3, r1, r3
 8001a42:	4413      	add	r3, r2
 8001a44:	333b      	adds	r3, #59	; 0x3b
 8001a46:	2201      	movs	r2, #1
 8001a48:	701a      	strb	r2, [r3, #0]
 8001a4a:	e008      	b.n	8001a5e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	212c      	movs	r1, #44	; 0x2c
 8001a52:	fb01 f303 	mul.w	r3, r1, r3
 8001a56:	4413      	add	r3, r2
 8001a58:	333b      	adds	r3, #59	; 0x3b
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	212c      	movs	r1, #44	; 0x2c
 8001a64:	fb01 f303 	mul.w	r3, r1, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	333c      	adds	r3, #60	; 0x3c
 8001a6c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a70:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	787c      	ldrb	r4, [r7, #1]
 8001a78:	78ba      	ldrb	r2, [r7, #2]
 8001a7a:	78f9      	ldrb	r1, [r7, #3]
 8001a7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a7e:	9302      	str	r3, [sp, #8]
 8001a80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a84:	9301      	str	r3, [sp, #4]
 8001a86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	4623      	mov	r3, r4
 8001a8e:	f002 ff83 	bl	8004998 <USB_HC_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd90      	pop	{r4, r7, pc}

08001aa8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_HCD_HC_Halt+0x1e>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e00f      	b.n	8001ae6 <HAL_HCD_HC_Halt+0x3e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	78fa      	ldrb	r2, [r7, #3]
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f003 f9d3 	bl	8004e82 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	4608      	mov	r0, r1
 8001afa:	4611      	mov	r1, r2
 8001afc:	461a      	mov	r2, r3
 8001afe:	4603      	mov	r3, r0
 8001b00:	70fb      	strb	r3, [r7, #3]
 8001b02:	460b      	mov	r3, r1
 8001b04:	70bb      	strb	r3, [r7, #2]
 8001b06:	4613      	mov	r3, r2
 8001b08:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	212c      	movs	r1, #44	; 0x2c
 8001b10:	fb01 f303 	mul.w	r3, r1, r3
 8001b14:	4413      	add	r3, r2
 8001b16:	333b      	adds	r3, #59	; 0x3b
 8001b18:	78ba      	ldrb	r2, [r7, #2]
 8001b1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	212c      	movs	r1, #44	; 0x2c
 8001b22:	fb01 f303 	mul.w	r3, r1, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	333f      	adds	r3, #63	; 0x3f
 8001b2a:	787a      	ldrb	r2, [r7, #1]
 8001b2c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b2e:	7c3b      	ldrb	r3, [r7, #16]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d112      	bne.n	8001b5a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	212c      	movs	r1, #44	; 0x2c
 8001b3a:	fb01 f303 	mul.w	r3, r1, r3
 8001b3e:	4413      	add	r3, r2
 8001b40:	3342      	adds	r3, #66	; 0x42
 8001b42:	2203      	movs	r2, #3
 8001b44:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	212c      	movs	r1, #44	; 0x2c
 8001b4c:	fb01 f303 	mul.w	r3, r1, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	333d      	adds	r3, #61	; 0x3d
 8001b54:	7f3a      	ldrb	r2, [r7, #28]
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	e008      	b.n	8001b6c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b5a:	78fb      	ldrb	r3, [r7, #3]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	212c      	movs	r1, #44	; 0x2c
 8001b60:	fb01 f303 	mul.w	r3, r1, r3
 8001b64:	4413      	add	r3, r2
 8001b66:	3342      	adds	r3, #66	; 0x42
 8001b68:	2202      	movs	r2, #2
 8001b6a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b6c:	787b      	ldrb	r3, [r7, #1]
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	f200 80c6 	bhi.w	8001d00 <HAL_HCD_HC_SubmitRequest+0x210>
 8001b74:	a201      	add	r2, pc, #4	; (adr r2, 8001b7c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7a:	bf00      	nop
 8001b7c:	08001b8d 	.word	0x08001b8d
 8001b80:	08001ced 	.word	0x08001ced
 8001b84:	08001bf1 	.word	0x08001bf1
 8001b88:	08001c6f 	.word	0x08001c6f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b8c:	7c3b      	ldrb	r3, [r7, #16]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	f040 80b8 	bne.w	8001d04 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b94:	78bb      	ldrb	r3, [r7, #2]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f040 80b4 	bne.w	8001d04 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b9c:	8b3b      	ldrh	r3, [r7, #24]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d108      	bne.n	8001bb4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	212c      	movs	r1, #44	; 0x2c
 8001ba8:	fb01 f303 	mul.w	r3, r1, r3
 8001bac:	4413      	add	r3, r2
 8001bae:	3355      	adds	r3, #85	; 0x55
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	212c      	movs	r1, #44	; 0x2c
 8001bba:	fb01 f303 	mul.w	r3, r1, r3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3355      	adds	r3, #85	; 0x55
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d109      	bne.n	8001bdc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	212c      	movs	r1, #44	; 0x2c
 8001bce:	fb01 f303 	mul.w	r3, r1, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3342      	adds	r3, #66	; 0x42
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bda:	e093      	b.n	8001d04 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	212c      	movs	r1, #44	; 0x2c
 8001be2:	fb01 f303 	mul.w	r3, r1, r3
 8001be6:	4413      	add	r3, r2
 8001be8:	3342      	adds	r3, #66	; 0x42
 8001bea:	2202      	movs	r2, #2
 8001bec:	701a      	strb	r2, [r3, #0]
      break;
 8001bee:	e089      	b.n	8001d04 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001bf0:	78bb      	ldrb	r3, [r7, #2]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d11d      	bne.n	8001c32 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	212c      	movs	r1, #44	; 0x2c
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	3355      	adds	r3, #85	; 0x55
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	212c      	movs	r1, #44	; 0x2c
 8001c10:	fb01 f303 	mul.w	r3, r1, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	3342      	adds	r3, #66	; 0x42
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c1c:	e073      	b.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	212c      	movs	r1, #44	; 0x2c
 8001c24:	fb01 f303 	mul.w	r3, r1, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	3342      	adds	r3, #66	; 0x42
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	701a      	strb	r2, [r3, #0]
      break;
 8001c30:	e069      	b.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	212c      	movs	r1, #44	; 0x2c
 8001c38:	fb01 f303 	mul.w	r3, r1, r3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3354      	adds	r3, #84	; 0x54
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d109      	bne.n	8001c5a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	212c      	movs	r1, #44	; 0x2c
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	3342      	adds	r3, #66	; 0x42
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
      break;
 8001c58:	e055      	b.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	212c      	movs	r1, #44	; 0x2c
 8001c60:	fb01 f303 	mul.w	r3, r1, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	3342      	adds	r3, #66	; 0x42
 8001c68:	2202      	movs	r2, #2
 8001c6a:	701a      	strb	r2, [r3, #0]
      break;
 8001c6c:	e04b      	b.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c6e:	78bb      	ldrb	r3, [r7, #2]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d11d      	bne.n	8001cb0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	212c      	movs	r1, #44	; 0x2c
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	4413      	add	r3, r2
 8001c80:	3355      	adds	r3, #85	; 0x55
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d109      	bne.n	8001c9c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	212c      	movs	r1, #44	; 0x2c
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	3342      	adds	r3, #66	; 0x42
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c9a:	e034      	b.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	212c      	movs	r1, #44	; 0x2c
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3342      	adds	r3, #66	; 0x42
 8001caa:	2202      	movs	r2, #2
 8001cac:	701a      	strb	r2, [r3, #0]
      break;
 8001cae:	e02a      	b.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	212c      	movs	r1, #44	; 0x2c
 8001cb6:	fb01 f303 	mul.w	r3, r1, r3
 8001cba:	4413      	add	r3, r2
 8001cbc:	3354      	adds	r3, #84	; 0x54
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d109      	bne.n	8001cd8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	212c      	movs	r1, #44	; 0x2c
 8001cca:	fb01 f303 	mul.w	r3, r1, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	3342      	adds	r3, #66	; 0x42
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
      break;
 8001cd6:	e016      	b.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	212c      	movs	r1, #44	; 0x2c
 8001cde:	fb01 f303 	mul.w	r3, r1, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3342      	adds	r3, #66	; 0x42
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	701a      	strb	r2, [r3, #0]
      break;
 8001cea:	e00c      	b.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	212c      	movs	r1, #44	; 0x2c
 8001cf2:	fb01 f303 	mul.w	r3, r1, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3342      	adds	r3, #66	; 0x42
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]
      break;
 8001cfe:	e002      	b.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001d00:	bf00      	nop
 8001d02:	e000      	b.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001d04:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	212c      	movs	r1, #44	; 0x2c
 8001d0c:	fb01 f303 	mul.w	r3, r1, r3
 8001d10:	4413      	add	r3, r2
 8001d12:	3344      	adds	r3, #68	; 0x44
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	8b3a      	ldrh	r2, [r7, #24]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	202c      	movs	r0, #44	; 0x2c
 8001d20:	fb00 f303 	mul.w	r3, r0, r3
 8001d24:	440b      	add	r3, r1
 8001d26:	334c      	adds	r3, #76	; 0x4c
 8001d28:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	212c      	movs	r1, #44	; 0x2c
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	3360      	adds	r3, #96	; 0x60
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	212c      	movs	r1, #44	; 0x2c
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	3350      	adds	r3, #80	; 0x50
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	212c      	movs	r1, #44	; 0x2c
 8001d54:	fb01 f303 	mul.w	r3, r1, r3
 8001d58:	4413      	add	r3, r2
 8001d5a:	3339      	adds	r3, #57	; 0x39
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
 8001d5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	212c      	movs	r1, #44	; 0x2c
 8001d66:	fb01 f303 	mul.w	r3, r1, r3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3361      	adds	r3, #97	; 0x61
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	222c      	movs	r2, #44	; 0x2c
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
 8001d7e:	3338      	adds	r3, #56	; 0x38
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	18d1      	adds	r1, r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f002 ff26 	bl	8004bdc <USB_HC_StartXfer>
 8001d90:	4603      	mov	r3, r0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop

08001d9c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f002 fc27 	bl	8004606 <USB_GetMode>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	f040 80f6 	bne.w	8001fac <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f002 fc0b 	bl	80045e0 <USB_ReadInterrupts>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80ec 	beq.w	8001faa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f002 fc02 	bl	80045e0 <USB_ReadInterrupts>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001de6:	d104      	bne.n	8001df2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001df0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f002 fbf2 	bl	80045e0 <USB_ReadInterrupts>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e06:	d104      	bne.n	8001e12 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f002 fbe2 	bl	80045e0 <USB_ReadInterrupts>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e26:	d104      	bne.n	8001e32 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f002 fbd2 	bl	80045e0 <USB_ReadInterrupts>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d103      	bne.n	8001e4e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f002 fbc4 	bl	80045e0 <USB_ReadInterrupts>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e62:	d11c      	bne.n	8001e9e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e6c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10f      	bne.n	8001e9e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e7e:	2110      	movs	r1, #16
 8001e80:	6938      	ldr	r0, [r7, #16]
 8001e82:	f002 fab3 	bl	80043ec <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e86:	6938      	ldr	r0, [r7, #16]
 8001e88:	f002 fae4 	bl	8004454 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2101      	movs	r1, #1
 8001e92:	4618      	mov	r0, r3
 8001e94:	f002 fcba 	bl	800480c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f005 fd21 	bl	80078e0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f002 fb9c 	bl	80045e0 <USB_ReadInterrupts>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb2:	d102      	bne.n	8001eba <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f001 f89e 	bl	8002ff6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f002 fb8e 	bl	80045e0 <USB_ReadInterrupts>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d106      	bne.n	8001edc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f005 fcea 	bl	80078a8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2208      	movs	r2, #8
 8001eda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 fb7d 	bl	80045e0 <USB_ReadInterrupts>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f003 0310 	and.w	r3, r3, #16
 8001eec:	2b10      	cmp	r3, #16
 8001eee:	d101      	bne.n	8001ef4 <HAL_HCD_IRQHandler+0x158>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <HAL_HCD_IRQHandler+0x15a>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d012      	beq.n	8001f20 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699a      	ldr	r2, [r3, #24]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0210 	bic.w	r2, r2, #16
 8001f08:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 ffa1 	bl	8002e52 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699a      	ldr	r2, [r3, #24]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0210 	orr.w	r2, r2, #16
 8001f1e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f002 fb5b 	bl	80045e0 <USB_ReadInterrupts>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f34:	d13a      	bne.n	8001fac <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f002 ff90 	bl	8004e60 <USB_HC_ReadInterrupt>
 8001f40:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	e025      	b.n	8001f94 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d018      	beq.n	8001f8e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f72:	d106      	bne.n	8001f82 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	4619      	mov	r1, r3
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f8ab 	bl	80020d6 <HCD_HC_IN_IRQHandler>
 8001f80:	e005      	b.n	8001f8e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	4619      	mov	r1, r3
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 fbf9 	bl	8002780 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	3301      	adds	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d3d4      	bcc.n	8001f48 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fa6:	615a      	str	r2, [r3, #20]
 8001fa8:	e000      	b.n	8001fac <HAL_HCD_IRQHandler+0x210>
      return;
 8001faa:	bf00      	nop
    }
  }
}
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_HCD_Start+0x16>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e013      	b.n	8001ff0 <HAL_HCD_Start+0x3e>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f002 fc7c 	bl	80048d4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f002 f994 	bl	800430e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_HCD_Stop+0x16>
 800200a:	2302      	movs	r3, #2
 800200c:	e00d      	b.n	800202a <HAL_HCD_Stop+0x32>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f003 f86a 	bl	80050f4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f002 fc1e 	bl	8004880 <USB_ResetPort>
 8002044:	4603      	mov	r3, r0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	212c      	movs	r1, #44	; 0x2c
 8002060:	fb01 f303 	mul.w	r3, r1, r3
 8002064:	4413      	add	r3, r2
 8002066:	3360      	adds	r3, #96	; 0x60
 8002068:	781b      	ldrb	r3, [r3, #0]
}
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	460b      	mov	r3, r1
 8002080:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	212c      	movs	r1, #44	; 0x2c
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	4413      	add	r3, r2
 800208e:	3350      	adds	r3, #80	; 0x50
 8002090:	681b      	ldr	r3, [r3, #0]
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f002 fc62 	bl	8004974 <USB_GetCurrentFrame>
 80020b0:	4603      	mov	r3, r0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f002 fc3d 	bl	8004946 <USB_GetHostSpeed>
 80020cc:	4603      	mov	r3, r0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b086      	sub	sp, #24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	460b      	mov	r3, r1
 80020e0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b04      	cmp	r3, #4
 8002104:	d11a      	bne.n	800213c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4413      	add	r3, r2
 800210e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002112:	461a      	mov	r2, r3
 8002114:	2304      	movs	r3, #4
 8002116:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	212c      	movs	r1, #44	; 0x2c
 800211e:	fb01 f303 	mul.w	r3, r1, r3
 8002122:	4413      	add	r3, r2
 8002124:	3361      	adds	r3, #97	; 0x61
 8002126:	2206      	movs	r2, #6
 8002128:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f002 fea4 	bl	8004e82 <USB_HC_Halt>
 800213a:	e0af      	b.n	800229c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4413      	add	r3, r2
 8002144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002152:	d11b      	bne.n	800218c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	015a      	lsls	r2, r3, #5
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4413      	add	r3, r2
 800215c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002160:	461a      	mov	r2, r3
 8002162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002166:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	212c      	movs	r1, #44	; 0x2c
 800216e:	fb01 f303 	mul.w	r3, r1, r3
 8002172:	4413      	add	r3, r2
 8002174:	3361      	adds	r3, #97	; 0x61
 8002176:	2207      	movs	r2, #7
 8002178:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f002 fe7c 	bl	8004e82 <USB_HC_Halt>
 800218a:	e087      	b.n	800229c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	015a      	lsls	r2, r3, #5
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4413      	add	r3, r2
 8002194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b20      	cmp	r3, #32
 80021a0:	d109      	bne.n	80021b6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ae:	461a      	mov	r2, r3
 80021b0:	2320      	movs	r3, #32
 80021b2:	6093      	str	r3, [r2, #8]
 80021b4:	e072      	b.n	800229c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d11a      	bne.n	8002202 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d8:	461a      	mov	r2, r3
 80021da:	2308      	movs	r3, #8
 80021dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	212c      	movs	r1, #44	; 0x2c
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	3361      	adds	r3, #97	; 0x61
 80021ec:	2205      	movs	r2, #5
 80021ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	4611      	mov	r1, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f002 fe41 	bl	8004e82 <USB_HC_Halt>
 8002200:	e04c      	b.n	800229c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4413      	add	r3, r2
 800220a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002218:	d11b      	bne.n	8002252 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4413      	add	r3, r2
 8002222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002226:	461a      	mov	r2, r3
 8002228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800222c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	212c      	movs	r1, #44	; 0x2c
 8002234:	fb01 f303 	mul.w	r3, r1, r3
 8002238:	4413      	add	r3, r2
 800223a:	3361      	adds	r3, #97	; 0x61
 800223c:	2208      	movs	r2, #8
 800223e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f002 fe19 	bl	8004e82 <USB_HC_Halt>
 8002250:	e024      	b.n	800229c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	015a      	lsls	r2, r3, #5
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4413      	add	r3, r2
 800225a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002264:	2b80      	cmp	r3, #128	; 0x80
 8002266:	d119      	bne.n	800229c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002274:	461a      	mov	r2, r3
 8002276:	2380      	movs	r3, #128	; 0x80
 8002278:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	212c      	movs	r1, #44	; 0x2c
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	3361      	adds	r3, #97	; 0x61
 8002288:	2206      	movs	r2, #6
 800228a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	4611      	mov	r1, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f002 fdf3 	bl	8004e82 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b2:	d112      	bne.n	80022da <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	4611      	mov	r1, r2
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 fddf 	bl	8004e82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d0:	461a      	mov	r2, r3
 80022d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022d6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80022d8:	e24e      	b.n	8002778 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	f040 80df 	bne.w	80024b0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d019      	beq.n	800232e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	3348      	adds	r3, #72	; 0x48
 8002308:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	0159      	lsls	r1, r3, #5
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	440b      	add	r3, r1
 8002312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800231c:	1ad2      	subs	r2, r2, r3
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	202c      	movs	r0, #44	; 0x2c
 8002324:	fb00 f303 	mul.w	r3, r0, r3
 8002328:	440b      	add	r3, r1
 800232a:	3350      	adds	r3, #80	; 0x50
 800232c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	212c      	movs	r1, #44	; 0x2c
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	3361      	adds	r3, #97	; 0x61
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	212c      	movs	r1, #44	; 0x2c
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	4413      	add	r3, r2
 800234c:	335c      	adds	r3, #92	; 0x5c
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4413      	add	r3, r2
 800235a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235e:	461a      	mov	r2, r3
 8002360:	2301      	movs	r3, #1
 8002362:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	212c      	movs	r1, #44	; 0x2c
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	4413      	add	r3, r2
 8002370:	333f      	adds	r3, #63	; 0x3f
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d009      	beq.n	800238c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	212c      	movs	r1, #44	; 0x2c
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	333f      	adds	r3, #63	; 0x3f
 8002386:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002388:	2b02      	cmp	r3, #2
 800238a:	d111      	bne.n	80023b0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f002 fd73 	bl	8004e82 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a8:	461a      	mov	r2, r3
 80023aa:	2310      	movs	r3, #16
 80023ac:	6093      	str	r3, [r2, #8]
 80023ae:	e03a      	b.n	8002426 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	212c      	movs	r1, #44	; 0x2c
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	4413      	add	r3, r2
 80023bc:	333f      	adds	r3, #63	; 0x3f
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d009      	beq.n	80023d8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	212c      	movs	r1, #44	; 0x2c
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	333f      	adds	r3, #63	; 0x3f
 80023d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d126      	bne.n	8002426 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	0151      	lsls	r1, r2, #5
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	440a      	add	r2, r1
 80023ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023f6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	212c      	movs	r1, #44	; 0x2c
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	4413      	add	r3, r2
 8002404:	3360      	adds	r3, #96	; 0x60
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	b2d9      	uxtb	r1, r3
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	202c      	movs	r0, #44	; 0x2c
 8002414:	fb00 f303 	mul.w	r3, r0, r3
 8002418:	4413      	add	r3, r2
 800241a:	3360      	adds	r3, #96	; 0x60
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f005 fa6b 	bl	80078fc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d12b      	bne.n	8002486 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	212c      	movs	r1, #44	; 0x2c
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	4413      	add	r3, r2
 800243a:	3348      	adds	r3, #72	; 0x48
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	202c      	movs	r0, #44	; 0x2c
 8002444:	fb00 f202 	mul.w	r2, r0, r2
 8002448:	440a      	add	r2, r1
 800244a:	3240      	adds	r2, #64	; 0x40
 800244c:	8812      	ldrh	r2, [r2, #0]
 800244e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 818e 	beq.w	8002778 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	212c      	movs	r1, #44	; 0x2c
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	3354      	adds	r3, #84	; 0x54
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	f083 0301 	eor.w	r3, r3, #1
 8002470:	b2d8      	uxtb	r0, r3
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	212c      	movs	r1, #44	; 0x2c
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	4413      	add	r3, r2
 800247e:	3354      	adds	r3, #84	; 0x54
 8002480:	4602      	mov	r2, r0
 8002482:	701a      	strb	r2, [r3, #0]
}
 8002484:	e178      	b.n	8002778 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	212c      	movs	r1, #44	; 0x2c
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	4413      	add	r3, r2
 8002492:	3354      	adds	r3, #84	; 0x54
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	f083 0301 	eor.w	r3, r3, #1
 800249a:	b2d8      	uxtb	r0, r3
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	212c      	movs	r1, #44	; 0x2c
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	3354      	adds	r3, #84	; 0x54
 80024aa:	4602      	mov	r2, r0
 80024ac:	701a      	strb	r2, [r3, #0]
}
 80024ae:	e163      	b.n	8002778 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	f040 80f6 	bne.w	80026b4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	212c      	movs	r1, #44	; 0x2c
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	3361      	adds	r3, #97	; 0x61
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d109      	bne.n	80024f0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	3360      	adds	r3, #96	; 0x60
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
 80024ee:	e0c9      	b.n	8002684 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	212c      	movs	r1, #44	; 0x2c
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	3361      	adds	r3, #97	; 0x61
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b05      	cmp	r3, #5
 8002502:	d109      	bne.n	8002518 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	212c      	movs	r1, #44	; 0x2c
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	4413      	add	r3, r2
 8002510:	3360      	adds	r3, #96	; 0x60
 8002512:	2205      	movs	r2, #5
 8002514:	701a      	strb	r2, [r3, #0]
 8002516:	e0b5      	b.n	8002684 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	212c      	movs	r1, #44	; 0x2c
 800251e:	fb01 f303 	mul.w	r3, r1, r3
 8002522:	4413      	add	r3, r2
 8002524:	3361      	adds	r3, #97	; 0x61
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b06      	cmp	r3, #6
 800252a:	d009      	beq.n	8002540 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	212c      	movs	r1, #44	; 0x2c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	3361      	adds	r3, #97	; 0x61
 800253a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800253c:	2b08      	cmp	r3, #8
 800253e:	d150      	bne.n	80025e2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	212c      	movs	r1, #44	; 0x2c
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	4413      	add	r3, r2
 800254c:	335c      	adds	r3, #92	; 0x5c
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	202c      	movs	r0, #44	; 0x2c
 8002558:	fb00 f303 	mul.w	r3, r0, r3
 800255c:	440b      	add	r3, r1
 800255e:	335c      	adds	r3, #92	; 0x5c
 8002560:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	212c      	movs	r1, #44	; 0x2c
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	335c      	adds	r3, #92	; 0x5c
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d912      	bls.n	800259c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	212c      	movs	r1, #44	; 0x2c
 800257c:	fb01 f303 	mul.w	r3, r1, r3
 8002580:	4413      	add	r3, r2
 8002582:	335c      	adds	r3, #92	; 0x5c
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	212c      	movs	r1, #44	; 0x2c
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	3360      	adds	r3, #96	; 0x60
 8002596:	2204      	movs	r2, #4
 8002598:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800259a:	e073      	b.n	8002684 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	212c      	movs	r1, #44	; 0x2c
 80025a2:	fb01 f303 	mul.w	r3, r1, r3
 80025a6:	4413      	add	r3, r2
 80025a8:	3360      	adds	r3, #96	; 0x60
 80025aa:	2202      	movs	r2, #2
 80025ac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025c4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025cc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025da:	461a      	mov	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025e0:	e050      	b.n	8002684 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	3361      	adds	r3, #97	; 0x61
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d122      	bne.n	800263c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	3360      	adds	r3, #96	; 0x60
 8002604:	2202      	movs	r2, #2
 8002606:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800261e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002626:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002634:	461a      	mov	r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e023      	b.n	8002684 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3361      	adds	r3, #97	; 0x61
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b07      	cmp	r3, #7
 800264e:	d119      	bne.n	8002684 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	212c      	movs	r1, #44	; 0x2c
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	335c      	adds	r3, #92	; 0x5c
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	202c      	movs	r0, #44	; 0x2c
 8002668:	fb00 f303 	mul.w	r3, r0, r3
 800266c:	440b      	add	r3, r1
 800266e:	335c      	adds	r3, #92	; 0x5c
 8002670:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	212c      	movs	r1, #44	; 0x2c
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	4413      	add	r3, r2
 800267e:	3360      	adds	r3, #96	; 0x60
 8002680:	2204      	movs	r2, #4
 8002682:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4413      	add	r3, r2
 800268c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002690:	461a      	mov	r2, r3
 8002692:	2302      	movs	r3, #2
 8002694:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	b2d9      	uxtb	r1, r3
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	202c      	movs	r0, #44	; 0x2c
 80026a0:	fb00 f303 	mul.w	r3, r0, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	3360      	adds	r3, #96	; 0x60
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f005 f925 	bl	80078fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80026b2:	e061      	b.n	8002778 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b10      	cmp	r3, #16
 80026c8:	d156      	bne.n	8002778 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	212c      	movs	r1, #44	; 0x2c
 80026d0:	fb01 f303 	mul.w	r3, r1, r3
 80026d4:	4413      	add	r3, r2
 80026d6:	333f      	adds	r3, #63	; 0x3f
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d111      	bne.n	8002702 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	335c      	adds	r3, #92	; 0x5c
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	4611      	mov	r1, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f002 fbc1 	bl	8004e82 <USB_HC_Halt>
 8002700:	e031      	b.n	8002766 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	333f      	adds	r3, #63	; 0x3f
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d009      	beq.n	800272a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	333f      	adds	r3, #63	; 0x3f
 8002724:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002726:	2b02      	cmp	r3, #2
 8002728:	d11d      	bne.n	8002766 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	335c      	adds	r3, #92	; 0x5c
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d110      	bne.n	8002766 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	3361      	adds	r3, #97	; 0x61
 8002752:	2203      	movs	r2, #3
 8002754:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f002 fb8e 	bl	8004e82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002772:	461a      	mov	r2, r3
 8002774:	2310      	movs	r3, #16
 8002776:	6093      	str	r3, [r2, #8]
}
 8002778:	bf00      	nop
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d11a      	bne.n	80027e6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027bc:	461a      	mov	r2, r3
 80027be:	2304      	movs	r3, #4
 80027c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	212c      	movs	r1, #44	; 0x2c
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	3361      	adds	r3, #97	; 0x61
 80027d0:	2206      	movs	r2, #6
 80027d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f002 fb4f 	bl	8004e82 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80027e4:	e331      	b.n	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0320 	and.w	r3, r3, #32
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d12e      	bne.n	800285a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	4413      	add	r3, r2
 8002804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002808:	461a      	mov	r2, r3
 800280a:	2320      	movs	r3, #32
 800280c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	212c      	movs	r1, #44	; 0x2c
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	4413      	add	r3, r2
 800281a:	333d      	adds	r3, #61	; 0x3d
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	f040 8313 	bne.w	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	212c      	movs	r1, #44	; 0x2c
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4413      	add	r3, r2
 8002830:	333d      	adds	r3, #61	; 0x3d
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	212c      	movs	r1, #44	; 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	3360      	adds	r3, #96	; 0x60
 8002844:	2202      	movs	r2, #2
 8002846:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f002 fb15 	bl	8004e82 <USB_HC_Halt>
}
 8002858:	e2f7      	b.n	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	4413      	add	r3, r2
 8002862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002870:	d112      	bne.n	8002898 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287e:	461a      	mov	r2, r3
 8002880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002884:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f002 faf6 	bl	8004e82 <USB_HC_Halt>
}
 8002896:	e2d8      	b.n	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d140      	bne.n	8002930 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	212c      	movs	r1, #44	; 0x2c
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	335c      	adds	r3, #92	; 0x5c
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d2:	2b40      	cmp	r3, #64	; 0x40
 80028d4:	d111      	bne.n	80028fa <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	212c      	movs	r1, #44	; 0x2c
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	333d      	adds	r3, #61	; 0x3d
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f4:	461a      	mov	r2, r3
 80028f6:	2340      	movs	r3, #64	; 0x40
 80028f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4413      	add	r3, r2
 8002902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002906:	461a      	mov	r2, r3
 8002908:	2301      	movs	r3, #1
 800290a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	212c      	movs	r1, #44	; 0x2c
 8002912:	fb01 f303 	mul.w	r3, r1, r3
 8002916:	4413      	add	r3, r2
 8002918:	3361      	adds	r3, #97	; 0x61
 800291a:	2201      	movs	r2, #1
 800291c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	4611      	mov	r1, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f002 faaa 	bl	8004e82 <USB_HC_Halt>
}
 800292e:	e28c      	b.n	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	4413      	add	r3, r2
 8002938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b40      	cmp	r3, #64	; 0x40
 8002944:	d12c      	bne.n	80029a0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	212c      	movs	r1, #44	; 0x2c
 800294c:	fb01 f303 	mul.w	r3, r1, r3
 8002950:	4413      	add	r3, r2
 8002952:	3361      	adds	r3, #97	; 0x61
 8002954:	2204      	movs	r2, #4
 8002956:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	212c      	movs	r1, #44	; 0x2c
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	4413      	add	r3, r2
 8002964:	333d      	adds	r3, #61	; 0x3d
 8002966:	2201      	movs	r2, #1
 8002968:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	212c      	movs	r1, #44	; 0x2c
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	335c      	adds	r3, #92	; 0x5c
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	f002 fa7b 	bl	8004e82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	4413      	add	r3, r2
 8002994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002998:	461a      	mov	r2, r3
 800299a:	2340      	movs	r3, #64	; 0x40
 800299c:	6093      	str	r3, [r2, #8]
}
 800299e:	e254      	b.n	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d11a      	bne.n	80029ec <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c2:	461a      	mov	r2, r3
 80029c4:	2308      	movs	r3, #8
 80029c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	212c      	movs	r1, #44	; 0x2c
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	3361      	adds	r3, #97	; 0x61
 80029d6:	2205      	movs	r2, #5
 80029d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f002 fa4c 	bl	8004e82 <USB_HC_Halt>
}
 80029ea:	e22e      	b.n	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b10      	cmp	r3, #16
 8002a00:	d140      	bne.n	8002a84 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	212c      	movs	r1, #44	; 0x2c
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	335c      	adds	r3, #92	; 0x5c
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	212c      	movs	r1, #44	; 0x2c
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	3361      	adds	r3, #97	; 0x61
 8002a22:	2203      	movs	r2, #3
 8002a24:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	333d      	adds	r3, #61	; 0x3d
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d112      	bne.n	8002a60 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	212c      	movs	r1, #44	; 0x2c
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	333c      	adds	r3, #60	; 0x3c
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d108      	bne.n	8002a60 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	333d      	adds	r3, #61	; 0x3d
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f002 fa09 	bl	8004e82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2310      	movs	r3, #16
 8002a80:	6093      	str	r3, [r2, #8]
}
 8002a82:	e1e2      	b.n	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a96:	2b80      	cmp	r3, #128	; 0x80
 8002a98:	d164      	bne.n	8002b64 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d111      	bne.n	8002ac6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	3361      	adds	r3, #97	; 0x61
 8002ab0:	2206      	movs	r2, #6
 8002ab2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f002 f9df 	bl	8004e82 <USB_HC_Halt>
 8002ac4:	e044      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	335c      	adds	r3, #92	; 0x5c
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	202c      	movs	r0, #44	; 0x2c
 8002ade:	fb00 f303 	mul.w	r3, r0, r3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	335c      	adds	r3, #92	; 0x5c
 8002ae6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	335c      	adds	r3, #92	; 0x5c
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d920      	bls.n	8002b3e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	335c      	adds	r3, #92	; 0x5c
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	212c      	movs	r1, #44	; 0x2c
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	3360      	adds	r3, #96	; 0x60
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	b2d9      	uxtb	r1, r3
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	202c      	movs	r0, #44	; 0x2c
 8002b2a:	fb00 f303 	mul.w	r3, r0, r3
 8002b2e:	4413      	add	r3, r2
 8002b30:	3360      	adds	r3, #96	; 0x60
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f004 fee0 	bl	80078fc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b3c:	e008      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	3360      	adds	r3, #96	; 0x60
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	6093      	str	r3, [r2, #8]
}
 8002b62:	e172      	b.n	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7a:	d11b      	bne.n	8002bb4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	3361      	adds	r3, #97	; 0x61
 8002b8a:	2208      	movs	r2, #8
 8002b8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f002 f972 	bl	8004e82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002baa:	461a      	mov	r2, r3
 8002bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb0:	6093      	str	r3, [r2, #8]
}
 8002bb2:	e14a      	b.n	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	f040 813f 	bne.w	8002e4a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	212c      	movs	r1, #44	; 0x2c
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3361      	adds	r3, #97	; 0x61
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d17d      	bne.n	8002cdc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	3360      	adds	r3, #96	; 0x60
 8002bee:	2201      	movs	r2, #1
 8002bf0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	333f      	adds	r3, #63	; 0x3f
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d00a      	beq.n	8002c1c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	333f      	adds	r3, #63	; 0x3f
 8002c14:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	f040 8100 	bne.w	8002e1c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d113      	bne.n	8002c4c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3355      	adds	r3, #85	; 0x55
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	f083 0301 	eor.w	r3, r3, #1
 8002c38:	b2d8      	uxtb	r0, r3
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	3355      	adds	r3, #85	; 0x55
 8002c48:	4602      	mov	r2, r0
 8002c4a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	f040 80e3 	bne.w	8002e1c <HCD_HC_OUT_IRQHandler+0x69c>
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	212c      	movs	r1, #44	; 0x2c
 8002c5c:	fb01 f303 	mul.w	r3, r1, r3
 8002c60:	4413      	add	r3, r2
 8002c62:	334c      	adds	r3, #76	; 0x4c
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 80d8 	beq.w	8002e1c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	334c      	adds	r3, #76	; 0x4c
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	202c      	movs	r0, #44	; 0x2c
 8002c82:	fb00 f202 	mul.w	r2, r0, r2
 8002c86:	440a      	add	r2, r1
 8002c88:	3240      	adds	r2, #64	; 0x40
 8002c8a:	8812      	ldrh	r2, [r2, #0]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	202c      	movs	r0, #44	; 0x2c
 8002c96:	fb00 f202 	mul.w	r2, r0, r2
 8002c9a:	440a      	add	r2, r1
 8002c9c:	3240      	adds	r2, #64	; 0x40
 8002c9e:	8812      	ldrh	r2, [r2, #0]
 8002ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80b5 	beq.w	8002e1c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	212c      	movs	r1, #44	; 0x2c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3355      	adds	r3, #85	; 0x55
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	f083 0301 	eor.w	r3, r3, #1
 8002cc6:	b2d8      	uxtb	r0, r3
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	212c      	movs	r1, #44	; 0x2c
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3355      	adds	r3, #85	; 0x55
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	e09f      	b.n	8002e1c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	212c      	movs	r1, #44	; 0x2c
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3361      	adds	r3, #97	; 0x61
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d109      	bne.n	8002d04 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3360      	adds	r3, #96	; 0x60
 8002cfe:	2202      	movs	r2, #2
 8002d00:	701a      	strb	r2, [r3, #0]
 8002d02:	e08b      	b.n	8002e1c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3361      	adds	r3, #97	; 0x61
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d109      	bne.n	8002d2c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3360      	adds	r3, #96	; 0x60
 8002d26:	2202      	movs	r2, #2
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	e077      	b.n	8002e1c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	3361      	adds	r3, #97	; 0x61
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b05      	cmp	r3, #5
 8002d3e:	d109      	bne.n	8002d54 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3360      	adds	r3, #96	; 0x60
 8002d4e:	2205      	movs	r2, #5
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	e063      	b.n	8002e1c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	212c      	movs	r1, #44	; 0x2c
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3361      	adds	r3, #97	; 0x61
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b06      	cmp	r3, #6
 8002d66:	d009      	beq.n	8002d7c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	212c      	movs	r1, #44	; 0x2c
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	3361      	adds	r3, #97	; 0x61
 8002d76:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d14f      	bne.n	8002e1c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	212c      	movs	r1, #44	; 0x2c
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	335c      	adds	r3, #92	; 0x5c
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	202c      	movs	r0, #44	; 0x2c
 8002d94:	fb00 f303 	mul.w	r3, r0, r3
 8002d98:	440b      	add	r3, r1
 8002d9a:	335c      	adds	r3, #92	; 0x5c
 8002d9c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	212c      	movs	r1, #44	; 0x2c
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	335c      	adds	r3, #92	; 0x5c
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d912      	bls.n	8002dd8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	212c      	movs	r1, #44	; 0x2c
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	335c      	adds	r3, #92	; 0x5c
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	212c      	movs	r1, #44	; 0x2c
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	3360      	adds	r3, #96	; 0x60
 8002dd2:	2204      	movs	r2, #4
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	e021      	b.n	8002e1c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	212c      	movs	r1, #44	; 0x2c
 8002dde:	fb01 f303 	mul.w	r3, r1, r3
 8002de2:	4413      	add	r3, r2
 8002de4:	3360      	adds	r3, #96	; 0x60
 8002de6:	2202      	movs	r2, #2
 8002de8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	015a      	lsls	r2, r3, #5
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	4413      	add	r3, r2
 8002df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e00:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e08:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	015a      	lsls	r2, r3, #5
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e16:	461a      	mov	r2, r3
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	b2d9      	uxtb	r1, r3
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	202c      	movs	r0, #44	; 0x2c
 8002e38:	fb00 f303 	mul.w	r3, r0, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3360      	adds	r3, #96	; 0x60
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f004 fd59 	bl	80078fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e4a:	bf00      	nop
 8002e4c:	3720      	adds	r7, #32
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b08a      	sub	sp, #40	; 0x28
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	0c5b      	lsrs	r3, r3, #17
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e86:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d004      	beq.n	8002e98 <HCD_RXQLVL_IRQHandler+0x46>
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b05      	cmp	r3, #5
 8002e92:	f000 80a9 	beq.w	8002fe8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e96:	e0aa      	b.n	8002fee <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 80a6 	beq.w	8002fec <HCD_RXQLVL_IRQHandler+0x19a>
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	3344      	adds	r3, #68	; 0x44
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 809b 	beq.w	8002fec <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	212c      	movs	r1, #44	; 0x2c
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3350      	adds	r3, #80	; 0x50
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	441a      	add	r2, r3
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	202c      	movs	r0, #44	; 0x2c
 8002ed0:	fb00 f303 	mul.w	r3, r0, r3
 8002ed4:	440b      	add	r3, r1
 8002ed6:	334c      	adds	r3, #76	; 0x4c
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d87a      	bhi.n	8002fd4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	212c      	movs	r1, #44	; 0x2c
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	3344      	adds	r3, #68	; 0x44
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	b292      	uxth	r2, r2
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	f001 fb1a 	bl	8004530 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	212c      	movs	r1, #44	; 0x2c
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	3344      	adds	r3, #68	; 0x44
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	441a      	add	r2, r3
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	202c      	movs	r0, #44	; 0x2c
 8002f16:	fb00 f303 	mul.w	r3, r0, r3
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3344      	adds	r3, #68	; 0x44
 8002f1e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	212c      	movs	r1, #44	; 0x2c
 8002f26:	fb01 f303 	mul.w	r3, r1, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3350      	adds	r3, #80	; 0x50
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	441a      	add	r2, r3
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	202c      	movs	r0, #44	; 0x2c
 8002f3a:	fb00 f303 	mul.w	r3, r0, r3
 8002f3e:	440b      	add	r3, r1
 8002f40:	3350      	adds	r3, #80	; 0x50
 8002f42:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	0cdb      	lsrs	r3, r3, #19
 8002f54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f58:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	212c      	movs	r1, #44	; 0x2c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	3340      	adds	r3, #64	; 0x40
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d13c      	bne.n	8002fec <HCD_RXQLVL_IRQHandler+0x19a>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d039      	beq.n	8002fec <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f8e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f96:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	212c      	movs	r1, #44	; 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3354      	adds	r3, #84	; 0x54
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	f083 0301 	eor.w	r3, r3, #1
 8002fbe:	b2d8      	uxtb	r0, r3
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	212c      	movs	r1, #44	; 0x2c
 8002fc6:	fb01 f303 	mul.w	r3, r1, r3
 8002fca:	4413      	add	r3, r2
 8002fcc:	3354      	adds	r3, #84	; 0x54
 8002fce:	4602      	mov	r2, r0
 8002fd0:	701a      	strb	r2, [r3, #0]
      break;
 8002fd2:	e00b      	b.n	8002fec <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	212c      	movs	r1, #44	; 0x2c
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
 8002fde:	4413      	add	r3, r2
 8002fe0:	3360      	adds	r3, #96	; 0x60
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	701a      	strb	r2, [r3, #0]
      break;
 8002fe6:	e001      	b.n	8002fec <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002fe8:	bf00      	nop
 8002fea:	e000      	b.n	8002fee <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002fec:	bf00      	nop
  }
}
 8002fee:	bf00      	nop
 8002ff0:	3728      	adds	r7, #40	; 0x28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b086      	sub	sp, #24
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003022:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b02      	cmp	r3, #2
 800302c:	d10b      	bne.n	8003046 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b01      	cmp	r3, #1
 8003036:	d102      	bne.n	800303e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f004 fc43 	bl	80078c4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f043 0302 	orr.w	r3, r3, #2
 8003044:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b08      	cmp	r3, #8
 800304e:	d132      	bne.n	80030b6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f043 0308 	orr.w	r3, r3, #8
 8003056:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b04      	cmp	r3, #4
 8003060:	d126      	bne.n	80030b0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d113      	bne.n	8003092 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003070:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003074:	d106      	bne.n	8003084 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2102      	movs	r1, #2
 800307c:	4618      	mov	r0, r3
 800307e:	f001 fbc5 	bl	800480c <USB_InitFSLSPClkSel>
 8003082:	e011      	b.n	80030a8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2101      	movs	r1, #1
 800308a:	4618      	mov	r0, r3
 800308c:	f001 fbbe 	bl	800480c <USB_InitFSLSPClkSel>
 8003090:	e00a      	b.n	80030a8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d106      	bne.n	80030a8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030a0:	461a      	mov	r2, r3
 80030a2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80030a6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f004 fc35 	bl	8007918 <HAL_HCD_PortEnabled_Callback>
 80030ae:	e002      	b.n	80030b6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f004 fc3f 	bl	8007934 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b20      	cmp	r3, #32
 80030be:	d103      	bne.n	80030c8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f043 0320 	orr.w	r3, r3, #32
 80030c6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030ce:	461a      	mov	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	6013      	str	r3, [r2, #0]
}
 80030d4:	bf00      	nop
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e267      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d075      	beq.n	80031e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030fa:	4b88      	ldr	r3, [pc, #544]	; (800331c <HAL_RCC_OscConfig+0x240>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b04      	cmp	r3, #4
 8003104:	d00c      	beq.n	8003120 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003106:	4b85      	ldr	r3, [pc, #532]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800310e:	2b08      	cmp	r3, #8
 8003110:	d112      	bne.n	8003138 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003112:	4b82      	ldr	r3, [pc, #520]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800311e:	d10b      	bne.n	8003138 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003120:	4b7e      	ldr	r3, [pc, #504]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d05b      	beq.n	80031e4 <HAL_RCC_OscConfig+0x108>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d157      	bne.n	80031e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e242      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003140:	d106      	bne.n	8003150 <HAL_RCC_OscConfig+0x74>
 8003142:	4b76      	ldr	r3, [pc, #472]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a75      	ldr	r2, [pc, #468]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e01d      	b.n	800318c <HAL_RCC_OscConfig+0xb0>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003158:	d10c      	bne.n	8003174 <HAL_RCC_OscConfig+0x98>
 800315a:	4b70      	ldr	r3, [pc, #448]	; (800331c <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a6f      	ldr	r2, [pc, #444]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	4b6d      	ldr	r3, [pc, #436]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a6c      	ldr	r2, [pc, #432]	; (800331c <HAL_RCC_OscConfig+0x240>)
 800316c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	e00b      	b.n	800318c <HAL_RCC_OscConfig+0xb0>
 8003174:	4b69      	ldr	r3, [pc, #420]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a68      	ldr	r2, [pc, #416]	; (800331c <HAL_RCC_OscConfig+0x240>)
 800317a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	4b66      	ldr	r3, [pc, #408]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a65      	ldr	r2, [pc, #404]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800318a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d013      	beq.n	80031bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7fd fd30 	bl	8000bf8 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800319c:	f7fd fd2c 	bl	8000bf8 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	; 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e207      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ae:	4b5b      	ldr	r3, [pc, #364]	; (800331c <HAL_RCC_OscConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0xc0>
 80031ba:	e014      	b.n	80031e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fd fd1c 	bl	8000bf8 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c4:	f7fd fd18 	bl	8000bf8 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b64      	cmp	r3, #100	; 0x64
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e1f3      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d6:	4b51      	ldr	r3, [pc, #324]	; (800331c <HAL_RCC_OscConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0xe8>
 80031e2:	e000      	b.n	80031e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d063      	beq.n	80032ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031f2:	4b4a      	ldr	r3, [pc, #296]	; (800331c <HAL_RCC_OscConfig+0x240>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00b      	beq.n	8003216 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031fe:	4b47      	ldr	r3, [pc, #284]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003206:	2b08      	cmp	r3, #8
 8003208:	d11c      	bne.n	8003244 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320a:	4b44      	ldr	r3, [pc, #272]	; (800331c <HAL_RCC_OscConfig+0x240>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d116      	bne.n	8003244 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003216:	4b41      	ldr	r3, [pc, #260]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <HAL_RCC_OscConfig+0x152>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d001      	beq.n	800322e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e1c7      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322e:	4b3b      	ldr	r3, [pc, #236]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4937      	ldr	r1, [pc, #220]	; (800331c <HAL_RCC_OscConfig+0x240>)
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003242:	e03a      	b.n	80032ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d020      	beq.n	800328e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800324c:	4b34      	ldr	r3, [pc, #208]	; (8003320 <HAL_RCC_OscConfig+0x244>)
 800324e:	2201      	movs	r2, #1
 8003250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003252:	f7fd fcd1 	bl	8000bf8 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325a:	f7fd fccd 	bl	8000bf8 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e1a8      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326c:	4b2b      	ldr	r3, [pc, #172]	; (800331c <HAL_RCC_OscConfig+0x240>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f0      	beq.n	800325a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003278:	4b28      	ldr	r3, [pc, #160]	; (800331c <HAL_RCC_OscConfig+0x240>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4925      	ldr	r1, [pc, #148]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003288:	4313      	orrs	r3, r2
 800328a:	600b      	str	r3, [r1, #0]
 800328c:	e015      	b.n	80032ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800328e:	4b24      	ldr	r3, [pc, #144]	; (8003320 <HAL_RCC_OscConfig+0x244>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7fd fcb0 	bl	8000bf8 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800329c:	f7fd fcac 	bl	8000bf8 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e187      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ae:	4b1b      	ldr	r3, [pc, #108]	; (800331c <HAL_RCC_OscConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d036      	beq.n	8003334 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d016      	beq.n	80032fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ce:	4b15      	ldr	r3, [pc, #84]	; (8003324 <HAL_RCC_OscConfig+0x248>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d4:	f7fd fc90 	bl	8000bf8 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032dc:	f7fd fc8c 	bl	8000bf8 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e167      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ee:	4b0b      	ldr	r3, [pc, #44]	; (800331c <HAL_RCC_OscConfig+0x240>)
 80032f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x200>
 80032fa:	e01b      	b.n	8003334 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032fc:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_RCC_OscConfig+0x248>)
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003302:	f7fd fc79 	bl	8000bf8 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003308:	e00e      	b.n	8003328 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800330a:	f7fd fc75 	bl	8000bf8 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d907      	bls.n	8003328 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e150      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
 800331c:	40023800 	.word	0x40023800
 8003320:	42470000 	.word	0x42470000
 8003324:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003328:	4b88      	ldr	r3, [pc, #544]	; (800354c <HAL_RCC_OscConfig+0x470>)
 800332a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1ea      	bne.n	800330a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 8097 	beq.w	8003470 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003342:	2300      	movs	r3, #0
 8003344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003346:	4b81      	ldr	r3, [pc, #516]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10f      	bne.n	8003372 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	4b7d      	ldr	r3, [pc, #500]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	4a7c      	ldr	r2, [pc, #496]	; (800354c <HAL_RCC_OscConfig+0x470>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003360:	6413      	str	r3, [r2, #64]	; 0x40
 8003362:	4b7a      	ldr	r3, [pc, #488]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336e:	2301      	movs	r3, #1
 8003370:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003372:	4b77      	ldr	r3, [pc, #476]	; (8003550 <HAL_RCC_OscConfig+0x474>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d118      	bne.n	80033b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800337e:	4b74      	ldr	r3, [pc, #464]	; (8003550 <HAL_RCC_OscConfig+0x474>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a73      	ldr	r2, [pc, #460]	; (8003550 <HAL_RCC_OscConfig+0x474>)
 8003384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338a:	f7fd fc35 	bl	8000bf8 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003392:	f7fd fc31 	bl	8000bf8 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e10c      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a4:	4b6a      	ldr	r3, [pc, #424]	; (8003550 <HAL_RCC_OscConfig+0x474>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0f0      	beq.n	8003392 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d106      	bne.n	80033c6 <HAL_RCC_OscConfig+0x2ea>
 80033b8:	4b64      	ldr	r3, [pc, #400]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	4a63      	ldr	r2, [pc, #396]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	6713      	str	r3, [r2, #112]	; 0x70
 80033c4:	e01c      	b.n	8003400 <HAL_RCC_OscConfig+0x324>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b05      	cmp	r3, #5
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x30c>
 80033ce:	4b5f      	ldr	r3, [pc, #380]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d2:	4a5e      	ldr	r2, [pc, #376]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033d4:	f043 0304 	orr.w	r3, r3, #4
 80033d8:	6713      	str	r3, [r2, #112]	; 0x70
 80033da:	4b5c      	ldr	r3, [pc, #368]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	4a5b      	ldr	r2, [pc, #364]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	6713      	str	r3, [r2, #112]	; 0x70
 80033e6:	e00b      	b.n	8003400 <HAL_RCC_OscConfig+0x324>
 80033e8:	4b58      	ldr	r3, [pc, #352]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ec:	4a57      	ldr	r2, [pc, #348]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	6713      	str	r3, [r2, #112]	; 0x70
 80033f4:	4b55      	ldr	r3, [pc, #340]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f8:	4a54      	ldr	r2, [pc, #336]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033fa:	f023 0304 	bic.w	r3, r3, #4
 80033fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d015      	beq.n	8003434 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003408:	f7fd fbf6 	bl	8000bf8 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340e:	e00a      	b.n	8003426 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003410:	f7fd fbf2 	bl	8000bf8 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	; 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e0cb      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003426:	4b49      	ldr	r3, [pc, #292]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0ee      	beq.n	8003410 <HAL_RCC_OscConfig+0x334>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003434:	f7fd fbe0 	bl	8000bf8 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343a:	e00a      	b.n	8003452 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800343c:	f7fd fbdc 	bl	8000bf8 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	; 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e0b5      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003452:	4b3e      	ldr	r3, [pc, #248]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1ee      	bne.n	800343c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800345e:	7dfb      	ldrb	r3, [r7, #23]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d105      	bne.n	8003470 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003464:	4b39      	ldr	r3, [pc, #228]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	4a38      	ldr	r2, [pc, #224]	; (800354c <HAL_RCC_OscConfig+0x470>)
 800346a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800346e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80a1 	beq.w	80035bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800347a:	4b34      	ldr	r3, [pc, #208]	; (800354c <HAL_RCC_OscConfig+0x470>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b08      	cmp	r3, #8
 8003484:	d05c      	beq.n	8003540 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d141      	bne.n	8003512 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348e:	4b31      	ldr	r3, [pc, #196]	; (8003554 <HAL_RCC_OscConfig+0x478>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003494:	f7fd fbb0 	bl	8000bf8 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800349c:	f7fd fbac 	bl	8000bf8 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e087      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ae:	4b27      	ldr	r3, [pc, #156]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69da      	ldr	r2, [r3, #28]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	019b      	lsls	r3, r3, #6
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	3b01      	subs	r3, #1
 80034d4:	041b      	lsls	r3, r3, #16
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	491b      	ldr	r1, [pc, #108]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e4:	4b1b      	ldr	r3, [pc, #108]	; (8003554 <HAL_RCC_OscConfig+0x478>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ea:	f7fd fb85 	bl	8000bf8 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f2:	f7fd fb81 	bl	8000bf8 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e05c      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003504:	4b11      	ldr	r3, [pc, #68]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x416>
 8003510:	e054      	b.n	80035bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003512:	4b10      	ldr	r3, [pc, #64]	; (8003554 <HAL_RCC_OscConfig+0x478>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fd fb6e 	bl	8000bf8 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003520:	f7fd fb6a 	bl	8000bf8 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e045      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x444>
 800353e:	e03d      	b.n	80035bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d107      	bne.n	8003558 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e038      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
 800354c:	40023800 	.word	0x40023800
 8003550:	40007000 	.word	0x40007000
 8003554:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003558:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <HAL_RCC_OscConfig+0x4ec>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d028      	beq.n	80035b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d121      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357e:	429a      	cmp	r2, r3
 8003580:	d11a      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003588:	4013      	ands	r3, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800358e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003590:	4293      	cmp	r3, r2
 8003592:	d111      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	3b01      	subs	r3, #1
 80035a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d107      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40023800 	.word	0x40023800

080035cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0cc      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035e0:	4b68      	ldr	r3, [pc, #416]	; (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d90c      	bls.n	8003608 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	4b65      	ldr	r3, [pc, #404]	; (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f6:	4b63      	ldr	r3, [pc, #396]	; (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0b8      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d020      	beq.n	8003656 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003620:	4b59      	ldr	r3, [pc, #356]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a58      	ldr	r2, [pc, #352]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800362a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003638:	4b53      	ldr	r3, [pc, #332]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	4a52      	ldr	r2, [pc, #328]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003642:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003644:	4b50      	ldr	r3, [pc, #320]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	494d      	ldr	r1, [pc, #308]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d044      	beq.n	80036ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d107      	bne.n	800367a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366a:	4b47      	ldr	r3, [pc, #284]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d119      	bne.n	80036aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e07f      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d003      	beq.n	800368a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003686:	2b03      	cmp	r3, #3
 8003688:	d107      	bne.n	800369a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368a:	4b3f      	ldr	r3, [pc, #252]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d109      	bne.n	80036aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e06f      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369a:	4b3b      	ldr	r3, [pc, #236]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e067      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036aa:	4b37      	ldr	r3, [pc, #220]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f023 0203 	bic.w	r2, r3, #3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	4934      	ldr	r1, [pc, #208]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036bc:	f7fd fa9c 	bl	8000bf8 <HAL_GetTick>
 80036c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c2:	e00a      	b.n	80036da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c4:	f7fd fa98 	bl	8000bf8 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e04f      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036da:	4b2b      	ldr	r3, [pc, #172]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 020c 	and.w	r2, r3, #12
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d1eb      	bne.n	80036c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ec:	4b25      	ldr	r3, [pc, #148]	; (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d20c      	bcs.n	8003714 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fa:	4b22      	ldr	r3, [pc, #136]	; (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	4b20      	ldr	r3, [pc, #128]	; (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e032      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003720:	4b19      	ldr	r3, [pc, #100]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4916      	ldr	r1, [pc, #88]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	4313      	orrs	r3, r2
 8003730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d009      	beq.n	8003752 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800373e:	4b12      	ldr	r3, [pc, #72]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	490e      	ldr	r1, [pc, #56]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	4313      	orrs	r3, r2
 8003750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003752:	f000 f821 	bl	8003798 <HAL_RCC_GetSysClockFreq>
 8003756:	4602      	mov	r2, r0
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	490a      	ldr	r1, [pc, #40]	; (800378c <HAL_RCC_ClockConfig+0x1c0>)
 8003764:	5ccb      	ldrb	r3, [r1, r3]
 8003766:	fa22 f303 	lsr.w	r3, r2, r3
 800376a:	4a09      	ldr	r2, [pc, #36]	; (8003790 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7fd f9fc 	bl	8000b70 <HAL_InitTick>

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40023c00 	.word	0x40023c00
 8003788:	40023800 	.word	0x40023800
 800378c:	08007fd4 	.word	0x08007fd4
 8003790:	20000000 	.word	0x20000000
 8003794:	20000004 	.word	0x20000004

08003798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800379c:	b094      	sub	sp, #80	; 0x50
 800379e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	647b      	str	r3, [r7, #68]	; 0x44
 80037a4:	2300      	movs	r3, #0
 80037a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a8:	2300      	movs	r3, #0
 80037aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037b0:	4b79      	ldr	r3, [pc, #484]	; (8003998 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 030c 	and.w	r3, r3, #12
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d00d      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0x40>
 80037bc:	2b08      	cmp	r3, #8
 80037be:	f200 80e1 	bhi.w	8003984 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0x34>
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d003      	beq.n	80037d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80037ca:	e0db      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037cc:	4b73      	ldr	r3, [pc, #460]	; (800399c <HAL_RCC_GetSysClockFreq+0x204>)
 80037ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80037d0:	e0db      	b.n	800398a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037d2:	4b73      	ldr	r3, [pc, #460]	; (80039a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80037d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037d6:	e0d8      	b.n	800398a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037d8:	4b6f      	ldr	r3, [pc, #444]	; (8003998 <HAL_RCC_GetSysClockFreq+0x200>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037e2:	4b6d      	ldr	r3, [pc, #436]	; (8003998 <HAL_RCC_GetSysClockFreq+0x200>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d063      	beq.n	80038b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ee:	4b6a      	ldr	r3, [pc, #424]	; (8003998 <HAL_RCC_GetSysClockFreq+0x200>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	099b      	lsrs	r3, r3, #6
 80037f4:	2200      	movs	r2, #0
 80037f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80037f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003800:	633b      	str	r3, [r7, #48]	; 0x30
 8003802:	2300      	movs	r3, #0
 8003804:	637b      	str	r3, [r7, #52]	; 0x34
 8003806:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800380a:	4622      	mov	r2, r4
 800380c:	462b      	mov	r3, r5
 800380e:	f04f 0000 	mov.w	r0, #0
 8003812:	f04f 0100 	mov.w	r1, #0
 8003816:	0159      	lsls	r1, r3, #5
 8003818:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800381c:	0150      	lsls	r0, r2, #5
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4621      	mov	r1, r4
 8003824:	1a51      	subs	r1, r2, r1
 8003826:	6139      	str	r1, [r7, #16]
 8003828:	4629      	mov	r1, r5
 800382a:	eb63 0301 	sbc.w	r3, r3, r1
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800383c:	4659      	mov	r1, fp
 800383e:	018b      	lsls	r3, r1, #6
 8003840:	4651      	mov	r1, sl
 8003842:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003846:	4651      	mov	r1, sl
 8003848:	018a      	lsls	r2, r1, #6
 800384a:	4651      	mov	r1, sl
 800384c:	ebb2 0801 	subs.w	r8, r2, r1
 8003850:	4659      	mov	r1, fp
 8003852:	eb63 0901 	sbc.w	r9, r3, r1
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003862:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003866:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800386a:	4690      	mov	r8, r2
 800386c:	4699      	mov	r9, r3
 800386e:	4623      	mov	r3, r4
 8003870:	eb18 0303 	adds.w	r3, r8, r3
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	462b      	mov	r3, r5
 8003878:	eb49 0303 	adc.w	r3, r9, r3
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800388a:	4629      	mov	r1, r5
 800388c:	024b      	lsls	r3, r1, #9
 800388e:	4621      	mov	r1, r4
 8003890:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003894:	4621      	mov	r1, r4
 8003896:	024a      	lsls	r2, r1, #9
 8003898:	4610      	mov	r0, r2
 800389a:	4619      	mov	r1, r3
 800389c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800389e:	2200      	movs	r2, #0
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038a8:	f7fc fc8e 	bl	80001c8 <__aeabi_uldivmod>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4613      	mov	r3, r2
 80038b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038b4:	e058      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b6:	4b38      	ldr	r3, [pc, #224]	; (8003998 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	099b      	lsrs	r3, r3, #6
 80038bc:	2200      	movs	r2, #0
 80038be:	4618      	mov	r0, r3
 80038c0:	4611      	mov	r1, r2
 80038c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038c6:	623b      	str	r3, [r7, #32]
 80038c8:	2300      	movs	r3, #0
 80038ca:	627b      	str	r3, [r7, #36]	; 0x24
 80038cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038d0:	4642      	mov	r2, r8
 80038d2:	464b      	mov	r3, r9
 80038d4:	f04f 0000 	mov.w	r0, #0
 80038d8:	f04f 0100 	mov.w	r1, #0
 80038dc:	0159      	lsls	r1, r3, #5
 80038de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038e2:	0150      	lsls	r0, r2, #5
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4641      	mov	r1, r8
 80038ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80038ee:	4649      	mov	r1, r9
 80038f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	f04f 0300 	mov.w	r3, #0
 80038fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003900:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003904:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003908:	ebb2 040a 	subs.w	r4, r2, sl
 800390c:	eb63 050b 	sbc.w	r5, r3, fp
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	00eb      	lsls	r3, r5, #3
 800391a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800391e:	00e2      	lsls	r2, r4, #3
 8003920:	4614      	mov	r4, r2
 8003922:	461d      	mov	r5, r3
 8003924:	4643      	mov	r3, r8
 8003926:	18e3      	adds	r3, r4, r3
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	464b      	mov	r3, r9
 800392c:	eb45 0303 	adc.w	r3, r5, r3
 8003930:	607b      	str	r3, [r7, #4]
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800393e:	4629      	mov	r1, r5
 8003940:	028b      	lsls	r3, r1, #10
 8003942:	4621      	mov	r1, r4
 8003944:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003948:	4621      	mov	r1, r4
 800394a:	028a      	lsls	r2, r1, #10
 800394c:	4610      	mov	r0, r2
 800394e:	4619      	mov	r1, r3
 8003950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003952:	2200      	movs	r2, #0
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	61fa      	str	r2, [r7, #28]
 8003958:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800395c:	f7fc fc34 	bl	80001c8 <__aeabi_uldivmod>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4613      	mov	r3, r2
 8003966:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <HAL_RCC_GetSysClockFreq+0x200>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	0c1b      	lsrs	r3, r3, #16
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	3301      	adds	r3, #1
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003978:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800397a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003982:	e002      	b.n	800398a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003984:	4b05      	ldr	r3, [pc, #20]	; (800399c <HAL_RCC_GetSysClockFreq+0x204>)
 8003986:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800398a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800398c:	4618      	mov	r0, r3
 800398e:	3750      	adds	r7, #80	; 0x50
 8003990:	46bd      	mov	sp, r7
 8003992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800
 800399c:	00f42400 	.word	0x00f42400
 80039a0:	007a1200 	.word	0x007a1200

080039a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a8:	4b03      	ldr	r3, [pc, #12]	; (80039b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039aa:	681b      	ldr	r3, [r3, #0]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000000 	.word	0x20000000

080039bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039c0:	f7ff fff0 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 80039c4:	4602      	mov	r2, r0
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	0a9b      	lsrs	r3, r3, #10
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	4903      	ldr	r1, [pc, #12]	; (80039e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039d2:	5ccb      	ldrb	r3, [r1, r3]
 80039d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d8:	4618      	mov	r0, r3
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40023800 	.word	0x40023800
 80039e0:	08007fe4 	.word	0x08007fe4

080039e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039e8:	f7ff ffdc 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 80039ec:	4602      	mov	r2, r0
 80039ee:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	0b5b      	lsrs	r3, r3, #13
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	4903      	ldr	r1, [pc, #12]	; (8003a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039fa:	5ccb      	ldrb	r3, [r1, r3]
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40023800 	.word	0x40023800
 8003a08:	08007fe4 	.word	0x08007fe4

08003a0c <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e033      	b.n	8003a86 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fc ff50 	bl	80008d8 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f96b 	bl	8003d1c <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a64:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a74:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_USART_Transmit_DMA>:
  * @param  pTxData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  if (husart->State == HAL_USART_STATE_READY)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d153      	bne.n	8003b52 <HAL_USART_Transmit_DMA+0xc2>
  {
    if ((pTxData == NULL) || (Size == 0))
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <HAL_USART_Transmit_DMA+0x26>
 8003ab0:	88fb      	ldrh	r3, [r7, #6]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_USART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e04c      	b.n	8003b54 <HAL_USART_Transmit_DMA+0xc4>
    }
    /* Process Locked */
    __HAL_LOCK(husart);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_USART_Transmit_DMA+0x38>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e045      	b.n	8003b54 <HAL_USART_Transmit_DMA+0xc4>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->pTxBuffPtr = pTxData;
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	625a      	str	r2, [r3, #36]	; 0x24
    husart->TxXferSize = Size;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	88fa      	ldrh	r2, [r7, #6]
 8003ada:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	855a      	strh	r2, [r3, #42]	; 0x2a

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2212      	movs	r2, #18
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the USART DMA transfer complete callback */
    husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af4:	4a19      	ldr	r2, [pc, #100]	; (8003b5c <HAL_USART_Transmit_DMA+0xcc>)
 8003af6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the USART DMA Half transfer complete callback */
    husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afc:	4a18      	ldr	r2, [pc, #96]	; (8003b60 <HAL_USART_Transmit_DMA+0xd0>)
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    husart->hdmatx->XferErrorCallback = USART_DMAError;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b04:	4a17      	ldr	r2, [pc, #92]	; (8003b64 <HAL_USART_Transmit_DMA+0xd4>)
 8003b06:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    husart->hdmatx->XferAbortCallback = NULL;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the USART transmit DMA stream */
    tmp = (const uint32_t *)&pTxData;
 8003b10:	f107 0308 	add.w	r3, r7, #8
 8003b14:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(husart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&husart->Instance->DR, Size);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	6819      	ldr	r1, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3304      	adds	r3, #4
 8003b24:	461a      	mov	r2, r3
 8003b26:	88fb      	ldrh	r3, [r7, #6]
 8003b28:	f7fd fa56 	bl	8000fd8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_USART_CLEAR_FLAG(husart, USART_FLAG_TC);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b34:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the USART CR3 register */
    SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695a      	ldr	r2, [r3, #20]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b4c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e000      	b.n	8003b54 <HAL_USART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003b52:	2302      	movs	r3, #2
  }
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	08003b91 	.word	0x08003b91
 8003b60:	08003bfb 	.word	0x08003bfb
 8003b64:	08003c17 	.word	0x08003c17

08003b68 <HAL_USART_TxHalfCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <USART_DMATransmitCplt>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d119      	bne.n	8003be0 <USART_DMATransmitCplt+0x50>
  {
    husart->TxXferCount = 0U;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b12      	cmp	r3, #18
 8003bbc:	d119      	bne.n	8003bf2 <USART_DMATransmitCplt+0x62>
    {
      /* Disable the DMA transfer for transmit request by resetting the DMAT bit
         in the USART CR3 register */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695a      	ldr	r2, [r3, #20]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bcc:	615a      	str	r2, [r3, #20]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bdc:	60da      	str	r2, [r3, #12]
      /* Call legacy weak Tx Complete Callback */
      HAL_USART_TxCpltCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
  }
}
 8003bde:	e008      	b.n	8003bf2 <USART_DMATransmitCplt+0x62>
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b12      	cmp	r3, #18
 8003bea:	d102      	bne.n	8003bf2 <USART_DMATransmitCplt+0x62>
      HAL_USART_TxCpltCallback(husart);
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f7fc fc83 	bl	80004f8 <HAL_USART_TxCpltCallback>
}
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <USART_DMATxHalfCplt>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b084      	sub	sp, #16
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Half Complete Callback */
  husart->TxHalfCpltCallback(husart);
#else
  /* Call legacy weak Tx Half Complete Callback */
  HAL_USART_TxHalfCpltCallback(husart);
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f7ff ffad 	bl	8003b68 <HAL_USART_TxHalfCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <USART_DMAError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void USART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	60bb      	str	r3, [r7, #8]
  husart->RxXferCount = 0x00U;
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2200      	movs	r2, #0
 8003c32:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Stop USART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAT);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3e:	2b80      	cmp	r3, #128	; 0x80
 8003c40:	bf0c      	ite	eq
 8003c42:	2301      	moveq	r3, #1
 8003c44:	2300      	movne	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	60fb      	str	r3, [r7, #12]
  if ((husart->State == HAL_USART_STATE_BUSY_TX) && dmarequest)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b12      	cmp	r3, #18
 8003c54:	d105      	bne.n	8003c62 <USART_DMAError+0x4c>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <USART_DMAError+0x4c>
  {
    USART_EndTxTransfer(husart);
 8003c5c:	68b8      	ldr	r0, [r7, #8]
 8003c5e:	f000 f828 	bl	8003cb2 <USART_EndTxTransfer>
  }

  /* Stop USART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6c:	2b40      	cmp	r3, #64	; 0x40
 8003c6e:	bf0c      	ite	eq
 8003c70:	2301      	moveq	r3, #1
 8003c72:	2300      	movne	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	60fb      	str	r3, [r7, #12]
  if ((husart->State == HAL_USART_STATE_BUSY_RX) && dmarequest)
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b22      	cmp	r3, #34	; 0x22
 8003c82:	d105      	bne.n	8003c90 <USART_DMAError+0x7a>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <USART_DMAError+0x7a>
  {
    USART_EndRxTransfer(husart);
 8003c8a:	68b8      	ldr	r0, [r7, #8]
 8003c8c:	f000 f827 	bl	8003cde <USART_EndRxTransfer>
  }

  husart->ErrorCode |= HAL_USART_ERROR_DMA;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	f043 0210 	orr.w	r2, r3, #16
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8003ca4:	68b8      	ldr	r0, [r7, #8]
 8003ca6:	f7ff ff69 	bl	8003b7c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8003caa:	bf00      	nop
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <USART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on USART peripheral (following error detection or Transmit completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTxTransfer(USART_HandleTypeDef *husart)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003cc8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cf4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695a      	ldr	r2, [r3, #20]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
	...

08003d1c <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d20:	b0c6      	sub	sp, #280	; 0x118
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68d9      	ldr	r1, [r3, #12]
 8003d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	f021 030c 	bic.w	r3, r1, #12
 8003d40:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8003d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8003d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d52:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d5e:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d64:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003d66:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d74:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003d76:	431a      	orrs	r2, r3
 8003d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8003d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d90:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8003d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003da2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003da6:	f023 030c 	bic.w	r3, r3, #12
 8003daa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8003dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ddc:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8003dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6959      	ldr	r1, [r3, #20]
 8003de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8003df0:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8003df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	4b8b      	ldr	r3, [pc, #556]	; (8004028 <USART_SetConfig+0x30c>)
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d006      	beq.n	8003e0c <USART_SetConfig+0xf0>
 8003dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	4b89      	ldr	r3, [pc, #548]	; (800402c <USART_SetConfig+0x310>)
 8003e06:	429a      	cmp	r2, r3
 8003e08:	f040 8114 	bne.w	8004034 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e0c:	f7ff fdea 	bl	80039e4 <HAL_RCC_GetPCLK2Freq>
 8003e10:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003e14:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003e1e:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8003e22:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8003e26:	4622      	mov	r2, r4
 8003e28:	462b      	mov	r3, r5
 8003e2a:	1891      	adds	r1, r2, r2
 8003e2c:	6739      	str	r1, [r7, #112]	; 0x70
 8003e2e:	415b      	adcs	r3, r3
 8003e30:	677b      	str	r3, [r7, #116]	; 0x74
 8003e32:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003e36:	4621      	mov	r1, r4
 8003e38:	eb12 0801 	adds.w	r8, r2, r1
 8003e3c:	4629      	mov	r1, r5
 8003e3e:	eb43 0901 	adc.w	r9, r3, r1
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e56:	4690      	mov	r8, r2
 8003e58:	4699      	mov	r9, r3
 8003e5a:	4623      	mov	r3, r4
 8003e5c:	eb18 0303 	adds.w	r3, r8, r3
 8003e60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e64:	462b      	mov	r3, r5
 8003e66:	eb49 0303 	adc.w	r3, r9, r3
 8003e6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e7a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003e7e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003e82:	460b      	mov	r3, r1
 8003e84:	18db      	adds	r3, r3, r3
 8003e86:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e88:	4613      	mov	r3, r2
 8003e8a:	eb42 0303 	adc.w	r3, r2, r3
 8003e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e90:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003e94:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8003e98:	f7fc f996 	bl	80001c8 <__aeabi_uldivmod>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4b63      	ldr	r3, [pc, #396]	; (8004030 <USART_SetConfig+0x314>)
 8003ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	011c      	lsls	r4, r3, #4
 8003eaa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003eb4:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003eb8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003ebc:	4642      	mov	r2, r8
 8003ebe:	464b      	mov	r3, r9
 8003ec0:	1891      	adds	r1, r2, r2
 8003ec2:	6639      	str	r1, [r7, #96]	; 0x60
 8003ec4:	415b      	adcs	r3, r3
 8003ec6:	667b      	str	r3, [r7, #100]	; 0x64
 8003ec8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003ecc:	4641      	mov	r1, r8
 8003ece:	1851      	adds	r1, r2, r1
 8003ed0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ed2:	4649      	mov	r1, r9
 8003ed4:	414b      	adcs	r3, r1
 8003ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8003ee4:	4659      	mov	r1, fp
 8003ee6:	00cb      	lsls	r3, r1, #3
 8003ee8:	4651      	mov	r1, sl
 8003eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eee:	4651      	mov	r1, sl
 8003ef0:	00ca      	lsls	r2, r1, #3
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	4642      	mov	r2, r8
 8003efa:	189b      	adds	r3, r3, r2
 8003efc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f00:	464b      	mov	r3, r9
 8003f02:	460a      	mov	r2, r1
 8003f04:	eb42 0303 	adc.w	r3, r2, r3
 8003f08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f18:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f1c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f20:	460b      	mov	r3, r1
 8003f22:	18db      	adds	r3, r3, r3
 8003f24:	653b      	str	r3, [r7, #80]	; 0x50
 8003f26:	4613      	mov	r3, r2
 8003f28:	eb42 0303 	adc.w	r3, r2, r3
 8003f2c:	657b      	str	r3, [r7, #84]	; 0x54
 8003f2e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f32:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f36:	f7fc f947 	bl	80001c8 <__aeabi_uldivmod>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4b3b      	ldr	r3, [pc, #236]	; (8004030 <USART_SetConfig+0x314>)
 8003f42:	fba3 2301 	umull	r2, r3, r3, r1
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2264      	movs	r2, #100	; 0x64
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	1acb      	subs	r3, r1, r3
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f56:	4b36      	ldr	r3, [pc, #216]	; (8004030 <USART_SetConfig+0x314>)
 8003f58:	fba3 2302 	umull	r2, r3, r3, r2
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f64:	441c      	add	r4, r3
 8003f66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f78:	4642      	mov	r2, r8
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	1891      	adds	r1, r2, r2
 8003f7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f80:	415b      	adcs	r3, r3
 8003f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f88:	4641      	mov	r1, r8
 8003f8a:	1851      	adds	r1, r2, r1
 8003f8c:	6439      	str	r1, [r7, #64]	; 0x40
 8003f8e:	4649      	mov	r1, r9
 8003f90:	414b      	adcs	r3, r1
 8003f92:	647b      	str	r3, [r7, #68]	; 0x44
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8003fa0:	4659      	mov	r1, fp
 8003fa2:	00cb      	lsls	r3, r1, #3
 8003fa4:	4651      	mov	r1, sl
 8003fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003faa:	4651      	mov	r1, sl
 8003fac:	00ca      	lsls	r2, r1, #3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4642      	mov	r2, r8
 8003fb6:	189b      	adds	r3, r3, r2
 8003fb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fbc:	464b      	mov	r3, r9
 8003fbe:	460a      	mov	r2, r1
 8003fc0:	eb42 0303 	adc.w	r3, r2, r3
 8003fc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003fd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	18db      	adds	r3, r3, r3
 8003fe0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	eb42 0303 	adc.w	r3, r2, r3
 8003fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ff2:	f7fc f8e9 	bl	80001c8 <__aeabi_uldivmod>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <USART_SetConfig+0x314>)
 8003ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	2164      	movs	r1, #100	; 0x64
 8004004:	fb01 f303 	mul.w	r3, r1, r3
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	3332      	adds	r3, #50	; 0x32
 800400e:	4a08      	ldr	r2, [pc, #32]	; (8004030 <USART_SetConfig+0x314>)
 8004010:	fba2 2303 	umull	r2, r3, r2, r3
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	f003 0207 	and.w	r2, r3, #7
 800401a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4422      	add	r2, r4
 8004022:	609a      	str	r2, [r3, #8]
 8004024:	e109      	b.n	800423a <USART_SetConfig+0x51e>
 8004026:	bf00      	nop
 8004028:	40011000 	.word	0x40011000
 800402c:	40011400 	.word	0x40011400
 8004030:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004034:	f7ff fcc2 	bl	80039bc <HAL_RCC_GetPCLK1Freq>
 8004038:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800403c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004040:	2200      	movs	r2, #0
 8004042:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004046:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800404a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800404e:	4642      	mov	r2, r8
 8004050:	464b      	mov	r3, r9
 8004052:	1891      	adds	r1, r2, r2
 8004054:	6339      	str	r1, [r7, #48]	; 0x30
 8004056:	415b      	adcs	r3, r3
 8004058:	637b      	str	r3, [r7, #52]	; 0x34
 800405a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800405e:	4641      	mov	r1, r8
 8004060:	1854      	adds	r4, r2, r1
 8004062:	4649      	mov	r1, r9
 8004064:	eb43 0501 	adc.w	r5, r3, r1
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	00eb      	lsls	r3, r5, #3
 8004072:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004076:	00e2      	lsls	r2, r4, #3
 8004078:	4614      	mov	r4, r2
 800407a:	461d      	mov	r5, r3
 800407c:	4643      	mov	r3, r8
 800407e:	18e3      	adds	r3, r4, r3
 8004080:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004084:	464b      	mov	r3, r9
 8004086:	eb45 0303 	adc.w	r3, r5, r3
 800408a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800408e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800409a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800409e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040a2:	460b      	mov	r3, r1
 80040a4:	18db      	adds	r3, r3, r3
 80040a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80040a8:	4613      	mov	r3, r2
 80040aa:	eb42 0303 	adc.w	r3, r2, r3
 80040ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040b4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80040b8:	f7fc f886 	bl	80001c8 <__aeabi_uldivmod>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	4b61      	ldr	r3, [pc, #388]	; (8004248 <USART_SetConfig+0x52c>)
 80040c2:	fba3 2302 	umull	r2, r3, r3, r2
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	011c      	lsls	r4, r3, #4
 80040ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040d4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80040d8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80040dc:	4642      	mov	r2, r8
 80040de:	464b      	mov	r3, r9
 80040e0:	1891      	adds	r1, r2, r2
 80040e2:	6239      	str	r1, [r7, #32]
 80040e4:	415b      	adcs	r3, r3
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
 80040e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040ec:	4641      	mov	r1, r8
 80040ee:	eb12 0a01 	adds.w	sl, r2, r1
 80040f2:	4649      	mov	r1, r9
 80040f4:	eb43 0b01 	adc.w	fp, r3, r1
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004104:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800410c:	4692      	mov	sl, r2
 800410e:	469b      	mov	fp, r3
 8004110:	4643      	mov	r3, r8
 8004112:	eb1a 0303 	adds.w	r3, sl, r3
 8004116:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800411a:	464b      	mov	r3, r9
 800411c:	eb4b 0303 	adc.w	r3, fp, r3
 8004120:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004130:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004134:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004138:	460b      	mov	r3, r1
 800413a:	18db      	adds	r3, r3, r3
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	4613      	mov	r3, r2
 8004140:	eb42 0303 	adc.w	r3, r2, r3
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800414a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800414e:	f7fc f83b 	bl	80001c8 <__aeabi_uldivmod>
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4611      	mov	r1, r2
 8004158:	4b3b      	ldr	r3, [pc, #236]	; (8004248 <USART_SetConfig+0x52c>)
 800415a:	fba3 2301 	umull	r2, r3, r3, r1
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	2264      	movs	r2, #100	; 0x64
 8004162:	fb02 f303 	mul.w	r3, r2, r3
 8004166:	1acb      	subs	r3, r1, r3
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800416e:	4b36      	ldr	r3, [pc, #216]	; (8004248 <USART_SetConfig+0x52c>)
 8004170:	fba3 2302 	umull	r2, r3, r3, r2
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800417c:	441c      	add	r4, r3
 800417e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004182:	2200      	movs	r2, #0
 8004184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004188:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800418c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004190:	4642      	mov	r2, r8
 8004192:	464b      	mov	r3, r9
 8004194:	1891      	adds	r1, r2, r2
 8004196:	6139      	str	r1, [r7, #16]
 8004198:	415b      	adcs	r3, r3
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041a0:	4641      	mov	r1, r8
 80041a2:	1851      	adds	r1, r2, r1
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	4649      	mov	r1, r9
 80041a8:	414b      	adcs	r3, r1
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80041b8:	4659      	mov	r1, fp
 80041ba:	00cb      	lsls	r3, r1, #3
 80041bc:	4651      	mov	r1, sl
 80041be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041c2:	4651      	mov	r1, sl
 80041c4:	00ca      	lsls	r2, r1, #3
 80041c6:	4610      	mov	r0, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	4603      	mov	r3, r0
 80041cc:	4642      	mov	r2, r8
 80041ce:	189b      	adds	r3, r3, r2
 80041d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041d4:	464b      	mov	r3, r9
 80041d6:	460a      	mov	r2, r1
 80041d8:	eb42 0303 	adc.w	r3, r2, r3
 80041dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80041ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80041ec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80041f0:	460b      	mov	r3, r1
 80041f2:	18db      	adds	r3, r3, r3
 80041f4:	603b      	str	r3, [r7, #0]
 80041f6:	4613      	mov	r3, r2
 80041f8:	eb42 0303 	adc.w	r3, r2, r3
 80041fc:	607b      	str	r3, [r7, #4]
 80041fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004202:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004206:	f7fb ffdf 	bl	80001c8 <__aeabi_uldivmod>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4b0e      	ldr	r3, [pc, #56]	; (8004248 <USART_SetConfig+0x52c>)
 8004210:	fba3 1302 	umull	r1, r3, r3, r2
 8004214:	095b      	lsrs	r3, r3, #5
 8004216:	2164      	movs	r1, #100	; 0x64
 8004218:	fb01 f303 	mul.w	r3, r1, r3
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	3332      	adds	r3, #50	; 0x32
 8004222:	4a09      	ldr	r2, [pc, #36]	; (8004248 <USART_SetConfig+0x52c>)
 8004224:	fba2 2303 	umull	r2, r3, r2, r3
 8004228:	095b      	lsrs	r3, r3, #5
 800422a:	f003 0207 	and.w	r2, r3, #7
 800422e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4422      	add	r2, r4
 8004236:	609a      	str	r2, [r3, #8]
  }
}
 8004238:	bf00      	nop
 800423a:	bf00      	nop
 800423c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004240:	46bd      	mov	sp, r7
 8004242:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004246:	bf00      	nop
 8004248:	51eb851f 	.word	0x51eb851f

0800424c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800424c:	b084      	sub	sp, #16
 800424e:	b580      	push	{r7, lr}
 8004250:	b084      	sub	sp, #16
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	f107 001c 	add.w	r0, r7, #28
 800425a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	2b01      	cmp	r3, #1
 8004262:	d122      	bne.n	80042aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800428c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800428e:	2b01      	cmp	r3, #1
 8004290:	d105      	bne.n	800429e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f9c0 	bl	8004624 <USB_CoreReset>
 80042a4:	4603      	mov	r3, r0
 80042a6:	73fb      	strb	r3, [r7, #15]
 80042a8:	e01a      	b.n	80042e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f9b4 	bl	8004624 <USB_CoreReset>
 80042bc:	4603      	mov	r3, r0
 80042be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	639a      	str	r2, [r3, #56]	; 0x38
 80042d2:	e005      	b.n	80042e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d10b      	bne.n	80042fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f043 0206 	orr.w	r2, r3, #6
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f043 0220 	orr.w	r2, r3, #32
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800430a:	b004      	add	sp, #16
 800430c:	4770      	bx	lr

0800430e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f043 0201 	orr.w	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f023 0201 	bic.w	r2, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	460b      	mov	r3, r1
 800435c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800436e:	78fb      	ldrb	r3, [r7, #3]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d115      	bne.n	80043a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004380:	2001      	movs	r0, #1
 8004382:	f7fc fc45 	bl	8000c10 <HAL_Delay>
      ms++;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	3301      	adds	r3, #1
 800438a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f93a 	bl	8004606 <USB_GetMode>
 8004392:	4603      	mov	r3, r0
 8004394:	2b01      	cmp	r3, #1
 8004396:	d01e      	beq.n	80043d6 <USB_SetCurrentMode+0x84>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b31      	cmp	r3, #49	; 0x31
 800439c:	d9f0      	bls.n	8004380 <USB_SetCurrentMode+0x2e>
 800439e:	e01a      	b.n	80043d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80043a0:	78fb      	ldrb	r3, [r7, #3]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d115      	bne.n	80043d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80043b2:	2001      	movs	r0, #1
 80043b4:	f7fc fc2c 	bl	8000c10 <HAL_Delay>
      ms++;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3301      	adds	r3, #1
 80043bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f921 	bl	8004606 <USB_GetMode>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <USB_SetCurrentMode+0x84>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b31      	cmp	r3, #49	; 0x31
 80043ce:	d9f0      	bls.n	80043b2 <USB_SetCurrentMode+0x60>
 80043d0:	e001      	b.n	80043d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e005      	b.n	80043e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2b32      	cmp	r3, #50	; 0x32
 80043da:	d101      	bne.n	80043e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e000      	b.n	80043e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3301      	adds	r3, #1
 80043fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4a13      	ldr	r2, [pc, #76]	; (8004450 <USB_FlushTxFifo+0x64>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d901      	bls.n	800440c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e01b      	b.n	8004444 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	2b00      	cmp	r3, #0
 8004412:	daf2      	bge.n	80043fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	019b      	lsls	r3, r3, #6
 800441c:	f043 0220 	orr.w	r2, r3, #32
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	3301      	adds	r3, #1
 8004428:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4a08      	ldr	r2, [pc, #32]	; (8004450 <USB_FlushTxFifo+0x64>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e006      	b.n	8004444 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0320 	and.w	r3, r3, #32
 800443e:	2b20      	cmp	r3, #32
 8004440:	d0f0      	beq.n	8004424 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	00030d40 	.word	0x00030d40

08004454 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3301      	adds	r3, #1
 8004464:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4a11      	ldr	r2, [pc, #68]	; (80044b0 <USB_FlushRxFifo+0x5c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d901      	bls.n	8004472 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e018      	b.n	80044a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	daf2      	bge.n	8004460 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2210      	movs	r2, #16
 8004482:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3301      	adds	r3, #1
 8004488:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4a08      	ldr	r2, [pc, #32]	; (80044b0 <USB_FlushRxFifo+0x5c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e006      	b.n	80044a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f003 0310 	and.w	r3, r3, #16
 800449e:	2b10      	cmp	r3, #16
 80044a0:	d0f0      	beq.n	8004484 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	00030d40 	.word	0x00030d40

080044b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b089      	sub	sp, #36	; 0x24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	4611      	mov	r1, r2
 80044c0:	461a      	mov	r2, r3
 80044c2:	460b      	mov	r3, r1
 80044c4:	71fb      	strb	r3, [r7, #7]
 80044c6:	4613      	mov	r3, r2
 80044c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80044d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d123      	bne.n	8004522 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80044da:	88bb      	ldrh	r3, [r7, #4]
 80044dc:	3303      	adds	r3, #3
 80044de:	089b      	lsrs	r3, r3, #2
 80044e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80044e2:	2300      	movs	r3, #0
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	e018      	b.n	800451a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	031a      	lsls	r2, r3, #12
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f4:	461a      	mov	r2, r3
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	3301      	adds	r3, #1
 8004500:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	3301      	adds	r3, #1
 8004506:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	3301      	adds	r3, #1
 800450c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	3301      	adds	r3, #1
 8004512:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	3301      	adds	r3, #1
 8004518:	61bb      	str	r3, [r7, #24]
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	429a      	cmp	r2, r3
 8004520:	d3e2      	bcc.n	80044e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3724      	adds	r7, #36	; 0x24
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004530:	b480      	push	{r7}
 8004532:	b08b      	sub	sp, #44	; 0x2c
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	4613      	mov	r3, r2
 800453c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004546:	88fb      	ldrh	r3, [r7, #6]
 8004548:	089b      	lsrs	r3, r3, #2
 800454a:	b29b      	uxth	r3, r3
 800454c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800454e:	88fb      	ldrh	r3, [r7, #6]
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004556:	2300      	movs	r3, #0
 8004558:	623b      	str	r3, [r7, #32]
 800455a:	e014      	b.n	8004586 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	601a      	str	r2, [r3, #0]
    pDest++;
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	3301      	adds	r3, #1
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	3301      	adds	r3, #1
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	3301      	adds	r3, #1
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	3301      	adds	r3, #1
 800457e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	3301      	adds	r3, #1
 8004584:	623b      	str	r3, [r7, #32]
 8004586:	6a3a      	ldr	r2, [r7, #32]
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	429a      	cmp	r2, r3
 800458c:	d3e6      	bcc.n	800455c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800458e:	8bfb      	ldrh	r3, [r7, #30]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01e      	beq.n	80045d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800459e:	461a      	mov	r2, r3
 80045a0:	f107 0310 	add.w	r3, r7, #16
 80045a4:	6812      	ldr	r2, [r2, #0]
 80045a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	701a      	strb	r2, [r3, #0]
      i++;
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	3301      	adds	r3, #1
 80045be:	623b      	str	r3, [r7, #32]
      pDest++;
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	3301      	adds	r3, #1
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80045c6:	8bfb      	ldrh	r3, [r7, #30]
 80045c8:	3b01      	subs	r3, #1
 80045ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80045cc:	8bfb      	ldrh	r3, [r7, #30]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1ea      	bne.n	80045a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	372c      	adds	r7, #44	; 0x2c
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4013      	ands	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80045f8:	68fb      	ldr	r3, [r7, #12]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0301 	and.w	r3, r3, #1
}
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3301      	adds	r3, #1
 8004634:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4a13      	ldr	r2, [pc, #76]	; (8004688 <USB_CoreReset+0x64>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d901      	bls.n	8004642 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e01b      	b.n	800467a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	daf2      	bge.n	8004630 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f043 0201 	orr.w	r2, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	3301      	adds	r3, #1
 800465e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4a09      	ldr	r2, [pc, #36]	; (8004688 <USB_CoreReset+0x64>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d901      	bls.n	800466c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e006      	b.n	800467a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b01      	cmp	r3, #1
 8004676:	d0f0      	beq.n	800465a <USB_CoreReset+0x36>

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	00030d40 	.word	0x00030d40

0800468c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800468c:	b084      	sub	sp, #16
 800468e:	b580      	push	{r7, lr}
 8004690:	b086      	sub	sp, #24
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800469a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046ac:	461a      	mov	r2, r3
 80046ae:	2300      	movs	r3, #0
 80046b0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d018      	beq.n	8004714 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80046e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d10a      	bne.n	80046fe <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046f6:	f043 0304 	orr.w	r3, r3, #4
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	e014      	b.n	8004728 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800470c:	f023 0304 	bic.w	r3, r3, #4
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	e009      	b.n	8004728 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004722:	f023 0304 	bic.w	r3, r3, #4
 8004726:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004728:	2110      	movs	r1, #16
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7ff fe5e 	bl	80043ec <USB_FlushTxFifo>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff fe8a 	bl	8004454 <USB_FlushRxFifo>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800474a:	2300      	movs	r3, #0
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	e015      	b.n	800477c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4413      	add	r3, r2
 8004758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475c:	461a      	mov	r2, r3
 800475e:	f04f 33ff 	mov.w	r3, #4294967295
 8004762:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4413      	add	r3, r2
 800476c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004770:	461a      	mov	r2, r3
 8004772:	2300      	movs	r3, #0
 8004774:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	3301      	adds	r3, #1
 800477a:	613b      	str	r3, [r7, #16]
 800477c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	429a      	cmp	r2, r3
 8004782:	d3e5      	bcc.n	8004750 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f04f 32ff 	mov.w	r2, #4294967295
 8004790:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00b      	beq.n	80047b6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047a4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a13      	ldr	r2, [pc, #76]	; (80047f8 <USB_HostInit+0x16c>)
 80047aa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a13      	ldr	r2, [pc, #76]	; (80047fc <USB_HostInit+0x170>)
 80047b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80047b4:	e009      	b.n	80047ca <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2280      	movs	r2, #128	; 0x80
 80047ba:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a10      	ldr	r2, [pc, #64]	; (8004800 <USB_HostInit+0x174>)
 80047c0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a0f      	ldr	r2, [pc, #60]	; (8004804 <USB_HostInit+0x178>)
 80047c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d105      	bne.n	80047dc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	f043 0210 	orr.w	r2, r3, #16
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699a      	ldr	r2, [r3, #24]
 80047e0:	4b09      	ldr	r3, [pc, #36]	; (8004808 <USB_HostInit+0x17c>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80047e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047f4:	b004      	add	sp, #16
 80047f6:	4770      	bx	lr
 80047f8:	01000200 	.word	0x01000200
 80047fc:	00e00300 	.word	0x00e00300
 8004800:	00600080 	.word	0x00600080
 8004804:	004000e0 	.word	0x004000e0
 8004808:	a3200008 	.word	0xa3200008

0800480c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800482a:	f023 0303 	bic.w	r3, r3, #3
 800482e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	68f9      	ldr	r1, [r7, #12]
 8004840:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004844:	4313      	orrs	r3, r2
 8004846:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d107      	bne.n	800485e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004854:	461a      	mov	r2, r3
 8004856:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800485a:	6053      	str	r3, [r2, #4]
 800485c:	e009      	b.n	8004872 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800485e:	78fb      	ldrb	r3, [r7, #3]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d106      	bne.n	8004872 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800486a:	461a      	mov	r2, r3
 800486c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004870:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80048a0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80048aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ae:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80048b0:	2064      	movs	r0, #100	; 0x64
 80048b2:	f7fc f9ad 	bl	8000c10 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80048be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048c2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80048c4:	200a      	movs	r0, #10
 80048c6:	f7fc f9a3 	bl	8000c10 <HAL_Delay>

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80048f8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d109      	bne.n	8004918 <USB_DriveVbus+0x44>
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d106      	bne.n	8004918 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004912:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004916:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800491e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004922:	d109      	bne.n	8004938 <USB_DriveVbus+0x64>
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004932:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004936:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004946:	b480      	push	{r7}
 8004948:	b085      	sub	sp, #20
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	0c5b      	lsrs	r3, r3, #17
 8004964:	f003 0303 	and.w	r3, r3, #3
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	b29b      	uxth	r3, r3
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	4608      	mov	r0, r1
 80049a2:	4611      	mov	r1, r2
 80049a4:	461a      	mov	r2, r3
 80049a6:	4603      	mov	r3, r0
 80049a8:	70fb      	strb	r3, [r7, #3]
 80049aa:	460b      	mov	r3, r1
 80049ac:	70bb      	strb	r3, [r7, #2]
 80049ae:	4613      	mov	r3, r2
 80049b0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c6:	461a      	mov	r2, r3
 80049c8:	f04f 33ff 	mov.w	r3, #4294967295
 80049cc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80049ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d87e      	bhi.n	8004ad4 <USB_HC_Init+0x13c>
 80049d6:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <USB_HC_Init+0x44>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	080049ed 	.word	0x080049ed
 80049e0:	08004a97 	.word	0x08004a97
 80049e4:	080049ed 	.word	0x080049ed
 80049e8:	08004a59 	.word	0x08004a59
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f8:	461a      	mov	r2, r3
 80049fa:	f240 439d 	movw	r3, #1181	; 0x49d
 80049fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004a00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	da10      	bge.n	8004a2a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	78fa      	ldrb	r2, [r7, #3]
 8004a18:	0151      	lsls	r1, r2, #5
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	440a      	add	r2, r1
 8004a1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a26:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004a28:	e057      	b.n	8004ada <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d051      	beq.n	8004ada <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004a36:	78fb      	ldrb	r3, [r7, #3]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	78fa      	ldrb	r2, [r7, #3]
 8004a46:	0151      	lsls	r1, r2, #5
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	440a      	add	r2, r1
 8004a4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a54:	60d3      	str	r3, [r2, #12]
      break;
 8004a56:	e040      	b.n	8004ada <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a64:	461a      	mov	r2, r3
 8004a66:	f240 639d 	movw	r3, #1693	; 0x69d
 8004a6a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004a6c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	da34      	bge.n	8004ade <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	78fa      	ldrb	r2, [r7, #3]
 8004a84:	0151      	lsls	r1, r2, #5
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	440a      	add	r2, r1
 8004a8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a92:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004a94:	e023      	b.n	8004ade <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004a96:	78fb      	ldrb	r3, [r7, #3]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f240 2325 	movw	r3, #549	; 0x225
 8004aa8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004aaa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	da17      	bge.n	8004ae2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004ab2:	78fb      	ldrb	r3, [r7, #3]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	78fa      	ldrb	r2, [r7, #3]
 8004ac2:	0151      	lsls	r1, r2, #5
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	440a      	add	r2, r1
 8004ac8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004acc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004ad0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004ad2:	e006      	b.n	8004ae2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	77fb      	strb	r3, [r7, #31]
      break;
 8004ad8:	e004      	b.n	8004ae4 <USB_HC_Init+0x14c>
      break;
 8004ada:	bf00      	nop
 8004adc:	e002      	b.n	8004ae4 <USB_HC_Init+0x14c>
      break;
 8004ade:	bf00      	nop
 8004ae0:	e000      	b.n	8004ae4 <USB_HC_Init+0x14c>
      break;
 8004ae2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	78fa      	ldrb	r2, [r7, #3]
 8004af4:	0151      	lsls	r1, r2, #5
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	440a      	add	r2, r1
 8004afa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004afe:	f043 0302 	orr.w	r3, r3, #2
 8004b02:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b0a:	699a      	ldr	r2, [r3, #24]
 8004b0c:	78fb      	ldrb	r3, [r7, #3]
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	2101      	movs	r1, #1
 8004b14:	fa01 f303 	lsl.w	r3, r1, r3
 8004b18:	6939      	ldr	r1, [r7, #16]
 8004b1a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004b2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	da03      	bge.n	8004b3e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	e001      	b.n	8004b42 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7ff feff 	bl	8004946 <USB_GetHostSpeed>
 8004b48:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004b4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d106      	bne.n	8004b60 <USB_HC_Init+0x1c8>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d003      	beq.n	8004b60 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004b58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	e001      	b.n	8004b64 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b64:	787b      	ldrb	r3, [r7, #1]
 8004b66:	059b      	lsls	r3, r3, #22
 8004b68:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004b6c:	78bb      	ldrb	r3, [r7, #2]
 8004b6e:	02db      	lsls	r3, r3, #11
 8004b70:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b74:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004b76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b7a:	049b      	lsls	r3, r3, #18
 8004b7c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004b80:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004b82:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004b84:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004b88:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b8e:	78fb      	ldrb	r3, [r7, #3]
 8004b90:	0159      	lsls	r1, r3, #5
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	440b      	add	r3, r1
 8004b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ba0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004ba2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d003      	beq.n	8004bb2 <USB_HC_Init+0x21a>
 8004baa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d10f      	bne.n	8004bd2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004bb2:	78fb      	ldrb	r3, [r7, #3]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	78fa      	ldrb	r2, [r7, #3]
 8004bc2:	0151      	lsls	r1, r2, #5
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	440a      	add	r2, r1
 8004bc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bd0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004bd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3720      	adds	r7, #32
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08c      	sub	sp, #48	; 0x30
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	4613      	mov	r3, r2
 8004be8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	785b      	ldrb	r3, [r3, #1]
 8004bf2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bf8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d02d      	beq.n	8004c62 <USB_HC_StartXfer+0x86>
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	791b      	ldrb	r3, [r3, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d129      	bne.n	8004c62 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d117      	bne.n	8004c44 <USB_HC_StartXfer+0x68>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	79db      	ldrb	r3, [r3, #7]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <USB_HC_StartXfer+0x48>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	79db      	ldrb	r3, [r3, #7]
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d10f      	bne.n	8004c44 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	0151      	lsls	r1, r2, #5
 8004c36:	6a3a      	ldr	r2, [r7, #32]
 8004c38:	440a      	add	r2, r1
 8004c3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c42:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10b      	bne.n	8004c62 <USB_HC_StartXfer+0x86>
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	795b      	ldrb	r3, [r3, #5]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d107      	bne.n	8004c62 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	785b      	ldrb	r3, [r3, #1]
 8004c56:	4619      	mov	r1, r3
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 fa0f 	bl	800507c <USB_DoPing>
      return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e0f8      	b.n	8004e54 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d018      	beq.n	8004c9c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	8912      	ldrh	r2, [r2, #8]
 8004c72:	4413      	add	r3, r2
 8004c74:	3b01      	subs	r3, #1
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	8912      	ldrh	r2, [r2, #8]
 8004c7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c7e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004c80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004c82:	8b7b      	ldrh	r3, [r7, #26]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d90b      	bls.n	8004ca0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004c88:	8b7b      	ldrh	r3, [r7, #26]
 8004c8a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004c8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	8912      	ldrh	r2, [r2, #8]
 8004c92:	fb03 f202 	mul.w	r2, r3, r2
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	611a      	str	r2, [r3, #16]
 8004c9a:	e001      	b.n	8004ca0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	78db      	ldrb	r3, [r3, #3]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d007      	beq.n	8004cb8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004ca8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	8912      	ldrh	r2, [r2, #8]
 8004cae:	fb03 f202 	mul.w	r2, r3, r2
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	611a      	str	r2, [r3, #16]
 8004cb6:	e003      	b.n	8004cc0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	695a      	ldr	r2, [r3, #20]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004cc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004cca:	04d9      	lsls	r1, r3, #19
 8004ccc:	4b63      	ldr	r3, [pc, #396]	; (8004e5c <USB_HC_StartXfer+0x280>)
 8004cce:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004cd0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	7a9b      	ldrb	r3, [r3, #10]
 8004cd6:	075b      	lsls	r3, r3, #29
 8004cd8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004cdc:	69f9      	ldr	r1, [r7, #28]
 8004cde:	0148      	lsls	r0, r1, #5
 8004ce0:	6a39      	ldr	r1, [r7, #32]
 8004ce2:	4401      	add	r1, r0
 8004ce4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004ce8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004cea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004cec:	79fb      	ldrb	r3, [r7, #7]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d009      	beq.n	8004d06 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	68d9      	ldr	r1, [r3, #12]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d02:	460a      	mov	r2, r1
 8004d04:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	bf0c      	ite	eq
 8004d16:	2301      	moveq	r3, #1
 8004d18:	2300      	movne	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	69fa      	ldr	r2, [r7, #28]
 8004d2e:	0151      	lsls	r1, r2, #5
 8004d30:	6a3a      	ldr	r2, [r7, #32]
 8004d32:	440a      	add	r2, r1
 8004d34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d38:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d3c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	7e7b      	ldrb	r3, [r7, #25]
 8004d4e:	075b      	lsls	r3, r3, #29
 8004d50:	69f9      	ldr	r1, [r7, #28]
 8004d52:	0148      	lsls	r0, r1, #5
 8004d54:	6a39      	ldr	r1, [r7, #32]
 8004d56:	4401      	add	r1, r0
 8004d58:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d76:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	78db      	ldrb	r3, [r3, #3]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d004      	beq.n	8004d8a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d86:	613b      	str	r3, [r7, #16]
 8004d88:	e003      	b.n	8004d92 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d90:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d98:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da6:	461a      	mov	r2, r3
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	e04e      	b.n	8004e54 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	78db      	ldrb	r3, [r3, #3]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d149      	bne.n	8004e52 <USB_HC_StartXfer+0x276>
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d045      	beq.n	8004e52 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	79db      	ldrb	r3, [r3, #7]
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d830      	bhi.n	8004e30 <USB_HC_StartXfer+0x254>
 8004dce:	a201      	add	r2, pc, #4	; (adr r2, 8004dd4 <USB_HC_StartXfer+0x1f8>)
 8004dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd4:	08004de5 	.word	0x08004de5
 8004dd8:	08004e09 	.word	0x08004e09
 8004ddc:	08004de5 	.word	0x08004de5
 8004de0:	08004e09 	.word	0x08004e09
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	3303      	adds	r3, #3
 8004dea:	089b      	lsrs	r3, r3, #2
 8004dec:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004dee:	8afa      	ldrh	r2, [r7, #22]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d91c      	bls.n	8004e34 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	f043 0220 	orr.w	r2, r3, #32
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	619a      	str	r2, [r3, #24]
        }
        break;
 8004e06:	e015      	b.n	8004e34 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	3303      	adds	r3, #3
 8004e0e:	089b      	lsrs	r3, r3, #2
 8004e10:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004e12:	8afa      	ldrh	r2, [r7, #22]
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d90a      	bls.n	8004e38 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8004e2e:	e003      	b.n	8004e38 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004e30:	bf00      	nop
 8004e32:	e002      	b.n	8004e3a <USB_HC_StartXfer+0x25e>
        break;
 8004e34:	bf00      	nop
 8004e36:	e000      	b.n	8004e3a <USB_HC_StartXfer+0x25e>
        break;
 8004e38:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	68d9      	ldr	r1, [r3, #12]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	785a      	ldrb	r2, [r3, #1]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2000      	movs	r0, #0
 8004e4a:	9000      	str	r0, [sp, #0]
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f7ff fb31 	bl	80044b4 <USB_WritePacket>
  }

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3728      	adds	r7, #40	; 0x28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	1ff80000 	.word	0x1ff80000

08004e60 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	b29b      	uxth	r3, r3
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b089      	sub	sp, #36	; 0x24
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004e92:	78fb      	ldrb	r3, [r7, #3]
 8004e94:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	0c9b      	lsrs	r3, r3, #18
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	0fdb      	lsrs	r3, r3, #31
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	d104      	bne.n	8004edc <USB_HC_Halt+0x5a>
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e0c8      	b.n	800506e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d002      	beq.n	8004ee8 <USB_HC_Halt+0x66>
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d163      	bne.n	8004fb0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	0151      	lsls	r1, r2, #5
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	440a      	add	r2, r1
 8004efe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f06:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f003 0320 	and.w	r3, r3, #32
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f040 80ab 	bne.w	800506c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d133      	bne.n	8004f8a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	0151      	lsls	r1, r2, #5
 8004f34:	69fa      	ldr	r2, [r7, #28]
 8004f36:	440a      	add	r2, r1
 8004f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f40:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	0151      	lsls	r1, r2, #5
 8004f54:	69fa      	ldr	r2, [r7, #28]
 8004f56:	440a      	add	r2, r1
 8004f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f60:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3301      	adds	r3, #1
 8004f66:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f6e:	d81d      	bhi.n	8004fac <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f86:	d0ec      	beq.n	8004f62 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004f88:	e070      	b.n	800506c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	0151      	lsls	r1, r2, #5
 8004f9c:	69fa      	ldr	r2, [r7, #28]
 8004f9e:	440a      	add	r2, r1
 8004fa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fa8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004faa:	e05f      	b.n	800506c <USB_HC_Halt+0x1ea>
            break;
 8004fac:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004fae:	e05d      	b.n	800506c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	0151      	lsls	r1, r2, #5
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	440a      	add	r2, r1
 8004fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fce:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d133      	bne.n	8005048 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	0151      	lsls	r1, r2, #5
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	440a      	add	r2, r1
 8004ff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ffa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ffe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	4413      	add	r3, r2
 8005008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	0151      	lsls	r1, r2, #5
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	440a      	add	r2, r1
 8005016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800501a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800501e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3301      	adds	r3, #1
 8005024:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800502c:	d81d      	bhi.n	800506a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	4413      	add	r3, r2
 8005036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005044:	d0ec      	beq.n	8005020 <USB_HC_Halt+0x19e>
 8005046:	e011      	b.n	800506c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	4413      	add	r3, r2
 8005050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	0151      	lsls	r1, r2, #5
 800505a:	69fa      	ldr	r2, [r7, #28]
 800505c:	440a      	add	r2, r1
 800505e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005062:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005066:	6013      	str	r3, [r2, #0]
 8005068:	e000      	b.n	800506c <USB_HC_Halt+0x1ea>
          break;
 800506a:	bf00      	nop
    }
  }

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3724      	adds	r7, #36	; 0x24
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
	...

0800507c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	460b      	mov	r3, r1
 8005086:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005090:	2301      	movs	r3, #1
 8005092:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	04da      	lsls	r2, r3, #19
 8005098:	4b15      	ldr	r3, [pc, #84]	; (80050f0 <USB_DoPing+0x74>)
 800509a:	4013      	ands	r3, r2
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	0151      	lsls	r1, r2, #5
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	440a      	add	r2, r1
 80050a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050ac:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050c4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050cc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050da:	461a      	mov	r2, r3
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	1ff80000 	.word	0x1ff80000

080050f4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80050fc:	2300      	movs	r3, #0
 80050fe:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff f911 	bl	8004330 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800510e:	2110      	movs	r1, #16
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff f96b 	bl	80043ec <USB_FlushTxFifo>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff f997 	bl	8004454 <USB_FlushRxFifo>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005130:	2300      	movs	r3, #0
 8005132:	61bb      	str	r3, [r7, #24]
 8005134:	e01f      	b.n	8005176 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	4413      	add	r3, r2
 800513e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800514c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005154:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800515c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	4413      	add	r3, r2
 8005166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516a:	461a      	mov	r2, r3
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	3301      	adds	r3, #1
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	2b0f      	cmp	r3, #15
 800517a:	d9dc      	bls.n	8005136 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800517c:	2300      	movs	r3, #0
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	e034      	b.n	80051ec <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	4413      	add	r3, r2
 800518a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005198:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051a8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b6:	461a      	mov	r2, r3
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	3301      	adds	r3, #1
 80051c0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051c8:	d80c      	bhi.n	80051e4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051e0:	d0ec      	beq.n	80051bc <USB_StopHost+0xc8>
 80051e2:	e000      	b.n	80051e6 <USB_StopHost+0xf2>
        break;
 80051e4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	3301      	adds	r3, #1
 80051ea:	61bb      	str	r3, [r7, #24]
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	2b0f      	cmp	r3, #15
 80051f0:	d9c7      	bls.n	8005182 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051f8:	461a      	mov	r2, r3
 80051fa:	f04f 33ff 	mov.w	r3, #4294967295
 80051fe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f04f 32ff 	mov.w	r2, #4294967295
 8005206:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff f880 	bl	800430e <USB_EnableGlobalInt>

  return ret;
 800520e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3720      	adds	r7, #32
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005218:	b590      	push	{r4, r7, lr}
 800521a:	b08b      	sub	sp, #44	; 0x2c
 800521c:	af04      	add	r7, sp, #16
 800521e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800522a:	7919      	ldrb	r1, [r3, #4]
 800522c:	23ff      	movs	r3, #255	; 0xff
 800522e:	2201      	movs	r2, #1
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 ff1f 	bl	8006074 <USBH_FindInterface>
 8005236:	4603      	mov	r3, r0
 8005238:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800523a:	7dbb      	ldrb	r3, [r7, #22]
 800523c:	2bff      	cmp	r3, #255	; 0xff
 800523e:	d002      	beq.n	8005246 <USBH_HID_InterfaceInit+0x2e>
 8005240:	7dbb      	ldrb	r3, [r7, #22]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d901      	bls.n	800524a <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005246:	2302      	movs	r3, #2
 8005248:	e108      	b.n	800545c <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 800524a:	7dbb      	ldrb	r3, [r7, #22]
 800524c:	4619      	mov	r1, r3
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fef4 	bl	800603c <USBH_SelectInterface>
 8005254:	4603      	mov	r3, r0
 8005256:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8005258:	7d7b      	ldrb	r3, [r7, #21]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 800525e:	2302      	movs	r3, #2
 8005260:	e0fc      	b.n	800545c <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005268:	2034      	movs	r0, #52	; 0x34
 800526a:	f002 fd8f 	bl	8007d8c <malloc>
 800526e:	4603      	mov	r3, r0
 8005270:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 8005282:	2302      	movs	r3, #2
 8005284:	e0ea      	b.n	800545c <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8005286:	2234      	movs	r2, #52	; 0x34
 8005288:	2100      	movs	r1, #0
 800528a:	6938      	ldr	r0, [r7, #16]
 800528c:	f002 fd8e 	bl	8007dac <memset>

  HID_Handle->state = HID_ERROR;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2207      	movs	r2, #7
 8005294:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8005296:	7dbb      	ldrb	r3, [r7, #22]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	211a      	movs	r1, #26
 800529c:	fb01 f303 	mul.w	r3, r1, r3
 80052a0:	4413      	add	r3, r2
 80052a2:	f203 3349 	addw	r3, r3, #841	; 0x349
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d103      	bne.n	80052b4 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	4a6d      	ldr	r2, [pc, #436]	; (8005464 <USBH_HID_InterfaceInit+0x24c>)
 80052b0:	631a      	str	r2, [r3, #48]	; 0x30
 80052b2:	e010      	b.n	80052d6 <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 80052b4:	7dbb      	ldrb	r3, [r7, #22]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	211a      	movs	r1, #26
 80052ba:	fb01 f303 	mul.w	r3, r1, r3
 80052be:	4413      	add	r3, r2
 80052c0:	f203 3349 	addw	r3, r3, #841	; 0x349
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d103      	bne.n	80052d2 <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	4a66      	ldr	r2, [pc, #408]	; (8005468 <USBH_HID_InterfaceInit+0x250>)
 80052ce:	631a      	str	r2, [r3, #48]	; 0x30
 80052d0:	e001      	b.n	80052d6 <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 80052d2:	2302      	movs	r3, #2
 80052d4:	e0c2      	b.n	800545c <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2200      	movs	r2, #0
 80052da:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	2200      	movs	r2, #0
 80052e0:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80052e2:	7dbb      	ldrb	r3, [r7, #22]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	211a      	movs	r1, #26
 80052e8:	fb01 f303 	mul.w	r3, r1, r3
 80052ec:	4413      	add	r3, r2
 80052ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80052f2:	781a      	ldrb	r2, [r3, #0]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80052f8:	7dbb      	ldrb	r3, [r7, #22]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	211a      	movs	r1, #26
 80052fe:	fb01 f303 	mul.w	r3, r1, r3
 8005302:	4413      	add	r3, r2
 8005304:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005308:	881a      	ldrh	r2, [r3, #0]
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800530e:	7dbb      	ldrb	r3, [r7, #22]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	211a      	movs	r1, #26
 8005314:	fb01 f303 	mul.w	r3, r1, r3
 8005318:	4413      	add	r3, r2
 800531a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	b29a      	uxth	r2, r3
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	8b9b      	ldrh	r3, [r3, #28]
 800532a:	2b09      	cmp	r3, #9
 800532c:	d802      	bhi.n	8005334 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	220a      	movs	r2, #10
 8005332:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8005334:	7dbb      	ldrb	r3, [r7, #22]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	211a      	movs	r1, #26
 800533a:	fb01 f303 	mul.w	r3, r1, r3
 800533e:	4413      	add	r3, r2
 8005340:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b02      	cmp	r3, #2
 8005348:	bf28      	it	cs
 800534a:	2302      	movcs	r3, #2
 800534c:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 800534e:	2300      	movs	r3, #0
 8005350:	75fb      	strb	r3, [r7, #23]
 8005352:	e07d      	b.n	8005450 <USBH_HID_InterfaceInit+0x238>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 8005354:	7dbb      	ldrb	r3, [r7, #22]
 8005356:	7df9      	ldrb	r1, [r7, #23]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	3101      	adds	r1, #1
 800535c:	00c9      	lsls	r1, r1, #3
 800535e:	201a      	movs	r0, #26
 8005360:	fb00 f303 	mul.w	r3, r0, r3
 8005364:	440b      	add	r3, r1
 8005366:	4413      	add	r3, r2
 8005368:	f203 3346 	addw	r3, r3, #838	; 0x346
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	b25b      	sxtb	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	da35      	bge.n	80053e0 <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8005374:	7dbb      	ldrb	r3, [r7, #22]
 8005376:	7df9      	ldrb	r1, [r7, #23]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	3101      	adds	r1, #1
 800537c:	00c9      	lsls	r1, r1, #3
 800537e:	201a      	movs	r0, #26
 8005380:	fb00 f303 	mul.w	r3, r0, r3
 8005384:	440b      	add	r3, r1
 8005386:	4413      	add	r3, r2
 8005388:	f203 3346 	addw	r3, r3, #838	; 0x346
 800538c:	781a      	ldrb	r2, [r3, #0]
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	791b      	ldrb	r3, [r3, #4]
 8005396:	4619      	mov	r1, r3
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f002 f962 	bl	8007662 <USBH_AllocPipe>
 800539e:	4603      	mov	r3, r0
 80053a0:	461a      	mov	r2, r3
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	7859      	ldrb	r1, [r3, #1]
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	7918      	ldrb	r0, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	8b12      	ldrh	r2, [r2, #24]
 80053be:	9202      	str	r2, [sp, #8]
 80053c0:	2203      	movs	r2, #3
 80053c2:	9201      	str	r2, [sp, #4]
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	4623      	mov	r3, r4
 80053c8:	4602      	mov	r2, r0
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f002 f91a 	bl	8007604 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	785b      	ldrb	r3, [r3, #1]
 80053d4:	2200      	movs	r2, #0
 80053d6:	4619      	mov	r1, r3
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f002 fc29 	bl	8007c30 <USBH_LL_SetToggle>
 80053de:	e034      	b.n	800544a <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 80053e0:	7dbb      	ldrb	r3, [r7, #22]
 80053e2:	7df9      	ldrb	r1, [r7, #23]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	3101      	adds	r1, #1
 80053e8:	00c9      	lsls	r1, r1, #3
 80053ea:	201a      	movs	r0, #26
 80053ec:	fb00 f303 	mul.w	r3, r0, r3
 80053f0:	440b      	add	r3, r1
 80053f2:	4413      	add	r3, r2
 80053f4:	f203 3346 	addw	r3, r3, #838	; 0x346
 80053f8:	781a      	ldrb	r2, [r3, #0]
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	78db      	ldrb	r3, [r3, #3]
 8005402:	4619      	mov	r1, r3
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f002 f92c 	bl	8007662 <USBH_AllocPipe>
 800540a:	4603      	mov	r3, r0
 800540c:	461a      	mov	r2, r3
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	7819      	ldrb	r1, [r3, #0]
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	78d8      	ldrb	r0, [r3, #3]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	8b12      	ldrh	r2, [r2, #24]
 800542a:	9202      	str	r2, [sp, #8]
 800542c:	2203      	movs	r2, #3
 800542e:	9201      	str	r2, [sp, #4]
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	4623      	mov	r3, r4
 8005434:	4602      	mov	r2, r0
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f002 f8e4 	bl	8007604 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2200      	movs	r2, #0
 8005442:	4619      	mov	r1, r3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f002 fbf3 	bl	8007c30 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 800544a:	7dfb      	ldrb	r3, [r7, #23]
 800544c:	3301      	adds	r3, #1
 800544e:	75fb      	strb	r3, [r7, #23]
 8005450:	7dfa      	ldrb	r2, [r7, #23]
 8005452:	7bfb      	ldrb	r3, [r7, #15]
 8005454:	429a      	cmp	r2, r3
 8005456:	f4ff af7d 	bcc.w	8005354 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	371c      	adds	r7, #28
 8005460:	46bd      	mov	sp, r7
 8005462:	bd90      	pop	{r4, r7, pc}
 8005464:	08005b15 	.word	0x08005b15
 8005468:	08005d05 	.word	0x08005d05

0800546c <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	785b      	ldrb	r3, [r3, #1]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00e      	beq.n	80054a4 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	785b      	ldrb	r3, [r3, #1]
 800548a:	4619      	mov	r1, r3
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f002 f8d8 	bl	8007642 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	785b      	ldrb	r3, [r3, #1]
 8005496:	4619      	mov	r1, r3
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f002 f903 	bl	80076a4 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00e      	beq.n	80054ca <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	4619      	mov	r1, r3
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f002 f8c5 	bl	8007642 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	4619      	mov	r1, r3
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f002 f8f0 	bl	80076a4 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00b      	beq.n	80054ee <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	4618      	mov	r0, r3
 80054e0:	f002 fc5c 	bl	8007d9c <free>
    phost->pActiveClass->pData = 0U;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054ea:	2200      	movs	r2, #0
 80054ec:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8005500:	2301      	movs	r3, #1
 8005502:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8005504:	2301      	movs	r3, #1
 8005506:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	795b      	ldrb	r3, [r3, #5]
 8005516:	2b05      	cmp	r3, #5
 8005518:	d860      	bhi.n	80055dc <USBH_HID_ClassRequest+0xe4>
 800551a:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <USBH_HID_ClassRequest+0x28>)
 800551c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005520:	08005539 	.word	0x08005539
 8005524:	080055dd 	.word	0x080055dd
 8005528:	08005553 	.word	0x08005553
 800552c:	08005539 	.word	0x08005539
 8005530:	0800557d 	.word	0x0800557d
 8005534:	080055a7 	.word	0x080055a7
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	331c      	adds	r3, #28
 8005542:	4619      	mov	r1, r3
 8005544:	4610      	mov	r0, r2
 8005546:	f000 f9cd 	bl	80058e4 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2202      	movs	r2, #2
 800554e:	715a      	strb	r2, [r3, #5]

      break;
 8005550:	e04b      	b.n	80055ea <USBH_HID_ClassRequest+0xf2>
    case HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f930 	bl	80057be <USBH_HID_GetHIDReportDescriptor>
 800555e:	4603      	mov	r3, r0
 8005560:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8005562:	7bbb      	ldrb	r3, [r7, #14]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d103      	bne.n	8005570 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2204      	movs	r2, #4
 800556c:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 800556e:	e037      	b.n	80055e0 <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8005570:	7bbb      	ldrb	r3, [r7, #14]
 8005572:	2b03      	cmp	r3, #3
 8005574:	d134      	bne.n	80055e0 <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 8005576:	2302      	movs	r3, #2
 8005578:	73fb      	strb	r3, [r7, #15]
      break;
 800557a:	e031      	b.n	80055e0 <USBH_HID_ClassRequest+0xe8>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 800557c:	2200      	movs	r2, #0
 800557e:	2100      	movs	r1, #0
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f935 	bl	80057f0 <USBH_HID_SetIdle>
 8005586:	4603      	mov	r3, r0
 8005588:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 800558a:	7bbb      	ldrb	r3, [r7, #14]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d103      	bne.n	8005598 <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2205      	movs	r2, #5
 8005594:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 8005596:	e025      	b.n	80055e4 <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8005598:	7bbb      	ldrb	r3, [r7, #14]
 800559a:	2b03      	cmp	r3, #3
 800559c:	d122      	bne.n	80055e4 <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2205      	movs	r2, #5
 80055a2:	715a      	strb	r2, [r3, #5]
      break;
 80055a4:	e01e      	b.n	80055e4 <USBH_HID_ClassRequest+0xec>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 80055a6:	2100      	movs	r1, #0
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f975 	bl	8005898 <USBH_HID_SetProtocol>
 80055ae:	4603      	mov	r3, r0
 80055b0:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 80055b2:	7bbb      	ldrb	r3, [r7, #14]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10b      	bne.n	80055d0 <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2201      	movs	r2, #1
 80055bc:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80055c4:	2102      	movs	r1, #2
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	4798      	blx	r3
        status = USBH_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 80055ce:	e00b      	b.n	80055e8 <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 80055d0:	7bbb      	ldrb	r3, [r7, #14]
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d108      	bne.n	80055e8 <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 80055d6:	2302      	movs	r3, #2
 80055d8:	73fb      	strb	r3, [r7, #15]
      break;
 80055da:	e005      	b.n	80055e8 <USBH_HID_ClassRequest+0xf0>

    case HID_REQ_IDLE:
    default:
      break;
 80055dc:	bf00      	nop
 80055de:	e004      	b.n	80055ea <USBH_HID_ClassRequest+0xf2>
      break;
 80055e0:	bf00      	nop
 80055e2:	e002      	b.n	80055ea <USBH_HID_ClassRequest+0xf2>
      break;
 80055e4:	bf00      	nop
 80055e6:	e000      	b.n	80055ea <USBH_HID_ClassRequest+0xf2>
      break;
 80055e8:	bf00      	nop
  }

  return status;
 80055ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b088      	sub	sp, #32
 80055f8:	af02      	add	r7, sp, #8
 80055fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80055fc:	2300      	movs	r3, #0
 80055fe:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	789b      	ldrb	r3, [r3, #2]
 800560e:	2b06      	cmp	r3, #6
 8005610:	f200 80a9 	bhi.w	8005766 <USBH_HID_Process+0x172>
 8005614:	a201      	add	r2, pc, #4	; (adr r2, 800561c <USBH_HID_Process+0x28>)
 8005616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561a:	bf00      	nop
 800561c:	08005639 	.word	0x08005639
 8005620:	08005649 	.word	0x08005649
 8005624:	08005767 	.word	0x08005767
 8005628:	08005767 	.word	0x08005767
 800562c:	080056b9 	.word	0x080056b9
 8005630:	080056a3 	.word	0x080056a3
 8005634:	080056e7 	.word	0x080056e7
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2201      	movs	r2, #1
 8005644:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005646:	e093      	b.n	8005770 <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	695a      	ldr	r2, [r3, #20]
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	8b1b      	ldrh	r3, [r3, #24]
 8005650:	b2db      	uxtb	r3, r3
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	4613      	mov	r3, r2
 8005656:	2200      	movs	r2, #0
 8005658:	2101      	movs	r1, #1
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f8f0 	bl	8005840 <USBH_HID_GetReport>
 8005660:	4603      	mov	r3, r0
 8005662:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8005664:	7dfb      	ldrb	r3, [r7, #23]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d103      	bne.n	8005672 <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	2205      	movs	r2, #5
 800566e:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005670:	e07e      	b.n	8005770 <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 8005672:	7dfb      	ldrb	r3, [r7, #23]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d105      	bne.n	8005684 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	2201      	movs	r2, #1
 800567c:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	75fb      	strb	r3, [r7, #23]
      break;
 8005682:	e075      	b.n	8005770 <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 8005684:	7dfb      	ldrb	r3, [r7, #23]
 8005686:	2b03      	cmp	r3, #3
 8005688:	d105      	bne.n	8005696 <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2205      	movs	r2, #5
 800568e:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8005690:	2300      	movs	r3, #0
 8005692:	75fb      	strb	r3, [r7, #23]
      break;
 8005694:	e06c      	b.n	8005770 <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	2207      	movs	r2, #7
 800569a:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800569c:	2302      	movs	r3, #2
 800569e:	75fb      	strb	r3, [r7, #23]
      break;
 80056a0:	e066      	b.n	8005770 <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d05c      	beq.n	800576a <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2204      	movs	r2, #4
 80056b4:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80056b6:	e058      	b.n	800576a <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	785b      	ldrb	r3, [r3, #1]
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f001 ff7d 	bl	80075c6 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	2206      	movs	r2, #6
 80056d0:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 80056e4:	e044      	b.n	8005770 <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	785b      	ldrb	r3, [r3, #1]
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f002 fa75 	bl	8007bdc <USBH_LL_GetURBState>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d120      	bne.n	800573a <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	785b      	ldrb	r3, [r3, #1]
 80056fc:	4619      	mov	r1, r3
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f002 f9da 	bl	8007ab8 <USBH_LL_GetLastXferSize>
 8005704:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800570c:	2b00      	cmp	r3, #0
 800570e:	d12e      	bne.n	800576e <USBH_HID_Process+0x17a>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d02b      	beq.n	800576e <USBH_HID_Process+0x17a>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f103 0008 	add.w	r0, r3, #8
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	6959      	ldr	r1, [r3, #20]
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	8b1b      	ldrh	r3, [r3, #24]
 8005724:	461a      	mov	r2, r3
 8005726:	f000 f9a0 	bl	8005a6a <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fa feca 	bl	80004cc <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 8005738:	e019      	b.n	800576e <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	785b      	ldrb	r3, [r3, #1]
 800573e:	4619      	mov	r1, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f002 fa4b 	bl	8007bdc <USBH_LL_GetURBState>
 8005746:	4603      	mov	r3, r0
 8005748:	2b05      	cmp	r3, #5
 800574a:	d110      	bne.n	800576e <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	7e9b      	ldrb	r3, [r3, #26]
 8005750:	4619      	mov	r1, r3
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f001 fa5b 	bl	8006c0e <USBH_ClrFeature>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d107      	bne.n	800576e <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	2204      	movs	r2, #4
 8005762:	709a      	strb	r2, [r3, #2]
      break;
 8005764:	e003      	b.n	800576e <USBH_HID_Process+0x17a>

    default:
      break;
 8005766:	bf00      	nop
 8005768:	e002      	b.n	8005770 <USBH_HID_Process+0x17c>
      break;
 800576a:	bf00      	nop
 800576c:	e000      	b.n	8005770 <USBH_HID_Process+0x17c>
      break;
 800576e:	bf00      	nop
  }

  return status;
 8005770:	7dfb      	ldrb	r3, [r7, #23]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop

0800577c <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	789b      	ldrb	r3, [r3, #2]
 8005792:	2b06      	cmp	r3, #6
 8005794:	d10c      	bne.n	80057b0 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	8b92      	ldrh	r2, [r2, #28]
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d302      	bcc.n	80057b0 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2204      	movs	r2, #4
 80057ae:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b086      	sub	sp, #24
 80057c2:	af02      	add	r7, sp, #8
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	460b      	mov	r3, r1
 80057c8:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80057d0:	887b      	ldrh	r3, [r7, #2]
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	4613      	mov	r3, r2
 80057d6:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 80057da:	2101      	movs	r1, #1
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f001 f976 	bl	8006ace <USBH_GetDescriptor>
 80057e2:	4603      	mov	r3, r0
 80057e4:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 80057e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	70fb      	strb	r3, [r7, #3]
 80057fc:	4613      	mov	r3, r2
 80057fe:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2221      	movs	r2, #33	; 0x21
 8005804:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	220a      	movs	r2, #10
 800580a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	b29b      	uxth	r3, r3
 8005810:	021b      	lsls	r3, r3, #8
 8005812:	b29a      	uxth	r2, r3
 8005814:	78bb      	ldrb	r3, [r7, #2]
 8005816:	b29b      	uxth	r3, r3
 8005818:	4313      	orrs	r3, r2
 800581a:	b29a      	uxth	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800582c:	2200      	movs	r2, #0
 800582e:	2100      	movs	r1, #0
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f001 fcb9 	bl	80071a8 <USBH_CtlReq>
 8005836:	4603      	mov	r3, r0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	607b      	str	r3, [r7, #4]
 800584a:	460b      	mov	r3, r1
 800584c:	72fb      	strb	r3, [r7, #11]
 800584e:	4613      	mov	r3, r2
 8005850:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	22a1      	movs	r2, #161	; 0xa1
 8005856:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2201      	movs	r2, #1
 800585c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800585e:	7afb      	ldrb	r3, [r7, #11]
 8005860:	b29b      	uxth	r3, r3
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	b29a      	uxth	r2, r3
 8005866:	7abb      	ldrb	r3, [r7, #10]
 8005868:	b29b      	uxth	r3, r3
 800586a:	4313      	orrs	r3, r2
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8005878:	7e3b      	ldrb	r3, [r7, #24]
 800587a:	b29a      	uxth	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8005880:	7e3b      	ldrb	r3, [r7, #24]
 8005882:	b29b      	uxth	r3, r3
 8005884:	461a      	mov	r2, r3
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f001 fc8d 	bl	80071a8 <USBH_CtlReq>
 800588e:	4603      	mov	r3, r0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2221      	movs	r2, #33	; 0x21
 80058a8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	220b      	movs	r2, #11
 80058ae:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 80058b0:	78fb      	ldrb	r3, [r7, #3]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	825a      	strh	r2, [r3, #18]
 80058bc:	e002      	b.n	80058c4 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80058d0:	2200      	movs	r2, #0
 80058d2:	2100      	movs	r1, #0
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f001 fc67 	bl	80071a8 <USBH_CtlReq>
 80058da:	4603      	mov	r3, r0

}
 80058dc:	4618      	mov	r0, r3
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	3302      	adds	r3, #2
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	3303      	adds	r3, #3
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	b29b      	uxth	r3, r3
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	b29b      	uxth	r3, r3
 8005906:	4313      	orrs	r3, r2
 8005908:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800590a:	897b      	ldrh	r3, [r7, #10]
 800590c:	2b09      	cmp	r3, #9
 800590e:	d943      	bls.n	8005998 <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 8005910:	2309      	movs	r3, #9
 8005912:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 8005914:	e03c      	b.n	8005990 <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005916:	f107 0308 	add.w	r3, r7, #8
 800591a:	4619      	mov	r1, r3
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f001 fc28 	bl	8007172 <USBH_GetNextDesc>
 8005922:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	785b      	ldrb	r3, [r3, #1]
 8005928:	2b21      	cmp	r3, #33	; 0x21
 800592a:	d131      	bne.n	8005990 <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	781a      	ldrb	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	785a      	ldrb	r2, [r3, #1]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	3302      	adds	r3, #2
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	b29a      	uxth	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3303      	adds	r3, #3
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	b29b      	uxth	r3, r3
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	b29b      	uxth	r3, r3
 8005950:	4313      	orrs	r3, r2
 8005952:	b29a      	uxth	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	791a      	ldrb	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	795a      	ldrb	r2, [r3, #5]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	799a      	ldrb	r2, [r3, #6]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3307      	adds	r3, #7
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3308      	adds	r3, #8
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	b29b      	uxth	r3, r3
 8005980:	021b      	lsls	r3, r3, #8
 8005982:	b29b      	uxth	r3, r3
 8005984:	4313      	orrs	r3, r2
 8005986:	b29a      	uxth	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	811a      	strh	r2, [r3, #8]
        break;
 800598c:	bf00      	nop
      }
    }
  }
}
 800598e:	e003      	b.n	8005998 <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 8005990:	893b      	ldrh	r3, [r7, #8]
 8005992:	897a      	ldrh	r2, [r7, #10]
 8005994:	429a      	cmp	r2, r3
 8005996:	d8be      	bhi.n	8005916 <USBH_HID_ParseHIDDesc+0x32>
}
 8005998:	bf00      	nop
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	4613      	mov	r3, r2
 80059ac:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	729a      	strb	r2, [r3, #10]
  f->size = size;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	88fa      	ldrh	r2, [r7, #6]
 80059c4:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	601a      	str	r2, [r3, #0]
}
 80059cc:	bf00      	nop
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	4613      	mov	r3, r2
 80059e4:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	7a9b      	ldrb	r3, [r3, #10]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d131      	bne.n	8005a56 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 80059f8:	2300      	movs	r3, #0
 80059fa:	82fb      	strh	r3, [r7, #22]
 80059fc:	e027      	b.n	8005a4e <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	88da      	ldrh	r2, [r3, #6]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	889b      	ldrh	r3, [r3, #4]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d019      	beq.n	8005a3e <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	88d2      	ldrh	r2, [r2, #6]
 8005a12:	441a      	add	r2, r3
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	1c59      	adds	r1, r3, #1
 8005a18:	6139      	str	r1, [r7, #16]
 8005a1a:	7812      	ldrb	r2, [r2, #0]
 8005a1c:	701a      	strb	r2, [r3, #0]
        f->tail++;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	88db      	ldrh	r3, [r3, #6]
 8005a22:	3301      	adds	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	88da      	ldrh	r2, [r3, #6]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	891b      	ldrh	r3, [r3, #8]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d108      	bne.n	8005a48 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	80da      	strh	r2, [r3, #6]
 8005a3c:	e004      	b.n	8005a48 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	729a      	strb	r2, [r3, #10]
        return i;
 8005a44:	8afb      	ldrh	r3, [r7, #22]
 8005a46:	e00a      	b.n	8005a5e <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 8005a48:	8afb      	ldrh	r3, [r7, #22]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	82fb      	strh	r3, [r7, #22]
 8005a4e:	8afa      	ldrh	r2, [r7, #22]
 8005a50:	88fb      	ldrh	r3, [r7, #6]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d3d3      	bcc.n	80059fe <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8005a5c:	88fb      	ldrh	r3, [r7, #6]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b087      	sub	sp, #28
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	4613      	mov	r3, r2
 8005a76:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	7a9b      	ldrb	r3, [r3, #10]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d13c      	bne.n	8005afe <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2201      	movs	r2, #1
 8005a88:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	82fb      	strh	r3, [r7, #22]
 8005a8e:	e032      	b.n	8005af6 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	889b      	ldrh	r3, [r3, #4]
 8005a94:	3301      	adds	r3, #1
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	88d2      	ldrh	r2, [r2, #6]
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00a      	beq.n	8005ab4 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	889b      	ldrh	r3, [r3, #4]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d108      	bne.n	8005abe <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	88db      	ldrh	r3, [r3, #6]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d104      	bne.n	8005abe <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	729a      	strb	r2, [r3, #10]
        return i;
 8005aba:	8afb      	ldrh	r3, [r7, #22]
 8005abc:	e023      	b.n	8005b06 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	613a      	str	r2, [r7, #16]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	6812      	ldr	r2, [r2, #0]
 8005ac8:	68f9      	ldr	r1, [r7, #12]
 8005aca:	8889      	ldrh	r1, [r1, #4]
 8005acc:	440a      	add	r2, r1
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	7013      	strb	r3, [r2, #0]
        f->head++;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	889b      	ldrh	r3, [r3, #4]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	889a      	ldrh	r2, [r3, #4]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	891b      	ldrh	r3, [r3, #8]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d102      	bne.n	8005af0 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 8005af0:	8afb      	ldrh	r3, [r7, #22]
 8005af2:	3301      	adds	r3, #1
 8005af4:	82fb      	strh	r3, [r7, #22]
 8005af6:	8afa      	ldrh	r2, [r7, #22]
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d3c8      	bcc.n	8005a90 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8005b04:	88fb      	ldrh	r3, [r7, #6]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
	...

08005b14 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b22:	69db      	ldr	r3, [r3, #28]
 8005b24:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 8005b26:	4b22      	ldr	r3, [pc, #136]	; (8005bb0 <USBH_HID_KeybdInit+0x9c>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 8005b2c:	4b20      	ldr	r3, [pc, #128]	; (8005bb0 <USBH_HID_KeybdInit+0x9c>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 8005b32:	4b1f      	ldr	r3, [pc, #124]	; (8005bb0 <USBH_HID_KeybdInit+0x9c>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 8005b38:	4b1d      	ldr	r3, [pc, #116]	; (8005bb0 <USBH_HID_KeybdInit+0x9c>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 8005b3e:	4b1c      	ldr	r3, [pc, #112]	; (8005bb0 <USBH_HID_KeybdInit+0x9c>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 8005b44:	4b1a      	ldr	r3, [pc, #104]	; (8005bb0 <USBH_HID_KeybdInit+0x9c>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 8005b4a:	4b19      	ldr	r3, [pc, #100]	; (8005bb0 <USBH_HID_KeybdInit+0x9c>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 8005b50:	4b17      	ldr	r3, [pc, #92]	; (8005bb0 <USBH_HID_KeybdInit+0x9c>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	721a      	strb	r2, [r3, #8]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	e00c      	b.n	8005b76 <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 8005b5c:	4a15      	ldr	r2, [pc, #84]	; (8005bb4 <USBH_HID_KeybdInit+0xa0>)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2100      	movs	r1, #0
 8005b62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8005b66:	4a14      	ldr	r2, [pc, #80]	; (8005bb8 <USBH_HID_KeybdInit+0xa4>)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	3301      	adds	r3, #1
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d9ef      	bls.n	8005b5c <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	8b1b      	ldrh	r3, [r3, #24]
 8005b80:	2b08      	cmp	r3, #8
 8005b82:	d902      	bls.n	8005b8a <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2208      	movs	r2, #8
 8005b88:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	4a0a      	ldr	r2, [pc, #40]	; (8005bb8 <USBH_HID_KeybdInit+0xa4>)
 8005b8e:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f103 0008 	add.w	r0, r3, #8
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005b9c:	2250      	movs	r2, #80	; 0x50
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	f7ff fefe 	bl	80059a0 <USBH_HID_FifoInit>

  return USBH_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000164 	.word	0x20000164
 8005bb4:	2000017c 	.word	0x2000017c
 8005bb8:	20000174 	.word	0x20000174

08005bbc <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f80d 	bl	8005be4 <USBH_HID_KeybdDecode>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 8005bd0:	4b03      	ldr	r3, [pc, #12]	; (8005be0 <USBH_HID_GetKeybdInfo+0x24>)
 8005bd2:	e000      	b.n	8005bd6 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 8005bd4:	2300      	movs	r3, #0
  }
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20000164 	.word	0x20000164

08005be4 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	8b1b      	ldrh	r3, [r3, #24]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e066      	b.n	8005cd0 <USBH_HID_KeybdDecode+0xec>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f103 0008 	add.w	r0, r3, #8
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	8b1b      	ldrh	r3, [r3, #24]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	4932      	ldr	r1, [pc, #200]	; (8005cd8 <USBH_HID_KeybdDecode+0xf4>)
 8005c10:	f7ff fee2 	bl	80059d8 <USBH_HID_FifoRead>
 8005c14:	4603      	mov	r3, r0
 8005c16:	461a      	mov	r2, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	8b1b      	ldrh	r3, [r3, #24]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d156      	bne.n	8005cce <USBH_HID_KeybdDecode+0xea>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 8005c20:	2100      	movs	r1, #0
 8005c22:	482e      	ldr	r0, [pc, #184]	; (8005cdc <USBH_HID_KeybdDecode+0xf8>)
 8005c24:	f000 f8b8 	bl	8005d98 <HID_ReadItem>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	4b2c      	ldr	r3, [pc, #176]	; (8005ce0 <USBH_HID_KeybdDecode+0xfc>)
 8005c2e:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 8005c30:	2100      	movs	r1, #0
 8005c32:	482c      	ldr	r0, [pc, #176]	; (8005ce4 <USBH_HID_KeybdDecode+0x100>)
 8005c34:	f000 f8b0 	bl	8005d98 <HID_ReadItem>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	4b28      	ldr	r3, [pc, #160]	; (8005ce0 <USBH_HID_KeybdDecode+0xfc>)
 8005c3e:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 8005c40:	2100      	movs	r1, #0
 8005c42:	4829      	ldr	r0, [pc, #164]	; (8005ce8 <USBH_HID_KeybdDecode+0x104>)
 8005c44:	f000 f8a8 	bl	8005d98 <HID_ReadItem>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	4b24      	ldr	r3, [pc, #144]	; (8005ce0 <USBH_HID_KeybdDecode+0xfc>)
 8005c4e:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 8005c50:	2100      	movs	r1, #0
 8005c52:	4826      	ldr	r0, [pc, #152]	; (8005cec <USBH_HID_KeybdDecode+0x108>)
 8005c54:	f000 f8a0 	bl	8005d98 <HID_ReadItem>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	4b20      	ldr	r3, [pc, #128]	; (8005ce0 <USBH_HID_KeybdDecode+0xfc>)
 8005c5e:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 8005c60:	2100      	movs	r1, #0
 8005c62:	4823      	ldr	r0, [pc, #140]	; (8005cf0 <USBH_HID_KeybdDecode+0x10c>)
 8005c64:	f000 f898 	bl	8005d98 <HID_ReadItem>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	4b1c      	ldr	r3, [pc, #112]	; (8005ce0 <USBH_HID_KeybdDecode+0xfc>)
 8005c6e:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 8005c70:	2100      	movs	r1, #0
 8005c72:	4820      	ldr	r0, [pc, #128]	; (8005cf4 <USBH_HID_KeybdDecode+0x110>)
 8005c74:	f000 f890 	bl	8005d98 <HID_ReadItem>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	4b18      	ldr	r3, [pc, #96]	; (8005ce0 <USBH_HID_KeybdDecode+0xfc>)
 8005c7e:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 8005c80:	2100      	movs	r1, #0
 8005c82:	481d      	ldr	r0, [pc, #116]	; (8005cf8 <USBH_HID_KeybdDecode+0x114>)
 8005c84:	f000 f888 	bl	8005d98 <HID_ReadItem>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	4b14      	ldr	r3, [pc, #80]	; (8005ce0 <USBH_HID_KeybdDecode+0xfc>)
 8005c8e:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 8005c90:	2100      	movs	r1, #0
 8005c92:	481a      	ldr	r0, [pc, #104]	; (8005cfc <USBH_HID_KeybdDecode+0x118>)
 8005c94:	f000 f880 	bl	8005d98 <HID_ReadItem>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	4b10      	ldr	r3, [pc, #64]	; (8005ce0 <USBH_HID_KeybdDecode+0xfc>)
 8005c9e:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	73fb      	strb	r3, [r7, #15]
 8005ca4:	e00e      	b.n	8005cc4 <USBH_HID_KeybdDecode+0xe0>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4815      	ldr	r0, [pc, #84]	; (8005d00 <USBH_HID_KeybdDecode+0x11c>)
 8005cac:	f000 f874 	bl	8005d98 <HID_ReadItem>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
 8005cb4:	b2d1      	uxtb	r1, r2
 8005cb6:	4a0a      	ldr	r2, [pc, #40]	; (8005ce0 <USBH_HID_KeybdDecode+0xfc>)
 8005cb8:	4413      	add	r3, r2
 8005cba:	460a      	mov	r2, r1
 8005cbc:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	73fb      	strb	r3, [r7, #15]
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
 8005cc6:	2b05      	cmp	r3, #5
 8005cc8:	d9ed      	bls.n	8005ca6 <USBH_HID_KeybdDecode+0xc2>
    }

    return USBH_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	e000      	b.n	8005cd0 <USBH_HID_KeybdDecode+0xec>
  }
  return   USBH_FAIL;
 8005cce:	2302      	movs	r3, #2
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	2000017c 	.word	0x2000017c
 8005cdc:	08007ff4 	.word	0x08007ff4
 8005ce0:	20000164 	.word	0x20000164
 8005ce4:	08008014 	.word	0x08008014
 8005ce8:	08008034 	.word	0x08008034
 8005cec:	08008054 	.word	0x08008054
 8005cf0:	08008074 	.word	0x08008074
 8005cf4:	08008094 	.word	0x08008094
 8005cf8:	080080b4 	.word	0x080080b4
 8005cfc:	080080d4 	.word	0x080080d4
 8005d00:	080080f4 	.word	0x080080f4

08005d04 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8005d16:	4b1d      	ldr	r3, [pc, #116]	; (8005d8c <USBH_HID_MouseInit+0x88>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 8005d1c:	4b1b      	ldr	r3, [pc, #108]	; (8005d8c <USBH_HID_MouseInit+0x88>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 8005d22:	4b1a      	ldr	r3, [pc, #104]	; (8005d8c <USBH_HID_MouseInit+0x88>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 8005d28:	4b18      	ldr	r3, [pc, #96]	; (8005d8c <USBH_HID_MouseInit+0x88>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 8005d2e:	4b17      	ldr	r3, [pc, #92]	; (8005d8c <USBH_HID_MouseInit+0x88>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	e00c      	b.n	8005d54 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 8005d3a:	4a15      	ldr	r2, [pc, #84]	; (8005d90 <USBH_HID_MouseInit+0x8c>)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2100      	movs	r1, #0
 8005d40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 8005d44:	4a13      	ldr	r2, [pc, #76]	; (8005d94 <USBH_HID_MouseInit+0x90>)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2100      	movs	r1, #0
 8005d4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	3301      	adds	r3, #1
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d9ef      	bls.n	8005d3a <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	8b1b      	ldrh	r3, [r3, #24]
 8005d5e:	2b08      	cmp	r3, #8
 8005d60:	d902      	bls.n	8005d68 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2208      	movs	r2, #8
 8005d66:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	4a0a      	ldr	r2, [pc, #40]	; (8005d94 <USBH_HID_MouseInit+0x90>)
 8005d6c:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f103 0008 	add.w	r0, r3, #8
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005d7a:	2250      	movs	r2, #80	; 0x50
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	f7ff fe0f 	bl	80059a0 <USBH_HID_FifoInit>

  return USBH_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	20000184 	.word	0x20000184
 8005d90:	2000018c 	.word	0x2000018c
 8005d94:	20000194 	.word	0x20000194

08005d98 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b089      	sub	sp, #36	; 0x24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	7a1b      	ldrb	r3, [r3, #8]
 8005db6:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	7a5b      	ldrb	r3, [r3, #9]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d01a      	beq.n	8005df6 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	7a5b      	ldrb	r3, [r3, #9]
 8005dc4:	78fa      	ldrb	r2, [r7, #3]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d301      	bcc.n	8005dce <HID_ReadItem+0x36>
    {
      return (0U);
 8005dca:	2300      	movs	r3, #0
 8005dcc:	e078      	b.n	8005ec0 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 8005dce:	78fb      	ldrb	r3, [r7, #3]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6852      	ldr	r2, [r2, #4]
 8005dd4:	fb02 f303 	mul.w	r3, r2, r3
 8005dd8:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 8005dda:	7cfb      	ldrb	r3, [r7, #19]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4413      	add	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	08db      	lsrs	r3, r3, #3
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	4413      	add	r3, r2
 8005dea:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	f003 0307 	and.w	r3, r3, #7
 8005df4:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 8005df6:	2300      	movs	r3, #0
 8005df8:	61bb      	str	r3, [r7, #24]
 8005dfa:	e00a      	b.n	8005e12 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	461a      	mov	r2, r3
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0a:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	61bb      	str	r3, [r7, #24]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d004      	beq.n	8005e28 <HID_ReadItem+0x90>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	08db      	lsrs	r3, r3, #3
 8005e24:	3301      	adds	r3, #1
 8005e26:	e002      	b.n	8005e2e <HID_ReadItem+0x96>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	08db      	lsrs	r3, r3, #3
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d8e3      	bhi.n	8005dfc <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 8005e34:	7cfb      	ldrb	r3, [r7, #19]
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	40da      	lsrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f04f 31ff 	mov.w	r1, #4294967295
 8005e42:	fa01 f303 	lsl.w	r3, r1, r3
 8005e46:	43db      	mvns	r3, r3
 8005e48:	4013      	ands	r3, r2
 8005e4a:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d304      	bcc.n	8005e60 <HID_ReadItem+0xc8>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	69fa      	ldr	r2, [r7, #28]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d901      	bls.n	8005e64 <HID_ReadItem+0xcc>
  {
    return (0U);
 8005e60:	2300      	movs	r3, #0
 8005e62:	e02d      	b.n	8005ec0 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	7a9b      	ldrb	r3, [r3, #10]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d01e      	beq.n	8005eaa <HID_ReadItem+0x112>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	3b01      	subs	r3, #1
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	fa22 f303 	lsr.w	r3, r2, r3
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d014      	beq.n	8005eaa <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8a:	425b      	negs	r3, r3
 8005e8c:	69fa      	ldr	r2, [r7, #28]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d101      	bne.n	8005e9e <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	e010      	b.n	8005ec0 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	fb02 f303 	mul.w	r3, r2, r3
 8005ea8:	e00a      	b.n	8005ec0 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d101      	bne.n	8005eb6 <HID_ReadItem+0x11e>
    {
      return (val);
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	e004      	b.n	8005ec0 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3724      	adds	r7, #36	; 0x24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	e029      	b.n	8005f38 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	79fa      	ldrb	r2, [r7, #7]
 8005ee8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 f81f 	bl	8005f40 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f001 fd0d 	bl	8007950 <USBH_LL_Init>

  return USBH_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	e009      	b.n	8005f66 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	33e0      	adds	r3, #224	; 0xe0
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3301      	adds	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b0f      	cmp	r3, #15
 8005f6a:	d9f2      	bls.n	8005f52 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	e009      	b.n	8005f86 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3301      	adds	r3, #1
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f8c:	d3f1      	bcc.n	8005f72 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2240      	movs	r2, #64	; 0x40
 8005fb2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d016      	beq.n	800602a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10e      	bne.n	8006024 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800600c:	1c59      	adds	r1, r3, #1
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	33de      	adds	r3, #222	; 0xde
 8006018:	6839      	ldr	r1, [r7, #0]
 800601a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	73fb      	strb	r3, [r7, #15]
 8006022:	e004      	b.n	800602e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006024:	2302      	movs	r3, #2
 8006026:	73fb      	strb	r3, [r7, #15]
 8006028:	e001      	b.n	800602e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800602a:	2302      	movs	r3, #2
 800602c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800602e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	460b      	mov	r3, r1
 8006046:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006048:	2300      	movs	r3, #0
 800604a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006052:	78fa      	ldrb	r2, [r7, #3]
 8006054:	429a      	cmp	r2, r3
 8006056:	d204      	bcs.n	8006062 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	78fa      	ldrb	r2, [r7, #3]
 800605c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006060:	e001      	b.n	8006066 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006062:	2302      	movs	r3, #2
 8006064:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006066:	7bfb      	ldrb	r3, [r7, #15]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	4608      	mov	r0, r1
 800607e:	4611      	mov	r1, r2
 8006080:	461a      	mov	r2, r3
 8006082:	4603      	mov	r3, r0
 8006084:	70fb      	strb	r3, [r7, #3]
 8006086:	460b      	mov	r3, r1
 8006088:	70bb      	strb	r3, [r7, #2]
 800608a:	4613      	mov	r3, r2
 800608c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006092:	2300      	movs	r3, #0
 8006094:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800609c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800609e:	e025      	b.n	80060ec <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
 80060a2:	221a      	movs	r2, #26
 80060a4:	fb02 f303 	mul.w	r3, r2, r3
 80060a8:	3308      	adds	r3, #8
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4413      	add	r3, r2
 80060ae:	3302      	adds	r3, #2
 80060b0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	795b      	ldrb	r3, [r3, #5]
 80060b6:	78fa      	ldrb	r2, [r7, #3]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d002      	beq.n	80060c2 <USBH_FindInterface+0x4e>
 80060bc:	78fb      	ldrb	r3, [r7, #3]
 80060be:	2bff      	cmp	r3, #255	; 0xff
 80060c0:	d111      	bne.n	80060e6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80060c6:	78ba      	ldrb	r2, [r7, #2]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d002      	beq.n	80060d2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80060cc:	78bb      	ldrb	r3, [r7, #2]
 80060ce:	2bff      	cmp	r3, #255	; 0xff
 80060d0:	d109      	bne.n	80060e6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80060d6:	787a      	ldrb	r2, [r7, #1]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d002      	beq.n	80060e2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80060dc:	787b      	ldrb	r3, [r7, #1]
 80060de:	2bff      	cmp	r3, #255	; 0xff
 80060e0:	d101      	bne.n	80060e6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80060e2:	7dfb      	ldrb	r3, [r7, #23]
 80060e4:	e006      	b.n	80060f4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
 80060e8:	3301      	adds	r3, #1
 80060ea:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80060ec:	7dfb      	ldrb	r3, [r7, #23]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d9d6      	bls.n	80060a0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80060f2:	23ff      	movs	r3, #255	; 0xff
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	371c      	adds	r7, #28
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f001 fc5d 	bl	80079c8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800610e:	2101      	movs	r1, #1
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 fd76 	bl	8007c02 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b088      	sub	sp, #32
 8006124:	af04      	add	r7, sp, #16
 8006126:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006128:	2302      	movs	r3, #2
 800612a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b01      	cmp	r3, #1
 800613a:	d102      	bne.n	8006142 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2203      	movs	r2, #3
 8006140:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b0b      	cmp	r3, #11
 800614a:	f200 81be 	bhi.w	80064ca <USBH_Process+0x3aa>
 800614e:	a201      	add	r2, pc, #4	; (adr r2, 8006154 <USBH_Process+0x34>)
 8006150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006154:	08006185 	.word	0x08006185
 8006158:	080061b7 	.word	0x080061b7
 800615c:	0800621f 	.word	0x0800621f
 8006160:	08006465 	.word	0x08006465
 8006164:	080064cb 	.word	0x080064cb
 8006168:	080062c3 	.word	0x080062c3
 800616c:	0800640b 	.word	0x0800640b
 8006170:	080062f9 	.word	0x080062f9
 8006174:	08006319 	.word	0x08006319
 8006178:	08006339 	.word	0x08006339
 800617c:	0800637d 	.word	0x0800637d
 8006180:	0800644d 	.word	0x0800644d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 819e 	beq.w	80064ce <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006198:	20c8      	movs	r0, #200	; 0xc8
 800619a:	f001 fd79 	bl	8007c90 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f001 fc6f 	bl	8007a82 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80061b4:	e18b      	b.n	80064ce <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d107      	bne.n	80061d0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80061ce:	e18d      	b.n	80064ec <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80061d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061da:	d914      	bls.n	8006206 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80061e2:	3301      	adds	r3, #1
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d903      	bls.n	80061fe <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	220d      	movs	r2, #13
 80061fa:	701a      	strb	r2, [r3, #0]
      break;
 80061fc:	e176      	b.n	80064ec <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	701a      	strb	r2, [r3, #0]
      break;
 8006204:	e172      	b.n	80064ec <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800620c:	f103 020a 	add.w	r2, r3, #10
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006216:	200a      	movs	r0, #10
 8006218:	f001 fd3a 	bl	8007c90 <USBH_Delay>
      break;
 800621c:	e166      	b.n	80064ec <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006224:	2b00      	cmp	r3, #0
 8006226:	d005      	beq.n	8006234 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800622e:	2104      	movs	r1, #4
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006234:	2064      	movs	r0, #100	; 0x64
 8006236:	f001 fd2b 	bl	8007c90 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f001 fbfa 	bl	8007a34 <USBH_LL_GetSpeed>
 8006240:	4603      	mov	r3, r0
 8006242:	461a      	mov	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2205      	movs	r2, #5
 800624e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006250:	2100      	movs	r1, #0
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f001 fa05 	bl	8007662 <USBH_AllocPipe>
 8006258:	4603      	mov	r3, r0
 800625a:	461a      	mov	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006260:	2180      	movs	r1, #128	; 0x80
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f001 f9fd 	bl	8007662 <USBH_AllocPipe>
 8006268:	4603      	mov	r3, r0
 800626a:	461a      	mov	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	7919      	ldrb	r1, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006284:	b292      	uxth	r2, r2
 8006286:	9202      	str	r2, [sp, #8]
 8006288:	2200      	movs	r2, #0
 800628a:	9201      	str	r2, [sp, #4]
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	4603      	mov	r3, r0
 8006290:	2280      	movs	r2, #128	; 0x80
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f001 f9b6 	bl	8007604 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	7959      	ldrb	r1, [r3, #5]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80062ac:	b292      	uxth	r2, r2
 80062ae:	9202      	str	r2, [sp, #8]
 80062b0:	2200      	movs	r2, #0
 80062b2:	9201      	str	r2, [sp, #4]
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	4603      	mov	r3, r0
 80062b8:	2200      	movs	r2, #0
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f001 f9a2 	bl	8007604 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80062c0:	e114      	b.n	80064ec <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f918 	bl	80064f8 <USBH_HandleEnum>
 80062c8:	4603      	mov	r3, r0
 80062ca:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80062cc:	7bbb      	ldrb	r3, [r7, #14]
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f040 80fe 	bne.w	80064d2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d103      	bne.n	80062f0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2208      	movs	r2, #8
 80062ec:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80062ee:	e0f0      	b.n	80064d2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2207      	movs	r2, #7
 80062f4:	701a      	strb	r2, [r3, #0]
      break;
 80062f6:	e0ec      	b.n	80064d2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 80e9 	beq.w	80064d6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800630a:	2101      	movs	r1, #1
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2208      	movs	r2, #8
 8006314:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006316:	e0de      	b.n	80064d6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800631e:	b29b      	uxth	r3, r3
 8006320:	4619      	mov	r1, r3
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fc2c 	bl	8006b80 <USBH_SetCfg>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	f040 80d5 	bne.w	80064da <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2209      	movs	r2, #9
 8006334:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006336:	e0d0      	b.n	80064da <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800633e:	f003 0320 	and.w	r3, r3, #32
 8006342:	2b00      	cmp	r3, #0
 8006344:	d016      	beq.n	8006374 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006346:	2101      	movs	r1, #1
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fc3c 	bl	8006bc6 <USBH_SetFeature>
 800634e:	4603      	mov	r3, r0
 8006350:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006352:	7bbb      	ldrb	r3, [r7, #14]
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d103      	bne.n	8006362 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	220a      	movs	r2, #10
 800635e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006360:	e0bd      	b.n	80064de <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006362:	7bbb      	ldrb	r3, [r7, #14]
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b03      	cmp	r3, #3
 8006368:	f040 80b9 	bne.w	80064de <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	220a      	movs	r2, #10
 8006370:	701a      	strb	r2, [r3, #0]
      break;
 8006372:	e0b4      	b.n	80064de <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	220a      	movs	r2, #10
 8006378:	701a      	strb	r2, [r3, #0]
      break;
 800637a:	e0b0      	b.n	80064de <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 80ad 	beq.w	80064e2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006390:	2300      	movs	r3, #0
 8006392:	73fb      	strb	r3, [r7, #15]
 8006394:	e016      	b.n	80063c4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006396:	7bfa      	ldrb	r2, [r7, #15]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	32de      	adds	r2, #222	; 0xde
 800639c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a0:	791a      	ldrb	r2, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d108      	bne.n	80063be <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80063ac:	7bfa      	ldrb	r2, [r7, #15]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	32de      	adds	r2, #222	; 0xde
 80063b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80063bc:	e005      	b.n	80063ca <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80063be:	7bfb      	ldrb	r3, [r7, #15]
 80063c0:	3301      	adds	r3, #1
 80063c2:	73fb      	strb	r3, [r7, #15]
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0e5      	beq.n	8006396 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d016      	beq.n	8006402 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	4798      	blx	r3
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d109      	bne.n	80063fa <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2206      	movs	r2, #6
 80063ea:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063f2:	2103      	movs	r1, #3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80063f8:	e073      	b.n	80064e2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	220d      	movs	r2, #13
 80063fe:	701a      	strb	r2, [r3, #0]
      break;
 8006400:	e06f      	b.n	80064e2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	220d      	movs	r2, #13
 8006406:	701a      	strb	r2, [r3, #0]
      break;
 8006408:	e06b      	b.n	80064e2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006410:	2b00      	cmp	r3, #0
 8006412:	d017      	beq.n	8006444 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	4798      	blx	r3
 8006420:	4603      	mov	r3, r0
 8006422:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006424:	7bbb      	ldrb	r3, [r7, #14]
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d103      	bne.n	8006434 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	220b      	movs	r2, #11
 8006430:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006432:	e058      	b.n	80064e6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006434:	7bbb      	ldrb	r3, [r7, #14]
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d154      	bne.n	80064e6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	220d      	movs	r2, #13
 8006440:	701a      	strb	r2, [r3, #0]
      break;
 8006442:	e050      	b.n	80064e6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	220d      	movs	r2, #13
 8006448:	701a      	strb	r2, [r3, #0]
      break;
 800644a:	e04c      	b.n	80064e6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006452:	2b00      	cmp	r3, #0
 8006454:	d049      	beq.n	80064ea <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	4798      	blx	r3
      }
      break;
 8006462:	e042      	b.n	80064ea <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff fd67 	bl	8005f40 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006478:	2b00      	cmp	r3, #0
 800647a:	d009      	beq.n	8006490 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006496:	2b00      	cmp	r3, #0
 8006498:	d005      	beq.n	80064a6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80064a0:	2105      	movs	r1, #5
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d107      	bne.n	80064c2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff fe20 	bl	8006100 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80064c0:	e014      	b.n	80064ec <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f001 fa80 	bl	80079c8 <USBH_LL_Start>
      break;
 80064c8:	e010      	b.n	80064ec <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80064ca:	bf00      	nop
 80064cc:	e00e      	b.n	80064ec <USBH_Process+0x3cc>
      break;
 80064ce:	bf00      	nop
 80064d0:	e00c      	b.n	80064ec <USBH_Process+0x3cc>
      break;
 80064d2:	bf00      	nop
 80064d4:	e00a      	b.n	80064ec <USBH_Process+0x3cc>
    break;
 80064d6:	bf00      	nop
 80064d8:	e008      	b.n	80064ec <USBH_Process+0x3cc>
      break;
 80064da:	bf00      	nop
 80064dc:	e006      	b.n	80064ec <USBH_Process+0x3cc>
      break;
 80064de:	bf00      	nop
 80064e0:	e004      	b.n	80064ec <USBH_Process+0x3cc>
      break;
 80064e2:	bf00      	nop
 80064e4:	e002      	b.n	80064ec <USBH_Process+0x3cc>
      break;
 80064e6:	bf00      	nop
 80064e8:	e000      	b.n	80064ec <USBH_Process+0x3cc>
      break;
 80064ea:	bf00      	nop
  }
  return USBH_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop

080064f8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af04      	add	r7, sp, #16
 80064fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006500:	2301      	movs	r3, #1
 8006502:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006504:	2301      	movs	r3, #1
 8006506:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	785b      	ldrb	r3, [r3, #1]
 800650c:	2b07      	cmp	r3, #7
 800650e:	f200 81c1 	bhi.w	8006894 <USBH_HandleEnum+0x39c>
 8006512:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <USBH_HandleEnum+0x20>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	08006539 	.word	0x08006539
 800651c:	080065f7 	.word	0x080065f7
 8006520:	08006661 	.word	0x08006661
 8006524:	080066ef 	.word	0x080066ef
 8006528:	08006759 	.word	0x08006759
 800652c:	080067c9 	.word	0x080067c9
 8006530:	0800680f 	.word	0x0800680f
 8006534:	08006855 	.word	0x08006855
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006538:	2108      	movs	r1, #8
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fa50 	bl	80069e0 <USBH_Get_DevDesc>
 8006540:	4603      	mov	r3, r0
 8006542:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006544:	7bbb      	ldrb	r3, [r7, #14]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d130      	bne.n	80065ac <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	7919      	ldrb	r1, [r3, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800656e:	b292      	uxth	r2, r2
 8006570:	9202      	str	r2, [sp, #8]
 8006572:	2200      	movs	r2, #0
 8006574:	9201      	str	r2, [sp, #4]
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	4603      	mov	r3, r0
 800657a:	2280      	movs	r2, #128	; 0x80
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 f841 	bl	8007604 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	7959      	ldrb	r1, [r3, #5]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006596:	b292      	uxth	r2, r2
 8006598:	9202      	str	r2, [sp, #8]
 800659a:	2200      	movs	r2, #0
 800659c:	9201      	str	r2, [sp, #4]
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	4603      	mov	r3, r0
 80065a2:	2200      	movs	r2, #0
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f001 f82d 	bl	8007604 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80065aa:	e175      	b.n	8006898 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065ac:	7bbb      	ldrb	r3, [r7, #14]
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	f040 8172 	bne.w	8006898 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065ba:	3301      	adds	r3, #1
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065ca:	2b03      	cmp	r3, #3
 80065cc:	d903      	bls.n	80065d6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	220d      	movs	r2, #13
 80065d2:	701a      	strb	r2, [r3, #0]
      break;
 80065d4:	e160      	b.n	8006898 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	795b      	ldrb	r3, [r3, #5]
 80065da:	4619      	mov	r1, r3
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f001 f861 	bl	80076a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	791b      	ldrb	r3, [r3, #4]
 80065e6:	4619      	mov	r1, r3
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f001 f85b 	bl	80076a4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	701a      	strb	r2, [r3, #0]
      break;
 80065f4:	e150      	b.n	8006898 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80065f6:	2112      	movs	r1, #18
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f9f1 	bl	80069e0 <USBH_Get_DevDesc>
 80065fe:	4603      	mov	r3, r0
 8006600:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006602:	7bbb      	ldrb	r3, [r7, #14]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d103      	bne.n	8006610 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800660e:	e145      	b.n	800689c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006610:	7bbb      	ldrb	r3, [r7, #14]
 8006612:	2b03      	cmp	r3, #3
 8006614:	f040 8142 	bne.w	800689c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800661e:	3301      	adds	r3, #1
 8006620:	b2da      	uxtb	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800662e:	2b03      	cmp	r3, #3
 8006630:	d903      	bls.n	800663a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	220d      	movs	r2, #13
 8006636:	701a      	strb	r2, [r3, #0]
      break;
 8006638:	e130      	b.n	800689c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	795b      	ldrb	r3, [r3, #5]
 800663e:	4619      	mov	r1, r3
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f001 f82f 	bl	80076a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	791b      	ldrb	r3, [r3, #4]
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f001 f829 	bl	80076a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	701a      	strb	r2, [r3, #0]
      break;
 800665e:	e11d      	b.n	800689c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006660:	2101      	movs	r1, #1
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fa68 	bl	8006b38 <USBH_SetAddress>
 8006668:	4603      	mov	r3, r0
 800666a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800666c:	7bbb      	ldrb	r3, [r7, #14]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d132      	bne.n	80066d8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006672:	2002      	movs	r0, #2
 8006674:	f001 fb0c 	bl	8007c90 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2203      	movs	r2, #3
 8006684:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	7919      	ldrb	r1, [r3, #4]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800669a:	b292      	uxth	r2, r2
 800669c:	9202      	str	r2, [sp, #8]
 800669e:	2200      	movs	r2, #0
 80066a0:	9201      	str	r2, [sp, #4]
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	4603      	mov	r3, r0
 80066a6:	2280      	movs	r2, #128	; 0x80
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 ffab 	bl	8007604 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	7959      	ldrb	r1, [r3, #5]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80066c2:	b292      	uxth	r2, r2
 80066c4:	9202      	str	r2, [sp, #8]
 80066c6:	2200      	movs	r2, #0
 80066c8:	9201      	str	r2, [sp, #4]
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	4603      	mov	r3, r0
 80066ce:	2200      	movs	r2, #0
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 ff97 	bl	8007604 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80066d6:	e0e3      	b.n	80068a0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066d8:	7bbb      	ldrb	r3, [r7, #14]
 80066da:	2b03      	cmp	r3, #3
 80066dc:	f040 80e0 	bne.w	80068a0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	220d      	movs	r2, #13
 80066e4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	705a      	strb	r2, [r3, #1]
      break;
 80066ec:	e0d8      	b.n	80068a0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80066ee:	2109      	movs	r1, #9
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f99d 	bl	8006a30 <USBH_Get_CfgDesc>
 80066f6:	4603      	mov	r3, r0
 80066f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d103      	bne.n	8006708 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2204      	movs	r2, #4
 8006704:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006706:	e0cd      	b.n	80068a4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006708:	7bbb      	ldrb	r3, [r7, #14]
 800670a:	2b03      	cmp	r3, #3
 800670c:	f040 80ca 	bne.w	80068a4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006716:	3301      	adds	r3, #1
 8006718:	b2da      	uxtb	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006726:	2b03      	cmp	r3, #3
 8006728:	d903      	bls.n	8006732 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	220d      	movs	r2, #13
 800672e:	701a      	strb	r2, [r3, #0]
      break;
 8006730:	e0b8      	b.n	80068a4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	795b      	ldrb	r3, [r3, #5]
 8006736:	4619      	mov	r1, r3
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 ffb3 	bl	80076a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	791b      	ldrb	r3, [r3, #4]
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 ffad 	bl	80076a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	701a      	strb	r2, [r3, #0]
      break;
 8006756:	e0a5      	b.n	80068a4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f965 	bl	8006a30 <USBH_Get_CfgDesc>
 8006766:	4603      	mov	r3, r0
 8006768:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800676a:	7bbb      	ldrb	r3, [r7, #14]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d103      	bne.n	8006778 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2205      	movs	r2, #5
 8006774:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006776:	e097      	b.n	80068a8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006778:	7bbb      	ldrb	r3, [r7, #14]
 800677a:	2b03      	cmp	r3, #3
 800677c:	f040 8094 	bne.w	80068a8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006786:	3301      	adds	r3, #1
 8006788:	b2da      	uxtb	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006796:	2b03      	cmp	r3, #3
 8006798:	d903      	bls.n	80067a2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	220d      	movs	r2, #13
 800679e:	701a      	strb	r2, [r3, #0]
      break;
 80067a0:	e082      	b.n	80068a8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	795b      	ldrb	r3, [r3, #5]
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 ff7b 	bl	80076a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	791b      	ldrb	r3, [r3, #4]
 80067b2:	4619      	mov	r1, r3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 ff75 	bl	80076a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	701a      	strb	r2, [r3, #0]
      break;
 80067c6:	e06f      	b.n	80068a8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d019      	beq.n	8006806 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80067de:	23ff      	movs	r3, #255	; 0xff
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f949 	bl	8006a78 <USBH_Get_StringDesc>
 80067e6:	4603      	mov	r3, r0
 80067e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80067ea:	7bbb      	ldrb	r3, [r7, #14]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d103      	bne.n	80067f8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2206      	movs	r2, #6
 80067f4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80067f6:	e059      	b.n	80068ac <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
 80067fa:	2b03      	cmp	r3, #3
 80067fc:	d156      	bne.n	80068ac <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2206      	movs	r2, #6
 8006802:	705a      	strb	r2, [r3, #1]
      break;
 8006804:	e052      	b.n	80068ac <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2206      	movs	r2, #6
 800680a:	705a      	strb	r2, [r3, #1]
      break;
 800680c:	e04e      	b.n	80068ac <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006814:	2b00      	cmp	r3, #0
 8006816:	d019      	beq.n	800684c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006824:	23ff      	movs	r3, #255	; 0xff
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f926 	bl	8006a78 <USBH_Get_StringDesc>
 800682c:	4603      	mov	r3, r0
 800682e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006830:	7bbb      	ldrb	r3, [r7, #14]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d103      	bne.n	800683e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2207      	movs	r2, #7
 800683a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800683c:	e038      	b.n	80068b0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800683e:	7bbb      	ldrb	r3, [r7, #14]
 8006840:	2b03      	cmp	r3, #3
 8006842:	d135      	bne.n	80068b0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2207      	movs	r2, #7
 8006848:	705a      	strb	r2, [r3, #1]
      break;
 800684a:	e031      	b.n	80068b0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2207      	movs	r2, #7
 8006850:	705a      	strb	r2, [r3, #1]
      break;
 8006852:	e02d      	b.n	80068b0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800685a:	2b00      	cmp	r3, #0
 800685c:	d017      	beq.n	800688e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800686a:	23ff      	movs	r3, #255	; 0xff
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f903 	bl	8006a78 <USBH_Get_StringDesc>
 8006872:	4603      	mov	r3, r0
 8006874:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006876:	7bbb      	ldrb	r3, [r7, #14]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d102      	bne.n	8006882 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006880:	e018      	b.n	80068b4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006882:	7bbb      	ldrb	r3, [r7, #14]
 8006884:	2b03      	cmp	r3, #3
 8006886:	d115      	bne.n	80068b4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	73fb      	strb	r3, [r7, #15]
      break;
 800688c:	e012      	b.n	80068b4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	73fb      	strb	r3, [r7, #15]
      break;
 8006892:	e00f      	b.n	80068b4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006894:	bf00      	nop
 8006896:	e00e      	b.n	80068b6 <USBH_HandleEnum+0x3be>
      break;
 8006898:	bf00      	nop
 800689a:	e00c      	b.n	80068b6 <USBH_HandleEnum+0x3be>
      break;
 800689c:	bf00      	nop
 800689e:	e00a      	b.n	80068b6 <USBH_HandleEnum+0x3be>
      break;
 80068a0:	bf00      	nop
 80068a2:	e008      	b.n	80068b6 <USBH_HandleEnum+0x3be>
      break;
 80068a4:	bf00      	nop
 80068a6:	e006      	b.n	80068b6 <USBH_HandleEnum+0x3be>
      break;
 80068a8:	bf00      	nop
 80068aa:	e004      	b.n	80068b6 <USBH_HandleEnum+0x3be>
      break;
 80068ac:	bf00      	nop
 80068ae:	e002      	b.n	80068b6 <USBH_HandleEnum+0x3be>
      break;
 80068b0:	bf00      	nop
 80068b2:	e000      	b.n	80068b6 <USBH_HandleEnum+0x3be>
      break;
 80068b4:	bf00      	nop
  }
  return Status;
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80068d2:	bf00      	nop
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b082      	sub	sp, #8
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80068ec:	1c5a      	adds	r2, r3, #1
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f804 	bl	8006902 <USBH_HandleSof>
}
 80068fa:	bf00      	nop
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b082      	sub	sp, #8
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b0b      	cmp	r3, #11
 8006912:	d10a      	bne.n	800692a <USBH_HandleSof+0x28>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	4798      	blx	r3
  }
}
 800692a:	bf00      	nop
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006942:	bf00      	nop
}
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800695e:	bf00      	nop
}
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f001 f820 	bl	80079fe <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	791b      	ldrb	r3, [r3, #4]
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fe6d 	bl	80076a4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	795b      	ldrb	r3, [r3, #5]
 80069ce:	4619      	mov	r1, r3
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fe67 	bl	80076a4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af02      	add	r7, sp, #8
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80069f2:	78fb      	ldrb	r3, [r7, #3]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	4613      	mov	r3, r2
 80069fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069fe:	2100      	movs	r1, #0
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f864 	bl	8006ace <USBH_GetDescriptor>
 8006a06:	4603      	mov	r3, r0
 8006a08:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10a      	bne.n	8006a26 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a1c:	78fa      	ldrb	r2, [r7, #3]
 8006a1e:	b292      	uxth	r2, r2
 8006a20:	4619      	mov	r1, r3
 8006a22:	f000 f918 	bl	8006c56 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	331c      	adds	r3, #28
 8006a40:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006a42:	887b      	ldrh	r3, [r7, #2]
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f83d 	bl	8006ace <USBH_GetDescriptor>
 8006a54:	4603      	mov	r3, r0
 8006a56:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d107      	bne.n	8006a6e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006a5e:	887b      	ldrh	r3, [r7, #2]
 8006a60:	461a      	mov	r2, r3
 8006a62:	68b9      	ldr	r1, [r7, #8]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f987 	bl	8006d78 <USBH_ParseCfgDesc>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	607a      	str	r2, [r7, #4]
 8006a82:	461a      	mov	r2, r3
 8006a84:	460b      	mov	r3, r1
 8006a86:	72fb      	strb	r3, [r7, #11]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006a8c:	7afb      	ldrb	r3, [r7, #11]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006a94:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006a9c:	893b      	ldrh	r3, [r7, #8]
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 f812 	bl	8006ace <USBH_GetDescriptor>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006aae:	7dfb      	ldrb	r3, [r7, #23]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d107      	bne.n	8006ac4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006aba:	893a      	ldrh	r2, [r7, #8]
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fb24 	bl	800710c <USBH_ParseStringDesc>
  }

  return status;
 8006ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3718      	adds	r7, #24
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	60f8      	str	r0, [r7, #12]
 8006ad6:	607b      	str	r3, [r7, #4]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	72fb      	strb	r3, [r7, #11]
 8006adc:	4613      	mov	r3, r2
 8006ade:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	789b      	ldrb	r3, [r3, #2]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d11c      	bne.n	8006b22 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006ae8:	7afb      	ldrb	r3, [r7, #11]
 8006aea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2206      	movs	r2, #6
 8006af8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	893a      	ldrh	r2, [r7, #8]
 8006afe:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006b00:	893b      	ldrh	r3, [r7, #8]
 8006b02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006b06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b0a:	d104      	bne.n	8006b16 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f240 4209 	movw	r2, #1033	; 0x409
 8006b12:	829a      	strh	r2, [r3, #20]
 8006b14:	e002      	b.n	8006b1c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8b3a      	ldrh	r2, [r7, #24]
 8006b20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006b22:	8b3b      	ldrh	r3, [r7, #24]
 8006b24:	461a      	mov	r2, r3
 8006b26:	6879      	ldr	r1, [r7, #4]
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 fb3d 	bl	80071a8 <USBH_CtlReq>
 8006b2e:	4603      	mov	r3, r0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	789b      	ldrb	r3, [r3, #2]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d10f      	bne.n	8006b6c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2205      	movs	r2, #5
 8006b56:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	2100      	movs	r1, #0
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fb19 	bl	80071a8 <USBH_CtlReq>
 8006b76:	4603      	mov	r3, r0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	789b      	ldrb	r3, [r3, #2]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d10e      	bne.n	8006bb2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2209      	movs	r2, #9
 8006b9e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	887a      	ldrh	r2, [r7, #2]
 8006ba4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 faf6 	bl	80071a8 <USBH_CtlReq>
 8006bbc:	4603      	mov	r3, r0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b082      	sub	sp, #8
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	789b      	ldrb	r3, [r3, #2]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d10f      	bne.n	8006bfa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2203      	movs	r2, #3
 8006be4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006be6:	78fb      	ldrb	r3, [r7, #3]
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fad2 	bl	80071a8 <USBH_CtlReq>
 8006c04:	4603      	mov	r3, r0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b082      	sub	sp, #8
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	460b      	mov	r3, r1
 8006c18:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	789b      	ldrb	r3, [r3, #2]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d10f      	bne.n	8006c42 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2202      	movs	r2, #2
 8006c26:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006c34:	78fb      	ldrb	r3, [r7, #3]
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006c42:	2200      	movs	r2, #0
 8006c44:	2100      	movs	r1, #0
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 faae 	bl	80071a8 <USBH_CtlReq>
 8006c4c:	4603      	mov	r3, r0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b085      	sub	sp, #20
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	60f8      	str	r0, [r7, #12]
 8006c5e:	60b9      	str	r1, [r7, #8]
 8006c60:	4613      	mov	r3, r2
 8006c62:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	781a      	ldrb	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	785a      	ldrb	r2, [r3, #1]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	3302      	adds	r3, #2
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	3303      	adds	r3, #3
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	791a      	ldrb	r2, [r3, #4]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	795a      	ldrb	r2, [r3, #5]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	799a      	ldrb	r2, [r3, #6]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	79da      	ldrb	r2, [r3, #7]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	79db      	ldrb	r3, [r3, #7]
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	dc11      	bgt.n	8006cdc <USBH_ParseDevDesc+0x86>
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	db16      	blt.n	8006cea <USBH_ParseDevDesc+0x94>
 8006cbc:	3b08      	subs	r3, #8
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8006cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	bf14      	ite	ne
 8006cd0:	2301      	movne	r3, #1
 8006cd2:	2300      	moveq	r3, #0
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d102      	bne.n	8006ce0 <USBH_ParseDevDesc+0x8a>
 8006cda:	e006      	b.n	8006cea <USBH_ParseDevDesc+0x94>
 8006cdc:	2b40      	cmp	r3, #64	; 0x40
 8006cde:	d104      	bne.n	8006cea <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	79da      	ldrb	r2, [r3, #7]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	71da      	strb	r2, [r3, #7]
      break;
 8006ce8:	e003      	b.n	8006cf2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2240      	movs	r2, #64	; 0x40
 8006cee:	71da      	strb	r2, [r3, #7]
      break;
 8006cf0:	bf00      	nop
  }

  if (length > 8U)
 8006cf2:	88fb      	ldrh	r3, [r7, #6]
 8006cf4:	2b08      	cmp	r3, #8
 8006cf6:	d939      	bls.n	8006d6c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	3308      	adds	r3, #8
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	3309      	adds	r3, #9
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	021b      	lsls	r3, r3, #8
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	330a      	adds	r3, #10
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	330b      	adds	r3, #11
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	021b      	lsls	r3, r3, #8
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	330c      	adds	r3, #12
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	330d      	adds	r3, #13
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	021b      	lsls	r3, r3, #8
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	4313      	orrs	r3, r2
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	7b9a      	ldrb	r2, [r3, #14]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	7bda      	ldrb	r2, [r3, #15]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	7c1a      	ldrb	r2, [r3, #16]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	7c5a      	ldrb	r2, [r3, #17]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	745a      	strb	r2, [r3, #17]
  }
}
 8006d6c:	bf00      	nop
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b08c      	sub	sp, #48	; 0x30
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	4613      	mov	r3, r2
 8006d84:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006d8c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	781a      	ldrb	r2, [r3, #0]
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	785a      	ldrb	r2, [r3, #1]
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	3302      	adds	r3, #2
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	3303      	adds	r3, #3
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	021b      	lsls	r3, r3, #8
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dd4:	bf28      	it	cs
 8006dd6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	791a      	ldrb	r2, [r3, #4]
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	795a      	ldrb	r2, [r3, #5]
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	799a      	ldrb	r2, [r3, #6]
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	79da      	ldrb	r2, [r3, #7]
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	7a1a      	ldrb	r2, [r3, #8]
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006e08:	6a3b      	ldr	r3, [r7, #32]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2b09      	cmp	r3, #9
 8006e0e:	d002      	beq.n	8006e16 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	2209      	movs	r2, #9
 8006e14:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006e16:	88fb      	ldrh	r3, [r7, #6]
 8006e18:	2b09      	cmp	r3, #9
 8006e1a:	f240 809d 	bls.w	8006f58 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006e1e:	2309      	movs	r3, #9
 8006e20:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006e22:	2300      	movs	r3, #0
 8006e24:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006e26:	e081      	b.n	8006f2c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006e28:	f107 0316 	add.w	r3, r7, #22
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e30:	f000 f99f 	bl	8007172 <USBH_GetNextDesc>
 8006e34:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	785b      	ldrb	r3, [r3, #1]
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	d176      	bne.n	8006f2c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	2b09      	cmp	r3, #9
 8006e44:	d002      	beq.n	8006e4c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e48:	2209      	movs	r2, #9
 8006e4a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e50:	221a      	movs	r2, #26
 8006e52:	fb02 f303 	mul.w	r3, r2, r3
 8006e56:	3308      	adds	r3, #8
 8006e58:	6a3a      	ldr	r2, [r7, #32]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	3302      	adds	r3, #2
 8006e5e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006e60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e62:	69f8      	ldr	r0, [r7, #28]
 8006e64:	f000 f87e 	bl	8006f64 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006e72:	e043      	b.n	8006efc <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006e74:	f107 0316 	add.w	r3, r7, #22
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e7c:	f000 f979 	bl	8007172 <USBH_GetNextDesc>
 8006e80:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e84:	785b      	ldrb	r3, [r3, #1]
 8006e86:	2b05      	cmp	r3, #5
 8006e88:	d138      	bne.n	8006efc <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	795b      	ldrb	r3, [r3, #5]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d10f      	bne.n	8006eb2 <USBH_ParseCfgDesc+0x13a>
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	799b      	ldrb	r3, [r3, #6]
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d10b      	bne.n	8006eb2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	79db      	ldrb	r3, [r3, #7]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10f      	bne.n	8006ec2 <USBH_ParseCfgDesc+0x14a>
 8006ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	2b09      	cmp	r3, #9
 8006ea8:	d00b      	beq.n	8006ec2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eac:	2209      	movs	r2, #9
 8006eae:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006eb0:	e007      	b.n	8006ec2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b07      	cmp	r3, #7
 8006eb8:	d004      	beq.n	8006ec4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebc:	2207      	movs	r2, #7
 8006ebe:	701a      	strb	r2, [r3, #0]
 8006ec0:	e000      	b.n	8006ec4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006ec2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ec8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006ecc:	3201      	adds	r2, #1
 8006ece:	00d2      	lsls	r2, r2, #3
 8006ed0:	211a      	movs	r1, #26
 8006ed2:	fb01 f303 	mul.w	r3, r1, r3
 8006ed6:	4413      	add	r3, r2
 8006ed8:	3308      	adds	r3, #8
 8006eda:	6a3a      	ldr	r2, [r7, #32]
 8006edc:	4413      	add	r3, r2
 8006ede:	3304      	adds	r3, #4
 8006ee0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ee4:	69b9      	ldr	r1, [r7, #24]
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f000 f86b 	bl	8006fc2 <USBH_ParseEPDesc>
 8006eec:	4603      	mov	r3, r0
 8006eee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006ef2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	791b      	ldrb	r3, [r3, #4]
 8006f00:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d204      	bcs.n	8006f12 <USBH_ParseCfgDesc+0x19a>
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	885a      	ldrh	r2, [r3, #2]
 8006f0c:	8afb      	ldrh	r3, [r7, #22]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d8b0      	bhi.n	8006e74 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	791b      	ldrb	r3, [r3, #4]
 8006f16:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d201      	bcs.n	8006f22 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e01c      	b.n	8006f5c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8006f22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f26:	3301      	adds	r3, #1
 8006f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d805      	bhi.n	8006f40 <USBH_ParseCfgDesc+0x1c8>
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	885a      	ldrh	r2, [r3, #2]
 8006f38:	8afb      	ldrh	r3, [r7, #22]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	f63f af74 	bhi.w	8006e28 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	791b      	ldrb	r3, [r3, #4]
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	bf28      	it	cs
 8006f48:	2302      	movcs	r3, #2
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d201      	bcs.n	8006f58 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e001      	b.n	8006f5c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006f58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3730      	adds	r7, #48	; 0x30
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	781a      	ldrb	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	785a      	ldrb	r2, [r3, #1]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	789a      	ldrb	r2, [r3, #2]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	78da      	ldrb	r2, [r3, #3]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	791a      	ldrb	r2, [r3, #4]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	795a      	ldrb	r2, [r3, #5]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	799a      	ldrb	r2, [r3, #6]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	79da      	ldrb	r2, [r3, #7]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	7a1a      	ldrb	r2, [r3, #8]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	721a      	strb	r2, [r3, #8]
}
 8006fb6:	bf00      	nop
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b087      	sub	sp, #28
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	781a      	ldrb	r2, [r3, #0]
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	785a      	ldrb	r2, [r3, #1]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	789a      	ldrb	r2, [r3, #2]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	78da      	ldrb	r2, [r3, #3]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	3305      	adds	r3, #5
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	b29b      	uxth	r3, r3
 8007002:	021b      	lsls	r3, r3, #8
 8007004:	b29b      	uxth	r3, r3
 8007006:	4313      	orrs	r3, r2
 8007008:	b29a      	uxth	r2, r3
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	799a      	ldrb	r2, [r3, #6]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	889b      	ldrh	r3, [r3, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d102      	bne.n	8007024 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800701e:	2303      	movs	r3, #3
 8007020:	75fb      	strb	r3, [r7, #23]
 8007022:	e033      	b.n	800708c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	889b      	ldrh	r3, [r3, #4]
 8007028:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800702c:	f023 0307 	bic.w	r3, r3, #7
 8007030:	b29a      	uxth	r2, r3
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	889b      	ldrh	r3, [r3, #4]
 800703a:	b21a      	sxth	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3304      	adds	r3, #4
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	b299      	uxth	r1, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3305      	adds	r3, #5
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	b29b      	uxth	r3, r3
 800704c:	021b      	lsls	r3, r3, #8
 800704e:	b29b      	uxth	r3, r3
 8007050:	430b      	orrs	r3, r1
 8007052:	b29b      	uxth	r3, r3
 8007054:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007058:	2b00      	cmp	r3, #0
 800705a:	d110      	bne.n	800707e <USBH_ParseEPDesc+0xbc>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	3304      	adds	r3, #4
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	b299      	uxth	r1, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	3305      	adds	r3, #5
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	b29b      	uxth	r3, r3
 800706c:	021b      	lsls	r3, r3, #8
 800706e:	b29b      	uxth	r3, r3
 8007070:	430b      	orrs	r3, r1
 8007072:	b29b      	uxth	r3, r3
 8007074:	b21b      	sxth	r3, r3
 8007076:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800707a:	b21b      	sxth	r3, r3
 800707c:	e001      	b.n	8007082 <USBH_ParseEPDesc+0xc0>
 800707e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007082:	4313      	orrs	r3, r2
 8007084:	b21b      	sxth	r3, r3
 8007086:	b29a      	uxth	r2, r3
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007092:	2b00      	cmp	r3, #0
 8007094:	d116      	bne.n	80070c4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	78db      	ldrb	r3, [r3, #3]
 800709a:	f003 0303 	and.w	r3, r3, #3
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d005      	beq.n	80070ae <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	78db      	ldrb	r3, [r3, #3]
 80070a6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d127      	bne.n	80070fe <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	799b      	ldrb	r3, [r3, #6]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <USBH_ParseEPDesc+0xfc>
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	799b      	ldrb	r3, [r3, #6]
 80070ba:	2b10      	cmp	r3, #16
 80070bc:	d91f      	bls.n	80070fe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80070be:	2303      	movs	r3, #3
 80070c0:	75fb      	strb	r3, [r7, #23]
 80070c2:	e01c      	b.n	80070fe <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	78db      	ldrb	r3, [r3, #3]
 80070c8:	f003 0303 	and.w	r3, r3, #3
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d10a      	bne.n	80070e6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	799b      	ldrb	r3, [r3, #6]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <USBH_ParseEPDesc+0x11e>
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	799b      	ldrb	r3, [r3, #6]
 80070dc:	2b10      	cmp	r3, #16
 80070de:	d90e      	bls.n	80070fe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80070e0:	2303      	movs	r3, #3
 80070e2:	75fb      	strb	r3, [r7, #23]
 80070e4:	e00b      	b.n	80070fe <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	78db      	ldrb	r3, [r3, #3]
 80070ea:	f003 0303 	and.w	r3, r3, #3
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	d105      	bne.n	80070fe <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	799b      	ldrb	r3, [r3, #6]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80070fa:	2303      	movs	r3, #3
 80070fc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80070fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007100:	4618      	mov	r0, r3
 8007102:	371c      	adds	r7, #28
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800710c:	b480      	push	{r7}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	4613      	mov	r3, r2
 8007118:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	3301      	adds	r3, #1
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2b03      	cmp	r3, #3
 8007122:	d120      	bne.n	8007166 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	1e9a      	subs	r2, r3, #2
 800712a:	88fb      	ldrh	r3, [r7, #6]
 800712c:	4293      	cmp	r3, r2
 800712e:	bf28      	it	cs
 8007130:	4613      	movcs	r3, r2
 8007132:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3302      	adds	r3, #2
 8007138:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800713a:	2300      	movs	r3, #0
 800713c:	82fb      	strh	r3, [r7, #22]
 800713e:	e00b      	b.n	8007158 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007140:	8afb      	ldrh	r3, [r7, #22]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	4413      	add	r3, r2
 8007146:	781a      	ldrb	r2, [r3, #0]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	3301      	adds	r3, #1
 8007150:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007152:	8afb      	ldrh	r3, [r7, #22]
 8007154:	3302      	adds	r3, #2
 8007156:	82fb      	strh	r3, [r7, #22]
 8007158:	8afa      	ldrh	r2, [r7, #22]
 800715a:	8abb      	ldrh	r3, [r7, #20]
 800715c:	429a      	cmp	r2, r3
 800715e:	d3ef      	bcc.n	8007140 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2200      	movs	r2, #0
 8007164:	701a      	strb	r2, [r3, #0]
  }
}
 8007166:	bf00      	nop
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007172:	b480      	push	{r7}
 8007174:	b085      	sub	sp, #20
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	881a      	ldrh	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	b29b      	uxth	r3, r3
 8007186:	4413      	add	r3, r2
 8007188:	b29a      	uxth	r2, r3
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4413      	add	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800719a:	68fb      	ldr	r3, [r7, #12]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	4613      	mov	r3, r2
 80071b4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80071b6:	2301      	movs	r3, #1
 80071b8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	789b      	ldrb	r3, [r3, #2]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d002      	beq.n	80071c8 <USBH_CtlReq+0x20>
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d00f      	beq.n	80071e6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80071c6:	e027      	b.n	8007218 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	88fa      	ldrh	r2, [r7, #6]
 80071d2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2201      	movs	r2, #1
 80071d8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2202      	movs	r2, #2
 80071de:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80071e0:	2301      	movs	r3, #1
 80071e2:	75fb      	strb	r3, [r7, #23]
      break;
 80071e4:	e018      	b.n	8007218 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 f81c 	bl	8007224 <USBH_HandleControl>
 80071ec:	4603      	mov	r3, r0
 80071ee:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80071f0:	7dfb      	ldrb	r3, [r7, #23]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <USBH_CtlReq+0x54>
 80071f6:	7dfb      	ldrb	r3, [r7, #23]
 80071f8:	2b03      	cmp	r3, #3
 80071fa:	d106      	bne.n	800720a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2201      	movs	r2, #1
 8007200:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	761a      	strb	r2, [r3, #24]
      break;
 8007208:	e005      	b.n	8007216 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800720a:	7dfb      	ldrb	r3, [r7, #23]
 800720c:	2b02      	cmp	r3, #2
 800720e:	d102      	bne.n	8007216 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2201      	movs	r2, #1
 8007214:	709a      	strb	r2, [r3, #2]
      break;
 8007216:	bf00      	nop
  }
  return status;
 8007218:	7dfb      	ldrb	r3, [r7, #23]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
	...

08007224 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af02      	add	r7, sp, #8
 800722a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800722c:	2301      	movs	r3, #1
 800722e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007230:	2300      	movs	r3, #0
 8007232:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	7e1b      	ldrb	r3, [r3, #24]
 8007238:	3b01      	subs	r3, #1
 800723a:	2b0a      	cmp	r3, #10
 800723c:	f200 8156 	bhi.w	80074ec <USBH_HandleControl+0x2c8>
 8007240:	a201      	add	r2, pc, #4	; (adr r2, 8007248 <USBH_HandleControl+0x24>)
 8007242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007246:	bf00      	nop
 8007248:	08007275 	.word	0x08007275
 800724c:	0800728f 	.word	0x0800728f
 8007250:	080072f9 	.word	0x080072f9
 8007254:	0800731f 	.word	0x0800731f
 8007258:	08007357 	.word	0x08007357
 800725c:	08007381 	.word	0x08007381
 8007260:	080073d3 	.word	0x080073d3
 8007264:	080073f5 	.word	0x080073f5
 8007268:	08007431 	.word	0x08007431
 800726c:	08007457 	.word	0x08007457
 8007270:	08007495 	.word	0x08007495
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f103 0110 	add.w	r1, r3, #16
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	795b      	ldrb	r3, [r3, #5]
 800727e:	461a      	mov	r2, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f943 	bl	800750c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2202      	movs	r2, #2
 800728a:	761a      	strb	r2, [r3, #24]
      break;
 800728c:	e139      	b.n	8007502 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	795b      	ldrb	r3, [r3, #5]
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fca1 	bl	8007bdc <USBH_LL_GetURBState>
 800729a:	4603      	mov	r3, r0
 800729c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800729e:	7bbb      	ldrb	r3, [r7, #14]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d11e      	bne.n	80072e2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	7c1b      	ldrb	r3, [r3, #16]
 80072a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072ac:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	8adb      	ldrh	r3, [r3, #22]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80072b6:	7b7b      	ldrb	r3, [r7, #13]
 80072b8:	2b80      	cmp	r3, #128	; 0x80
 80072ba:	d103      	bne.n	80072c4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2203      	movs	r2, #3
 80072c0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80072c2:	e115      	b.n	80074f0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2205      	movs	r2, #5
 80072c8:	761a      	strb	r2, [r3, #24]
      break;
 80072ca:	e111      	b.n	80074f0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80072cc:	7b7b      	ldrb	r3, [r7, #13]
 80072ce:	2b80      	cmp	r3, #128	; 0x80
 80072d0:	d103      	bne.n	80072da <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2209      	movs	r2, #9
 80072d6:	761a      	strb	r2, [r3, #24]
      break;
 80072d8:	e10a      	b.n	80074f0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2207      	movs	r2, #7
 80072de:	761a      	strb	r2, [r3, #24]
      break;
 80072e0:	e106      	b.n	80074f0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80072e2:	7bbb      	ldrb	r3, [r7, #14]
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	d003      	beq.n	80072f0 <USBH_HandleControl+0xcc>
 80072e8:	7bbb      	ldrb	r3, [r7, #14]
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	f040 8100 	bne.w	80074f0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	220b      	movs	r2, #11
 80072f4:	761a      	strb	r2, [r3, #24]
      break;
 80072f6:	e0fb      	b.n	80074f0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072fe:	b29a      	uxth	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6899      	ldr	r1, [r3, #8]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	899a      	ldrh	r2, [r3, #12]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	791b      	ldrb	r3, [r3, #4]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f93a 	bl	800758a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2204      	movs	r2, #4
 800731a:	761a      	strb	r2, [r3, #24]
      break;
 800731c:	e0f1      	b.n	8007502 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	791b      	ldrb	r3, [r3, #4]
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fc59 	bl	8007bdc <USBH_LL_GetURBState>
 800732a:	4603      	mov	r3, r0
 800732c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800732e:	7bbb      	ldrb	r3, [r7, #14]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d102      	bne.n	800733a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2209      	movs	r2, #9
 8007338:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800733a:	7bbb      	ldrb	r3, [r7, #14]
 800733c:	2b05      	cmp	r3, #5
 800733e:	d102      	bne.n	8007346 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007340:	2303      	movs	r3, #3
 8007342:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007344:	e0d6      	b.n	80074f4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007346:	7bbb      	ldrb	r3, [r7, #14]
 8007348:	2b04      	cmp	r3, #4
 800734a:	f040 80d3 	bne.w	80074f4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	220b      	movs	r2, #11
 8007352:	761a      	strb	r2, [r3, #24]
      break;
 8007354:	e0ce      	b.n	80074f4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6899      	ldr	r1, [r3, #8]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	899a      	ldrh	r2, [r3, #12]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	795b      	ldrb	r3, [r3, #5]
 8007362:	2001      	movs	r0, #1
 8007364:	9000      	str	r0, [sp, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f8ea 	bl	8007540 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007372:	b29a      	uxth	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2206      	movs	r2, #6
 800737c:	761a      	strb	r2, [r3, #24]
      break;
 800737e:	e0c0      	b.n	8007502 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	795b      	ldrb	r3, [r3, #5]
 8007384:	4619      	mov	r1, r3
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fc28 	bl	8007bdc <USBH_LL_GetURBState>
 800738c:	4603      	mov	r3, r0
 800738e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007390:	7bbb      	ldrb	r3, [r7, #14]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d103      	bne.n	800739e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2207      	movs	r2, #7
 800739a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800739c:	e0ac      	b.n	80074f8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800739e:	7bbb      	ldrb	r3, [r7, #14]
 80073a0:	2b05      	cmp	r3, #5
 80073a2:	d105      	bne.n	80073b0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	220c      	movs	r2, #12
 80073a8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80073aa:	2303      	movs	r3, #3
 80073ac:	73fb      	strb	r3, [r7, #15]
      break;
 80073ae:	e0a3      	b.n	80074f8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d103      	bne.n	80073be <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2205      	movs	r2, #5
 80073ba:	761a      	strb	r2, [r3, #24]
      break;
 80073bc:	e09c      	b.n	80074f8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80073be:	7bbb      	ldrb	r3, [r7, #14]
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	f040 8099 	bne.w	80074f8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	220b      	movs	r2, #11
 80073ca:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80073cc:	2302      	movs	r3, #2
 80073ce:	73fb      	strb	r3, [r7, #15]
      break;
 80073d0:	e092      	b.n	80074f8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	791b      	ldrb	r3, [r3, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	2100      	movs	r1, #0
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f8d5 	bl	800758a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2208      	movs	r2, #8
 80073f0:	761a      	strb	r2, [r3, #24]

      break;
 80073f2:	e086      	b.n	8007502 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	791b      	ldrb	r3, [r3, #4]
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fbee 	bl	8007bdc <USBH_LL_GetURBState>
 8007400:	4603      	mov	r3, r0
 8007402:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007404:	7bbb      	ldrb	r3, [r7, #14]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d105      	bne.n	8007416 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	220d      	movs	r2, #13
 800740e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007414:	e072      	b.n	80074fc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	2b04      	cmp	r3, #4
 800741a:	d103      	bne.n	8007424 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	220b      	movs	r2, #11
 8007420:	761a      	strb	r2, [r3, #24]
      break;
 8007422:	e06b      	b.n	80074fc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	2b05      	cmp	r3, #5
 8007428:	d168      	bne.n	80074fc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800742a:	2303      	movs	r3, #3
 800742c:	73fb      	strb	r3, [r7, #15]
      break;
 800742e:	e065      	b.n	80074fc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	795b      	ldrb	r3, [r3, #5]
 8007434:	2201      	movs	r2, #1
 8007436:	9200      	str	r2, [sp, #0]
 8007438:	2200      	movs	r2, #0
 800743a:	2100      	movs	r1, #0
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f87f 	bl	8007540 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007448:	b29a      	uxth	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	220a      	movs	r2, #10
 8007452:	761a      	strb	r2, [r3, #24]
      break;
 8007454:	e055      	b.n	8007502 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	795b      	ldrb	r3, [r3, #5]
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fbbd 	bl	8007bdc <USBH_LL_GetURBState>
 8007462:	4603      	mov	r3, r0
 8007464:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007466:	7bbb      	ldrb	r3, [r7, #14]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d105      	bne.n	8007478 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	220d      	movs	r2, #13
 8007474:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007476:	e043      	b.n	8007500 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	2b02      	cmp	r3, #2
 800747c:	d103      	bne.n	8007486 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2209      	movs	r2, #9
 8007482:	761a      	strb	r2, [r3, #24]
      break;
 8007484:	e03c      	b.n	8007500 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007486:	7bbb      	ldrb	r3, [r7, #14]
 8007488:	2b04      	cmp	r3, #4
 800748a:	d139      	bne.n	8007500 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	220b      	movs	r2, #11
 8007490:	761a      	strb	r2, [r3, #24]
      break;
 8007492:	e035      	b.n	8007500 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	7e5b      	ldrb	r3, [r3, #25]
 8007498:	3301      	adds	r3, #1
 800749a:	b2da      	uxtb	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	765a      	strb	r2, [r3, #25]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	7e5b      	ldrb	r3, [r3, #25]
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d806      	bhi.n	80074b6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80074b4:	e025      	b.n	8007502 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074bc:	2106      	movs	r1, #6
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	795b      	ldrb	r3, [r3, #5]
 80074cc:	4619      	mov	r1, r3
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f8e8 	bl	80076a4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	791b      	ldrb	r3, [r3, #4]
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f8e2 	bl	80076a4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80074e6:	2302      	movs	r3, #2
 80074e8:	73fb      	strb	r3, [r7, #15]
      break;
 80074ea:	e00a      	b.n	8007502 <USBH_HandleControl+0x2de>

    default:
      break;
 80074ec:	bf00      	nop
 80074ee:	e008      	b.n	8007502 <USBH_HandleControl+0x2de>
      break;
 80074f0:	bf00      	nop
 80074f2:	e006      	b.n	8007502 <USBH_HandleControl+0x2de>
      break;
 80074f4:	bf00      	nop
 80074f6:	e004      	b.n	8007502 <USBH_HandleControl+0x2de>
      break;
 80074f8:	bf00      	nop
 80074fa:	e002      	b.n	8007502 <USBH_HandleControl+0x2de>
      break;
 80074fc:	bf00      	nop
 80074fe:	e000      	b.n	8007502 <USBH_HandleControl+0x2de>
      break;
 8007500:	bf00      	nop
  }

  return status;
 8007502:	7bfb      	ldrb	r3, [r7, #15]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b088      	sub	sp, #32
 8007510:	af04      	add	r7, sp, #16
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	4613      	mov	r3, r2
 8007518:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800751a:	79f9      	ldrb	r1, [r7, #7]
 800751c:	2300      	movs	r3, #0
 800751e:	9303      	str	r3, [sp, #12]
 8007520:	2308      	movs	r3, #8
 8007522:	9302      	str	r3, [sp, #8]
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	9301      	str	r3, [sp, #4]
 8007528:	2300      	movs	r3, #0
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	2300      	movs	r3, #0
 800752e:	2200      	movs	r2, #0
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 fb22 	bl	8007b7a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b088      	sub	sp, #32
 8007544:	af04      	add	r7, sp, #16
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	4611      	mov	r1, r2
 800754c:	461a      	mov	r2, r3
 800754e:	460b      	mov	r3, r1
 8007550:	80fb      	strh	r3, [r7, #6]
 8007552:	4613      	mov	r3, r2
 8007554:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800755c:	2b00      	cmp	r3, #0
 800755e:	d001      	beq.n	8007564 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007560:	2300      	movs	r3, #0
 8007562:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007564:	7979      	ldrb	r1, [r7, #5]
 8007566:	7e3b      	ldrb	r3, [r7, #24]
 8007568:	9303      	str	r3, [sp, #12]
 800756a:	88fb      	ldrh	r3, [r7, #6]
 800756c:	9302      	str	r3, [sp, #8]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	9301      	str	r3, [sp, #4]
 8007572:	2301      	movs	r3, #1
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	2300      	movs	r3, #0
 8007578:	2200      	movs	r2, #0
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f000 fafd 	bl	8007b7a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b088      	sub	sp, #32
 800758e:	af04      	add	r7, sp, #16
 8007590:	60f8      	str	r0, [r7, #12]
 8007592:	60b9      	str	r1, [r7, #8]
 8007594:	4611      	mov	r1, r2
 8007596:	461a      	mov	r2, r3
 8007598:	460b      	mov	r3, r1
 800759a:	80fb      	strh	r3, [r7, #6]
 800759c:	4613      	mov	r3, r2
 800759e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80075a0:	7979      	ldrb	r1, [r7, #5]
 80075a2:	2300      	movs	r3, #0
 80075a4:	9303      	str	r3, [sp, #12]
 80075a6:	88fb      	ldrh	r3, [r7, #6]
 80075a8:	9302      	str	r3, [sp, #8]
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	9301      	str	r3, [sp, #4]
 80075ae:	2301      	movs	r3, #1
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	2300      	movs	r3, #0
 80075b4:	2201      	movs	r2, #1
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f000 fadf 	bl	8007b7a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80075bc:	2300      	movs	r3, #0

}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b088      	sub	sp, #32
 80075ca:	af04      	add	r7, sp, #16
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	4611      	mov	r1, r2
 80075d2:	461a      	mov	r2, r3
 80075d4:	460b      	mov	r3, r1
 80075d6:	71fb      	strb	r3, [r7, #7]
 80075d8:	4613      	mov	r3, r2
 80075da:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80075dc:	79fb      	ldrb	r3, [r7, #7]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	79b9      	ldrb	r1, [r7, #6]
 80075e2:	2200      	movs	r2, #0
 80075e4:	9203      	str	r2, [sp, #12]
 80075e6:	9302      	str	r3, [sp, #8]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	9301      	str	r3, [sp, #4]
 80075ec:	2301      	movs	r3, #1
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	2303      	movs	r3, #3
 80075f2:	2201      	movs	r2, #1
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 fac0 	bl	8007b7a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af04      	add	r7, sp, #16
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	4608      	mov	r0, r1
 800760e:	4611      	mov	r1, r2
 8007610:	461a      	mov	r2, r3
 8007612:	4603      	mov	r3, r0
 8007614:	70fb      	strb	r3, [r7, #3]
 8007616:	460b      	mov	r3, r1
 8007618:	70bb      	strb	r3, [r7, #2]
 800761a:	4613      	mov	r3, r2
 800761c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800761e:	7878      	ldrb	r0, [r7, #1]
 8007620:	78ba      	ldrb	r2, [r7, #2]
 8007622:	78f9      	ldrb	r1, [r7, #3]
 8007624:	8b3b      	ldrh	r3, [r7, #24]
 8007626:	9302      	str	r3, [sp, #8]
 8007628:	7d3b      	ldrb	r3, [r7, #20]
 800762a:	9301      	str	r3, [sp, #4]
 800762c:	7c3b      	ldrb	r3, [r7, #16]
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	4603      	mov	r3, r0
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fa53 	bl	8007ade <USBH_LL_OpenPipe>

  return USBH_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b082      	sub	sp, #8
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	460b      	mov	r3, r1
 800764c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800764e:	78fb      	ldrb	r3, [r7, #3]
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fa72 	bl	8007b3c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	460b      	mov	r3, r1
 800766c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f836 	bl	80076e0 <USBH_GetFreePipe>
 8007674:	4603      	mov	r3, r0
 8007676:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007678:	89fb      	ldrh	r3, [r7, #14]
 800767a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800767e:	4293      	cmp	r3, r2
 8007680:	d00a      	beq.n	8007698 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007682:	78fa      	ldrb	r2, [r7, #3]
 8007684:	89fb      	ldrh	r3, [r7, #14]
 8007686:	f003 030f 	and.w	r3, r3, #15
 800768a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800768e:	6879      	ldr	r1, [r7, #4]
 8007690:	33e0      	adds	r3, #224	; 0xe0
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	440b      	add	r3, r1
 8007696:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007698:	89fb      	ldrh	r3, [r7, #14]
 800769a:	b2db      	uxtb	r3, r3
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	460b      	mov	r3, r1
 80076ae:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80076b0:	78fb      	ldrb	r3, [r7, #3]
 80076b2:	2b0f      	cmp	r3, #15
 80076b4:	d80d      	bhi.n	80076d2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80076b6:	78fb      	ldrb	r3, [r7, #3]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	33e0      	adds	r3, #224	; 0xe0
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	78fb      	ldrb	r3, [r7, #3]
 80076c4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80076c8:	6879      	ldr	r1, [r7, #4]
 80076ca:	33e0      	adds	r3, #224	; 0xe0
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	440b      	add	r3, r1
 80076d0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80076e8:	2300      	movs	r3, #0
 80076ea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80076ec:	2300      	movs	r3, #0
 80076ee:	73fb      	strb	r3, [r7, #15]
 80076f0:	e00f      	b.n	8007712 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	33e0      	adds	r3, #224	; 0xe0
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d102      	bne.n	800770c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	b29b      	uxth	r3, r3
 800770a:	e007      	b.n	800771c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800770c:	7bfb      	ldrb	r3, [r7, #15]
 800770e:	3301      	adds	r3, #1
 8007710:	73fb      	strb	r3, [r7, #15]
 8007712:	7bfb      	ldrb	r3, [r7, #15]
 8007714:	2b0f      	cmp	r3, #15
 8007716:	d9ec      	bls.n	80076f2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007718:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800772c:	2201      	movs	r2, #1
 800772e:	490e      	ldr	r1, [pc, #56]	; (8007768 <MX_USB_HOST_Init+0x40>)
 8007730:	480e      	ldr	r0, [pc, #56]	; (800776c <MX_USB_HOST_Init+0x44>)
 8007732:	f7fe fbcb 	bl	8005ecc <USBH_Init>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800773c:	f7f9 f89e 	bl	800087c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 8007740:	490b      	ldr	r1, [pc, #44]	; (8007770 <MX_USB_HOST_Init+0x48>)
 8007742:	480a      	ldr	r0, [pc, #40]	; (800776c <MX_USB_HOST_Init+0x44>)
 8007744:	f7fe fc50 	bl	8005fe8 <USBH_RegisterClass>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800774e:	f7f9 f895 	bl	800087c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007752:	4806      	ldr	r0, [pc, #24]	; (800776c <MX_USB_HOST_Init+0x44>)
 8007754:	f7fe fcd4 	bl	8006100 <USBH_Start>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800775e:	f7f9 f88d 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007762:	bf00      	nop
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	08007789 	.word	0x08007789
 800776c:	2000019c 	.word	0x2000019c
 8007770:	2000000c 	.word	0x2000000c

08007774 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007778:	4802      	ldr	r0, [pc, #8]	; (8007784 <MX_USB_HOST_Process+0x10>)
 800777a:	f7fe fcd1 	bl	8006120 <USBH_Process>
}
 800777e:	bf00      	nop
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	2000019c 	.word	0x2000019c

08007788 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007794:	78fb      	ldrb	r3, [r7, #3]
 8007796:	3b01      	subs	r3, #1
 8007798:	2b04      	cmp	r3, #4
 800779a:	d819      	bhi.n	80077d0 <USBH_UserProcess+0x48>
 800779c:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <USBH_UserProcess+0x1c>)
 800779e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a2:	bf00      	nop
 80077a4:	080077d1 	.word	0x080077d1
 80077a8:	080077c1 	.word	0x080077c1
 80077ac:	080077d1 	.word	0x080077d1
 80077b0:	080077c9 	.word	0x080077c9
 80077b4:	080077b9 	.word	0x080077b9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80077b8:	4b09      	ldr	r3, [pc, #36]	; (80077e0 <USBH_UserProcess+0x58>)
 80077ba:	2203      	movs	r2, #3
 80077bc:	701a      	strb	r2, [r3, #0]
  break;
 80077be:	e008      	b.n	80077d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80077c0:	4b07      	ldr	r3, [pc, #28]	; (80077e0 <USBH_UserProcess+0x58>)
 80077c2:	2202      	movs	r2, #2
 80077c4:	701a      	strb	r2, [r3, #0]
  break;
 80077c6:	e004      	b.n	80077d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80077c8:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <USBH_UserProcess+0x58>)
 80077ca:	2201      	movs	r2, #1
 80077cc:	701a      	strb	r2, [r3, #0]
  break;
 80077ce:	e000      	b.n	80077d2 <USBH_UserProcess+0x4a>

  default:
  break;
 80077d0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80077d2:	bf00      	nop
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	20000574 	.word	0x20000574

080077e4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08a      	sub	sp, #40	; 0x28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077ec:	f107 0314 	add.w	r3, r7, #20
 80077f0:	2200      	movs	r2, #0
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	605a      	str	r2, [r3, #4]
 80077f6:	609a      	str	r2, [r3, #8]
 80077f8:	60da      	str	r2, [r3, #12]
 80077fa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007804:	d147      	bne.n	8007896 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007806:	2300      	movs	r3, #0
 8007808:	613b      	str	r3, [r7, #16]
 800780a:	4b25      	ldr	r3, [pc, #148]	; (80078a0 <HAL_HCD_MspInit+0xbc>)
 800780c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780e:	4a24      	ldr	r2, [pc, #144]	; (80078a0 <HAL_HCD_MspInit+0xbc>)
 8007810:	f043 0301 	orr.w	r3, r3, #1
 8007814:	6313      	str	r3, [r2, #48]	; 0x30
 8007816:	4b22      	ldr	r3, [pc, #136]	; (80078a0 <HAL_HCD_MspInit+0xbc>)
 8007818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	613b      	str	r3, [r7, #16]
 8007820:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007822:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007828:	2300      	movs	r3, #0
 800782a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800782c:	2300      	movs	r3, #0
 800782e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007830:	f107 0314 	add.w	r3, r7, #20
 8007834:	4619      	mov	r1, r3
 8007836:	481b      	ldr	r0, [pc, #108]	; (80078a4 <HAL_HCD_MspInit+0xc0>)
 8007838:	f7f9 fe90 	bl	800155c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800783c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007842:	2302      	movs	r3, #2
 8007844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007846:	2300      	movs	r3, #0
 8007848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800784a:	2303      	movs	r3, #3
 800784c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800784e:	230a      	movs	r3, #10
 8007850:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007852:	f107 0314 	add.w	r3, r7, #20
 8007856:	4619      	mov	r1, r3
 8007858:	4812      	ldr	r0, [pc, #72]	; (80078a4 <HAL_HCD_MspInit+0xc0>)
 800785a:	f7f9 fe7f 	bl	800155c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800785e:	4b10      	ldr	r3, [pc, #64]	; (80078a0 <HAL_HCD_MspInit+0xbc>)
 8007860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007862:	4a0f      	ldr	r2, [pc, #60]	; (80078a0 <HAL_HCD_MspInit+0xbc>)
 8007864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007868:	6353      	str	r3, [r2, #52]	; 0x34
 800786a:	2300      	movs	r3, #0
 800786c:	60fb      	str	r3, [r7, #12]
 800786e:	4b0c      	ldr	r3, [pc, #48]	; (80078a0 <HAL_HCD_MspInit+0xbc>)
 8007870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007872:	4a0b      	ldr	r2, [pc, #44]	; (80078a0 <HAL_HCD_MspInit+0xbc>)
 8007874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007878:	6453      	str	r3, [r2, #68]	; 0x44
 800787a:	4b09      	ldr	r3, [pc, #36]	; (80078a0 <HAL_HCD_MspInit+0xbc>)
 800787c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800787e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007886:	2200      	movs	r2, #0
 8007888:	2100      	movs	r1, #0
 800788a:	2043      	movs	r0, #67	; 0x43
 800788c:	f7f9 fabf 	bl	8000e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007890:	2043      	movs	r0, #67	; 0x43
 8007892:	f7f9 fad8 	bl	8000e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007896:	bf00      	nop
 8007898:	3728      	adds	r7, #40	; 0x28
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	40023800 	.word	0x40023800
 80078a4:	40020000 	.word	0x40020000

080078a8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7ff f811 	bl	80068de <USBH_LL_IncTimer>
}
 80078bc:	bf00      	nop
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7ff f849 	bl	800696a <USBH_LL_Connect>
}
 80078d8:	bf00      	nop
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7ff f852 	bl	8006998 <USBH_LL_Disconnect>
}
 80078f4:	bf00      	nop
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	70fb      	strb	r3, [r7, #3]
 8007908:	4613      	mov	r3, r2
 800790a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007926:	4618      	mov	r0, r3
 8007928:	f7ff f803 	bl	8006932 <USBH_LL_PortEnabled>
}
 800792c:	bf00      	nop
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007942:	4618      	mov	r0, r3
 8007944:	f7ff f803 	bl	800694e <USBH_LL_PortDisabled>
}
 8007948:	bf00      	nop
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800795e:	2b01      	cmp	r3, #1
 8007960:	d12a      	bne.n	80079b8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007962:	4a18      	ldr	r2, [pc, #96]	; (80079c4 <USBH_LL_Init+0x74>)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a15      	ldr	r2, [pc, #84]	; (80079c4 <USBH_LL_Init+0x74>)
 800796e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007972:	4b14      	ldr	r3, [pc, #80]	; (80079c4 <USBH_LL_Init+0x74>)
 8007974:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007978:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800797a:	4b12      	ldr	r3, [pc, #72]	; (80079c4 <USBH_LL_Init+0x74>)
 800797c:	2208      	movs	r2, #8
 800797e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007980:	4b10      	ldr	r3, [pc, #64]	; (80079c4 <USBH_LL_Init+0x74>)
 8007982:	2201      	movs	r2, #1
 8007984:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007986:	4b0f      	ldr	r3, [pc, #60]	; (80079c4 <USBH_LL_Init+0x74>)
 8007988:	2200      	movs	r2, #0
 800798a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800798c:	4b0d      	ldr	r3, [pc, #52]	; (80079c4 <USBH_LL_Init+0x74>)
 800798e:	2202      	movs	r2, #2
 8007990:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007992:	4b0c      	ldr	r3, [pc, #48]	; (80079c4 <USBH_LL_Init+0x74>)
 8007994:	2200      	movs	r2, #0
 8007996:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007998:	480a      	ldr	r0, [pc, #40]	; (80079c4 <USBH_LL_Init+0x74>)
 800799a:	f7f9 ff94 	bl	80018c6 <HAL_HCD_Init>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80079a4:	f7f8 ff6a 	bl	800087c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80079a8:	4806      	ldr	r0, [pc, #24]	; (80079c4 <USBH_LL_Init+0x74>)
 80079aa:	f7fa fb78 	bl	800209e <HAL_HCD_GetCurrentFrame>
 80079ae:	4603      	mov	r3, r0
 80079b0:	4619      	mov	r1, r3
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7fe ff84 	bl	80068c0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20000578 	.word	0x20000578

080079c8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079d0:	2300      	movs	r3, #0
 80079d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079d4:	2300      	movs	r3, #0
 80079d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fa fae7 	bl	8001fb2 <HAL_HCD_Start>
 80079e4:	4603      	mov	r3, r0
 80079e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 f95c 	bl	8007ca8 <USBH_Get_USB_Status>
 80079f0:	4603      	mov	r3, r0
 80079f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7fa faef 	bl	8001ff8 <HAL_HCD_Stop>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 f941 	bl	8007ca8 <USBH_Get_USB_Status>
 8007a26:	4603      	mov	r3, r0
 8007a28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fa fb37 	bl	80020ba <HAL_HCD_GetCurrentSpeed>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d00c      	beq.n	8007a6c <USBH_LL_GetSpeed+0x38>
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d80d      	bhi.n	8007a72 <USBH_LL_GetSpeed+0x3e>
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d002      	beq.n	8007a60 <USBH_LL_GetSpeed+0x2c>
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d003      	beq.n	8007a66 <USBH_LL_GetSpeed+0x32>
 8007a5e:	e008      	b.n	8007a72 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007a60:	2300      	movs	r3, #0
 8007a62:	73fb      	strb	r3, [r7, #15]
    break;
 8007a64:	e008      	b.n	8007a78 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007a66:	2301      	movs	r3, #1
 8007a68:	73fb      	strb	r3, [r7, #15]
    break;
 8007a6a:	e005      	b.n	8007a78 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a70:	e002      	b.n	8007a78 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007a72:	2301      	movs	r3, #1
 8007a74:	73fb      	strb	r3, [r7, #15]
    break;
 8007a76:	bf00      	nop
  }
  return  speed;
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fa faca 	bl	8002032 <HAL_HCD_ResetPort>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007aa2:	7bfb      	ldrb	r3, [r7, #15]
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 f8ff 	bl	8007ca8 <USBH_Get_USB_Status>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007aca:	78fa      	ldrb	r2, [r7, #3]
 8007acc:	4611      	mov	r1, r2
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fa fad1 	bl	8002076 <HAL_HCD_HC_GetXferCount>
 8007ad4:	4603      	mov	r3, r0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007ade:	b590      	push	{r4, r7, lr}
 8007ae0:	b089      	sub	sp, #36	; 0x24
 8007ae2:	af04      	add	r7, sp, #16
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	4608      	mov	r0, r1
 8007ae8:	4611      	mov	r1, r2
 8007aea:	461a      	mov	r2, r3
 8007aec:	4603      	mov	r3, r0
 8007aee:	70fb      	strb	r3, [r7, #3]
 8007af0:	460b      	mov	r3, r1
 8007af2:	70bb      	strb	r3, [r7, #2]
 8007af4:	4613      	mov	r3, r2
 8007af6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007b06:	787c      	ldrb	r4, [r7, #1]
 8007b08:	78ba      	ldrb	r2, [r7, #2]
 8007b0a:	78f9      	ldrb	r1, [r7, #3]
 8007b0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b0e:	9302      	str	r3, [sp, #8]
 8007b10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007b14:	9301      	str	r3, [sp, #4]
 8007b16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	4623      	mov	r3, r4
 8007b1e:	f7f9 ff34 	bl	800198a <HAL_HCD_HC_Init>
 8007b22:	4603      	mov	r3, r0
 8007b24:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 f8bd 	bl	8007ca8 <USBH_Get_USB_Status>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3714      	adds	r7, #20
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd90      	pop	{r4, r7, pc}

08007b3c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	460b      	mov	r3, r1
 8007b46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b56:	78fa      	ldrb	r2, [r7, #3]
 8007b58:	4611      	mov	r1, r2
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7f9 ffa4 	bl	8001aa8 <HAL_HCD_HC_Halt>
 8007b60:	4603      	mov	r3, r0
 8007b62:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 f89e 	bl	8007ca8 <USBH_Get_USB_Status>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b70:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007b7a:	b590      	push	{r4, r7, lr}
 8007b7c:	b089      	sub	sp, #36	; 0x24
 8007b7e:	af04      	add	r7, sp, #16
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	4608      	mov	r0, r1
 8007b84:	4611      	mov	r1, r2
 8007b86:	461a      	mov	r2, r3
 8007b88:	4603      	mov	r3, r0
 8007b8a:	70fb      	strb	r3, [r7, #3]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	70bb      	strb	r3, [r7, #2]
 8007b90:	4613      	mov	r3, r2
 8007b92:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b94:	2300      	movs	r3, #0
 8007b96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007ba2:	787c      	ldrb	r4, [r7, #1]
 8007ba4:	78ba      	ldrb	r2, [r7, #2]
 8007ba6:	78f9      	ldrb	r1, [r7, #3]
 8007ba8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007bac:	9303      	str	r3, [sp, #12]
 8007bae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007bb0:	9302      	str	r3, [sp, #8]
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	9301      	str	r3, [sp, #4]
 8007bb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	4623      	mov	r3, r4
 8007bbe:	f7f9 ff97 	bl	8001af0 <HAL_HCD_HC_SubmitRequest>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 f86d 	bl	8007ca8 <USBH_Get_USB_Status>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd90      	pop	{r4, r7, pc}

08007bdc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007bee:	78fa      	ldrb	r2, [r7, #3]
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fa fa2b 	bl	800204e <HAL_HCD_HC_GetURBState>
 8007bf8:	4603      	mov	r3, r0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b082      	sub	sp, #8
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d103      	bne.n	8007c20 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007c18:	78fb      	ldrb	r3, [r7, #3]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 f870 	bl	8007d00 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007c20:	20c8      	movs	r0, #200	; 0xc8
 8007c22:	f7f8 fff5 	bl	8000c10 <HAL_Delay>
  return USBH_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c46:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007c48:	78fb      	ldrb	r3, [r7, #3]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	212c      	movs	r1, #44	; 0x2c
 8007c4e:	fb01 f303 	mul.w	r3, r1, r3
 8007c52:	4413      	add	r3, r2
 8007c54:	333b      	adds	r3, #59	; 0x3b
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d009      	beq.n	8007c70 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007c5c:	78fb      	ldrb	r3, [r7, #3]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	212c      	movs	r1, #44	; 0x2c
 8007c62:	fb01 f303 	mul.w	r3, r1, r3
 8007c66:	4413      	add	r3, r2
 8007c68:	3354      	adds	r3, #84	; 0x54
 8007c6a:	78ba      	ldrb	r2, [r7, #2]
 8007c6c:	701a      	strb	r2, [r3, #0]
 8007c6e:	e008      	b.n	8007c82 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	212c      	movs	r1, #44	; 0x2c
 8007c76:	fb01 f303 	mul.w	r3, r1, r3
 8007c7a:	4413      	add	r3, r2
 8007c7c:	3355      	adds	r3, #85	; 0x55
 8007c7e:	78ba      	ldrb	r2, [r7, #2]
 8007c80:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7f8 ffb9 	bl	8000c10 <HAL_Delay>
}
 8007c9e:	bf00      	nop
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
	...

08007ca8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4603      	mov	r3, r0
 8007cb0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007cb6:	79fb      	ldrb	r3, [r7, #7]
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	d817      	bhi.n	8007cec <USBH_Get_USB_Status+0x44>
 8007cbc:	a201      	add	r2, pc, #4	; (adr r2, 8007cc4 <USBH_Get_USB_Status+0x1c>)
 8007cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc2:	bf00      	nop
 8007cc4:	08007cd5 	.word	0x08007cd5
 8007cc8:	08007cdb 	.word	0x08007cdb
 8007ccc:	08007ce1 	.word	0x08007ce1
 8007cd0:	08007ce7 	.word	0x08007ce7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8007cd8:	e00b      	b.n	8007cf2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007cda:	2302      	movs	r3, #2
 8007cdc:	73fb      	strb	r3, [r7, #15]
    break;
 8007cde:	e008      	b.n	8007cf2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ce4:	e005      	b.n	8007cf2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007ce6:	2302      	movs	r3, #2
 8007ce8:	73fb      	strb	r3, [r7, #15]
    break;
 8007cea:	e002      	b.n	8007cf2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007cec:	2302      	movs	r3, #2
 8007cee:	73fb      	strb	r3, [r7, #15]
    break;
 8007cf0:	bf00      	nop
  }
  return usb_status;
 8007cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3714      	adds	r7, #20
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007d0a:	79fb      	ldrb	r3, [r7, #7]
 8007d0c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007d0e:	79fb      	ldrb	r3, [r7, #7]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d102      	bne.n	8007d1a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007d14:	2300      	movs	r3, #0
 8007d16:	73fb      	strb	r3, [r7, #15]
 8007d18:	e001      	b.n	8007d1e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
 8007d20:	461a      	mov	r2, r3
 8007d22:	2101      	movs	r1, #1
 8007d24:	4803      	ldr	r0, [pc, #12]	; (8007d34 <MX_DriverVbusFS+0x34>)
 8007d26:	f7f9 fdb5 	bl	8001894 <HAL_GPIO_WritePin>
}
 8007d2a:	bf00      	nop
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	40020800 	.word	0x40020800

08007d38 <__errno>:
 8007d38:	4b01      	ldr	r3, [pc, #4]	; (8007d40 <__errno+0x8>)
 8007d3a:	6818      	ldr	r0, [r3, #0]
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	2000002c 	.word	0x2000002c

08007d44 <__libc_init_array>:
 8007d44:	b570      	push	{r4, r5, r6, lr}
 8007d46:	4d0d      	ldr	r5, [pc, #52]	; (8007d7c <__libc_init_array+0x38>)
 8007d48:	4c0d      	ldr	r4, [pc, #52]	; (8007d80 <__libc_init_array+0x3c>)
 8007d4a:	1b64      	subs	r4, r4, r5
 8007d4c:	10a4      	asrs	r4, r4, #2
 8007d4e:	2600      	movs	r6, #0
 8007d50:	42a6      	cmp	r6, r4
 8007d52:	d109      	bne.n	8007d68 <__libc_init_array+0x24>
 8007d54:	4d0b      	ldr	r5, [pc, #44]	; (8007d84 <__libc_init_array+0x40>)
 8007d56:	4c0c      	ldr	r4, [pc, #48]	; (8007d88 <__libc_init_array+0x44>)
 8007d58:	f000 f92e 	bl	8007fb8 <_init>
 8007d5c:	1b64      	subs	r4, r4, r5
 8007d5e:	10a4      	asrs	r4, r4, #2
 8007d60:	2600      	movs	r6, #0
 8007d62:	42a6      	cmp	r6, r4
 8007d64:	d105      	bne.n	8007d72 <__libc_init_array+0x2e>
 8007d66:	bd70      	pop	{r4, r5, r6, pc}
 8007d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d6c:	4798      	blx	r3
 8007d6e:	3601      	adds	r6, #1
 8007d70:	e7ee      	b.n	8007d50 <__libc_init_array+0xc>
 8007d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d76:	4798      	blx	r3
 8007d78:	3601      	adds	r6, #1
 8007d7a:	e7f2      	b.n	8007d62 <__libc_init_array+0x1e>
 8007d7c:	0800811c 	.word	0x0800811c
 8007d80:	0800811c 	.word	0x0800811c
 8007d84:	0800811c 	.word	0x0800811c
 8007d88:	08008120 	.word	0x08008120

08007d8c <malloc>:
 8007d8c:	4b02      	ldr	r3, [pc, #8]	; (8007d98 <malloc+0xc>)
 8007d8e:	4601      	mov	r1, r0
 8007d90:	6818      	ldr	r0, [r3, #0]
 8007d92:	f000 b87f 	b.w	8007e94 <_malloc_r>
 8007d96:	bf00      	nop
 8007d98:	2000002c 	.word	0x2000002c

08007d9c <free>:
 8007d9c:	4b02      	ldr	r3, [pc, #8]	; (8007da8 <free+0xc>)
 8007d9e:	4601      	mov	r1, r0
 8007da0:	6818      	ldr	r0, [r3, #0]
 8007da2:	f000 b80b 	b.w	8007dbc <_free_r>
 8007da6:	bf00      	nop
 8007da8:	2000002c 	.word	0x2000002c

08007dac <memset>:
 8007dac:	4402      	add	r2, r0
 8007dae:	4603      	mov	r3, r0
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d100      	bne.n	8007db6 <memset+0xa>
 8007db4:	4770      	bx	lr
 8007db6:	f803 1b01 	strb.w	r1, [r3], #1
 8007dba:	e7f9      	b.n	8007db0 <memset+0x4>

08007dbc <_free_r>:
 8007dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dbe:	2900      	cmp	r1, #0
 8007dc0:	d044      	beq.n	8007e4c <_free_r+0x90>
 8007dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dc6:	9001      	str	r0, [sp, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f1a1 0404 	sub.w	r4, r1, #4
 8007dce:	bfb8      	it	lt
 8007dd0:	18e4      	addlt	r4, r4, r3
 8007dd2:	f000 f8e3 	bl	8007f9c <__malloc_lock>
 8007dd6:	4a1e      	ldr	r2, [pc, #120]	; (8007e50 <_free_r+0x94>)
 8007dd8:	9801      	ldr	r0, [sp, #4]
 8007dda:	6813      	ldr	r3, [r2, #0]
 8007ddc:	b933      	cbnz	r3, 8007dec <_free_r+0x30>
 8007dde:	6063      	str	r3, [r4, #4]
 8007de0:	6014      	str	r4, [r2, #0]
 8007de2:	b003      	add	sp, #12
 8007de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007de8:	f000 b8de 	b.w	8007fa8 <__malloc_unlock>
 8007dec:	42a3      	cmp	r3, r4
 8007dee:	d908      	bls.n	8007e02 <_free_r+0x46>
 8007df0:	6825      	ldr	r5, [r4, #0]
 8007df2:	1961      	adds	r1, r4, r5
 8007df4:	428b      	cmp	r3, r1
 8007df6:	bf01      	itttt	eq
 8007df8:	6819      	ldreq	r1, [r3, #0]
 8007dfa:	685b      	ldreq	r3, [r3, #4]
 8007dfc:	1949      	addeq	r1, r1, r5
 8007dfe:	6021      	streq	r1, [r4, #0]
 8007e00:	e7ed      	b.n	8007dde <_free_r+0x22>
 8007e02:	461a      	mov	r2, r3
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	b10b      	cbz	r3, 8007e0c <_free_r+0x50>
 8007e08:	42a3      	cmp	r3, r4
 8007e0a:	d9fa      	bls.n	8007e02 <_free_r+0x46>
 8007e0c:	6811      	ldr	r1, [r2, #0]
 8007e0e:	1855      	adds	r5, r2, r1
 8007e10:	42a5      	cmp	r5, r4
 8007e12:	d10b      	bne.n	8007e2c <_free_r+0x70>
 8007e14:	6824      	ldr	r4, [r4, #0]
 8007e16:	4421      	add	r1, r4
 8007e18:	1854      	adds	r4, r2, r1
 8007e1a:	42a3      	cmp	r3, r4
 8007e1c:	6011      	str	r1, [r2, #0]
 8007e1e:	d1e0      	bne.n	8007de2 <_free_r+0x26>
 8007e20:	681c      	ldr	r4, [r3, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	6053      	str	r3, [r2, #4]
 8007e26:	4421      	add	r1, r4
 8007e28:	6011      	str	r1, [r2, #0]
 8007e2a:	e7da      	b.n	8007de2 <_free_r+0x26>
 8007e2c:	d902      	bls.n	8007e34 <_free_r+0x78>
 8007e2e:	230c      	movs	r3, #12
 8007e30:	6003      	str	r3, [r0, #0]
 8007e32:	e7d6      	b.n	8007de2 <_free_r+0x26>
 8007e34:	6825      	ldr	r5, [r4, #0]
 8007e36:	1961      	adds	r1, r4, r5
 8007e38:	428b      	cmp	r3, r1
 8007e3a:	bf04      	itt	eq
 8007e3c:	6819      	ldreq	r1, [r3, #0]
 8007e3e:	685b      	ldreq	r3, [r3, #4]
 8007e40:	6063      	str	r3, [r4, #4]
 8007e42:	bf04      	itt	eq
 8007e44:	1949      	addeq	r1, r1, r5
 8007e46:	6021      	streq	r1, [r4, #0]
 8007e48:	6054      	str	r4, [r2, #4]
 8007e4a:	e7ca      	b.n	8007de2 <_free_r+0x26>
 8007e4c:	b003      	add	sp, #12
 8007e4e:	bd30      	pop	{r4, r5, pc}
 8007e50:	2000087c 	.word	0x2000087c

08007e54 <sbrk_aligned>:
 8007e54:	b570      	push	{r4, r5, r6, lr}
 8007e56:	4e0e      	ldr	r6, [pc, #56]	; (8007e90 <sbrk_aligned+0x3c>)
 8007e58:	460c      	mov	r4, r1
 8007e5a:	6831      	ldr	r1, [r6, #0]
 8007e5c:	4605      	mov	r5, r0
 8007e5e:	b911      	cbnz	r1, 8007e66 <sbrk_aligned+0x12>
 8007e60:	f000 f88c 	bl	8007f7c <_sbrk_r>
 8007e64:	6030      	str	r0, [r6, #0]
 8007e66:	4621      	mov	r1, r4
 8007e68:	4628      	mov	r0, r5
 8007e6a:	f000 f887 	bl	8007f7c <_sbrk_r>
 8007e6e:	1c43      	adds	r3, r0, #1
 8007e70:	d00a      	beq.n	8007e88 <sbrk_aligned+0x34>
 8007e72:	1cc4      	adds	r4, r0, #3
 8007e74:	f024 0403 	bic.w	r4, r4, #3
 8007e78:	42a0      	cmp	r0, r4
 8007e7a:	d007      	beq.n	8007e8c <sbrk_aligned+0x38>
 8007e7c:	1a21      	subs	r1, r4, r0
 8007e7e:	4628      	mov	r0, r5
 8007e80:	f000 f87c 	bl	8007f7c <_sbrk_r>
 8007e84:	3001      	adds	r0, #1
 8007e86:	d101      	bne.n	8007e8c <sbrk_aligned+0x38>
 8007e88:	f04f 34ff 	mov.w	r4, #4294967295
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	bd70      	pop	{r4, r5, r6, pc}
 8007e90:	20000880 	.word	0x20000880

08007e94 <_malloc_r>:
 8007e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e98:	1ccd      	adds	r5, r1, #3
 8007e9a:	f025 0503 	bic.w	r5, r5, #3
 8007e9e:	3508      	adds	r5, #8
 8007ea0:	2d0c      	cmp	r5, #12
 8007ea2:	bf38      	it	cc
 8007ea4:	250c      	movcc	r5, #12
 8007ea6:	2d00      	cmp	r5, #0
 8007ea8:	4607      	mov	r7, r0
 8007eaa:	db01      	blt.n	8007eb0 <_malloc_r+0x1c>
 8007eac:	42a9      	cmp	r1, r5
 8007eae:	d905      	bls.n	8007ebc <_malloc_r+0x28>
 8007eb0:	230c      	movs	r3, #12
 8007eb2:	603b      	str	r3, [r7, #0]
 8007eb4:	2600      	movs	r6, #0
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ebc:	4e2e      	ldr	r6, [pc, #184]	; (8007f78 <_malloc_r+0xe4>)
 8007ebe:	f000 f86d 	bl	8007f9c <__malloc_lock>
 8007ec2:	6833      	ldr	r3, [r6, #0]
 8007ec4:	461c      	mov	r4, r3
 8007ec6:	bb34      	cbnz	r4, 8007f16 <_malloc_r+0x82>
 8007ec8:	4629      	mov	r1, r5
 8007eca:	4638      	mov	r0, r7
 8007ecc:	f7ff ffc2 	bl	8007e54 <sbrk_aligned>
 8007ed0:	1c43      	adds	r3, r0, #1
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	d14d      	bne.n	8007f72 <_malloc_r+0xde>
 8007ed6:	6834      	ldr	r4, [r6, #0]
 8007ed8:	4626      	mov	r6, r4
 8007eda:	2e00      	cmp	r6, #0
 8007edc:	d140      	bne.n	8007f60 <_malloc_r+0xcc>
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	4631      	mov	r1, r6
 8007ee2:	4638      	mov	r0, r7
 8007ee4:	eb04 0803 	add.w	r8, r4, r3
 8007ee8:	f000 f848 	bl	8007f7c <_sbrk_r>
 8007eec:	4580      	cmp	r8, r0
 8007eee:	d13a      	bne.n	8007f66 <_malloc_r+0xd2>
 8007ef0:	6821      	ldr	r1, [r4, #0]
 8007ef2:	3503      	adds	r5, #3
 8007ef4:	1a6d      	subs	r5, r5, r1
 8007ef6:	f025 0503 	bic.w	r5, r5, #3
 8007efa:	3508      	adds	r5, #8
 8007efc:	2d0c      	cmp	r5, #12
 8007efe:	bf38      	it	cc
 8007f00:	250c      	movcc	r5, #12
 8007f02:	4629      	mov	r1, r5
 8007f04:	4638      	mov	r0, r7
 8007f06:	f7ff ffa5 	bl	8007e54 <sbrk_aligned>
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	d02b      	beq.n	8007f66 <_malloc_r+0xd2>
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	442b      	add	r3, r5
 8007f12:	6023      	str	r3, [r4, #0]
 8007f14:	e00e      	b.n	8007f34 <_malloc_r+0xa0>
 8007f16:	6822      	ldr	r2, [r4, #0]
 8007f18:	1b52      	subs	r2, r2, r5
 8007f1a:	d41e      	bmi.n	8007f5a <_malloc_r+0xc6>
 8007f1c:	2a0b      	cmp	r2, #11
 8007f1e:	d916      	bls.n	8007f4e <_malloc_r+0xba>
 8007f20:	1961      	adds	r1, r4, r5
 8007f22:	42a3      	cmp	r3, r4
 8007f24:	6025      	str	r5, [r4, #0]
 8007f26:	bf18      	it	ne
 8007f28:	6059      	strne	r1, [r3, #4]
 8007f2a:	6863      	ldr	r3, [r4, #4]
 8007f2c:	bf08      	it	eq
 8007f2e:	6031      	streq	r1, [r6, #0]
 8007f30:	5162      	str	r2, [r4, r5]
 8007f32:	604b      	str	r3, [r1, #4]
 8007f34:	4638      	mov	r0, r7
 8007f36:	f104 060b 	add.w	r6, r4, #11
 8007f3a:	f000 f835 	bl	8007fa8 <__malloc_unlock>
 8007f3e:	f026 0607 	bic.w	r6, r6, #7
 8007f42:	1d23      	adds	r3, r4, #4
 8007f44:	1af2      	subs	r2, r6, r3
 8007f46:	d0b6      	beq.n	8007eb6 <_malloc_r+0x22>
 8007f48:	1b9b      	subs	r3, r3, r6
 8007f4a:	50a3      	str	r3, [r4, r2]
 8007f4c:	e7b3      	b.n	8007eb6 <_malloc_r+0x22>
 8007f4e:	6862      	ldr	r2, [r4, #4]
 8007f50:	42a3      	cmp	r3, r4
 8007f52:	bf0c      	ite	eq
 8007f54:	6032      	streq	r2, [r6, #0]
 8007f56:	605a      	strne	r2, [r3, #4]
 8007f58:	e7ec      	b.n	8007f34 <_malloc_r+0xa0>
 8007f5a:	4623      	mov	r3, r4
 8007f5c:	6864      	ldr	r4, [r4, #4]
 8007f5e:	e7b2      	b.n	8007ec6 <_malloc_r+0x32>
 8007f60:	4634      	mov	r4, r6
 8007f62:	6876      	ldr	r6, [r6, #4]
 8007f64:	e7b9      	b.n	8007eda <_malloc_r+0x46>
 8007f66:	230c      	movs	r3, #12
 8007f68:	603b      	str	r3, [r7, #0]
 8007f6a:	4638      	mov	r0, r7
 8007f6c:	f000 f81c 	bl	8007fa8 <__malloc_unlock>
 8007f70:	e7a1      	b.n	8007eb6 <_malloc_r+0x22>
 8007f72:	6025      	str	r5, [r4, #0]
 8007f74:	e7de      	b.n	8007f34 <_malloc_r+0xa0>
 8007f76:	bf00      	nop
 8007f78:	2000087c 	.word	0x2000087c

08007f7c <_sbrk_r>:
 8007f7c:	b538      	push	{r3, r4, r5, lr}
 8007f7e:	4d06      	ldr	r5, [pc, #24]	; (8007f98 <_sbrk_r+0x1c>)
 8007f80:	2300      	movs	r3, #0
 8007f82:	4604      	mov	r4, r0
 8007f84:	4608      	mov	r0, r1
 8007f86:	602b      	str	r3, [r5, #0]
 8007f88:	f7f8 fd5e 	bl	8000a48 <_sbrk>
 8007f8c:	1c43      	adds	r3, r0, #1
 8007f8e:	d102      	bne.n	8007f96 <_sbrk_r+0x1a>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	b103      	cbz	r3, 8007f96 <_sbrk_r+0x1a>
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	bd38      	pop	{r3, r4, r5, pc}
 8007f98:	20000884 	.word	0x20000884

08007f9c <__malloc_lock>:
 8007f9c:	4801      	ldr	r0, [pc, #4]	; (8007fa4 <__malloc_lock+0x8>)
 8007f9e:	f000 b809 	b.w	8007fb4 <__retarget_lock_acquire_recursive>
 8007fa2:	bf00      	nop
 8007fa4:	20000888 	.word	0x20000888

08007fa8 <__malloc_unlock>:
 8007fa8:	4801      	ldr	r0, [pc, #4]	; (8007fb0 <__malloc_unlock+0x8>)
 8007faa:	f000 b804 	b.w	8007fb6 <__retarget_lock_release_recursive>
 8007fae:	bf00      	nop
 8007fb0:	20000888 	.word	0x20000888

08007fb4 <__retarget_lock_acquire_recursive>:
 8007fb4:	4770      	bx	lr

08007fb6 <__retarget_lock_release_recursive>:
 8007fb6:	4770      	bx	lr

08007fb8 <_init>:
 8007fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fba:	bf00      	nop
 8007fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fbe:	bc08      	pop	{r3}
 8007fc0:	469e      	mov	lr, r3
 8007fc2:	4770      	bx	lr

08007fc4 <_fini>:
 8007fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc6:	bf00      	nop
 8007fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fca:	bc08      	pop	{r3}
 8007fcc:	469e      	mov	lr, r3
 8007fce:	4770      	bx	lr
