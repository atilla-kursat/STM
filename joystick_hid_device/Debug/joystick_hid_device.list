
joystick_hid_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000713c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080072c4  080072c4  000172c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800731c  0800731c  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  0800731c  0800731c  0001731c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007324  08007324  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007324  08007324  00017324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007328  08007328  00017328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  0800732c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002011c  2**0
                  CONTENTS
 10 .bss          00000ab0  2000011c  2000011c  0002011c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bcc  20000bcc  0002011c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e68b  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002929  00000000  00000000  0002e7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  00031100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a98  00000000  00000000  00031cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d13  00000000  00000000  00032768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f671  00000000  00000000  0005647b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d064a  00000000  00000000  00065aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00136136  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f50  00000000  00000000  00136188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000011c 	.word	0x2000011c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080072ac 	.word	0x080072ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000120 	.word	0x20000120
 80001c4:	080072ac 	.word	0x080072ac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int rawx=0,rawy=0,x,y;
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	2300      	movs	r3, #0
 80004d8:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fadb 	bl	8000a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f843 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f94f 	bl	8000784 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004e6:	f000 f8a9 	bl	800063c <MX_ADC1_Init>
  MX_ADC2_Init();
 80004ea:	f000 f8f9 	bl	80006e0 <MX_ADC2_Init>
  MX_USB_DEVICE_Init();
 80004ee:	f006 fa6b 	bl	80069c8 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80004f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f6:	4819      	ldr	r0, [pc, #100]	; (800055c <main+0x90>)
 80004f8:	f001 fa29 	bl	800194e <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80004fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000500:	4816      	ldr	r0, [pc, #88]	; (800055c <main+0x90>)
 8000502:	f001 fa24 	bl	800194e <HAL_GPIO_TogglePin>
	  HAL_ADC_Start(&hadc1);
 8000506:	4816      	ldr	r0, [pc, #88]	; (8000560 <main+0x94>)
 8000508:	f000 fb9e 	bl	8000c48 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 800050c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000510:	4813      	ldr	r0, [pc, #76]	; (8000560 <main+0x94>)
 8000512:	f000 fc9e 	bl	8000e52 <HAL_ADC_PollForConversion>
	  rawx = HAL_ADC_GetValue(&hadc1);
 8000516:	4812      	ldr	r0, [pc, #72]	; (8000560 <main+0x94>)
 8000518:	f000 fd26 	bl	8000f68 <HAL_ADC_GetValue>
 800051c:	4603      	mov	r3, r0
 800051e:	607b      	str	r3, [r7, #4]
	  HAL_ADC_Stop(&hadc1);
 8000520:	480f      	ldr	r0, [pc, #60]	; (8000560 <main+0x94>)
 8000522:	f000 fc63 	bl	8000dec <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc2);
 8000526:	480f      	ldr	r0, [pc, #60]	; (8000564 <main+0x98>)
 8000528:	f000 fb8e 	bl	8000c48 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 1000);
 800052c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000530:	480c      	ldr	r0, [pc, #48]	; (8000564 <main+0x98>)
 8000532:	f000 fc8e 	bl	8000e52 <HAL_ADC_PollForConversion>
	  rawy = HAL_ADC_GetValue(&hadc2);
 8000536:	480b      	ldr	r0, [pc, #44]	; (8000564 <main+0x98>)
 8000538:	f000 fd16 	bl	8000f68 <HAL_ADC_GetValue>
 800053c:	4603      	mov	r3, r0
 800053e:	603b      	str	r3, [r7, #0]
	  HAL_ADC_Stop(&hadc2);
 8000540:	4808      	ldr	r0, [pc, #32]	; (8000564 <main+0x98>)
 8000542:	f000 fc53 	bl	8000dec <HAL_ADC_Stop>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000546:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054a:	4804      	ldr	r0, [pc, #16]	; (800055c <main+0x90>)
 800054c:	f001 f9ff 	bl	800194e <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000550:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000554:	4801      	ldr	r0, [pc, #4]	; (800055c <main+0x90>)
 8000556:	f001 f9fa 	bl	800194e <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800055a:	e7ca      	b.n	80004f2 <main+0x26>
 800055c:	40020c00 	.word	0x40020c00
 8000560:	20000138 	.word	0x20000138
 8000564:	20000180 	.word	0x20000180

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f006 fe90 	bl	800729c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b28      	ldr	r3, [pc, #160]	; (8000634 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a27      	ldr	r2, [pc, #156]	; (8000634 <SystemClock_Config+0xcc>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <SystemClock_Config+0xcc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <SystemClock_Config+0xd0>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <SystemClock_Config+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d8:	2308      	movs	r3, #8
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e6:	2307      	movs	r3, #7
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fc2c 	bl	8002e4c <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005fa:	f000 f939 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2302      	movs	r3, #2
 8000604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800060e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000614:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2105      	movs	r1, #5
 800061c:	4618      	mov	r0, r3
 800061e:	f002 fe8d 	bl	800333c <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000628:	f000 f922 	bl	8000870 <Error_Handler>
  }
}
 800062c:	bf00      	nop
 800062e:	3750      	adds	r7, #80	; 0x50
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000642:	463b      	mov	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800064e:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <MX_ADC1_Init+0x9c>)
 8000652:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000656:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800065a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800065c:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_ADC1_Init+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000662:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000668:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_ADC1_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066e:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_ADC1_Init+0x98>)
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <MX_ADC1_Init+0xa0>)
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_ADC1_Init+0x98>)
 800068a:	2201      	movs	r2, #1
 800068c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000698:	2201      	movs	r2, #1
 800069a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <MX_ADC1_Init+0x98>)
 800069e:	f000 fa8f 	bl	8000bc0 <HAL_ADC_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006a8:	f000 f8e2 	bl	8000870 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	4619      	mov	r1, r3
 80006bc:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_ADC1_Init+0x98>)
 80006be:	f000 fc61 	bl	8000f84 <HAL_ADC_ConfigChannel>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006c8:	f000 f8d2 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000138 	.word	0x20000138
 80006d8:	40012000 	.word	0x40012000
 80006dc:	0f000001 	.word	0x0f000001

080006e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e6:	463b      	mov	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80006f2:	4b21      	ldr	r3, [pc, #132]	; (8000778 <MX_ADC2_Init+0x98>)
 80006f4:	4a21      	ldr	r2, [pc, #132]	; (800077c <MX_ADC2_Init+0x9c>)
 80006f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <MX_ADC2_Init+0x98>)
 80006fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000700:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <MX_ADC2_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <MX_ADC2_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800070c:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_ADC2_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <MX_ADC2_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_ADC2_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_ADC2_Init+0x98>)
 8000722:	4a17      	ldr	r2, [pc, #92]	; (8000780 <MX_ADC2_Init+0xa0>)
 8000724:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_ADC2_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_ADC2_Init+0x98>)
 800072e:	2201      	movs	r2, #1
 8000730:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_ADC2_Init+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_ADC2_Init+0x98>)
 800073c:	2201      	movs	r2, #1
 800073e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000740:	480d      	ldr	r0, [pc, #52]	; (8000778 <MX_ADC2_Init+0x98>)
 8000742:	f000 fa3d 	bl	8000bc0 <HAL_ADC_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800074c:	f000 f890 	bl	8000870 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000750:	2305      	movs	r3, #5
 8000752:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000754:	2301      	movs	r3, #1
 8000756:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_ADC2_Init+0x98>)
 8000762:	f000 fc0f 	bl	8000f84 <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800076c:	f000 f880 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000180 	.word	0x20000180
 800077c:	40012100 	.word	0x40012100
 8000780:	0f000001 	.word	0x0f000001

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	4b31      	ldr	r3, [pc, #196]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a30      	ldr	r2, [pc, #192]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a29      	ldr	r2, [pc, #164]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b23      	ldr	r3, [pc, #140]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a22      	ldr	r2, [pc, #136]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <MX_GPIO_Init+0xe0>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <MX_GPIO_Init+0xe0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2101      	movs	r1, #1
 800080e:	4816      	ldr	r0, [pc, #88]	; (8000868 <MX_GPIO_Init+0xe4>)
 8000810:	f001 f884 	bl	800191c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800081a:	4814      	ldr	r0, [pc, #80]	; (800086c <MX_GPIO_Init+0xe8>)
 800081c:	f001 f87e 	bl	800191c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000820:	2301      	movs	r3, #1
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	480c      	ldr	r0, [pc, #48]	; (8000868 <MX_GPIO_Init+0xe4>)
 8000838:	f000 fed4 	bl	80015e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800083c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_GPIO_Init+0xe8>)
 8000856:	f000 fec5 	bl	80015e4 <HAL_GPIO_Init>

}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40020800 	.word	0x40020800
 800086c:	40020400 	.word	0x40020400

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	e7fe      	b.n	8000878 <Error_Handler+0x8>
	...

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <HAL_MspInit+0x4c>)
 800088c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000890:	6453      	str	r3, [r2, #68]	; 0x44
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008ba:	2007      	movs	r0, #7
 80008bc:	f000 fe50 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08c      	sub	sp, #48	; 0x30
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a2e      	ldr	r2, [pc, #184]	; (80009a4 <HAL_ADC_MspInit+0xd8>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d128      	bne.n	8000940 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	61bb      	str	r3, [r7, #24]
 80008f2:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <HAL_ADC_MspInit+0xdc>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	4a2c      	ldr	r2, [pc, #176]	; (80009a8 <HAL_ADC_MspInit+0xdc>)
 80008f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008fc:	6453      	str	r3, [r2, #68]	; 0x44
 80008fe:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <HAL_ADC_MspInit+0xdc>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <HAL_ADC_MspInit+0xdc>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a25      	ldr	r2, [pc, #148]	; (80009a8 <HAL_ADC_MspInit+0xdc>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <HAL_ADC_MspInit+0xdc>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000926:	2301      	movs	r3, #1
 8000928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800092a:	2303      	movs	r3, #3
 800092c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	481c      	ldr	r0, [pc, #112]	; (80009ac <HAL_ADC_MspInit+0xe0>)
 800093a:	f000 fe53 	bl	80015e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800093e:	e02c      	b.n	800099a <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a1a      	ldr	r2, [pc, #104]	; (80009b0 <HAL_ADC_MspInit+0xe4>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d127      	bne.n	800099a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <HAL_ADC_MspInit+0xdc>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a15      	ldr	r2, [pc, #84]	; (80009a8 <HAL_ADC_MspInit+0xdc>)
 8000954:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <HAL_ADC_MspInit+0xdc>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_ADC_MspInit+0xdc>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <HAL_ADC_MspInit+0xdc>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_ADC_MspInit+0xdc>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000982:	2322      	movs	r3, #34	; 0x22
 8000984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000986:	2303      	movs	r3, #3
 8000988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <HAL_ADC_MspInit+0xe0>)
 8000996:	f000 fe25 	bl	80015e4 <HAL_GPIO_Init>
}
 800099a:	bf00      	nop
 800099c:	3730      	adds	r7, #48	; 0x30
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40012000 	.word	0x40012000
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020000 	.word	0x40020000
 80009b0:	40012100 	.word	0x40012100

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <NMI_Handler+0x4>

080009ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <MemManage_Handler+0x4>

080009c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a00:	f000 f89a 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a0c:	4802      	ldr	r0, [pc, #8]	; (8000a18 <OTG_FS_IRQHandler+0x10>)
 8000a0e:	f001 f908 	bl	8001c22 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200006ac 	.word	0x200006ac

08000a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <SystemInit+0x20>)
 8000a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <SystemInit+0x20>)
 8000a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a44:	480d      	ldr	r0, [pc, #52]	; (8000a7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a46:	490e      	ldr	r1, [pc, #56]	; (8000a80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a48:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a5c:	4c0b      	ldr	r4, [pc, #44]	; (8000a8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a6a:	f7ff ffd7 	bl	8000a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6e:	f006 fbf1 	bl	8007254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a72:	f7ff fd2b 	bl	80004cc <main>
  bx  lr    
 8000a76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8000a84:	0800732c 	.word	0x0800732c
  ldr r2, =_sbss
 8000a88:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8000a8c:	20000bcc 	.word	0x20000bcc

08000a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC_IRQHandler>
	...

08000a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_Init+0x40>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ad4 <HAL_Init+0x40>)
 8000a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <HAL_Init+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <HAL_Init+0x40>)
 8000aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_Init+0x40>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <HAL_Init+0x40>)
 8000ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 fd4f 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f000 f808 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac8:	f7ff fed8 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023c00 	.word	0x40023c00

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_InitTick+0x54>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x58>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 fd67 	bl	80015ca <HAL_SYSTICK_Config>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00e      	b.n	8000b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d80a      	bhi.n	8000b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f000 fd2f 	bl	8001576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <HAL_InitTick+0x5c>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	20000008 	.word	0x20000008
 8000b34:	20000004 	.word	0x20000004

08000b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	200001c8 	.word	0x200001c8

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	200001c8 	.word	0x200001c8

08000b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b80:	f7ff ffee 	bl	8000b60 <HAL_GetTick>
 8000b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b90:	d005      	beq.n	8000b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_Delay+0x44>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b9e:	bf00      	nop
 8000ba0:	f7ff ffde 	bl	8000b60 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8f7      	bhi.n	8000ba0 <HAL_Delay+0x28>
  {
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008

08000bc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e033      	b.n	8000c3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d109      	bne.n	8000bf2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff fe74 	bl	80008cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f003 0310 	and.w	r3, r3, #16
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d118      	bne.n	8000c30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c06:	f023 0302 	bic.w	r3, r3, #2
 8000c0a:	f043 0202 	orr.w	r2, r3, #2
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f000 fad8 	bl	80011c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f023 0303 	bic.w	r3, r3, #3
 8000c26:	f043 0201 	orr.w	r2, r3, #1
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c2e:	e001      	b.n	8000c34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d101      	bne.n	8000c62 <HAL_ADC_Start+0x1a>
 8000c5e:	2302      	movs	r3, #2
 8000c60:	e0b2      	b.n	8000dc8 <HAL_ADC_Start+0x180>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2201      	movs	r2, #1
 8000c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d018      	beq.n	8000caa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f042 0201 	orr.w	r2, r2, #1
 8000c86:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c88:	4b52      	ldr	r3, [pc, #328]	; (8000dd4 <HAL_ADC_Start+0x18c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a52      	ldr	r2, [pc, #328]	; (8000dd8 <HAL_ADC_Start+0x190>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	0c9a      	lsrs	r2, r3, #18
 8000c94:	4613      	mov	r3, r2
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	4413      	add	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000c9c:	e002      	b.n	8000ca4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d1f9      	bne.n	8000c9e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d17a      	bne.n	8000dae <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cc0:	f023 0301 	bic.w	r3, r3, #1
 8000cc4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d007      	beq.n	8000cea <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ce2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cf6:	d106      	bne.n	8000d06 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfc:	f023 0206 	bic.w	r2, r3, #6
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	645a      	str	r2, [r3, #68]	; 0x44
 8000d04:	e002      	b.n	8000d0c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d14:	4b31      	ldr	r3, [pc, #196]	; (8000ddc <HAL_ADC_Start+0x194>)
 8000d16:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d20:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 031f 	and.w	r3, r3, #31
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d12a      	bne.n	8000d84 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a2b      	ldr	r2, [pc, #172]	; (8000de0 <HAL_ADC_Start+0x198>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d015      	beq.n	8000d64 <HAL_ADC_Start+0x11c>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a29      	ldr	r2, [pc, #164]	; (8000de4 <HAL_ADC_Start+0x19c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d105      	bne.n	8000d4e <HAL_ADC_Start+0x106>
 8000d42:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <HAL_ADC_Start+0x194>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 031f 	and.w	r3, r3, #31
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d00a      	beq.n	8000d64 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a25      	ldr	r2, [pc, #148]	; (8000de8 <HAL_ADC_Start+0x1a0>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d136      	bne.n	8000dc6 <HAL_ADC_Start+0x17e>
 8000d58:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <HAL_ADC_Start+0x194>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0310 	and.w	r3, r3, #16
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d130      	bne.n	8000dc6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d129      	bne.n	8000dc6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	e020      	b.n	8000dc6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a15      	ldr	r2, [pc, #84]	; (8000de0 <HAL_ADC_Start+0x198>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d11b      	bne.n	8000dc6 <HAL_ADC_Start+0x17e>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d114      	bne.n	8000dc6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	689a      	ldr	r2, [r3, #8]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	e00b      	b.n	8000dc6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	f043 0210 	orr.w	r2, r3, #16
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	f043 0201 	orr.w	r2, r3, #1
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	431bde83 	.word	0x431bde83
 8000ddc:	40012300 	.word	0x40012300
 8000de0:	40012000 	.word	0x40012000
 8000de4:	40012100 	.word	0x40012100
 8000de8:	40012200 	.word	0x40012200

08000dec <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d101      	bne.n	8000e02 <HAL_ADC_Stop+0x16>
 8000dfe:	2302      	movs	r3, #2
 8000e00:	e021      	b.n	8000e46 <HAL_ADC_Stop+0x5a>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2201      	movs	r2, #1
 8000e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f022 0201 	bic.w	r2, r2, #1
 8000e18:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d109      	bne.n	8000e3c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e30:	f023 0301 	bic.w	r3, r3, #1
 8000e34:	f043 0201 	orr.w	r2, r3, #1
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b084      	sub	sp, #16
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e6e:	d113      	bne.n	8000e98 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e7e:	d10b      	bne.n	8000e98 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	f043 0220 	orr.w	r2, r3, #32
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e063      	b.n	8000f60 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000e98:	f7ff fe62 	bl	8000b60 <HAL_GetTick>
 8000e9c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e9e:	e021      	b.n	8000ee4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea6:	d01d      	beq.n	8000ee4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d007      	beq.n	8000ebe <HAL_ADC_PollForConversion+0x6c>
 8000eae:	f7ff fe57 	bl	8000b60 <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d212      	bcs.n	8000ee4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d00b      	beq.n	8000ee4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f043 0204 	orr.w	r2, r3, #4
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e03d      	b.n	8000f60 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d1d6      	bne.n	8000ea0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f06f 0212 	mvn.w	r2, #18
 8000efa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d123      	bne.n	8000f5e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d11f      	bne.n	8000f5e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f24:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d006      	beq.n	8000f3a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d111      	bne.n	8000f5e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d105      	bne.n	8000f5e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f043 0201 	orr.w	r2, r3, #1
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d101      	bne.n	8000fa0 <HAL_ADC_ConfigChannel+0x1c>
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	e105      	b.n	80011ac <HAL_ADC_ConfigChannel+0x228>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b09      	cmp	r3, #9
 8000fae:	d925      	bls.n	8000ffc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	68d9      	ldr	r1, [r3, #12]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	3b1e      	subs	r3, #30
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43da      	mvns	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	400a      	ands	r2, r1
 8000fd4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68d9      	ldr	r1, [r3, #12]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	4603      	mov	r3, r0
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	4403      	add	r3, r0
 8000fee:	3b1e      	subs	r3, #30
 8000ff0:	409a      	lsls	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	e022      	b.n	8001042 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6919      	ldr	r1, [r3, #16]
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	b29b      	uxth	r3, r3
 8001008:	461a      	mov	r2, r3
 800100a:	4613      	mov	r3, r2
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	4413      	add	r3, r2
 8001010:	2207      	movs	r2, #7
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	400a      	ands	r2, r1
 800101e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6919      	ldr	r1, [r3, #16]
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	b29b      	uxth	r3, r3
 8001030:	4618      	mov	r0, r3
 8001032:	4603      	mov	r3, r0
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	4403      	add	r3, r0
 8001038:	409a      	lsls	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	430a      	orrs	r2, r1
 8001040:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b06      	cmp	r3, #6
 8001048:	d824      	bhi.n	8001094 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	3b05      	subs	r3, #5
 800105c:	221f      	movs	r2, #31
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	400a      	ands	r2, r1
 800106a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	b29b      	uxth	r3, r3
 8001078:	4618      	mov	r0, r3
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	4613      	mov	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	3b05      	subs	r3, #5
 8001086:	fa00 f203 	lsl.w	r2, r0, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	430a      	orrs	r2, r1
 8001090:	635a      	str	r2, [r3, #52]	; 0x34
 8001092:	e04c      	b.n	800112e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b0c      	cmp	r3, #12
 800109a:	d824      	bhi.n	80010e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	3b23      	subs	r3, #35	; 0x23
 80010ae:	221f      	movs	r2, #31
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43da      	mvns	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	400a      	ands	r2, r1
 80010bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	3b23      	subs	r3, #35	; 0x23
 80010d8:	fa00 f203 	lsl.w	r2, r0, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	631a      	str	r2, [r3, #48]	; 0x30
 80010e4:	e023      	b.n	800112e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	3b41      	subs	r3, #65	; 0x41
 80010f8:	221f      	movs	r2, #31
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	400a      	ands	r2, r1
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	b29b      	uxth	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	3b41      	subs	r3, #65	; 0x41
 8001122:	fa00 f203 	lsl.w	r2, r0, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	430a      	orrs	r2, r1
 800112c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <HAL_ADC_ConfigChannel+0x234>)
 8001130:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a21      	ldr	r2, [pc, #132]	; (80011bc <HAL_ADC_ConfigChannel+0x238>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d109      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x1cc>
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b12      	cmp	r3, #18
 8001142:	d105      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a19      	ldr	r2, [pc, #100]	; (80011bc <HAL_ADC_ConfigChannel+0x238>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d123      	bne.n	80011a2 <HAL_ADC_ConfigChannel+0x21e>
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b10      	cmp	r3, #16
 8001160:	d003      	beq.n	800116a <HAL_ADC_ConfigChannel+0x1e6>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b11      	cmp	r3, #17
 8001168:	d11b      	bne.n	80011a2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b10      	cmp	r3, #16
 800117c:	d111      	bne.n	80011a2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <HAL_ADC_ConfigChannel+0x23c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a10      	ldr	r2, [pc, #64]	; (80011c4 <HAL_ADC_ConfigChannel+0x240>)
 8001184:	fba2 2303 	umull	r2, r3, r2, r3
 8001188:	0c9a      	lsrs	r2, r3, #18
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001194:	e002      	b.n	800119c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	3b01      	subs	r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f9      	bne.n	8001196 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	40012300 	.word	0x40012300
 80011bc:	40012000 	.word	0x40012000
 80011c0:	20000000 	.word	0x20000000
 80011c4:	431bde83 	.word	0x431bde83

080011c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011d0:	4b79      	ldr	r3, [pc, #484]	; (80013b8 <ADC_Init+0x1f0>)
 80011d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	431a      	orrs	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6859      	ldr	r1, [r3, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	021a      	lsls	r2, r3, #8
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001220:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6859      	ldr	r1, [r3, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	430a      	orrs	r2, r1
 8001232:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001242:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6899      	ldr	r1, [r3, #8]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125a:	4a58      	ldr	r2, [pc, #352]	; (80013bc <ADC_Init+0x1f4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d022      	beq.n	80012a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800126e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6899      	ldr	r1, [r3, #8]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001290:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6899      	ldr	r1, [r3, #8]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	e00f      	b.n	80012c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0202 	bic.w	r2, r2, #2
 80012d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6899      	ldr	r1, [r3, #8]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	7e1b      	ldrb	r3, [r3, #24]
 80012e0:	005a      	lsls	r2, r3, #1
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d01b      	beq.n	800132c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001302:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001312:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6859      	ldr	r1, [r3, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131e:	3b01      	subs	r3, #1
 8001320:	035a      	lsls	r2, r3, #13
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	e007      	b.n	800133c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800133a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	3b01      	subs	r3, #1
 8001358:	051a      	lsls	r2, r3, #20
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	430a      	orrs	r2, r1
 8001360:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001370:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6899      	ldr	r1, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800137e:	025a      	lsls	r2, r3, #9
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	430a      	orrs	r2, r1
 8001386:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001396:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6899      	ldr	r1, [r3, #8]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	029a      	lsls	r2, r3, #10
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	609a      	str	r2, [r3, #8]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	40012300 	.word	0x40012300
 80013bc:	0f000001 	.word	0x0f000001

080013c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013dc:	4013      	ands	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60d3      	str	r3, [r2, #12]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <__NVIC_GetPriorityGrouping+0x18>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	f003 0307 	and.w	r3, r3, #7
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	db0b      	blt.n	800144e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f003 021f 	and.w	r2, r3, #31
 800143c:	4907      	ldr	r1, [pc, #28]	; (800145c <__NVIC_EnableIRQ+0x38>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	2001      	movs	r0, #1
 8001446:	fa00 f202 	lsl.w	r2, r0, r2
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e100 	.word	0xe000e100

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	; (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	; (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
         );
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800152c:	d301      	bcc.n	8001532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152e:	2301      	movs	r3, #1
 8001530:	e00f      	b.n	8001552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <SysTick_Config+0x40>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153a:	210f      	movs	r1, #15
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f7ff ff8e 	bl	8001460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <SysTick_Config+0x40>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <SysTick_Config+0x40>)
 800154c:	2207      	movs	r2, #7
 800154e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	e000e010 	.word	0xe000e010

08001560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff29 	bl	80013c0 <__NVIC_SetPriorityGrouping>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001588:	f7ff ff3e 	bl	8001408 <__NVIC_GetPriorityGrouping>
 800158c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff ff8e 	bl	80014b4 <NVIC_EncodePriority>
 8001598:	4602      	mov	r2, r0
 800159a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff5d 	bl	8001460 <__NVIC_SetPriority>
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff31 	bl	8001424 <__NVIC_EnableIRQ>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffa2 	bl	800151c <SysTick_Config>
 80015d8:	4603      	mov	r3, r0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
 80015fe:	e16b      	b.n	80018d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001600:	2201      	movs	r2, #1
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	429a      	cmp	r2, r3
 800161a:	f040 815a 	bne.w	80018d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	2b01      	cmp	r3, #1
 8001628:	d005      	beq.n	8001636 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001632:	2b02      	cmp	r3, #2
 8001634:	d130      	bne.n	8001698 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	2203      	movs	r2, #3
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800166c:	2201      	movs	r2, #1
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	f003 0201 	and.w	r2, r3, #1
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d017      	beq.n	80016d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	2203      	movs	r2, #3
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d123      	bne.n	8001728 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	08da      	lsrs	r2, r3, #3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3208      	adds	r2, #8
 80016e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	220f      	movs	r2, #15
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	691a      	ldr	r2, [r3, #16]
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	08da      	lsrs	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3208      	adds	r2, #8
 8001722:	69b9      	ldr	r1, [r7, #24]
 8001724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	2203      	movs	r2, #3
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0203 	and.w	r2, r3, #3
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 80b4 	beq.w	80018d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b60      	ldr	r3, [pc, #384]	; (80018f0 <HAL_GPIO_Init+0x30c>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	4a5f      	ldr	r2, [pc, #380]	; (80018f0 <HAL_GPIO_Init+0x30c>)
 8001774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001778:	6453      	str	r3, [r2, #68]	; 0x44
 800177a:	4b5d      	ldr	r3, [pc, #372]	; (80018f0 <HAL_GPIO_Init+0x30c>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001786:	4a5b      	ldr	r2, [pc, #364]	; (80018f4 <HAL_GPIO_Init+0x310>)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	3302      	adds	r3, #2
 800178e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	220f      	movs	r2, #15
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a52      	ldr	r2, [pc, #328]	; (80018f8 <HAL_GPIO_Init+0x314>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d02b      	beq.n	800180a <HAL_GPIO_Init+0x226>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a51      	ldr	r2, [pc, #324]	; (80018fc <HAL_GPIO_Init+0x318>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d025      	beq.n	8001806 <HAL_GPIO_Init+0x222>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a50      	ldr	r2, [pc, #320]	; (8001900 <HAL_GPIO_Init+0x31c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d01f      	beq.n	8001802 <HAL_GPIO_Init+0x21e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a4f      	ldr	r2, [pc, #316]	; (8001904 <HAL_GPIO_Init+0x320>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d019      	beq.n	80017fe <HAL_GPIO_Init+0x21a>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a4e      	ldr	r2, [pc, #312]	; (8001908 <HAL_GPIO_Init+0x324>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d013      	beq.n	80017fa <HAL_GPIO_Init+0x216>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4d      	ldr	r2, [pc, #308]	; (800190c <HAL_GPIO_Init+0x328>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d00d      	beq.n	80017f6 <HAL_GPIO_Init+0x212>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a4c      	ldr	r2, [pc, #304]	; (8001910 <HAL_GPIO_Init+0x32c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d007      	beq.n	80017f2 <HAL_GPIO_Init+0x20e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4b      	ldr	r2, [pc, #300]	; (8001914 <HAL_GPIO_Init+0x330>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d101      	bne.n	80017ee <HAL_GPIO_Init+0x20a>
 80017ea:	2307      	movs	r3, #7
 80017ec:	e00e      	b.n	800180c <HAL_GPIO_Init+0x228>
 80017ee:	2308      	movs	r3, #8
 80017f0:	e00c      	b.n	800180c <HAL_GPIO_Init+0x228>
 80017f2:	2306      	movs	r3, #6
 80017f4:	e00a      	b.n	800180c <HAL_GPIO_Init+0x228>
 80017f6:	2305      	movs	r3, #5
 80017f8:	e008      	b.n	800180c <HAL_GPIO_Init+0x228>
 80017fa:	2304      	movs	r3, #4
 80017fc:	e006      	b.n	800180c <HAL_GPIO_Init+0x228>
 80017fe:	2303      	movs	r3, #3
 8001800:	e004      	b.n	800180c <HAL_GPIO_Init+0x228>
 8001802:	2302      	movs	r3, #2
 8001804:	e002      	b.n	800180c <HAL_GPIO_Init+0x228>
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <HAL_GPIO_Init+0x228>
 800180a:	2300      	movs	r3, #0
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	f002 0203 	and.w	r2, r2, #3
 8001812:	0092      	lsls	r2, r2, #2
 8001814:	4093      	lsls	r3, r2
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800181c:	4935      	ldr	r1, [pc, #212]	; (80018f4 <HAL_GPIO_Init+0x310>)
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	3302      	adds	r3, #2
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800182a:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <HAL_GPIO_Init+0x334>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800184e:	4a32      	ldr	r2, [pc, #200]	; (8001918 <HAL_GPIO_Init+0x334>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001854:	4b30      	ldr	r3, [pc, #192]	; (8001918 <HAL_GPIO_Init+0x334>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001878:	4a27      	ldr	r2, [pc, #156]	; (8001918 <HAL_GPIO_Init+0x334>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800187e:	4b26      	ldr	r3, [pc, #152]	; (8001918 <HAL_GPIO_Init+0x334>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018a2:	4a1d      	ldr	r2, [pc, #116]	; (8001918 <HAL_GPIO_Init+0x334>)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <HAL_GPIO_Init+0x334>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018cc:	4a12      	ldr	r2, [pc, #72]	; (8001918 <HAL_GPIO_Init+0x334>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3301      	adds	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	2b0f      	cmp	r3, #15
 80018dc:	f67f ae90 	bls.w	8001600 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3724      	adds	r7, #36	; 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40013800 	.word	0x40013800
 80018f8:	40020000 	.word	0x40020000
 80018fc:	40020400 	.word	0x40020400
 8001900:	40020800 	.word	0x40020800
 8001904:	40020c00 	.word	0x40020c00
 8001908:	40021000 	.word	0x40021000
 800190c:	40021400 	.word	0x40021400
 8001910:	40021800 	.word	0x40021800
 8001914:	40021c00 	.word	0x40021c00
 8001918:	40013c00 	.word	0x40013c00

0800191c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]
 8001928:	4613      	mov	r3, r2
 800192a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800192c:	787b      	ldrb	r3, [r7, #1]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001932:	887a      	ldrh	r2, [r7, #2]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001938:	e003      	b.n	8001942 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800193a:	887b      	ldrh	r3, [r7, #2]
 800193c:	041a      	lsls	r2, r3, #16
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	619a      	str	r2, [r3, #24]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800194e:	b480      	push	{r7}
 8001950:	b085      	sub	sp, #20
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	460b      	mov	r3, r1
 8001958:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001960:	887a      	ldrh	r2, [r7, #2]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4013      	ands	r3, r2
 8001966:	041a      	lsls	r2, r3, #16
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43d9      	mvns	r1, r3
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	400b      	ands	r3, r1
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	619a      	str	r2, [r3, #24]
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001982:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001984:	b08f      	sub	sp, #60	; 0x3c
 8001986:	af0a      	add	r7, sp, #40	; 0x28
 8001988:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e10f      	b.n	8001bb4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d106      	bne.n	80019b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f005 f940 	bl	8006c34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2203      	movs	r2, #3
 80019b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f001 ffbf 	bl	8003956 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	687e      	ldr	r6, [r7, #4]
 80019e0:	466d      	mov	r5, sp
 80019e2:	f106 0410 	add.w	r4, r6, #16
 80019e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80019f6:	1d33      	adds	r3, r6, #4
 80019f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019fa:	6838      	ldr	r0, [r7, #0]
 80019fc:	f001 fe96 	bl	800372c <USB_CoreInit>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d005      	beq.n	8001a12 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2202      	movs	r2, #2
 8001a0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e0d0      	b.n	8001bb4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2100      	movs	r1, #0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f001 ffad 	bl	8003978 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	e04a      	b.n	8001aba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	333d      	adds	r3, #61	; 0x3d
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a38:	7bfa      	ldrb	r2, [r7, #15]
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	333c      	adds	r3, #60	; 0x3c
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	b298      	uxth	r0, r3
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3344      	adds	r3, #68	; 0x44
 8001a60:	4602      	mov	r2, r0
 8001a62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a64:	7bfa      	ldrb	r2, [r7, #15]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	3340      	adds	r3, #64	; 0x40
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4413      	add	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	3348      	adds	r3, #72	; 0x48
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a8c:	7bfa      	ldrb	r2, [r7, #15]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	334c      	adds	r3, #76	; 0x4c
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001aa0:	7bfa      	ldrb	r2, [r7, #15]
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	3354      	adds	r3, #84	; 0x54
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	7bfa      	ldrb	r2, [r7, #15]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d3af      	bcc.n	8001a24 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	e044      	b.n	8001b54 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001aca:	7bfa      	ldrb	r2, [r7, #15]
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001af2:	7bfa      	ldrb	r2, [r7, #15]
 8001af4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b0c:	7bfa      	ldrb	r2, [r7, #15]
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4413      	add	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b38:	7bfa      	ldrb	r2, [r7, #15]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	3301      	adds	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	7bfa      	ldrb	r2, [r7, #15]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d3b5      	bcc.n	8001aca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	687e      	ldr	r6, [r7, #4]
 8001b66:	466d      	mov	r5, sp
 8001b68:	f106 0410 	add.w	r4, r6, #16
 8001b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b78:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b7c:	1d33      	adds	r3, r6, #4
 8001b7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b80:	6838      	ldr	r0, [r7, #0]
 8001b82:	f001 ff45 	bl	8003a10 <USB_DevInit>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e00d      	b.n	8001bb4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f003 f894 	bl	8004cda <USB_DevDisconnect>

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bbc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <HAL_PCD_Start+0x1c>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e020      	b.n	8001c1a <HAL_PCD_Start+0x5e>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d109      	bne.n	8001bfc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d005      	beq.n	8001bfc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f001 fe97 	bl	8003934 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 f844 	bl	8004c98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c22:	b590      	push	{r4, r7, lr}
 8001c24:	b08d      	sub	sp, #52	; 0x34
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 f902 	bl	8004e42 <USB_GetMode>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f040 848a 	bne.w	800255a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 f866 	bl	8004d1c <USB_ReadInterrupts>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 8480 	beq.w	8002558 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f003 f853 	bl	8004d1c <USB_ReadInterrupts>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d107      	bne.n	8001c90 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f002 0202 	and.w	r2, r2, #2
 8001c8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f003 f841 	bl	8004d1c <USB_ReadInterrupts>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b10      	cmp	r3, #16
 8001ca2:	d161      	bne.n	8001d68 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699a      	ldr	r2, [r3, #24]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0210 	bic.w	r2, r2, #16
 8001cb2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	f003 020f 	and.w	r2, r3, #15
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	0c5b      	lsrs	r3, r3, #17
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d124      	bne.n	8001d2a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d035      	beq.n	8001d58 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	6a38      	ldr	r0, [r7, #32]
 8001d00:	f002 fe78 	bl	80049f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	091b      	lsrs	r3, r3, #4
 8001d0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d10:	441a      	add	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	6a1a      	ldr	r2, [r3, #32]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d22:	441a      	add	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	621a      	str	r2, [r3, #32]
 8001d28:	e016      	b.n	8001d58 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	0c5b      	lsrs	r3, r3, #17
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d110      	bne.n	8001d58 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	4619      	mov	r1, r3
 8001d40:	6a38      	ldr	r0, [r7, #32]
 8001d42:	f002 fe57 	bl	80049f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	6a1a      	ldr	r2, [r3, #32]
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d52:	441a      	add	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699a      	ldr	r2, [r3, #24]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0210 	orr.w	r2, r2, #16
 8001d66:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f002 ffd5 	bl	8004d1c <USB_ReadInterrupts>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d7c:	f040 80a7 	bne.w	8001ece <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f002 ffda 	bl	8004d42 <USB_ReadDevAllOutEpInterrupt>
 8001d8e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001d90:	e099      	b.n	8001ec6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 808e 	beq.w	8001eba <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f002 fffe 	bl	8004daa <USB_ReadDevOutEPInterrupt>
 8001dae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00c      	beq.n	8001dd4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	015a      	lsls	r2, r3, #5
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	2301      	movs	r3, #1
 8001dca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001dcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 feaa 	bl	8002b28 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00c      	beq.n	8001df8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	015a      	lsls	r2, r3, #5
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	4413      	add	r3, r2
 8001de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dea:	461a      	mov	r2, r3
 8001dec:	2308      	movs	r3, #8
 8001dee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 ff80 	bl	8002cf8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d008      	beq.n	8001e14 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e0e:	461a      	mov	r2, r3
 8001e10:	2310      	movs	r3, #16
 8001e12:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d030      	beq.n	8001e80 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e26:	2b80      	cmp	r3, #128	; 0x80
 8001e28:	d109      	bne.n	8001e3e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e3c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e40:	4613      	mov	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	4413      	add	r3, r2
 8001e50:	3304      	adds	r3, #4
 8001e52:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	78db      	ldrb	r3, [r3, #3]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d108      	bne.n	8001e6e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	4619      	mov	r1, r3
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f004 fff7 	bl	8006e5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d008      	beq.n	8001e9c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	015a      	lsls	r2, r3, #5
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	4413      	add	r3, r2
 8001e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e96:	461a      	mov	r2, r3
 8001e98:	2320      	movs	r3, #32
 8001e9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d009      	beq.n	8001eba <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	015a      	lsls	r2, r3, #5
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec2:	085b      	lsrs	r3, r3, #1
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f47f af62 	bne.w	8001d92 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f002 ff22 	bl	8004d1c <USB_ReadInterrupts>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ede:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ee2:	f040 80db 	bne.w	800209c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f002 ff43 	bl	8004d76 <USB_ReadDevAllInEpInterrupt>
 8001ef0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001ef6:	e0cd      	b.n	8002094 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 80c2 	beq.w	8002088 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f002 ff69 	bl	8004de6 <USB_ReadDevInEPInterrupt>
 8001f14:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d057      	beq.n	8001fd0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	2201      	movs	r2, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69f9      	ldr	r1, [r7, #28]
 8001f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f40:	4013      	ands	r3, r2
 8001f42:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	015a      	lsls	r2, r3, #5
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f50:	461a      	mov	r2, r3
 8001f52:	2301      	movs	r3, #1
 8001f54:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d132      	bne.n	8001fc4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	334c      	adds	r3, #76	; 0x4c
 8001f6e:	6819      	ldr	r1, [r3, #0]
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4403      	add	r3, r0
 8001f7e:	3348      	adds	r3, #72	; 0x48
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4419      	add	r1, r3
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4403      	add	r3, r0
 8001f92:	334c      	adds	r3, #76	; 0x4c
 8001f94:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d113      	bne.n	8001fc4 <HAL_PCD_IRQHandler+0x3a2>
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	3354      	adds	r3, #84	; 0x54
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d108      	bne.n	8001fc4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	f002 ff70 	bl	8004ea4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	4619      	mov	r1, r3
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f004 fec1 	bl	8006d52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d008      	beq.n	8001fec <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	015a      	lsls	r2, r3, #5
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	2308      	movs	r3, #8
 8001fea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d008      	beq.n	8002008 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002002:	461a      	mov	r2, r3
 8002004:	2310      	movs	r3, #16
 8002006:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200e:	2b00      	cmp	r3, #0
 8002010:	d008      	beq.n	8002024 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	4413      	add	r3, r2
 800201a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800201e:	461a      	mov	r2, r3
 8002020:	2340      	movs	r3, #64	; 0x40
 8002022:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d023      	beq.n	8002076 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800202e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002030:	6a38      	ldr	r0, [r7, #32]
 8002032:	f001 fe51 	bl	8003cd8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	3338      	adds	r3, #56	; 0x38
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	3304      	adds	r3, #4
 8002048:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	78db      	ldrb	r3, [r3, #3]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d108      	bne.n	8002064 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2200      	movs	r2, #0
 8002056:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	b2db      	uxtb	r3, r3
 800205c:	4619      	mov	r1, r3
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f004 ff0e 	bl	8006e80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	4413      	add	r3, r2
 800206c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002070:	461a      	mov	r2, r3
 8002072:	2302      	movs	r3, #2
 8002074:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fcc3 	bl	8002a0e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	3301      	adds	r3, #1
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800208e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002090:	085b      	lsrs	r3, r3, #1
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002096:	2b00      	cmp	r3, #0
 8002098:	f47f af2e 	bne.w	8001ef8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f002 fe3b 	bl	8004d1c <USB_ReadInterrupts>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80020ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020b0:	d122      	bne.n	80020f8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d108      	bne.n	80020e2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80020d8:	2100      	movs	r1, #0
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 feaa 	bl	8002e34 <HAL_PCDEx_LPM_Callback>
 80020e0:	e002      	b.n	80020e8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f004 feac 	bl	8006e40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	695a      	ldr	r2, [r3, #20]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80020f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f002 fe0d 	bl	8004d1c <USB_ReadInterrupts>
 8002102:	4603      	mov	r3, r0
 8002104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800210c:	d112      	bne.n	8002134 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b01      	cmp	r3, #1
 800211c:	d102      	bne.n	8002124 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f004 fe68 	bl	8006df4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002132:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f002 fdef 	bl	8004d1c <USB_ReadInterrupts>
 800213e:	4603      	mov	r3, r0
 8002140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002148:	f040 80b7 	bne.w	80022ba <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2110      	movs	r1, #16
 8002166:	4618      	mov	r0, r3
 8002168:	f001 fdb6 	bl	8003cd8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800216c:	2300      	movs	r3, #0
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002170:	e046      	b.n	8002200 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	4413      	add	r3, r2
 800217a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800217e:	461a      	mov	r2, r3
 8002180:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002184:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	4413      	add	r3, r2
 800218e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002196:	0151      	lsls	r1, r2, #5
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	440a      	add	r2, r1
 800219c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80021a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80021a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b2:	461a      	mov	r2, r3
 80021b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021b8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80021ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ca:	0151      	lsls	r1, r2, #5
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	440a      	add	r2, r1
 80021d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80021da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ea:	0151      	lsls	r1, r2, #5
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	440a      	add	r2, r1
 80021f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021f8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fc:	3301      	adds	r3, #1
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002206:	429a      	cmp	r2, r3
 8002208:	d3b3      	bcc.n	8002172 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002218:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800221c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	2b00      	cmp	r3, #0
 8002224:	d016      	beq.n	8002254 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800222c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002230:	69fa      	ldr	r2, [r7, #28]
 8002232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002236:	f043 030b 	orr.w	r3, r3, #11
 800223a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	69fa      	ldr	r2, [r7, #28]
 8002248:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800224c:	f043 030b 	orr.w	r3, r3, #11
 8002250:	6453      	str	r3, [r2, #68]	; 0x44
 8002252:	e015      	b.n	8002280 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	69fa      	ldr	r2, [r7, #28]
 800225e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002262:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002266:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800226a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800227a:	f043 030b 	orr.w	r3, r3, #11
 800227e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800228e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002292:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022a4:	461a      	mov	r2, r3
 80022a6:	f002 fdfd 	bl	8004ea4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80022b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 fd2c 	bl	8004d1c <USB_ReadInterrupts>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ce:	d124      	bne.n	800231a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f002 fdc2 	bl	8004e5e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f001 fd77 	bl	8003dd2 <USB_GetDevSpeed>
 80022e4:	4603      	mov	r3, r0
 80022e6:	461a      	mov	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681c      	ldr	r4, [r3, #0]
 80022f0:	f001 fa10 	bl	8003714 <HAL_RCC_GetHCLKFreq>
 80022f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	4620      	mov	r0, r4
 8002300:	f001 fa76 	bl	80037f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f004 fd4c 	bl	8006da2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002318:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f002 fcfc 	bl	8004d1c <USB_ReadInterrupts>
 8002324:	4603      	mov	r3, r0
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b08      	cmp	r3, #8
 800232c:	d10a      	bne.n	8002344 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f004 fd29 	bl	8006d86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f002 0208 	and.w	r2, r2, #8
 8002342:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f002 fce7 	bl	8004d1c <USB_ReadInterrupts>
 800234e:	4603      	mov	r3, r0
 8002350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002354:	2b80      	cmp	r3, #128	; 0x80
 8002356:	d122      	bne.n	800239e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002364:	2301      	movs	r3, #1
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
 8002368:	e014      	b.n	8002394 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d105      	bne.n	800238e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	b2db      	uxtb	r3, r3
 8002386:	4619      	mov	r1, r3
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 fb0f 	bl	80029ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	3301      	adds	r3, #1
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239a:	429a      	cmp	r2, r3
 800239c:	d3e5      	bcc.n	800236a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f002 fcba 	bl	8004d1c <USB_ReadInterrupts>
 80023a8:	4603      	mov	r3, r0
 80023aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023b2:	d13b      	bne.n	800242c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023b4:	2301      	movs	r3, #1
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
 80023b8:	e02b      	b.n	8002412 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	3340      	adds	r3, #64	; 0x40
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d115      	bne.n	800240c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80023e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	da12      	bge.n	800240c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ea:	4613      	mov	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	333f      	adds	r3, #63	; 0x3f
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002402:	b2db      	uxtb	r3, r3
 8002404:	4619      	mov	r1, r3
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fad0 	bl	80029ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	3301      	adds	r3, #1
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002418:	429a      	cmp	r2, r3
 800241a:	d3ce      	bcc.n	80023ba <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800242a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f002 fc73 	bl	8004d1c <USB_ReadInterrupts>
 8002436:	4603      	mov	r3, r0
 8002438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800243c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002440:	d155      	bne.n	80024ee <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002442:	2301      	movs	r3, #1
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
 8002446:	e045      	b.n	80024d4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	4413      	add	r3, r2
 8002450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245c:	4613      	mov	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d12e      	bne.n	80024ce <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002470:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002472:	2b00      	cmp	r3, #0
 8002474:	da2b      	bge.n	80024ce <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002482:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002486:	429a      	cmp	r2, r3
 8002488:	d121      	bne.n	80024ce <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248e:	4613      	mov	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800249c:	2201      	movs	r2, #1
 800249e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10a      	bne.n	80024ce <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	69fa      	ldr	r2, [r7, #28]
 80024c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ca:	6053      	str	r3, [r2, #4]
            break;
 80024cc:	e007      	b.n	80024de <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	3301      	adds	r3, #1
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024da:	429a      	cmp	r2, r3
 80024dc:	d3b4      	bcc.n	8002448 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80024ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f002 fc12 	bl	8004d1c <USB_ReadInterrupts>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80024fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002502:	d10a      	bne.n	800251a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f004 fccd 	bl	8006ea4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695a      	ldr	r2, [r3, #20]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002518:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f002 fbfc 	bl	8004d1c <USB_ReadInterrupts>
 8002524:	4603      	mov	r3, r0
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b04      	cmp	r3, #4
 800252c:	d115      	bne.n	800255a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f004 fcbd 	bl	8006ec0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6859      	ldr	r1, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	430a      	orrs	r2, r1
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	e000      	b.n	800255a <HAL_PCD_IRQHandler+0x938>
      return;
 8002558:	bf00      	nop
    }
  }
}
 800255a:	3734      	adds	r7, #52	; 0x34
 800255c:	46bd      	mov	sp, r7
 800255e:	bd90      	pop	{r4, r7, pc}

08002560 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_PCD_SetAddress+0x1a>
 8002576:	2302      	movs	r3, #2
 8002578:	e013      	b.n	80025a2 <HAL_PCD_SetAddress+0x42>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	78fa      	ldrb	r2, [r7, #3]
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f002 fb5a 	bl	8004c4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	4608      	mov	r0, r1
 80025b4:	4611      	mov	r1, r2
 80025b6:	461a      	mov	r2, r3
 80025b8:	4603      	mov	r3, r0
 80025ba:	70fb      	strb	r3, [r7, #3]
 80025bc:	460b      	mov	r3, r1
 80025be:	803b      	strh	r3, [r7, #0]
 80025c0:	4613      	mov	r3, r2
 80025c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	da0f      	bge.n	80025f0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	f003 020f 	and.w	r2, r3, #15
 80025d6:	4613      	mov	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	4413      	add	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	3338      	adds	r3, #56	; 0x38
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	4413      	add	r3, r2
 80025e4:	3304      	adds	r3, #4
 80025e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2201      	movs	r2, #1
 80025ec:	705a      	strb	r2, [r3, #1]
 80025ee:	e00f      	b.n	8002610 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	f003 020f 	and.w	r2, r3, #15
 80025f6:	4613      	mov	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4413      	add	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	3304      	adds	r3, #4
 8002608:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	b2da      	uxtb	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800261c:	883a      	ldrh	r2, [r7, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	78ba      	ldrb	r2, [r7, #2]
 8002626:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	785b      	ldrb	r3, [r3, #1]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d004      	beq.n	800263a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800263a:	78bb      	ldrb	r3, [r7, #2]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d102      	bne.n	8002646 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_PCD_EP_Open+0xaa>
 8002650:	2302      	movs	r3, #2
 8002652:	e00e      	b.n	8002672 <HAL_PCD_EP_Open+0xc8>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68f9      	ldr	r1, [r7, #12]
 8002662:	4618      	mov	r0, r3
 8002664:	f001 fbda 	bl	8003e1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002670:	7afb      	ldrb	r3, [r7, #11]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	460b      	mov	r3, r1
 8002684:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002686:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800268a:	2b00      	cmp	r3, #0
 800268c:	da0f      	bge.n	80026ae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	f003 020f 	and.w	r2, r3, #15
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	3338      	adds	r3, #56	; 0x38
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	3304      	adds	r3, #4
 80026a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	705a      	strb	r2, [r3, #1]
 80026ac:	e00f      	b.n	80026ce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ae:	78fb      	ldrb	r3, [r7, #3]
 80026b0:	f003 020f 	and.w	r2, r3, #15
 80026b4:	4613      	mov	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	4413      	add	r3, r2
 80026c4:	3304      	adds	r3, #4
 80026c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <HAL_PCD_EP_Close+0x6e>
 80026e4:	2302      	movs	r3, #2
 80026e6:	e00e      	b.n	8002706 <HAL_PCD_EP_Close+0x8c>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68f9      	ldr	r1, [r7, #12]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f001 fc18 	bl	8003f2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
 800271a:	460b      	mov	r3, r1
 800271c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800271e:	7afb      	ldrb	r3, [r7, #11]
 8002720:	f003 020f 	and.w	r2, r3, #15
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4413      	add	r3, r2
 8002734:	3304      	adds	r3, #4
 8002736:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2200      	movs	r2, #0
 8002748:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2200      	movs	r2, #0
 800274e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002750:	7afb      	ldrb	r3, [r7, #11]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	b2da      	uxtb	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d102      	bne.n	800276a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800276a:	7afb      	ldrb	r3, [r7, #11]
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	2b00      	cmp	r3, #0
 8002772:	d109      	bne.n	8002788 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	461a      	mov	r2, r3
 8002780:	6979      	ldr	r1, [r7, #20]
 8002782:	f001 fef7 	bl	8004574 <USB_EP0StartXfer>
 8002786:	e008      	b.n	800279a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	6979      	ldr	r1, [r7, #20]
 8002796:	f001 fca5 	bl	80040e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	460b      	mov	r3, r1
 80027b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027b4:	7afb      	ldrb	r3, [r7, #11]
 80027b6:	f003 020f 	and.w	r2, r3, #15
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	3338      	adds	r3, #56	; 0x38
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	3304      	adds	r3, #4
 80027ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2200      	movs	r2, #0
 80027dc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2201      	movs	r2, #1
 80027e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027e4:	7afb      	ldrb	r3, [r7, #11]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d102      	bne.n	80027fe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027fe:	7afb      	ldrb	r3, [r7, #11]
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	2b00      	cmp	r3, #0
 8002806:	d109      	bne.n	800281c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	6979      	ldr	r1, [r7, #20]
 8002816:	f001 fead 	bl	8004574 <USB_EP0StartXfer>
 800281a:	e008      	b.n	800282e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	6979      	ldr	r1, [r7, #20]
 800282a:	f001 fc5b 	bl	80040e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	f003 020f 	and.w	r2, r3, #15
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	429a      	cmp	r2, r3
 8002850:	d901      	bls.n	8002856 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e050      	b.n	80028f8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002856:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800285a:	2b00      	cmp	r3, #0
 800285c:	da0f      	bge.n	800287e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800285e:	78fb      	ldrb	r3, [r7, #3]
 8002860:	f003 020f 	and.w	r2, r3, #15
 8002864:	4613      	mov	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	3338      	adds	r3, #56	; 0x38
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	4413      	add	r3, r2
 8002872:	3304      	adds	r3, #4
 8002874:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	705a      	strb	r2, [r3, #1]
 800287c:	e00d      	b.n	800289a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800287e:	78fa      	ldrb	r2, [r7, #3]
 8002880:	4613      	mov	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	4413      	add	r3, r2
 8002890:	3304      	adds	r3, #4
 8002892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2201      	movs	r2, #1
 800289e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_PCD_EP_SetStall+0x82>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e01e      	b.n	80028f8 <HAL_PCD_EP_SetStall+0xc0>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68f9      	ldr	r1, [r7, #12]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f002 f8eb 	bl	8004aa4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028ce:	78fb      	ldrb	r3, [r7, #3]
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10a      	bne.n	80028ee <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	b2d9      	uxtb	r1, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028e8:	461a      	mov	r2, r3
 80028ea:	f002 fadb 	bl	8004ea4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	f003 020f 	and.w	r2, r3, #15
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	429a      	cmp	r2, r3
 8002918:	d901      	bls.n	800291e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e042      	b.n	80029a4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800291e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002922:	2b00      	cmp	r3, #0
 8002924:	da0f      	bge.n	8002946 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002926:	78fb      	ldrb	r3, [r7, #3]
 8002928:	f003 020f 	and.w	r2, r3, #15
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	3338      	adds	r3, #56	; 0x38
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	3304      	adds	r3, #4
 800293c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	705a      	strb	r2, [r3, #1]
 8002944:	e00f      	b.n	8002966 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	f003 020f 	and.w	r2, r3, #15
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4413      	add	r3, r2
 800295c:	3304      	adds	r3, #4
 800295e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	b2da      	uxtb	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_PCD_EP_ClrStall+0x86>
 8002982:	2302      	movs	r3, #2
 8002984:	e00e      	b.n	80029a4 <HAL_PCD_EP_ClrStall+0xa4>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68f9      	ldr	r1, [r7, #12]
 8002994:	4618      	mov	r0, r3
 8002996:	f002 f8f3 	bl	8004b80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80029b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	da0c      	bge.n	80029da <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	f003 020f 	and.w	r2, r3, #15
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	3338      	adds	r3, #56	; 0x38
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4413      	add	r3, r2
 80029d4:	3304      	adds	r3, #4
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	e00c      	b.n	80029f4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	f003 020f 	and.w	r2, r3, #15
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	4413      	add	r3, r2
 80029f0:	3304      	adds	r3, #4
 80029f2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68f9      	ldr	r1, [r7, #12]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f001 ff12 	bl	8004824 <USB_EPStopXfer>
 8002a00:	4603      	mov	r3, r0
 8002a02:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002a04:	7afb      	ldrb	r3, [r7, #11]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b08a      	sub	sp, #40	; 0x28
 8002a12:	af02      	add	r7, sp, #8
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	4613      	mov	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	3338      	adds	r3, #56	; 0x38
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	3304      	adds	r3, #4
 8002a34:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a1a      	ldr	r2, [r3, #32]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d901      	bls.n	8002a46 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e06c      	b.n	8002b20 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d902      	bls.n	8002a62 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3303      	adds	r3, #3
 8002a66:	089b      	lsrs	r3, r3, #2
 8002a68:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a6a:	e02b      	b.n	8002ac4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	699a      	ldr	r2, [r3, #24]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	69fa      	ldr	r2, [r7, #28]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d902      	bls.n	8002a88 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	3303      	adds	r3, #3
 8002a8c:	089b      	lsrs	r3, r3, #2
 8002a8e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6919      	ldr	r1, [r3, #16]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	6978      	ldr	r0, [r7, #20]
 8002aa8:	f001 ff66 	bl	8004978 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	441a      	add	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a1a      	ldr	r2, [r3, #32]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	441a      	add	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d809      	bhi.n	8002aee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a1a      	ldr	r2, [r3, #32]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d203      	bcs.n	8002aee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1be      	bne.n	8002a6c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d811      	bhi.n	8002b1e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	2201      	movs	r2, #1
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	6939      	ldr	r1, [r7, #16]
 8002b16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3720      	adds	r7, #32
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	333c      	adds	r3, #60	; 0x3c
 8002b40:	3304      	adds	r3, #4
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d17b      	bne.n	8002c56 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d015      	beq.n	8002b94 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	4a61      	ldr	r2, [pc, #388]	; (8002cf0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	f240 80b9 	bls.w	8002ce4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80b3 	beq.w	8002ce4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b90:	6093      	str	r3, [r2, #8]
 8002b92:	e0a7      	b.n	8002ce4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002baa:	461a      	mov	r2, r3
 8002bac:	2320      	movs	r3, #32
 8002bae:	6093      	str	r3, [r2, #8]
 8002bb0:	e098      	b.n	8002ce4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f040 8093 	bne.w	8002ce4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	4a4b      	ldr	r2, [pc, #300]	; (8002cf0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d90f      	bls.n	8002be6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bdc:	461a      	mov	r2, r3
 8002bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002be2:	6093      	str	r3, [r2, #8]
 8002be4:	e07e      	b.n	8002ce4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	4613      	mov	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	69da      	ldr	r2, [r3, #28]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	0159      	lsls	r1, r3, #5
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	440b      	add	r3, r1
 8002c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c12:	1ad2      	subs	r2, r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d114      	bne.n	8002c48 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c30:	461a      	mov	r2, r3
 8002c32:	2101      	movs	r1, #1
 8002c34:	f002 f936 	bl	8004ea4 <USB_EP0_OutStart>
 8002c38:	e006      	b.n	8002c48 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	441a      	add	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f004 f864 	bl	8006d1c <HAL_PCD_DataOutStageCallback>
 8002c54:	e046      	b.n	8002ce4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	4a26      	ldr	r2, [pc, #152]	; (8002cf4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d124      	bne.n	8002ca8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c74:	461a      	mov	r2, r3
 8002c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c7a:	6093      	str	r3, [r2, #8]
 8002c7c:	e032      	b.n	8002ce4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d008      	beq.n	8002c9a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c94:	461a      	mov	r2, r3
 8002c96:	2320      	movs	r3, #32
 8002c98:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f004 f83b 	bl	8006d1c <HAL_PCD_DataOutStageCallback>
 8002ca6:	e01d      	b.n	8002ce4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d114      	bne.n	8002cd8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d108      	bne.n	8002cd8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	f002 f8e6 	bl	8004ea4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	4619      	mov	r1, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f004 f81c 	bl	8006d1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3720      	adds	r7, #32
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	4f54300a 	.word	0x4f54300a
 8002cf4:	4f54310a 	.word	0x4f54310a

08002cf8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	333c      	adds	r3, #60	; 0x3c
 8002d10:	3304      	adds	r3, #4
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4a15      	ldr	r2, [pc, #84]	; (8002d80 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d90e      	bls.n	8002d4c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d009      	beq.n	8002d4c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d44:	461a      	mov	r2, r3
 8002d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d4a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f003 ffd3 	bl	8006cf8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d90c      	bls.n	8002d74 <PCD_EP_OutSetupPacket_int+0x7c>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d108      	bne.n	8002d74 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	2101      	movs	r1, #1
 8002d70:	f002 f898 	bl	8004ea4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	4f54300a 	.word	0x4f54300a

08002d84 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	70fb      	strb	r3, [r7, #3]
 8002d90:	4613      	mov	r3, r2
 8002d92:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d9c:	78fb      	ldrb	r3, [r7, #3]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d107      	bne.n	8002db2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002da2:	883b      	ldrh	r3, [r7, #0]
 8002da4:	0419      	lsls	r1, r3, #16
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28
 8002db0:	e028      	b.n	8002e04 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db8:	0c1b      	lsrs	r3, r3, #16
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	73fb      	strb	r3, [r7, #15]
 8002dc4:	e00d      	b.n	8002de2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	3340      	adds	r3, #64	; 0x40
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	0c1b      	lsrs	r3, r3, #16
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	4413      	add	r3, r2
 8002dda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	3301      	adds	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d3ec      	bcc.n	8002dc6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002dec:	883b      	ldrh	r3, [r7, #0]
 8002dee:	0418      	lsls	r0, r3, #16
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6819      	ldr	r1, [r3, #0]
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	4302      	orrs	r2, r0
 8002dfc:	3340      	adds	r3, #64	; 0x40
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	887a      	ldrh	r2, [r7, #2]
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e267      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d075      	beq.n	8002f56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e6a:	4b88      	ldr	r3, [pc, #544]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d00c      	beq.n	8002e90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e76:	4b85      	ldr	r3, [pc, #532]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d112      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e82:	4b82      	ldr	r3, [pc, #520]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e8e:	d10b      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e90:	4b7e      	ldr	r3, [pc, #504]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d05b      	beq.n	8002f54 <HAL_RCC_OscConfig+0x108>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d157      	bne.n	8002f54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e242      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb0:	d106      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x74>
 8002eb2:	4b76      	ldr	r3, [pc, #472]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a75      	ldr	r2, [pc, #468]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e01d      	b.n	8002efc <HAL_RCC_OscConfig+0xb0>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x98>
 8002eca:	4b70      	ldr	r3, [pc, #448]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a6f      	ldr	r2, [pc, #444]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	4b6d      	ldr	r3, [pc, #436]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a6c      	ldr	r2, [pc, #432]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e00b      	b.n	8002efc <HAL_RCC_OscConfig+0xb0>
 8002ee4:	4b69      	ldr	r3, [pc, #420]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a68      	ldr	r2, [pc, #416]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	4b66      	ldr	r3, [pc, #408]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a65      	ldr	r2, [pc, #404]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d013      	beq.n	8002f2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fd fe2c 	bl	8000b60 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7fd fe28 	bl	8000b60 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e207      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1e:	4b5b      	ldr	r3, [pc, #364]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0xc0>
 8002f2a:	e014      	b.n	8002f56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2c:	f7fd fe18 	bl	8000b60 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f34:	f7fd fe14 	bl	8000b60 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	; 0x64
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e1f3      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f46:	4b51      	ldr	r3, [pc, #324]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0xe8>
 8002f52:	e000      	b.n	8002f56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d063      	beq.n	800302a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f62:	4b4a      	ldr	r3, [pc, #296]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00b      	beq.n	8002f86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f6e:	4b47      	ldr	r3, [pc, #284]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d11c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7a:	4b44      	ldr	r3, [pc, #272]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d116      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f86:	4b41      	ldr	r3, [pc, #260]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d005      	beq.n	8002f9e <HAL_RCC_OscConfig+0x152>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d001      	beq.n	8002f9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e1c7      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9e:	4b3b      	ldr	r3, [pc, #236]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4937      	ldr	r1, [pc, #220]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb2:	e03a      	b.n	800302a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d020      	beq.n	8002ffe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fbc:	4b34      	ldr	r3, [pc, #208]	; (8003090 <HAL_RCC_OscConfig+0x244>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc2:	f7fd fdcd 	bl	8000b60 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fca:	f7fd fdc9 	bl	8000b60 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e1a8      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fdc:	4b2b      	ldr	r3, [pc, #172]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe8:	4b28      	ldr	r3, [pc, #160]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4925      	ldr	r1, [pc, #148]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	600b      	str	r3, [r1, #0]
 8002ffc:	e015      	b.n	800302a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ffe:	4b24      	ldr	r3, [pc, #144]	; (8003090 <HAL_RCC_OscConfig+0x244>)
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fd fdac 	bl	8000b60 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800300c:	f7fd fda8 	bl	8000b60 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e187      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301e:	4b1b      	ldr	r3, [pc, #108]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d036      	beq.n	80030a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d016      	beq.n	800306c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <HAL_RCC_OscConfig+0x248>)
 8003040:	2201      	movs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003044:	f7fd fd8c 	bl	8000b60 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800304c:	f7fd fd88 	bl	8000b60 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e167      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_RCC_OscConfig+0x240>)
 8003060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x200>
 800306a:	e01b      	b.n	80030a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_RCC_OscConfig+0x248>)
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003072:	f7fd fd75 	bl	8000b60 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003078:	e00e      	b.n	8003098 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800307a:	f7fd fd71 	bl	8000b60 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d907      	bls.n	8003098 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e150      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
 800308c:	40023800 	.word	0x40023800
 8003090:	42470000 	.word	0x42470000
 8003094:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003098:	4b88      	ldr	r3, [pc, #544]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 800309a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1ea      	bne.n	800307a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8097 	beq.w	80031e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030b2:	2300      	movs	r3, #0
 80030b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b6:	4b81      	ldr	r3, [pc, #516]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10f      	bne.n	80030e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	4b7d      	ldr	r3, [pc, #500]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	4a7c      	ldr	r2, [pc, #496]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 80030cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d0:	6413      	str	r3, [r2, #64]	; 0x40
 80030d2:	4b7a      	ldr	r3, [pc, #488]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030de:	2301      	movs	r3, #1
 80030e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e2:	4b77      	ldr	r3, [pc, #476]	; (80032c0 <HAL_RCC_OscConfig+0x474>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d118      	bne.n	8003120 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ee:	4b74      	ldr	r3, [pc, #464]	; (80032c0 <HAL_RCC_OscConfig+0x474>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a73      	ldr	r2, [pc, #460]	; (80032c0 <HAL_RCC_OscConfig+0x474>)
 80030f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030fa:	f7fd fd31 	bl	8000b60 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003102:	f7fd fd2d 	bl	8000b60 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e10c      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003114:	4b6a      	ldr	r3, [pc, #424]	; (80032c0 <HAL_RCC_OscConfig+0x474>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d106      	bne.n	8003136 <HAL_RCC_OscConfig+0x2ea>
 8003128:	4b64      	ldr	r3, [pc, #400]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312c:	4a63      	ldr	r2, [pc, #396]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	6713      	str	r3, [r2, #112]	; 0x70
 8003134:	e01c      	b.n	8003170 <HAL_RCC_OscConfig+0x324>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b05      	cmp	r3, #5
 800313c:	d10c      	bne.n	8003158 <HAL_RCC_OscConfig+0x30c>
 800313e:	4b5f      	ldr	r3, [pc, #380]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003142:	4a5e      	ldr	r2, [pc, #376]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 8003144:	f043 0304 	orr.w	r3, r3, #4
 8003148:	6713      	str	r3, [r2, #112]	; 0x70
 800314a:	4b5c      	ldr	r3, [pc, #368]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314e:	4a5b      	ldr	r2, [pc, #364]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	6713      	str	r3, [r2, #112]	; 0x70
 8003156:	e00b      	b.n	8003170 <HAL_RCC_OscConfig+0x324>
 8003158:	4b58      	ldr	r3, [pc, #352]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	4a57      	ldr	r2, [pc, #348]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 800315e:	f023 0301 	bic.w	r3, r3, #1
 8003162:	6713      	str	r3, [r2, #112]	; 0x70
 8003164:	4b55      	ldr	r3, [pc, #340]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	4a54      	ldr	r2, [pc, #336]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 800316a:	f023 0304 	bic.w	r3, r3, #4
 800316e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d015      	beq.n	80031a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003178:	f7fd fcf2 	bl	8000b60 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317e:	e00a      	b.n	8003196 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003180:	f7fd fcee 	bl	8000b60 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	; 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e0cb      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003196:	4b49      	ldr	r3, [pc, #292]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0ee      	beq.n	8003180 <HAL_RCC_OscConfig+0x334>
 80031a2:	e014      	b.n	80031ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a4:	f7fd fcdc 	bl	8000b60 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031aa:	e00a      	b.n	80031c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ac:	f7fd fcd8 	bl	8000b60 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e0b5      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c2:	4b3e      	ldr	r3, [pc, #248]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1ee      	bne.n	80031ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031ce:	7dfb      	ldrb	r3, [r7, #23]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d105      	bne.n	80031e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d4:	4b39      	ldr	r3, [pc, #228]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	4a38      	ldr	r2, [pc, #224]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 80031da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80a1 	beq.w	800332c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ea:	4b34      	ldr	r3, [pc, #208]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d05c      	beq.n	80032b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d141      	bne.n	8003282 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fe:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <HAL_RCC_OscConfig+0x478>)
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003204:	f7fd fcac 	bl	8000b60 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320c:	f7fd fca8 	bl	8000b60 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e087      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321e:	4b27      	ldr	r3, [pc, #156]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69da      	ldr	r2, [r3, #28]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	019b      	lsls	r3, r3, #6
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003240:	085b      	lsrs	r3, r3, #1
 8003242:	3b01      	subs	r3, #1
 8003244:	041b      	lsls	r3, r3, #16
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	061b      	lsls	r3, r3, #24
 800324e:	491b      	ldr	r1, [pc, #108]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 8003250:	4313      	orrs	r3, r2
 8003252:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003254:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <HAL_RCC_OscConfig+0x478>)
 8003256:	2201      	movs	r2, #1
 8003258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325a:	f7fd fc81 	bl	8000b60 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003262:	f7fd fc7d 	bl	8000b60 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e05c      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003274:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x416>
 8003280:	e054      	b.n	800332c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003282:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <HAL_RCC_OscConfig+0x478>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fd fc6a 	bl	8000b60 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003290:	f7fd fc66 	bl	8000b60 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e045      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_RCC_OscConfig+0x470>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x444>
 80032ae:	e03d      	b.n	800332c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d107      	bne.n	80032c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e038      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40007000 	.word	0x40007000
 80032c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032c8:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <HAL_RCC_OscConfig+0x4ec>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d028      	beq.n	8003328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d121      	bne.n	8003328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d11a      	bne.n	8003328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032f8:	4013      	ands	r3, r2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003300:	4293      	cmp	r3, r2
 8003302:	d111      	bne.n	8003328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	085b      	lsrs	r3, r3, #1
 8003310:	3b01      	subs	r3, #1
 8003312:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003314:	429a      	cmp	r2, r3
 8003316:	d107      	bne.n	8003328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003324:	429a      	cmp	r2, r3
 8003326:	d001      	beq.n	800332c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e000      	b.n	800332e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40023800 	.word	0x40023800

0800333c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0cc      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003350:	4b68      	ldr	r3, [pc, #416]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d90c      	bls.n	8003378 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335e:	4b65      	ldr	r3, [pc, #404]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003366:	4b63      	ldr	r3, [pc, #396]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0b8      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d020      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003390:	4b59      	ldr	r3, [pc, #356]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4a58      	ldr	r2, [pc, #352]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800339a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033a8:	4b53      	ldr	r3, [pc, #332]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	4a52      	ldr	r2, [pc, #328]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b4:	4b50      	ldr	r3, [pc, #320]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	494d      	ldr	r1, [pc, #308]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d044      	beq.n	800345c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d107      	bne.n	80033ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b47      	ldr	r3, [pc, #284]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d119      	bne.n	800341a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e07f      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d003      	beq.n	80033fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d107      	bne.n	800340a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fa:	4b3f      	ldr	r3, [pc, #252]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d109      	bne.n	800341a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e06f      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340a:	4b3b      	ldr	r3, [pc, #236]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e067      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800341a:	4b37      	ldr	r3, [pc, #220]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f023 0203 	bic.w	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4934      	ldr	r1, [pc, #208]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	4313      	orrs	r3, r2
 800342a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800342c:	f7fd fb98 	bl	8000b60 <HAL_GetTick>
 8003430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003432:	e00a      	b.n	800344a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003434:	f7fd fb94 	bl	8000b60 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e04f      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344a:	4b2b      	ldr	r3, [pc, #172]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 020c 	and.w	r2, r3, #12
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	429a      	cmp	r2, r3
 800345a:	d1eb      	bne.n	8003434 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800345c:	4b25      	ldr	r3, [pc, #148]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d20c      	bcs.n	8003484 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	4b22      	ldr	r3, [pc, #136]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e032      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003490:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4916      	ldr	r1, [pc, #88]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ae:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	490e      	ldr	r1, [pc, #56]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034c2:	f000 f821 	bl	8003508 <HAL_RCC_GetSysClockFreq>
 80034c6:	4602      	mov	r2, r0
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	490a      	ldr	r1, [pc, #40]	; (80034fc <HAL_RCC_ClockConfig+0x1c0>)
 80034d4:	5ccb      	ldrb	r3, [r1, r3]
 80034d6:	fa22 f303 	lsr.w	r3, r2, r3
 80034da:	4a09      	ldr	r2, [pc, #36]	; (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034de:	4b09      	ldr	r3, [pc, #36]	; (8003504 <HAL_RCC_ClockConfig+0x1c8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fd faf8 	bl	8000ad8 <HAL_InitTick>

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40023c00 	.word	0x40023c00
 80034f8:	40023800 	.word	0x40023800
 80034fc:	0800730c 	.word	0x0800730c
 8003500:	20000000 	.word	0x20000000
 8003504:	20000004 	.word	0x20000004

08003508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800350c:	b094      	sub	sp, #80	; 0x50
 800350e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	647b      	str	r3, [r7, #68]	; 0x44
 8003514:	2300      	movs	r3, #0
 8003516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003518:	2300      	movs	r3, #0
 800351a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003520:	4b79      	ldr	r3, [pc, #484]	; (8003708 <HAL_RCC_GetSysClockFreq+0x200>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 030c 	and.w	r3, r3, #12
 8003528:	2b08      	cmp	r3, #8
 800352a:	d00d      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0x40>
 800352c:	2b08      	cmp	r3, #8
 800352e:	f200 80e1 	bhi.w	80036f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <HAL_RCC_GetSysClockFreq+0x34>
 8003536:	2b04      	cmp	r3, #4
 8003538:	d003      	beq.n	8003542 <HAL_RCC_GetSysClockFreq+0x3a>
 800353a:	e0db      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800353c:	4b73      	ldr	r3, [pc, #460]	; (800370c <HAL_RCC_GetSysClockFreq+0x204>)
 800353e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003540:	e0db      	b.n	80036fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003542:	4b73      	ldr	r3, [pc, #460]	; (8003710 <HAL_RCC_GetSysClockFreq+0x208>)
 8003544:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003546:	e0d8      	b.n	80036fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003548:	4b6f      	ldr	r3, [pc, #444]	; (8003708 <HAL_RCC_GetSysClockFreq+0x200>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003550:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003552:	4b6d      	ldr	r3, [pc, #436]	; (8003708 <HAL_RCC_GetSysClockFreq+0x200>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d063      	beq.n	8003626 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800355e:	4b6a      	ldr	r3, [pc, #424]	; (8003708 <HAL_RCC_GetSysClockFreq+0x200>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	099b      	lsrs	r3, r3, #6
 8003564:	2200      	movs	r2, #0
 8003566:	63bb      	str	r3, [r7, #56]	; 0x38
 8003568:	63fa      	str	r2, [r7, #60]	; 0x3c
 800356a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003570:	633b      	str	r3, [r7, #48]	; 0x30
 8003572:	2300      	movs	r3, #0
 8003574:	637b      	str	r3, [r7, #52]	; 0x34
 8003576:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800357a:	4622      	mov	r2, r4
 800357c:	462b      	mov	r3, r5
 800357e:	f04f 0000 	mov.w	r0, #0
 8003582:	f04f 0100 	mov.w	r1, #0
 8003586:	0159      	lsls	r1, r3, #5
 8003588:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800358c:	0150      	lsls	r0, r2, #5
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4621      	mov	r1, r4
 8003594:	1a51      	subs	r1, r2, r1
 8003596:	6139      	str	r1, [r7, #16]
 8003598:	4629      	mov	r1, r5
 800359a:	eb63 0301 	sbc.w	r3, r3, r1
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035ac:	4659      	mov	r1, fp
 80035ae:	018b      	lsls	r3, r1, #6
 80035b0:	4651      	mov	r1, sl
 80035b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035b6:	4651      	mov	r1, sl
 80035b8:	018a      	lsls	r2, r1, #6
 80035ba:	4651      	mov	r1, sl
 80035bc:	ebb2 0801 	subs.w	r8, r2, r1
 80035c0:	4659      	mov	r1, fp
 80035c2:	eb63 0901 	sbc.w	r9, r3, r1
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035da:	4690      	mov	r8, r2
 80035dc:	4699      	mov	r9, r3
 80035de:	4623      	mov	r3, r4
 80035e0:	eb18 0303 	adds.w	r3, r8, r3
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	462b      	mov	r3, r5
 80035e8:	eb49 0303 	adc.w	r3, r9, r3
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035fa:	4629      	mov	r1, r5
 80035fc:	024b      	lsls	r3, r1, #9
 80035fe:	4621      	mov	r1, r4
 8003600:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003604:	4621      	mov	r1, r4
 8003606:	024a      	lsls	r2, r1, #9
 8003608:	4610      	mov	r0, r2
 800360a:	4619      	mov	r1, r3
 800360c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800360e:	2200      	movs	r2, #0
 8003610:	62bb      	str	r3, [r7, #40]	; 0x28
 8003612:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003614:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003618:	f7fc fdd6 	bl	80001c8 <__aeabi_uldivmod>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4613      	mov	r3, r2
 8003622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003624:	e058      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003626:	4b38      	ldr	r3, [pc, #224]	; (8003708 <HAL_RCC_GetSysClockFreq+0x200>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	099b      	lsrs	r3, r3, #6
 800362c:	2200      	movs	r2, #0
 800362e:	4618      	mov	r0, r3
 8003630:	4611      	mov	r1, r2
 8003632:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003636:	623b      	str	r3, [r7, #32]
 8003638:	2300      	movs	r3, #0
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
 800363c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003640:	4642      	mov	r2, r8
 8003642:	464b      	mov	r3, r9
 8003644:	f04f 0000 	mov.w	r0, #0
 8003648:	f04f 0100 	mov.w	r1, #0
 800364c:	0159      	lsls	r1, r3, #5
 800364e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003652:	0150      	lsls	r0, r2, #5
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4641      	mov	r1, r8
 800365a:	ebb2 0a01 	subs.w	sl, r2, r1
 800365e:	4649      	mov	r1, r9
 8003660:	eb63 0b01 	sbc.w	fp, r3, r1
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003670:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003674:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003678:	ebb2 040a 	subs.w	r4, r2, sl
 800367c:	eb63 050b 	sbc.w	r5, r3, fp
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	00eb      	lsls	r3, r5, #3
 800368a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800368e:	00e2      	lsls	r2, r4, #3
 8003690:	4614      	mov	r4, r2
 8003692:	461d      	mov	r5, r3
 8003694:	4643      	mov	r3, r8
 8003696:	18e3      	adds	r3, r4, r3
 8003698:	603b      	str	r3, [r7, #0]
 800369a:	464b      	mov	r3, r9
 800369c:	eb45 0303 	adc.w	r3, r5, r3
 80036a0:	607b      	str	r3, [r7, #4]
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	f04f 0300 	mov.w	r3, #0
 80036aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036ae:	4629      	mov	r1, r5
 80036b0:	028b      	lsls	r3, r1, #10
 80036b2:	4621      	mov	r1, r4
 80036b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036b8:	4621      	mov	r1, r4
 80036ba:	028a      	lsls	r2, r1, #10
 80036bc:	4610      	mov	r0, r2
 80036be:	4619      	mov	r1, r3
 80036c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c2:	2200      	movs	r2, #0
 80036c4:	61bb      	str	r3, [r7, #24]
 80036c6:	61fa      	str	r2, [r7, #28]
 80036c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036cc:	f7fc fd7c 	bl	80001c8 <__aeabi_uldivmod>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4613      	mov	r3, r2
 80036d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <HAL_RCC_GetSysClockFreq+0x200>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	0c1b      	lsrs	r3, r3, #16
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	3301      	adds	r3, #1
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80036e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036f2:	e002      	b.n	80036fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <HAL_RCC_GetSysClockFreq+0x204>)
 80036f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3750      	adds	r7, #80	; 0x50
 8003700:	46bd      	mov	sp, r7
 8003702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800
 800370c:	00f42400 	.word	0x00f42400
 8003710:	007a1200 	.word	0x007a1200

08003714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003718:	4b03      	ldr	r3, [pc, #12]	; (8003728 <HAL_RCC_GetHCLKFreq+0x14>)
 800371a:	681b      	ldr	r3, [r3, #0]
}
 800371c:	4618      	mov	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	20000000 	.word	0x20000000

0800372c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800372c:	b084      	sub	sp, #16
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	f107 001c 	add.w	r0, r7, #28
 800373a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	2b01      	cmp	r3, #1
 8003742:	d122      	bne.n	800378a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800376c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800376e:	2b01      	cmp	r3, #1
 8003770:	d105      	bne.n	800377e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f001 fbee 	bl	8004f60 <USB_CoreReset>
 8003784:	4603      	mov	r3, r0
 8003786:	73fb      	strb	r3, [r7, #15]
 8003788:	e01a      	b.n	80037c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f001 fbe2 	bl	8004f60 <USB_CoreReset>
 800379c:	4603      	mov	r3, r0
 800379e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	639a      	str	r2, [r3, #56]	; 0x38
 80037b2:	e005      	b.n	80037c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d10b      	bne.n	80037de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f043 0206 	orr.w	r2, r3, #6
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f043 0220 	orr.w	r2, r3, #32
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80037de:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037ea:	b004      	add	sp, #16
 80037ec:	4770      	bx	lr
	...

080037f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	4613      	mov	r3, r2
 80037fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	2b02      	cmp	r3, #2
 8003802:	d165      	bne.n	80038d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4a41      	ldr	r2, [pc, #260]	; (800390c <USB_SetTurnaroundTime+0x11c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d906      	bls.n	800381a <USB_SetTurnaroundTime+0x2a>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4a40      	ldr	r2, [pc, #256]	; (8003910 <USB_SetTurnaroundTime+0x120>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d202      	bcs.n	800381a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003814:	230f      	movs	r3, #15
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	e062      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	4a3c      	ldr	r2, [pc, #240]	; (8003910 <USB_SetTurnaroundTime+0x120>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d306      	bcc.n	8003830 <USB_SetTurnaroundTime+0x40>
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	4a3b      	ldr	r2, [pc, #236]	; (8003914 <USB_SetTurnaroundTime+0x124>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d202      	bcs.n	8003830 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800382a:	230e      	movs	r3, #14
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	e057      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4a38      	ldr	r2, [pc, #224]	; (8003914 <USB_SetTurnaroundTime+0x124>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d306      	bcc.n	8003846 <USB_SetTurnaroundTime+0x56>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	4a37      	ldr	r2, [pc, #220]	; (8003918 <USB_SetTurnaroundTime+0x128>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d202      	bcs.n	8003846 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003840:	230d      	movs	r3, #13
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	e04c      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	4a33      	ldr	r2, [pc, #204]	; (8003918 <USB_SetTurnaroundTime+0x128>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d306      	bcc.n	800385c <USB_SetTurnaroundTime+0x6c>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	4a32      	ldr	r2, [pc, #200]	; (800391c <USB_SetTurnaroundTime+0x12c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d802      	bhi.n	800385c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003856:	230c      	movs	r3, #12
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	e041      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4a2f      	ldr	r2, [pc, #188]	; (800391c <USB_SetTurnaroundTime+0x12c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d906      	bls.n	8003872 <USB_SetTurnaroundTime+0x82>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4a2e      	ldr	r2, [pc, #184]	; (8003920 <USB_SetTurnaroundTime+0x130>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d802      	bhi.n	8003872 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800386c:	230b      	movs	r3, #11
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	e036      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4a2a      	ldr	r2, [pc, #168]	; (8003920 <USB_SetTurnaroundTime+0x130>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d906      	bls.n	8003888 <USB_SetTurnaroundTime+0x98>
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	4a29      	ldr	r2, [pc, #164]	; (8003924 <USB_SetTurnaroundTime+0x134>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d802      	bhi.n	8003888 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003882:	230a      	movs	r3, #10
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	e02b      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4a26      	ldr	r2, [pc, #152]	; (8003924 <USB_SetTurnaroundTime+0x134>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d906      	bls.n	800389e <USB_SetTurnaroundTime+0xae>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4a25      	ldr	r2, [pc, #148]	; (8003928 <USB_SetTurnaroundTime+0x138>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d202      	bcs.n	800389e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003898:	2309      	movs	r3, #9
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	e020      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	4a21      	ldr	r2, [pc, #132]	; (8003928 <USB_SetTurnaroundTime+0x138>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d306      	bcc.n	80038b4 <USB_SetTurnaroundTime+0xc4>
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4a20      	ldr	r2, [pc, #128]	; (800392c <USB_SetTurnaroundTime+0x13c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d802      	bhi.n	80038b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80038ae:	2308      	movs	r3, #8
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	e015      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4a1d      	ldr	r2, [pc, #116]	; (800392c <USB_SetTurnaroundTime+0x13c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d906      	bls.n	80038ca <USB_SetTurnaroundTime+0xda>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4a1c      	ldr	r2, [pc, #112]	; (8003930 <USB_SetTurnaroundTime+0x140>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d202      	bcs.n	80038ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80038c4:	2307      	movs	r3, #7
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	e00a      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80038ca:	2306      	movs	r3, #6
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e007      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d102      	bne.n	80038dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80038d6:	2309      	movs	r3, #9
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	e001      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80038dc:	2309      	movs	r3, #9
 80038de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	029b      	lsls	r3, r3, #10
 80038f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80038f8:	431a      	orrs	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	371c      	adds	r7, #28
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	00d8acbf 	.word	0x00d8acbf
 8003910:	00e4e1c0 	.word	0x00e4e1c0
 8003914:	00f42400 	.word	0x00f42400
 8003918:	01067380 	.word	0x01067380
 800391c:	011a499f 	.word	0x011a499f
 8003920:	01312cff 	.word	0x01312cff
 8003924:	014ca43f 	.word	0x014ca43f
 8003928:	016e3600 	.word	0x016e3600
 800392c:	01a6ab1f 	.word	0x01a6ab1f
 8003930:	01e84800 	.word	0x01e84800

08003934 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f043 0201 	orr.w	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f023 0201 	bic.w	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d115      	bne.n	80039c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039a6:	2001      	movs	r0, #1
 80039a8:	f7fd f8e6 	bl	8000b78 <HAL_Delay>
      ms++;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	3301      	adds	r3, #1
 80039b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f001 fa45 	bl	8004e42 <USB_GetMode>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d01e      	beq.n	80039fc <USB_SetCurrentMode+0x84>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2b31      	cmp	r3, #49	; 0x31
 80039c2:	d9f0      	bls.n	80039a6 <USB_SetCurrentMode+0x2e>
 80039c4:	e01a      	b.n	80039fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80039c6:	78fb      	ldrb	r3, [r7, #3]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d115      	bne.n	80039f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039d8:	2001      	movs	r0, #1
 80039da:	f7fd f8cd 	bl	8000b78 <HAL_Delay>
      ms++;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	3301      	adds	r3, #1
 80039e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f001 fa2c 	bl	8004e42 <USB_GetMode>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <USB_SetCurrentMode+0x84>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b31      	cmp	r3, #49	; 0x31
 80039f4:	d9f0      	bls.n	80039d8 <USB_SetCurrentMode+0x60>
 80039f6:	e001      	b.n	80039fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e005      	b.n	8003a08 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b32      	cmp	r3, #50	; 0x32
 8003a00:	d101      	bne.n	8003a06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a10:	b084      	sub	sp, #16
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b086      	sub	sp, #24
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	e009      	b.n	8003a44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	3340      	adds	r3, #64	; 0x40
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	3301      	adds	r3, #1
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b0e      	cmp	r3, #14
 8003a48:	d9f2      	bls.n	8003a30 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d11c      	bne.n	8003a8a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a5e:	f043 0302 	orr.w	r3, r3, #2
 8003a62:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	639a      	str	r2, [r3, #56]	; 0x38
 8003a88:	e00b      	b.n	8003aa2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	2300      	movs	r3, #0
 8003aac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003abc:	461a      	mov	r2, r3
 8003abe:	680b      	ldr	r3, [r1, #0]
 8003ac0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d10c      	bne.n	8003ae2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d104      	bne.n	8003ad8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ace:	2100      	movs	r1, #0
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f965 	bl	8003da0 <USB_SetDevSpeed>
 8003ad6:	e008      	b.n	8003aea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003ad8:	2101      	movs	r1, #1
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f960 	bl	8003da0 <USB_SetDevSpeed>
 8003ae0:	e003      	b.n	8003aea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ae2:	2103      	movs	r1, #3
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f95b 	bl	8003da0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003aea:	2110      	movs	r1, #16
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f8f3 	bl	8003cd8 <USB_FlushTxFifo>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f91f 	bl	8003d40 <USB_FlushRxFifo>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b12:	461a      	mov	r2, r3
 8003b14:	2300      	movs	r3, #0
 8003b16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2300      	movs	r3, #0
 8003b22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b30:	2300      	movs	r3, #0
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	e043      	b.n	8003bbe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b4c:	d118      	bne.n	8003b80 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b60:	461a      	mov	r2, r3
 8003b62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	e013      	b.n	8003b92 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b76:	461a      	mov	r2, r3
 8003b78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	e008      	b.n	8003b92 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	2300      	movs	r3, #0
 8003b90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d3b7      	bcc.n	8003b36 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	e043      	b.n	8003c54 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003be2:	d118      	bne.n	8003c16 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10a      	bne.n	8003c00 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	e013      	b.n	8003c28 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	e008      	b.n	8003c28 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c22:	461a      	mov	r2, r3
 8003c24:	2300      	movs	r3, #0
 8003c26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c34:	461a      	mov	r2, r3
 8003c36:	2300      	movs	r3, #0
 8003c38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c46:	461a      	mov	r2, r3
 8003c48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	3301      	adds	r3, #1
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d3b7      	bcc.n	8003bcc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d105      	bne.n	8003c90 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f043 0210 	orr.w	r2, r3, #16
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699a      	ldr	r2, [r3, #24]
 8003c94:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <USB_DevInit+0x2c4>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f043 0208 	orr.w	r2, r3, #8
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d107      	bne.n	8003cc4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cbc:	f043 0304 	orr.w	r3, r3, #4
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cd0:	b004      	add	sp, #16
 8003cd2:	4770      	bx	lr
 8003cd4:	803c3800 	.word	0x803c3800

08003cd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4a13      	ldr	r2, [pc, #76]	; (8003d3c <USB_FlushTxFifo+0x64>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d901      	bls.n	8003cf8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e01b      	b.n	8003d30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	daf2      	bge.n	8003ce6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	019b      	lsls	r3, r3, #6
 8003d08:	f043 0220 	orr.w	r2, r3, #32
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3301      	adds	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4a08      	ldr	r2, [pc, #32]	; (8003d3c <USB_FlushTxFifo+0x64>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d901      	bls.n	8003d22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e006      	b.n	8003d30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d0f0      	beq.n	8003d10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	00030d40 	.word	0x00030d40

08003d40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4a11      	ldr	r2, [pc, #68]	; (8003d9c <USB_FlushRxFifo+0x5c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d901      	bls.n	8003d5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e018      	b.n	8003d90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	daf2      	bge.n	8003d4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2210      	movs	r2, #16
 8003d6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	3301      	adds	r3, #1
 8003d74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4a08      	ldr	r2, [pc, #32]	; (8003d9c <USB_FlushRxFifo+0x5c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d901      	bls.n	8003d82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e006      	b.n	8003d90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b10      	cmp	r3, #16
 8003d8c:	d0f0      	beq.n	8003d70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	00030d40 	.word	0x00030d40

08003da0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	78fb      	ldrb	r3, [r7, #3]
 8003dba:	68f9      	ldr	r1, [r7, #12]
 8003dbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b087      	sub	sp, #28
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 0306 	and.w	r3, r3, #6
 8003dea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d102      	bne.n	8003df8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003df2:	2300      	movs	r3, #0
 8003df4:	75fb      	strb	r3, [r7, #23]
 8003df6:	e00a      	b.n	8003e0e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d002      	beq.n	8003e04 <USB_GetDevSpeed+0x32>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b06      	cmp	r3, #6
 8003e02:	d102      	bne.n	8003e0a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003e04:	2302      	movs	r3, #2
 8003e06:	75fb      	strb	r3, [r7, #23]
 8003e08:	e001      	b.n	8003e0e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003e0a:	230f      	movs	r3, #15
 8003e0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	785b      	ldrb	r3, [r3, #1]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d13a      	bne.n	8003eae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3e:	69da      	ldr	r2, [r3, #28]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	2101      	movs	r1, #1
 8003e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	68f9      	ldr	r1, [r7, #12]
 8003e52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	015a      	lsls	r2, r3, #5
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4413      	add	r3, r2
 8003e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d155      	bne.n	8003f1c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	791b      	ldrb	r3, [r3, #4]
 8003e8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	059b      	lsls	r3, r3, #22
 8003e92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e94:	4313      	orrs	r3, r2
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	0151      	lsls	r1, r2, #5
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	440a      	add	r2, r1
 8003e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	e036      	b.n	8003f1c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec4:	041b      	lsls	r3, r3, #16
 8003ec6:	68f9      	ldr	r1, [r7, #12]
 8003ec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d11a      	bne.n	8003f1c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	791b      	ldrb	r3, [r3, #4]
 8003f00:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f02:	430b      	orrs	r3, r1
 8003f04:	4313      	orrs	r3, r2
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	0151      	lsls	r1, r2, #5
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	440a      	add	r2, r1
 8003f0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f1a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	785b      	ldrb	r3, [r3, #1]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d161      	bne.n	800400c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f5e:	d11f      	bne.n	8003fa0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	0151      	lsls	r1, r2, #5
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	440a      	add	r2, r1
 8003f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f7e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	0151      	lsls	r1, r2, #5
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	440a      	add	r2, r1
 8003f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	68f9      	ldr	r1, [r7, #12]
 8003fbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fca:	69da      	ldr	r2, [r3, #28]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	68f9      	ldr	r1, [r7, #12]
 8003fe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	0159      	lsls	r1, r3, #5
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	440b      	add	r3, r1
 8003ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004002:	4619      	mov	r1, r3
 8004004:	4b35      	ldr	r3, [pc, #212]	; (80040dc <USB_DeactivateEndpoint+0x1b0>)
 8004006:	4013      	ands	r3, r2
 8004008:	600b      	str	r3, [r1, #0]
 800400a:	e060      	b.n	80040ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800401e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004022:	d11f      	bne.n	8004064 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	0151      	lsls	r1, r2, #5
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	440a      	add	r2, r1
 800403a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800403e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004042:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	0151      	lsls	r1, r2, #5
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	440a      	add	r2, r1
 800405a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800405e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004062:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	f003 030f 	and.w	r3, r3, #15
 8004074:	2101      	movs	r1, #1
 8004076:	fa01 f303 	lsl.w	r3, r1, r3
 800407a:	041b      	lsls	r3, r3, #16
 800407c:	43db      	mvns	r3, r3
 800407e:	68f9      	ldr	r1, [r7, #12]
 8004080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004084:	4013      	ands	r3, r2
 8004086:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408e:	69da      	ldr	r2, [r3, #28]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	f003 030f 	and.w	r3, r3, #15
 8004098:	2101      	movs	r1, #1
 800409a:	fa01 f303 	lsl.w	r3, r1, r3
 800409e:	041b      	lsls	r3, r3, #16
 80040a0:	43db      	mvns	r3, r3
 80040a2:	68f9      	ldr	r1, [r7, #12]
 80040a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040a8:	4013      	ands	r3, r2
 80040aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	0159      	lsls	r1, r3, #5
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	440b      	add	r3, r1
 80040c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c6:	4619      	mov	r1, r3
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <USB_DeactivateEndpoint+0x1b4>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	ec337800 	.word	0xec337800
 80040e0:	eff37800 	.word	0xeff37800

080040e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08a      	sub	sp, #40	; 0x28
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	4613      	mov	r3, r2
 80040f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	785b      	ldrb	r3, [r3, #1]
 8004100:	2b01      	cmp	r3, #1
 8004102:	f040 815c 	bne.w	80043be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d132      	bne.n	8004174 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	4413      	add	r3, r2
 8004116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	0151      	lsls	r1, r2, #5
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	440a      	add	r2, r1
 8004124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004128:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800412c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004130:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	0151      	lsls	r1, r2, #5
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	440a      	add	r2, r1
 8004148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800414c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004150:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	0151      	lsls	r1, r2, #5
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	440a      	add	r2, r1
 8004168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800416c:	0cdb      	lsrs	r3, r3, #19
 800416e:	04db      	lsls	r3, r3, #19
 8004170:	6113      	str	r3, [r2, #16]
 8004172:	e074      	b.n	800425e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	0151      	lsls	r1, r2, #5
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	440a      	add	r2, r1
 800418a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800418e:	0cdb      	lsrs	r3, r3, #19
 8004190:	04db      	lsls	r3, r3, #19
 8004192:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	0151      	lsls	r1, r2, #5
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	440a      	add	r2, r1
 80041aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	6999      	ldr	r1, [r3, #24]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	440b      	add	r3, r1
 80041d0:	1e59      	subs	r1, r3, #1
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80041da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80041dc:	4b9d      	ldr	r3, [pc, #628]	; (8004454 <USB_EPStartXfer+0x370>)
 80041de:	400b      	ands	r3, r1
 80041e0:	69b9      	ldr	r1, [r7, #24]
 80041e2:	0148      	lsls	r0, r1, #5
 80041e4:	69f9      	ldr	r1, [r7, #28]
 80041e6:	4401      	add	r1, r0
 80041e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041ec:	4313      	orrs	r3, r2
 80041ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fc:	691a      	ldr	r2, [r3, #16]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004206:	69b9      	ldr	r1, [r7, #24]
 8004208:	0148      	lsls	r0, r1, #5
 800420a:	69f9      	ldr	r1, [r7, #28]
 800420c:	4401      	add	r1, r0
 800420e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004212:	4313      	orrs	r3, r2
 8004214:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	791b      	ldrb	r3, [r3, #4]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d11f      	bne.n	800425e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	4413      	add	r3, r2
 8004226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	0151      	lsls	r1, r2, #5
 8004230:	69fa      	ldr	r2, [r7, #28]
 8004232:	440a      	add	r2, r1
 8004234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004238:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800423c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	0151      	lsls	r1, r2, #5
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	440a      	add	r2, r1
 8004254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004258:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800425c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800425e:	79fb      	ldrb	r3, [r7, #7]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d14b      	bne.n	80042fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d009      	beq.n	8004280 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004278:	461a      	mov	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	791b      	ldrb	r3, [r3, #4]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d128      	bne.n	80042da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d110      	bne.n	80042ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	0151      	lsls	r1, r2, #5
 80042aa:	69fa      	ldr	r2, [r7, #28]
 80042ac:	440a      	add	r2, r1
 80042ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	e00f      	b.n	80042da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	0151      	lsls	r1, r2, #5
 80042cc:	69fa      	ldr	r2, [r7, #28]
 80042ce:	440a      	add	r2, r1
 80042d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	0151      	lsls	r1, r2, #5
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	440a      	add	r2, r1
 80042f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e133      	b.n	8004564 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	0151      	lsls	r1, r2, #5
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	440a      	add	r2, r1
 8004312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004316:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800431a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	791b      	ldrb	r3, [r3, #4]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d015      	beq.n	8004350 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 811b 	beq.w	8004564 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	2101      	movs	r1, #1
 8004340:	fa01 f303 	lsl.w	r3, r1, r3
 8004344:	69f9      	ldr	r1, [r7, #28]
 8004346:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800434a:	4313      	orrs	r3, r2
 800434c:	634b      	str	r3, [r1, #52]	; 0x34
 800434e:	e109      	b.n	8004564 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d110      	bne.n	8004382 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	0151      	lsls	r1, r2, #5
 8004372:	69fa      	ldr	r2, [r7, #28]
 8004374:	440a      	add	r2, r1
 8004376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800437a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	e00f      	b.n	80043a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	0151      	lsls	r1, r2, #5
 8004394:	69fa      	ldr	r2, [r7, #28]
 8004396:	440a      	add	r2, r1
 8004398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800439c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	6919      	ldr	r1, [r3, #16]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	781a      	ldrb	r2, [r3, #0]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	b298      	uxth	r0, r3
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	4603      	mov	r3, r0
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fade 	bl	8004978 <USB_WritePacket>
 80043bc:	e0d2      	b.n	8004564 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	0151      	lsls	r1, r2, #5
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	440a      	add	r2, r1
 80043d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043d8:	0cdb      	lsrs	r3, r3, #19
 80043da:	04db      	lsls	r3, r3, #19
 80043dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	0151      	lsls	r1, r2, #5
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	440a      	add	r2, r1
 80043f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004400:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d126      	bne.n	8004458 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004420:	69b9      	ldr	r1, [r7, #24]
 8004422:	0148      	lsls	r0, r1, #5
 8004424:	69f9      	ldr	r1, [r7, #28]
 8004426:	4401      	add	r1, r0
 8004428:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800442c:	4313      	orrs	r3, r2
 800442e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	0151      	lsls	r1, r2, #5
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	440a      	add	r2, r1
 8004446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800444a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800444e:	6113      	str	r3, [r2, #16]
 8004450:	e03a      	b.n	80044c8 <USB_EPStartXfer+0x3e4>
 8004452:	bf00      	nop
 8004454:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	699a      	ldr	r2, [r3, #24]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	4413      	add	r3, r2
 8004462:	1e5a      	subs	r2, r3, #1
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	fbb2 f3f3 	udiv	r3, r2, r3
 800446c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	8afa      	ldrh	r2, [r7, #22]
 8004474:	fb03 f202 	mul.w	r2, r3, r2
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	4413      	add	r3, r2
 8004484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	8afb      	ldrh	r3, [r7, #22]
 800448c:	04d9      	lsls	r1, r3, #19
 800448e:	4b38      	ldr	r3, [pc, #224]	; (8004570 <USB_EPStartXfer+0x48c>)
 8004490:	400b      	ands	r3, r1
 8004492:	69b9      	ldr	r1, [r7, #24]
 8004494:	0148      	lsls	r0, r1, #5
 8004496:	69f9      	ldr	r1, [r7, #28]
 8004498:	4401      	add	r1, r0
 800449a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800449e:	4313      	orrs	r3, r2
 80044a0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ae:	691a      	ldr	r2, [r3, #16]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044b8:	69b9      	ldr	r1, [r7, #24]
 80044ba:	0148      	lsls	r0, r1, #5
 80044bc:	69f9      	ldr	r1, [r7, #28]
 80044be:	4401      	add	r1, r0
 80044c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044c4:	4313      	orrs	r3, r2
 80044c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d10d      	bne.n	80044ea <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d009      	beq.n	80044ea <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	6919      	ldr	r1, [r3, #16]
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e6:	460a      	mov	r2, r1
 80044e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	791b      	ldrb	r3, [r3, #4]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d128      	bne.n	8004544 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d110      	bne.n	8004524 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	4413      	add	r3, r2
 800450a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	0151      	lsls	r1, r2, #5
 8004514:	69fa      	ldr	r2, [r7, #28]
 8004516:	440a      	add	r2, r1
 8004518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800451c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e00f      	b.n	8004544 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	0151      	lsls	r1, r2, #5
 8004536:	69fa      	ldr	r2, [r7, #28]
 8004538:	440a      	add	r2, r1
 800453a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800453e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004542:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	0151      	lsls	r1, r2, #5
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	440a      	add	r2, r1
 800455a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800455e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004562:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3720      	adds	r7, #32
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	1ff80000 	.word	0x1ff80000

08004574 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	4613      	mov	r3, r2
 8004580:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	785b      	ldrb	r3, [r3, #1]
 8004590:	2b01      	cmp	r3, #1
 8004592:	f040 80ce 	bne.w	8004732 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d132      	bne.n	8004604 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	0151      	lsls	r1, r2, #5
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	440a      	add	r2, r1
 80045b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	0151      	lsls	r1, r2, #5
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	440a      	add	r2, r1
 80045d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	0151      	lsls	r1, r2, #5
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	440a      	add	r2, r1
 80045f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045fc:	0cdb      	lsrs	r3, r3, #19
 80045fe:	04db      	lsls	r3, r3, #19
 8004600:	6113      	str	r3, [r2, #16]
 8004602:	e04e      	b.n	80046a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	0151      	lsls	r1, r2, #5
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	440a      	add	r2, r1
 800461a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800461e:	0cdb      	lsrs	r3, r3, #19
 8004620:	04db      	lsls	r3, r3, #19
 8004622:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	0151      	lsls	r1, r2, #5
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	440a      	add	r2, r1
 800463a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800463e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004642:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004646:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	699a      	ldr	r2, [r3, #24]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	429a      	cmp	r2, r3
 8004652:	d903      	bls.n	800465c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	440a      	add	r2, r1
 8004672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004676:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800467a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004692:	6939      	ldr	r1, [r7, #16]
 8004694:	0148      	lsls	r0, r1, #5
 8004696:	6979      	ldr	r1, [r7, #20]
 8004698:	4401      	add	r1, r0
 800469a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800469e:	4313      	orrs	r3, r2
 80046a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80046a2:	79fb      	ldrb	r3, [r7, #7]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d11e      	bne.n	80046e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d009      	beq.n	80046c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046bc:	461a      	mov	r2, r3
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	0151      	lsls	r1, r2, #5
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	440a      	add	r2, r1
 80046da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	e097      	b.n	8004816 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	0151      	lsls	r1, r2, #5
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	440a      	add	r2, r1
 80046fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004700:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004704:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 8083 	beq.w	8004816 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	2101      	movs	r1, #1
 8004722:	fa01 f303 	lsl.w	r3, r1, r3
 8004726:	6979      	ldr	r1, [r7, #20]
 8004728:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800472c:	4313      	orrs	r3, r2
 800472e:	634b      	str	r3, [r1, #52]	; 0x34
 8004730:	e071      	b.n	8004816 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	0151      	lsls	r1, r2, #5
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	440a      	add	r2, r1
 8004748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800474c:	0cdb      	lsrs	r3, r3, #19
 800474e:	04db      	lsls	r3, r3, #19
 8004750:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	0151      	lsls	r1, r2, #5
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	440a      	add	r2, r1
 8004768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800476c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004770:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004774:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	0151      	lsls	r1, r2, #5
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	440a      	add	r2, r1
 80047a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c4:	6939      	ldr	r1, [r7, #16]
 80047c6:	0148      	lsls	r0, r1, #5
 80047c8:	6979      	ldr	r1, [r7, #20]
 80047ca:	4401      	add	r1, r0
 80047cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047d0:	4313      	orrs	r3, r2
 80047d2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d10d      	bne.n	80047f6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d009      	beq.n	80047f6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	6919      	ldr	r1, [r3, #16]
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f2:	460a      	mov	r2, r1
 80047f4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	0151      	lsls	r1, r2, #5
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	440a      	add	r2, r1
 800480c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004810:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004814:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	785b      	ldrb	r3, [r3, #1]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d14a      	bne.n	80048d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004856:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800485a:	f040 8086 	bne.w	800496a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	7812      	ldrb	r2, [r2, #0]
 8004872:	0151      	lsls	r1, r2, #5
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	440a      	add	r2, r1
 8004878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800487c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004880:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	7812      	ldrb	r2, [r2, #0]
 8004896:	0151      	lsls	r1, r2, #5
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	440a      	add	r2, r1
 800489c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3301      	adds	r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d902      	bls.n	80048bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	75fb      	strb	r3, [r7, #23]
          break;
 80048ba:	e056      	b.n	800496a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048d4:	d0e7      	beq.n	80048a6 <USB_EPStopXfer+0x82>
 80048d6:	e048      	b.n	800496a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048f0:	d13b      	bne.n	800496a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	7812      	ldrb	r2, [r2, #0]
 8004906:	0151      	lsls	r1, r2, #5
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	440a      	add	r2, r1
 800490c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004910:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004914:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	7812      	ldrb	r2, [r2, #0]
 800492a:	0151      	lsls	r1, r2, #5
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	440a      	add	r2, r1
 8004930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004934:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004938:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	3301      	adds	r3, #1
 800493e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f242 7210 	movw	r2, #10000	; 0x2710
 8004946:	4293      	cmp	r3, r2
 8004948:	d902      	bls.n	8004950 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	75fb      	strb	r3, [r7, #23]
          break;
 800494e:	e00c      	b.n	800496a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004968:	d0e7      	beq.n	800493a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800496a:	7dfb      	ldrb	r3, [r7, #23]
}
 800496c:	4618      	mov	r0, r3
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004978:	b480      	push	{r7}
 800497a:	b089      	sub	sp, #36	; 0x24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	4611      	mov	r1, r2
 8004984:	461a      	mov	r2, r3
 8004986:	460b      	mov	r3, r1
 8004988:	71fb      	strb	r3, [r7, #7]
 800498a:	4613      	mov	r3, r2
 800498c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004996:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800499a:	2b00      	cmp	r3, #0
 800499c:	d123      	bne.n	80049e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800499e:	88bb      	ldrh	r3, [r7, #4]
 80049a0:	3303      	adds	r3, #3
 80049a2:	089b      	lsrs	r3, r3, #2
 80049a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80049a6:	2300      	movs	r3, #0
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	e018      	b.n	80049de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	031a      	lsls	r2, r3, #12
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b8:	461a      	mov	r2, r3
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	3301      	adds	r3, #1
 80049c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	3301      	adds	r3, #1
 80049ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	3301      	adds	r3, #1
 80049d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	3301      	adds	r3, #1
 80049d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	3301      	adds	r3, #1
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d3e2      	bcc.n	80049ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3724      	adds	r7, #36	; 0x24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b08b      	sub	sp, #44	; 0x2c
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	4613      	mov	r3, r2
 8004a00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	089b      	lsrs	r3, r3, #2
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a12:	88fb      	ldrh	r3, [r7, #6]
 8004a14:	f003 0303 	and.w	r3, r3, #3
 8004a18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	623b      	str	r3, [r7, #32]
 8004a1e:	e014      	b.n	8004a4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	3301      	adds	r3, #1
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	3301      	adds	r3, #1
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	3301      	adds	r3, #1
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	3301      	adds	r3, #1
 8004a48:	623b      	str	r3, [r7, #32]
 8004a4a:	6a3a      	ldr	r2, [r7, #32]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d3e6      	bcc.n	8004a20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a52:	8bfb      	ldrh	r3, [r7, #30]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d01e      	beq.n	8004a96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a62:	461a      	mov	r2, r3
 8004a64:	f107 0310 	add.w	r3, r7, #16
 8004a68:	6812      	ldr	r2, [r2, #0]
 8004a6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	701a      	strb	r2, [r3, #0]
      i++;
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	3301      	adds	r3, #1
 8004a82:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	3301      	adds	r3, #1
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a8a:	8bfb      	ldrh	r3, [r7, #30]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a90:	8bfb      	ldrh	r3, [r7, #30]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1ea      	bne.n	8004a6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	372c      	adds	r7, #44	; 0x2c
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	785b      	ldrb	r3, [r3, #1]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d12c      	bne.n	8004b1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	db12      	blt.n	8004af8 <USB_EPSetStall+0x54>
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00f      	beq.n	8004af8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	0151      	lsls	r1, r2, #5
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	440a      	add	r2, r1
 8004aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004af6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	0151      	lsls	r1, r2, #5
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	440a      	add	r2, r1
 8004b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	e02b      	b.n	8004b72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	db12      	blt.n	8004b52 <USB_EPSetStall+0xae>
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00f      	beq.n	8004b52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	0151      	lsls	r1, r2, #5
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	440a      	add	r2, r1
 8004b48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	0151      	lsls	r1, r2, #5
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	440a      	add	r2, r1
 8004b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	785b      	ldrb	r3, [r3, #1]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d128      	bne.n	8004bee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	0151      	lsls	r1, r2, #5
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	440a      	add	r2, r1
 8004bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	791b      	ldrb	r3, [r3, #4]
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	d003      	beq.n	8004bcc <USB_EPClearStall+0x4c>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	791b      	ldrb	r3, [r3, #4]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d138      	bne.n	8004c3e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	0151      	lsls	r1, r2, #5
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	440a      	add	r2, r1
 8004be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	e027      	b.n	8004c3e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	0151      	lsls	r1, r2, #5
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	440a      	add	r2, r1
 8004c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	791b      	ldrb	r3, [r3, #4]
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	d003      	beq.n	8004c1e <USB_EPClearStall+0x9e>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	791b      	ldrb	r3, [r3, #4]
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d10f      	bne.n	8004c3e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	0151      	lsls	r1, r2, #5
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	440a      	add	r2, r1
 8004c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c6e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	011b      	lsls	r3, r3, #4
 8004c7c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004c80:	68f9      	ldr	r1, [r7, #12]
 8004c82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c86:	4313      	orrs	r3, r2
 8004c88:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004cb2:	f023 0303 	bic.w	r3, r3, #3
 8004cb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cc6:	f023 0302 	bic.w	r3, r3, #2
 8004cca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b085      	sub	sp, #20
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004cf4:	f023 0303 	bic.w	r3, r3, #3
 8004cf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d08:	f043 0302 	orr.w	r3, r3, #2
 8004d0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4013      	ands	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004d34:	68fb      	ldr	r3, [r7, #12]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	4013      	ands	r3, r2
 8004d64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	0c1b      	lsrs	r3, r3, #16
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b085      	sub	sp, #20
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	4013      	ands	r3, r2
 8004d98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	b29b      	uxth	r3, r3
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b085      	sub	sp, #20
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	460b      	mov	r3, r1
 8004db4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b087      	sub	sp, #28
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	460b      	mov	r3, r1
 8004df0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e08:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	f003 030f 	and.w	r3, r3, #15
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	fa22 f303 	lsr.w	r3, r2, r3
 8004e16:	01db      	lsls	r3, r3, #7
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4013      	ands	r3, r2
 8004e32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e34:	68bb      	ldr	r3, [r7, #8]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	371c      	adds	r7, #28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b085      	sub	sp, #20
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004e7c:	f023 0307 	bic.w	r3, r3, #7
 8004e80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	460b      	mov	r3, r1
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	333c      	adds	r3, #60	; 0x3c
 8004eba:	3304      	adds	r3, #4
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	4a26      	ldr	r2, [pc, #152]	; (8004f5c <USB_EP0_OutStart+0xb8>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d90a      	bls.n	8004ede <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ed8:	d101      	bne.n	8004ede <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	e037      	b.n	8004f4e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ef8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004efc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f0c:	f043 0318 	orr.w	r3, r3, #24
 8004f10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f20:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004f24:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004f26:	7afb      	ldrb	r3, [r7, #11]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d10f      	bne.n	8004f4c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f32:	461a      	mov	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f46:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004f4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	371c      	adds	r7, #28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	4f54300a 	.word	0x4f54300a

08004f60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4a13      	ldr	r2, [pc, #76]	; (8004fc4 <USB_CoreReset+0x64>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d901      	bls.n	8004f7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e01b      	b.n	8004fb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	daf2      	bge.n	8004f6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f043 0201 	orr.w	r2, r3, #1
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4a09      	ldr	r2, [pc, #36]	; (8004fc4 <USB_CoreReset+0x64>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d901      	bls.n	8004fa8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e006      	b.n	8004fb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d0f0      	beq.n	8004f96 <USB_CoreReset+0x36>

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	00030d40 	.word	0x00030d40

08004fc8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004fd4:	2010      	movs	r0, #16
 8004fd6:	f002 f8f9 	bl	80071cc <USBD_static_malloc>
 8004fda:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d109      	bne.n	8004ff6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	32b0      	adds	r2, #176	; 0xb0
 8004fec:	2100      	movs	r1, #0
 8004fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e048      	b.n	8005088 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	32b0      	adds	r2, #176	; 0xb0
 8005000:	68f9      	ldr	r1, [r7, #12]
 8005002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	32b0      	adds	r2, #176	; 0xb0
 8005010:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	7c1b      	ldrb	r3, [r3, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10d      	bne.n	800503e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005022:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <USBD_HID_Init+0xc8>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	f003 020f 	and.w	r2, r3, #15
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	3326      	adds	r3, #38	; 0x26
 8005038:	2207      	movs	r2, #7
 800503a:	801a      	strh	r2, [r3, #0]
 800503c:	e00c      	b.n	8005058 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800503e:	4b14      	ldr	r3, [pc, #80]	; (8005090 <USBD_HID_Init+0xc8>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	f003 020f 	and.w	r2, r3, #15
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	3326      	adds	r3, #38	; 0x26
 8005054:	220a      	movs	r2, #10
 8005056:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005058:	4b0d      	ldr	r3, [pc, #52]	; (8005090 <USBD_HID_Init+0xc8>)
 800505a:	7819      	ldrb	r1, [r3, #0]
 800505c:	2304      	movs	r3, #4
 800505e:	2203      	movs	r2, #3
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f001 ffa2 	bl	8006faa <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005066:	4b0a      	ldr	r3, [pc, #40]	; (8005090 <USBD_HID_Init+0xc8>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	f003 020f 	and.w	r2, r3, #15
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	4613      	mov	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	440b      	add	r3, r1
 800507a:	3324      	adds	r3, #36	; 0x24
 800507c:	2201      	movs	r2, #1
 800507e:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	200000ca 	.word	0x200000ca

08005094 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80050a0:	4b1f      	ldr	r3, [pc, #124]	; (8005120 <USBD_HID_DeInit+0x8c>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	4619      	mov	r1, r3
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f001 ffa5 	bl	8006ff6 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80050ac:	4b1c      	ldr	r3, [pc, #112]	; (8005120 <USBD_HID_DeInit+0x8c>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	f003 020f 	and.w	r2, r3, #15
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	440b      	add	r3, r1
 80050c0:	3324      	adds	r3, #36	; 0x24
 80050c2:	2200      	movs	r2, #0
 80050c4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80050c6:	4b16      	ldr	r3, [pc, #88]	; (8005120 <USBD_HID_DeInit+0x8c>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	f003 020f 	and.w	r2, r3, #15
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	440b      	add	r3, r1
 80050da:	3326      	adds	r3, #38	; 0x26
 80050dc:	2200      	movs	r2, #0
 80050de:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	32b0      	adds	r2, #176	; 0xb0
 80050ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d011      	beq.n	8005116 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	32b0      	adds	r2, #176	; 0xb0
 80050fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005100:	4618      	mov	r0, r3
 8005102:	f002 f871 	bl	80071e8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	32b0      	adds	r2, #176	; 0xb0
 8005110:	2100      	movs	r1, #0
 8005112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	200000ca 	.word	0x200000ca

08005124 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	32b0      	adds	r2, #176	; 0xb0
 8005138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800513c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800514c:	2303      	movs	r3, #3
 800514e:	e0e8      	b.n	8005322 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005158:	2b00      	cmp	r3, #0
 800515a:	d046      	beq.n	80051ea <USBD_HID_Setup+0xc6>
 800515c:	2b20      	cmp	r3, #32
 800515e:	f040 80d8 	bne.w	8005312 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	785b      	ldrb	r3, [r3, #1]
 8005166:	3b02      	subs	r3, #2
 8005168:	2b09      	cmp	r3, #9
 800516a:	d836      	bhi.n	80051da <USBD_HID_Setup+0xb6>
 800516c:	a201      	add	r2, pc, #4	; (adr r2, 8005174 <USBD_HID_Setup+0x50>)
 800516e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005172:	bf00      	nop
 8005174:	080051cb 	.word	0x080051cb
 8005178:	080051ab 	.word	0x080051ab
 800517c:	080051db 	.word	0x080051db
 8005180:	080051db 	.word	0x080051db
 8005184:	080051db 	.word	0x080051db
 8005188:	080051db 	.word	0x080051db
 800518c:	080051db 	.word	0x080051db
 8005190:	080051db 	.word	0x080051db
 8005194:	080051b9 	.word	0x080051b9
 8005198:	0800519d 	.word	0x0800519d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	885b      	ldrh	r3, [r3, #2]
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	601a      	str	r2, [r3, #0]
          break;
 80051a8:	e01e      	b.n	80051e8 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2201      	movs	r2, #1
 80051ae:	4619      	mov	r1, r3
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f001 fba5 	bl	8006900 <USBD_CtlSendData>
          break;
 80051b6:	e017      	b.n	80051e8 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	885b      	ldrh	r3, [r3, #2]
 80051bc:	0a1b      	lsrs	r3, r3, #8
 80051be:	b29b      	uxth	r3, r3
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	605a      	str	r2, [r3, #4]
          break;
 80051c8:	e00e      	b.n	80051e8 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3304      	adds	r3, #4
 80051ce:	2201      	movs	r2, #1
 80051d0:	4619      	mov	r1, r3
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f001 fb94 	bl	8006900 <USBD_CtlSendData>
          break;
 80051d8:	e006      	b.n	80051e8 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80051da:	6839      	ldr	r1, [r7, #0]
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f001 fb1e 	bl	800681e <USBD_CtlError>
          ret = USBD_FAIL;
 80051e2:	2303      	movs	r3, #3
 80051e4:	75fb      	strb	r3, [r7, #23]
          break;
 80051e6:	bf00      	nop
      }
      break;
 80051e8:	e09a      	b.n	8005320 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	785b      	ldrb	r3, [r3, #1]
 80051ee:	2b0b      	cmp	r3, #11
 80051f0:	f200 8086 	bhi.w	8005300 <USBD_HID_Setup+0x1dc>
 80051f4:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <USBD_HID_Setup+0xd8>)
 80051f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fa:	bf00      	nop
 80051fc:	0800522d 	.word	0x0800522d
 8005200:	0800530f 	.word	0x0800530f
 8005204:	08005301 	.word	0x08005301
 8005208:	08005301 	.word	0x08005301
 800520c:	08005301 	.word	0x08005301
 8005210:	08005301 	.word	0x08005301
 8005214:	08005257 	.word	0x08005257
 8005218:	08005301 	.word	0x08005301
 800521c:	08005301 	.word	0x08005301
 8005220:	08005301 	.word	0x08005301
 8005224:	080052af 	.word	0x080052af
 8005228:	080052d9 	.word	0x080052d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b03      	cmp	r3, #3
 8005236:	d107      	bne.n	8005248 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005238:	f107 030a 	add.w	r3, r7, #10
 800523c:	2202      	movs	r2, #2
 800523e:	4619      	mov	r1, r3
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f001 fb5d 	bl	8006900 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005246:	e063      	b.n	8005310 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005248:	6839      	ldr	r1, [r7, #0]
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f001 fae7 	bl	800681e <USBD_CtlError>
            ret = USBD_FAIL;
 8005250:	2303      	movs	r3, #3
 8005252:	75fb      	strb	r3, [r7, #23]
          break;
 8005254:	e05c      	b.n	8005310 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	885b      	ldrh	r3, [r3, #2]
 800525a:	0a1b      	lsrs	r3, r3, #8
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b22      	cmp	r3, #34	; 0x22
 8005260:	d108      	bne.n	8005274 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	88db      	ldrh	r3, [r3, #6]
 8005266:	2b4a      	cmp	r3, #74	; 0x4a
 8005268:	bf28      	it	cs
 800526a:	234a      	movcs	r3, #74	; 0x4a
 800526c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800526e:	4b2f      	ldr	r3, [pc, #188]	; (800532c <USBD_HID_Setup+0x208>)
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	e015      	b.n	80052a0 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	885b      	ldrh	r3, [r3, #2]
 8005278:	0a1b      	lsrs	r3, r3, #8
 800527a:	b29b      	uxth	r3, r3
 800527c:	2b21      	cmp	r3, #33	; 0x21
 800527e:	d108      	bne.n	8005292 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005280:	4b2b      	ldr	r3, [pc, #172]	; (8005330 <USBD_HID_Setup+0x20c>)
 8005282:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	88db      	ldrh	r3, [r3, #6]
 8005288:	2b09      	cmp	r3, #9
 800528a:	bf28      	it	cs
 800528c:	2309      	movcs	r3, #9
 800528e:	82bb      	strh	r3, [r7, #20]
 8005290:	e006      	b.n	80052a0 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005292:	6839      	ldr	r1, [r7, #0]
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f001 fac2 	bl	800681e <USBD_CtlError>
            ret = USBD_FAIL;
 800529a:	2303      	movs	r3, #3
 800529c:	75fb      	strb	r3, [r7, #23]
            break;
 800529e:	e037      	b.n	8005310 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80052a0:	8abb      	ldrh	r3, [r7, #20]
 80052a2:	461a      	mov	r2, r3
 80052a4:	6939      	ldr	r1, [r7, #16]
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f001 fb2a 	bl	8006900 <USBD_CtlSendData>
          break;
 80052ac:	e030      	b.n	8005310 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d107      	bne.n	80052ca <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3308      	adds	r3, #8
 80052be:	2201      	movs	r2, #1
 80052c0:	4619      	mov	r1, r3
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f001 fb1c 	bl	8006900 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052c8:	e022      	b.n	8005310 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80052ca:	6839      	ldr	r1, [r7, #0]
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f001 faa6 	bl	800681e <USBD_CtlError>
            ret = USBD_FAIL;
 80052d2:	2303      	movs	r3, #3
 80052d4:	75fb      	strb	r3, [r7, #23]
          break;
 80052d6:	e01b      	b.n	8005310 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b03      	cmp	r3, #3
 80052e2:	d106      	bne.n	80052f2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	885b      	ldrh	r3, [r3, #2]
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	461a      	mov	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052f0:	e00e      	b.n	8005310 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80052f2:	6839      	ldr	r1, [r7, #0]
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f001 fa92 	bl	800681e <USBD_CtlError>
            ret = USBD_FAIL;
 80052fa:	2303      	movs	r3, #3
 80052fc:	75fb      	strb	r3, [r7, #23]
          break;
 80052fe:	e007      	b.n	8005310 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005300:	6839      	ldr	r1, [r7, #0]
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f001 fa8b 	bl	800681e <USBD_CtlError>
          ret = USBD_FAIL;
 8005308:	2303      	movs	r3, #3
 800530a:	75fb      	strb	r3, [r7, #23]
          break;
 800530c:	e000      	b.n	8005310 <USBD_HID_Setup+0x1ec>
          break;
 800530e:	bf00      	nop
      }
      break;
 8005310:	e006      	b.n	8005320 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005312:	6839      	ldr	r1, [r7, #0]
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f001 fa82 	bl	800681e <USBD_CtlError>
      ret = USBD_FAIL;
 800531a:	2303      	movs	r3, #3
 800531c:	75fb      	strb	r3, [r7, #23]
      break;
 800531e:	bf00      	nop
  }

  return (uint8_t)ret;
 8005320:	7dfb      	ldrb	r3, [r7, #23]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20000080 	.word	0x20000080
 8005330:	20000068 	.word	0x20000068

08005334 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800533c:	2181      	movs	r1, #129	; 0x81
 800533e:	4809      	ldr	r0, [pc, #36]	; (8005364 <USBD_HID_GetFSCfgDesc+0x30>)
 8005340:	f000 fc35 	bl	8005bae <USBD_GetEpDesc>
 8005344:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	220a      	movs	r2, #10
 8005350:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2222      	movs	r2, #34	; 0x22
 8005356:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005358:	4b02      	ldr	r3, [pc, #8]	; (8005364 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000044 	.word	0x20000044

08005368 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005370:	2181      	movs	r1, #129	; 0x81
 8005372:	4809      	ldr	r0, [pc, #36]	; (8005398 <USBD_HID_GetHSCfgDesc+0x30>)
 8005374:	f000 fc1b 	bl	8005bae <USBD_GetEpDesc>
 8005378:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2207      	movs	r2, #7
 8005384:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2222      	movs	r2, #34	; 0x22
 800538a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800538c:	4b02      	ldr	r3, [pc, #8]	; (8005398 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	20000044 	.word	0x20000044

0800539c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80053a4:	2181      	movs	r1, #129	; 0x81
 80053a6:	4809      	ldr	r0, [pc, #36]	; (80053cc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80053a8:	f000 fc01 	bl	8005bae <USBD_GetEpDesc>
 80053ac:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	220a      	movs	r2, #10
 80053b8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2222      	movs	r2, #34	; 0x22
 80053be:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80053c0:	4b02      	ldr	r3, [pc, #8]	; (80053cc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20000044 	.word	0x20000044

080053d0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	460b      	mov	r3, r1
 80053da:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	32b0      	adds	r2, #176	; 0xb0
 80053e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ea:	2200      	movs	r2, #0
 80053ec:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	220a      	movs	r2, #10
 8005408:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800540a:	4b03      	ldr	r3, [pc, #12]	; (8005418 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800540c:	4618      	mov	r0, r3
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	20000074 	.word	0x20000074

0800541c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	4613      	mov	r3, r2
 8005428:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005430:	2303      	movs	r3, #3
 8005432:	e01f      	b.n	8005474 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	79fa      	ldrb	r2, [r7, #7]
 8005466:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f001 fd37 	bl	8006edc <USBD_LL_Init>
 800546e:	4603      	mov	r3, r0
 8005470:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005472:	7dfb      	ldrb	r3, [r7, #23]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005490:	2303      	movs	r3, #3
 8005492:	e025      	b.n	80054e0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	32ae      	adds	r2, #174	; 0xae
 80054a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00f      	beq.n	80054d0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	32ae      	adds	r2, #174	; 0xae
 80054ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c0:	f107 020e 	add.w	r2, r7, #14
 80054c4:	4610      	mov	r0, r2
 80054c6:	4798      	blx	r3
 80054c8:	4602      	mov	r2, r0
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f001 fd3f 	bl	8006f74 <USBD_LL_Start>
 80054f6:	4603      	mov	r3, r0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005508:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b084      	sub	sp, #16
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	460b      	mov	r3, r1
 8005520:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800552c:	2b00      	cmp	r3, #0
 800552e:	d009      	beq.n	8005544 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	78fa      	ldrb	r2, [r7, #3]
 800553a:	4611      	mov	r1, r2
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	4798      	blx	r3
 8005540:	4603      	mov	r3, r0
 8005542:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005544:	7bfb      	ldrb	r3, [r7, #15]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	460b      	mov	r3, r1
 8005558:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	78fa      	ldrb	r2, [r7, #3]
 8005568:	4611      	mov	r1, r2
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	4798      	blx	r3
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005574:	2303      	movs	r3, #3
 8005576:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005578:	7bfb      	ldrb	r3, [r7, #15]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b084      	sub	sp, #16
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005592:	6839      	ldr	r1, [r7, #0]
 8005594:	4618      	mov	r0, r3
 8005596:	f001 f908 	bl	80067aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80055a8:	461a      	mov	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80055b6:	f003 031f 	and.w	r3, r3, #31
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d01a      	beq.n	80055f4 <USBD_LL_SetupStage+0x72>
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d822      	bhi.n	8005608 <USBD_LL_SetupStage+0x86>
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <USBD_LL_SetupStage+0x4a>
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d00a      	beq.n	80055e0 <USBD_LL_SetupStage+0x5e>
 80055ca:	e01d      	b.n	8005608 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fb5f 	bl	8005c98 <USBD_StdDevReq>
 80055da:	4603      	mov	r3, r0
 80055dc:	73fb      	strb	r3, [r7, #15]
      break;
 80055de:	e020      	b.n	8005622 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055e6:	4619      	mov	r1, r3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fbc7 	bl	8005d7c <USBD_StdItfReq>
 80055ee:	4603      	mov	r3, r0
 80055f0:	73fb      	strb	r3, [r7, #15]
      break;
 80055f2:	e016      	b.n	8005622 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055fa:	4619      	mov	r1, r3
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fc29 	bl	8005e54 <USBD_StdEPReq>
 8005602:	4603      	mov	r3, r0
 8005604:	73fb      	strb	r3, [r7, #15]
      break;
 8005606:	e00c      	b.n	8005622 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800560e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005612:	b2db      	uxtb	r3, r3
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f001 fd0c 	bl	8007034 <USBD_LL_StallEP>
 800561c:	4603      	mov	r3, r0
 800561e:	73fb      	strb	r3, [r7, #15]
      break;
 8005620:	bf00      	nop
  }

  return ret;
 8005622:	7bfb      	ldrb	r3, [r7, #15]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	460b      	mov	r3, r1
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800563e:	7afb      	ldrb	r3, [r7, #11]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d16e      	bne.n	8005722 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800564a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005652:	2b03      	cmp	r3, #3
 8005654:	f040 8098 	bne.w	8005788 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	429a      	cmp	r2, r3
 8005662:	d913      	bls.n	800568c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	1ad2      	subs	r2, r2, r3
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	4293      	cmp	r3, r2
 800567c:	bf28      	it	cs
 800567e:	4613      	movcs	r3, r2
 8005680:	461a      	mov	r2, r3
 8005682:	6879      	ldr	r1, [r7, #4]
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f001 f967 	bl	8006958 <USBD_CtlContinueRx>
 800568a:	e07d      	b.n	8005788 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005692:	f003 031f 	and.w	r3, r3, #31
 8005696:	2b02      	cmp	r3, #2
 8005698:	d014      	beq.n	80056c4 <USBD_LL_DataOutStage+0x98>
 800569a:	2b02      	cmp	r3, #2
 800569c:	d81d      	bhi.n	80056da <USBD_LL_DataOutStage+0xae>
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <USBD_LL_DataOutStage+0x7c>
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d003      	beq.n	80056ae <USBD_LL_DataOutStage+0x82>
 80056a6:	e018      	b.n	80056da <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	75bb      	strb	r3, [r7, #22]
            break;
 80056ac:	e018      	b.n	80056e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	4619      	mov	r1, r3
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 fa5e 	bl	8005b7a <USBD_CoreFindIF>
 80056be:	4603      	mov	r3, r0
 80056c0:	75bb      	strb	r3, [r7, #22]
            break;
 80056c2:	e00d      	b.n	80056e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	4619      	mov	r1, r3
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 fa60 	bl	8005b94 <USBD_CoreFindEP>
 80056d4:	4603      	mov	r3, r0
 80056d6:	75bb      	strb	r3, [r7, #22]
            break;
 80056d8:	e002      	b.n	80056e0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80056da:	2300      	movs	r3, #0
 80056dc:	75bb      	strb	r3, [r7, #22]
            break;
 80056de:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80056e0:	7dbb      	ldrb	r3, [r7, #22]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d119      	bne.n	800571a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	d113      	bne.n	800571a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80056f2:	7dba      	ldrb	r2, [r7, #22]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	32ae      	adds	r2, #174	; 0xae
 80056f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00b      	beq.n	800571a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005702:	7dba      	ldrb	r2, [r7, #22]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800570a:	7dba      	ldrb	r2, [r7, #22]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	32ae      	adds	r2, #174	; 0xae
 8005710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f001 f92d 	bl	800697a <USBD_CtlSendStatus>
 8005720:	e032      	b.n	8005788 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005722:	7afb      	ldrb	r3, [r7, #11]
 8005724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005728:	b2db      	uxtb	r3, r3
 800572a:	4619      	mov	r1, r3
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 fa31 	bl	8005b94 <USBD_CoreFindEP>
 8005732:	4603      	mov	r3, r0
 8005734:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005736:	7dbb      	ldrb	r3, [r7, #22]
 8005738:	2bff      	cmp	r3, #255	; 0xff
 800573a:	d025      	beq.n	8005788 <USBD_LL_DataOutStage+0x15c>
 800573c:	7dbb      	ldrb	r3, [r7, #22]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d122      	bne.n	8005788 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b03      	cmp	r3, #3
 800574c:	d117      	bne.n	800577e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800574e:	7dba      	ldrb	r2, [r7, #22]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	32ae      	adds	r2, #174	; 0xae
 8005754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00f      	beq.n	800577e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800575e:	7dba      	ldrb	r2, [r7, #22]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005766:	7dba      	ldrb	r2, [r7, #22]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	32ae      	adds	r2, #174	; 0xae
 800576c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	7afa      	ldrb	r2, [r7, #11]
 8005774:	4611      	mov	r1, r2
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	4798      	blx	r3
 800577a:	4603      	mov	r3, r0
 800577c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800577e:	7dfb      	ldrb	r3, [r7, #23]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005784:	7dfb      	ldrb	r3, [r7, #23]
 8005786:	e000      	b.n	800578a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b086      	sub	sp, #24
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	460b      	mov	r3, r1
 800579c:	607a      	str	r2, [r7, #4]
 800579e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80057a0:	7afb      	ldrb	r3, [r7, #11]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d16f      	bne.n	8005886 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3314      	adds	r3, #20
 80057aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d15a      	bne.n	800586c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d914      	bls.n	80057ec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	1ad2      	subs	r2, r2, r3
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	461a      	mov	r2, r3
 80057d6:	6879      	ldr	r1, [r7, #4]
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f001 f8ac 	bl	8006936 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057de:	2300      	movs	r3, #0
 80057e0:	2200      	movs	r2, #0
 80057e2:	2100      	movs	r1, #0
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f001 fccf 	bl	8007188 <USBD_LL_PrepareReceive>
 80057ea:	e03f      	b.n	800586c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d11c      	bne.n	8005832 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005800:	429a      	cmp	r2, r3
 8005802:	d316      	bcc.n	8005832 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800580e:	429a      	cmp	r2, r3
 8005810:	d20f      	bcs.n	8005832 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005812:	2200      	movs	r2, #0
 8005814:	2100      	movs	r1, #0
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f001 f88d 	bl	8006936 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005824:	2300      	movs	r3, #0
 8005826:	2200      	movs	r2, #0
 8005828:	2100      	movs	r1, #0
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f001 fcac 	bl	8007188 <USBD_LL_PrepareReceive>
 8005830:	e01c      	b.n	800586c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b03      	cmp	r3, #3
 800583c:	d10f      	bne.n	800585e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d009      	beq.n	800585e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800585e:	2180      	movs	r1, #128	; 0x80
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f001 fbe7 	bl	8007034 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f001 f89a 	bl	80069a0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d03a      	beq.n	80058ec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f7ff fe42 	bl	8005500 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005884:	e032      	b.n	80058ec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005886:	7afb      	ldrb	r3, [r7, #11]
 8005888:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800588c:	b2db      	uxtb	r3, r3
 800588e:	4619      	mov	r1, r3
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 f97f 	bl	8005b94 <USBD_CoreFindEP>
 8005896:	4603      	mov	r3, r0
 8005898:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800589a:	7dfb      	ldrb	r3, [r7, #23]
 800589c:	2bff      	cmp	r3, #255	; 0xff
 800589e:	d025      	beq.n	80058ec <USBD_LL_DataInStage+0x15a>
 80058a0:	7dfb      	ldrb	r3, [r7, #23]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d122      	bne.n	80058ec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d11c      	bne.n	80058ec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80058b2:	7dfa      	ldrb	r2, [r7, #23]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	32ae      	adds	r2, #174	; 0xae
 80058b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d014      	beq.n	80058ec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80058c2:	7dfa      	ldrb	r2, [r7, #23]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80058ca:	7dfa      	ldrb	r2, [r7, #23]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	32ae      	adds	r2, #174	; 0xae
 80058d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	7afa      	ldrb	r2, [r7, #11]
 80058d8:	4611      	mov	r1, r2
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	4798      	blx	r3
 80058de:	4603      	mov	r3, r0
 80058e0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80058e2:	7dbb      	ldrb	r3, [r7, #22]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80058e8:	7dbb      	ldrb	r3, [r7, #22]
 80058ea:	e000      	b.n	80058ee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800592e:	2b00      	cmp	r3, #0
 8005930:	d014      	beq.n	800595c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00e      	beq.n	800595c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6852      	ldr	r2, [r2, #4]
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	4611      	mov	r1, r2
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	4798      	blx	r3
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005958:	2303      	movs	r3, #3
 800595a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800595c:	2340      	movs	r3, #64	; 0x40
 800595e:	2200      	movs	r2, #0
 8005960:	2100      	movs	r1, #0
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f001 fb21 	bl	8006faa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2240      	movs	r2, #64	; 0x40
 8005974:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005978:	2340      	movs	r3, #64	; 0x40
 800597a:	2200      	movs	r2, #0
 800597c:	2180      	movs	r1, #128	; 0x80
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f001 fb13 	bl	8006faa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2240      	movs	r2, #64	; 0x40
 800598e:	621a      	str	r2, [r3, #32]

  return ret;
 8005990:	7bfb      	ldrb	r3, [r7, #15]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	460b      	mov	r3, r1
 80059a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	78fa      	ldrb	r2, [r7, #3]
 80059aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2204      	movs	r2, #4
 80059d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d106      	bne.n	8005a08 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b082      	sub	sp, #8
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d110      	bne.n	8005a4c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00b      	beq.n	8005a4c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d005      	beq.n	8005a4c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b082      	sub	sp, #8
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	32ae      	adds	r2, #174	; 0xae
 8005a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e01c      	b.n	8005ab2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b03      	cmp	r3, #3
 8005a82:	d115      	bne.n	8005ab0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	32ae      	adds	r2, #174	; 0xae
 8005a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00b      	beq.n	8005ab0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	32ae      	adds	r2, #174	; 0xae
 8005aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	78fa      	ldrb	r2, [r7, #3]
 8005aaa:	4611      	mov	r1, r2
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b082      	sub	sp, #8
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	32ae      	adds	r2, #174	; 0xae
 8005ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e01c      	b.n	8005b16 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d115      	bne.n	8005b14 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	32ae      	adds	r2, #174	; 0xae
 8005af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00b      	beq.n	8005b14 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	32ae      	adds	r2, #174	; 0xae
 8005b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	78fa      	ldrb	r2, [r7, #3]
 8005b0e:	4611      	mov	r1, r2
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00e      	beq.n	8005b70 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6852      	ldr	r2, [r2, #4]
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	4611      	mov	r1, r2
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	4798      	blx	r3
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	460b      	mov	r3, r1
 8005b84:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005b86:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005ba0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b086      	sub	sp, #24
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	885b      	ldrh	r3, [r3, #2]
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d920      	bls.n	8005c18 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005bde:	e013      	b.n	8005c08 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005be0:	f107 030a 	add.w	r3, r7, #10
 8005be4:	4619      	mov	r1, r3
 8005be6:	6978      	ldr	r0, [r7, #20]
 8005be8:	f000 f81b 	bl	8005c22 <USBD_GetNextDesc>
 8005bec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	785b      	ldrb	r3, [r3, #1]
 8005bf2:	2b05      	cmp	r3, #5
 8005bf4:	d108      	bne.n	8005c08 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	789b      	ldrb	r3, [r3, #2]
 8005bfe:	78fa      	ldrb	r2, [r7, #3]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d008      	beq.n	8005c16 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005c04:	2300      	movs	r3, #0
 8005c06:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	885b      	ldrh	r3, [r3, #2]
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	897b      	ldrh	r3, [r7, #10]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d8e5      	bhi.n	8005be0 <USBD_GetEpDesc+0x32>
 8005c14:	e000      	b.n	8005c18 <USBD_GetEpDesc+0x6a>
          break;
 8005c16:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005c18:	693b      	ldr	r3, [r7, #16]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b085      	sub	sp, #20
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
 8005c2a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	881a      	ldrh	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	4413      	add	r3, r2
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	3301      	adds	r3, #1
 8005c72:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005c7a:	8a3b      	ldrh	r3, [r7, #16]
 8005c7c:	021b      	lsls	r3, r3, #8
 8005c7e:	b21a      	sxth	r2, r3
 8005c80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	b21b      	sxth	r3, r3
 8005c88:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005c8a:	89fb      	ldrh	r3, [r7, #14]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cae:	2b40      	cmp	r3, #64	; 0x40
 8005cb0:	d005      	beq.n	8005cbe <USBD_StdDevReq+0x26>
 8005cb2:	2b40      	cmp	r3, #64	; 0x40
 8005cb4:	d857      	bhi.n	8005d66 <USBD_StdDevReq+0xce>
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00f      	beq.n	8005cda <USBD_StdDevReq+0x42>
 8005cba:	2b20      	cmp	r3, #32
 8005cbc:	d153      	bne.n	8005d66 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	32ae      	adds	r2, #174	; 0xae
 8005cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	6839      	ldr	r1, [r7, #0]
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	4798      	blx	r3
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd8:	e04a      	b.n	8005d70 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	785b      	ldrb	r3, [r3, #1]
 8005cde:	2b09      	cmp	r3, #9
 8005ce0:	d83b      	bhi.n	8005d5a <USBD_StdDevReq+0xc2>
 8005ce2:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <USBD_StdDevReq+0x50>)
 8005ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce8:	08005d3d 	.word	0x08005d3d
 8005cec:	08005d51 	.word	0x08005d51
 8005cf0:	08005d5b 	.word	0x08005d5b
 8005cf4:	08005d47 	.word	0x08005d47
 8005cf8:	08005d5b 	.word	0x08005d5b
 8005cfc:	08005d1b 	.word	0x08005d1b
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d5b 	.word	0x08005d5b
 8005d08:	08005d33 	.word	0x08005d33
 8005d0c:	08005d25 	.word	0x08005d25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d10:	6839      	ldr	r1, [r7, #0]
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fa3c 	bl	8006190 <USBD_GetDescriptor>
          break;
 8005d18:	e024      	b.n	8005d64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d1a:	6839      	ldr	r1, [r7, #0]
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fba1 	bl	8006464 <USBD_SetAddress>
          break;
 8005d22:	e01f      	b.n	8005d64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005d24:	6839      	ldr	r1, [r7, #0]
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fbe0 	bl	80064ec <USBD_SetConfig>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	73fb      	strb	r3, [r7, #15]
          break;
 8005d30:	e018      	b.n	8005d64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fc83 	bl	8006640 <USBD_GetConfig>
          break;
 8005d3a:	e013      	b.n	8005d64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d3c:	6839      	ldr	r1, [r7, #0]
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fcb4 	bl	80066ac <USBD_GetStatus>
          break;
 8005d44:	e00e      	b.n	8005d64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fce3 	bl	8006714 <USBD_SetFeature>
          break;
 8005d4e:	e009      	b.n	8005d64 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fd07 	bl	8006766 <USBD_ClrFeature>
          break;
 8005d58:	e004      	b.n	8005d64 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005d5a:	6839      	ldr	r1, [r7, #0]
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fd5e 	bl	800681e <USBD_CtlError>
          break;
 8005d62:	bf00      	nop
      }
      break;
 8005d64:	e004      	b.n	8005d70 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fd58 	bl	800681e <USBD_CtlError>
      break;
 8005d6e:	bf00      	nop
  }

  return ret;
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop

08005d7c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d92:	2b40      	cmp	r3, #64	; 0x40
 8005d94:	d005      	beq.n	8005da2 <USBD_StdItfReq+0x26>
 8005d96:	2b40      	cmp	r3, #64	; 0x40
 8005d98:	d852      	bhi.n	8005e40 <USBD_StdItfReq+0xc4>
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <USBD_StdItfReq+0x26>
 8005d9e:	2b20      	cmp	r3, #32
 8005da0:	d14e      	bne.n	8005e40 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	3b01      	subs	r3, #1
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d840      	bhi.n	8005e32 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	889b      	ldrh	r3, [r3, #4]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d836      	bhi.n	8005e28 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	889b      	ldrh	r3, [r3, #4]
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff fed9 	bl	8005b7a <USBD_CoreFindIF>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005dcc:	7bbb      	ldrb	r3, [r7, #14]
 8005dce:	2bff      	cmp	r3, #255	; 0xff
 8005dd0:	d01d      	beq.n	8005e0e <USBD_StdItfReq+0x92>
 8005dd2:	7bbb      	ldrb	r3, [r7, #14]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d11a      	bne.n	8005e0e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005dd8:	7bba      	ldrb	r2, [r7, #14]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	32ae      	adds	r2, #174	; 0xae
 8005dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00f      	beq.n	8005e08 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005de8:	7bba      	ldrb	r2, [r7, #14]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005df0:	7bba      	ldrb	r2, [r7, #14]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	32ae      	adds	r2, #174	; 0xae
 8005df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	6839      	ldr	r1, [r7, #0]
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	4798      	blx	r3
 8005e02:	4603      	mov	r3, r0
 8005e04:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005e06:	e004      	b.n	8005e12 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005e0c:	e001      	b.n	8005e12 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	88db      	ldrh	r3, [r3, #6]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d110      	bne.n	8005e3c <USBD_StdItfReq+0xc0>
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10d      	bne.n	8005e3c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fdaa 	bl	800697a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e26:	e009      	b.n	8005e3c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005e28:	6839      	ldr	r1, [r7, #0]
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fcf7 	bl	800681e <USBD_CtlError>
          break;
 8005e30:	e004      	b.n	8005e3c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005e32:	6839      	ldr	r1, [r7, #0]
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fcf2 	bl	800681e <USBD_CtlError>
          break;
 8005e3a:	e000      	b.n	8005e3e <USBD_StdItfReq+0xc2>
          break;
 8005e3c:	bf00      	nop
      }
      break;
 8005e3e:	e004      	b.n	8005e4a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005e40:	6839      	ldr	r1, [r7, #0]
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fceb 	bl	800681e <USBD_CtlError>
      break;
 8005e48:	bf00      	nop
  }

  return ret;
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	889b      	ldrh	r3, [r3, #4]
 8005e66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e70:	2b40      	cmp	r3, #64	; 0x40
 8005e72:	d007      	beq.n	8005e84 <USBD_StdEPReq+0x30>
 8005e74:	2b40      	cmp	r3, #64	; 0x40
 8005e76:	f200 817f 	bhi.w	8006178 <USBD_StdEPReq+0x324>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d02a      	beq.n	8005ed4 <USBD_StdEPReq+0x80>
 8005e7e:	2b20      	cmp	r3, #32
 8005e80:	f040 817a 	bne.w	8006178 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005e84:	7bbb      	ldrb	r3, [r7, #14]
 8005e86:	4619      	mov	r1, r3
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7ff fe83 	bl	8005b94 <USBD_CoreFindEP>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e92:	7b7b      	ldrb	r3, [r7, #13]
 8005e94:	2bff      	cmp	r3, #255	; 0xff
 8005e96:	f000 8174 	beq.w	8006182 <USBD_StdEPReq+0x32e>
 8005e9a:	7b7b      	ldrb	r3, [r7, #13]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f040 8170 	bne.w	8006182 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005ea2:	7b7a      	ldrb	r2, [r7, #13]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005eaa:	7b7a      	ldrb	r2, [r7, #13]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	32ae      	adds	r2, #174	; 0xae
 8005eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 8163 	beq.w	8006182 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005ebc:	7b7a      	ldrb	r2, [r7, #13]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	32ae      	adds	r2, #174	; 0xae
 8005ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	4798      	blx	r3
 8005ece:	4603      	mov	r3, r0
 8005ed0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ed2:	e156      	b.n	8006182 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	785b      	ldrb	r3, [r3, #1]
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d008      	beq.n	8005eee <USBD_StdEPReq+0x9a>
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	f300 8145 	bgt.w	800616c <USBD_StdEPReq+0x318>
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 809b 	beq.w	800601e <USBD_StdEPReq+0x1ca>
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d03c      	beq.n	8005f66 <USBD_StdEPReq+0x112>
 8005eec:	e13e      	b.n	800616c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d002      	beq.n	8005f00 <USBD_StdEPReq+0xac>
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d016      	beq.n	8005f2c <USBD_StdEPReq+0xd8>
 8005efe:	e02c      	b.n	8005f5a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f00:	7bbb      	ldrb	r3, [r7, #14]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00d      	beq.n	8005f22 <USBD_StdEPReq+0xce>
 8005f06:	7bbb      	ldrb	r3, [r7, #14]
 8005f08:	2b80      	cmp	r3, #128	; 0x80
 8005f0a:	d00a      	beq.n	8005f22 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f0c:	7bbb      	ldrb	r3, [r7, #14]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f001 f88f 	bl	8007034 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f16:	2180      	movs	r1, #128	; 0x80
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f001 f88b 	bl	8007034 <USBD_LL_StallEP>
 8005f1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f20:	e020      	b.n	8005f64 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fc7a 	bl	800681e <USBD_CtlError>
              break;
 8005f2a:	e01b      	b.n	8005f64 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	885b      	ldrh	r3, [r3, #2]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10e      	bne.n	8005f52 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f34:	7bbb      	ldrb	r3, [r7, #14]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00b      	beq.n	8005f52 <USBD_StdEPReq+0xfe>
 8005f3a:	7bbb      	ldrb	r3, [r7, #14]
 8005f3c:	2b80      	cmp	r3, #128	; 0x80
 8005f3e:	d008      	beq.n	8005f52 <USBD_StdEPReq+0xfe>
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	88db      	ldrh	r3, [r3, #6]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d104      	bne.n	8005f52 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f48:	7bbb      	ldrb	r3, [r7, #14]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f001 f871 	bl	8007034 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fd11 	bl	800697a <USBD_CtlSendStatus>

              break;
 8005f58:	e004      	b.n	8005f64 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005f5a:	6839      	ldr	r1, [r7, #0]
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fc5e 	bl	800681e <USBD_CtlError>
              break;
 8005f62:	bf00      	nop
          }
          break;
 8005f64:	e107      	b.n	8006176 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d002      	beq.n	8005f78 <USBD_StdEPReq+0x124>
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	d016      	beq.n	8005fa4 <USBD_StdEPReq+0x150>
 8005f76:	e04b      	b.n	8006010 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f78:	7bbb      	ldrb	r3, [r7, #14]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00d      	beq.n	8005f9a <USBD_StdEPReq+0x146>
 8005f7e:	7bbb      	ldrb	r3, [r7, #14]
 8005f80:	2b80      	cmp	r3, #128	; 0x80
 8005f82:	d00a      	beq.n	8005f9a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f84:	7bbb      	ldrb	r3, [r7, #14]
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f001 f853 	bl	8007034 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f8e:	2180      	movs	r1, #128	; 0x80
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f001 f84f 	bl	8007034 <USBD_LL_StallEP>
 8005f96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f98:	e040      	b.n	800601c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fc3e 	bl	800681e <USBD_CtlError>
              break;
 8005fa2:	e03b      	b.n	800601c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	885b      	ldrh	r3, [r3, #2]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d136      	bne.n	800601a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005fac:	7bbb      	ldrb	r3, [r7, #14]
 8005fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d004      	beq.n	8005fc0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005fb6:	7bbb      	ldrb	r3, [r7, #14]
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f001 f859 	bl	8007072 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fcda 	bl	800697a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005fc6:	7bbb      	ldrb	r3, [r7, #14]
 8005fc8:	4619      	mov	r1, r3
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7ff fde2 	bl	8005b94 <USBD_CoreFindEP>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fd4:	7b7b      	ldrb	r3, [r7, #13]
 8005fd6:	2bff      	cmp	r3, #255	; 0xff
 8005fd8:	d01f      	beq.n	800601a <USBD_StdEPReq+0x1c6>
 8005fda:	7b7b      	ldrb	r3, [r7, #13]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d11c      	bne.n	800601a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005fe0:	7b7a      	ldrb	r2, [r7, #13]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005fe8:	7b7a      	ldrb	r2, [r7, #13]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	32ae      	adds	r2, #174	; 0xae
 8005fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d010      	beq.n	800601a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ff8:	7b7a      	ldrb	r2, [r7, #13]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	32ae      	adds	r2, #174	; 0xae
 8005ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	6839      	ldr	r1, [r7, #0]
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
 800600a:	4603      	mov	r3, r0
 800600c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800600e:	e004      	b.n	800601a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006010:	6839      	ldr	r1, [r7, #0]
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fc03 	bl	800681e <USBD_CtlError>
              break;
 8006018:	e000      	b.n	800601c <USBD_StdEPReq+0x1c8>
              break;
 800601a:	bf00      	nop
          }
          break;
 800601c:	e0ab      	b.n	8006176 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d002      	beq.n	8006030 <USBD_StdEPReq+0x1dc>
 800602a:	2b03      	cmp	r3, #3
 800602c:	d032      	beq.n	8006094 <USBD_StdEPReq+0x240>
 800602e:	e097      	b.n	8006160 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006030:	7bbb      	ldrb	r3, [r7, #14]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d007      	beq.n	8006046 <USBD_StdEPReq+0x1f2>
 8006036:	7bbb      	ldrb	r3, [r7, #14]
 8006038:	2b80      	cmp	r3, #128	; 0x80
 800603a:	d004      	beq.n	8006046 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800603c:	6839      	ldr	r1, [r7, #0]
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fbed 	bl	800681e <USBD_CtlError>
                break;
 8006044:	e091      	b.n	800616a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006046:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800604a:	2b00      	cmp	r3, #0
 800604c:	da0b      	bge.n	8006066 <USBD_StdEPReq+0x212>
 800604e:	7bbb      	ldrb	r3, [r7, #14]
 8006050:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	3310      	adds	r3, #16
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	4413      	add	r3, r2
 8006062:	3304      	adds	r3, #4
 8006064:	e00b      	b.n	800607e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006066:	7bbb      	ldrb	r3, [r7, #14]
 8006068:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800606c:	4613      	mov	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	4413      	add	r3, r2
 800607c:	3304      	adds	r3, #4
 800607e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2202      	movs	r2, #2
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fc37 	bl	8006900 <USBD_CtlSendData>
              break;
 8006092:	e06a      	b.n	800616a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006094:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006098:	2b00      	cmp	r3, #0
 800609a:	da11      	bge.n	80060c0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800609c:	7bbb      	ldrb	r3, [r7, #14]
 800609e:	f003 020f 	and.w	r2, r3, #15
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	3324      	adds	r3, #36	; 0x24
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d117      	bne.n	80060e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80060b6:	6839      	ldr	r1, [r7, #0]
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 fbb0 	bl	800681e <USBD_CtlError>
                  break;
 80060be:	e054      	b.n	800616a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80060c0:	7bbb      	ldrb	r3, [r7, #14]
 80060c2:	f003 020f 	and.w	r2, r3, #15
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	4613      	mov	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	440b      	add	r3, r1
 80060d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d104      	bne.n	80060e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80060dc:	6839      	ldr	r1, [r7, #0]
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fb9d 	bl	800681e <USBD_CtlError>
                  break;
 80060e4:	e041      	b.n	800616a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	da0b      	bge.n	8006106 <USBD_StdEPReq+0x2b2>
 80060ee:	7bbb      	ldrb	r3, [r7, #14]
 80060f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060f4:	4613      	mov	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	3310      	adds	r3, #16
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	4413      	add	r3, r2
 8006102:	3304      	adds	r3, #4
 8006104:	e00b      	b.n	800611e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006106:	7bbb      	ldrb	r3, [r7, #14]
 8006108:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800610c:	4613      	mov	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	4413      	add	r3, r2
 800611c:	3304      	adds	r3, #4
 800611e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006120:	7bbb      	ldrb	r3, [r7, #14]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d002      	beq.n	800612c <USBD_StdEPReq+0x2d8>
 8006126:	7bbb      	ldrb	r3, [r7, #14]
 8006128:	2b80      	cmp	r3, #128	; 0x80
 800612a:	d103      	bne.n	8006134 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2200      	movs	r2, #0
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	e00e      	b.n	8006152 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006134:	7bbb      	ldrb	r3, [r7, #14]
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 ffb9 	bl	80070b0 <USBD_LL_IsStallEP>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d003      	beq.n	800614c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2201      	movs	r2, #1
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	e002      	b.n	8006152 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2202      	movs	r2, #2
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fbd1 	bl	8006900 <USBD_CtlSendData>
              break;
 800615e:	e004      	b.n	800616a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fb5b 	bl	800681e <USBD_CtlError>
              break;
 8006168:	bf00      	nop
          }
          break;
 800616a:	e004      	b.n	8006176 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800616c:	6839      	ldr	r1, [r7, #0]
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fb55 	bl	800681e <USBD_CtlError>
          break;
 8006174:	bf00      	nop
      }
      break;
 8006176:	e005      	b.n	8006184 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006178:	6839      	ldr	r1, [r7, #0]
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fb4f 	bl	800681e <USBD_CtlError>
      break;
 8006180:	e000      	b.n	8006184 <USBD_StdEPReq+0x330>
      break;
 8006182:	bf00      	nop
  }

  return ret;
 8006184:	7bfb      	ldrb	r3, [r7, #15]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800619e:	2300      	movs	r3, #0
 80061a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	885b      	ldrh	r3, [r3, #2]
 80061aa:	0a1b      	lsrs	r3, r3, #8
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	3b01      	subs	r3, #1
 80061b0:	2b06      	cmp	r3, #6
 80061b2:	f200 8128 	bhi.w	8006406 <USBD_GetDescriptor+0x276>
 80061b6:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <USBD_GetDescriptor+0x2c>)
 80061b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061bc:	080061d9 	.word	0x080061d9
 80061c0:	080061f1 	.word	0x080061f1
 80061c4:	08006231 	.word	0x08006231
 80061c8:	08006407 	.word	0x08006407
 80061cc:	08006407 	.word	0x08006407
 80061d0:	080063a7 	.word	0x080063a7
 80061d4:	080063d3 	.word	0x080063d3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	7c12      	ldrb	r2, [r2, #16]
 80061e4:	f107 0108 	add.w	r1, r7, #8
 80061e8:	4610      	mov	r0, r2
 80061ea:	4798      	blx	r3
 80061ec:	60f8      	str	r0, [r7, #12]
      break;
 80061ee:	e112      	b.n	8006416 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	7c1b      	ldrb	r3, [r3, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10d      	bne.n	8006214 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006200:	f107 0208 	add.w	r2, r7, #8
 8006204:	4610      	mov	r0, r2
 8006206:	4798      	blx	r3
 8006208:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3301      	adds	r3, #1
 800620e:	2202      	movs	r2, #2
 8006210:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006212:	e100      	b.n	8006416 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	f107 0208 	add.w	r2, r7, #8
 8006220:	4610      	mov	r0, r2
 8006222:	4798      	blx	r3
 8006224:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3301      	adds	r3, #1
 800622a:	2202      	movs	r2, #2
 800622c:	701a      	strb	r2, [r3, #0]
      break;
 800622e:	e0f2      	b.n	8006416 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	885b      	ldrh	r3, [r3, #2]
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b05      	cmp	r3, #5
 8006238:	f200 80ac 	bhi.w	8006394 <USBD_GetDescriptor+0x204>
 800623c:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <USBD_GetDescriptor+0xb4>)
 800623e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006242:	bf00      	nop
 8006244:	0800625d 	.word	0x0800625d
 8006248:	08006291 	.word	0x08006291
 800624c:	080062c5 	.word	0x080062c5
 8006250:	080062f9 	.word	0x080062f9
 8006254:	0800632d 	.word	0x0800632d
 8006258:	08006361 	.word	0x08006361
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00b      	beq.n	8006280 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	7c12      	ldrb	r2, [r2, #16]
 8006274:	f107 0108 	add.w	r1, r7, #8
 8006278:	4610      	mov	r0, r2
 800627a:	4798      	blx	r3
 800627c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800627e:	e091      	b.n	80063a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 facb 	bl	800681e <USBD_CtlError>
            err++;
 8006288:	7afb      	ldrb	r3, [r7, #11]
 800628a:	3301      	adds	r3, #1
 800628c:	72fb      	strb	r3, [r7, #11]
          break;
 800628e:	e089      	b.n	80063a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00b      	beq.n	80062b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	7c12      	ldrb	r2, [r2, #16]
 80062a8:	f107 0108 	add.w	r1, r7, #8
 80062ac:	4610      	mov	r0, r2
 80062ae:	4798      	blx	r3
 80062b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062b2:	e077      	b.n	80063a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062b4:	6839      	ldr	r1, [r7, #0]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fab1 	bl	800681e <USBD_CtlError>
            err++;
 80062bc:	7afb      	ldrb	r3, [r7, #11]
 80062be:	3301      	adds	r3, #1
 80062c0:	72fb      	strb	r3, [r7, #11]
          break;
 80062c2:	e06f      	b.n	80063a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00b      	beq.n	80062e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	7c12      	ldrb	r2, [r2, #16]
 80062dc:	f107 0108 	add.w	r1, r7, #8
 80062e0:	4610      	mov	r0, r2
 80062e2:	4798      	blx	r3
 80062e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062e6:	e05d      	b.n	80063a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fa97 	bl	800681e <USBD_CtlError>
            err++;
 80062f0:	7afb      	ldrb	r3, [r7, #11]
 80062f2:	3301      	adds	r3, #1
 80062f4:	72fb      	strb	r3, [r7, #11]
          break;
 80062f6:	e055      	b.n	80063a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00b      	beq.n	800631c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	7c12      	ldrb	r2, [r2, #16]
 8006310:	f107 0108 	add.w	r1, r7, #8
 8006314:	4610      	mov	r0, r2
 8006316:	4798      	blx	r3
 8006318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800631a:	e043      	b.n	80063a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fa7d 	bl	800681e <USBD_CtlError>
            err++;
 8006324:	7afb      	ldrb	r3, [r7, #11]
 8006326:	3301      	adds	r3, #1
 8006328:	72fb      	strb	r3, [r7, #11]
          break;
 800632a:	e03b      	b.n	80063a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00b      	beq.n	8006350 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	7c12      	ldrb	r2, [r2, #16]
 8006344:	f107 0108 	add.w	r1, r7, #8
 8006348:	4610      	mov	r0, r2
 800634a:	4798      	blx	r3
 800634c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800634e:	e029      	b.n	80063a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006350:	6839      	ldr	r1, [r7, #0]
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fa63 	bl	800681e <USBD_CtlError>
            err++;
 8006358:	7afb      	ldrb	r3, [r7, #11]
 800635a:	3301      	adds	r3, #1
 800635c:	72fb      	strb	r3, [r7, #11]
          break;
 800635e:	e021      	b.n	80063a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00b      	beq.n	8006384 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	7c12      	ldrb	r2, [r2, #16]
 8006378:	f107 0108 	add.w	r1, r7, #8
 800637c:	4610      	mov	r0, r2
 800637e:	4798      	blx	r3
 8006380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006382:	e00f      	b.n	80063a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fa49 	bl	800681e <USBD_CtlError>
            err++;
 800638c:	7afb      	ldrb	r3, [r7, #11]
 800638e:	3301      	adds	r3, #1
 8006390:	72fb      	strb	r3, [r7, #11]
          break;
 8006392:	e007      	b.n	80063a4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fa41 	bl	800681e <USBD_CtlError>
          err++;
 800639c:	7afb      	ldrb	r3, [r7, #11]
 800639e:	3301      	adds	r3, #1
 80063a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80063a2:	bf00      	nop
      }
      break;
 80063a4:	e037      	b.n	8006416 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	7c1b      	ldrb	r3, [r3, #16]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d109      	bne.n	80063c2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b6:	f107 0208 	add.w	r2, r7, #8
 80063ba:	4610      	mov	r0, r2
 80063bc:	4798      	blx	r3
 80063be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063c0:	e029      	b.n	8006416 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fa2a 	bl	800681e <USBD_CtlError>
        err++;
 80063ca:	7afb      	ldrb	r3, [r7, #11]
 80063cc:	3301      	adds	r3, #1
 80063ce:	72fb      	strb	r3, [r7, #11]
      break;
 80063d0:	e021      	b.n	8006416 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	7c1b      	ldrb	r3, [r3, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10d      	bne.n	80063f6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	f107 0208 	add.w	r2, r7, #8
 80063e6:	4610      	mov	r0, r2
 80063e8:	4798      	blx	r3
 80063ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	3301      	adds	r3, #1
 80063f0:	2207      	movs	r2, #7
 80063f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063f4:	e00f      	b.n	8006416 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fa10 	bl	800681e <USBD_CtlError>
        err++;
 80063fe:	7afb      	ldrb	r3, [r7, #11]
 8006400:	3301      	adds	r3, #1
 8006402:	72fb      	strb	r3, [r7, #11]
      break;
 8006404:	e007      	b.n	8006416 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006406:	6839      	ldr	r1, [r7, #0]
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fa08 	bl	800681e <USBD_CtlError>
      err++;
 800640e:	7afb      	ldrb	r3, [r7, #11]
 8006410:	3301      	adds	r3, #1
 8006412:	72fb      	strb	r3, [r7, #11]
      break;
 8006414:	bf00      	nop
  }

  if (err != 0U)
 8006416:	7afb      	ldrb	r3, [r7, #11]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d11e      	bne.n	800645a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	88db      	ldrh	r3, [r3, #6]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d016      	beq.n	8006452 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006424:	893b      	ldrh	r3, [r7, #8]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00e      	beq.n	8006448 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	88da      	ldrh	r2, [r3, #6]
 800642e:	893b      	ldrh	r3, [r7, #8]
 8006430:	4293      	cmp	r3, r2
 8006432:	bf28      	it	cs
 8006434:	4613      	movcs	r3, r2
 8006436:	b29b      	uxth	r3, r3
 8006438:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800643a:	893b      	ldrh	r3, [r7, #8]
 800643c:	461a      	mov	r2, r3
 800643e:	68f9      	ldr	r1, [r7, #12]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fa5d 	bl	8006900 <USBD_CtlSendData>
 8006446:	e009      	b.n	800645c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f9e7 	bl	800681e <USBD_CtlError>
 8006450:	e004      	b.n	800645c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fa91 	bl	800697a <USBD_CtlSendStatus>
 8006458:	e000      	b.n	800645c <USBD_GetDescriptor+0x2cc>
    return;
 800645a:	bf00      	nop
  }
}
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop

08006464 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	889b      	ldrh	r3, [r3, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d131      	bne.n	80064da <USBD_SetAddress+0x76>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	88db      	ldrh	r3, [r3, #6]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d12d      	bne.n	80064da <USBD_SetAddress+0x76>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	885b      	ldrh	r3, [r3, #2]
 8006482:	2b7f      	cmp	r3, #127	; 0x7f
 8006484:	d829      	bhi.n	80064da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	885b      	ldrh	r3, [r3, #2]
 800648a:	b2db      	uxtb	r3, r3
 800648c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006490:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b03      	cmp	r3, #3
 800649c:	d104      	bne.n	80064a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f9bc 	bl	800681e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064a6:	e01d      	b.n	80064e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	7bfa      	ldrb	r2, [r7, #15]
 80064ac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fe27 	bl	8007108 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fa5d 	bl	800697a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d004      	beq.n	80064d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2202      	movs	r2, #2
 80064ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ce:	e009      	b.n	80064e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064d8:	e004      	b.n	80064e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f99e 	bl	800681e <USBD_CtlError>
  }
}
 80064e2:	bf00      	nop
 80064e4:	bf00      	nop
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	885b      	ldrh	r3, [r3, #2]
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	4b4e      	ldr	r3, [pc, #312]	; (800663c <USBD_SetConfig+0x150>)
 8006502:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006504:	4b4d      	ldr	r3, [pc, #308]	; (800663c <USBD_SetConfig+0x150>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d905      	bls.n	8006518 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f985 	bl	800681e <USBD_CtlError>
    return USBD_FAIL;
 8006514:	2303      	movs	r3, #3
 8006516:	e08c      	b.n	8006632 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b02      	cmp	r3, #2
 8006522:	d002      	beq.n	800652a <USBD_SetConfig+0x3e>
 8006524:	2b03      	cmp	r3, #3
 8006526:	d029      	beq.n	800657c <USBD_SetConfig+0x90>
 8006528:	e075      	b.n	8006616 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800652a:	4b44      	ldr	r3, [pc, #272]	; (800663c <USBD_SetConfig+0x150>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d020      	beq.n	8006574 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006532:	4b42      	ldr	r3, [pc, #264]	; (800663c <USBD_SetConfig+0x150>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800653c:	4b3f      	ldr	r3, [pc, #252]	; (800663c <USBD_SetConfig+0x150>)
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7fe ffe7 	bl	8005516 <USBD_SetClassConfig>
 8006548:	4603      	mov	r3, r0
 800654a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800654c:	7bfb      	ldrb	r3, [r7, #15]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d008      	beq.n	8006564 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006552:	6839      	ldr	r1, [r7, #0]
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f962 	bl	800681e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2202      	movs	r2, #2
 800655e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006562:	e065      	b.n	8006630 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fa08 	bl	800697a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2203      	movs	r2, #3
 800656e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006572:	e05d      	b.n	8006630 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fa00 	bl	800697a <USBD_CtlSendStatus>
      break;
 800657a:	e059      	b.n	8006630 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800657c:	4b2f      	ldr	r3, [pc, #188]	; (800663c <USBD_SetConfig+0x150>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d112      	bne.n	80065aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800658c:	4b2b      	ldr	r3, [pc, #172]	; (800663c <USBD_SetConfig+0x150>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	461a      	mov	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006596:	4b29      	ldr	r3, [pc, #164]	; (800663c <USBD_SetConfig+0x150>)
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7fe ffd6 	bl	800554e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f9e9 	bl	800697a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80065a8:	e042      	b.n	8006630 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80065aa:	4b24      	ldr	r3, [pc, #144]	; (800663c <USBD_SetConfig+0x150>)
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d02a      	beq.n	800660e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	4619      	mov	r1, r3
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7fe ffc4 	bl	800554e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80065c6:	4b1d      	ldr	r3, [pc, #116]	; (800663c <USBD_SetConfig+0x150>)
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	461a      	mov	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80065d0:	4b1a      	ldr	r3, [pc, #104]	; (800663c <USBD_SetConfig+0x150>)
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7fe ff9d 	bl	8005516 <USBD_SetClassConfig>
 80065dc:	4603      	mov	r3, r0
 80065de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00f      	beq.n	8006606 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80065e6:	6839      	ldr	r1, [r7, #0]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f918 	bl	800681e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7fe ffa9 	bl	800554e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006604:	e014      	b.n	8006630 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f9b7 	bl	800697a <USBD_CtlSendStatus>
      break;
 800660c:	e010      	b.n	8006630 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f9b3 	bl	800697a <USBD_CtlSendStatus>
      break;
 8006614:	e00c      	b.n	8006630 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006616:	6839      	ldr	r1, [r7, #0]
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f900 	bl	800681e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800661e:	4b07      	ldr	r3, [pc, #28]	; (800663c <USBD_SetConfig+0x150>)
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	4619      	mov	r1, r3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7fe ff92 	bl	800554e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800662a:	2303      	movs	r3, #3
 800662c:	73fb      	strb	r3, [r7, #15]
      break;
 800662e:	bf00      	nop
  }

  return ret;
 8006630:	7bfb      	ldrb	r3, [r7, #15]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	200001cc 	.word	0x200001cc

08006640 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	88db      	ldrh	r3, [r3, #6]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d004      	beq.n	800665c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f8e2 	bl	800681e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800665a:	e023      	b.n	80066a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	dc02      	bgt.n	800666e <USBD_GetConfig+0x2e>
 8006668:	2b00      	cmp	r3, #0
 800666a:	dc03      	bgt.n	8006674 <USBD_GetConfig+0x34>
 800666c:	e015      	b.n	800669a <USBD_GetConfig+0x5a>
 800666e:	2b03      	cmp	r3, #3
 8006670:	d00b      	beq.n	800668a <USBD_GetConfig+0x4a>
 8006672:	e012      	b.n	800669a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	3308      	adds	r3, #8
 800667e:	2201      	movs	r2, #1
 8006680:	4619      	mov	r1, r3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f93c 	bl	8006900 <USBD_CtlSendData>
        break;
 8006688:	e00c      	b.n	80066a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	3304      	adds	r3, #4
 800668e:	2201      	movs	r2, #1
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f934 	bl	8006900 <USBD_CtlSendData>
        break;
 8006698:	e004      	b.n	80066a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f8be 	bl	800681e <USBD_CtlError>
        break;
 80066a2:	bf00      	nop
}
 80066a4:	bf00      	nop
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	3b01      	subs	r3, #1
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d81e      	bhi.n	8006702 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	88db      	ldrh	r3, [r3, #6]
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d004      	beq.n	80066d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80066cc:	6839      	ldr	r1, [r7, #0]
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f8a5 	bl	800681e <USBD_CtlError>
        break;
 80066d4:	e01a      	b.n	800670c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d005      	beq.n	80066f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f043 0202 	orr.w	r2, r3, #2
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	330c      	adds	r3, #12
 80066f6:	2202      	movs	r2, #2
 80066f8:	4619      	mov	r1, r3
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f900 	bl	8006900 <USBD_CtlSendData>
      break;
 8006700:	e004      	b.n	800670c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f88a 	bl	800681e <USBD_CtlError>
      break;
 800670a:	bf00      	nop
  }
}
 800670c:	bf00      	nop
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	885b      	ldrh	r3, [r3, #2]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d107      	bne.n	8006736 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f923 	bl	800697a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006734:	e013      	b.n	800675e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	885b      	ldrh	r3, [r3, #2]
 800673a:	2b02      	cmp	r3, #2
 800673c:	d10b      	bne.n	8006756 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	889b      	ldrh	r3, [r3, #4]
 8006742:	0a1b      	lsrs	r3, r3, #8
 8006744:	b29b      	uxth	r3, r3
 8006746:	b2da      	uxtb	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f913 	bl	800697a <USBD_CtlSendStatus>
}
 8006754:	e003      	b.n	800675e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f860 	bl	800681e <USBD_CtlError>
}
 800675e:	bf00      	nop
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b082      	sub	sp, #8
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006776:	b2db      	uxtb	r3, r3
 8006778:	3b01      	subs	r3, #1
 800677a:	2b02      	cmp	r3, #2
 800677c:	d80b      	bhi.n	8006796 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	885b      	ldrh	r3, [r3, #2]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d10c      	bne.n	80067a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f8f3 	bl	800697a <USBD_CtlSendStatus>
      }
      break;
 8006794:	e004      	b.n	80067a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006796:	6839      	ldr	r1, [r7, #0]
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f840 	bl	800681e <USBD_CtlError>
      break;
 800679e:	e000      	b.n	80067a2 <USBD_ClrFeature+0x3c>
      break;
 80067a0:	bf00      	nop
  }
}
 80067a2:	bf00      	nop
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	781a      	ldrb	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	3301      	adds	r3, #1
 80067c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	781a      	ldrb	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3301      	adds	r3, #1
 80067d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f7ff fa41 	bl	8005c5c <SWAPBYTE>
 80067da:	4603      	mov	r3, r0
 80067dc:	461a      	mov	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3301      	adds	r3, #1
 80067e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	3301      	adds	r3, #1
 80067ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f7ff fa34 	bl	8005c5c <SWAPBYTE>
 80067f4:	4603      	mov	r3, r0
 80067f6:	461a      	mov	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3301      	adds	r3, #1
 8006800:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3301      	adds	r3, #1
 8006806:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f7ff fa27 	bl	8005c5c <SWAPBYTE>
 800680e:	4603      	mov	r3, r0
 8006810:	461a      	mov	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	80da      	strh	r2, [r3, #6]
}
 8006816:	bf00      	nop
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b082      	sub	sp, #8
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006828:	2180      	movs	r1, #128	; 0x80
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fc02 	bl	8007034 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006830:	2100      	movs	r1, #0
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fbfe 	bl	8007034 <USBD_LL_StallEP>
}
 8006838:	bf00      	nop
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d036      	beq.n	80068c4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800685a:	6938      	ldr	r0, [r7, #16]
 800685c:	f000 f836 	bl	80068cc <USBD_GetLen>
 8006860:	4603      	mov	r3, r0
 8006862:	3301      	adds	r3, #1
 8006864:	b29b      	uxth	r3, r3
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800686e:	7dfb      	ldrb	r3, [r7, #23]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	4413      	add	r3, r2
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	7812      	ldrb	r2, [r2, #0]
 8006878:	701a      	strb	r2, [r3, #0]
  idx++;
 800687a:	7dfb      	ldrb	r3, [r7, #23]
 800687c:	3301      	adds	r3, #1
 800687e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006880:	7dfb      	ldrb	r3, [r7, #23]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	4413      	add	r3, r2
 8006886:	2203      	movs	r2, #3
 8006888:	701a      	strb	r2, [r3, #0]
  idx++;
 800688a:	7dfb      	ldrb	r3, [r7, #23]
 800688c:	3301      	adds	r3, #1
 800688e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006890:	e013      	b.n	80068ba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	4413      	add	r3, r2
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	7812      	ldrb	r2, [r2, #0]
 800689c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	3301      	adds	r3, #1
 80068a2:	613b      	str	r3, [r7, #16]
    idx++;
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
 80068a6:	3301      	adds	r3, #1
 80068a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	4413      	add	r3, r2
 80068b0:	2200      	movs	r2, #0
 80068b2:	701a      	strb	r2, [r3, #0]
    idx++;
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	3301      	adds	r3, #1
 80068b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1e7      	bne.n	8006892 <USBD_GetString+0x52>
 80068c2:	e000      	b.n	80068c6 <USBD_GetString+0x86>
    return;
 80068c4:	bf00      	nop
  }
}
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80068dc:	e005      	b.n	80068ea <USBD_GetLen+0x1e>
  {
    len++;
 80068de:	7bfb      	ldrb	r3, [r7, #15]
 80068e0:	3301      	adds	r3, #1
 80068e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	3301      	adds	r3, #1
 80068e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1f5      	bne.n	80068de <USBD_GetLen+0x12>
  }

  return len;
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2202      	movs	r2, #2
 8006910:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	2100      	movs	r1, #0
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f000 fc0d 	bl	8007146 <USBD_LL_Transmit>

  return USBD_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b084      	sub	sp, #16
 800693a:	af00      	add	r7, sp, #0
 800693c:	60f8      	str	r0, [r7, #12]
 800693e:	60b9      	str	r1, [r7, #8]
 8006940:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	2100      	movs	r1, #0
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 fbfc 	bl	8007146 <USBD_LL_Transmit>

  return USBD_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	2100      	movs	r1, #0
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 fc0c 	bl	8007188 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b082      	sub	sp, #8
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2204      	movs	r2, #4
 8006986:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800698a:	2300      	movs	r3, #0
 800698c:	2200      	movs	r2, #0
 800698e:	2100      	movs	r1, #0
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fbd8 	bl	8007146 <USBD_LL_Transmit>

  return USBD_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2205      	movs	r2, #5
 80069ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069b0:	2300      	movs	r3, #0
 80069b2:	2200      	movs	r2, #0
 80069b4:	2100      	movs	r1, #0
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fbe6 	bl	8007188 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
	...

080069c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80069cc:	2200      	movs	r2, #0
 80069ce:	490e      	ldr	r1, [pc, #56]	; (8006a08 <MX_USB_DEVICE_Init+0x40>)
 80069d0:	480e      	ldr	r0, [pc, #56]	; (8006a0c <MX_USB_DEVICE_Init+0x44>)
 80069d2:	f7fe fd23 	bl	800541c <USBD_Init>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80069dc:	f7f9 ff48 	bl	8000870 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80069e0:	490b      	ldr	r1, [pc, #44]	; (8006a10 <MX_USB_DEVICE_Init+0x48>)
 80069e2:	480a      	ldr	r0, [pc, #40]	; (8006a0c <MX_USB_DEVICE_Init+0x44>)
 80069e4:	f7fe fd4a 	bl	800547c <USBD_RegisterClass>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80069ee:	f7f9 ff3f 	bl	8000870 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80069f2:	4806      	ldr	r0, [pc, #24]	; (8006a0c <MX_USB_DEVICE_Init+0x44>)
 80069f4:	f7fe fd78 	bl	80054e8 <USBD_Start>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80069fe:	f7f9 ff37 	bl	8000870 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006a02:	bf00      	nop
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	200000cc 	.word	0x200000cc
 8006a0c:	200001d0 	.word	0x200001d0
 8006a10:	2000000c 	.word	0x2000000c

08006a14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	6039      	str	r1, [r7, #0]
 8006a1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	2212      	movs	r2, #18
 8006a24:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006a26:	4b03      	ldr	r3, [pc, #12]	; (8006a34 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	200000e8 	.word	0x200000e8

08006a38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	4603      	mov	r3, r0
 8006a40:	6039      	str	r1, [r7, #0]
 8006a42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2204      	movs	r2, #4
 8006a48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006a4a:	4b03      	ldr	r3, [pc, #12]	; (8006a58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	200000fc 	.word	0x200000fc

08006a5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	4603      	mov	r3, r0
 8006a64:	6039      	str	r1, [r7, #0]
 8006a66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a68:	79fb      	ldrb	r3, [r7, #7]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d105      	bne.n	8006a7a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	4907      	ldr	r1, [pc, #28]	; (8006a90 <USBD_FS_ProductStrDescriptor+0x34>)
 8006a72:	4808      	ldr	r0, [pc, #32]	; (8006a94 <USBD_FS_ProductStrDescriptor+0x38>)
 8006a74:	f7ff fee4 	bl	8006840 <USBD_GetString>
 8006a78:	e004      	b.n	8006a84 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	4904      	ldr	r1, [pc, #16]	; (8006a90 <USBD_FS_ProductStrDescriptor+0x34>)
 8006a7e:	4805      	ldr	r0, [pc, #20]	; (8006a94 <USBD_FS_ProductStrDescriptor+0x38>)
 8006a80:	f7ff fede 	bl	8006840 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a84:	4b02      	ldr	r3, [pc, #8]	; (8006a90 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	200004ac 	.word	0x200004ac
 8006a94:	080072c4 	.word	0x080072c4

08006a98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	6039      	str	r1, [r7, #0]
 8006aa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	4904      	ldr	r1, [pc, #16]	; (8006ab8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006aa8:	4804      	ldr	r0, [pc, #16]	; (8006abc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006aaa:	f7ff fec9 	bl	8006840 <USBD_GetString>
  return USBD_StrDesc;
 8006aae:	4b02      	ldr	r3, [pc, #8]	; (8006ab8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	200004ac 	.word	0x200004ac
 8006abc:	080072dc 	.word	0x080072dc

08006ac0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	6039      	str	r1, [r7, #0]
 8006aca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	221a      	movs	r2, #26
 8006ad0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006ad2:	f000 f843 	bl	8006b5c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006ad6:	4b02      	ldr	r3, [pc, #8]	; (8006ae0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	20000100 	.word	0x20000100

08006ae4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	4603      	mov	r3, r0
 8006aec:	6039      	str	r1, [r7, #0]
 8006aee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d105      	bne.n	8006b02 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	4907      	ldr	r1, [pc, #28]	; (8006b18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006afa:	4808      	ldr	r0, [pc, #32]	; (8006b1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006afc:	f7ff fea0 	bl	8006840 <USBD_GetString>
 8006b00:	e004      	b.n	8006b0c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	4904      	ldr	r1, [pc, #16]	; (8006b18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b06:	4805      	ldr	r0, [pc, #20]	; (8006b1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b08:	f7ff fe9a 	bl	8006840 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b0c:	4b02      	ldr	r3, [pc, #8]	; (8006b18 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	200004ac 	.word	0x200004ac
 8006b1c:	080072f0 	.word	0x080072f0

08006b20 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	4603      	mov	r3, r0
 8006b28:	6039      	str	r1, [r7, #0]
 8006b2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b2c:	79fb      	ldrb	r3, [r7, #7]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d105      	bne.n	8006b3e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	4907      	ldr	r1, [pc, #28]	; (8006b54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b36:	4808      	ldr	r0, [pc, #32]	; (8006b58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b38:	f7ff fe82 	bl	8006840 <USBD_GetString>
 8006b3c:	e004      	b.n	8006b48 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	4904      	ldr	r1, [pc, #16]	; (8006b54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b42:	4805      	ldr	r0, [pc, #20]	; (8006b58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b44:	f7ff fe7c 	bl	8006840 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b48:	4b02      	ldr	r3, [pc, #8]	; (8006b54 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	200004ac 	.word	0x200004ac
 8006b58:	080072fc 	.word	0x080072fc

08006b5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006b62:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <Get_SerialNum+0x44>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006b68:	4b0e      	ldr	r3, [pc, #56]	; (8006ba4 <Get_SerialNum+0x48>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006b6e:	4b0e      	ldr	r3, [pc, #56]	; (8006ba8 <Get_SerialNum+0x4c>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4413      	add	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d009      	beq.n	8006b96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006b82:	2208      	movs	r2, #8
 8006b84:	4909      	ldr	r1, [pc, #36]	; (8006bac <Get_SerialNum+0x50>)
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 f814 	bl	8006bb4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006b8c:	2204      	movs	r2, #4
 8006b8e:	4908      	ldr	r1, [pc, #32]	; (8006bb0 <Get_SerialNum+0x54>)
 8006b90:	68b8      	ldr	r0, [r7, #8]
 8006b92:	f000 f80f 	bl	8006bb4 <IntToUnicode>
  }
}
 8006b96:	bf00      	nop
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	1fff7a10 	.word	0x1fff7a10
 8006ba4:	1fff7a14 	.word	0x1fff7a14
 8006ba8:	1fff7a18 	.word	0x1fff7a18
 8006bac:	20000102 	.word	0x20000102
 8006bb0:	20000112 	.word	0x20000112

08006bb4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	75fb      	strb	r3, [r7, #23]
 8006bca:	e027      	b.n	8006c1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	0f1b      	lsrs	r3, r3, #28
 8006bd0:	2b09      	cmp	r3, #9
 8006bd2:	d80b      	bhi.n	8006bec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	0f1b      	lsrs	r3, r3, #28
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	7dfb      	ldrb	r3, [r7, #23]
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	4619      	mov	r1, r3
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	440b      	add	r3, r1
 8006be4:	3230      	adds	r2, #48	; 0x30
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	701a      	strb	r2, [r3, #0]
 8006bea:	e00a      	b.n	8006c02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	0f1b      	lsrs	r3, r3, #28
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	7dfb      	ldrb	r3, [r7, #23]
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	440b      	add	r3, r1
 8006bfc:	3237      	adds	r2, #55	; 0x37
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	011b      	lsls	r3, r3, #4
 8006c06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006c08:	7dfb      	ldrb	r3, [r7, #23]
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	4413      	add	r3, r2
 8006c12:	2200      	movs	r2, #0
 8006c14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	75fb      	strb	r3, [r7, #23]
 8006c1c:	7dfa      	ldrb	r2, [r7, #23]
 8006c1e:	79fb      	ldrb	r3, [r7, #7]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d3d3      	bcc.n	8006bcc <IntToUnicode+0x18>
  }
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop
 8006c28:	371c      	adds	r7, #28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
	...

08006c34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08a      	sub	sp, #40	; 0x28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c3c:	f107 0314 	add.w	r3, r7, #20
 8006c40:	2200      	movs	r2, #0
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	605a      	str	r2, [r3, #4]
 8006c46:	609a      	str	r2, [r3, #8]
 8006c48:	60da      	str	r2, [r3, #12]
 8006c4a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c54:	d147      	bne.n	8006ce6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c56:	2300      	movs	r3, #0
 8006c58:	613b      	str	r3, [r7, #16]
 8006c5a:	4b25      	ldr	r3, [pc, #148]	; (8006cf0 <HAL_PCD_MspInit+0xbc>)
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5e:	4a24      	ldr	r2, [pc, #144]	; (8006cf0 <HAL_PCD_MspInit+0xbc>)
 8006c60:	f043 0301 	orr.w	r3, r3, #1
 8006c64:	6313      	str	r3, [r2, #48]	; 0x30
 8006c66:	4b22      	ldr	r3, [pc, #136]	; (8006cf0 <HAL_PCD_MspInit+0xbc>)
 8006c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	613b      	str	r3, [r7, #16]
 8006c70:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006c72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c80:	f107 0314 	add.w	r3, r7, #20
 8006c84:	4619      	mov	r1, r3
 8006c86:	481b      	ldr	r0, [pc, #108]	; (8006cf4 <HAL_PCD_MspInit+0xc0>)
 8006c88:	f7fa fcac 	bl	80015e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006c8c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c92:	2302      	movs	r3, #2
 8006c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c96:	2300      	movs	r3, #0
 8006c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006c9e:	230a      	movs	r3, #10
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ca2:	f107 0314 	add.w	r3, r7, #20
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4812      	ldr	r0, [pc, #72]	; (8006cf4 <HAL_PCD_MspInit+0xc0>)
 8006caa:	f7fa fc9b 	bl	80015e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006cae:	4b10      	ldr	r3, [pc, #64]	; (8006cf0 <HAL_PCD_MspInit+0xbc>)
 8006cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb2:	4a0f      	ldr	r2, [pc, #60]	; (8006cf0 <HAL_PCD_MspInit+0xbc>)
 8006cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb8:	6353      	str	r3, [r2, #52]	; 0x34
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	4b0c      	ldr	r3, [pc, #48]	; (8006cf0 <HAL_PCD_MspInit+0xbc>)
 8006cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc2:	4a0b      	ldr	r2, [pc, #44]	; (8006cf0 <HAL_PCD_MspInit+0xbc>)
 8006cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8006cca:	4b09      	ldr	r3, [pc, #36]	; (8006cf0 <HAL_PCD_MspInit+0xbc>)
 8006ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	2100      	movs	r1, #0
 8006cda:	2043      	movs	r0, #67	; 0x43
 8006cdc:	f7fa fc4b 	bl	8001576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006ce0:	2043      	movs	r0, #67	; 0x43
 8006ce2:	f7fa fc64 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006ce6:	bf00      	nop
 8006ce8:	3728      	adds	r7, #40	; 0x28
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	40023800 	.word	0x40023800
 8006cf4:	40020000 	.word	0x40020000

08006cf8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	4610      	mov	r0, r2
 8006d10:	f7fe fc37 	bl	8005582 <USBD_LL_SetupStage>
}
 8006d14:	bf00      	nop
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006d2e:	78fa      	ldrb	r2, [r7, #3]
 8006d30:	6879      	ldr	r1, [r7, #4]
 8006d32:	4613      	mov	r3, r2
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	4413      	add	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	440b      	add	r3, r1
 8006d3c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	78fb      	ldrb	r3, [r7, #3]
 8006d44:	4619      	mov	r1, r3
 8006d46:	f7fe fc71 	bl	800562c <USBD_LL_DataOutStage>
}
 8006d4a:	bf00      	nop
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b082      	sub	sp, #8
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006d64:	78fa      	ldrb	r2, [r7, #3]
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	00db      	lsls	r3, r3, #3
 8006d6c:	4413      	add	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	440b      	add	r3, r1
 8006d72:	334c      	adds	r3, #76	; 0x4c
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	78fb      	ldrb	r3, [r7, #3]
 8006d78:	4619      	mov	r1, r3
 8006d7a:	f7fe fd0a 	bl	8005792 <USBD_LL_DataInStage>
}
 8006d7e:	bf00      	nop
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b082      	sub	sp, #8
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fe fe3e 	bl	8005a16 <USBD_LL_SOF>
}
 8006d9a:	bf00      	nop
 8006d9c:	3708      	adds	r7, #8
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006daa:	2301      	movs	r3, #1
 8006dac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d102      	bne.n	8006dbc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]
 8006dba:	e008      	b.n	8006dce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d102      	bne.n	8006dca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	73fb      	strb	r3, [r7, #15]
 8006dc8:	e001      	b.n	8006dce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006dca:	f7f9 fd51 	bl	8000870 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006dd4:	7bfa      	ldrb	r2, [r7, #15]
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fe fdde 	bl	800599a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7fe fd86 	bl	80058f6 <USBD_LL_Reset>
}
 8006dea:	bf00      	nop
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
	...

08006df4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fe fdd9 	bl	80059ba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	6812      	ldr	r2, [r2, #0]
 8006e16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e1a:	f043 0301 	orr.w	r3, r3, #1
 8006e1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006e28:	4b04      	ldr	r3, [pc, #16]	; (8006e3c <HAL_PCD_SuspendCallback+0x48>)
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	4a03      	ldr	r2, [pc, #12]	; (8006e3c <HAL_PCD_SuspendCallback+0x48>)
 8006e2e:	f043 0306 	orr.w	r3, r3, #6
 8006e32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006e34:	bf00      	nop
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	e000ed00 	.word	0xe000ed00

08006e40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fe fdc9 	bl	80059e6 <USBD_LL_Resume>
}
 8006e54:	bf00      	nop
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	460b      	mov	r3, r1
 8006e66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e6e:	78fa      	ldrb	r2, [r7, #3]
 8006e70:	4611      	mov	r1, r2
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fe fe21 	bl	8005aba <USBD_LL_IsoOUTIncomplete>
}
 8006e78:	bf00      	nop
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e92:	78fa      	ldrb	r2, [r7, #3]
 8006e94:	4611      	mov	r1, r2
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fe fddd 	bl	8005a56 <USBD_LL_IsoINIncomplete>
}
 8006e9c:	bf00      	nop
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fe fe33 	bl	8005b1e <USBD_LL_DevConnected>
}
 8006eb8:	bf00      	nop
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fe fe30 	bl	8005b34 <USBD_LL_DevDisconnected>
}
 8006ed4:	bf00      	nop
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d13c      	bne.n	8006f66 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006eec:	4a20      	ldr	r2, [pc, #128]	; (8006f70 <USBD_LL_Init+0x94>)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a1e      	ldr	r2, [pc, #120]	; (8006f70 <USBD_LL_Init+0x94>)
 8006ef8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006efc:	4b1c      	ldr	r3, [pc, #112]	; (8006f70 <USBD_LL_Init+0x94>)
 8006efe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006f02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006f04:	4b1a      	ldr	r3, [pc, #104]	; (8006f70 <USBD_LL_Init+0x94>)
 8006f06:	2204      	movs	r2, #4
 8006f08:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006f0a:	4b19      	ldr	r3, [pc, #100]	; (8006f70 <USBD_LL_Init+0x94>)
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006f10:	4b17      	ldr	r3, [pc, #92]	; (8006f70 <USBD_LL_Init+0x94>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006f16:	4b16      	ldr	r3, [pc, #88]	; (8006f70 <USBD_LL_Init+0x94>)
 8006f18:	2202      	movs	r2, #2
 8006f1a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006f1c:	4b14      	ldr	r3, [pc, #80]	; (8006f70 <USBD_LL_Init+0x94>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006f22:	4b13      	ldr	r3, [pc, #76]	; (8006f70 <USBD_LL_Init+0x94>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006f28:	4b11      	ldr	r3, [pc, #68]	; (8006f70 <USBD_LL_Init+0x94>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006f2e:	4b10      	ldr	r3, [pc, #64]	; (8006f70 <USBD_LL_Init+0x94>)
 8006f30:	2201      	movs	r2, #1
 8006f32:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006f34:	4b0e      	ldr	r3, [pc, #56]	; (8006f70 <USBD_LL_Init+0x94>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006f3a:	480d      	ldr	r0, [pc, #52]	; (8006f70 <USBD_LL_Init+0x94>)
 8006f3c:	f7fa fd21 	bl	8001982 <HAL_PCD_Init>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006f46:	f7f9 fc93 	bl	8000870 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006f4a:	2180      	movs	r1, #128	; 0x80
 8006f4c:	4808      	ldr	r0, [pc, #32]	; (8006f70 <USBD_LL_Init+0x94>)
 8006f4e:	f7fb ff60 	bl	8002e12 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006f52:	2240      	movs	r2, #64	; 0x40
 8006f54:	2100      	movs	r1, #0
 8006f56:	4806      	ldr	r0, [pc, #24]	; (8006f70 <USBD_LL_Init+0x94>)
 8006f58:	f7fb ff14 	bl	8002d84 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006f5c:	2280      	movs	r2, #128	; 0x80
 8006f5e:	2101      	movs	r1, #1
 8006f60:	4803      	ldr	r0, [pc, #12]	; (8006f70 <USBD_LL_Init+0x94>)
 8006f62:	f7fb ff0f 	bl	8002d84 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	200006ac 	.word	0x200006ac

08006f74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fa fe16 	bl	8001bbc <HAL_PCD_Start>
 8006f90:	4603      	mov	r3, r0
 8006f92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 f930 	bl	80071fc <USBD_Get_USB_Status>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	4608      	mov	r0, r1
 8006fb4:	4611      	mov	r1, r2
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	4603      	mov	r3, r0
 8006fba:	70fb      	strb	r3, [r7, #3]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	70bb      	strb	r3, [r7, #2]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006fd2:	78bb      	ldrb	r3, [r7, #2]
 8006fd4:	883a      	ldrh	r2, [r7, #0]
 8006fd6:	78f9      	ldrb	r1, [r7, #3]
 8006fd8:	f7fb fae7 	bl	80025aa <HAL_PCD_EP_Open>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 f90a 	bl	80071fc <USBD_Get_USB_Status>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fec:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	460b      	mov	r3, r1
 8007000:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007010:	78fa      	ldrb	r2, [r7, #3]
 8007012:	4611      	mov	r1, r2
 8007014:	4618      	mov	r0, r3
 8007016:	f7fb fb30 	bl	800267a <HAL_PCD_EP_Close>
 800701a:	4603      	mov	r3, r0
 800701c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	4618      	mov	r0, r3
 8007022:	f000 f8eb 	bl	80071fc <USBD_Get_USB_Status>
 8007026:	4603      	mov	r3, r0
 8007028:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800702a:	7bbb      	ldrb	r3, [r7, #14]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800704e:	78fa      	ldrb	r2, [r7, #3]
 8007050:	4611      	mov	r1, r2
 8007052:	4618      	mov	r0, r3
 8007054:	f7fb fbf0 	bl	8002838 <HAL_PCD_EP_SetStall>
 8007058:	4603      	mov	r3, r0
 800705a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800705c:	7bfb      	ldrb	r3, [r7, #15]
 800705e:	4618      	mov	r0, r3
 8007060:	f000 f8cc 	bl	80071fc <USBD_Get_USB_Status>
 8007064:	4603      	mov	r3, r0
 8007066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007068:	7bbb      	ldrb	r3, [r7, #14]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	460b      	mov	r3, r1
 800707c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800708c:	78fa      	ldrb	r2, [r7, #3]
 800708e:	4611      	mov	r1, r2
 8007090:	4618      	mov	r0, r3
 8007092:	f7fb fc35 	bl	8002900 <HAL_PCD_EP_ClrStall>
 8007096:	4603      	mov	r3, r0
 8007098:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	4618      	mov	r0, r3
 800709e:	f000 f8ad 	bl	80071fc <USBD_Get_USB_Status>
 80070a2:	4603      	mov	r3, r0
 80070a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	460b      	mov	r3, r1
 80070ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80070c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80070c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	da0b      	bge.n	80070e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80070cc:	78fb      	ldrb	r3, [r7, #3]
 80070ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070d2:	68f9      	ldr	r1, [r7, #12]
 80070d4:	4613      	mov	r3, r2
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	4413      	add	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	440b      	add	r3, r1
 80070de:	333e      	adds	r3, #62	; 0x3e
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	e00b      	b.n	80070fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80070e4:	78fb      	ldrb	r3, [r7, #3]
 80070e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070ea:	68f9      	ldr	r1, [r7, #12]
 80070ec:	4613      	mov	r3, r2
 80070ee:	00db      	lsls	r3, r3, #3
 80070f0:	4413      	add	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	440b      	add	r3, r1
 80070f6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80070fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	460b      	mov	r3, r1
 8007112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007114:	2300      	movs	r3, #0
 8007116:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007118:	2300      	movs	r3, #0
 800711a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007122:	78fa      	ldrb	r2, [r7, #3]
 8007124:	4611      	mov	r1, r2
 8007126:	4618      	mov	r0, r3
 8007128:	f7fb fa1a 	bl	8002560 <HAL_PCD_SetAddress>
 800712c:	4603      	mov	r3, r0
 800712e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007130:	7bfb      	ldrb	r3, [r7, #15]
 8007132:	4618      	mov	r0, r3
 8007134:	f000 f862 	bl	80071fc <USBD_Get_USB_Status>
 8007138:	4603      	mov	r3, r0
 800713a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800713c:	7bbb      	ldrb	r3, [r7, #14]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b086      	sub	sp, #24
 800714a:	af00      	add	r7, sp, #0
 800714c:	60f8      	str	r0, [r7, #12]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	603b      	str	r3, [r7, #0]
 8007152:	460b      	mov	r3, r1
 8007154:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007164:	7af9      	ldrb	r1, [r7, #11]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	f7fb fb1b 	bl	80027a4 <HAL_PCD_EP_Transmit>
 800716e:	4603      	mov	r3, r0
 8007170:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007172:	7dfb      	ldrb	r3, [r7, #23]
 8007174:	4618      	mov	r0, r3
 8007176:	f000 f841 	bl	80071fc <USBD_Get_USB_Status>
 800717a:	4603      	mov	r3, r0
 800717c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800717e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3718      	adds	r7, #24
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	607a      	str	r2, [r7, #4]
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	460b      	mov	r3, r1
 8007196:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80071a6:	7af9      	ldrb	r1, [r7, #11]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	f7fb faaf 	bl	800270e <HAL_PCD_EP_Receive>
 80071b0:	4603      	mov	r3, r0
 80071b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 f820 	bl	80071fc <USBD_Get_USB_Status>
 80071bc:	4603      	mov	r3, r0
 80071be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80071c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
	...

080071cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80071d4:	4b03      	ldr	r3, [pc, #12]	; (80071e4 <USBD_static_malloc+0x18>)
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	20000bb8 	.word	0x20000bb8

080071e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]

}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	4603      	mov	r3, r0
 8007204:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	2b03      	cmp	r3, #3
 800720e:	d817      	bhi.n	8007240 <USBD_Get_USB_Status+0x44>
 8007210:	a201      	add	r2, pc, #4	; (adr r2, 8007218 <USBD_Get_USB_Status+0x1c>)
 8007212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007216:	bf00      	nop
 8007218:	08007229 	.word	0x08007229
 800721c:	0800722f 	.word	0x0800722f
 8007220:	08007235 	.word	0x08007235
 8007224:	0800723b 	.word	0x0800723b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	73fb      	strb	r3, [r7, #15]
    break;
 800722c:	e00b      	b.n	8007246 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800722e:	2303      	movs	r3, #3
 8007230:	73fb      	strb	r3, [r7, #15]
    break;
 8007232:	e008      	b.n	8007246 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007234:	2301      	movs	r3, #1
 8007236:	73fb      	strb	r3, [r7, #15]
    break;
 8007238:	e005      	b.n	8007246 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800723a:	2303      	movs	r3, #3
 800723c:	73fb      	strb	r3, [r7, #15]
    break;
 800723e:	e002      	b.n	8007246 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007240:	2303      	movs	r3, #3
 8007242:	73fb      	strb	r3, [r7, #15]
    break;
 8007244:	bf00      	nop
  }
  return usb_status;
 8007246:	7bfb      	ldrb	r3, [r7, #15]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <__libc_init_array>:
 8007254:	b570      	push	{r4, r5, r6, lr}
 8007256:	4d0d      	ldr	r5, [pc, #52]	; (800728c <__libc_init_array+0x38>)
 8007258:	4c0d      	ldr	r4, [pc, #52]	; (8007290 <__libc_init_array+0x3c>)
 800725a:	1b64      	subs	r4, r4, r5
 800725c:	10a4      	asrs	r4, r4, #2
 800725e:	2600      	movs	r6, #0
 8007260:	42a6      	cmp	r6, r4
 8007262:	d109      	bne.n	8007278 <__libc_init_array+0x24>
 8007264:	4d0b      	ldr	r5, [pc, #44]	; (8007294 <__libc_init_array+0x40>)
 8007266:	4c0c      	ldr	r4, [pc, #48]	; (8007298 <__libc_init_array+0x44>)
 8007268:	f000 f820 	bl	80072ac <_init>
 800726c:	1b64      	subs	r4, r4, r5
 800726e:	10a4      	asrs	r4, r4, #2
 8007270:	2600      	movs	r6, #0
 8007272:	42a6      	cmp	r6, r4
 8007274:	d105      	bne.n	8007282 <__libc_init_array+0x2e>
 8007276:	bd70      	pop	{r4, r5, r6, pc}
 8007278:	f855 3b04 	ldr.w	r3, [r5], #4
 800727c:	4798      	blx	r3
 800727e:	3601      	adds	r6, #1
 8007280:	e7ee      	b.n	8007260 <__libc_init_array+0xc>
 8007282:	f855 3b04 	ldr.w	r3, [r5], #4
 8007286:	4798      	blx	r3
 8007288:	3601      	adds	r6, #1
 800728a:	e7f2      	b.n	8007272 <__libc_init_array+0x1e>
 800728c:	08007324 	.word	0x08007324
 8007290:	08007324 	.word	0x08007324
 8007294:	08007324 	.word	0x08007324
 8007298:	08007328 	.word	0x08007328

0800729c <memset>:
 800729c:	4402      	add	r2, r0
 800729e:	4603      	mov	r3, r0
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d100      	bne.n	80072a6 <memset+0xa>
 80072a4:	4770      	bx	lr
 80072a6:	f803 1b01 	strb.w	r1, [r3], #1
 80072aa:	e7f9      	b.n	80072a0 <memset+0x4>

080072ac <_init>:
 80072ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ae:	bf00      	nop
 80072b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072b2:	bc08      	pop	{r3}
 80072b4:	469e      	mov	lr, r3
 80072b6:	4770      	bx	lr

080072b8 <_fini>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	bf00      	nop
 80072bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072be:	bc08      	pop	{r3}
 80072c0:	469e      	mov	lr, r3
 80072c2:	4770      	bx	lr
