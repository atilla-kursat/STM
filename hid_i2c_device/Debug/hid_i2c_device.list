
hid_i2c_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a64  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08009c3c  08009c3c  00019c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cbc  08009cbc  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  08009cbc  08009cbc  00019cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cc4  08009cc4  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cc4  08009cc4  00019cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cc8  08009cc8  00019cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08009ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f8  2000015c  08009e28  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a54  08009e28  00020a54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164db  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003408  00000000  00000000  00036667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00039a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  0003aa30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fbb9  00000000  00000000  0003b8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014aec  00000000  00000000  0005b461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb629  00000000  00000000  0006ff4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b576  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f80  00000000  00000000  0012b5c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000015c 	.word	0x2000015c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009c24 	.word	0x08009c24

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000160 	.word	0x20000160
 8000214:	08009c24 	.word	0x08009c24

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <HAL_UART_RxCpltCallback>:




keyboardHID keyboard = {0,0,0,0,0,0,0,0};
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	if(datareceiveflag==0)
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <HAL_UART_RxCpltCallback+0x24>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d102      	bne.n	8000532 <HAL_UART_RxCpltCallback+0x16>
		datareceiveflag=1;
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <HAL_UART_RxCpltCallback+0x24>)
 800052e:	2201      	movs	r2, #1
 8000530:	701a      	strb	r2, [r3, #0]


}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000268 	.word	0x20000268

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f000 fa5c 	bl	8000a06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f839 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 f8f9 	bl	8000748 <MX_GPIO_Init>
  MX_DMA_Init();
 8000556:	f000 f8cd 	bl	80006f4 <MX_DMA_Init>
  MX_USB_Device_Init();
 800055a:	f008 ff21 	bl	80093a0 <MX_USB_Device_Init>
  MX_USART1_UART_Init();
 800055e:	f000 f87d 	bl	800065c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, databuff, 7);
 8000562:	463b      	mov	r3, r7
 8000564:	2207      	movs	r2, #7
 8000566:	4619      	mov	r1, r3
 8000568:	4812      	ldr	r0, [pc, #72]	; (80005b4 <main+0x70>)
 800056a:	f003 fdb5 	bl	80040d8 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(datareceiveflag==1){
 800056e:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <main+0x74>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d1fb      	bne.n	800056e <main+0x2a>
		  keyboard.MODIFIER = databuff[0];
 8000576:	783a      	ldrb	r2, [r7, #0]
 8000578:	4b10      	ldr	r3, [pc, #64]	; (80005bc <main+0x78>)
 800057a:	701a      	strb	r2, [r3, #0]
		  keyboard.KEYCODE1 = databuff[1];
 800057c:	787a      	ldrb	r2, [r7, #1]
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <main+0x78>)
 8000580:	709a      	strb	r2, [r3, #2]
		  keyboard.KEYCODE2 = databuff[2];
 8000582:	78ba      	ldrb	r2, [r7, #2]
 8000584:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <main+0x78>)
 8000586:	70da      	strb	r2, [r3, #3]
		  keyboard.KEYCODE3 = databuff[3];
 8000588:	78fa      	ldrb	r2, [r7, #3]
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <main+0x78>)
 800058c:	711a      	strb	r2, [r3, #4]
		  keyboard.KEYCODE4 = databuff[4];
 800058e:	793a      	ldrb	r2, [r7, #4]
 8000590:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <main+0x78>)
 8000592:	715a      	strb	r2, [r3, #5]
		  keyboard.KEYCODE5 = databuff[5];
 8000594:	797a      	ldrb	r2, [r7, #5]
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <main+0x78>)
 8000598:	719a      	strb	r2, [r3, #6]
		  keyboard.KEYCODE6 = databuff[6];
 800059a:	79ba      	ldrb	r2, [r7, #6]
 800059c:	4b07      	ldr	r3, [pc, #28]	; (80005bc <main+0x78>)
 800059e:	71da      	strb	r2, [r3, #7]
		  USBD_HID_SendReport(&hUsbDeviceFS, &keyboard, sizeof (keyboard));
 80005a0:	2208      	movs	r2, #8
 80005a2:	4906      	ldr	r1, [pc, #24]	; (80005bc <main+0x78>)
 80005a4:	4806      	ldr	r0, [pc, #24]	; (80005c0 <main+0x7c>)
 80005a6:	f007 fd7f 	bl	80080a8 <USBD_HID_SendReport>
		  datareceiveflag=0;
 80005aa:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <main+0x74>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
	  if(datareceiveflag==1){
 80005b0:	e7dd      	b.n	800056e <main+0x2a>
 80005b2:	bf00      	nop
 80005b4:	20000178 	.word	0x20000178
 80005b8:	20000268 	.word	0x20000268
 80005bc:	2000026c 	.word	0x2000026c
 80005c0:	2000027c 	.word	0x2000027c

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0318 	add.w	r3, r7, #24
 80005ce:	2238      	movs	r2, #56	; 0x38
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f009 fb1e 	bl	8009c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ea:	f002 fd5d 	bl	80030a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ee:	2302      	movs	r3, #2
 80005f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2340      	movs	r3, #64	; 0x40
 80005fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000604:	2301      	movs	r3, #1
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000608:	2312      	movs	r3, #18
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000610:	2306      	movs	r3, #6
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0318 	add.w	r3, r7, #24
 800061c:	4618      	mov	r0, r3
 800061e:	f002 fde7 	bl	80031f0 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000628:	f000 f8b2 	bl	8000790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2303      	movs	r3, #3
 8000632:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2104      	movs	r1, #4
 8000644:	4618      	mov	r0, r3
 8000646:	f003 f8eb 	bl	8003820 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000650:	f000 f89e 	bl	8000790 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3750      	adds	r7, #80	; 0x50
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <MX_USART1_UART_Init+0x90>)
 8000662:	4a23      	ldr	r2, [pc, #140]	; (80006f0 <MX_USART1_UART_Init+0x94>)
 8000664:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <MX_USART1_UART_Init+0x90>)
 8000668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800066c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_USART1_UART_Init+0x90>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <MX_USART1_UART_Init+0x90>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_USART1_UART_Init+0x90>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_USART1_UART_Init+0x90>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_USART1_UART_Init+0x90>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_USART1_UART_Init+0x90>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_USART1_UART_Init+0x90>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_USART1_UART_Init+0x90>)
 800069a:	2200      	movs	r2, #0
 800069c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_USART1_UART_Init+0x90>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006a4:	4811      	ldr	r0, [pc, #68]	; (80006ec <MX_USART1_UART_Init+0x90>)
 80006a6:	f003 fcc7 	bl	8004038 <HAL_UART_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80006b0:	f000 f86e 	bl	8000790 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006b4:	2100      	movs	r1, #0
 80006b6:	480d      	ldr	r0, [pc, #52]	; (80006ec <MX_USART1_UART_Init+0x90>)
 80006b8:	f004 fffe 	bl	80056b8 <HAL_UARTEx_SetTxFifoThreshold>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006c2:	f000 f865 	bl	8000790 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006c6:	2100      	movs	r1, #0
 80006c8:	4808      	ldr	r0, [pc, #32]	; (80006ec <MX_USART1_UART_Init+0x90>)
 80006ca:	f005 f833 	bl	8005734 <HAL_UARTEx_SetRxFifoThreshold>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006d4:	f000 f85c 	bl	8000790 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_USART1_UART_Init+0x90>)
 80006da:	f004 ffb4 	bl	8005646 <HAL_UARTEx_DisableFifoMode>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006e4:	f000 f854 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000178 	.word	0x20000178
 80006f0:	40013800 	.word	0x40013800

080006f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_DMA_Init+0x50>)
 80006fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006fe:	4a11      	ldr	r2, [pc, #68]	; (8000744 <MX_DMA_Init+0x50>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6493      	str	r3, [r2, #72]	; 0x48
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_DMA_Init+0x50>)
 8000708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_DMA_Init+0x50>)
 8000714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000716:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <MX_DMA_Init+0x50>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6493      	str	r3, [r2, #72]	; 0x48
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_DMA_Init+0x50>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	200b      	movs	r0, #11
 8000730:	f000 fab5 	bl	8000c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000734:	200b      	movs	r0, #11
 8000736:	f000 facc 	bl	8000cd2 <HAL_NVIC_EnableIRQ>

}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_GPIO_Init+0x44>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a0e      	ldr	r2, [pc, #56]	; (800078c <MX_GPIO_Init+0x44>)
 8000754:	f043 0320 	orr.w	r3, r3, #32
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_GPIO_Init+0x44>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0320 	and.w	r3, r3, #32
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_GPIO_Init+0x44>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <MX_GPIO_Init+0x44>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_GPIO_Init+0x44>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x8>
	...

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <HAL_MspInit+0x44>)
 80007a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007a6:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <HAL_MspInit+0x44>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6613      	str	r3, [r2, #96]	; 0x60
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <HAL_MspInit+0x44>)
 80007b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <HAL_MspInit+0x44>)
 80007bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007be:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <HAL_MspInit+0x44>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c4:	6593      	str	r3, [r2, #88]	; 0x58
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_MspInit+0x44>)
 80007c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000

080007e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09a      	sub	sp, #104	; 0x68
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	2244      	movs	r2, #68	; 0x44
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f009 fa05 	bl	8009c14 <memset>
  if(huart->Instance==USART1)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a38      	ldr	r2, [pc, #224]	; (80008f0 <HAL_UART_MspInit+0x10c>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d168      	bne.n	80008e6 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000814:	2301      	movs	r3, #1
 8000816:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4618      	mov	r0, r3
 8000822:	f003 fa19 	bl	8003c58 <HAL_RCCEx_PeriphCLKConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800082c:	f7ff ffb0 	bl	8000790 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000830:	4b30      	ldr	r3, [pc, #192]	; (80008f4 <HAL_UART_MspInit+0x110>)
 8000832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000834:	4a2f      	ldr	r2, [pc, #188]	; (80008f4 <HAL_UART_MspInit+0x110>)
 8000836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083a:	6613      	str	r3, [r2, #96]	; 0x60
 800083c:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <HAL_UART_MspInit+0x110>)
 800083e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <HAL_UART_MspInit+0x110>)
 800084a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084c:	4a29      	ldr	r2, [pc, #164]	; (80008f4 <HAL_UART_MspInit+0x110>)
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000854:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <HAL_UART_MspInit+0x110>)
 8000856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000860:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000864:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000872:	2307      	movs	r3, #7
 8000874:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800087a:	4619      	mov	r1, r3
 800087c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000880:	f000 fd74 	bl	800136c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <HAL_UART_MspInit+0x114>)
 8000886:	4a1d      	ldr	r2, [pc, #116]	; (80008fc <HAL_UART_MspInit+0x118>)
 8000888:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <HAL_UART_MspInit+0x114>)
 800088c:	2218      	movs	r2, #24
 800088e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <HAL_UART_MspInit+0x114>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <HAL_UART_MspInit+0x114>)
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <HAL_UART_MspInit+0x114>)
 800089e:	2280      	movs	r2, #128	; 0x80
 80008a0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <HAL_UART_MspInit+0x114>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <HAL_UART_MspInit+0x114>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_UART_MspInit+0x114>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008b4:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <HAL_UART_MspInit+0x114>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008ba:	480f      	ldr	r0, [pc, #60]	; (80008f8 <HAL_UART_MspInit+0x114>)
 80008bc:	f000 fa24 	bl	8000d08 <HAL_DMA_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80008c6:	f7ff ff63 	bl	8000790 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <HAL_UART_MspInit+0x114>)
 80008ce:	67da      	str	r2, [r3, #124]	; 0x7c
 80008d0:	4a09      	ldr	r2, [pc, #36]	; (80008f8 <HAL_UART_MspInit+0x114>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	2025      	movs	r0, #37	; 0x25
 80008dc:	f000 f9df 	bl	8000c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008e0:	2025      	movs	r0, #37	; 0x25
 80008e2:	f000 f9f6 	bl	8000cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008e6:	bf00      	nop
 80008e8:	3768      	adds	r7, #104	; 0x68
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40013800 	.word	0x40013800
 80008f4:	40021000 	.word	0x40021000
 80008f8:	20000208 	.word	0x20000208
 80008fc:	40020008 	.word	0x40020008

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <NMI_Handler+0x4>

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094c:	f000 f8ae 	bl	8000aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <DMA1_Channel1_IRQHandler+0x10>)
 800095a:	f000 fbb8 	bl	80010ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000208 	.word	0x20000208

08000968 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <USB_LP_IRQHandler+0x10>)
 800096e:	f000 ff86 	bl	800187e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	2000074c 	.word	0x2000074c

0800097c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000980:	4802      	ldr	r0, [pc, #8]	; (800098c <USART1_IRQHandler+0x10>)
 8000982:	f003 fbff 	bl	8004184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000178 	.word	0x20000178

08000990 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <SystemInit+0x20>)
 8000996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <SystemInit+0x20>)
 800099c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b4:	480d      	ldr	r0, [pc, #52]	; (80009ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ba:	490e      	ldr	r1, [pc, #56]	; (80009f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009bc:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <LoopForever+0xe>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009c0:	e002      	b.n	80009c8 <LoopCopyDataInit>

080009c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c6:	3304      	adds	r3, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009cc:	d3f9      	bcc.n	80009c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ce:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d0:	4c0b      	ldr	r4, [pc, #44]	; (8000a00 <LoopForever+0x16>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d4:	e001      	b.n	80009da <LoopFillZerobss>

080009d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d8:	3204      	adds	r2, #4

080009da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009dc:	d3fb      	bcc.n	80009d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009de:	f7ff ffd7 	bl	8000990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e2:	f009 f8f3 	bl	8009bcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009e6:	f7ff fdad 	bl	8000544 <main>

080009ea <LoopForever>:

LoopForever:
    b LoopForever
 80009ea:	e7fe      	b.n	80009ea <LoopForever>
  ldr   r0, =_estack
 80009ec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 80009f8:	08009ccc 	.word	0x08009ccc
  ldr r2, =_sbss
 80009fc:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000a00:	20000a54 	.word	0x20000a54

08000a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC1_2_IRQHandler>

08000a06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 f939 	bl	8000c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a16:	2000      	movs	r0, #0
 8000a18:	f000 f80e 	bl	8000a38 <HAL_InitTick>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	71fb      	strb	r3, [r7, #7]
 8000a26:	e001      	b.n	8000a2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a28:	f7ff feb8 	bl	800079c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a2c:	79fb      	ldrb	r3, [r7, #7]

}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a40:	2300      	movs	r3, #0
 8000a42:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <HAL_InitTick+0x68>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d022      	beq.n	8000a92 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_InitTick+0x6c>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <HAL_InitTick+0x68>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a58:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 f944 	bl	8000cee <HAL_SYSTICK_Config>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d10f      	bne.n	8000a8c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b0f      	cmp	r3, #15
 8000a70:	d809      	bhi.n	8000a86 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a72:	2200      	movs	r2, #0
 8000a74:	6879      	ldr	r1, [r7, #4]
 8000a76:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7a:	f000 f910 	bl	8000c9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_InitTick+0x70>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	e007      	b.n	8000a96 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	73fb      	strb	r3, [r7, #15]
 8000a8a:	e004      	b.n	8000a96 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	73fb      	strb	r3, [r7, #15]
 8000a90:	e001      	b.n	8000a96 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000004 	.word	0x20000004

08000aac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_IncTick+0x1c>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_IncTick+0x20>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4413      	add	r3, r2
 8000aba:	4a03      	ldr	r2, [pc, #12]	; (8000ac8 <HAL_IncTick+0x1c>)
 8000abc:	6013      	str	r3, [r2, #0]
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	20000274 	.word	0x20000274
 8000acc:	20000008 	.word	0x20000008

08000ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <HAL_GetTick+0x14>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000274 	.word	0x20000274

08000ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b04:	4013      	ands	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1a:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	60d3      	str	r3, [r2, #12]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <__NVIC_GetPriorityGrouping+0x18>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	f003 0307 	and.w	r3, r3, #7
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db0b      	blt.n	8000b76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	f003 021f 	and.w	r2, r3, #31
 8000b64:	4907      	ldr	r1, [pc, #28]	; (8000b84 <__NVIC_EnableIRQ+0x38>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	095b      	lsrs	r3, r3, #5
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000e100 	.word	0xe000e100

08000b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db0a      	blt.n	8000bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	490c      	ldr	r1, [pc, #48]	; (8000bd4 <__NVIC_SetPriority+0x4c>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	0112      	lsls	r2, r2, #4
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	440b      	add	r3, r1
 8000bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb0:	e00a      	b.n	8000bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4908      	ldr	r1, [pc, #32]	; (8000bd8 <__NVIC_SetPriority+0x50>)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	3b04      	subs	r3, #4
 8000bc0:	0112      	lsls	r2, r2, #4
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	761a      	strb	r2, [r3, #24]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000e100 	.word	0xe000e100
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	; 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f1c3 0307 	rsb	r3, r3, #7
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	bf28      	it	cs
 8000bfa:	2304      	movcs	r3, #4
 8000bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3304      	adds	r3, #4
 8000c02:	2b06      	cmp	r3, #6
 8000c04:	d902      	bls.n	8000c0c <NVIC_EncodePriority+0x30>
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3b03      	subs	r3, #3
 8000c0a:	e000      	b.n	8000c0e <NVIC_EncodePriority+0x32>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	f04f 32ff 	mov.w	r2, #4294967295
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43da      	mvns	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	401a      	ands	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c24:	f04f 31ff 	mov.w	r1, #4294967295
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	43d9      	mvns	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	4313      	orrs	r3, r2
         );
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3724      	adds	r7, #36	; 0x24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c54:	d301      	bcc.n	8000c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00f      	b.n	8000c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <SysTick_Config+0x40>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c62:	210f      	movs	r1, #15
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f7ff ff8e 	bl	8000b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <SysTick_Config+0x40>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <SysTick_Config+0x40>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	e000e010 	.word	0xe000e010

08000c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ff29 	bl	8000ae8 <__NVIC_SetPriorityGrouping>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cac:	f7ff ff40 	bl	8000b30 <__NVIC_GetPriorityGrouping>
 8000cb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	6978      	ldr	r0, [r7, #20]
 8000cb8:	f7ff ff90 	bl	8000bdc <NVIC_EncodePriority>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff5f 	bl	8000b88 <__NVIC_SetPriority>
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff33 	bl	8000b4c <__NVIC_EnableIRQ>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ffa4 	bl	8000c44 <SysTick_Config>
 8000cfc:	4603      	mov	r3, r0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e08d      	b.n	8000e36 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b47      	ldr	r3, [pc, #284]	; (8000e40 <HAL_DMA_Init+0x138>)
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d80f      	bhi.n	8000d46 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b45      	ldr	r3, [pc, #276]	; (8000e44 <HAL_DMA_Init+0x13c>)
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a45      	ldr	r2, [pc, #276]	; (8000e48 <HAL_DMA_Init+0x140>)
 8000d32:	fba2 2303 	umull	r2, r3, r2, r3
 8000d36:	091b      	lsrs	r3, r3, #4
 8000d38:	009a      	lsls	r2, r3, #2
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a42      	ldr	r2, [pc, #264]	; (8000e4c <HAL_DMA_Init+0x144>)
 8000d42:	641a      	str	r2, [r3, #64]	; 0x40
 8000d44:	e00e      	b.n	8000d64 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b40      	ldr	r3, [pc, #256]	; (8000e50 <HAL_DMA_Init+0x148>)
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a3d      	ldr	r2, [pc, #244]	; (8000e48 <HAL_DMA_Init+0x140>)
 8000d52:	fba2 2303 	umull	r2, r3, r2, r3
 8000d56:	091b      	lsrs	r3, r3, #4
 8000d58:	009a      	lsls	r2, r3, #2
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a3c      	ldr	r2, [pc, #240]	; (8000e54 <HAL_DMA_Init+0x14c>)
 8000d62:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2202      	movs	r2, #2
 8000d68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000da0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a1b      	ldr	r3, [r3, #32]
 8000da6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f000 fa76 	bl	80012a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dc4:	d102      	bne.n	8000dcc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000de0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d010      	beq.n	8000e0c <HAL_DMA_Init+0x104>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	d80c      	bhi.n	8000e0c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 fa96 	bl	8001324 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	e008      	b.n	8000e1e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2201      	movs	r2, #1
 8000e28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40020407 	.word	0x40020407
 8000e44:	bffdfff8 	.word	0xbffdfff8
 8000e48:	cccccccd 	.word	0xcccccccd
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	bffdfbf8 	.word	0xbffdfbf8
 8000e54:	40020400 	.word	0x40020400

08000e58 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
 8000e64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d101      	bne.n	8000e78 <HAL_DMA_Start_IT+0x20>
 8000e74:	2302      	movs	r3, #2
 8000e76:	e066      	b.n	8000f46 <HAL_DMA_Start_IT+0xee>
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d155      	bne.n	8000f38 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2202      	movs	r2, #2
 8000e90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2200      	movs	r2, #0
 8000e98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 0201 	bic.w	r2, r2, #1
 8000ea8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	68b9      	ldr	r1, [r7, #8]
 8000eb0:	68f8      	ldr	r0, [r7, #12]
 8000eb2:	f000 f9bb 	bl	800122c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d008      	beq.n	8000ed0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f042 020e 	orr.w	r2, r2, #14
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	e00f      	b.n	8000ef0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0204 	bic.w	r2, r2, #4
 8000ede:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 020a 	orr.w	r2, r2, #10
 8000eee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d007      	beq.n	8000f0e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f0c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d007      	beq.n	8000f26 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f24:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f042 0201 	orr.w	r2, r2, #1
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	e005      	b.n	8000f44 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f40:	2302      	movs	r3, #2
 8000f42:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b085      	sub	sp, #20
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d005      	beq.n	8000f72 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2204      	movs	r2, #4
 8000f6a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
 8000f70:	e037      	b.n	8000fe2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 020e 	bic.w	r2, r2, #14
 8000f80:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f90:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 0201 	bic.w	r2, r2, #1
 8000fa0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f003 021f 	and.w	r2, r3, #31
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	2101      	movs	r1, #1
 8000fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000fbe:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d00c      	beq.n	8000fe2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fd6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000fe0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d00d      	beq.n	8001034 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2204      	movs	r2, #4
 800101c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2201      	movs	r2, #1
 8001022:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	73fb      	strb	r3, [r7, #15]
 8001032:	e047      	b.n	80010c4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 020e 	bic.w	r2, r2, #14
 8001042:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 0201 	bic.w	r2, r2, #1
 8001052:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800105e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001062:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001068:	f003 021f 	and.w	r2, r3, #31
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	2101      	movs	r1, #1
 8001072:	fa01 f202 	lsl.w	r2, r1, r2
 8001076:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001080:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00c      	beq.n	80010a4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001094:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001098:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80010a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	4798      	blx	r3
    }
  }
  return status;
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b084      	sub	sp, #16
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f003 031f 	and.w	r3, r3, #31
 80010ee:	2204      	movs	r2, #4
 80010f0:	409a      	lsls	r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d026      	beq.n	8001148 <HAL_DMA_IRQHandler+0x7a>
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	2b00      	cmp	r3, #0
 8001102:	d021      	beq.n	8001148 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0320 	and.w	r3, r3, #32
 800110e:	2b00      	cmp	r3, #0
 8001110:	d107      	bne.n	8001122 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 0204 	bic.w	r2, r2, #4
 8001120:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f003 021f 	and.w	r2, r3, #31
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	2104      	movs	r1, #4
 8001130:	fa01 f202 	lsl.w	r2, r1, r2
 8001134:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	2b00      	cmp	r3, #0
 800113c:	d071      	beq.n	8001222 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001146:	e06c      	b.n	8001222 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114c:	f003 031f 	and.w	r3, r3, #31
 8001150:	2202      	movs	r2, #2
 8001152:	409a      	lsls	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4013      	ands	r3, r2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d02e      	beq.n	80011ba <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d029      	beq.n	80011ba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0320 	and.w	r3, r3, #32
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10b      	bne.n	800118c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 020a 	bic.w	r2, r2, #10
 8001182:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001190:	f003 021f 	and.w	r2, r3, #31
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	2102      	movs	r1, #2
 800119a:	fa01 f202 	lsl.w	r2, r1, r2
 800119e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d038      	beq.n	8001222 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80011b8:	e033      	b.n	8001222 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f003 031f 	and.w	r3, r3, #31
 80011c2:	2208      	movs	r2, #8
 80011c4:	409a      	lsls	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d02a      	beq.n	8001224 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d025      	beq.n	8001224 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 020e 	bic.w	r2, r2, #14
 80011e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ec:	f003 021f 	and.w	r2, r3, #31
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	2101      	movs	r1, #1
 80011f6:	fa01 f202 	lsl.w	r2, r1, r2
 80011fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001222:	bf00      	nop
 8001224:	bf00      	nop
}
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001242:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001248:	2b00      	cmp	r3, #0
 800124a:	d004      	beq.n	8001256 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001254:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f003 021f 	and.w	r2, r3, #31
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	2101      	movs	r1, #1
 8001264:	fa01 f202 	lsl.w	r2, r1, r2
 8001268:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2b10      	cmp	r3, #16
 8001278:	d108      	bne.n	800128c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800128a:	e007      	b.n	800129c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	60da      	str	r2, [r3, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d802      	bhi.n	80012c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	e001      	b.n	80012c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80012c4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	3b08      	subs	r3, #8
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80012d4:	fba2 2303 	umull	r2, r3, r2, r3
 80012d8:	091b      	lsrs	r3, r3, #4
 80012da:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	009a      	lsls	r2, r3, #2
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4413      	add	r3, r2
 80012e8:	461a      	mov	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80012f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	2201      	movs	r2, #1
 80012fc:	409a      	lsls	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001302:	bf00      	nop
 8001304:	371c      	adds	r7, #28
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40020407 	.word	0x40020407
 8001314:	40020800 	.word	0x40020800
 8001318:	40020820 	.word	0x40020820
 800131c:	cccccccd 	.word	0xcccccccd
 8001320:	40020880 	.word	0x40020880

08001324 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	461a      	mov	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a08      	ldr	r2, [pc, #32]	; (8001368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001346:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3b01      	subs	r3, #1
 800134c:	f003 031f 	and.w	r3, r3, #31
 8001350:	2201      	movs	r2, #1
 8001352:	409a      	lsls	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	1000823f 	.word	0x1000823f
 8001368:	40020940 	.word	0x40020940

0800136c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800137a:	e15a      	b.n	8001632 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	2101      	movs	r1, #1
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	fa01 f303 	lsl.w	r3, r1, r3
 8001388:	4013      	ands	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 814c 	beq.w	800162c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	2b01      	cmp	r3, #1
 800139e:	d005      	beq.n	80013ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d130      	bne.n	800140e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2203      	movs	r2, #3
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	68da      	ldr	r2, [r3, #12]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013e2:	2201      	movs	r2, #1
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	f003 0201 	and.w	r2, r3, #1
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	2b03      	cmp	r3, #3
 8001418:	d017      	beq.n	800144a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	2203      	movs	r2, #3
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d123      	bne.n	800149e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	08da      	lsrs	r2, r3, #3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3208      	adds	r2, #8
 800145e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001462:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	220f      	movs	r2, #15
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	691a      	ldr	r2, [r3, #16]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	08da      	lsrs	r2, r3, #3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3208      	adds	r2, #8
 8001498:	6939      	ldr	r1, [r7, #16]
 800149a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	2203      	movs	r2, #3
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 0203 	and.w	r2, r3, #3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 80a6 	beq.w	800162c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e0:	4b5b      	ldr	r3, [pc, #364]	; (8001650 <HAL_GPIO_Init+0x2e4>)
 80014e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e4:	4a5a      	ldr	r2, [pc, #360]	; (8001650 <HAL_GPIO_Init+0x2e4>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6613      	str	r3, [r2, #96]	; 0x60
 80014ec:	4b58      	ldr	r3, [pc, #352]	; (8001650 <HAL_GPIO_Init+0x2e4>)
 80014ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014f8:	4a56      	ldr	r2, [pc, #344]	; (8001654 <HAL_GPIO_Init+0x2e8>)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	089b      	lsrs	r3, r3, #2
 80014fe:	3302      	adds	r3, #2
 8001500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	220f      	movs	r2, #15
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001522:	d01f      	beq.n	8001564 <HAL_GPIO_Init+0x1f8>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a4c      	ldr	r2, [pc, #304]	; (8001658 <HAL_GPIO_Init+0x2ec>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d019      	beq.n	8001560 <HAL_GPIO_Init+0x1f4>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a4b      	ldr	r2, [pc, #300]	; (800165c <HAL_GPIO_Init+0x2f0>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d013      	beq.n	800155c <HAL_GPIO_Init+0x1f0>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a4a      	ldr	r2, [pc, #296]	; (8001660 <HAL_GPIO_Init+0x2f4>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d00d      	beq.n	8001558 <HAL_GPIO_Init+0x1ec>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a49      	ldr	r2, [pc, #292]	; (8001664 <HAL_GPIO_Init+0x2f8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d007      	beq.n	8001554 <HAL_GPIO_Init+0x1e8>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a48      	ldr	r2, [pc, #288]	; (8001668 <HAL_GPIO_Init+0x2fc>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d101      	bne.n	8001550 <HAL_GPIO_Init+0x1e4>
 800154c:	2305      	movs	r3, #5
 800154e:	e00a      	b.n	8001566 <HAL_GPIO_Init+0x1fa>
 8001550:	2306      	movs	r3, #6
 8001552:	e008      	b.n	8001566 <HAL_GPIO_Init+0x1fa>
 8001554:	2304      	movs	r3, #4
 8001556:	e006      	b.n	8001566 <HAL_GPIO_Init+0x1fa>
 8001558:	2303      	movs	r3, #3
 800155a:	e004      	b.n	8001566 <HAL_GPIO_Init+0x1fa>
 800155c:	2302      	movs	r3, #2
 800155e:	e002      	b.n	8001566 <HAL_GPIO_Init+0x1fa>
 8001560:	2301      	movs	r3, #1
 8001562:	e000      	b.n	8001566 <HAL_GPIO_Init+0x1fa>
 8001564:	2300      	movs	r3, #0
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	f002 0203 	and.w	r2, r2, #3
 800156c:	0092      	lsls	r2, r2, #2
 800156e:	4093      	lsls	r3, r2
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001576:	4937      	ldr	r1, [pc, #220]	; (8001654 <HAL_GPIO_Init+0x2e8>)
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	3302      	adds	r3, #2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001584:	4b39      	ldr	r3, [pc, #228]	; (800166c <HAL_GPIO_Init+0x300>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	43db      	mvns	r3, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015a8:	4a30      	ldr	r2, [pc, #192]	; (800166c <HAL_GPIO_Init+0x300>)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015ae:	4b2f      	ldr	r3, [pc, #188]	; (800166c <HAL_GPIO_Init+0x300>)
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015d2:	4a26      	ldr	r2, [pc, #152]	; (800166c <HAL_GPIO_Init+0x300>)
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80015d8:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_GPIO_Init+0x300>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015fc:	4a1b      	ldr	r2, [pc, #108]	; (800166c <HAL_GPIO_Init+0x300>)
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_GPIO_Init+0x300>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001626:	4a11      	ldr	r2, [pc, #68]	; (800166c <HAL_GPIO_Init+0x300>)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	3301      	adds	r3, #1
 8001630:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	fa22 f303 	lsr.w	r3, r2, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	f47f ae9d 	bne.w	800137c <HAL_GPIO_Init+0x10>
  }
}
 8001642:	bf00      	nop
 8001644:	bf00      	nop
 8001646:	371c      	adds	r7, #28
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40021000 	.word	0x40021000
 8001654:	40010000 	.word	0x40010000
 8001658:	48000400 	.word	0x48000400
 800165c:	48000800 	.word	0x48000800
 8001660:	48000c00 	.word	0x48000c00
 8001664:	48001000 	.word	0x48001000
 8001668:	48001400 	.word	0x48001400
 800166c:	40010400 	.word	0x40010400

08001670 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	b08b      	sub	sp, #44	; 0x2c
 8001674:	af06      	add	r7, sp, #24
 8001676:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e0d7      	b.n	8001832 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d106      	bne.n	800169c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f007 ffb8 	bl	800960c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2203      	movs	r2, #3
 80016a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f004 f8e6 	bl	800587a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	73fb      	strb	r3, [r7, #15]
 80016b2:	e04c      	b.n	800174e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	440b      	add	r3, r1
 80016c4:	3301      	adds	r3, #1
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	440b      	add	r3, r1
 80016da:	7bfa      	ldrb	r2, [r7, #15]
 80016dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80016de:	7bfa      	ldrb	r2, [r7, #15]
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	b298      	uxth	r0, r3
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	3336      	adds	r3, #54	; 0x36
 80016f2:	4602      	mov	r2, r0
 80016f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	3303      	adds	r3, #3
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800170c:	7bfa      	ldrb	r2, [r7, #15]
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	440b      	add	r3, r1
 800171a:	3338      	adds	r3, #56	; 0x38
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001720:	7bfa      	ldrb	r2, [r7, #15]
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	440b      	add	r3, r1
 800172e:	333c      	adds	r3, #60	; 0x3c
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001734:	7bfa      	ldrb	r2, [r7, #15]
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	440b      	add	r3, r1
 8001742:	3340      	adds	r3, #64	; 0x40
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	3301      	adds	r3, #1
 800174c:	73fb      	strb	r3, [r7, #15]
 800174e:	7bfa      	ldrb	r2, [r7, #15]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	429a      	cmp	r2, r3
 8001756:	d3ad      	bcc.n	80016b4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e044      	b.n	80017e8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800175e:	7bfa      	ldrb	r2, [r7, #15]
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	440b      	add	r3, r1
 800176c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001774:	7bfa      	ldrb	r2, [r7, #15]
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	440b      	add	r3, r1
 8001782:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001786:	7bfa      	ldrb	r2, [r7, #15]
 8001788:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800178a:	7bfa      	ldrb	r2, [r7, #15]
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	440b      	add	r3, r1
 8001798:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017a0:	7bfa      	ldrb	r2, [r7, #15]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	440b      	add	r3, r1
 80017ae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017b6:	7bfa      	ldrb	r2, [r7, #15]
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017cc:	7bfa      	ldrb	r2, [r7, #15]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	3301      	adds	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	7bfa      	ldrb	r2, [r7, #15]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d3b5      	bcc.n	800175e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	687e      	ldr	r6, [r7, #4]
 80017fa:	466d      	mov	r5, sp
 80017fc:	f106 0410 	add.w	r4, r6, #16
 8001800:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001802:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001804:	6823      	ldr	r3, [r4, #0]
 8001806:	602b      	str	r3, [r5, #0]
 8001808:	1d33      	adds	r3, r6, #4
 800180a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800180c:	6838      	ldr	r0, [r7, #0]
 800180e:	f004 f84f 	bl	80058b0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d102      	bne.n	8001830 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f001 fc11 	bl	8003052 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800183a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_PCD_Start+0x16>
 800184c:	2302      	movs	r3, #2
 800184e:	e012      	b.n	8001876 <HAL_PCD_Start+0x3c>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f003 fff5 	bl	800584c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f006 fa0e 	bl	8007c88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b084      	sub	sp, #16
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f006 fa13 	bl	8007cb6 <USB_ReadInterrupts>
 8001890:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 fb0e 	bl	8001ebe <PCD_EP_ISR_Handler>

    return;
 80018a2:	e110      	b.n	8001ac6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d013      	beq.n	80018d6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018c0:	b292      	uxth	r2, r2
 80018c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f007 ff31 	bl	800972e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80018cc:	2100      	movs	r1, #0
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f8fc 	bl	8001acc <HAL_PCD_SetAddress>

    return;
 80018d4:	e0f7      	b.n	8001ac6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00c      	beq.n	80018fa <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018f2:	b292      	uxth	r2, r2
 80018f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80018f8:	e0e5      	b.n	8001ac6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00c      	beq.n	800191e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800190c:	b29a      	uxth	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001916:	b292      	uxth	r2, r2
 8001918:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800191c:	e0d3      	b.n	8001ac6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d034      	beq.n	8001992 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001930:	b29a      	uxth	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0204 	bic.w	r2, r2, #4
 800193a:	b292      	uxth	r2, r2
 800193c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001948:	b29a      	uxth	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0208 	bic.w	r2, r2, #8
 8001952:	b292      	uxth	r2, r2
 8001954:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800195e:	2b01      	cmp	r3, #1
 8001960:	d107      	bne.n	8001972 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800196a:	2100      	movs	r1, #0
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f008 f8ad 	bl	8009acc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f007 ff14 	bl	80097a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001980:	b29a      	uxth	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800198a:	b292      	uxth	r2, r2
 800198c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001990:	e099      	b.n	8001ac6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001998:	2b00      	cmp	r3, #0
 800199a:	d027      	beq.n	80019ec <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0208 	orr.w	r2, r2, #8
 80019ae:	b292      	uxth	r2, r2
 80019b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019bc:	b29a      	uxth	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019c6:	b292      	uxth	r2, r2
 80019c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0204 	orr.w	r2, r2, #4
 80019de:	b292      	uxth	r2, r2
 80019e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f007 fec1 	bl	800976c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80019ea:	e06c      	b.n	8001ac6 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d040      	beq.n	8001a78 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a08:	b292      	uxth	r2, r2
 8001a0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d12b      	bne.n	8001a70 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0204 	orr.w	r2, r2, #4
 8001a2a:	b292      	uxth	r2, r2
 8001a2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0208 	orr.w	r2, r2, #8
 8001a42:	b292      	uxth	r2, r2
 8001a44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	089b      	lsrs	r3, r3, #2
 8001a5c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001a66:	2101      	movs	r1, #1
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f008 f82f 	bl	8009acc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001a6e:	e02a      	b.n	8001ac6 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f007 fe7b 	bl	800976c <HAL_PCD_SuspendCallback>
    return;
 8001a76:	e026      	b.n	8001ac6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00f      	beq.n	8001aa2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a94:	b292      	uxth	r2, r2
 8001a96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f007 fe39 	bl	8009712 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001aa0:	e011      	b.n	8001ac6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00c      	beq.n	8001ac6 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001abe:	b292      	uxth	r2, r2
 8001ac0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ac4:	bf00      	nop
  }
}
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_PCD_SetAddress+0x1a>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e013      	b.n	8001b0e <HAL_PCD_SetAddress+0x42>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	78fa      	ldrb	r2, [r7, #3]
 8001af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	78fa      	ldrb	r2, [r7, #3]
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f006 f8ae 	bl	8007c60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b084      	sub	sp, #16
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	4608      	mov	r0, r1
 8001b20:	4611      	mov	r1, r2
 8001b22:	461a      	mov	r2, r3
 8001b24:	4603      	mov	r3, r0
 8001b26:	70fb      	strb	r3, [r7, #3]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	803b      	strh	r3, [r7, #0]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	da0e      	bge.n	8001b5a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2201      	movs	r2, #1
 8001b56:	705a      	strb	r2, [r3, #1]
 8001b58:	e00e      	b.n	8001b78 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b5a:	78fb      	ldrb	r3, [r7, #3]
 8001b5c:	f003 0207 	and.w	r2, r3, #7
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	4413      	add	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b84:	883a      	ldrh	r2, [r7, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	78ba      	ldrb	r2, [r7, #2]
 8001b8e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	785b      	ldrb	r3, [r3, #1]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d004      	beq.n	8001ba2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ba2:	78bb      	ldrb	r3, [r7, #2]
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d102      	bne.n	8001bae <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_PCD_EP_Open+0xa6>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e00e      	b.n	8001bda <HAL_PCD_EP_Open+0xc4>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68f9      	ldr	r1, [r7, #12]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 fe92 	bl	80058f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001bd8:	7afb      	ldrb	r3, [r7, #11]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	da0e      	bge.n	8001c14 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	705a      	strb	r2, [r3, #1]
 8001c12:	e00e      	b.n	8001c32 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	f003 0207 	and.w	r2, r3, #7
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_PCD_EP_Close+0x6a>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e00e      	b.n	8001c6a <HAL_PCD_EP_Close+0x88>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68f9      	ldr	r1, [r7, #12]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f004 f9de 	bl	800601c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c82:	7afb      	ldrb	r3, [r7, #11]
 8001c84:	f003 0207 	and.w	r2, r3, #7
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cb2:	7afb      	ldrb	r3, [r7, #11]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cbe:	7afb      	ldrb	r3, [r7, #11]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d106      	bne.n	8001cd6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6979      	ldr	r1, [r7, #20]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f004 fb91 	bl	80063f6 <USB_EPStartXfer>
 8001cd4:	e005      	b.n	8001ce2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6979      	ldr	r1, [r7, #20]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f004 fb8a 	bl	80063f6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cfc:	7afb      	ldrb	r3, [r7, #11]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2201      	movs	r2, #1
 8001d36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d38:	7afb      	ldrb	r3, [r7, #11]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d44:	7afb      	ldrb	r3, [r7, #11]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6979      	ldr	r1, [r7, #20]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f004 fb4e 	bl	80063f6 <USB_EPStartXfer>
 8001d5a:	e005      	b.n	8001d68 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6979      	ldr	r1, [r7, #20]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f004 fb47 	bl	80063f6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	f003 0207 	and.w	r2, r3, #7
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d901      	bls.n	8001d90 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e03e      	b.n	8001e0e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	da0e      	bge.n	8001db6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	4413      	add	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2201      	movs	r2, #1
 8001db2:	705a      	strb	r2, [r3, #1]
 8001db4:	e00c      	b.n	8001dd0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001db6:	78fa      	ldrb	r2, [r7, #3]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_PCD_EP_SetStall+0x7e>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e00e      	b.n	8001e0e <HAL_PCD_EP_SetStall+0x9c>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68f9      	ldr	r1, [r7, #12]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f005 fe2f 	bl	8007a62 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	f003 020f 	and.w	r2, r3, #15
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d901      	bls.n	8001e34 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e040      	b.n	8001eb6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	da0e      	bge.n	8001e5a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	4413      	add	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	705a      	strb	r2, [r3, #1]
 8001e58:	e00e      	b.n	8001e78 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	f003 0207 	and.w	r2, r3, #7
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_PCD_EP_ClrStall+0x82>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e00e      	b.n	8001eb6 <HAL_PCD_EP_ClrStall+0xa0>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68f9      	ldr	r1, [r7, #12]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f005 fe2c 	bl	8007b04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b096      	sub	sp, #88	; 0x58
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ec6:	e39c      	b.n	8002602 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ed4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001ee2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f040 815e 	bne.w	80021a8 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001eec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d150      	bne.n	8001f9a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f08:	81fb      	strh	r3, [r7, #14]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	89fb      	ldrh	r3, [r7, #14]
 8001f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3328      	adds	r3, #40	; 0x28
 8001f20:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f48:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	441a      	add	r2, r3
 8001f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f56:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f58:	2100      	movs	r1, #0
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f007 fbbf 	bl	80096de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 834a 	beq.w	8002602 <PCD_EP_ISR_Handler+0x744>
 8001f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f040 8345 	bne.w	8002602 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	b292      	uxth	r2, r2
 8001f8c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f98:	e333      	b.n	8002602 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001fac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d032      	beq.n	800201e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4413      	add	r3, r2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fde:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ff0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	f005 feb1 	bl	8007d5a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002004:	4013      	ands	r3, r2
 8002006:	823b      	strh	r3, [r7, #16]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	8a3a      	ldrh	r2, [r7, #16]
 800200e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002012:	b292      	uxth	r2, r2
 8002014:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f007 fb34 	bl	8009684 <HAL_PCD_SetupStageCallback>
 800201c:	e2f1      	b.n	8002602 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800201e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002022:	2b00      	cmp	r3, #0
 8002024:	f280 82ed 	bge.w	8002602 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	b29a      	uxth	r2, r3
 8002030:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002034:	4013      	ands	r3, r2
 8002036:	83fb      	strh	r3, [r7, #30]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	8bfa      	ldrh	r2, [r7, #30]
 800203e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002042:	b292      	uxth	r2, r2
 8002044:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800204e:	b29b      	uxth	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	4413      	add	r3, r2
 8002060:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800206a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800206c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800206e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d019      	beq.n	80020aa <PCD_EP_ISR_Handler+0x1ec>
 8002076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d015      	beq.n	80020aa <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002084:	6959      	ldr	r1, [r3, #20]
 8002086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002088:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800208a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800208c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800208e:	b29b      	uxth	r3, r3
 8002090:	f005 fe63 	bl	8007d5a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	441a      	add	r2, r3
 800209e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80020a2:	2100      	movs	r1, #0
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f007 faff 	bl	80096a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f040 82a3 	bne.w	8002602 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	4413      	add	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	2b3e      	cmp	r3, #62	; 0x3e
 80020e2:	d918      	bls.n	8002116 <PCD_EP_ISR_Handler+0x258>
 80020e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	095b      	lsrs	r3, r3, #5
 80020ea:	647b      	str	r3, [r7, #68]	; 0x44
 80020ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d102      	bne.n	80020fe <PCD_EP_ISR_Handler+0x240>
 80020f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020fa:	3b01      	subs	r3, #1
 80020fc:	647b      	str	r3, [r7, #68]	; 0x44
 80020fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002100:	b29b      	uxth	r3, r3
 8002102:	029b      	lsls	r3, r3, #10
 8002104:	b29b      	uxth	r3, r3
 8002106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800210a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800210e:	b29a      	uxth	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	801a      	strh	r2, [r3, #0]
 8002114:	e029      	b.n	800216a <PCD_EP_ISR_Handler+0x2ac>
 8002116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d112      	bne.n	8002144 <PCD_EP_ISR_Handler+0x286>
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002128:	b29a      	uxth	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	801a      	strh	r2, [r3, #0]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800213c:	b29a      	uxth	r2, r3
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	801a      	strh	r2, [r3, #0]
 8002142:	e012      	b.n	800216a <PCD_EP_ISR_Handler+0x2ac>
 8002144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	085b      	lsrs	r3, r3, #1
 800214a:	647b      	str	r3, [r7, #68]	; 0x44
 800214c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <PCD_EP_ISR_Handler+0x2a0>
 8002158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800215a:	3301      	adds	r3, #1
 800215c:	647b      	str	r3, [r7, #68]	; 0x44
 800215e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002160:	b29b      	uxth	r3, r3
 8002162:	029b      	lsls	r3, r3, #10
 8002164:	b29a      	uxth	r2, r3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	b29b      	uxth	r3, r3
 8002172:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800217a:	827b      	strh	r3, [r7, #18]
 800217c:	8a7b      	ldrh	r3, [r7, #18]
 800217e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002182:	827b      	strh	r3, [r7, #18]
 8002184:	8a7b      	ldrh	r3, [r7, #18]
 8002186:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800218a:	827b      	strh	r3, [r7, #18]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	8a7b      	ldrh	r3, [r7, #18]
 8002192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800219a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800219e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	8013      	strh	r3, [r2, #0]
 80021a6:	e22c      	b.n	8002602 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021bc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f280 80f6 	bge.w	80023b2 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021dc:	4013      	ands	r3, r2
 80021de:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80021f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021f8:	b292      	uxth	r2, r2
 80021fa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80021fc:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	4413      	add	r3, r2
 8002210:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002214:	7b1b      	ldrb	r3, [r3, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d123      	bne.n	8002262 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002222:	b29b      	uxth	r3, r3
 8002224:	461a      	mov	r2, r3
 8002226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4413      	add	r3, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	4413      	add	r3, r2
 8002234:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800223e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002242:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 808e 	beq.w	8002368 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002252:	6959      	ldr	r1, [r3, #20]
 8002254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002256:	88da      	ldrh	r2, [r3, #6]
 8002258:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800225c:	f005 fd7d 	bl	8007d5a <USB_ReadPMA>
 8002260:	e082      	b.n	8002368 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002264:	78db      	ldrb	r3, [r3, #3]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d10a      	bne.n	8002280 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800226a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800226e:	461a      	mov	r2, r3
 8002270:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f9d3 	bl	800261e <HAL_PCD_EP_DB_Receive>
 8002278:	4603      	mov	r3, r0
 800227a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800227e:	e073      	b.n	8002368 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	b29b      	uxth	r3, r3
 8002292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800229a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	441a      	add	r2, r3
 80022ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80022b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d022      	beq.n	8002324 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002302:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002306:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800230a:	2b00      	cmp	r3, #0
 800230c:	d02c      	beq.n	8002368 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002314:	6959      	ldr	r1, [r3, #20]
 8002316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002318:	891a      	ldrh	r2, [r3, #8]
 800231a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800231e:	f005 fd1c 	bl	8007d5a <USB_ReadPMA>
 8002322:	e021      	b.n	8002368 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800232c:	b29b      	uxth	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4413      	add	r3, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	4413      	add	r3, r2
 800233e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002348:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800234c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002350:	2b00      	cmp	r3, #0
 8002352:	d009      	beq.n	8002368 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800235a:	6959      	ldr	r1, [r3, #20]
 800235c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800235e:	895a      	ldrh	r2, [r3, #10]
 8002360:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002364:	f005 fcf9 	bl	8007d5a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800236a:	69da      	ldr	r2, [r3, #28]
 800236c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002370:	441a      	add	r2, r3
 8002372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002374:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800237e:	441a      	add	r2, r3
 8002380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002382:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <PCD_EP_ISR_Handler+0x4da>
 800238c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	429a      	cmp	r2, r3
 8002396:	d206      	bcs.n	80023a6 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	4619      	mov	r1, r3
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f007 f982 	bl	80096a8 <HAL_PCD_DataOutStageCallback>
 80023a4:	e005      	b.n	80023b2 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80023ac:	4618      	mov	r0, r3
 80023ae:	f004 f822 	bl	80063f6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80023b2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80023b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 8121 	beq.w	8002602 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 80023c0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	441a      	add	r2, r3
 8002400:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800240c:	b29b      	uxth	r3, r3
 800240e:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002412:	78db      	ldrb	r3, [r3, #3]
 8002414:	2b02      	cmp	r3, #2
 8002416:	f000 80a2 	beq.w	800255e <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800241a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002422:	7b1b      	ldrb	r3, [r3, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 8093 	beq.w	8002550 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800242a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800242e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d046      	beq.n	80024c4 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002438:	785b      	ldrb	r3, [r3, #1]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d126      	bne.n	800248c <PCD_EP_ISR_Handler+0x5ce>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800244c:	b29b      	uxth	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	4413      	add	r3, r2
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
 8002456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	00da      	lsls	r2, r3, #3
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	4413      	add	r3, r2
 8002460:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002464:	623b      	str	r3, [r7, #32]
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	b29b      	uxth	r3, r3
 800246c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002470:	b29a      	uxth	r2, r3
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	801a      	strh	r2, [r3, #0]
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002484:	b29a      	uxth	r2, r3
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	801a      	strh	r2, [r3, #0]
 800248a:	e061      	b.n	8002550 <PCD_EP_ISR_Handler+0x692>
 800248c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800248e:	785b      	ldrb	r3, [r3, #1]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d15d      	bne.n	8002550 <PCD_EP_ISR_Handler+0x692>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a8:	4413      	add	r3, r2
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	00da      	lsls	r2, r3, #3
 80024b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b4:	4413      	add	r3, r2
 80024b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80024bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024be:	2200      	movs	r2, #0
 80024c0:	801a      	strh	r2, [r3, #0]
 80024c2:	e045      	b.n	8002550 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024cc:	785b      	ldrb	r3, [r3, #1]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d126      	bne.n	8002520 <PCD_EP_ISR_Handler+0x662>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	637b      	str	r3, [r7, #52]	; 0x34
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e6:	4413      	add	r3, r2
 80024e8:	637b      	str	r3, [r7, #52]	; 0x34
 80024ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	00da      	lsls	r2, r3, #3
 80024f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f2:	4413      	add	r3, r2
 80024f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024f8:	633b      	str	r3, [r7, #48]	; 0x30
 80024fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002504:	b29a      	uxth	r2, r3
 8002506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002508:	801a      	strh	r2, [r3, #0]
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002518:	b29a      	uxth	r2, r3
 800251a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251c:	801a      	strh	r2, [r3, #0]
 800251e:	e017      	b.n	8002550 <PCD_EP_ISR_Handler+0x692>
 8002520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002522:	785b      	ldrb	r3, [r3, #1]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d113      	bne.n	8002550 <PCD_EP_ISR_Handler+0x692>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002530:	b29b      	uxth	r3, r3
 8002532:	461a      	mov	r2, r3
 8002534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002536:	4413      	add	r3, r2
 8002538:	63fb      	str	r3, [r7, #60]	; 0x3c
 800253a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	00da      	lsls	r2, r3, #3
 8002540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002542:	4413      	add	r3, r2
 8002544:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002548:	63bb      	str	r3, [r7, #56]	; 0x38
 800254a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254c:	2200      	movs	r2, #0
 800254e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	4619      	mov	r1, r3
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f007 f8c1 	bl	80096de <HAL_PCD_DataInStageCallback>
 800255c:	e051      	b.n	8002602 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800255e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d144      	bne.n	80025f4 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002572:	b29b      	uxth	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	4413      	add	r3, r2
 8002584:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800258e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800259a:	429a      	cmp	r2, r3
 800259c:	d907      	bls.n	80025ae <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800259e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a0:	699a      	ldr	r2, [r3, #24]
 80025a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80025a6:	1ad2      	subs	r2, r2, r3
 80025a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025aa:	619a      	str	r2, [r3, #24]
 80025ac:	e002      	b.n	80025b4 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80025ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80025b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d106      	bne.n	80025ca <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	4619      	mov	r1, r3
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f007 f88b 	bl	80096de <HAL_PCD_DataInStageCallback>
 80025c8:	e01b      	b.n	8002602 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80025ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025cc:	695a      	ldr	r2, [r3, #20]
 80025ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80025d2:	441a      	add	r2, r3
 80025d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80025d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025da:	69da      	ldr	r2, [r3, #28]
 80025dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80025e0:	441a      	add	r2, r3
 80025e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80025ec:	4618      	mov	r0, r3
 80025ee:	f003 ff02 	bl	80063f6 <USB_EPStartXfer>
 80025f2:	e006      	b.n	8002602 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80025f4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80025f8:	461a      	mov	r2, r3
 80025fa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f917 	bl	8002830 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800260a:	b29b      	uxth	r3, r3
 800260c:	b21b      	sxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	f6ff ac5a 	blt.w	8001ec8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3758      	adds	r7, #88	; 0x58
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b088      	sub	sp, #32
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	4613      	mov	r3, r2
 800262a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d07c      	beq.n	8002730 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800263e:	b29b      	uxth	r3, r3
 8002640:	461a      	mov	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4413      	add	r3, r2
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	4413      	add	r3, r2
 8002650:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800265a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	699a      	ldr	r2, [r3, #24]
 8002660:	8b7b      	ldrh	r3, [r7, #26]
 8002662:	429a      	cmp	r2, r3
 8002664:	d306      	bcc.n	8002674 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	699a      	ldr	r2, [r3, #24]
 800266a:	8b7b      	ldrh	r3, [r7, #26]
 800266c:	1ad2      	subs	r2, r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	619a      	str	r2, [r3, #24]
 8002672:	e002      	b.n	800267a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2200      	movs	r2, #0
 8002678:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d123      	bne.n	80026ca <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269c:	833b      	strh	r3, [r7, #24]
 800269e:	8b3b      	ldrh	r3, [r7, #24]
 80026a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026a4:	833b      	strh	r3, [r7, #24]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	441a      	add	r2, r3
 80026b4:	8b3b      	ldrh	r3, [r7, #24]
 80026b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026ca:	88fb      	ldrh	r3, [r7, #6]
 80026cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01f      	beq.n	8002714 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ee:	82fb      	strh	r3, [r7, #22]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	441a      	add	r2, r3
 80026fe:	8afb      	ldrh	r3, [r7, #22]
 8002700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800270c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002710:	b29b      	uxth	r3, r3
 8002712:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002714:	8b7b      	ldrh	r3, [r7, #26]
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8085 	beq.w	8002826 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	6959      	ldr	r1, [r3, #20]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	891a      	ldrh	r2, [r3, #8]
 8002728:	8b7b      	ldrh	r3, [r7, #26]
 800272a:	f005 fb16 	bl	8007d5a <USB_ReadPMA>
 800272e:	e07a      	b.n	8002826 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002738:	b29b      	uxth	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	4413      	add	r3, r2
 800274a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002754:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	699a      	ldr	r2, [r3, #24]
 800275a:	8b7b      	ldrh	r3, [r7, #26]
 800275c:	429a      	cmp	r2, r3
 800275e:	d306      	bcc.n	800276e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	699a      	ldr	r2, [r3, #24]
 8002764:	8b7b      	ldrh	r3, [r7, #26]
 8002766:	1ad2      	subs	r2, r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	619a      	str	r2, [r3, #24]
 800276c:	e002      	b.n	8002774 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2200      	movs	r2, #0
 8002772:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d123      	bne.n	80027c4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	b29b      	uxth	r3, r3
 800278e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002796:	83fb      	strh	r3, [r7, #30]
 8002798:	8bfb      	ldrh	r3, [r7, #30]
 800279a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800279e:	83fb      	strh	r3, [r7, #30]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	441a      	add	r2, r3
 80027ae:	8bfb      	ldrh	r3, [r7, #30]
 80027b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d11f      	bne.n	800280e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e8:	83bb      	strh	r3, [r7, #28]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	441a      	add	r2, r3
 80027f8:	8bbb      	ldrh	r3, [r7, #28]
 80027fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002806:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800280a:	b29b      	uxth	r3, r3
 800280c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800280e:	8b7b      	ldrh	r3, [r7, #26]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	6959      	ldr	r1, [r3, #20]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	895a      	ldrh	r2, [r3, #10]
 8002820:	8b7b      	ldrh	r3, [r7, #26]
 8002822:	f005 fa9a 	bl	8007d5a <USB_ReadPMA>
    }
  }

  return count;
 8002826:	8b7b      	ldrh	r3, [r7, #26]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3720      	adds	r7, #32
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b0a2      	sub	sp, #136	; 0x88
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	4613      	mov	r3, r2
 800283c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 81c5 	beq.w	8002bd4 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002852:	b29b      	uxth	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	4413      	add	r3, r2
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	4413      	add	r3, r2
 8002864:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800286e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800287a:	429a      	cmp	r2, r3
 800287c:	d907      	bls.n	800288e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002886:	1ad2      	subs	r2, r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	619a      	str	r2, [r3, #24]
 800288c:	e002      	b.n	8002894 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2200      	movs	r2, #0
 8002892:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	2b00      	cmp	r3, #0
 800289a:	f040 80b9 	bne.w	8002a10 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	785b      	ldrb	r3, [r3, #1]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d126      	bne.n	80028f4 <HAL_PCD_EP_DB_Transmit+0xc4>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ba:	4413      	add	r3, r2
 80028bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	00da      	lsls	r2, r3, #3
 80028c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c6:	4413      	add	r3, r2
 80028c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028d8:	b29a      	uxth	r2, r3
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	801a      	strh	r2, [r3, #0]
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	801a      	strh	r2, [r3, #0]
 80028f2:	e01a      	b.n	800292a <HAL_PCD_EP_DB_Transmit+0xfa>
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	785b      	ldrb	r3, [r3, #1]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d116      	bne.n	800292a <HAL_PCD_EP_DB_Transmit+0xfa>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	633b      	str	r3, [r7, #48]	; 0x30
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800290a:	b29b      	uxth	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002910:	4413      	add	r3, r2
 8002912:	633b      	str	r3, [r7, #48]	; 0x30
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	00da      	lsls	r2, r3, #3
 800291a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291c:	4413      	add	r3, r2
 800291e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002926:	2200      	movs	r2, #0
 8002928:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	623b      	str	r3, [r7, #32]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	785b      	ldrb	r3, [r3, #1]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d126      	bne.n	8002986 <HAL_PCD_EP_DB_Transmit+0x156>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002946:	b29b      	uxth	r3, r3
 8002948:	461a      	mov	r2, r3
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	4413      	add	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	00da      	lsls	r2, r3, #3
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	4413      	add	r3, r2
 800295a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	b29b      	uxth	r3, r3
 8002966:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800296a:	b29a      	uxth	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	801a      	strh	r2, [r3, #0]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	b29b      	uxth	r3, r3
 8002976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800297a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800297e:	b29a      	uxth	r2, r3
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	801a      	strh	r2, [r3, #0]
 8002984:	e017      	b.n	80029b6 <HAL_PCD_EP_DB_Transmit+0x186>
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	785b      	ldrb	r3, [r3, #1]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d113      	bne.n	80029b6 <HAL_PCD_EP_DB_Transmit+0x186>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002996:	b29b      	uxth	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	4413      	add	r3, r2
 800299e:	623b      	str	r3, [r7, #32]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	00da      	lsls	r2, r3, #3
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	4413      	add	r3, r2
 80029aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029ae:	61fb      	str	r3, [r7, #28]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	2200      	movs	r2, #0
 80029b4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	4619      	mov	r1, r3
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f006 fe8e 	bl	80096de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 82d2 	beq.w	8002f72 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e8:	827b      	strh	r3, [r7, #18]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	441a      	add	r2, r3
 80029f8:	8a7b      	ldrh	r3, [r7, #18]
 80029fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	8013      	strh	r3, [r2, #0]
 8002a0e:	e2b0      	b.n	8002f72 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d021      	beq.n	8002a5e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a34:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	441a      	add	r2, r3
 8002a46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	f040 8284 	bne.w	8002f72 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a72:	441a      	add	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	69da      	ldr	r2, [r3, #28]
 8002a7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a80:	441a      	add	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	6a1a      	ldr	r2, [r3, #32]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d309      	bcc.n	8002aa6 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	6a1a      	ldr	r2, [r3, #32]
 8002a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a9e:	1ad2      	subs	r2, r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	621a      	str	r2, [r3, #32]
 8002aa4:	e015      	b.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d107      	bne.n	8002abe <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002aae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ab2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002abc:	e009      	b.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	785b      	ldrb	r3, [r3, #1]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d155      	bne.n	8002b86 <HAL_PCD_EP_DB_Transmit+0x356>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	461a      	mov	r2, r3
 8002aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aee:	4413      	add	r3, r2
 8002af0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	00da      	lsls	r2, r3, #3
 8002af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afa:	4413      	add	r3, r2
 8002afc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
 8002b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b04:	2b3e      	cmp	r3, #62	; 0x3e
 8002b06:	d916      	bls.n	8002b36 <HAL_PCD_EP_DB_Transmit+0x306>
 8002b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b10:	f003 031f 	and.w	r3, r3, #31
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d102      	bne.n	8002b1e <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	029b      	lsls	r3, r3, #10
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b32:	801a      	strh	r2, [r3, #0]
 8002b34:	e043      	b.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x38e>
 8002b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d112      	bne.n	8002b62 <HAL_PCD_EP_DB_Transmit+0x332>
 8002b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4a:	801a      	strh	r2, [r3, #0]
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5e:	801a      	strh	r2, [r3, #0]
 8002b60:	e02d      	b.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x38e>
 8002b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b64:	085b      	lsrs	r3, r3, #1
 8002b66:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <HAL_PCD_EP_DB_Transmit+0x348>
 8002b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b74:	3301      	adds	r3, #1
 8002b76:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	029b      	lsls	r3, r3, #10
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b82:	801a      	strh	r2, [r3, #0]
 8002b84:	e01b      	b.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x38e>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	785b      	ldrb	r3, [r3, #1]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d117      	bne.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x38e>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	643b      	str	r3, [r7, #64]	; 0x40
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ba2:	4413      	add	r3, r2
 8002ba4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	00da      	lsls	r2, r3, #3
 8002bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bae:	4413      	add	r3, r2
 8002bb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bbc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	6959      	ldr	r1, [r3, #20]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	891a      	ldrh	r2, [r3, #8]
 8002bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	f005 f882 	bl	8007cd6 <USB_WritePMA>
 8002bd2:	e1ce      	b.n	8002f72 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	4413      	add	r3, r2
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	6812      	ldr	r2, [r2, #0]
 8002bec:	4413      	add	r3, r2
 8002bee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bf8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	699a      	ldr	r2, [r3, #24]
 8002c00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d307      	bcc.n	8002c18 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	699a      	ldr	r2, [r3, #24]
 8002c0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c10:	1ad2      	subs	r2, r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	619a      	str	r2, [r3, #24]
 8002c16:	e002      	b.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f040 80c4 	bne.w	8002db0 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	785b      	ldrb	r3, [r3, #1]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d126      	bne.n	8002c7e <HAL_PCD_EP_DB_Transmit+0x44e>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c44:	4413      	add	r3, r2
 8002c46:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	00da      	lsls	r2, r3, #3
 8002c4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c50:	4413      	add	r3, r2
 8002c52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c56:	667b      	str	r3, [r7, #100]	; 0x64
 8002c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c66:	801a      	strh	r2, [r3, #0]
 8002c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c7a:	801a      	strh	r2, [r3, #0]
 8002c7c:	e01a      	b.n	8002cb4 <HAL_PCD_EP_DB_Transmit+0x484>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	785b      	ldrb	r3, [r3, #1]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d116      	bne.n	8002cb4 <HAL_PCD_EP_DB_Transmit+0x484>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	673b      	str	r3, [r7, #112]	; 0x70
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c9a:	4413      	add	r3, r2
 8002c9c:	673b      	str	r3, [r7, #112]	; 0x70
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	00da      	lsls	r2, r3, #3
 8002ca4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	785b      	ldrb	r3, [r3, #1]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d12f      	bne.n	8002d22 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cda:	4413      	add	r3, r2
 8002cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	00da      	lsls	r2, r3, #3
 8002ce6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cea:	4413      	add	r3, r2
 8002cec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d06:	801a      	strh	r2, [r3, #0]
 8002d08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d1e:	801a      	strh	r2, [r3, #0]
 8002d20:	e017      	b.n	8002d52 <HAL_PCD_EP_DB_Transmit+0x522>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	785b      	ldrb	r3, [r3, #1]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d113      	bne.n	8002d52 <HAL_PCD_EP_DB_Transmit+0x522>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	461a      	mov	r2, r3
 8002d36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d38:	4413      	add	r3, r2
 8002d3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	00da      	lsls	r2, r3, #3
 8002d42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d44:	4413      	add	r3, r2
 8002d46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d4e:	2200      	movs	r2, #0
 8002d50:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	4619      	mov	r1, r3
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f006 fcc0 	bl	80096de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f040 8104 	bne.w	8002f72 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d84:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	441a      	add	r2, r3
 8002d96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002da2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	8013      	strh	r3, [r2, #0]
 8002dae:	e0e0      	b.n	8002f72 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d121      	bne.n	8002dfe <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	441a      	add	r2, r3
 8002de6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002df2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	f040 80b4 	bne.w	8002f72 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e12:	441a      	add	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e20:	441a      	add	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	6a1a      	ldr	r2, [r3, #32]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d309      	bcc.n	8002e46 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	6a1a      	ldr	r2, [r3, #32]
 8002e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e3e:	1ad2      	subs	r2, r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	621a      	str	r2, [r3, #32]
 8002e44:	e015      	b.n	8002e72 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d107      	bne.n	8002e5e <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8002e4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e5c:	e009      	b.n	8002e72 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2200      	movs	r2, #0
 8002e68:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	663b      	str	r3, [r7, #96]	; 0x60
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	785b      	ldrb	r3, [r3, #1]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d155      	bne.n	8002f2c <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e94:	4413      	add	r3, r2
 8002e96:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	00da      	lsls	r2, r3, #3
 8002e9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ea6:	657b      	str	r3, [r7, #84]	; 0x54
 8002ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eaa:	2b3e      	cmp	r3, #62	; 0x3e
 8002eac:	d916      	bls.n	8002edc <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb0:	095b      	lsrs	r3, r3, #5
 8002eb2:	677b      	str	r3, [r7, #116]	; 0x74
 8002eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d102      	bne.n	8002ec4 <HAL_PCD_EP_DB_Transmit+0x694>
 8002ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	677b      	str	r3, [r7, #116]	; 0x74
 8002ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	029b      	lsls	r3, r3, #10
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ed0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ed8:	801a      	strh	r2, [r3, #0]
 8002eda:	e040      	b.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x72e>
 8002edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d112      	bne.n	8002f08 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef0:	801a      	strh	r2, [r3, #0]
 8002ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f04:	801a      	strh	r2, [r3, #0]
 8002f06:	e02a      	b.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x72e>
 8002f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f0a:	085b      	lsrs	r3, r3, #1
 8002f0c:	677b      	str	r3, [r7, #116]	; 0x74
 8002f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <HAL_PCD_EP_DB_Transmit+0x6ee>
 8002f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	677b      	str	r3, [r7, #116]	; 0x74
 8002f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	029b      	lsls	r3, r3, #10
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f28:	801a      	strh	r2, [r3, #0]
 8002f2a:	e018      	b.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x72e>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	785b      	ldrb	r3, [r3, #1]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d114      	bne.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x72e>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f42:	4413      	add	r3, r2
 8002f44:	663b      	str	r3, [r7, #96]	; 0x60
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	00da      	lsls	r2, r3, #3
 8002f4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f4e:	4413      	add	r3, r2
 8002f50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f5c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	6959      	ldr	r1, [r3, #20]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	895a      	ldrh	r2, [r3, #10]
 8002f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	f004 feb2 	bl	8007cd6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f8c:	823b      	strh	r3, [r7, #16]
 8002f8e:	8a3b      	ldrh	r3, [r7, #16]
 8002f90:	f083 0310 	eor.w	r3, r3, #16
 8002f94:	823b      	strh	r3, [r7, #16]
 8002f96:	8a3b      	ldrh	r3, [r7, #16]
 8002f98:	f083 0320 	eor.w	r3, r3, #32
 8002f9c:	823b      	strh	r3, [r7, #16]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	441a      	add	r2, r3
 8002fac:	8a3b      	ldrh	r3, [r7, #16]
 8002fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3788      	adds	r7, #136	; 0x88
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	817b      	strh	r3, [r7, #10]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002fde:	897b      	ldrh	r3, [r7, #10]
 8002fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fea:	897b      	ldrh	r3, [r7, #10]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	e009      	b.n	8003016 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003002:	897a      	ldrh	r2, [r7, #10]
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4413      	add	r3, r2
 8003014:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003016:	893b      	ldrh	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d107      	bne.n	800302c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2200      	movs	r2, #0
 8003020:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	b29a      	uxth	r2, r3
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	80da      	strh	r2, [r3, #6]
 800302a:	e00b      	b.n	8003044 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2201      	movs	r2, #1
 8003030:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	b29a      	uxth	r2, r3
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	0c1b      	lsrs	r3, r3, #16
 800303e:	b29a      	uxth	r2, r3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	371c      	adds	r7, #28
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003052:	b480      	push	{r7}
 8003054:	b085      	sub	sp, #20
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003076:	b29b      	uxth	r3, r3
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800308a:	b29b      	uxth	r3, r3
 800308c:	f043 0302 	orr.w	r3, r3, #2
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
	...

080030a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d141      	bne.n	800313a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030b6:	4b4b      	ldr	r3, [pc, #300]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c2:	d131      	bne.n	8003128 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030c4:	4b47      	ldr	r3, [pc, #284]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ca:	4a46      	ldr	r2, [pc, #280]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030d4:	4b43      	ldr	r3, [pc, #268]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030dc:	4a41      	ldr	r2, [pc, #260]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030e4:	4b40      	ldr	r3, [pc, #256]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2232      	movs	r2, #50	; 0x32
 80030ea:	fb02 f303 	mul.w	r3, r2, r3
 80030ee:	4a3f      	ldr	r2, [pc, #252]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030f0:	fba2 2303 	umull	r2, r3, r2, r3
 80030f4:	0c9b      	lsrs	r3, r3, #18
 80030f6:	3301      	adds	r3, #1
 80030f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030fa:	e002      	b.n	8003102 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	3b01      	subs	r3, #1
 8003100:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003102:	4b38      	ldr	r3, [pc, #224]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310e:	d102      	bne.n	8003116 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f2      	bne.n	80030fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003116:	4b33      	ldr	r3, [pc, #204]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003122:	d158      	bne.n	80031d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e057      	b.n	80031d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003128:	4b2e      	ldr	r3, [pc, #184]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800312e:	4a2d      	ldr	r2, [pc, #180]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003134:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003138:	e04d      	b.n	80031d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003140:	d141      	bne.n	80031c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003142:	4b28      	ldr	r3, [pc, #160]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800314a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800314e:	d131      	bne.n	80031b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003150:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003156:	4a23      	ldr	r2, [pc, #140]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003160:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003168:	4a1e      	ldr	r2, [pc, #120]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800316a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800316e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003170:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2232      	movs	r2, #50	; 0x32
 8003176:	fb02 f303 	mul.w	r3, r2, r3
 800317a:	4a1c      	ldr	r2, [pc, #112]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800317c:	fba2 2303 	umull	r2, r3, r2, r3
 8003180:	0c9b      	lsrs	r3, r3, #18
 8003182:	3301      	adds	r3, #1
 8003184:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003186:	e002      	b.n	800318e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	3b01      	subs	r3, #1
 800318c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800318e:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319a:	d102      	bne.n	80031a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f2      	bne.n	8003188 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ae:	d112      	bne.n	80031d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e011      	b.n	80031d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ba:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80031c4:	e007      	b.n	80031d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031c6:	4b07      	ldr	r3, [pc, #28]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031ce:	4a05      	ldr	r2, [pc, #20]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	40007000 	.word	0x40007000
 80031e8:	20000000 	.word	0x20000000
 80031ec:	431bde83 	.word	0x431bde83

080031f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e306      	b.n	8003810 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d075      	beq.n	80032fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800320e:	4b97      	ldr	r3, [pc, #604]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003218:	4b94      	ldr	r3, [pc, #592]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2b0c      	cmp	r3, #12
 8003226:	d102      	bne.n	800322e <HAL_RCC_OscConfig+0x3e>
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2b03      	cmp	r3, #3
 800322c:	d002      	beq.n	8003234 <HAL_RCC_OscConfig+0x44>
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	2b08      	cmp	r3, #8
 8003232:	d10b      	bne.n	800324c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003234:	4b8d      	ldr	r3, [pc, #564]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d05b      	beq.n	80032f8 <HAL_RCC_OscConfig+0x108>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d157      	bne.n	80032f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e2e1      	b.n	8003810 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003254:	d106      	bne.n	8003264 <HAL_RCC_OscConfig+0x74>
 8003256:	4b85      	ldr	r3, [pc, #532]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a84      	ldr	r2, [pc, #528]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 800325c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e01d      	b.n	80032a0 <HAL_RCC_OscConfig+0xb0>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800326c:	d10c      	bne.n	8003288 <HAL_RCC_OscConfig+0x98>
 800326e:	4b7f      	ldr	r3, [pc, #508]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a7e      	ldr	r2, [pc, #504]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 8003274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	4b7c      	ldr	r3, [pc, #496]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a7b      	ldr	r2, [pc, #492]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 8003280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	e00b      	b.n	80032a0 <HAL_RCC_OscConfig+0xb0>
 8003288:	4b78      	ldr	r3, [pc, #480]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a77      	ldr	r2, [pc, #476]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 800328e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b75      	ldr	r3, [pc, #468]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a74      	ldr	r2, [pc, #464]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 800329a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d013      	beq.n	80032d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fd fc12 	bl	8000ad0 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b0:	f7fd fc0e 	bl	8000ad0 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e2a6      	b.n	8003810 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032c2:	4b6a      	ldr	r3, [pc, #424]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0xc0>
 80032ce:	e014      	b.n	80032fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fd fbfe 	bl	8000ad0 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d8:	f7fd fbfa 	bl	8000ad0 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	; 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e292      	b.n	8003810 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ea:	4b60      	ldr	r3, [pc, #384]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0xe8>
 80032f6:	e000      	b.n	80032fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d075      	beq.n	80033f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003306:	4b59      	ldr	r3, [pc, #356]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003310:	4b56      	ldr	r3, [pc, #344]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2b0c      	cmp	r3, #12
 800331e:	d102      	bne.n	8003326 <HAL_RCC_OscConfig+0x136>
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d002      	beq.n	800332c <HAL_RCC_OscConfig+0x13c>
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	2b04      	cmp	r3, #4
 800332a:	d11f      	bne.n	800336c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800332c:	4b4f      	ldr	r3, [pc, #316]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_RCC_OscConfig+0x154>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e265      	b.n	8003810 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003344:	4b49      	ldr	r3, [pc, #292]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	061b      	lsls	r3, r3, #24
 8003352:	4946      	ldr	r1, [pc, #280]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003358:	4b45      	ldr	r3, [pc, #276]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd fb6b 	bl	8000a38 <HAL_InitTick>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d043      	beq.n	80033f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e251      	b.n	8003810 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d023      	beq.n	80033bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003374:	4b3d      	ldr	r3, [pc, #244]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a3c      	ldr	r2, [pc, #240]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 800337a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fd fba6 	bl	8000ad0 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003388:	f7fd fba2 	bl	8000ad0 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e23a      	b.n	8003810 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800339a:	4b34      	ldr	r3, [pc, #208]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f0      	beq.n	8003388 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a6:	4b31      	ldr	r3, [pc, #196]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	061b      	lsls	r3, r3, #24
 80033b4:	492d      	ldr	r1, [pc, #180]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]
 80033ba:	e01a      	b.n	80033f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033bc:	4b2b      	ldr	r3, [pc, #172]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a2a      	ldr	r2, [pc, #168]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 80033c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fd fb82 	bl	8000ad0 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d0:	f7fd fb7e 	bl	8000ad0 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e216      	b.n	8003810 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033e2:	4b22      	ldr	r3, [pc, #136]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x1e0>
 80033ee:	e000      	b.n	80033f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d041      	beq.n	8003482 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d01c      	beq.n	8003440 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003406:	4b19      	ldr	r3, [pc, #100]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 8003408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800340c:	4a17      	ldr	r2, [pc, #92]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003416:	f7fd fb5b 	bl	8000ad0 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800341e:	f7fd fb57 	bl	8000ad0 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e1ef      	b.n	8003810 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003430:	4b0e      	ldr	r3, [pc, #56]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 8003432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0ef      	beq.n	800341e <HAL_RCC_OscConfig+0x22e>
 800343e:	e020      	b.n	8003482 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003440:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 8003442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003446:	4a09      	ldr	r2, [pc, #36]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 8003448:	f023 0301 	bic.w	r3, r3, #1
 800344c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003450:	f7fd fb3e 	bl	8000ad0 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003456:	e00d      	b.n	8003474 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003458:	f7fd fb3a 	bl	8000ad0 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d906      	bls.n	8003474 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e1d2      	b.n	8003810 <HAL_RCC_OscConfig+0x620>
 800346a:	bf00      	nop
 800346c:	40021000 	.word	0x40021000
 8003470:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003474:	4b8c      	ldr	r3, [pc, #560]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 8003476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1ea      	bne.n	8003458 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 80a6 	beq.w	80035dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003490:	2300      	movs	r3, #0
 8003492:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003494:	4b84      	ldr	r3, [pc, #528]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 8003496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_OscConfig+0x2b4>
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <HAL_RCC_OscConfig+0x2b6>
 80034a4:	2300      	movs	r3, #0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00d      	beq.n	80034c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034aa:	4b7f      	ldr	r3, [pc, #508]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 80034ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ae:	4a7e      	ldr	r2, [pc, #504]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 80034b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b4:	6593      	str	r3, [r2, #88]	; 0x58
 80034b6:	4b7c      	ldr	r3, [pc, #496]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 80034b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034c2:	2301      	movs	r3, #1
 80034c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c6:	4b79      	ldr	r3, [pc, #484]	; (80036ac <HAL_RCC_OscConfig+0x4bc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d118      	bne.n	8003504 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034d2:	4b76      	ldr	r3, [pc, #472]	; (80036ac <HAL_RCC_OscConfig+0x4bc>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a75      	ldr	r2, [pc, #468]	; (80036ac <HAL_RCC_OscConfig+0x4bc>)
 80034d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034de:	f7fd faf7 	bl	8000ad0 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e6:	f7fd faf3 	bl	8000ad0 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e18b      	b.n	8003810 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034f8:	4b6c      	ldr	r3, [pc, #432]	; (80036ac <HAL_RCC_OscConfig+0x4bc>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d108      	bne.n	800351e <HAL_RCC_OscConfig+0x32e>
 800350c:	4b66      	ldr	r3, [pc, #408]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	4a65      	ldr	r2, [pc, #404]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800351c:	e024      	b.n	8003568 <HAL_RCC_OscConfig+0x378>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b05      	cmp	r3, #5
 8003524:	d110      	bne.n	8003548 <HAL_RCC_OscConfig+0x358>
 8003526:	4b60      	ldr	r3, [pc, #384]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352c:	4a5e      	ldr	r2, [pc, #376]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 800352e:	f043 0304 	orr.w	r3, r3, #4
 8003532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003536:	4b5c      	ldr	r3, [pc, #368]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 8003538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353c:	4a5a      	ldr	r2, [pc, #360]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003546:	e00f      	b.n	8003568 <HAL_RCC_OscConfig+0x378>
 8003548:	4b57      	ldr	r3, [pc, #348]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354e:	4a56      	ldr	r2, [pc, #344]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 8003550:	f023 0301 	bic.w	r3, r3, #1
 8003554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003558:	4b53      	ldr	r3, [pc, #332]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355e:	4a52      	ldr	r2, [pc, #328]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 8003560:	f023 0304 	bic.w	r3, r3, #4
 8003564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d016      	beq.n	800359e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003570:	f7fd faae 	bl	8000ad0 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003576:	e00a      	b.n	800358e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003578:	f7fd faaa 	bl	8000ad0 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	f241 3288 	movw	r2, #5000	; 0x1388
 8003586:	4293      	cmp	r3, r2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e140      	b.n	8003810 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800358e:	4b46      	ldr	r3, [pc, #280]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 8003590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0ed      	beq.n	8003578 <HAL_RCC_OscConfig+0x388>
 800359c:	e015      	b.n	80035ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359e:	f7fd fa97 	bl	8000ad0 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035a4:	e00a      	b.n	80035bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a6:	f7fd fa93 	bl	8000ad0 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e129      	b.n	8003810 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035bc:	4b3a      	ldr	r3, [pc, #232]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1ed      	bne.n	80035a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035ca:	7ffb      	ldrb	r3, [r7, #31]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d105      	bne.n	80035dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d0:	4b35      	ldr	r3, [pc, #212]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	4a34      	ldr	r2, [pc, #208]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 80035d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d03c      	beq.n	8003662 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d01c      	beq.n	800362a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035f0:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 80035f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035f6:	4a2c      	ldr	r2, [pc, #176]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003600:	f7fd fa66 	bl	8000ad0 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003608:	f7fd fa62 	bl	8000ad0 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e0fa      	b.n	8003810 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800361a:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 800361c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0ef      	beq.n	8003608 <HAL_RCC_OscConfig+0x418>
 8003628:	e01b      	b.n	8003662 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800362a:	4b1f      	ldr	r3, [pc, #124]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 800362c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003630:	4a1d      	ldr	r2, [pc, #116]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 8003632:	f023 0301 	bic.w	r3, r3, #1
 8003636:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363a:	f7fd fa49 	bl	8000ad0 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003642:	f7fd fa45 	bl	8000ad0 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e0dd      	b.n	8003810 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003654:	4b14      	ldr	r3, [pc, #80]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 8003656:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1ef      	bne.n	8003642 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80d1 	beq.w	800380e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800366c:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b0c      	cmp	r3, #12
 8003676:	f000 808b 	beq.w	8003790 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d15e      	bne.n	8003740 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003682:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a08      	ldr	r2, [pc, #32]	; (80036a8 <HAL_RCC_OscConfig+0x4b8>)
 8003688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800368c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368e:	f7fd fa1f 	bl	8000ad0 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003694:	e00c      	b.n	80036b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003696:	f7fd fa1b 	bl	8000ad0 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d905      	bls.n	80036b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e0b3      	b.n	8003810 <HAL_RCC_OscConfig+0x620>
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b0:	4b59      	ldr	r3, [pc, #356]	; (8003818 <HAL_RCC_OscConfig+0x628>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1ec      	bne.n	8003696 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036bc:	4b56      	ldr	r3, [pc, #344]	; (8003818 <HAL_RCC_OscConfig+0x628>)
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	4b56      	ldr	r3, [pc, #344]	; (800381c <HAL_RCC_OscConfig+0x62c>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6a11      	ldr	r1, [r2, #32]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036cc:	3a01      	subs	r2, #1
 80036ce:	0112      	lsls	r2, r2, #4
 80036d0:	4311      	orrs	r1, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80036d6:	0212      	lsls	r2, r2, #8
 80036d8:	4311      	orrs	r1, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036de:	0852      	lsrs	r2, r2, #1
 80036e0:	3a01      	subs	r2, #1
 80036e2:	0552      	lsls	r2, r2, #21
 80036e4:	4311      	orrs	r1, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036ea:	0852      	lsrs	r2, r2, #1
 80036ec:	3a01      	subs	r2, #1
 80036ee:	0652      	lsls	r2, r2, #25
 80036f0:	4311      	orrs	r1, r2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036f6:	06d2      	lsls	r2, r2, #27
 80036f8:	430a      	orrs	r2, r1
 80036fa:	4947      	ldr	r1, [pc, #284]	; (8003818 <HAL_RCC_OscConfig+0x628>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003700:	4b45      	ldr	r3, [pc, #276]	; (8003818 <HAL_RCC_OscConfig+0x628>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a44      	ldr	r2, [pc, #272]	; (8003818 <HAL_RCC_OscConfig+0x628>)
 8003706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800370a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800370c:	4b42      	ldr	r3, [pc, #264]	; (8003818 <HAL_RCC_OscConfig+0x628>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	4a41      	ldr	r2, [pc, #260]	; (8003818 <HAL_RCC_OscConfig+0x628>)
 8003712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003716:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fd f9da 	bl	8000ad0 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003720:	f7fd f9d6 	bl	8000ad0 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e06e      	b.n	8003810 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003732:	4b39      	ldr	r3, [pc, #228]	; (8003818 <HAL_RCC_OscConfig+0x628>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0x530>
 800373e:	e066      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003740:	4b35      	ldr	r3, [pc, #212]	; (8003818 <HAL_RCC_OscConfig+0x628>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a34      	ldr	r2, [pc, #208]	; (8003818 <HAL_RCC_OscConfig+0x628>)
 8003746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800374a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800374c:	4b32      	ldr	r3, [pc, #200]	; (8003818 <HAL_RCC_OscConfig+0x628>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4a31      	ldr	r2, [pc, #196]	; (8003818 <HAL_RCC_OscConfig+0x628>)
 8003752:	f023 0303 	bic.w	r3, r3, #3
 8003756:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003758:	4b2f      	ldr	r3, [pc, #188]	; (8003818 <HAL_RCC_OscConfig+0x628>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4a2e      	ldr	r2, [pc, #184]	; (8003818 <HAL_RCC_OscConfig+0x628>)
 800375e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003766:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003768:	f7fd f9b2 	bl	8000ad0 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003770:	f7fd f9ae 	bl	8000ad0 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e046      	b.n	8003810 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003782:	4b25      	ldr	r3, [pc, #148]	; (8003818 <HAL_RCC_OscConfig+0x628>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0x580>
 800378e:	e03e      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e039      	b.n	8003810 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800379c:	4b1e      	ldr	r3, [pc, #120]	; (8003818 <HAL_RCC_OscConfig+0x628>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f003 0203 	and.w	r2, r3, #3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d12c      	bne.n	800380a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	3b01      	subs	r3, #1
 80037bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037be:	429a      	cmp	r2, r3
 80037c0:	d123      	bne.n	800380a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d11b      	bne.n	800380a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80037de:	429a      	cmp	r2, r3
 80037e0:	d113      	bne.n	800380a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	085b      	lsrs	r3, r3, #1
 80037ee:	3b01      	subs	r3, #1
 80037f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d109      	bne.n	800380a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003800:	085b      	lsrs	r3, r3, #1
 8003802:	3b01      	subs	r3, #1
 8003804:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d001      	beq.n	800380e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3720      	adds	r7, #32
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40021000 	.word	0x40021000
 800381c:	019f800c 	.word	0x019f800c

08003820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e11e      	b.n	8003a76 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003838:	4b91      	ldr	r3, [pc, #580]	; (8003a80 <HAL_RCC_ClockConfig+0x260>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d910      	bls.n	8003868 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003846:	4b8e      	ldr	r3, [pc, #568]	; (8003a80 <HAL_RCC_ClockConfig+0x260>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 020f 	bic.w	r2, r3, #15
 800384e:	498c      	ldr	r1, [pc, #560]	; (8003a80 <HAL_RCC_ClockConfig+0x260>)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003856:	4b8a      	ldr	r3, [pc, #552]	; (8003a80 <HAL_RCC_ClockConfig+0x260>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e106      	b.n	8003a76 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d073      	beq.n	800395c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d129      	bne.n	80038d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800387c:	4b81      	ldr	r3, [pc, #516]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0f4      	b.n	8003a76 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800388c:	f000 f99e 	bl	8003bcc <RCC_GetSysClockFreqFromPLLSource>
 8003890:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4a7c      	ldr	r2, [pc, #496]	; (8003a88 <HAL_RCC_ClockConfig+0x268>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d93f      	bls.n	800391a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800389a:	4b7a      	ldr	r3, [pc, #488]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d009      	beq.n	80038ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d033      	beq.n	800391a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d12f      	bne.n	800391a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038ba:	4b72      	ldr	r3, [pc, #456]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038c2:	4a70      	ldr	r2, [pc, #448]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 80038c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038ca:	2380      	movs	r3, #128	; 0x80
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e024      	b.n	800391a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d107      	bne.n	80038e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038d8:	4b6a      	ldr	r3, [pc, #424]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d109      	bne.n	80038f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0c6      	b.n	8003a76 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038e8:	4b66      	ldr	r3, [pc, #408]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0be      	b.n	8003a76 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80038f8:	f000 f8ce 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	4a61      	ldr	r2, [pc, #388]	; (8003a88 <HAL_RCC_ClockConfig+0x268>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d909      	bls.n	800391a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003906:	4b5f      	ldr	r3, [pc, #380]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800390e:	4a5d      	ldr	r2, [pc, #372]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 8003910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003914:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003916:	2380      	movs	r3, #128	; 0x80
 8003918:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800391a:	4b5a      	ldr	r3, [pc, #360]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f023 0203 	bic.w	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	4957      	ldr	r1, [pc, #348]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 8003928:	4313      	orrs	r3, r2
 800392a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800392c:	f7fd f8d0 	bl	8000ad0 <HAL_GetTick>
 8003930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003932:	e00a      	b.n	800394a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003934:	f7fd f8cc 	bl	8000ad0 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003942:	4293      	cmp	r3, r2
 8003944:	d901      	bls.n	800394a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e095      	b.n	8003a76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	4b4e      	ldr	r3, [pc, #312]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 020c 	and.w	r2, r3, #12
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	429a      	cmp	r2, r3
 800395a:	d1eb      	bne.n	8003934 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d023      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003974:	4b43      	ldr	r3, [pc, #268]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	4a42      	ldr	r2, [pc, #264]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 800397a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800397e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d007      	beq.n	800399c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800398c:	4b3d      	ldr	r3, [pc, #244]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003994:	4a3b      	ldr	r2, [pc, #236]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 8003996:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800399a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800399c:	4b39      	ldr	r3, [pc, #228]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	4936      	ldr	r1, [pc, #216]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	608b      	str	r3, [r1, #8]
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2b80      	cmp	r3, #128	; 0x80
 80039b4:	d105      	bne.n	80039c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80039b6:	4b33      	ldr	r3, [pc, #204]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	4a32      	ldr	r2, [pc, #200]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 80039bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039c2:	4b2f      	ldr	r3, [pc, #188]	; (8003a80 <HAL_RCC_ClockConfig+0x260>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d21d      	bcs.n	8003a0c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d0:	4b2b      	ldr	r3, [pc, #172]	; (8003a80 <HAL_RCC_ClockConfig+0x260>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f023 020f 	bic.w	r2, r3, #15
 80039d8:	4929      	ldr	r1, [pc, #164]	; (8003a80 <HAL_RCC_ClockConfig+0x260>)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	4313      	orrs	r3, r2
 80039de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80039e0:	f7fd f876 	bl	8000ad0 <HAL_GetTick>
 80039e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e6:	e00a      	b.n	80039fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e8:	f7fd f872 	bl	8000ad0 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e03b      	b.n	8003a76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fe:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <HAL_RCC_ClockConfig+0x260>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d1ed      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a18:	4b1a      	ldr	r3, [pc, #104]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4917      	ldr	r1, [pc, #92]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a36:	4b13      	ldr	r3, [pc, #76]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	490f      	ldr	r1, [pc, #60]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a4a:	f000 f825 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <HAL_RCC_ClockConfig+0x264>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	490c      	ldr	r1, [pc, #48]	; (8003a8c <HAL_RCC_ClockConfig+0x26c>)
 8003a5c:	5ccb      	ldrb	r3, [r1, r3]
 8003a5e:	f003 031f 	and.w	r3, r3, #31
 8003a62:	fa22 f303 	lsr.w	r3, r2, r3
 8003a66:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <HAL_RCC_ClockConfig+0x270>)
 8003a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <HAL_RCC_ClockConfig+0x274>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fc ffe2 	bl	8000a38 <HAL_InitTick>
 8003a74:	4603      	mov	r3, r0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40022000 	.word	0x40022000
 8003a84:	40021000 	.word	0x40021000
 8003a88:	04c4b400 	.word	0x04c4b400
 8003a8c:	08009c7c 	.word	0x08009c7c
 8003a90:	20000000 	.word	0x20000000
 8003a94:	20000004 	.word	0x20000004

08003a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a9e:	4b2c      	ldr	r3, [pc, #176]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d102      	bne.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003aaa:	4b2a      	ldr	r3, [pc, #168]	; (8003b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	e047      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ab0:	4b27      	ldr	r3, [pc, #156]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 030c 	and.w	r3, r3, #12
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d102      	bne.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003abc:	4b26      	ldr	r3, [pc, #152]	; (8003b58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	e03e      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003ac2:	4b23      	ldr	r3, [pc, #140]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
 8003aca:	2b0c      	cmp	r3, #12
 8003acc:	d136      	bne.n	8003b3c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ace:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ad8:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d10c      	bne.n	8003b06 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003aec:	4a1a      	ldr	r2, [pc, #104]	; (8003b58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	4a16      	ldr	r2, [pc, #88]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003af6:	68d2      	ldr	r2, [r2, #12]
 8003af8:	0a12      	lsrs	r2, r2, #8
 8003afa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003afe:	fb02 f303 	mul.w	r3, r2, r3
 8003b02:	617b      	str	r3, [r7, #20]
      break;
 8003b04:	e00c      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b06:	4a13      	ldr	r2, [pc, #76]	; (8003b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0e:	4a10      	ldr	r2, [pc, #64]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b10:	68d2      	ldr	r2, [r2, #12]
 8003b12:	0a12      	lsrs	r2, r2, #8
 8003b14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b18:	fb02 f303 	mul.w	r3, r2, r3
 8003b1c:	617b      	str	r3, [r7, #20]
      break;
 8003b1e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b20:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	0e5b      	lsrs	r3, r3, #25
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	e001      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003b40:	693b      	ldr	r3, [r7, #16]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000
 8003b54:	00f42400 	.word	0x00f42400
 8003b58:	007a1200 	.word	0x007a1200

08003b5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b60:	4b03      	ldr	r3, [pc, #12]	; (8003b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b62:	681b      	ldr	r3, [r3, #0]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	20000000 	.word	0x20000000

08003b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b78:	f7ff fff0 	bl	8003b5c <HAL_RCC_GetHCLKFreq>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	0a1b      	lsrs	r3, r3, #8
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	4904      	ldr	r1, [pc, #16]	; (8003b9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b8a:	5ccb      	ldrb	r3, [r1, r3]
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	08009c8c 	.word	0x08009c8c

08003ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ba4:	f7ff ffda 	bl	8003b5c <HAL_RCC_GetHCLKFreq>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	0adb      	lsrs	r3, r3, #11
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	4904      	ldr	r1, [pc, #16]	; (8003bc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bb6:	5ccb      	ldrb	r3, [r1, r3]
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	08009c8c 	.word	0x08009c8c

08003bcc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bd2:	4b1e      	ldr	r3, [pc, #120]	; (8003c4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bdc:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	091b      	lsrs	r3, r3, #4
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	3301      	adds	r3, #1
 8003be8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d10c      	bne.n	8003c0a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bf0:	4a17      	ldr	r2, [pc, #92]	; (8003c50 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf8:	4a14      	ldr	r2, [pc, #80]	; (8003c4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bfa:	68d2      	ldr	r2, [r2, #12]
 8003bfc:	0a12      	lsrs	r2, r2, #8
 8003bfe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c02:	fb02 f303 	mul.w	r3, r2, r3
 8003c06:	617b      	str	r3, [r7, #20]
    break;
 8003c08:	e00c      	b.n	8003c24 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c0a:	4a12      	ldr	r2, [pc, #72]	; (8003c54 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c12:	4a0e      	ldr	r2, [pc, #56]	; (8003c4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c14:	68d2      	ldr	r2, [r2, #12]
 8003c16:	0a12      	lsrs	r2, r2, #8
 8003c18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c1c:	fb02 f303 	mul.w	r3, r2, r3
 8003c20:	617b      	str	r3, [r7, #20]
    break;
 8003c22:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c24:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	0e5b      	lsrs	r3, r3, #25
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	3301      	adds	r3, #1
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003c3e:	687b      	ldr	r3, [r7, #4]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	371c      	adds	r7, #28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	007a1200 	.word	0x007a1200
 8003c54:	00f42400 	.word	0x00f42400

08003c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c60:	2300      	movs	r3, #0
 8003c62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c64:	2300      	movs	r3, #0
 8003c66:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 8098 	beq.w	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c76:	2300      	movs	r3, #0
 8003c78:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c7a:	4b43      	ldr	r3, [pc, #268]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10d      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c86:	4b40      	ldr	r3, [pc, #256]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8a:	4a3f      	ldr	r2, [pc, #252]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c90:	6593      	str	r3, [r2, #88]	; 0x58
 8003c92:	4b3d      	ldr	r3, [pc, #244]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	60bb      	str	r3, [r7, #8]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca2:	4b3a      	ldr	r3, [pc, #232]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a39      	ldr	r2, [pc, #228]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cae:	f7fc ff0f 	bl	8000ad0 <HAL_GetTick>
 8003cb2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cb4:	e009      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb6:	f7fc ff0b 	bl	8000ad0 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d902      	bls.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	74fb      	strb	r3, [r7, #19]
        break;
 8003cc8:	e005      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cca:	4b30      	ldr	r3, [pc, #192]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0ef      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003cd6:	7cfb      	ldrb	r3, [r7, #19]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d159      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cdc:	4b2a      	ldr	r3, [pc, #168]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d01e      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d019      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cf8:	4b23      	ldr	r3, [pc, #140]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d04:	4b20      	ldr	r3, [pc, #128]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0a:	4a1f      	ldr	r2, [pc, #124]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d14:	4b1c      	ldr	r3, [pc, #112]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1a:	4a1b      	ldr	r2, [pc, #108]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d24:	4a18      	ldr	r2, [pc, #96]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d016      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d36:	f7fc fecb 	bl	8000ad0 <HAL_GetTick>
 8003d3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d3c:	e00b      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3e:	f7fc fec7 	bl	8000ad0 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d902      	bls.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	74fb      	strb	r3, [r7, #19]
            break;
 8003d54:	e006      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d56:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0ec      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003d64:	7cfb      	ldrb	r3, [r7, #19]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10b      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d6a:	4b07      	ldr	r3, [pc, #28]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	4903      	ldr	r1, [pc, #12]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d80:	e008      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d82:	7cfb      	ldrb	r3, [r7, #19]
 8003d84:	74bb      	strb	r3, [r7, #18]
 8003d86:	e005      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d90:	7cfb      	ldrb	r3, [r7, #19]
 8003d92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d94:	7c7b      	ldrb	r3, [r7, #17]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d105      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d9a:	4ba6      	ldr	r3, [pc, #664]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9e:	4aa5      	ldr	r2, [pc, #660]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003db2:	4ba0      	ldr	r3, [pc, #640]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db8:	f023 0203 	bic.w	r2, r3, #3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	499c      	ldr	r1, [pc, #624]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dd4:	4b97      	ldr	r3, [pc, #604]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dda:	f023 020c 	bic.w	r2, r3, #12
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	4994      	ldr	r1, [pc, #592]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003df6:	4b8f      	ldr	r3, [pc, #572]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	498b      	ldr	r1, [pc, #556]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e18:	4b86      	ldr	r3, [pc, #536]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	4983      	ldr	r1, [pc, #524]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0320 	and.w	r3, r3, #32
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e3a:	4b7e      	ldr	r3, [pc, #504]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e40:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	497a      	ldr	r1, [pc, #488]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e5c:	4b75      	ldr	r3, [pc, #468]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	4972      	ldr	r1, [pc, #456]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e7e:	4b6d      	ldr	r3, [pc, #436]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	4969      	ldr	r1, [pc, #420]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ea0:	4b64      	ldr	r3, [pc, #400]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	4961      	ldr	r1, [pc, #388]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ec2:	4b5c      	ldr	r3, [pc, #368]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	4958      	ldr	r1, [pc, #352]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d015      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ee4:	4b53      	ldr	r3, [pc, #332]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	4950      	ldr	r1, [pc, #320]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f02:	d105      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f04:	4b4b      	ldr	r3, [pc, #300]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	4a4a      	ldr	r2, [pc, #296]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d015      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f1c:	4b45      	ldr	r3, [pc, #276]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	4942      	ldr	r1, [pc, #264]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f3a:	d105      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f3c:	4b3d      	ldr	r3, [pc, #244]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f46:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d015      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f54:	4b37      	ldr	r3, [pc, #220]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	4934      	ldr	r1, [pc, #208]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f72:	d105      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f74:	4b2f      	ldr	r3, [pc, #188]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	4a2e      	ldr	r2, [pc, #184]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f7e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d015      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f8c:	4b29      	ldr	r3, [pc, #164]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9a:	4926      	ldr	r1, [pc, #152]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003faa:	d105      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fac:	4b21      	ldr	r3, [pc, #132]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4a20      	ldr	r2, [pc, #128]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fb6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d015      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fc4:	4b1b      	ldr	r3, [pc, #108]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	4918      	ldr	r1, [pc, #96]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fe2:	d105      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe4:	4b13      	ldr	r3, [pc, #76]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4a12      	ldr	r2, [pc, #72]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d015      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ffc:	4b0d      	ldr	r3, [pc, #52]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004002:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400a:	490a      	ldr	r1, [pc, #40]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004016:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800401a:	d105      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4a04      	ldr	r2, [pc, #16]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004026:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004028:	7cbb      	ldrb	r3, [r7, #18]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40021000 	.word	0x40021000

08004038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e042      	b.n	80040d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004050:	2b00      	cmp	r3, #0
 8004052:	d106      	bne.n	8004062 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7fc fbc1 	bl	80007e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2224      	movs	r2, #36	; 0x24
 8004066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0201 	bic.w	r2, r2, #1
 8004078:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fbc4 	bl	8004808 <UART_SetConfig>
 8004080:	4603      	mov	r3, r0
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e022      	b.n	80040d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fe84 	bl	8004da0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 ff0b 	bl	8004ee4 <UART_CheckIdleState>
 80040ce:	4603      	mov	r3, r0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08a      	sub	sp, #40	; 0x28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	4613      	mov	r3, r2
 80040e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d142      	bne.n	8004176 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <HAL_UART_Receive_DMA+0x24>
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e03b      	b.n	8004178 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_UART_Receive_DMA+0x36>
 800410a:	2302      	movs	r3, #2
 800410c:	e034      	b.n	8004178 <HAL_UART_Receive_DMA+0xa0>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a17      	ldr	r2, [pc, #92]	; (8004180 <HAL_UART_Receive_DMA+0xa8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d01f      	beq.n	8004166 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d018      	beq.n	8004166 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	613b      	str	r3, [r7, #16]
   return(result);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004148:	627b      	str	r3, [r7, #36]	; 0x24
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	461a      	mov	r2, r3
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	623b      	str	r3, [r7, #32]
 8004154:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004156:	69f9      	ldr	r1, [r7, #28]
 8004158:	6a3a      	ldr	r2, [r7, #32]
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e6      	bne.n	8004134 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	461a      	mov	r2, r3
 800416a:	68b9      	ldr	r1, [r7, #8]
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 ffcd 	bl	800510c <UART_Start_Receive_DMA>
 8004172:	4603      	mov	r3, r0
 8004174:	e000      	b.n	8004178 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004176:	2302      	movs	r3, #2
  }
}
 8004178:	4618      	mov	r0, r3
 800417a:	3728      	adds	r7, #40	; 0x28
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40008000 	.word	0x40008000

08004184 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b0ba      	sub	sp, #232	; 0xe8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80041ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80041b2:	4013      	ands	r3, r2
 80041b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80041b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d11b      	bne.n	80041f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80041c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d015      	beq.n	80041f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80041cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d105      	bne.n	80041e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80041d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d009      	beq.n	80041f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 82d6 	beq.w	800479a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	4798      	blx	r3
      }
      return;
 80041f6:	e2d0      	b.n	800479a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 811f 	beq.w	8004440 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004202:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004206:	4b8b      	ldr	r3, [pc, #556]	; (8004434 <HAL_UART_IRQHandler+0x2b0>)
 8004208:	4013      	ands	r3, r2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800420e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004212:	4b89      	ldr	r3, [pc, #548]	; (8004438 <HAL_UART_IRQHandler+0x2b4>)
 8004214:	4013      	ands	r3, r2
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 8112 	beq.w	8004440 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800421c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d011      	beq.n	800424c <HAL_UART_IRQHandler+0xc8>
 8004228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800422c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00b      	beq.n	800424c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2201      	movs	r2, #1
 800423a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004242:	f043 0201 	orr.w	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800424c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d011      	beq.n	800427c <HAL_UART_IRQHandler+0xf8>
 8004258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00b      	beq.n	800427c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2202      	movs	r2, #2
 800426a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004272:	f043 0204 	orr.w	r2, r3, #4
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800427c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d011      	beq.n	80042ac <HAL_UART_IRQHandler+0x128>
 8004288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00b      	beq.n	80042ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2204      	movs	r2, #4
 800429a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042a2:	f043 0202 	orr.w	r2, r3, #2
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d017      	beq.n	80042e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80042b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d105      	bne.n	80042d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80042c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80042c8:	4b5a      	ldr	r3, [pc, #360]	; (8004434 <HAL_UART_IRQHandler+0x2b0>)
 80042ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00b      	beq.n	80042e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2208      	movs	r2, #8
 80042d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042de:	f043 0208 	orr.w	r2, r3, #8
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d012      	beq.n	800431a <HAL_UART_IRQHandler+0x196>
 80042f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00c      	beq.n	800431a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004308:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004310:	f043 0220 	orr.w	r2, r3, #32
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 823c 	beq.w	800479e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b00      	cmp	r3, #0
 8004330:	d013      	beq.n	800435a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b00      	cmp	r3, #0
 800433c:	d105      	bne.n	800434a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800433e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d007      	beq.n	800435a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004360:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436e:	2b40      	cmp	r3, #64	; 0x40
 8004370:	d005      	beq.n	800437e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004376:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800437a:	2b00      	cmp	r3, #0
 800437c:	d04f      	beq.n	800441e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 ffad 	bl	80052de <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438e:	2b40      	cmp	r3, #64	; 0x40
 8004390:	d141      	bne.n	8004416 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3308      	adds	r3, #8
 8004398:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3308      	adds	r3, #8
 80043ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1d9      	bne.n	8004392 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d013      	beq.n	800440e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043ea:	4a14      	ldr	r2, [pc, #80]	; (800443c <HAL_UART_IRQHandler+0x2b8>)
 80043ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fc fe04 	bl	8001000 <HAL_DMA_Abort_IT>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d017      	beq.n	800442e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004408:	4610      	mov	r0, r2
 800440a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800440c:	e00f      	b.n	800442e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f9e4 	bl	80047dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004414:	e00b      	b.n	800442e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f9e0 	bl	80047dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800441c:	e007      	b.n	800442e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f9dc 	bl	80047dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800442c:	e1b7      	b.n	800479e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800442e:	bf00      	nop
    return;
 8004430:	e1b5      	b.n	800479e <HAL_UART_IRQHandler+0x61a>
 8004432:	bf00      	nop
 8004434:	10000001 	.word	0x10000001
 8004438:	04000120 	.word	0x04000120
 800443c:	08005589 	.word	0x08005589

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004444:	2b01      	cmp	r3, #1
 8004446:	f040 814a 	bne.w	80046de <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800444a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 8143 	beq.w	80046de <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800445c:	f003 0310 	and.w	r3, r3, #16
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 813c 	beq.w	80046de <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2210      	movs	r2, #16
 800446c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004478:	2b40      	cmp	r3, #64	; 0x40
 800447a:	f040 80b5 	bne.w	80045e8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800448a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 8187 	beq.w	80047a2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800449a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800449e:	429a      	cmp	r2, r3
 80044a0:	f080 817f 	bcs.w	80047a2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0320 	and.w	r3, r3, #32
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f040 8086 	bne.w	80045cc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044fa:	e841 2300 	strex	r3, r2, [r1]
 80044fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1da      	bne.n	80044c0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3308      	adds	r3, #8
 8004510:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800451a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3308      	adds	r3, #8
 800452a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800452e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004532:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004536:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e1      	bne.n	800450a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3308      	adds	r3, #8
 800454c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800455c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3308      	adds	r3, #8
 8004566:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800456a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800456c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004570:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004572:	e841 2300 	strex	r3, r2, [r1]
 8004576:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1e3      	bne.n	8004546 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800459a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800459c:	f023 0310 	bic.w	r3, r3, #16
 80045a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80045b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045b6:	e841 2300 	strex	r3, r2, [r1]
 80045ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1e4      	bne.n	800458c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fc fcc1 	bl	8000f4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045d8:	b29b      	uxth	r3, r3
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	b29b      	uxth	r3, r3
 80045de:	4619      	mov	r1, r3
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f905 	bl	80047f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045e6:	e0dc      	b.n	80047a2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 80ce 	beq.w	80047a6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800460a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 80c9 	beq.w	80047a6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461c:	e853 3f00 	ldrex	r3, [r3]
 8004620:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004628:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	461a      	mov	r2, r3
 8004632:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004636:	647b      	str	r3, [r7, #68]	; 0x44
 8004638:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800463c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800463e:	e841 2300 	strex	r3, r2, [r1]
 8004642:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1e4      	bne.n	8004614 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3308      	adds	r3, #8
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	623b      	str	r3, [r7, #32]
   return(result);
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004660:	f023 0301 	bic.w	r3, r3, #1
 8004664:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3308      	adds	r3, #8
 800466e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004672:	633a      	str	r2, [r7, #48]	; 0x30
 8004674:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004676:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800467a:	e841 2300 	strex	r3, r2, [r1]
 800467e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1e1      	bne.n	800464a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	e853 3f00 	ldrex	r3, [r3]
 80046a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 0310 	bic.w	r3, r3, #16
 80046ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	69b9      	ldr	r1, [r7, #24]
 80046c2:	69fa      	ldr	r2, [r7, #28]
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	617b      	str	r3, [r7, #20]
   return(result);
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e4      	bne.n	800469a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046d4:	4619      	mov	r1, r3
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f88a 	bl	80047f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046dc:	e063      	b.n	80047a6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00e      	beq.n	8004708 <HAL_UART_IRQHandler+0x584>
 80046ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d008      	beq.n	8004708 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 ff82 	bl	800560a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004706:	e051      	b.n	80047ac <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004710:	2b00      	cmp	r3, #0
 8004712:	d014      	beq.n	800473e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471c:	2b00      	cmp	r3, #0
 800471e:	d105      	bne.n	800472c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004724:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d008      	beq.n	800473e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004730:	2b00      	cmp	r3, #0
 8004732:	d03a      	beq.n	80047aa <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	4798      	blx	r3
    }
    return;
 800473c:	e035      	b.n	80047aa <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800473e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004746:	2b00      	cmp	r3, #0
 8004748:	d009      	beq.n	800475e <HAL_UART_IRQHandler+0x5da>
 800474a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800474e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 ff2c 	bl	80055b4 <UART_EndTransmit_IT>
    return;
 800475c:	e026      	b.n	80047ac <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800475e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004762:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d009      	beq.n	800477e <HAL_UART_IRQHandler+0x5fa>
 800476a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800476e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 ff5b 	bl	8005632 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800477c:	e016      	b.n	80047ac <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800477e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004782:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d010      	beq.n	80047ac <HAL_UART_IRQHandler+0x628>
 800478a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800478e:	2b00      	cmp	r3, #0
 8004790:	da0c      	bge.n	80047ac <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 ff43 	bl	800561e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004798:	e008      	b.n	80047ac <HAL_UART_IRQHandler+0x628>
      return;
 800479a:	bf00      	nop
 800479c:	e006      	b.n	80047ac <HAL_UART_IRQHandler+0x628>
    return;
 800479e:	bf00      	nop
 80047a0:	e004      	b.n	80047ac <HAL_UART_IRQHandler+0x628>
      return;
 80047a2:	bf00      	nop
 80047a4:	e002      	b.n	80047ac <HAL_UART_IRQHandler+0x628>
      return;
 80047a6:	bf00      	nop
 80047a8:	e000      	b.n	80047ac <HAL_UART_IRQHandler+0x628>
    return;
 80047aa:	bf00      	nop
  }
}
 80047ac:	37e8      	adds	r7, #232	; 0xe8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop

080047b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800480c:	b08c      	sub	sp, #48	; 0x30
 800480e:	af00      	add	r7, sp, #0
 8004810:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	431a      	orrs	r2, r3
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	431a      	orrs	r2, r3
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	4313      	orrs	r3, r2
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	4bab      	ldr	r3, [pc, #684]	; (8004ae4 <UART_SetConfig+0x2dc>)
 8004838:	4013      	ands	r3, r2
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	6812      	ldr	r2, [r2, #0]
 800483e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004840:	430b      	orrs	r3, r1
 8004842:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4aa0      	ldr	r2, [pc, #640]	; (8004ae8 <UART_SetConfig+0x2e0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d004      	beq.n	8004874 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004870:	4313      	orrs	r3, r2
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800487e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004888:	430b      	orrs	r3, r1
 800488a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	f023 010f 	bic.w	r1, r3, #15
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a91      	ldr	r2, [pc, #580]	; (8004aec <UART_SetConfig+0x2e4>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d125      	bne.n	80048f8 <UART_SetConfig+0xf0>
 80048ac:	4b90      	ldr	r3, [pc, #576]	; (8004af0 <UART_SetConfig+0x2e8>)
 80048ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d81a      	bhi.n	80048f0 <UART_SetConfig+0xe8>
 80048ba:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <UART_SetConfig+0xb8>)
 80048bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c0:	080048d1 	.word	0x080048d1
 80048c4:	080048e1 	.word	0x080048e1
 80048c8:	080048d9 	.word	0x080048d9
 80048cc:	080048e9 	.word	0x080048e9
 80048d0:	2301      	movs	r3, #1
 80048d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048d6:	e0d6      	b.n	8004a86 <UART_SetConfig+0x27e>
 80048d8:	2302      	movs	r3, #2
 80048da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048de:	e0d2      	b.n	8004a86 <UART_SetConfig+0x27e>
 80048e0:	2304      	movs	r3, #4
 80048e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048e6:	e0ce      	b.n	8004a86 <UART_SetConfig+0x27e>
 80048e8:	2308      	movs	r3, #8
 80048ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ee:	e0ca      	b.n	8004a86 <UART_SetConfig+0x27e>
 80048f0:	2310      	movs	r3, #16
 80048f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048f6:	e0c6      	b.n	8004a86 <UART_SetConfig+0x27e>
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a7d      	ldr	r2, [pc, #500]	; (8004af4 <UART_SetConfig+0x2ec>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d138      	bne.n	8004974 <UART_SetConfig+0x16c>
 8004902:	4b7b      	ldr	r3, [pc, #492]	; (8004af0 <UART_SetConfig+0x2e8>)
 8004904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004908:	f003 030c 	and.w	r3, r3, #12
 800490c:	2b0c      	cmp	r3, #12
 800490e:	d82d      	bhi.n	800496c <UART_SetConfig+0x164>
 8004910:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <UART_SetConfig+0x110>)
 8004912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004916:	bf00      	nop
 8004918:	0800494d 	.word	0x0800494d
 800491c:	0800496d 	.word	0x0800496d
 8004920:	0800496d 	.word	0x0800496d
 8004924:	0800496d 	.word	0x0800496d
 8004928:	0800495d 	.word	0x0800495d
 800492c:	0800496d 	.word	0x0800496d
 8004930:	0800496d 	.word	0x0800496d
 8004934:	0800496d 	.word	0x0800496d
 8004938:	08004955 	.word	0x08004955
 800493c:	0800496d 	.word	0x0800496d
 8004940:	0800496d 	.word	0x0800496d
 8004944:	0800496d 	.word	0x0800496d
 8004948:	08004965 	.word	0x08004965
 800494c:	2300      	movs	r3, #0
 800494e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004952:	e098      	b.n	8004a86 <UART_SetConfig+0x27e>
 8004954:	2302      	movs	r3, #2
 8004956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800495a:	e094      	b.n	8004a86 <UART_SetConfig+0x27e>
 800495c:	2304      	movs	r3, #4
 800495e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004962:	e090      	b.n	8004a86 <UART_SetConfig+0x27e>
 8004964:	2308      	movs	r3, #8
 8004966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800496a:	e08c      	b.n	8004a86 <UART_SetConfig+0x27e>
 800496c:	2310      	movs	r3, #16
 800496e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004972:	e088      	b.n	8004a86 <UART_SetConfig+0x27e>
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a5f      	ldr	r2, [pc, #380]	; (8004af8 <UART_SetConfig+0x2f0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d125      	bne.n	80049ca <UART_SetConfig+0x1c2>
 800497e:	4b5c      	ldr	r3, [pc, #368]	; (8004af0 <UART_SetConfig+0x2e8>)
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004984:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004988:	2b30      	cmp	r3, #48	; 0x30
 800498a:	d016      	beq.n	80049ba <UART_SetConfig+0x1b2>
 800498c:	2b30      	cmp	r3, #48	; 0x30
 800498e:	d818      	bhi.n	80049c2 <UART_SetConfig+0x1ba>
 8004990:	2b20      	cmp	r3, #32
 8004992:	d00a      	beq.n	80049aa <UART_SetConfig+0x1a2>
 8004994:	2b20      	cmp	r3, #32
 8004996:	d814      	bhi.n	80049c2 <UART_SetConfig+0x1ba>
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <UART_SetConfig+0x19a>
 800499c:	2b10      	cmp	r3, #16
 800499e:	d008      	beq.n	80049b2 <UART_SetConfig+0x1aa>
 80049a0:	e00f      	b.n	80049c2 <UART_SetConfig+0x1ba>
 80049a2:	2300      	movs	r3, #0
 80049a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049a8:	e06d      	b.n	8004a86 <UART_SetConfig+0x27e>
 80049aa:	2302      	movs	r3, #2
 80049ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049b0:	e069      	b.n	8004a86 <UART_SetConfig+0x27e>
 80049b2:	2304      	movs	r3, #4
 80049b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049b8:	e065      	b.n	8004a86 <UART_SetConfig+0x27e>
 80049ba:	2308      	movs	r3, #8
 80049bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049c0:	e061      	b.n	8004a86 <UART_SetConfig+0x27e>
 80049c2:	2310      	movs	r3, #16
 80049c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049c8:	e05d      	b.n	8004a86 <UART_SetConfig+0x27e>
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a4b      	ldr	r2, [pc, #300]	; (8004afc <UART_SetConfig+0x2f4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d125      	bne.n	8004a20 <UART_SetConfig+0x218>
 80049d4:	4b46      	ldr	r3, [pc, #280]	; (8004af0 <UART_SetConfig+0x2e8>)
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049de:	2bc0      	cmp	r3, #192	; 0xc0
 80049e0:	d016      	beq.n	8004a10 <UART_SetConfig+0x208>
 80049e2:	2bc0      	cmp	r3, #192	; 0xc0
 80049e4:	d818      	bhi.n	8004a18 <UART_SetConfig+0x210>
 80049e6:	2b80      	cmp	r3, #128	; 0x80
 80049e8:	d00a      	beq.n	8004a00 <UART_SetConfig+0x1f8>
 80049ea:	2b80      	cmp	r3, #128	; 0x80
 80049ec:	d814      	bhi.n	8004a18 <UART_SetConfig+0x210>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <UART_SetConfig+0x1f0>
 80049f2:	2b40      	cmp	r3, #64	; 0x40
 80049f4:	d008      	beq.n	8004a08 <UART_SetConfig+0x200>
 80049f6:	e00f      	b.n	8004a18 <UART_SetConfig+0x210>
 80049f8:	2300      	movs	r3, #0
 80049fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049fe:	e042      	b.n	8004a86 <UART_SetConfig+0x27e>
 8004a00:	2302      	movs	r3, #2
 8004a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a06:	e03e      	b.n	8004a86 <UART_SetConfig+0x27e>
 8004a08:	2304      	movs	r3, #4
 8004a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a0e:	e03a      	b.n	8004a86 <UART_SetConfig+0x27e>
 8004a10:	2308      	movs	r3, #8
 8004a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a16:	e036      	b.n	8004a86 <UART_SetConfig+0x27e>
 8004a18:	2310      	movs	r3, #16
 8004a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a1e:	e032      	b.n	8004a86 <UART_SetConfig+0x27e>
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a30      	ldr	r2, [pc, #192]	; (8004ae8 <UART_SetConfig+0x2e0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d12a      	bne.n	8004a80 <UART_SetConfig+0x278>
 8004a2a:	4b31      	ldr	r3, [pc, #196]	; (8004af0 <UART_SetConfig+0x2e8>)
 8004a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a38:	d01a      	beq.n	8004a70 <UART_SetConfig+0x268>
 8004a3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a3e:	d81b      	bhi.n	8004a78 <UART_SetConfig+0x270>
 8004a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a44:	d00c      	beq.n	8004a60 <UART_SetConfig+0x258>
 8004a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a4a:	d815      	bhi.n	8004a78 <UART_SetConfig+0x270>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <UART_SetConfig+0x250>
 8004a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a54:	d008      	beq.n	8004a68 <UART_SetConfig+0x260>
 8004a56:	e00f      	b.n	8004a78 <UART_SetConfig+0x270>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a5e:	e012      	b.n	8004a86 <UART_SetConfig+0x27e>
 8004a60:	2302      	movs	r3, #2
 8004a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a66:	e00e      	b.n	8004a86 <UART_SetConfig+0x27e>
 8004a68:	2304      	movs	r3, #4
 8004a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a6e:	e00a      	b.n	8004a86 <UART_SetConfig+0x27e>
 8004a70:	2308      	movs	r3, #8
 8004a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a76:	e006      	b.n	8004a86 <UART_SetConfig+0x27e>
 8004a78:	2310      	movs	r3, #16
 8004a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a7e:	e002      	b.n	8004a86 <UART_SetConfig+0x27e>
 8004a80:	2310      	movs	r3, #16
 8004a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a17      	ldr	r2, [pc, #92]	; (8004ae8 <UART_SetConfig+0x2e0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	f040 80a8 	bne.w	8004be2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d834      	bhi.n	8004b04 <UART_SetConfig+0x2fc>
 8004a9a:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <UART_SetConfig+0x298>)
 8004a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa0:	08004ac5 	.word	0x08004ac5
 8004aa4:	08004b05 	.word	0x08004b05
 8004aa8:	08004acd 	.word	0x08004acd
 8004aac:	08004b05 	.word	0x08004b05
 8004ab0:	08004ad3 	.word	0x08004ad3
 8004ab4:	08004b05 	.word	0x08004b05
 8004ab8:	08004b05 	.word	0x08004b05
 8004abc:	08004b05 	.word	0x08004b05
 8004ac0:	08004adb 	.word	0x08004adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ac4:	f7ff f856 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 8004ac8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004aca:	e021      	b.n	8004b10 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004acc:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <UART_SetConfig+0x2f8>)
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ad0:	e01e      	b.n	8004b10 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ad2:	f7fe ffe1 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 8004ad6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ad8:	e01a      	b.n	8004b10 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ade:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ae0:	e016      	b.n	8004b10 <UART_SetConfig+0x308>
 8004ae2:	bf00      	nop
 8004ae4:	cfff69f3 	.word	0xcfff69f3
 8004ae8:	40008000 	.word	0x40008000
 8004aec:	40013800 	.word	0x40013800
 8004af0:	40021000 	.word	0x40021000
 8004af4:	40004400 	.word	0x40004400
 8004af8:	40004800 	.word	0x40004800
 8004afc:	40004c00 	.word	0x40004c00
 8004b00:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b0e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 812a 	beq.w	8004d6c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	4a9e      	ldr	r2, [pc, #632]	; (8004d98 <UART_SetConfig+0x590>)
 8004b1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b22:	461a      	mov	r2, r3
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	4613      	mov	r3, r2
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	4413      	add	r3, r2
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d305      	bcc.n	8004b48 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d903      	bls.n	8004b50 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b4e:	e10d      	b.n	8004d6c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	2200      	movs	r2, #0
 8004b54:	60bb      	str	r3, [r7, #8]
 8004b56:	60fa      	str	r2, [r7, #12]
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	4a8e      	ldr	r2, [pc, #568]	; (8004d98 <UART_SetConfig+0x590>)
 8004b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2200      	movs	r2, #0
 8004b66:	603b      	str	r3, [r7, #0]
 8004b68:	607a      	str	r2, [r7, #4]
 8004b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b72:	f7fb fb51 	bl	8000218 <__aeabi_uldivmod>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	020b      	lsls	r3, r1, #8
 8004b88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b8c:	0202      	lsls	r2, r0, #8
 8004b8e:	6979      	ldr	r1, [r7, #20]
 8004b90:	6849      	ldr	r1, [r1, #4]
 8004b92:	0849      	lsrs	r1, r1, #1
 8004b94:	2000      	movs	r0, #0
 8004b96:	460c      	mov	r4, r1
 8004b98:	4605      	mov	r5, r0
 8004b9a:	eb12 0804 	adds.w	r8, r2, r4
 8004b9e:	eb43 0905 	adc.w	r9, r3, r5
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	469a      	mov	sl, r3
 8004baa:	4693      	mov	fp, r2
 8004bac:	4652      	mov	r2, sl
 8004bae:	465b      	mov	r3, fp
 8004bb0:	4640      	mov	r0, r8
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	f7fb fb30 	bl	8000218 <__aeabi_uldivmod>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bc6:	d308      	bcc.n	8004bda <UART_SetConfig+0x3d2>
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bce:	d204      	bcs.n	8004bda <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6a3a      	ldr	r2, [r7, #32]
 8004bd6:	60da      	str	r2, [r3, #12]
 8004bd8:	e0c8      	b.n	8004d6c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004be0:	e0c4      	b.n	8004d6c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bea:	d167      	bne.n	8004cbc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004bec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d828      	bhi.n	8004c46 <UART_SetConfig+0x43e>
 8004bf4:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <UART_SetConfig+0x3f4>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c21 	.word	0x08004c21
 8004c00:	08004c29 	.word	0x08004c29
 8004c04:	08004c31 	.word	0x08004c31
 8004c08:	08004c47 	.word	0x08004c47
 8004c0c:	08004c37 	.word	0x08004c37
 8004c10:	08004c47 	.word	0x08004c47
 8004c14:	08004c47 	.word	0x08004c47
 8004c18:	08004c47 	.word	0x08004c47
 8004c1c:	08004c3f 	.word	0x08004c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c20:	f7fe ffa8 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 8004c24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c26:	e014      	b.n	8004c52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c28:	f7fe ffba 	bl	8003ba0 <HAL_RCC_GetPCLK2Freq>
 8004c2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c2e:	e010      	b.n	8004c52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c30:	4b5a      	ldr	r3, [pc, #360]	; (8004d9c <UART_SetConfig+0x594>)
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c34:	e00d      	b.n	8004c52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c36:	f7fe ff2f 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 8004c3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c3c:	e009      	b.n	8004c52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c44:	e005      	b.n	8004c52 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 8089 	beq.w	8004d6c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	4a4e      	ldr	r2, [pc, #312]	; (8004d98 <UART_SetConfig+0x590>)
 8004c60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c64:	461a      	mov	r2, r3
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c6c:	005a      	lsls	r2, r3, #1
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	085b      	lsrs	r3, r3, #1
 8004c74:	441a      	add	r2, r3
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	2b0f      	cmp	r3, #15
 8004c84:	d916      	bls.n	8004cb4 <UART_SetConfig+0x4ac>
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c8c:	d212      	bcs.n	8004cb4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	f023 030f 	bic.w	r3, r3, #15
 8004c96:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	085b      	lsrs	r3, r3, #1
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	8bfb      	ldrh	r3, [r7, #30]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	8bfa      	ldrh	r2, [r7, #30]
 8004cb0:	60da      	str	r2, [r3, #12]
 8004cb2:	e05b      	b.n	8004d6c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004cba:	e057      	b.n	8004d6c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d828      	bhi.n	8004d16 <UART_SetConfig+0x50e>
 8004cc4:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <UART_SetConfig+0x4c4>)
 8004cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cca:	bf00      	nop
 8004ccc:	08004cf1 	.word	0x08004cf1
 8004cd0:	08004cf9 	.word	0x08004cf9
 8004cd4:	08004d01 	.word	0x08004d01
 8004cd8:	08004d17 	.word	0x08004d17
 8004cdc:	08004d07 	.word	0x08004d07
 8004ce0:	08004d17 	.word	0x08004d17
 8004ce4:	08004d17 	.word	0x08004d17
 8004ce8:	08004d17 	.word	0x08004d17
 8004cec:	08004d0f 	.word	0x08004d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf0:	f7fe ff40 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 8004cf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cf6:	e014      	b.n	8004d22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cf8:	f7fe ff52 	bl	8003ba0 <HAL_RCC_GetPCLK2Freq>
 8004cfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cfe:	e010      	b.n	8004d22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d00:	4b26      	ldr	r3, [pc, #152]	; (8004d9c <UART_SetConfig+0x594>)
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d04:	e00d      	b.n	8004d22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d06:	f7fe fec7 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 8004d0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d0c:	e009      	b.n	8004d22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d14:	e005      	b.n	8004d22 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d20:	bf00      	nop
    }

    if (pclk != 0U)
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d021      	beq.n	8004d6c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	4a1a      	ldr	r2, [pc, #104]	; (8004d98 <UART_SetConfig+0x590>)
 8004d2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d32:	461a      	mov	r2, r3
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	085b      	lsrs	r3, r3, #1
 8004d40:	441a      	add	r2, r3
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	2b0f      	cmp	r3, #15
 8004d50:	d909      	bls.n	8004d66 <UART_SetConfig+0x55e>
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d58:	d205      	bcs.n	8004d66 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60da      	str	r2, [r3, #12]
 8004d64:	e002      	b.n	8004d6c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2200      	movs	r2, #0
 8004d86:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004d88:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3730      	adds	r7, #48	; 0x30
 8004d90:	46bd      	mov	sp, r7
 8004d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d96:	bf00      	nop
 8004d98:	08009c94 	.word	0x08009c94
 8004d9c:	00f42400 	.word	0x00f42400

08004da0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e34:	f003 0310 	and.w	r3, r3, #16
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01a      	beq.n	8004eb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e9e:	d10a      	bne.n	8004eb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]
  }
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ef4:	f7fb fdec 	bl	8000ad0 <HAL_GetTick>
 8004ef8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d10e      	bne.n	8004f26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f82f 	bl	8004f7a <UART_WaitOnFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e025      	b.n	8004f72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d10e      	bne.n	8004f52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f819 	bl	8004f7a <UART_WaitOnFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e00f      	b.n	8004f72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b09c      	sub	sp, #112	; 0x70
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	60f8      	str	r0, [r7, #12]
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	603b      	str	r3, [r7, #0]
 8004f86:	4613      	mov	r3, r2
 8004f88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8a:	e0a9      	b.n	80050e0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	f000 80a5 	beq.w	80050e0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f96:	f7fb fd9b 	bl	8000ad0 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d302      	bcc.n	8004fac <UART_WaitOnFlagUntilTimeout+0x32>
 8004fa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d140      	bne.n	800502e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fc0:	667b      	str	r3, [r7, #100]	; 0x64
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fcc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e6      	bne.n	8004fac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe8:	e853 3f00 	ldrex	r3, [r3]
 8004fec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff0:	f023 0301 	bic.w	r3, r3, #1
 8004ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3308      	adds	r3, #8
 8004ffc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ffe:	64ba      	str	r2, [r7, #72]	; 0x48
 8005000:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005002:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005006:	e841 2300 	strex	r3, r2, [r1]
 800500a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800500c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1e5      	bne.n	8004fde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2220      	movs	r2, #32
 8005016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e069      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	d051      	beq.n	80050e0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800504a:	d149      	bne.n	80050e0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005054:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800506a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005074:	637b      	str	r3, [r7, #52]	; 0x34
 8005076:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800507a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e6      	bne.n	8005056 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3308      	adds	r3, #8
 800508e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	613b      	str	r3, [r7, #16]
   return(result);
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f023 0301 	bic.w	r3, r3, #1
 800509e:	66bb      	str	r3, [r7, #104]	; 0x68
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3308      	adds	r3, #8
 80050a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050a8:	623a      	str	r2, [r7, #32]
 80050aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	69f9      	ldr	r1, [r7, #28]
 80050ae:	6a3a      	ldr	r2, [r7, #32]
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e5      	bne.n	8005088 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e010      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	69da      	ldr	r2, [r3, #28]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	4013      	ands	r3, r2
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	bf0c      	ite	eq
 80050f0:	2301      	moveq	r3, #1
 80050f2:	2300      	movne	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	79fb      	ldrb	r3, [r7, #7]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	f43f af46 	beq.w	8004f8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3770      	adds	r7, #112	; 0x70
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
	...

0800510c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b096      	sub	sp, #88	; 0x58
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	4613      	mov	r3, r2
 8005118:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	88fa      	ldrh	r2, [r7, #6]
 8005124:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2222      	movs	r2, #34	; 0x22
 8005134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800513c:	2b00      	cmp	r3, #0
 800513e:	d02c      	beq.n	800519a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005144:	4a42      	ldr	r2, [pc, #264]	; (8005250 <UART_Start_Receive_DMA+0x144>)
 8005146:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800514c:	4a41      	ldr	r2, [pc, #260]	; (8005254 <UART_Start_Receive_DMA+0x148>)
 800514e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005154:	4a40      	ldr	r2, [pc, #256]	; (8005258 <UART_Start_Receive_DMA+0x14c>)
 8005156:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800515c:	2200      	movs	r2, #0
 800515e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3324      	adds	r3, #36	; 0x24
 800516a:	4619      	mov	r1, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005170:	461a      	mov	r2, r3
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	f7fb fe70 	bl	8000e58 <HAL_DMA_Start_IT>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00d      	beq.n	800519a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2210      	movs	r2, #16
 8005182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2220      	movs	r2, #32
 8005192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e055      	b.n	8005246 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d018      	beq.n	80051dc <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b2:	e853 3f00 	ldrex	r3, [r3]
 80051b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051be:	657b      	str	r3, [r7, #84]	; 0x54
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	461a      	mov	r2, r3
 80051c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80051ca:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051d0:	e841 2300 	strex	r3, r2, [r1]
 80051d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e6      	bne.n	80051aa <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3308      	adds	r3, #8
 80051e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e6:	e853 3f00 	ldrex	r3, [r3]
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	f043 0301 	orr.w	r3, r3, #1
 80051f2:	653b      	str	r3, [r7, #80]	; 0x50
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3308      	adds	r3, #8
 80051fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80051fc:	637a      	str	r2, [r7, #52]	; 0x34
 80051fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800520a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e5      	bne.n	80051dc <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3308      	adds	r3, #8
 8005216:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	e853 3f00 	ldrex	r3, [r3]
 800521e:	613b      	str	r3, [r7, #16]
   return(result);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3308      	adds	r3, #8
 800522e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005230:	623a      	str	r2, [r7, #32]
 8005232:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005234:	69f9      	ldr	r1, [r7, #28]
 8005236:	6a3a      	ldr	r2, [r7, #32]
 8005238:	e841 2300 	strex	r3, r2, [r1]
 800523c:	61bb      	str	r3, [r7, #24]
   return(result);
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e5      	bne.n	8005210 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3758      	adds	r7, #88	; 0x58
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	080053ab 	.word	0x080053ab
 8005254:	080054d1 	.word	0x080054d1
 8005258:	08005509 	.word	0x08005509

0800525c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800525c:	b480      	push	{r7}
 800525e:	b08f      	sub	sp, #60	; 0x3c
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	e853 3f00 	ldrex	r3, [r3]
 8005270:	61fb      	str	r3, [r7, #28]
   return(result);
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005278:	637b      	str	r3, [r7, #52]	; 0x34
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005284:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005286:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1e6      	bne.n	8005264 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3308      	adds	r3, #8
 800529c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80052ac:	633b      	str	r3, [r7, #48]	; 0x30
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3308      	adds	r3, #8
 80052b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052b6:	61ba      	str	r2, [r7, #24]
 80052b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	6979      	ldr	r1, [r7, #20]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	613b      	str	r3, [r7, #16]
   return(result);
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e5      	bne.n	8005296 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80052d2:	bf00      	nop
 80052d4:	373c      	adds	r7, #60	; 0x3c
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052de:	b480      	push	{r7}
 80052e0:	b095      	sub	sp, #84	; 0x54
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ee:	e853 3f00 	ldrex	r3, [r3]
 80052f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
 8005302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005304:	643b      	str	r3, [r7, #64]	; 0x40
 8005306:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800530a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e6      	bne.n	80052e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3308      	adds	r3, #8
 800531e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	61fb      	str	r3, [r7, #28]
   return(result);
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800532e:	f023 0301 	bic.w	r3, r3, #1
 8005332:	64bb      	str	r3, [r7, #72]	; 0x48
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3308      	adds	r3, #8
 800533a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800533c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800533e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005340:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005344:	e841 2300 	strex	r3, r2, [r1]
 8005348:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e3      	bne.n	8005318 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005354:	2b01      	cmp	r3, #1
 8005356:	d118      	bne.n	800538a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	e853 3f00 	ldrex	r3, [r3]
 8005364:	60bb      	str	r3, [r7, #8]
   return(result);
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f023 0310 	bic.w	r3, r3, #16
 800536c:	647b      	str	r3, [r7, #68]	; 0x44
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005376:	61bb      	str	r3, [r7, #24]
 8005378:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537a:	6979      	ldr	r1, [r7, #20]
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	e841 2300 	strex	r3, r2, [r1]
 8005382:	613b      	str	r3, [r7, #16]
   return(result);
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1e6      	bne.n	8005358 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800539e:	bf00      	nop
 80053a0:	3754      	adds	r7, #84	; 0x54
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b09c      	sub	sp, #112	; 0x70
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d171      	bne.n	80054aa <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80053c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c8:	2200      	movs	r2, #0
 80053ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d6:	e853 3f00 	ldrex	r3, [r3]
 80053da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80053e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80053ee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053f4:	e841 2300 	strex	r3, r2, [r1]
 80053f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e6      	bne.n	80053ce <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3308      	adds	r3, #8
 8005406:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005412:	f023 0301 	bic.w	r3, r3, #1
 8005416:	667b      	str	r3, [r7, #100]	; 0x64
 8005418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3308      	adds	r3, #8
 800541e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005420:	647a      	str	r2, [r7, #68]	; 0x44
 8005422:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005424:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005426:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005428:	e841 2300 	strex	r3, r2, [r1]
 800542c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800542e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e5      	bne.n	8005400 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3308      	adds	r3, #8
 800543a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	623b      	str	r3, [r7, #32]
   return(result);
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800544a:	663b      	str	r3, [r7, #96]	; 0x60
 800544c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3308      	adds	r3, #8
 8005452:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005454:	633a      	str	r2, [r7, #48]	; 0x30
 8005456:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800545a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e5      	bne.n	8005434 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800546a:	2220      	movs	r2, #32
 800546c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005474:	2b01      	cmp	r3, #1
 8005476:	d118      	bne.n	80054aa <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	60fb      	str	r3, [r7, #12]
   return(result);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f023 0310 	bic.w	r3, r3, #16
 800548c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800548e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005496:	61fb      	str	r3, [r7, #28]
 8005498:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549a:	69b9      	ldr	r1, [r7, #24]
 800549c:	69fa      	ldr	r2, [r7, #28]
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	617b      	str	r3, [r7, #20]
   return(result);
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1e6      	bne.n	8005478 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d107      	bne.n	80054c2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80054b8:	4619      	mov	r1, r3
 80054ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80054bc:	f7ff f998 	bl	80047f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054c0:	e002      	b.n	80054c8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80054c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80054c4:	f7fb f82a 	bl	800051c <HAL_UART_RxCpltCallback>
}
 80054c8:	bf00      	nop
 80054ca:	3770      	adds	r7, #112	; 0x70
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054dc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d109      	bne.n	80054fa <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80054ec:	085b      	lsrs	r3, r3, #1
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	4619      	mov	r1, r3
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f7ff f97c 	bl	80047f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054f8:	e002      	b.n	8005500 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f7ff f964 	bl	80047c8 <HAL_UART_RxHalfCpltCallback>
}
 8005500:	bf00      	nop
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005514:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800551c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005524:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005530:	2b80      	cmp	r3, #128	; 0x80
 8005532:	d109      	bne.n	8005548 <UART_DMAError+0x40>
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	2b21      	cmp	r3, #33	; 0x21
 8005538:	d106      	bne.n	8005548 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2200      	movs	r2, #0
 800553e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005542:	6978      	ldr	r0, [r7, #20]
 8005544:	f7ff fe8a 	bl	800525c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005552:	2b40      	cmp	r3, #64	; 0x40
 8005554:	d109      	bne.n	800556a <UART_DMAError+0x62>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b22      	cmp	r3, #34	; 0x22
 800555a:	d106      	bne.n	800556a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	2200      	movs	r2, #0
 8005560:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005564:	6978      	ldr	r0, [r7, #20]
 8005566:	f7ff feba 	bl	80052de <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005570:	f043 0210 	orr.w	r2, r3, #16
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800557a:	6978      	ldr	r0, [r7, #20]
 800557c:	f7ff f92e 	bl	80047dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005580:	bf00      	nop
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005594:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f7ff f918 	bl	80047dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ac:	bf00      	nop
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d0:	61fb      	str	r3, [r7, #28]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	61bb      	str	r3, [r7, #24]
 80055dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055de:	6979      	ldr	r1, [r7, #20]
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	e841 2300 	strex	r3, r2, [r1]
 80055e6:	613b      	str	r3, [r7, #16]
   return(result);
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1e6      	bne.n	80055bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7ff f8d9 	bl	80047b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005602:	bf00      	nop
 8005604:	3720      	adds	r7, #32
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005646:	b480      	push	{r7}
 8005648:	b085      	sub	sp, #20
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_UARTEx_DisableFifoMode+0x16>
 8005658:	2302      	movs	r3, #2
 800565a:	e027      	b.n	80056ac <HAL_UARTEx_DisableFifoMode+0x66>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2224      	movs	r2, #36	; 0x24
 8005668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0201 	bic.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800568a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2220      	movs	r2, #32
 800569e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e02d      	b.n	800572c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2224      	movs	r2, #36	; 0x24
 80056dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0201 	bic.w	r2, r2, #1
 80056f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f84f 	bl	80057b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005748:	2302      	movs	r3, #2
 800574a:	e02d      	b.n	80057a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2224      	movs	r2, #36	; 0x24
 8005758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0201 	bic.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f811 	bl	80057b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2220      	movs	r2, #32
 800579a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d108      	bne.n	80057d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80057d0:	e031      	b.n	8005836 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80057d2:	2308      	movs	r3, #8
 80057d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057d6:	2308      	movs	r3, #8
 80057d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	0e5b      	lsrs	r3, r3, #25
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	0f5b      	lsrs	r3, r3, #29
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057fa:	7bbb      	ldrb	r3, [r7, #14]
 80057fc:	7b3a      	ldrb	r2, [r7, #12]
 80057fe:	4911      	ldr	r1, [pc, #68]	; (8005844 <UARTEx_SetNbDataToProcess+0x94>)
 8005800:	5c8a      	ldrb	r2, [r1, r2]
 8005802:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005806:	7b3a      	ldrb	r2, [r7, #12]
 8005808:	490f      	ldr	r1, [pc, #60]	; (8005848 <UARTEx_SetNbDataToProcess+0x98>)
 800580a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800580c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005810:	b29a      	uxth	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005818:	7bfb      	ldrb	r3, [r7, #15]
 800581a:	7b7a      	ldrb	r2, [r7, #13]
 800581c:	4909      	ldr	r1, [pc, #36]	; (8005844 <UARTEx_SetNbDataToProcess+0x94>)
 800581e:	5c8a      	ldrb	r2, [r1, r2]
 8005820:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005824:	7b7a      	ldrb	r2, [r7, #13]
 8005826:	4908      	ldr	r1, [pc, #32]	; (8005848 <UARTEx_SetNbDataToProcess+0x98>)
 8005828:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800582a:	fb93 f3f2 	sdiv	r3, r3, r2
 800582e:	b29a      	uxth	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005836:	bf00      	nop
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	08009cac 	.word	0x08009cac
 8005848:	08009cb4 	.word	0x08009cb4

0800584c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800585c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005860:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	b29a      	uxth	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800587a:	b480      	push	{r7}
 800587c:	b085      	sub	sp, #20
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005882:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005886:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	b29b      	uxth	r3, r3
 8005894:	43db      	mvns	r3, r3
 8005896:	b29b      	uxth	r3, r3
 8005898:	4013      	ands	r3, r2
 800589a:	b29a      	uxth	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80058b0:	b084      	sub	sp, #16
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	f107 0014 	add.w	r0, r7, #20
 80058be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	b004      	add	sp, #16
 80058f0:	4770      	bx	lr
	...

080058f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b09d      	sub	sp, #116	; 0x74
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	b29b      	uxth	r3, r3
 8005912:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	78db      	ldrb	r3, [r3, #3]
 8005922:	2b03      	cmp	r3, #3
 8005924:	d81f      	bhi.n	8005966 <USB_ActivateEndpoint+0x72>
 8005926:	a201      	add	r2, pc, #4	; (adr r2, 800592c <USB_ActivateEndpoint+0x38>)
 8005928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592c:	0800593d 	.word	0x0800593d
 8005930:	08005959 	.word	0x08005959
 8005934:	0800596f 	.word	0x0800596f
 8005938:	0800594b 	.word	0x0800594b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800593c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005940:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005944:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005948:	e012      	b.n	8005970 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800594a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800594e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005952:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005956:	e00b      	b.n	8005970 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005958:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800595c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005960:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005964:	e004      	b.n	8005970 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800596c:	e000      	b.n	8005970 <USB_ActivateEndpoint+0x7c>
      break;
 800596e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	441a      	add	r2, r3
 800597a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800597e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800598a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800598e:	b29b      	uxth	r3, r3
 8005990:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	b21b      	sxth	r3, r3
 80059a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059aa:	b21a      	sxth	r2, r3
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	b21b      	sxth	r3, r3
 80059b2:	4313      	orrs	r3, r2
 80059b4:	b21b      	sxth	r3, r3
 80059b6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	441a      	add	r2, r3
 80059c4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80059c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d8:	b29b      	uxth	r3, r3
 80059da:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	7b1b      	ldrb	r3, [r3, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f040 8149 	bne.w	8005c78 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	785b      	ldrb	r3, [r3, #1]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 8084 	beq.w	8005af8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	61bb      	str	r3, [r7, #24]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	461a      	mov	r2, r3
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	4413      	add	r3, r2
 8005a02:	61bb      	str	r3, [r7, #24]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	00da      	lsls	r2, r3, #3
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	88db      	ldrh	r3, [r3, #6]
 8005a18:	085b      	lsrs	r3, r3, #1
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	827b      	strh	r3, [r7, #18]
 8005a32:	8a7b      	ldrh	r3, [r7, #18]
 8005a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d01b      	beq.n	8005a74 <USB_ActivateEndpoint+0x180>
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a52:	823b      	strh	r3, [r7, #16]
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	441a      	add	r2, r3
 8005a5e:	8a3b      	ldrh	r3, [r7, #16]
 8005a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	78db      	ldrb	r3, [r3, #3]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d020      	beq.n	8005abe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a92:	81bb      	strh	r3, [r7, #12]
 8005a94:	89bb      	ldrh	r3, [r7, #12]
 8005a96:	f083 0320 	eor.w	r3, r3, #32
 8005a9a:	81bb      	strh	r3, [r7, #12]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	441a      	add	r2, r3
 8005aa6:	89bb      	ldrh	r3, [r7, #12]
 8005aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	8013      	strh	r3, [r2, #0]
 8005abc:	e2a6      	b.n	800600c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad4:	81fb      	strh	r3, [r7, #14]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	441a      	add	r2, r3
 8005ae0:	89fb      	ldrh	r3, [r7, #14]
 8005ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	8013      	strh	r3, [r2, #0]
 8005af6:	e289      	b.n	800600c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	633b      	str	r3, [r7, #48]	; 0x30
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	4413      	add	r3, r2
 8005b0a:	633b      	str	r3, [r7, #48]	; 0x30
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	00da      	lsls	r2, r3, #3
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	4413      	add	r3, r2
 8005b16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	88db      	ldrh	r3, [r3, #6]
 8005b20:	085b      	lsrs	r3, r3, #1
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	461a      	mov	r2, r3
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3c:	4413      	add	r3, r2
 8005b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	00da      	lsls	r2, r3, #3
 8005b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b48:	4413      	add	r3, r2
 8005b4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	2b3e      	cmp	r3, #62	; 0x3e
 8005b56:	d918      	bls.n	8005b8a <USB_ActivateEndpoint+0x296>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	095b      	lsrs	r3, r3, #5
 8005b5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f003 031f 	and.w	r3, r3, #31
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d102      	bne.n	8005b72 <USB_ActivateEndpoint+0x27e>
 8005b6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	029b      	lsls	r3, r3, #10
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	801a      	strh	r2, [r3, #0]
 8005b88:	e029      	b.n	8005bde <USB_ActivateEndpoint+0x2ea>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d112      	bne.n	8005bb8 <USB_ActivateEndpoint+0x2c4>
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	801a      	strh	r2, [r3, #0]
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	801a      	strh	r2, [r3, #0]
 8005bb6:	e012      	b.n	8005bde <USB_ActivateEndpoint+0x2ea>
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	085b      	lsrs	r3, r3, #1
 8005bbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <USB_ActivateEndpoint+0x2de>
 8005bcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bce:	3301      	adds	r3, #1
 8005bd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	029b      	lsls	r3, r3, #10
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	847b      	strh	r3, [r7, #34]	; 0x22
 8005bec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d01b      	beq.n	8005c2e <USB_ActivateEndpoint+0x33a>
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0c:	843b      	strh	r3, [r7, #32]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	441a      	add	r2, r3
 8005c18:	8c3b      	ldrh	r3, [r7, #32]
 8005c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c44:	83fb      	strh	r3, [r7, #30]
 8005c46:	8bfb      	ldrh	r3, [r7, #30]
 8005c48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c4c:	83fb      	strh	r3, [r7, #30]
 8005c4e:	8bfb      	ldrh	r3, [r7, #30]
 8005c50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c54:	83fb      	strh	r3, [r7, #30]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	441a      	add	r2, r3
 8005c60:	8bfb      	ldrh	r3, [r7, #30]
 8005c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	8013      	strh	r3, [r2, #0]
 8005c76:	e1c9      	b.n	800600c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	78db      	ldrb	r3, [r3, #3]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d11e      	bne.n	8005cbe <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c96:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	441a      	add	r2, r3
 8005ca4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	8013      	strh	r3, [r2, #0]
 8005cbc:	e01d      	b.n	8005cfa <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	441a      	add	r2, r3
 8005ce2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	461a      	mov	r2, r3
 8005d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d0a:	4413      	add	r3, r2
 8005d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	00da      	lsls	r2, r3, #3
 8005d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	891b      	ldrh	r3, [r3, #8]
 8005d22:	085b      	lsrs	r3, r3, #1
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d2c:	801a      	strh	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	657b      	str	r3, [r7, #84]	; 0x54
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d3e:	4413      	add	r3, r2
 8005d40:	657b      	str	r3, [r7, #84]	; 0x54
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	00da      	lsls	r2, r3, #3
 8005d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d50:	653b      	str	r3, [r7, #80]	; 0x50
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	895b      	ldrh	r3, [r3, #10]
 8005d56:	085b      	lsrs	r3, r3, #1
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d60:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	785b      	ldrb	r3, [r3, #1]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f040 8093 	bne.w	8005e92 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005d7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01b      	beq.n	8005dc0 <USB_ActivateEndpoint+0x4cc>
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	441a      	add	r2, r3
 8005daa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005dce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01b      	beq.n	8005e10 <USB_ActivateEndpoint+0x51c>
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dee:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	441a      	add	r2, r3
 8005dfa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e26:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e28:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e2a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e2e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e30:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e32:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e36:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	441a      	add	r2, r3
 8005e42:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e6e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	441a      	add	r2, r3
 8005e7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	8013      	strh	r3, [r2, #0]
 8005e90:	e0bc      	b.n	800600c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005ea2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d01d      	beq.n	8005eea <USB_ActivateEndpoint+0x5f6>
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	441a      	add	r2, r3
 8005ed2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ede:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005efa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d01d      	beq.n	8005f42 <USB_ActivateEndpoint+0x64e>
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	441a      	add	r2, r3
 8005f2a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	78db      	ldrb	r3, [r3, #3]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d024      	beq.n	8005f94 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f60:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f68:	f083 0320 	eor.w	r3, r3, #32
 8005f6c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	441a      	add	r2, r3
 8005f7a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	8013      	strh	r3, [r2, #0]
 8005f92:	e01d      	b.n	8005fd0 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005faa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	441a      	add	r2, r3
 8005fb8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005fbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	441a      	add	r2, r3
 8005ff4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006008:	b29b      	uxth	r3, r3
 800600a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800600c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006010:	4618      	mov	r0, r3
 8006012:	3774      	adds	r7, #116	; 0x74
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800601c:	b480      	push	{r7}
 800601e:	b08d      	sub	sp, #52	; 0x34
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	7b1b      	ldrb	r3, [r3, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	f040 808e 	bne.w	800614c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	785b      	ldrb	r3, [r3, #1]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d044      	beq.n	80060c2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	81bb      	strh	r3, [r7, #12]
 8006046:	89bb      	ldrh	r3, [r7, #12]
 8006048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604c:	2b00      	cmp	r3, #0
 800604e:	d01b      	beq.n	8006088 <USB_DeactivateEndpoint+0x6c>
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	b29b      	uxth	r3, r3
 800605e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006066:	817b      	strh	r3, [r7, #10]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	441a      	add	r2, r3
 8006072:	897b      	ldrh	r3, [r7, #10]
 8006074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006080:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006084:	b29b      	uxth	r3, r3
 8006086:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	881b      	ldrh	r3, [r3, #0]
 8006094:	b29b      	uxth	r3, r3
 8006096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800609a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800609e:	813b      	strh	r3, [r7, #8]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	441a      	add	r2, r3
 80060aa:	893b      	ldrh	r3, [r7, #8]
 80060ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060bc:	b29b      	uxth	r3, r3
 80060be:	8013      	strh	r3, [r2, #0]
 80060c0:	e192      	b.n	80063e8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	827b      	strh	r3, [r7, #18]
 80060d0:	8a7b      	ldrh	r3, [r7, #18]
 80060d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d01b      	beq.n	8006112 <USB_DeactivateEndpoint+0xf6>
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f0:	823b      	strh	r3, [r7, #16]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	441a      	add	r2, r3
 80060fc:	8a3b      	ldrh	r3, [r7, #16]
 80060fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006106:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800610a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800610e:	b29b      	uxth	r3, r3
 8006110:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	b29b      	uxth	r3, r3
 8006120:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006128:	81fb      	strh	r3, [r7, #14]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	441a      	add	r2, r3
 8006134:	89fb      	ldrh	r3, [r7, #14]
 8006136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800613a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006146:	b29b      	uxth	r3, r3
 8006148:	8013      	strh	r3, [r2, #0]
 800614a:	e14d      	b.n	80063e8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	785b      	ldrb	r3, [r3, #1]
 8006150:	2b00      	cmp	r3, #0
 8006152:	f040 80a5 	bne.w	80062a0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	843b      	strh	r3, [r7, #32]
 8006164:	8c3b      	ldrh	r3, [r7, #32]
 8006166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d01b      	beq.n	80061a6 <USB_DeactivateEndpoint+0x18a>
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006184:	83fb      	strh	r3, [r7, #30]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	441a      	add	r2, r3
 8006190:	8bfb      	ldrh	r3, [r7, #30]
 8006192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800619a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800619e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	83bb      	strh	r3, [r7, #28]
 80061b4:	8bbb      	ldrh	r3, [r7, #28]
 80061b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d01b      	beq.n	80061f6 <USB_DeactivateEndpoint+0x1da>
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d4:	837b      	strh	r3, [r7, #26]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	441a      	add	r2, r3
 80061e0:	8b7b      	ldrh	r3, [r7, #26]
 80061e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	b29b      	uxth	r3, r3
 8006204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620c:	833b      	strh	r3, [r7, #24]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	441a      	add	r2, r3
 8006218:	8b3b      	ldrh	r3, [r7, #24]
 800621a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800621e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006226:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800622a:	b29b      	uxth	r3, r3
 800622c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	b29b      	uxth	r3, r3
 800623c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006244:	82fb      	strh	r3, [r7, #22]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	441a      	add	r2, r3
 8006250:	8afb      	ldrh	r3, [r7, #22]
 8006252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800625a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800625e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006262:	b29b      	uxth	r3, r3
 8006264:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	b29b      	uxth	r3, r3
 8006274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800627c:	82bb      	strh	r3, [r7, #20]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	441a      	add	r2, r3
 8006288:	8abb      	ldrh	r3, [r7, #20]
 800628a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800628e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800629a:	b29b      	uxth	r3, r3
 800629c:	8013      	strh	r3, [r2, #0]
 800629e:	e0a3      	b.n	80063e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80062ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80062b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d01b      	beq.n	80062f0 <USB_DeactivateEndpoint+0x2d4>
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	441a      	add	r2, r3
 80062da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80062dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80062fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01b      	beq.n	8006340 <USB_DeactivateEndpoint+0x324>
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800631a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	441a      	add	r2, r3
 800632a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800632c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006338:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800633c:	b29b      	uxth	r3, r3
 800633e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	b29b      	uxth	r3, r3
 800634e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006356:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	441a      	add	r2, r3
 8006362:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800636c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006374:	b29b      	uxth	r3, r3
 8006376:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4413      	add	r3, r2
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	b29b      	uxth	r3, r3
 8006386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800638a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800638e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	441a      	add	r2, r3
 800639a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800639c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	881b      	ldrh	r3, [r3, #0]
 80063bc:	b29b      	uxth	r3, r3
 80063be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	441a      	add	r2, r3
 80063d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3734      	adds	r7, #52	; 0x34
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b0c2      	sub	sp, #264	; 0x108
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006400:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006404:	6018      	str	r0, [r3, #0]
 8006406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006414:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	785b      	ldrb	r3, [r3, #1]
 800641c:	2b01      	cmp	r3, #1
 800641e:	f040 867b 	bne.w	8007118 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699a      	ldr	r2, [r3, #24]
 800642e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	429a      	cmp	r2, r3
 800643c:	d908      	bls.n	8006450 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800643e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800644e:	e007      	b.n	8006460 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	7b1b      	ldrb	r3, [r3, #12]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d13a      	bne.n	80064e6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6959      	ldr	r1, [r3, #20]
 800647c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	88da      	ldrh	r2, [r3, #6]
 8006488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648c:	b29b      	uxth	r3, r3
 800648e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006492:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006496:	6800      	ldr	r0, [r0, #0]
 8006498:	f001 fc1d 	bl	8007cd6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800649c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	613b      	str	r3, [r7, #16]
 80064a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	461a      	mov	r2, r3
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	4413      	add	r3, r2
 80064be:	613b      	str	r3, [r7, #16]
 80064c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	00da      	lsls	r2, r3, #3
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	4413      	add	r3, r2
 80064d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064dc:	b29a      	uxth	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	801a      	strh	r2, [r3, #0]
 80064e2:	f000 bde3 	b.w	80070ac <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80064e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	78db      	ldrb	r3, [r3, #3]
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	f040 843a 	bne.w	8006d6c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80064f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6a1a      	ldr	r2, [r3, #32]
 8006504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	429a      	cmp	r2, r3
 8006512:	f240 83b7 	bls.w	8006c84 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800651a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	b29b      	uxth	r3, r3
 8006534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006544:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	441a      	add	r2, r3
 800655a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800655e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006566:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800656a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656e:	b29b      	uxth	r3, r3
 8006570:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6a1a      	ldr	r2, [r3, #32]
 800657e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006582:	1ad2      	subs	r2, r2, r3
 8006584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006594:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800659e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 81b3 	beq.w	800691e <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	633b      	str	r3, [r7, #48]	; 0x30
 80065c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	785b      	ldrb	r3, [r3, #1]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d16d      	bne.n	80066b0 <USB_EPStartXfer+0x2ba>
 80065d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	62bb      	str	r3, [r7, #40]	; 0x28
 80065e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	461a      	mov	r2, r3
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	4413      	add	r3, r2
 80065f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80065f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	00da      	lsls	r2, r3, #3
 8006606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006608:	4413      	add	r3, r2
 800660a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800660e:	627b      	str	r3, [r7, #36]	; 0x24
 8006610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006614:	2b3e      	cmp	r3, #62	; 0x3e
 8006616:	d91c      	bls.n	8006652 <USB_EPStartXfer+0x25c>
 8006618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800661c:	095b      	lsrs	r3, r3, #5
 800661e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006626:	f003 031f 	and.w	r3, r3, #31
 800662a:	2b00      	cmp	r3, #0
 800662c:	d104      	bne.n	8006638 <USB_EPStartXfer+0x242>
 800662e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006632:	3b01      	subs	r3, #1
 8006634:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006638:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800663c:	b29b      	uxth	r3, r3
 800663e:	029b      	lsls	r3, r3, #10
 8006640:	b29b      	uxth	r3, r3
 8006642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800664a:	b29a      	uxth	r2, r3
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	801a      	strh	r2, [r3, #0]
 8006650:	e053      	b.n	80066fa <USB_EPStartXfer+0x304>
 8006652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006656:	2b00      	cmp	r3, #0
 8006658:	d112      	bne.n	8006680 <USB_EPStartXfer+0x28a>
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006664:	b29a      	uxth	r2, r3
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	801a      	strh	r2, [r3, #0]
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	b29b      	uxth	r3, r3
 8006670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006678:	b29a      	uxth	r2, r3
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	801a      	strh	r2, [r3, #0]
 800667e:	e03c      	b.n	80066fa <USB_EPStartXfer+0x304>
 8006680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006684:	085b      	lsrs	r3, r3, #1
 8006686:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800668a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d004      	beq.n	80066a0 <USB_EPStartXfer+0x2aa>
 8006696:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800669a:	3301      	adds	r3, #1
 800669c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80066a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	029b      	lsls	r3, r3, #10
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	801a      	strh	r2, [r3, #0]
 80066ae:	e024      	b.n	80066fa <USB_EPStartXfer+0x304>
 80066b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	785b      	ldrb	r3, [r3, #1]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d11c      	bne.n	80066fa <USB_EPStartXfer+0x304>
 80066c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	4413      	add	r3, r2
 80066d6:	633b      	str	r3, [r7, #48]	; 0x30
 80066d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	00da      	lsls	r2, r3, #3
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	4413      	add	r3, r2
 80066ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80066fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	895b      	ldrh	r3, [r3, #10]
 8006706:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800670a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6959      	ldr	r1, [r3, #20]
 8006716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800671a:	b29b      	uxth	r3, r3
 800671c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006720:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006724:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006728:	6800      	ldr	r0, [r0, #0]
 800672a:	f001 fad4 	bl	8007cd6 <USB_WritePMA>
            ep->xfer_buff += len;
 800672e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695a      	ldr	r2, [r3, #20]
 800673a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800673e:	441a      	add	r2, r3
 8006740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800674c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6a1a      	ldr	r2, [r3, #32]
 8006758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	429a      	cmp	r2, r3
 8006766:	d90f      	bls.n	8006788 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800676c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6a1a      	ldr	r2, [r3, #32]
 8006774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006778:	1ad2      	subs	r2, r2, r3
 800677a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	621a      	str	r2, [r3, #32]
 8006786:	e00e      	b.n	80067a6 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800678c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2200      	movs	r2, #0
 80067a4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	785b      	ldrb	r3, [r3, #1]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d16d      	bne.n	8006892 <USB_EPStartXfer+0x49c>
 80067b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	61bb      	str	r3, [r7, #24]
 80067c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	461a      	mov	r2, r3
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	4413      	add	r3, r2
 80067d8:	61bb      	str	r3, [r7, #24]
 80067da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	00da      	lsls	r2, r3, #3
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	4413      	add	r3, r2
 80067ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067f0:	617b      	str	r3, [r7, #20]
 80067f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f6:	2b3e      	cmp	r3, #62	; 0x3e
 80067f8:	d91c      	bls.n	8006834 <USB_EPStartXfer+0x43e>
 80067fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067fe:	095b      	lsrs	r3, r3, #5
 8006800:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006808:	f003 031f 	and.w	r3, r3, #31
 800680c:	2b00      	cmp	r3, #0
 800680e:	d104      	bne.n	800681a <USB_EPStartXfer+0x424>
 8006810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006814:	3b01      	subs	r3, #1
 8006816:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800681a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800681e:	b29b      	uxth	r3, r3
 8006820:	029b      	lsls	r3, r3, #10
 8006822:	b29b      	uxth	r3, r3
 8006824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800682c:	b29a      	uxth	r2, r3
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	801a      	strh	r2, [r3, #0]
 8006832:	e059      	b.n	80068e8 <USB_EPStartXfer+0x4f2>
 8006834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006838:	2b00      	cmp	r3, #0
 800683a:	d112      	bne.n	8006862 <USB_EPStartXfer+0x46c>
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	b29b      	uxth	r3, r3
 8006842:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006846:	b29a      	uxth	r2, r3
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	801a      	strh	r2, [r3, #0]
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b29b      	uxth	r3, r3
 8006852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800685a:	b29a      	uxth	r2, r3
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	801a      	strh	r2, [r3, #0]
 8006860:	e042      	b.n	80068e8 <USB_EPStartXfer+0x4f2>
 8006862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006866:	085b      	lsrs	r3, r3, #1
 8006868:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800686c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d004      	beq.n	8006882 <USB_EPStartXfer+0x48c>
 8006878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800687c:	3301      	adds	r3, #1
 800687e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006886:	b29b      	uxth	r3, r3
 8006888:	029b      	lsls	r3, r3, #10
 800688a:	b29a      	uxth	r2, r3
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	801a      	strh	r2, [r3, #0]
 8006890:	e02a      	b.n	80068e8 <USB_EPStartXfer+0x4f2>
 8006892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	785b      	ldrb	r3, [r3, #1]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d122      	bne.n	80068e8 <USB_EPStartXfer+0x4f2>
 80068a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	623b      	str	r3, [r7, #32]
 80068ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068bc:	b29b      	uxth	r3, r3
 80068be:	461a      	mov	r2, r3
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	4413      	add	r3, r2
 80068c4:	623b      	str	r3, [r7, #32]
 80068c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	00da      	lsls	r2, r3, #3
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	4413      	add	r3, r2
 80068d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068dc:	61fb      	str	r3, [r7, #28]
 80068de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80068e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	891b      	ldrh	r3, [r3, #8]
 80068f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6959      	ldr	r1, [r3, #20]
 8006904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006908:	b29b      	uxth	r3, r3
 800690a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800690e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006912:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006916:	6800      	ldr	r0, [r0, #0]
 8006918:	f001 f9dd 	bl	8007cd6 <USB_WritePMA>
 800691c:	e3c6      	b.n	80070ac <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800691e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	785b      	ldrb	r3, [r3, #1]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d16d      	bne.n	8006a0a <USB_EPStartXfer+0x614>
 800692e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006932:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	64bb      	str	r3, [r7, #72]	; 0x48
 800693a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800693e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006948:	b29b      	uxth	r3, r3
 800694a:	461a      	mov	r2, r3
 800694c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800694e:	4413      	add	r3, r2
 8006950:	64bb      	str	r3, [r7, #72]	; 0x48
 8006952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	00da      	lsls	r2, r3, #3
 8006960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006962:	4413      	add	r3, r2
 8006964:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006968:	647b      	str	r3, [r7, #68]	; 0x44
 800696a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800696e:	2b3e      	cmp	r3, #62	; 0x3e
 8006970:	d91c      	bls.n	80069ac <USB_EPStartXfer+0x5b6>
 8006972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006976:	095b      	lsrs	r3, r3, #5
 8006978:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800697c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006980:	f003 031f 	and.w	r3, r3, #31
 8006984:	2b00      	cmp	r3, #0
 8006986:	d104      	bne.n	8006992 <USB_EPStartXfer+0x59c>
 8006988:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800698c:	3b01      	subs	r3, #1
 800698e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006992:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006996:	b29b      	uxth	r3, r3
 8006998:	029b      	lsls	r3, r3, #10
 800699a:	b29b      	uxth	r3, r3
 800699c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069a8:	801a      	strh	r2, [r3, #0]
 80069aa:	e059      	b.n	8006a60 <USB_EPStartXfer+0x66a>
 80069ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d112      	bne.n	80069da <USB_EPStartXfer+0x5e4>
 80069b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069be:	b29a      	uxth	r2, r3
 80069c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069c2:	801a      	strh	r2, [r3, #0]
 80069c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069c6:	881b      	ldrh	r3, [r3, #0]
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069d6:	801a      	strh	r2, [r3, #0]
 80069d8:	e042      	b.n	8006a60 <USB_EPStartXfer+0x66a>
 80069da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069de:	085b      	lsrs	r3, r3, #1
 80069e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d004      	beq.n	80069fa <USB_EPStartXfer+0x604>
 80069f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069f4:	3301      	adds	r3, #1
 80069f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	029b      	lsls	r3, r3, #10
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a06:	801a      	strh	r2, [r3, #0]
 8006a08:	e02a      	b.n	8006a60 <USB_EPStartXfer+0x66a>
 8006a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	785b      	ldrb	r3, [r3, #1]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d122      	bne.n	8006a60 <USB_EPStartXfer+0x66a>
 8006a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	653b      	str	r3, [r7, #80]	; 0x50
 8006a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	461a      	mov	r2, r3
 8006a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a3a:	4413      	add	r3, r2
 8006a3c:	653b      	str	r3, [r7, #80]	; 0x50
 8006a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	00da      	lsls	r2, r3, #3
 8006a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a4e:	4413      	add	r3, r2
 8006a50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	891b      	ldrh	r3, [r3, #8]
 8006a6c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6959      	ldr	r1, [r3, #20]
 8006a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a86:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a8a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a8e:	6800      	ldr	r0, [r0, #0]
 8006a90:	f001 f921 	bl	8007cd6 <USB_WritePMA>
            ep->xfer_buff += len;
 8006a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	695a      	ldr	r2, [r3, #20]
 8006aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa4:	441a      	add	r2, r3
 8006aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6a1a      	ldr	r2, [r3, #32]
 8006abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d90f      	bls.n	8006aee <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6a1a      	ldr	r2, [r3, #32]
 8006ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ade:	1ad2      	subs	r2, r2, r3
 8006ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	621a      	str	r2, [r3, #32]
 8006aec:	e00e      	b.n	8006b0c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	643b      	str	r3, [r7, #64]	; 0x40
 8006b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	785b      	ldrb	r3, [r3, #1]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d16d      	bne.n	8006c04 <USB_EPStartXfer+0x80e>
 8006b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	461a      	mov	r2, r3
 8006b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b48:	4413      	add	r3, r2
 8006b4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	00da      	lsls	r2, r3, #3
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b62:	637b      	str	r3, [r7, #52]	; 0x34
 8006b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b68:	2b3e      	cmp	r3, #62	; 0x3e
 8006b6a:	d91c      	bls.n	8006ba6 <USB_EPStartXfer+0x7b0>
 8006b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b70:	095b      	lsrs	r3, r3, #5
 8006b72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b7a:	f003 031f 	and.w	r3, r3, #31
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d104      	bne.n	8006b8c <USB_EPStartXfer+0x796>
 8006b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b86:	3b01      	subs	r3, #1
 8006b88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	029b      	lsls	r3, r3, #10
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba2:	801a      	strh	r2, [r3, #0]
 8006ba4:	e053      	b.n	8006c4e <USB_EPStartXfer+0x858>
 8006ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d112      	bne.n	8006bd4 <USB_EPStartXfer+0x7de>
 8006bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bbc:	801a      	strh	r2, [r3, #0]
 8006bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd0:	801a      	strh	r2, [r3, #0]
 8006bd2:	e03c      	b.n	8006c4e <USB_EPStartXfer+0x858>
 8006bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd8:	085b      	lsrs	r3, r3, #1
 8006bda:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d004      	beq.n	8006bf4 <USB_EPStartXfer+0x7fe>
 8006bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bee:	3301      	adds	r3, #1
 8006bf0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	029b      	lsls	r3, r3, #10
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c00:	801a      	strh	r2, [r3, #0]
 8006c02:	e024      	b.n	8006c4e <USB_EPStartXfer+0x858>
 8006c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	785b      	ldrb	r3, [r3, #1]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d11c      	bne.n	8006c4e <USB_EPStartXfer+0x858>
 8006c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	461a      	mov	r2, r3
 8006c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c28:	4413      	add	r3, r2
 8006c2a:	643b      	str	r3, [r7, #64]	; 0x40
 8006c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	00da      	lsls	r2, r3, #3
 8006c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	895b      	ldrh	r3, [r3, #10]
 8006c5a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6959      	ldr	r1, [r3, #20]
 8006c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c74:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c78:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c7c:	6800      	ldr	r0, [r0, #0]
 8006c7e:	f001 f82a 	bl	8007cd6 <USB_WritePMA>
 8006c82:	e213      	b.n	80070ac <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	881b      	ldrh	r3, [r3, #0]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cba:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	441a      	add	r2, r3
 8006cd8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d10:	4413      	add	r3, r2
 8006d12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	00da      	lsls	r2, r3, #3
 8006d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d24:	4413      	add	r3, r2
 8006d26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	891b      	ldrh	r3, [r3, #8]
 8006d42:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6959      	ldr	r1, [r3, #20]
 8006d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006d5c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006d60:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006d64:	6800      	ldr	r0, [r0, #0]
 8006d66:	f000 ffb6 	bl	8007cd6 <USB_WritePMA>
 8006d6a:	e19f      	b.n	80070ac <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6a1a      	ldr	r2, [r3, #32]
 8006d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d7c:	1ad2      	subs	r2, r2, r3
 8006d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 80bc 	beq.w	8006f2a <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	673b      	str	r3, [r7, #112]	; 0x70
 8006dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	785b      	ldrb	r3, [r3, #1]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d16d      	bne.n	8006eaa <USB_EPStartXfer+0xab4>
 8006dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	461a      	mov	r2, r3
 8006dec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dee:	4413      	add	r3, r2
 8006df0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	00da      	lsls	r2, r3, #3
 8006e00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e02:	4413      	add	r3, r2
 8006e04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e08:	667b      	str	r3, [r7, #100]	; 0x64
 8006e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e0e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e10:	d91c      	bls.n	8006e4c <USB_EPStartXfer+0xa56>
 8006e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e16:	095b      	lsrs	r3, r3, #5
 8006e18:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e20:	f003 031f 	and.w	r3, r3, #31
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d104      	bne.n	8006e32 <USB_EPStartXfer+0xa3c>
 8006e28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	029b      	lsls	r3, r3, #10
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e48:	801a      	strh	r2, [r3, #0]
 8006e4a:	e053      	b.n	8006ef4 <USB_EPStartXfer+0xafe>
 8006e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d112      	bne.n	8006e7a <USB_EPStartXfer+0xa84>
 8006e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e62:	801a      	strh	r2, [r3, #0]
 8006e64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e76:	801a      	strh	r2, [r3, #0]
 8006e78:	e03c      	b.n	8006ef4 <USB_EPStartXfer+0xafe>
 8006e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7e:	085b      	lsrs	r3, r3, #1
 8006e80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d004      	beq.n	8006e9a <USB_EPStartXfer+0xaa4>
 8006e90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e94:	3301      	adds	r3, #1
 8006e96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	029b      	lsls	r3, r3, #10
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ea6:	801a      	strh	r2, [r3, #0]
 8006ea8:	e024      	b.n	8006ef4 <USB_EPStartXfer+0xafe>
 8006eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	785b      	ldrb	r3, [r3, #1]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d11c      	bne.n	8006ef4 <USB_EPStartXfer+0xafe>
 8006eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ebe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	461a      	mov	r2, r3
 8006ecc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ece:	4413      	add	r3, r2
 8006ed0:	673b      	str	r3, [r7, #112]	; 0x70
 8006ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	00da      	lsls	r2, r3, #3
 8006ee0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	895b      	ldrh	r3, [r3, #10]
 8006f00:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6959      	ldr	r1, [r3, #20]
 8006f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f1a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f1e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f22:	6800      	ldr	r0, [r0, #0]
 8006f24:	f000 fed7 	bl	8007cd6 <USB_WritePMA>
 8006f28:	e0c0      	b.n	80070ac <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	785b      	ldrb	r3, [r3, #1]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d16d      	bne.n	8007016 <USB_EPStartXfer+0xc20>
 8006f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	461a      	mov	r2, r3
 8006f58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f5a:	4413      	add	r3, r2
 8006f5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	00da      	lsls	r2, r3, #3
 8006f6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f6e:	4413      	add	r3, r2
 8006f70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f74:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f7a:	2b3e      	cmp	r3, #62	; 0x3e
 8006f7c:	d91c      	bls.n	8006fb8 <USB_EPStartXfer+0xbc2>
 8006f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f82:	095b      	lsrs	r3, r3, #5
 8006f84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f8c:	f003 031f 	and.w	r3, r3, #31
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d104      	bne.n	8006f9e <USB_EPStartXfer+0xba8>
 8006f94:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	029b      	lsls	r3, r3, #10
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fb4:	801a      	strh	r2, [r3, #0]
 8006fb6:	e05f      	b.n	8007078 <USB_EPStartXfer+0xc82>
 8006fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d112      	bne.n	8006fe6 <USB_EPStartXfer+0xbf0>
 8006fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fce:	801a      	strh	r2, [r3, #0]
 8006fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fe2:	801a      	strh	r2, [r3, #0]
 8006fe4:	e048      	b.n	8007078 <USB_EPStartXfer+0xc82>
 8006fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fea:	085b      	lsrs	r3, r3, #1
 8006fec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d004      	beq.n	8007006 <USB_EPStartXfer+0xc10>
 8006ffc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007000:	3301      	adds	r3, #1
 8007002:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007006:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800700a:	b29b      	uxth	r3, r3
 800700c:	029b      	lsls	r3, r3, #10
 800700e:	b29a      	uxth	r2, r3
 8007010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007012:	801a      	strh	r2, [r3, #0]
 8007014:	e030      	b.n	8007078 <USB_EPStartXfer+0xc82>
 8007016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	785b      	ldrb	r3, [r3, #1]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d128      	bne.n	8007078 <USB_EPStartXfer+0xc82>
 8007026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800702a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007038:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007042:	b29b      	uxth	r3, r3
 8007044:	461a      	mov	r2, r3
 8007046:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800704a:	4413      	add	r3, r2
 800704c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	00da      	lsls	r2, r3, #3
 800705e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007062:	4413      	add	r3, r2
 8007064:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007068:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800706c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007070:	b29a      	uxth	r2, r3
 8007072:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007076:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	891b      	ldrh	r3, [r3, #8]
 8007084:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800708c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6959      	ldr	r1, [r3, #20]
 8007094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007098:	b29b      	uxth	r3, r3
 800709a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800709e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80070a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80070a6:	6800      	ldr	r0, [r0, #0]
 80070a8:	f000 fe15 	bl	8007cd6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80070ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d2:	817b      	strh	r3, [r7, #10]
 80070d4:	897b      	ldrh	r3, [r7, #10]
 80070d6:	f083 0310 	eor.w	r3, r3, #16
 80070da:	817b      	strh	r3, [r7, #10]
 80070dc:	897b      	ldrh	r3, [r7, #10]
 80070de:	f083 0320 	eor.w	r3, r3, #32
 80070e2:	817b      	strh	r3, [r7, #10]
 80070e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	441a      	add	r2, r3
 80070fe:	897b      	ldrh	r3, [r7, #10]
 8007100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800710c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007110:	b29b      	uxth	r3, r3
 8007112:	8013      	strh	r3, [r2, #0]
 8007114:	f000 bc9f 	b.w	8007a56 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800711c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	7b1b      	ldrb	r3, [r3, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	f040 80ae 	bne.w	8007286 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800712a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800712e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	699a      	ldr	r2, [r3, #24]
 8007136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	429a      	cmp	r2, r3
 8007144:	d917      	bls.n	8007176 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8007146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800715a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	699a      	ldr	r2, [r3, #24]
 8007162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007166:	1ad2      	subs	r2, r2, r3
 8007168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800716c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	619a      	str	r2, [r3, #24]
 8007174:	e00e      	b.n	8007194 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8007176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800717a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800718a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2200      	movs	r2, #0
 8007192:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	461a      	mov	r2, r3
 80071b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071b8:	4413      	add	r3, r2
 80071ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	00da      	lsls	r2, r3, #3
 80071cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071d0:	4413      	add	r3, r2
 80071d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80071da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071de:	2b3e      	cmp	r3, #62	; 0x3e
 80071e0:	d91d      	bls.n	800721e <USB_EPStartXfer+0xe28>
 80071e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e6:	095b      	lsrs	r3, r3, #5
 80071e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f0:	f003 031f 	and.w	r3, r3, #31
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d104      	bne.n	8007202 <USB_EPStartXfer+0xe0c>
 80071f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071fc:	3b01      	subs	r3, #1
 80071fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007202:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007206:	b29b      	uxth	r3, r3
 8007208:	029b      	lsls	r3, r3, #10
 800720a:	b29b      	uxth	r3, r3
 800720c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007214:	b29a      	uxth	r2, r3
 8007216:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800721a:	801a      	strh	r2, [r3, #0]
 800721c:	e3e1      	b.n	80079e2 <USB_EPStartXfer+0x15ec>
 800721e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007222:	2b00      	cmp	r3, #0
 8007224:	d116      	bne.n	8007254 <USB_EPStartXfer+0xe5e>
 8007226:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	b29b      	uxth	r3, r3
 800722e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007232:	b29a      	uxth	r2, r3
 8007234:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007238:	801a      	strh	r2, [r3, #0]
 800723a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800723e:	881b      	ldrh	r3, [r3, #0]
 8007240:	b29b      	uxth	r3, r3
 8007242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800724a:	b29a      	uxth	r2, r3
 800724c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007250:	801a      	strh	r2, [r3, #0]
 8007252:	e3c6      	b.n	80079e2 <USB_EPStartXfer+0x15ec>
 8007254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007258:	085b      	lsrs	r3, r3, #1
 800725a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800725e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d004      	beq.n	8007274 <USB_EPStartXfer+0xe7e>
 800726a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800726e:	3301      	adds	r3, #1
 8007270:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007274:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007278:	b29b      	uxth	r3, r3
 800727a:	029b      	lsls	r3, r3, #10
 800727c:	b29a      	uxth	r2, r3
 800727e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007282:	801a      	strh	r2, [r3, #0]
 8007284:	e3ad      	b.n	80079e2 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800728a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	78db      	ldrb	r3, [r3, #3]
 8007292:	2b02      	cmp	r3, #2
 8007294:	f040 8200 	bne.w	8007698 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800729c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	785b      	ldrb	r3, [r3, #1]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f040 8091 	bne.w	80073cc <USB_EPStartXfer+0xfd6>
 80072aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	461a      	mov	r2, r3
 80072ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072ce:	4413      	add	r3, r2
 80072d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	00da      	lsls	r2, r3, #3
 80072e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072e6:	4413      	add	r3, r2
 80072e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80072f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	2b3e      	cmp	r3, #62	; 0x3e
 80072fe:	d925      	bls.n	800734c <USB_EPStartXfer+0xf56>
 8007300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	095b      	lsrs	r3, r3, #5
 800730e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	f003 031f 	and.w	r3, r3, #31
 8007322:	2b00      	cmp	r3, #0
 8007324:	d104      	bne.n	8007330 <USB_EPStartXfer+0xf3a>
 8007326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800732a:	3b01      	subs	r3, #1
 800732c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007334:	b29b      	uxth	r3, r3
 8007336:	029b      	lsls	r3, r3, #10
 8007338:	b29b      	uxth	r3, r3
 800733a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800733e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007342:	b29a      	uxth	r2, r3
 8007344:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007348:	801a      	strh	r2, [r3, #0]
 800734a:	e074      	b.n	8007436 <USB_EPStartXfer+0x1040>
 800734c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d116      	bne.n	800738a <USB_EPStartXfer+0xf94>
 800735c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	b29b      	uxth	r3, r3
 8007364:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007368:	b29a      	uxth	r2, r3
 800736a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800736e:	801a      	strh	r2, [r3, #0]
 8007370:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007374:	881b      	ldrh	r3, [r3, #0]
 8007376:	b29b      	uxth	r3, r3
 8007378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800737c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007380:	b29a      	uxth	r2, r3
 8007382:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007386:	801a      	strh	r2, [r3, #0]
 8007388:	e055      	b.n	8007436 <USB_EPStartXfer+0x1040>
 800738a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800738e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	085b      	lsrs	r3, r3, #1
 8007398:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800739c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d004      	beq.n	80073ba <USB_EPStartXfer+0xfc4>
 80073b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b4:	3301      	adds	r3, #1
 80073b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073be:	b29b      	uxth	r3, r3
 80073c0:	029b      	lsls	r3, r3, #10
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80073c8:	801a      	strh	r2, [r3, #0]
 80073ca:	e034      	b.n	8007436 <USB_EPStartXfer+0x1040>
 80073cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	785b      	ldrb	r3, [r3, #1]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d12c      	bne.n	8007436 <USB_EPStartXfer+0x1040>
 80073dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	461a      	mov	r2, r3
 80073fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007400:	4413      	add	r3, r2
 8007402:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800740a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	00da      	lsls	r2, r3, #3
 8007414:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007418:	4413      	add	r3, r2
 800741a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800741e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	b29a      	uxth	r2, r3
 8007430:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007434:	801a      	strh	r2, [r3, #0]
 8007436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800743a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	785b      	ldrb	r3, [r3, #1]
 8007450:	2b00      	cmp	r3, #0
 8007452:	f040 8091 	bne.w	8007578 <USB_EPStartXfer+0x1182>
 8007456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800745a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007468:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007472:	b29b      	uxth	r3, r3
 8007474:	461a      	mov	r2, r3
 8007476:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800747a:	4413      	add	r3, r2
 800747c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	00da      	lsls	r2, r3, #3
 800748e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007492:	4413      	add	r3, r2
 8007494:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007498:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800749c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	2b3e      	cmp	r3, #62	; 0x3e
 80074aa:	d925      	bls.n	80074f8 <USB_EPStartXfer+0x1102>
 80074ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	095b      	lsrs	r3, r3, #5
 80074ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	f003 031f 	and.w	r3, r3, #31
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d104      	bne.n	80074dc <USB_EPStartXfer+0x10e6>
 80074d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d6:	3b01      	subs	r3, #1
 80074d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	029b      	lsls	r3, r3, #10
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074f4:	801a      	strh	r2, [r3, #0]
 80074f6:	e06d      	b.n	80075d4 <USB_EPStartXfer+0x11de>
 80074f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d116      	bne.n	8007536 <USB_EPStartXfer+0x1140>
 8007508:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	b29b      	uxth	r3, r3
 8007510:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007514:	b29a      	uxth	r2, r3
 8007516:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800751a:	801a      	strh	r2, [r3, #0]
 800751c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	b29b      	uxth	r3, r3
 8007524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800752c:	b29a      	uxth	r2, r3
 800752e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007532:	801a      	strh	r2, [r3, #0]
 8007534:	e04e      	b.n	80075d4 <USB_EPStartXfer+0x11de>
 8007536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800753a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	085b      	lsrs	r3, r3, #1
 8007544:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800754c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	d004      	beq.n	8007566 <USB_EPStartXfer+0x1170>
 800755c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007560:	3301      	adds	r3, #1
 8007562:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800756a:	b29b      	uxth	r3, r3
 800756c:	029b      	lsls	r3, r3, #10
 800756e:	b29a      	uxth	r2, r3
 8007570:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007574:	801a      	strh	r2, [r3, #0]
 8007576:	e02d      	b.n	80075d4 <USB_EPStartXfer+0x11de>
 8007578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800757c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	785b      	ldrb	r3, [r3, #1]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d125      	bne.n	80075d4 <USB_EPStartXfer+0x11de>
 8007588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800758c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007596:	b29b      	uxth	r3, r3
 8007598:	461a      	mov	r2, r3
 800759a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800759e:	4413      	add	r3, r2
 80075a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80075a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	00da      	lsls	r2, r3, #3
 80075b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80075b6:	4413      	add	r3, r2
 80075b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80075c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075d2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80075d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 81fe 	beq.w	80079e2 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80075e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007606:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800760a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d005      	beq.n	800761e <USB_EPStartXfer+0x1228>
 8007612:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10d      	bne.n	800763a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800761e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007626:	2b00      	cmp	r3, #0
 8007628:	f040 81db 	bne.w	80079e2 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800762c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007634:	2b00      	cmp	r3, #0
 8007636:	f040 81d4 	bne.w	80079e2 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800763a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	b29b      	uxth	r3, r3
 8007658:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800765c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007660:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007668:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	441a      	add	r2, r3
 800767e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800768a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800768e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007692:	b29b      	uxth	r3, r3
 8007694:	8013      	strh	r3, [r2, #0]
 8007696:	e1a4      	b.n	80079e2 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800769c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	78db      	ldrb	r3, [r3, #3]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	f040 819a 	bne.w	80079de <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80076aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	699a      	ldr	r2, [r3, #24]
 80076b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d917      	bls.n	80076f6 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 80076c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80076d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	699a      	ldr	r2, [r3, #24]
 80076e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e6:	1ad2      	subs	r2, r2, r3
 80076e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	619a      	str	r2, [r3, #24]
 80076f4:	e00e      	b.n	8007714 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 80076f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800770a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2200      	movs	r2, #0
 8007712:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	785b      	ldrb	r3, [r3, #1]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d178      	bne.n	8007816 <USB_EPStartXfer+0x1420>
 8007724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007728:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007740:	b29b      	uxth	r3, r3
 8007742:	461a      	mov	r2, r3
 8007744:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007748:	4413      	add	r3, r2
 800774a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800774e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	00da      	lsls	r2, r3, #3
 800775c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007760:	4413      	add	r3, r2
 8007762:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007766:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800776a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800776e:	2b3e      	cmp	r3, #62	; 0x3e
 8007770:	d91d      	bls.n	80077ae <USB_EPStartXfer+0x13b8>
 8007772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007776:	095b      	lsrs	r3, r3, #5
 8007778:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800777c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007780:	f003 031f 	and.w	r3, r3, #31
 8007784:	2b00      	cmp	r3, #0
 8007786:	d104      	bne.n	8007792 <USB_EPStartXfer+0x139c>
 8007788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800778c:	3b01      	subs	r3, #1
 800778e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007796:	b29b      	uxth	r3, r3
 8007798:	029b      	lsls	r3, r3, #10
 800779a:	b29b      	uxth	r3, r3
 800779c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077aa:	801a      	strh	r2, [r3, #0]
 80077ac:	e064      	b.n	8007878 <USB_EPStartXfer+0x1482>
 80077ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d116      	bne.n	80077e4 <USB_EPStartXfer+0x13ee>
 80077b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077c8:	801a      	strh	r2, [r3, #0]
 80077ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077da:	b29a      	uxth	r2, r3
 80077dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077e0:	801a      	strh	r2, [r3, #0]
 80077e2:	e049      	b.n	8007878 <USB_EPStartXfer+0x1482>
 80077e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e8:	085b      	lsrs	r3, r3, #1
 80077ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80077ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d004      	beq.n	8007804 <USB_EPStartXfer+0x140e>
 80077fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077fe:	3301      	adds	r3, #1
 8007800:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007808:	b29b      	uxth	r3, r3
 800780a:	029b      	lsls	r3, r3, #10
 800780c:	b29a      	uxth	r2, r3
 800780e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007812:	801a      	strh	r2, [r3, #0]
 8007814:	e030      	b.n	8007878 <USB_EPStartXfer+0x1482>
 8007816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800781a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	785b      	ldrb	r3, [r3, #1]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d128      	bne.n	8007878 <USB_EPStartXfer+0x1482>
 8007826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800782a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007838:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007842:	b29b      	uxth	r3, r3
 8007844:	461a      	mov	r2, r3
 8007846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800784a:	4413      	add	r3, r2
 800784c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	00da      	lsls	r2, r3, #3
 800785e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007862:	4413      	add	r3, r2
 8007864:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800786c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007870:	b29a      	uxth	r2, r3
 8007872:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007876:	801a      	strh	r2, [r3, #0]
 8007878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800787c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	785b      	ldrb	r3, [r3, #1]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d178      	bne.n	8007988 <USB_EPStartXfer+0x1592>
 8007896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800789a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80078a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	461a      	mov	r2, r3
 80078b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80078ba:	4413      	add	r3, r2
 80078bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80078c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	00da      	lsls	r2, r3, #3
 80078ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80078d2:	4413      	add	r3, r2
 80078d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078e0:	2b3e      	cmp	r3, #62	; 0x3e
 80078e2:	d91d      	bls.n	8007920 <USB_EPStartXfer+0x152a>
 80078e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078e8:	095b      	lsrs	r3, r3, #5
 80078ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80078ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f2:	f003 031f 	and.w	r3, r3, #31
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d104      	bne.n	8007904 <USB_EPStartXfer+0x150e>
 80078fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078fe:	3b01      	subs	r3, #1
 8007900:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007904:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007908:	b29b      	uxth	r3, r3
 800790a:	029b      	lsls	r3, r3, #10
 800790c:	b29b      	uxth	r3, r3
 800790e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007916:	b29a      	uxth	r2, r3
 8007918:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800791c:	801a      	strh	r2, [r3, #0]
 800791e:	e060      	b.n	80079e2 <USB_EPStartXfer+0x15ec>
 8007920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007924:	2b00      	cmp	r3, #0
 8007926:	d116      	bne.n	8007956 <USB_EPStartXfer+0x1560>
 8007928:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800792c:	881b      	ldrh	r3, [r3, #0]
 800792e:	b29b      	uxth	r3, r3
 8007930:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007934:	b29a      	uxth	r2, r3
 8007936:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800793a:	801a      	strh	r2, [r3, #0]
 800793c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007940:	881b      	ldrh	r3, [r3, #0]
 8007942:	b29b      	uxth	r3, r3
 8007944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800794c:	b29a      	uxth	r2, r3
 800794e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007952:	801a      	strh	r2, [r3, #0]
 8007954:	e045      	b.n	80079e2 <USB_EPStartXfer+0x15ec>
 8007956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800795a:	085b      	lsrs	r3, r3, #1
 800795c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b00      	cmp	r3, #0
 800796a:	d004      	beq.n	8007976 <USB_EPStartXfer+0x1580>
 800796c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007970:	3301      	adds	r3, #1
 8007972:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007976:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800797a:	b29b      	uxth	r3, r3
 800797c:	029b      	lsls	r3, r3, #10
 800797e:	b29a      	uxth	r2, r3
 8007980:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007984:	801a      	strh	r2, [r3, #0]
 8007986:	e02c      	b.n	80079e2 <USB_EPStartXfer+0x15ec>
 8007988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800798c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	785b      	ldrb	r3, [r3, #1]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d124      	bne.n	80079e2 <USB_EPStartXfer+0x15ec>
 8007998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800799c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	461a      	mov	r2, r3
 80079aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80079ae:	4413      	add	r3, r2
 80079b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	00da      	lsls	r2, r3, #3
 80079c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80079c6:	4413      	add	r3, r2
 80079c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80079da:	801a      	strh	r2, [r3, #0]
 80079dc:	e001      	b.n	80079e2 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e03a      	b.n	8007a58 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a08:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007a0c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007a10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a14:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007a18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007a1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a20:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	441a      	add	r2, r3
 8007a3e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b085      	sub	sp, #20
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	785b      	ldrb	r3, [r3, #1]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d020      	beq.n	8007ab6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	881b      	ldrh	r3, [r3, #0]
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a8a:	81bb      	strh	r3, [r7, #12]
 8007a8c:	89bb      	ldrh	r3, [r7, #12]
 8007a8e:	f083 0310 	eor.w	r3, r3, #16
 8007a92:	81bb      	strh	r3, [r7, #12]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	441a      	add	r2, r3
 8007a9e:	89bb      	ldrh	r3, [r7, #12]
 8007aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	8013      	strh	r3, [r2, #0]
 8007ab4:	e01f      	b.n	8007af6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007acc:	81fb      	strh	r3, [r7, #14]
 8007ace:	89fb      	ldrh	r3, [r7, #14]
 8007ad0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007ad4:	81fb      	strh	r3, [r7, #14]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	441a      	add	r2, r3
 8007ae0:	89fb      	ldrh	r3, [r7, #14]
 8007ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b087      	sub	sp, #28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	7b1b      	ldrb	r3, [r3, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f040 809d 	bne.w	8007c52 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	785b      	ldrb	r3, [r3, #1]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d04c      	beq.n	8007bba <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4413      	add	r3, r2
 8007b2a:	881b      	ldrh	r3, [r3, #0]
 8007b2c:	823b      	strh	r3, [r7, #16]
 8007b2e:	8a3b      	ldrh	r3, [r7, #16]
 8007b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d01b      	beq.n	8007b70 <USB_EPClearStall+0x6c>
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b4e:	81fb      	strh	r3, [r7, #14]
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	441a      	add	r2, r3
 8007b5a:	89fb      	ldrh	r3, [r7, #14]
 8007b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	78db      	ldrb	r3, [r3, #3]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d06c      	beq.n	8007c52 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b8e:	81bb      	strh	r3, [r7, #12]
 8007b90:	89bb      	ldrh	r3, [r7, #12]
 8007b92:	f083 0320 	eor.w	r3, r3, #32
 8007b96:	81bb      	strh	r3, [r7, #12]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	441a      	add	r2, r3
 8007ba2:	89bb      	ldrh	r3, [r7, #12]
 8007ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	8013      	strh	r3, [r2, #0]
 8007bb8:	e04b      	b.n	8007c52 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	82fb      	strh	r3, [r7, #22]
 8007bc8:	8afb      	ldrh	r3, [r7, #22]
 8007bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d01b      	beq.n	8007c0a <USB_EPClearStall+0x106>
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be8:	82bb      	strh	r3, [r7, #20]
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	441a      	add	r2, r3
 8007bf4:	8abb      	ldrh	r3, [r7, #20]
 8007bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c20:	827b      	strh	r3, [r7, #18]
 8007c22:	8a7b      	ldrh	r3, [r7, #18]
 8007c24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c28:	827b      	strh	r3, [r7, #18]
 8007c2a:	8a7b      	ldrh	r3, [r7, #18]
 8007c2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c30:	827b      	strh	r3, [r7, #18]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	441a      	add	r2, r3
 8007c3c:	8a7b      	ldrh	r3, [r7, #18]
 8007c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	371c      	adds	r7, #28
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007c6c:	78fb      	ldrb	r3, [r7, #3]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d103      	bne.n	8007c7a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2280      	movs	r2, #128	; 0x80
 8007c76:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b085      	sub	sp, #20
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b08d      	sub	sp, #52	; 0x34
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	60f8      	str	r0, [r7, #12]
 8007cde:	60b9      	str	r1, [r7, #8]
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	80fb      	strh	r3, [r7, #6]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007cec:	88bb      	ldrh	r3, [r7, #4]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	085b      	lsrs	r3, r3, #1
 8007cf2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007cfc:	88fa      	ldrh	r2, [r7, #6]
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d06:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d0c:	e01b      	b.n	8007d46 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	3301      	adds	r3, #1
 8007d18:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	021b      	lsls	r3, r3, #8
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	461a      	mov	r2, r3
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d32:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d36:	3302      	adds	r3, #2
 8007d38:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d42:	3b01      	subs	r3, #1
 8007d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1e0      	bne.n	8007d0e <USB_WritePMA+0x38>
  }
}
 8007d4c:	bf00      	nop
 8007d4e:	bf00      	nop
 8007d50:	3734      	adds	r7, #52	; 0x34
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b08b      	sub	sp, #44	; 0x2c
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60f8      	str	r0, [r7, #12]
 8007d62:	60b9      	str	r1, [r7, #8]
 8007d64:	4611      	mov	r1, r2
 8007d66:	461a      	mov	r2, r3
 8007d68:	460b      	mov	r3, r1
 8007d6a:	80fb      	strh	r3, [r7, #6]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007d70:	88bb      	ldrh	r3, [r7, #4]
 8007d72:	085b      	lsrs	r3, r3, #1
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d80:	88fa      	ldrh	r2, [r7, #6]
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	4413      	add	r3, r2
 8007d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d8a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d90:	e018      	b.n	8007dc4 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	3302      	adds	r3, #2
 8007d9e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	b2da      	uxtb	r2, r3
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	3301      	adds	r3, #1
 8007dac:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	0a1b      	lsrs	r3, r3, #8
 8007db2:	b2da      	uxtb	r2, r3
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e3      	bne.n	8007d92 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007dca:	88bb      	ldrh	r3, [r7, #4]
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d007      	beq.n	8007de6 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	701a      	strb	r2, [r3, #0]
  }
}
 8007de6:	bf00      	nop
 8007de8:	372c      	adds	r7, #44	; 0x2c
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007dfe:	2010      	movs	r0, #16
 8007e00:	f001 fe9a 	bl	8009b38 <USBD_static_malloc>
 8007e04:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d105      	bne.n	8007e18 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007e14:	2302      	movs	r3, #2
 8007e16:	e01b      	b.n	8007e50 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	7c1b      	ldrb	r3, [r3, #16]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d103      	bne.n	8007e30 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2207      	movs	r2, #7
 8007e2c:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007e2e:	e002      	b.n	8007e36 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	220a      	movs	r2, #10
 8007e34:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007e36:	2304      	movs	r3, #4
 8007e38:	2203      	movs	r2, #3
 8007e3a:	2181      	movs	r1, #129	; 0x81
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f001 fd34 	bl	80098aa <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2201      	movs	r2, #1
 8007e46:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	460b      	mov	r3, r1
 8007e62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007e64:	2181      	movs	r1, #129	; 0x81
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f001 fd45 	bl	80098f6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d009      	beq.n	8007e96 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f001 fe63 	bl	8009b54 <USBD_static_free>
    pdev->pClassData = NULL;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eb0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d101      	bne.n	8007ec4 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e0e8      	b.n	8008096 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d046      	beq.n	8007f5e <USBD_HID_Setup+0xbe>
 8007ed0:	2b20      	cmp	r3, #32
 8007ed2:	f040 80d8 	bne.w	8008086 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	785b      	ldrb	r3, [r3, #1]
 8007eda:	3b02      	subs	r3, #2
 8007edc:	2b09      	cmp	r3, #9
 8007ede:	d836      	bhi.n	8007f4e <USBD_HID_Setup+0xae>
 8007ee0:	a201      	add	r2, pc, #4	; (adr r2, 8007ee8 <USBD_HID_Setup+0x48>)
 8007ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee6:	bf00      	nop
 8007ee8:	08007f3f 	.word	0x08007f3f
 8007eec:	08007f1f 	.word	0x08007f1f
 8007ef0:	08007f4f 	.word	0x08007f4f
 8007ef4:	08007f4f 	.word	0x08007f4f
 8007ef8:	08007f4f 	.word	0x08007f4f
 8007efc:	08007f4f 	.word	0x08007f4f
 8007f00:	08007f4f 	.word	0x08007f4f
 8007f04:	08007f4f 	.word	0x08007f4f
 8007f08:	08007f2d 	.word	0x08007f2d
 8007f0c:	08007f11 	.word	0x08007f11
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	885b      	ldrh	r3, [r3, #2]
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	461a      	mov	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	601a      	str	r2, [r3, #0]
          break;
 8007f1c:	e01e      	b.n	8007f5c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2201      	movs	r2, #1
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f001 f9d8 	bl	80092da <USBD_CtlSendData>
          break;
 8007f2a:	e017      	b.n	8007f5c <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	885b      	ldrh	r3, [r3, #2]
 8007f30:	0a1b      	lsrs	r3, r3, #8
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	461a      	mov	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	605a      	str	r2, [r3, #4]
          break;
 8007f3c:	e00e      	b.n	8007f5c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3304      	adds	r3, #4
 8007f42:	2201      	movs	r2, #1
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f001 f9c7 	bl	80092da <USBD_CtlSendData>
          break;
 8007f4c:	e006      	b.n	8007f5c <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 f951 	bl	80091f8 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f56:	2303      	movs	r3, #3
 8007f58:	75fb      	strb	r3, [r7, #23]
          break;
 8007f5a:	bf00      	nop
      }
      break;
 8007f5c:	e09a      	b.n	8008094 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	785b      	ldrb	r3, [r3, #1]
 8007f62:	2b0b      	cmp	r3, #11
 8007f64:	f200 8086 	bhi.w	8008074 <USBD_HID_Setup+0x1d4>
 8007f68:	a201      	add	r2, pc, #4	; (adr r2, 8007f70 <USBD_HID_Setup+0xd0>)
 8007f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6e:	bf00      	nop
 8007f70:	08007fa1 	.word	0x08007fa1
 8007f74:	08008083 	.word	0x08008083
 8007f78:	08008075 	.word	0x08008075
 8007f7c:	08008075 	.word	0x08008075
 8007f80:	08008075 	.word	0x08008075
 8007f84:	08008075 	.word	0x08008075
 8007f88:	08007fcb 	.word	0x08007fcb
 8007f8c:	08008075 	.word	0x08008075
 8007f90:	08008075 	.word	0x08008075
 8007f94:	08008075 	.word	0x08008075
 8007f98:	08008023 	.word	0x08008023
 8007f9c:	0800804d 	.word	0x0800804d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d107      	bne.n	8007fbc <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007fac:	f107 030a 	add.w	r3, r7, #10
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f001 f990 	bl	80092da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fba:	e063      	b.n	8008084 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f001 f91a 	bl	80091f8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	75fb      	strb	r3, [r7, #23]
          break;
 8007fc8:	e05c      	b.n	8008084 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	885b      	ldrh	r3, [r3, #2]
 8007fce:	0a1b      	lsrs	r3, r3, #8
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	2b22      	cmp	r3, #34	; 0x22
 8007fd4:	d108      	bne.n	8007fe8 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	88db      	ldrh	r3, [r3, #6]
 8007fda:	2b3f      	cmp	r3, #63	; 0x3f
 8007fdc:	bf28      	it	cs
 8007fde:	233f      	movcs	r3, #63	; 0x3f
 8007fe0:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8007fe2:	4b2f      	ldr	r3, [pc, #188]	; (80080a0 <USBD_HID_Setup+0x200>)
 8007fe4:	613b      	str	r3, [r7, #16]
 8007fe6:	e015      	b.n	8008014 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	885b      	ldrh	r3, [r3, #2]
 8007fec:	0a1b      	lsrs	r3, r3, #8
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	2b21      	cmp	r3, #33	; 0x21
 8007ff2:	d108      	bne.n	8008006 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8007ff4:	4b2b      	ldr	r3, [pc, #172]	; (80080a4 <USBD_HID_Setup+0x204>)
 8007ff6:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	88db      	ldrh	r3, [r3, #6]
 8007ffc:	2b09      	cmp	r3, #9
 8007ffe:	bf28      	it	cs
 8008000:	2309      	movcs	r3, #9
 8008002:	82bb      	strh	r3, [r7, #20]
 8008004:	e006      	b.n	8008014 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f001 f8f5 	bl	80091f8 <USBD_CtlError>
            ret = USBD_FAIL;
 800800e:	2303      	movs	r3, #3
 8008010:	75fb      	strb	r3, [r7, #23]
            break;
 8008012:	e037      	b.n	8008084 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008014:	8abb      	ldrh	r3, [r7, #20]
 8008016:	461a      	mov	r2, r3
 8008018:	6939      	ldr	r1, [r7, #16]
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f001 f95d 	bl	80092da <USBD_CtlSendData>
          break;
 8008020:	e030      	b.n	8008084 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b03      	cmp	r3, #3
 800802c:	d107      	bne.n	800803e <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	3308      	adds	r3, #8
 8008032:	2201      	movs	r2, #1
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 f94f 	bl	80092da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800803c:	e022      	b.n	8008084 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f001 f8d9 	bl	80091f8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008046:	2303      	movs	r3, #3
 8008048:	75fb      	strb	r3, [r7, #23]
          break;
 800804a:	e01b      	b.n	8008084 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b03      	cmp	r3, #3
 8008056:	d106      	bne.n	8008066 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	885b      	ldrh	r3, [r3, #2]
 800805c:	b2db      	uxtb	r3, r3
 800805e:	461a      	mov	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008064:	e00e      	b.n	8008084 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 f8c5 	bl	80091f8 <USBD_CtlError>
            ret = USBD_FAIL;
 800806e:	2303      	movs	r3, #3
 8008070:	75fb      	strb	r3, [r7, #23]
          break;
 8008072:	e007      	b.n	8008084 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f001 f8be 	bl	80091f8 <USBD_CtlError>
          ret = USBD_FAIL;
 800807c:	2303      	movs	r3, #3
 800807e:	75fb      	strb	r3, [r7, #23]
          break;
 8008080:	e000      	b.n	8008084 <USBD_HID_Setup+0x1e4>
          break;
 8008082:	bf00      	nop
      }
      break;
 8008084:	e006      	b.n	8008094 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f001 f8b5 	bl	80091f8 <USBD_CtlError>
      ret = USBD_FAIL;
 800808e:	2303      	movs	r3, #3
 8008090:	75fb      	strb	r3, [r7, #23]
      break;
 8008092:	bf00      	nop
  }

  return (uint8_t)ret;
 8008094:	7dfb      	ldrb	r3, [r7, #23]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3718      	adds	r7, #24
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	200000c8 	.word	0x200000c8
 80080a4:	200000b0 	.word	0x200000b0

080080a8 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	4613      	mov	r3, r2
 80080b4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080bc:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e013      	b.n	80080f0 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b03      	cmp	r3, #3
 80080d2:	d10c      	bne.n	80080ee <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	7b1b      	ldrb	r3, [r3, #12]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d108      	bne.n	80080ee <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	2201      	movs	r2, #1
 80080e0:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 80080e2:	88fb      	ldrh	r3, [r7, #6]
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	2181      	movs	r1, #129	; 0x81
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f001 fcad 	bl	8009a48 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3718      	adds	r7, #24
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2222      	movs	r2, #34	; 0x22
 8008104:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8008106:	4b03      	ldr	r3, [pc, #12]	; (8008114 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008108:	4618      	mov	r0, r3
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	20000044 	.word	0x20000044

08008118 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2222      	movs	r2, #34	; 0x22
 8008124:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8008126:	4b03      	ldr	r3, [pc, #12]	; (8008134 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008128:	4618      	mov	r0, r3
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	20000068 	.word	0x20000068

08008138 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2222      	movs	r2, #34	; 0x22
 8008144:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8008146:	4b03      	ldr	r3, [pc, #12]	; (8008154 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008148:	4618      	mov	r0, r3
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr
 8008154:	2000008c 	.word	0x2000008c

08008158 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800816a:	2200      	movs	r2, #0
 800816c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	220a      	movs	r2, #10
 8008188:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800818a:	4b03      	ldr	r3, [pc, #12]	; (8008198 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800818c:	4618      	mov	r0, r3
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr
 8008198:	200000bc 	.word	0x200000bc

0800819c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	4613      	mov	r3, r2
 80081a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e01f      	b.n	80081f4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	79fa      	ldrb	r2, [r7, #7]
 80081e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f001 faf5 	bl	80097d8 <USBD_LL_Init>
 80081ee:	4603      	mov	r3, r0
 80081f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3718      	adds	r7, #24
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008206:	2300      	movs	r3, #0
 8008208:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008210:	2303      	movs	r3, #3
 8008212:	e016      	b.n	8008242 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00b      	beq.n	8008240 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008230:	f107 020e 	add.w	r2, r7, #14
 8008234:	4610      	mov	r0, r2
 8008236:	4798      	blx	r3
 8008238:	4602      	mov	r2, r0
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b082      	sub	sp, #8
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f001 fb0e 	bl	8009874 <USBD_LL_Start>
 8008258:	4603      	mov	r3, r0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008262:	b480      	push	{r7}
 8008264:	b083      	sub	sp, #12
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	460b      	mov	r3, r1
 8008282:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008284:	2303      	movs	r3, #3
 8008286:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800828e:	2b00      	cmp	r3, #0
 8008290:	d009      	beq.n	80082a6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	78fa      	ldrb	r2, [r7, #3]
 800829c:	4611      	mov	r1, r2
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	4798      	blx	r3
 80082a2:	4603      	mov	r3, r0
 80082a4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	460b      	mov	r3, r1
 80082ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d007      	beq.n	80082d6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	78fa      	ldrb	r2, [r7, #3]
 80082d0:	4611      	mov	r1, r2
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	4798      	blx	r3
  }

  return USBD_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 ff46 	bl	8009184 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008306:	461a      	mov	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008314:	f003 031f 	and.w	r3, r3, #31
 8008318:	2b02      	cmp	r3, #2
 800831a:	d01a      	beq.n	8008352 <USBD_LL_SetupStage+0x72>
 800831c:	2b02      	cmp	r3, #2
 800831e:	d822      	bhi.n	8008366 <USBD_LL_SetupStage+0x86>
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <USBD_LL_SetupStage+0x4a>
 8008324:	2b01      	cmp	r3, #1
 8008326:	d00a      	beq.n	800833e <USBD_LL_SetupStage+0x5e>
 8008328:	e01d      	b.n	8008366 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008330:	4619      	mov	r1, r3
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f9ee 	bl	8008714 <USBD_StdDevReq>
 8008338:	4603      	mov	r3, r0
 800833a:	73fb      	strb	r3, [r7, #15]
      break;
 800833c:	e020      	b.n	8008380 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008344:	4619      	mov	r1, r3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fa52 	bl	80087f0 <USBD_StdItfReq>
 800834c:	4603      	mov	r3, r0
 800834e:	73fb      	strb	r3, [r7, #15]
      break;
 8008350:	e016      	b.n	8008380 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008358:	4619      	mov	r1, r3
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fa91 	bl	8008882 <USBD_StdEPReq>
 8008360:	4603      	mov	r3, r0
 8008362:	73fb      	strb	r3, [r7, #15]
      break;
 8008364:	e00c      	b.n	8008380 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800836c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008370:	b2db      	uxtb	r3, r3
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 fadd 	bl	8009934 <USBD_LL_StallEP>
 800837a:	4603      	mov	r3, r0
 800837c:	73fb      	strb	r3, [r7, #15]
      break;
 800837e:	bf00      	nop
  }

  return ret;
 8008380:	7bfb      	ldrb	r3, [r7, #15]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b086      	sub	sp, #24
 800838e:	af00      	add	r7, sp, #0
 8008390:	60f8      	str	r0, [r7, #12]
 8008392:	460b      	mov	r3, r1
 8008394:	607a      	str	r2, [r7, #4]
 8008396:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008398:	7afb      	ldrb	r3, [r7, #11]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d138      	bne.n	8008410 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80083a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d14a      	bne.n	8008446 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	689a      	ldr	r2, [r3, #8]
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d913      	bls.n	80083e4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	689a      	ldr	r2, [r3, #8]
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	1ad2      	subs	r2, r2, r3
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	68da      	ldr	r2, [r3, #12]
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	4293      	cmp	r3, r2
 80083d4:	bf28      	it	cs
 80083d6:	4613      	movcs	r3, r2
 80083d8:	461a      	mov	r2, r3
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f000 ffa8 	bl	8009332 <USBD_CtlContinueRx>
 80083e2:	e030      	b.n	8008446 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b03      	cmp	r3, #3
 80083ee:	d10b      	bne.n	8008408 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d005      	beq.n	8008408 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 ffa3 	bl	8009354 <USBD_CtlSendStatus>
 800840e:	e01a      	b.n	8008446 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b03      	cmp	r3, #3
 800841a:	d114      	bne.n	8008446 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00e      	beq.n	8008446 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	7afa      	ldrb	r2, [r7, #11]
 8008432:	4611      	mov	r1, r2
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	4798      	blx	r3
 8008438:	4603      	mov	r3, r0
 800843a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800843c:	7dfb      	ldrb	r3, [r7, #23]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008442:	7dfb      	ldrb	r3, [r7, #23]
 8008444:	e000      	b.n	8008448 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3718      	adds	r7, #24
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	460b      	mov	r3, r1
 800845a:	607a      	str	r2, [r7, #4]
 800845c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800845e:	7afb      	ldrb	r3, [r7, #11]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d16b      	bne.n	800853c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	3314      	adds	r3, #20
 8008468:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008470:	2b02      	cmp	r3, #2
 8008472:	d156      	bne.n	8008522 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	689a      	ldr	r2, [r3, #8]
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	429a      	cmp	r2, r3
 800847e:	d914      	bls.n	80084aa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	689a      	ldr	r2, [r3, #8]
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	1ad2      	subs	r2, r2, r3
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	461a      	mov	r2, r3
 8008494:	6879      	ldr	r1, [r7, #4]
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 ff3a 	bl	8009310 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800849c:	2300      	movs	r3, #0
 800849e:	2200      	movs	r2, #0
 80084a0:	2100      	movs	r1, #0
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f001 faf1 	bl	8009a8a <USBD_LL_PrepareReceive>
 80084a8:	e03b      	b.n	8008522 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	68da      	ldr	r2, [r3, #12]
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d11c      	bne.n	80084f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	685a      	ldr	r2, [r3, #4]
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80084be:	429a      	cmp	r2, r3
 80084c0:	d316      	bcc.n	80084f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	685a      	ldr	r2, [r3, #4]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d20f      	bcs.n	80084f0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084d0:	2200      	movs	r2, #0
 80084d2:	2100      	movs	r1, #0
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f000 ff1b 	bl	8009310 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084e2:	2300      	movs	r3, #0
 80084e4:	2200      	movs	r2, #0
 80084e6:	2100      	movs	r1, #0
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f001 face 	bl	8009a8a <USBD_LL_PrepareReceive>
 80084ee:	e018      	b.n	8008522 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	2b03      	cmp	r3, #3
 80084fa:	d10b      	bne.n	8008514 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d005      	beq.n	8008514 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008514:	2180      	movs	r1, #128	; 0x80
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f001 fa0c 	bl	8009934 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 ff2c 	bl	800937a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008528:	2b01      	cmp	r3, #1
 800852a:	d122      	bne.n	8008572 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f7ff fe98 	bl	8008262 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800853a:	e01a      	b.n	8008572 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2b03      	cmp	r3, #3
 8008546:	d114      	bne.n	8008572 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800854e:	695b      	ldr	r3, [r3, #20]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00e      	beq.n	8008572 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800855a:	695b      	ldr	r3, [r3, #20]
 800855c:	7afa      	ldrb	r2, [r7, #11]
 800855e:	4611      	mov	r1, r2
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	4798      	blx	r3
 8008564:	4603      	mov	r3, r0
 8008566:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008568:	7dfb      	ldrb	r3, [r7, #23]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800856e:	7dfb      	ldrb	r3, [r7, #23]
 8008570:	e000      	b.n	8008574 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3718      	adds	r7, #24
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e02f      	b.n	8008610 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00f      	beq.n	80085da <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d009      	beq.n	80085da <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	6852      	ldr	r2, [r2, #4]
 80085d2:	b2d2      	uxtb	r2, r2
 80085d4:	4611      	mov	r1, r2
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085da:	2340      	movs	r3, #64	; 0x40
 80085dc:	2200      	movs	r2, #0
 80085de:	2100      	movs	r1, #0
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f001 f962 	bl	80098aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2240      	movs	r2, #64	; 0x40
 80085f2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085f6:	2340      	movs	r3, #64	; 0x40
 80085f8:	2200      	movs	r2, #0
 80085fa:	2180      	movs	r1, #128	; 0x80
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f001 f954 	bl	80098aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2240      	movs	r2, #64	; 0x40
 800860c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	460b      	mov	r3, r1
 8008622:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	78fa      	ldrb	r2, [r7, #3]
 8008628:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008646:	b2da      	uxtb	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2204      	movs	r2, #4
 8008652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008672:	b2db      	uxtb	r3, r3
 8008674:	2b04      	cmp	r3, #4
 8008676:	d106      	bne.n	8008686 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800867e:	b2da      	uxtb	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e012      	b.n	80086d0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b03      	cmp	r3, #3
 80086b4:	d10b      	bne.n	80086ce <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086bc:	69db      	ldr	r3, [r3, #28]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d005      	beq.n	80086ce <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c8:	69db      	ldr	r3, [r3, #28]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80086d8:	b480      	push	{r7}
 80086da:	b087      	sub	sp, #28
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	3301      	adds	r3, #1
 80086ee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80086f6:	8a3b      	ldrh	r3, [r7, #16]
 80086f8:	021b      	lsls	r3, r3, #8
 80086fa:	b21a      	sxth	r2, r3
 80086fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008700:	4313      	orrs	r3, r2
 8008702:	b21b      	sxth	r3, r3
 8008704:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008706:	89fb      	ldrh	r3, [r7, #14]
}
 8008708:	4618      	mov	r0, r3
 800870a:	371c      	adds	r7, #28
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800872a:	2b40      	cmp	r3, #64	; 0x40
 800872c:	d005      	beq.n	800873a <USBD_StdDevReq+0x26>
 800872e:	2b40      	cmp	r3, #64	; 0x40
 8008730:	d853      	bhi.n	80087da <USBD_StdDevReq+0xc6>
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00b      	beq.n	800874e <USBD_StdDevReq+0x3a>
 8008736:	2b20      	cmp	r3, #32
 8008738:	d14f      	bne.n	80087da <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	4798      	blx	r3
 8008748:	4603      	mov	r3, r0
 800874a:	73fb      	strb	r3, [r7, #15]
      break;
 800874c:	e04a      	b.n	80087e4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	785b      	ldrb	r3, [r3, #1]
 8008752:	2b09      	cmp	r3, #9
 8008754:	d83b      	bhi.n	80087ce <USBD_StdDevReq+0xba>
 8008756:	a201      	add	r2, pc, #4	; (adr r2, 800875c <USBD_StdDevReq+0x48>)
 8008758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875c:	080087b1 	.word	0x080087b1
 8008760:	080087c5 	.word	0x080087c5
 8008764:	080087cf 	.word	0x080087cf
 8008768:	080087bb 	.word	0x080087bb
 800876c:	080087cf 	.word	0x080087cf
 8008770:	0800878f 	.word	0x0800878f
 8008774:	08008785 	.word	0x08008785
 8008778:	080087cf 	.word	0x080087cf
 800877c:	080087a7 	.word	0x080087a7
 8008780:	08008799 	.word	0x08008799
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008784:	6839      	ldr	r1, [r7, #0]
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f9de 	bl	8008b48 <USBD_GetDescriptor>
          break;
 800878c:	e024      	b.n	80087d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 fb6d 	bl	8008e70 <USBD_SetAddress>
          break;
 8008796:	e01f      	b.n	80087d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008798:	6839      	ldr	r1, [r7, #0]
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fbac 	bl	8008ef8 <USBD_SetConfig>
 80087a0:	4603      	mov	r3, r0
 80087a2:	73fb      	strb	r3, [r7, #15]
          break;
 80087a4:	e018      	b.n	80087d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80087a6:	6839      	ldr	r1, [r7, #0]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fc4b 	bl	8009044 <USBD_GetConfig>
          break;
 80087ae:	e013      	b.n	80087d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087b0:	6839      	ldr	r1, [r7, #0]
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fc7c 	bl	80090b0 <USBD_GetStatus>
          break;
 80087b8:	e00e      	b.n	80087d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087ba:	6839      	ldr	r1, [r7, #0]
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 fcab 	bl	8009118 <USBD_SetFeature>
          break;
 80087c2:	e009      	b.n	80087d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fcba 	bl	8009140 <USBD_ClrFeature>
          break;
 80087cc:	e004      	b.n	80087d8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fd11 	bl	80091f8 <USBD_CtlError>
          break;
 80087d6:	bf00      	nop
      }
      break;
 80087d8:	e004      	b.n	80087e4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fd0b 	bl	80091f8 <USBD_CtlError>
      break;
 80087e2:	bf00      	nop
  }

  return ret;
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop

080087f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008806:	2b40      	cmp	r3, #64	; 0x40
 8008808:	d005      	beq.n	8008816 <USBD_StdItfReq+0x26>
 800880a:	2b40      	cmp	r3, #64	; 0x40
 800880c:	d82f      	bhi.n	800886e <USBD_StdItfReq+0x7e>
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <USBD_StdItfReq+0x26>
 8008812:	2b20      	cmp	r3, #32
 8008814:	d12b      	bne.n	800886e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800881c:	b2db      	uxtb	r3, r3
 800881e:	3b01      	subs	r3, #1
 8008820:	2b02      	cmp	r3, #2
 8008822:	d81d      	bhi.n	8008860 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	889b      	ldrh	r3, [r3, #4]
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b01      	cmp	r3, #1
 800882c:	d813      	bhi.n	8008856 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	4798      	blx	r3
 800883c:	4603      	mov	r3, r0
 800883e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	88db      	ldrh	r3, [r3, #6]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d110      	bne.n	800886a <USBD_StdItfReq+0x7a>
 8008848:	7bfb      	ldrb	r3, [r7, #15]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10d      	bne.n	800886a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fd80 	bl	8009354 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008854:	e009      	b.n	800886a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fccd 	bl	80091f8 <USBD_CtlError>
          break;
 800885e:	e004      	b.n	800886a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fcc8 	bl	80091f8 <USBD_CtlError>
          break;
 8008868:	e000      	b.n	800886c <USBD_StdItfReq+0x7c>
          break;
 800886a:	bf00      	nop
      }
      break;
 800886c:	e004      	b.n	8008878 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fcc1 	bl	80091f8 <USBD_CtlError>
      break;
 8008876:	bf00      	nop
  }

  return ret;
 8008878:	7bfb      	ldrb	r3, [r7, #15]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b084      	sub	sp, #16
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	889b      	ldrh	r3, [r3, #4]
 8008894:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800889e:	2b40      	cmp	r3, #64	; 0x40
 80088a0:	d007      	beq.n	80088b2 <USBD_StdEPReq+0x30>
 80088a2:	2b40      	cmp	r3, #64	; 0x40
 80088a4:	f200 8145 	bhi.w	8008b32 <USBD_StdEPReq+0x2b0>
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00c      	beq.n	80088c6 <USBD_StdEPReq+0x44>
 80088ac:	2b20      	cmp	r3, #32
 80088ae:	f040 8140 	bne.w	8008b32 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	4798      	blx	r3
 80088c0:	4603      	mov	r3, r0
 80088c2:	73fb      	strb	r3, [r7, #15]
      break;
 80088c4:	e13a      	b.n	8008b3c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	785b      	ldrb	r3, [r3, #1]
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d007      	beq.n	80088de <USBD_StdEPReq+0x5c>
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	f300 8129 	bgt.w	8008b26 <USBD_StdEPReq+0x2a4>
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d07f      	beq.n	80089d8 <USBD_StdEPReq+0x156>
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d03c      	beq.n	8008956 <USBD_StdEPReq+0xd4>
 80088dc:	e123      	b.n	8008b26 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d002      	beq.n	80088f0 <USBD_StdEPReq+0x6e>
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	d016      	beq.n	800891c <USBD_StdEPReq+0x9a>
 80088ee:	e02c      	b.n	800894a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088f0:	7bbb      	ldrb	r3, [r7, #14]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00d      	beq.n	8008912 <USBD_StdEPReq+0x90>
 80088f6:	7bbb      	ldrb	r3, [r7, #14]
 80088f8:	2b80      	cmp	r3, #128	; 0x80
 80088fa:	d00a      	beq.n	8008912 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80088fc:	7bbb      	ldrb	r3, [r7, #14]
 80088fe:	4619      	mov	r1, r3
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f001 f817 	bl	8009934 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008906:	2180      	movs	r1, #128	; 0x80
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f001 f813 	bl	8009934 <USBD_LL_StallEP>
 800890e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008910:	e020      	b.n	8008954 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fc6f 	bl	80091f8 <USBD_CtlError>
              break;
 800891a:	e01b      	b.n	8008954 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	885b      	ldrh	r3, [r3, #2]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10e      	bne.n	8008942 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008924:	7bbb      	ldrb	r3, [r7, #14]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00b      	beq.n	8008942 <USBD_StdEPReq+0xc0>
 800892a:	7bbb      	ldrb	r3, [r7, #14]
 800892c:	2b80      	cmp	r3, #128	; 0x80
 800892e:	d008      	beq.n	8008942 <USBD_StdEPReq+0xc0>
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	88db      	ldrh	r3, [r3, #6]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d104      	bne.n	8008942 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008938:	7bbb      	ldrb	r3, [r7, #14]
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fff9 	bl	8009934 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fd06 	bl	8009354 <USBD_CtlSendStatus>

              break;
 8008948:	e004      	b.n	8008954 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fc53 	bl	80091f8 <USBD_CtlError>
              break;
 8008952:	bf00      	nop
          }
          break;
 8008954:	e0ec      	b.n	8008b30 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b02      	cmp	r3, #2
 8008960:	d002      	beq.n	8008968 <USBD_StdEPReq+0xe6>
 8008962:	2b03      	cmp	r3, #3
 8008964:	d016      	beq.n	8008994 <USBD_StdEPReq+0x112>
 8008966:	e030      	b.n	80089ca <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008968:	7bbb      	ldrb	r3, [r7, #14]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00d      	beq.n	800898a <USBD_StdEPReq+0x108>
 800896e:	7bbb      	ldrb	r3, [r7, #14]
 8008970:	2b80      	cmp	r3, #128	; 0x80
 8008972:	d00a      	beq.n	800898a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008974:	7bbb      	ldrb	r3, [r7, #14]
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 ffdb 	bl	8009934 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800897e:	2180      	movs	r1, #128	; 0x80
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 ffd7 	bl	8009934 <USBD_LL_StallEP>
 8008986:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008988:	e025      	b.n	80089d6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fc33 	bl	80091f8 <USBD_CtlError>
              break;
 8008992:	e020      	b.n	80089d6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	885b      	ldrh	r3, [r3, #2]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d11b      	bne.n	80089d4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800899c:	7bbb      	ldrb	r3, [r7, #14]
 800899e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d004      	beq.n	80089b0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80089a6:	7bbb      	ldrb	r3, [r7, #14]
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 ffe1 	bl	8009972 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fccf 	bl	8009354 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	4798      	blx	r3
 80089c4:	4603      	mov	r3, r0
 80089c6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80089c8:	e004      	b.n	80089d4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80089ca:	6839      	ldr	r1, [r7, #0]
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fc13 	bl	80091f8 <USBD_CtlError>
              break;
 80089d2:	e000      	b.n	80089d6 <USBD_StdEPReq+0x154>
              break;
 80089d4:	bf00      	nop
          }
          break;
 80089d6:	e0ab      	b.n	8008b30 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d002      	beq.n	80089ea <USBD_StdEPReq+0x168>
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	d032      	beq.n	8008a4e <USBD_StdEPReq+0x1cc>
 80089e8:	e097      	b.n	8008b1a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d007      	beq.n	8008a00 <USBD_StdEPReq+0x17e>
 80089f0:	7bbb      	ldrb	r3, [r7, #14]
 80089f2:	2b80      	cmp	r3, #128	; 0x80
 80089f4:	d004      	beq.n	8008a00 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fbfd 	bl	80091f8 <USBD_CtlError>
                break;
 80089fe:	e091      	b.n	8008b24 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	da0b      	bge.n	8008a20 <USBD_StdEPReq+0x19e>
 8008a08:	7bbb      	ldrb	r3, [r7, #14]
 8008a0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a0e:	4613      	mov	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	3310      	adds	r3, #16
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	e00b      	b.n	8008a38 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
 8008a22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a26:	4613      	mov	r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	4413      	add	r3, r2
 8008a36:	3304      	adds	r3, #4
 8008a38:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2202      	movs	r2, #2
 8008a44:	4619      	mov	r1, r3
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fc47 	bl	80092da <USBD_CtlSendData>
              break;
 8008a4c:	e06a      	b.n	8008b24 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	da11      	bge.n	8008a7a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
 8008a58:	f003 020f 	and.w	r2, r3, #15
 8008a5c:	6879      	ldr	r1, [r7, #4]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	440b      	add	r3, r1
 8008a68:	3324      	adds	r3, #36	; 0x24
 8008a6a:	881b      	ldrh	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d117      	bne.n	8008aa0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fbc0 	bl	80091f8 <USBD_CtlError>
                  break;
 8008a78:	e054      	b.n	8008b24 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a7a:	7bbb      	ldrb	r3, [r7, #14]
 8008a7c:	f003 020f 	and.w	r2, r3, #15
 8008a80:	6879      	ldr	r1, [r7, #4]
 8008a82:	4613      	mov	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	440b      	add	r3, r1
 8008a8c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a90:	881b      	ldrh	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d104      	bne.n	8008aa0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008a96:	6839      	ldr	r1, [r7, #0]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fbad 	bl	80091f8 <USBD_CtlError>
                  break;
 8008a9e:	e041      	b.n	8008b24 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	da0b      	bge.n	8008ac0 <USBD_StdEPReq+0x23e>
 8008aa8:	7bbb      	ldrb	r3, [r7, #14]
 8008aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008aae:	4613      	mov	r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	3310      	adds	r3, #16
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	4413      	add	r3, r2
 8008abc:	3304      	adds	r3, #4
 8008abe:	e00b      	b.n	8008ad8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ac0:	7bbb      	ldrb	r3, [r7, #14]
 8008ac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	3304      	adds	r3, #4
 8008ad8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ada:	7bbb      	ldrb	r3, [r7, #14]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d002      	beq.n	8008ae6 <USBD_StdEPReq+0x264>
 8008ae0:	7bbb      	ldrb	r3, [r7, #14]
 8008ae2:	2b80      	cmp	r3, #128	; 0x80
 8008ae4:	d103      	bne.n	8008aee <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	601a      	str	r2, [r3, #0]
 8008aec:	e00e      	b.n	8008b0c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008aee:	7bbb      	ldrb	r3, [r7, #14]
 8008af0:	4619      	mov	r1, r3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 ff5c 	bl	80099b0 <USBD_LL_IsStallEP>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d003      	beq.n	8008b06 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	2201      	movs	r2, #1
 8008b02:	601a      	str	r2, [r3, #0]
 8008b04:	e002      	b.n	8008b0c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fbe1 	bl	80092da <USBD_CtlSendData>
              break;
 8008b18:	e004      	b.n	8008b24 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fb6b 	bl	80091f8 <USBD_CtlError>
              break;
 8008b22:	bf00      	nop
          }
          break;
 8008b24:	e004      	b.n	8008b30 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fb65 	bl	80091f8 <USBD_CtlError>
          break;
 8008b2e:	bf00      	nop
      }
      break;
 8008b30:	e004      	b.n	8008b3c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008b32:	6839      	ldr	r1, [r7, #0]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fb5f 	bl	80091f8 <USBD_CtlError>
      break;
 8008b3a:	bf00      	nop
  }

  return ret;
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
	...

08008b48 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b52:	2300      	movs	r3, #0
 8008b54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b56:	2300      	movs	r3, #0
 8008b58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	885b      	ldrh	r3, [r3, #2]
 8008b62:	0a1b      	lsrs	r3, r3, #8
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	3b01      	subs	r3, #1
 8008b68:	2b0e      	cmp	r3, #14
 8008b6a:	f200 8152 	bhi.w	8008e12 <USBD_GetDescriptor+0x2ca>
 8008b6e:	a201      	add	r2, pc, #4	; (adr r2, 8008b74 <USBD_GetDescriptor+0x2c>)
 8008b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b74:	08008be5 	.word	0x08008be5
 8008b78:	08008bfd 	.word	0x08008bfd
 8008b7c:	08008c3d 	.word	0x08008c3d
 8008b80:	08008e13 	.word	0x08008e13
 8008b84:	08008e13 	.word	0x08008e13
 8008b88:	08008db3 	.word	0x08008db3
 8008b8c:	08008ddf 	.word	0x08008ddf
 8008b90:	08008e13 	.word	0x08008e13
 8008b94:	08008e13 	.word	0x08008e13
 8008b98:	08008e13 	.word	0x08008e13
 8008b9c:	08008e13 	.word	0x08008e13
 8008ba0:	08008e13 	.word	0x08008e13
 8008ba4:	08008e13 	.word	0x08008e13
 8008ba8:	08008e13 	.word	0x08008e13
 8008bac:	08008bb1 	.word	0x08008bb1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bb6:	69db      	ldr	r3, [r3, #28]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00b      	beq.n	8008bd4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	7c12      	ldrb	r2, [r2, #16]
 8008bc8:	f107 0108 	add.w	r1, r7, #8
 8008bcc:	4610      	mov	r0, r2
 8008bce:	4798      	blx	r3
 8008bd0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bd2:	e126      	b.n	8008e22 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008bd4:	6839      	ldr	r1, [r7, #0]
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fb0e 	bl	80091f8 <USBD_CtlError>
        err++;
 8008bdc:	7afb      	ldrb	r3, [r7, #11]
 8008bde:	3301      	adds	r3, #1
 8008be0:	72fb      	strb	r3, [r7, #11]
      break;
 8008be2:	e11e      	b.n	8008e22 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	7c12      	ldrb	r2, [r2, #16]
 8008bf0:	f107 0108 	add.w	r1, r7, #8
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	4798      	blx	r3
 8008bf8:	60f8      	str	r0, [r7, #12]
      break;
 8008bfa:	e112      	b.n	8008e22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	7c1b      	ldrb	r3, [r3, #16]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10d      	bne.n	8008c20 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0c:	f107 0208 	add.w	r2, r7, #8
 8008c10:	4610      	mov	r0, r2
 8008c12:	4798      	blx	r3
 8008c14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008c1e:	e100      	b.n	8008e22 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c28:	f107 0208 	add.w	r2, r7, #8
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	4798      	blx	r3
 8008c30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	3301      	adds	r3, #1
 8008c36:	2202      	movs	r2, #2
 8008c38:	701a      	strb	r2, [r3, #0]
      break;
 8008c3a:	e0f2      	b.n	8008e22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	885b      	ldrh	r3, [r3, #2]
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b05      	cmp	r3, #5
 8008c44:	f200 80ac 	bhi.w	8008da0 <USBD_GetDescriptor+0x258>
 8008c48:	a201      	add	r2, pc, #4	; (adr r2, 8008c50 <USBD_GetDescriptor+0x108>)
 8008c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4e:	bf00      	nop
 8008c50:	08008c69 	.word	0x08008c69
 8008c54:	08008c9d 	.word	0x08008c9d
 8008c58:	08008cd1 	.word	0x08008cd1
 8008c5c:	08008d05 	.word	0x08008d05
 8008c60:	08008d39 	.word	0x08008d39
 8008c64:	08008d6d 	.word	0x08008d6d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00b      	beq.n	8008c8c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	7c12      	ldrb	r2, [r2, #16]
 8008c80:	f107 0108 	add.w	r1, r7, #8
 8008c84:	4610      	mov	r0, r2
 8008c86:	4798      	blx	r3
 8008c88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c8a:	e091      	b.n	8008db0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fab2 	bl	80091f8 <USBD_CtlError>
            err++;
 8008c94:	7afb      	ldrb	r3, [r7, #11]
 8008c96:	3301      	adds	r3, #1
 8008c98:	72fb      	strb	r3, [r7, #11]
          break;
 8008c9a:	e089      	b.n	8008db0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00b      	beq.n	8008cc0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	7c12      	ldrb	r2, [r2, #16]
 8008cb4:	f107 0108 	add.w	r1, r7, #8
 8008cb8:	4610      	mov	r0, r2
 8008cba:	4798      	blx	r3
 8008cbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cbe:	e077      	b.n	8008db0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fa98 	bl	80091f8 <USBD_CtlError>
            err++;
 8008cc8:	7afb      	ldrb	r3, [r7, #11]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	72fb      	strb	r3, [r7, #11]
          break;
 8008cce:	e06f      	b.n	8008db0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00b      	beq.n	8008cf4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	7c12      	ldrb	r2, [r2, #16]
 8008ce8:	f107 0108 	add.w	r1, r7, #8
 8008cec:	4610      	mov	r0, r2
 8008cee:	4798      	blx	r3
 8008cf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cf2:	e05d      	b.n	8008db0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fa7e 	bl	80091f8 <USBD_CtlError>
            err++;
 8008cfc:	7afb      	ldrb	r3, [r7, #11]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	72fb      	strb	r3, [r7, #11]
          break;
 8008d02:	e055      	b.n	8008db0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00b      	beq.n	8008d28 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	7c12      	ldrb	r2, [r2, #16]
 8008d1c:	f107 0108 	add.w	r1, r7, #8
 8008d20:	4610      	mov	r0, r2
 8008d22:	4798      	blx	r3
 8008d24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d26:	e043      	b.n	8008db0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fa64 	bl	80091f8 <USBD_CtlError>
            err++;
 8008d30:	7afb      	ldrb	r3, [r7, #11]
 8008d32:	3301      	adds	r3, #1
 8008d34:	72fb      	strb	r3, [r7, #11]
          break;
 8008d36:	e03b      	b.n	8008db0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00b      	beq.n	8008d5c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d4a:	695b      	ldr	r3, [r3, #20]
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	7c12      	ldrb	r2, [r2, #16]
 8008d50:	f107 0108 	add.w	r1, r7, #8
 8008d54:	4610      	mov	r0, r2
 8008d56:	4798      	blx	r3
 8008d58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d5a:	e029      	b.n	8008db0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fa4a 	bl	80091f8 <USBD_CtlError>
            err++;
 8008d64:	7afb      	ldrb	r3, [r7, #11]
 8008d66:	3301      	adds	r3, #1
 8008d68:	72fb      	strb	r3, [r7, #11]
          break;
 8008d6a:	e021      	b.n	8008db0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00b      	beq.n	8008d90 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	7c12      	ldrb	r2, [r2, #16]
 8008d84:	f107 0108 	add.w	r1, r7, #8
 8008d88:	4610      	mov	r0, r2
 8008d8a:	4798      	blx	r3
 8008d8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d8e:	e00f      	b.n	8008db0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d90:	6839      	ldr	r1, [r7, #0]
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fa30 	bl	80091f8 <USBD_CtlError>
            err++;
 8008d98:	7afb      	ldrb	r3, [r7, #11]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d9e:	e007      	b.n	8008db0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fa28 	bl	80091f8 <USBD_CtlError>
          err++;
 8008da8:	7afb      	ldrb	r3, [r7, #11]
 8008daa:	3301      	adds	r3, #1
 8008dac:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008dae:	bf00      	nop
      }
      break;
 8008db0:	e037      	b.n	8008e22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	7c1b      	ldrb	r3, [r3, #16]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d109      	bne.n	8008dce <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc2:	f107 0208 	add.w	r2, r7, #8
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	4798      	blx	r3
 8008dca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dcc:	e029      	b.n	8008e22 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fa11 	bl	80091f8 <USBD_CtlError>
        err++;
 8008dd6:	7afb      	ldrb	r3, [r7, #11]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	72fb      	strb	r3, [r7, #11]
      break;
 8008ddc:	e021      	b.n	8008e22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	7c1b      	ldrb	r3, [r3, #16]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10d      	bne.n	8008e02 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dee:	f107 0208 	add.w	r2, r7, #8
 8008df2:	4610      	mov	r0, r2
 8008df4:	4798      	blx	r3
 8008df6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	2207      	movs	r2, #7
 8008dfe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e00:	e00f      	b.n	8008e22 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 f9f7 	bl	80091f8 <USBD_CtlError>
        err++;
 8008e0a:	7afb      	ldrb	r3, [r7, #11]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	72fb      	strb	r3, [r7, #11]
      break;
 8008e10:	e007      	b.n	8008e22 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f9ef 	bl	80091f8 <USBD_CtlError>
      err++;
 8008e1a:	7afb      	ldrb	r3, [r7, #11]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	72fb      	strb	r3, [r7, #11]
      break;
 8008e20:	bf00      	nop
  }

  if (err != 0U)
 8008e22:	7afb      	ldrb	r3, [r7, #11]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d11e      	bne.n	8008e66 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	88db      	ldrh	r3, [r3, #6]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d016      	beq.n	8008e5e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008e30:	893b      	ldrh	r3, [r7, #8]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00e      	beq.n	8008e54 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	88da      	ldrh	r2, [r3, #6]
 8008e3a:	893b      	ldrh	r3, [r7, #8]
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	bf28      	it	cs
 8008e40:	4613      	movcs	r3, r2
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e46:	893b      	ldrh	r3, [r7, #8]
 8008e48:	461a      	mov	r2, r3
 8008e4a:	68f9      	ldr	r1, [r7, #12]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fa44 	bl	80092da <USBD_CtlSendData>
 8008e52:	e009      	b.n	8008e68 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008e54:	6839      	ldr	r1, [r7, #0]
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f9ce 	bl	80091f8 <USBD_CtlError>
 8008e5c:	e004      	b.n	8008e68 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fa78 	bl	8009354 <USBD_CtlSendStatus>
 8008e64:	e000      	b.n	8008e68 <USBD_GetDescriptor+0x320>
    return;
 8008e66:	bf00      	nop
  }
}
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop

08008e70 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	889b      	ldrh	r3, [r3, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d131      	bne.n	8008ee6 <USBD_SetAddress+0x76>
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	88db      	ldrh	r3, [r3, #6]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d12d      	bne.n	8008ee6 <USBD_SetAddress+0x76>
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	885b      	ldrh	r3, [r3, #2]
 8008e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8008e90:	d829      	bhi.n	8008ee6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	885b      	ldrh	r3, [r3, #2]
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b03      	cmp	r3, #3
 8008ea8:	d104      	bne.n	8008eb4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f9a3 	bl	80091f8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eb2:	e01d      	b.n	8008ef0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	7bfa      	ldrb	r2, [r7, #15]
 8008eb8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fda2 	bl	8009a0a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fa44 	bl	8009354 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d004      	beq.n	8008edc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eda:	e009      	b.n	8008ef0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee4:	e004      	b.n	8008ef0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f985 	bl	80091f8 <USBD_CtlError>
  }
}
 8008eee:	bf00      	nop
 8008ef0:	bf00      	nop
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f02:	2300      	movs	r3, #0
 8008f04:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	885b      	ldrh	r3, [r3, #2]
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	4b4c      	ldr	r3, [pc, #304]	; (8009040 <USBD_SetConfig+0x148>)
 8008f0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f10:	4b4b      	ldr	r3, [pc, #300]	; (8009040 <USBD_SetConfig+0x148>)
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d905      	bls.n	8008f24 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 f96c 	bl	80091f8 <USBD_CtlError>
    return USBD_FAIL;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e088      	b.n	8009036 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d002      	beq.n	8008f36 <USBD_SetConfig+0x3e>
 8008f30:	2b03      	cmp	r3, #3
 8008f32:	d025      	beq.n	8008f80 <USBD_SetConfig+0x88>
 8008f34:	e071      	b.n	800901a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008f36:	4b42      	ldr	r3, [pc, #264]	; (8009040 <USBD_SetConfig+0x148>)
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d01c      	beq.n	8008f78 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008f3e:	4b40      	ldr	r3, [pc, #256]	; (8009040 <USBD_SetConfig+0x148>)
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f48:	4b3d      	ldr	r3, [pc, #244]	; (8009040 <USBD_SetConfig+0x148>)
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7ff f992 	bl	8008278 <USBD_SetClassConfig>
 8008f54:	4603      	mov	r3, r0
 8008f56:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d004      	beq.n	8008f68 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008f5e:	6839      	ldr	r1, [r7, #0]
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f949 	bl	80091f8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f66:	e065      	b.n	8009034 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 f9f3 	bl	8009354 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2203      	movs	r2, #3
 8008f72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008f76:	e05d      	b.n	8009034 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f9eb 	bl	8009354 <USBD_CtlSendStatus>
      break;
 8008f7e:	e059      	b.n	8009034 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008f80:	4b2f      	ldr	r3, [pc, #188]	; (8009040 <USBD_SetConfig+0x148>)
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d112      	bne.n	8008fae <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008f90:	4b2b      	ldr	r3, [pc, #172]	; (8009040 <USBD_SetConfig+0x148>)
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	461a      	mov	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f9a:	4b29      	ldr	r3, [pc, #164]	; (8009040 <USBD_SetConfig+0x148>)
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7ff f985 	bl	80082b0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f9d4 	bl	8009354 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008fac:	e042      	b.n	8009034 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008fae:	4b24      	ldr	r3, [pc, #144]	; (8009040 <USBD_SetConfig+0x148>)
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d02a      	beq.n	8009012 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f7ff f973 	bl	80082b0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008fca:	4b1d      	ldr	r3, [pc, #116]	; (8009040 <USBD_SetConfig+0x148>)
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008fd4:	4b1a      	ldr	r3, [pc, #104]	; (8009040 <USBD_SetConfig+0x148>)
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	4619      	mov	r1, r3
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7ff f94c 	bl	8008278 <USBD_SetClassConfig>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00f      	beq.n	800900a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008fea:	6839      	ldr	r1, [r7, #0]
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f903 	bl	80091f8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f7ff f958 	bl	80082b0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2202      	movs	r2, #2
 8009004:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009008:	e014      	b.n	8009034 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f9a2 	bl	8009354 <USBD_CtlSendStatus>
      break;
 8009010:	e010      	b.n	8009034 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f99e 	bl	8009354 <USBD_CtlSendStatus>
      break;
 8009018:	e00c      	b.n	8009034 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800901a:	6839      	ldr	r1, [r7, #0]
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f8eb 	bl	80091f8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009022:	4b07      	ldr	r3, [pc, #28]	; (8009040 <USBD_SetConfig+0x148>)
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f7ff f941 	bl	80082b0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800902e:	2303      	movs	r3, #3
 8009030:	73fb      	strb	r3, [r7, #15]
      break;
 8009032:	bf00      	nop
  }

  return ret;
 8009034:	7bfb      	ldrb	r3, [r7, #15]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	20000278 	.word	0x20000278

08009044 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	88db      	ldrh	r3, [r3, #6]
 8009052:	2b01      	cmp	r3, #1
 8009054:	d004      	beq.n	8009060 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f8cd 	bl	80091f8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800905e:	e023      	b.n	80090a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b02      	cmp	r3, #2
 800906a:	dc02      	bgt.n	8009072 <USBD_GetConfig+0x2e>
 800906c:	2b00      	cmp	r3, #0
 800906e:	dc03      	bgt.n	8009078 <USBD_GetConfig+0x34>
 8009070:	e015      	b.n	800909e <USBD_GetConfig+0x5a>
 8009072:	2b03      	cmp	r3, #3
 8009074:	d00b      	beq.n	800908e <USBD_GetConfig+0x4a>
 8009076:	e012      	b.n	800909e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	3308      	adds	r3, #8
 8009082:	2201      	movs	r2, #1
 8009084:	4619      	mov	r1, r3
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f927 	bl	80092da <USBD_CtlSendData>
        break;
 800908c:	e00c      	b.n	80090a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	3304      	adds	r3, #4
 8009092:	2201      	movs	r2, #1
 8009094:	4619      	mov	r1, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f91f 	bl	80092da <USBD_CtlSendData>
        break;
 800909c:	e004      	b.n	80090a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800909e:	6839      	ldr	r1, [r7, #0]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f8a9 	bl	80091f8 <USBD_CtlError>
        break;
 80090a6:	bf00      	nop
}
 80090a8:	bf00      	nop
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	3b01      	subs	r3, #1
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	d81e      	bhi.n	8009106 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	88db      	ldrh	r3, [r3, #6]
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d004      	beq.n	80090da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f890 	bl	80091f8 <USBD_CtlError>
        break;
 80090d8:	e01a      	b.n	8009110 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2201      	movs	r2, #1
 80090de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d005      	beq.n	80090f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	f043 0202 	orr.w	r2, r3, #2
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	330c      	adds	r3, #12
 80090fa:	2202      	movs	r2, #2
 80090fc:	4619      	mov	r1, r3
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f8eb 	bl	80092da <USBD_CtlSendData>
      break;
 8009104:	e004      	b.n	8009110 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f875 	bl	80091f8 <USBD_CtlError>
      break;
 800910e:	bf00      	nop
  }
}
 8009110:	bf00      	nop
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	885b      	ldrh	r3, [r3, #2]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d106      	bne.n	8009138 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2201      	movs	r2, #1
 800912e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f90e 	bl	8009354 <USBD_CtlSendStatus>
  }
}
 8009138:	bf00      	nop
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009150:	b2db      	uxtb	r3, r3
 8009152:	3b01      	subs	r3, #1
 8009154:	2b02      	cmp	r3, #2
 8009156:	d80b      	bhi.n	8009170 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	885b      	ldrh	r3, [r3, #2]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d10c      	bne.n	800917a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f8f3 	bl	8009354 <USBD_CtlSendStatus>
      }
      break;
 800916e:	e004      	b.n	800917a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f840 	bl	80091f8 <USBD_CtlError>
      break;
 8009178:	e000      	b.n	800917c <USBD_ClrFeature+0x3c>
      break;
 800917a:	bf00      	nop
  }
}
 800917c:	bf00      	nop
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	781a      	ldrb	r2, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3301      	adds	r3, #1
 800919e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	781a      	ldrb	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	3301      	adds	r3, #1
 80091ac:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f7ff fa92 	bl	80086d8 <SWAPBYTE>
 80091b4:	4603      	mov	r3, r0
 80091b6:	461a      	mov	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	3301      	adds	r3, #1
 80091c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	3301      	adds	r3, #1
 80091c6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f7ff fa85 	bl	80086d8 <SWAPBYTE>
 80091ce:	4603      	mov	r3, r0
 80091d0:	461a      	mov	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	3301      	adds	r3, #1
 80091da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	3301      	adds	r3, #1
 80091e0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f7ff fa78 	bl	80086d8 <SWAPBYTE>
 80091e8:	4603      	mov	r3, r0
 80091ea:	461a      	mov	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	80da      	strh	r2, [r3, #6]
}
 80091f0:	bf00      	nop
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009202:	2180      	movs	r1, #128	; 0x80
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fb95 	bl	8009934 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800920a:	2100      	movs	r1, #0
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fb91 	bl	8009934 <USBD_LL_StallEP>
}
 8009212:	bf00      	nop
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b086      	sub	sp, #24
 800921e:	af00      	add	r7, sp, #0
 8009220:	60f8      	str	r0, [r7, #12]
 8009222:	60b9      	str	r1, [r7, #8]
 8009224:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009226:	2300      	movs	r3, #0
 8009228:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d036      	beq.n	800929e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009234:	6938      	ldr	r0, [r7, #16]
 8009236:	f000 f836 	bl	80092a6 <USBD_GetLen>
 800923a:	4603      	mov	r3, r0
 800923c:	3301      	adds	r3, #1
 800923e:	b29b      	uxth	r3, r3
 8009240:	005b      	lsls	r3, r3, #1
 8009242:	b29a      	uxth	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009248:	7dfb      	ldrb	r3, [r7, #23]
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	4413      	add	r3, r2
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	7812      	ldrb	r2, [r2, #0]
 8009252:	701a      	strb	r2, [r3, #0]
  idx++;
 8009254:	7dfb      	ldrb	r3, [r7, #23]
 8009256:	3301      	adds	r3, #1
 8009258:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800925a:	7dfb      	ldrb	r3, [r7, #23]
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	4413      	add	r3, r2
 8009260:	2203      	movs	r2, #3
 8009262:	701a      	strb	r2, [r3, #0]
  idx++;
 8009264:	7dfb      	ldrb	r3, [r7, #23]
 8009266:	3301      	adds	r3, #1
 8009268:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800926a:	e013      	b.n	8009294 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800926c:	7dfb      	ldrb	r3, [r7, #23]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	4413      	add	r3, r2
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	7812      	ldrb	r2, [r2, #0]
 8009276:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	3301      	adds	r3, #1
 800927c:	613b      	str	r3, [r7, #16]
    idx++;
 800927e:	7dfb      	ldrb	r3, [r7, #23]
 8009280:	3301      	adds	r3, #1
 8009282:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009284:	7dfb      	ldrb	r3, [r7, #23]
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	4413      	add	r3, r2
 800928a:	2200      	movs	r2, #0
 800928c:	701a      	strb	r2, [r3, #0]
    idx++;
 800928e:	7dfb      	ldrb	r3, [r7, #23]
 8009290:	3301      	adds	r3, #1
 8009292:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1e7      	bne.n	800926c <USBD_GetString+0x52>
 800929c:	e000      	b.n	80092a0 <USBD_GetString+0x86>
    return;
 800929e:	bf00      	nop
  }
}
 80092a0:	3718      	adds	r7, #24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80092a6:	b480      	push	{r7}
 80092a8:	b085      	sub	sp, #20
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80092ae:	2300      	movs	r3, #0
 80092b0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80092b6:	e005      	b.n	80092c4 <USBD_GetLen+0x1e>
  {
    len++;
 80092b8:	7bfb      	ldrb	r3, [r7, #15]
 80092ba:	3301      	adds	r3, #1
 80092bc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	3301      	adds	r3, #1
 80092c2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1f5      	bne.n	80092b8 <USBD_GetLen+0x12>
  }

  return len;
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3714      	adds	r7, #20
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr

080092da <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b084      	sub	sp, #16
 80092de:	af00      	add	r7, sp, #0
 80092e0:	60f8      	str	r0, [r7, #12]
 80092e2:	60b9      	str	r1, [r7, #8]
 80092e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2202      	movs	r2, #2
 80092ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	2100      	movs	r1, #0
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 fba1 	bl	8009a48 <USBD_LL_Transmit>

  return USBD_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	2100      	movs	r1, #0
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f000 fb90 	bl	8009a48 <USBD_LL_Transmit>

  return USBD_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b084      	sub	sp, #16
 8009336:	af00      	add	r7, sp, #0
 8009338:	60f8      	str	r0, [r7, #12]
 800933a:	60b9      	str	r1, [r7, #8]
 800933c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	2100      	movs	r1, #0
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f000 fba0 	bl	8009a8a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2204      	movs	r2, #4
 8009360:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009364:	2300      	movs	r3, #0
 8009366:	2200      	movs	r2, #0
 8009368:	2100      	movs	r1, #0
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fb6c 	bl	8009a48 <USBD_LL_Transmit>

  return USBD_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b082      	sub	sp, #8
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2205      	movs	r2, #5
 8009386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800938a:	2300      	movs	r3, #0
 800938c:	2200      	movs	r2, #0
 800938e:	2100      	movs	r1, #0
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 fb7a 	bl	8009a8a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 80093a4:	2200      	movs	r2, #0
 80093a6:	490e      	ldr	r1, [pc, #56]	; (80093e0 <MX_USB_Device_Init+0x40>)
 80093a8:	480e      	ldr	r0, [pc, #56]	; (80093e4 <MX_USB_Device_Init+0x44>)
 80093aa:	f7fe fef7 	bl	800819c <USBD_Init>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80093b4:	f7f7 f9ec 	bl	8000790 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 80093b8:	490b      	ldr	r1, [pc, #44]	; (80093e8 <MX_USB_Device_Init+0x48>)
 80093ba:	480a      	ldr	r0, [pc, #40]	; (80093e4 <MX_USB_Device_Init+0x44>)
 80093bc:	f7fe ff1e 	bl	80081fc <USBD_RegisterClass>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d001      	beq.n	80093ca <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80093c6:	f7f7 f9e3 	bl	8000790 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80093ca:	4806      	ldr	r0, [pc, #24]	; (80093e4 <MX_USB_Device_Init+0x44>)
 80093cc:	f7fe ff3d 	bl	800824a <USBD_Start>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <MX_USB_Device_Init+0x3a>
    Error_Handler();
 80093d6:	f7f7 f9db 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80093da:	bf00      	nop
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	20000108 	.word	0x20000108
 80093e4:	2000027c 	.word	0x2000027c
 80093e8:	2000000c 	.word	0x2000000c

080093ec <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	4603      	mov	r3, r0
 80093f4:	6039      	str	r1, [r7, #0]
 80093f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	2212      	movs	r2, #18
 80093fc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 80093fe:	4b03      	ldr	r3, [pc, #12]	; (800940c <USBD_HID_DeviceDescriptor+0x20>)
}
 8009400:	4618      	mov	r0, r3
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	20000128 	.word	0x20000128

08009410 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	4603      	mov	r3, r0
 8009418:	6039      	str	r1, [r7, #0]
 800941a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	2204      	movs	r2, #4
 8009420:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009422:	4b03      	ldr	r3, [pc, #12]	; (8009430 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 8009424:	4618      	mov	r0, r3
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr
 8009430:	2000013c 	.word	0x2000013c

08009434 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	4603      	mov	r3, r0
 800943c:	6039      	str	r1, [r7, #0]
 800943e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009440:	79fb      	ldrb	r3, [r7, #7]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d105      	bne.n	8009452 <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009446:	683a      	ldr	r2, [r7, #0]
 8009448:	4907      	ldr	r1, [pc, #28]	; (8009468 <USBD_HID_ProductStrDescriptor+0x34>)
 800944a:	4808      	ldr	r0, [pc, #32]	; (800946c <USBD_HID_ProductStrDescriptor+0x38>)
 800944c:	f7ff fee5 	bl	800921a <USBD_GetString>
 8009450:	e004      	b.n	800945c <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009452:	683a      	ldr	r2, [r7, #0]
 8009454:	4904      	ldr	r1, [pc, #16]	; (8009468 <USBD_HID_ProductStrDescriptor+0x34>)
 8009456:	4805      	ldr	r0, [pc, #20]	; (800946c <USBD_HID_ProductStrDescriptor+0x38>)
 8009458:	f7ff fedf 	bl	800921a <USBD_GetString>
  }
  return USBD_StrDesc;
 800945c:	4b02      	ldr	r3, [pc, #8]	; (8009468 <USBD_HID_ProductStrDescriptor+0x34>)
}
 800945e:	4618      	mov	r0, r3
 8009460:	3708      	adds	r7, #8
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	2000054c 	.word	0x2000054c
 800946c:	08009c3c 	.word	0x08009c3c

08009470 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	4603      	mov	r3, r0
 8009478:	6039      	str	r1, [r7, #0]
 800947a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800947c:	683a      	ldr	r2, [r7, #0]
 800947e:	4904      	ldr	r1, [pc, #16]	; (8009490 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 8009480:	4804      	ldr	r0, [pc, #16]	; (8009494 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 8009482:	f7ff feca 	bl	800921a <USBD_GetString>
  return USBD_StrDesc;
 8009486:	4b02      	ldr	r3, [pc, #8]	; (8009490 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 8009488:	4618      	mov	r0, r3
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	2000054c 	.word	0x2000054c
 8009494:	08009c4c 	.word	0x08009c4c

08009498 <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	4603      	mov	r3, r0
 80094a0:	6039      	str	r1, [r7, #0]
 80094a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	221a      	movs	r2, #26
 80094a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80094aa:	f000 f843 	bl	8009534 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80094ae:	4b02      	ldr	r3, [pc, #8]	; (80094b8 <USBD_HID_SerialStrDescriptor+0x20>)
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	20000140 	.word	0x20000140

080094bc <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	4603      	mov	r3, r0
 80094c4:	6039      	str	r1, [r7, #0]
 80094c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80094c8:	79fb      	ldrb	r3, [r7, #7]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d105      	bne.n	80094da <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	4907      	ldr	r1, [pc, #28]	; (80094f0 <USBD_HID_ConfigStrDescriptor+0x34>)
 80094d2:	4808      	ldr	r0, [pc, #32]	; (80094f4 <USBD_HID_ConfigStrDescriptor+0x38>)
 80094d4:	f7ff fea1 	bl	800921a <USBD_GetString>
 80094d8:	e004      	b.n	80094e4 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80094da:	683a      	ldr	r2, [r7, #0]
 80094dc:	4904      	ldr	r1, [pc, #16]	; (80094f0 <USBD_HID_ConfigStrDescriptor+0x34>)
 80094de:	4805      	ldr	r0, [pc, #20]	; (80094f4 <USBD_HID_ConfigStrDescriptor+0x38>)
 80094e0:	f7ff fe9b 	bl	800921a <USBD_GetString>
  }
  return USBD_StrDesc;
 80094e4:	4b02      	ldr	r3, [pc, #8]	; (80094f0 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	2000054c 	.word	0x2000054c
 80094f4:	08009c60 	.word	0x08009c60

080094f8 <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	4603      	mov	r3, r0
 8009500:	6039      	str	r1, [r7, #0]
 8009502:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009504:	79fb      	ldrb	r3, [r7, #7]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d105      	bne.n	8009516 <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	4907      	ldr	r1, [pc, #28]	; (800952c <USBD_HID_InterfaceStrDescriptor+0x34>)
 800950e:	4808      	ldr	r0, [pc, #32]	; (8009530 <USBD_HID_InterfaceStrDescriptor+0x38>)
 8009510:	f7ff fe83 	bl	800921a <USBD_GetString>
 8009514:	e004      	b.n	8009520 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	4904      	ldr	r1, [pc, #16]	; (800952c <USBD_HID_InterfaceStrDescriptor+0x34>)
 800951a:	4805      	ldr	r0, [pc, #20]	; (8009530 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800951c:	f7ff fe7d 	bl	800921a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009520:	4b02      	ldr	r3, [pc, #8]	; (800952c <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 8009522:	4618      	mov	r0, r3
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	2000054c 	.word	0x2000054c
 8009530:	08009c6c 	.word	0x08009c6c

08009534 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800953a:	4b0f      	ldr	r3, [pc, #60]	; (8009578 <Get_SerialNum+0x44>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009540:	4b0e      	ldr	r3, [pc, #56]	; (800957c <Get_SerialNum+0x48>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009546:	4b0e      	ldr	r3, [pc, #56]	; (8009580 <Get_SerialNum+0x4c>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4413      	add	r3, r2
 8009552:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d009      	beq.n	800956e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800955a:	2208      	movs	r2, #8
 800955c:	4909      	ldr	r1, [pc, #36]	; (8009584 <Get_SerialNum+0x50>)
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f000 f814 	bl	800958c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009564:	2204      	movs	r2, #4
 8009566:	4908      	ldr	r1, [pc, #32]	; (8009588 <Get_SerialNum+0x54>)
 8009568:	68b8      	ldr	r0, [r7, #8]
 800956a:	f000 f80f 	bl	800958c <IntToUnicode>
  }
}
 800956e:	bf00      	nop
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	1fff7590 	.word	0x1fff7590
 800957c:	1fff7594 	.word	0x1fff7594
 8009580:	1fff7598 	.word	0x1fff7598
 8009584:	20000142 	.word	0x20000142
 8009588:	20000152 	.word	0x20000152

0800958c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800958c:	b480      	push	{r7}
 800958e:	b087      	sub	sp, #28
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	4613      	mov	r3, r2
 8009598:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800959a:	2300      	movs	r3, #0
 800959c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800959e:	2300      	movs	r3, #0
 80095a0:	75fb      	strb	r3, [r7, #23]
 80095a2:	e027      	b.n	80095f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	0f1b      	lsrs	r3, r3, #28
 80095a8:	2b09      	cmp	r3, #9
 80095aa:	d80b      	bhi.n	80095c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	0f1b      	lsrs	r3, r3, #28
 80095b0:	b2da      	uxtb	r2, r3
 80095b2:	7dfb      	ldrb	r3, [r7, #23]
 80095b4:	005b      	lsls	r3, r3, #1
 80095b6:	4619      	mov	r1, r3
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	440b      	add	r3, r1
 80095bc:	3230      	adds	r2, #48	; 0x30
 80095be:	b2d2      	uxtb	r2, r2
 80095c0:	701a      	strb	r2, [r3, #0]
 80095c2:	e00a      	b.n	80095da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	0f1b      	lsrs	r3, r3, #28
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	7dfb      	ldrb	r3, [r7, #23]
 80095cc:	005b      	lsls	r3, r3, #1
 80095ce:	4619      	mov	r1, r3
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	440b      	add	r3, r1
 80095d4:	3237      	adds	r2, #55	; 0x37
 80095d6:	b2d2      	uxtb	r2, r2
 80095d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	011b      	lsls	r3, r3, #4
 80095de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80095e0:	7dfb      	ldrb	r3, [r7, #23]
 80095e2:	005b      	lsls	r3, r3, #1
 80095e4:	3301      	adds	r3, #1
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	4413      	add	r3, r2
 80095ea:	2200      	movs	r2, #0
 80095ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80095ee:	7dfb      	ldrb	r3, [r7, #23]
 80095f0:	3301      	adds	r3, #1
 80095f2:	75fb      	strb	r3, [r7, #23]
 80095f4:	7dfa      	ldrb	r2, [r7, #23]
 80095f6:	79fb      	ldrb	r3, [r7, #7]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d3d3      	bcc.n	80095a4 <IntToUnicode+0x18>
  }
}
 80095fc:	bf00      	nop
 80095fe:	bf00      	nop
 8009600:	371c      	adds	r7, #28
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
	...

0800960c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b094      	sub	sp, #80	; 0x50
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009614:	f107 030c 	add.w	r3, r7, #12
 8009618:	2244      	movs	r2, #68	; 0x44
 800961a:	2100      	movs	r1, #0
 800961c:	4618      	mov	r0, r3
 800961e:	f000 faf9 	bl	8009c14 <memset>
  if(pcdHandle->Instance==USB)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a15      	ldr	r2, [pc, #84]	; (800967c <HAL_PCD_MspInit+0x70>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d123      	bne.n	8009674 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800962c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009630:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8009632:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009636:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009638:	f107 030c 	add.w	r3, r7, #12
 800963c:	4618      	mov	r0, r3
 800963e:	f7fa fb0b 	bl	8003c58 <HAL_RCCEx_PeriphCLKConfig>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d001      	beq.n	800964c <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8009648:	f7f7 f8a2 	bl	8000790 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800964c:	4b0c      	ldr	r3, [pc, #48]	; (8009680 <HAL_PCD_MspInit+0x74>)
 800964e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009650:	4a0b      	ldr	r2, [pc, #44]	; (8009680 <HAL_PCD_MspInit+0x74>)
 8009652:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009656:	6593      	str	r3, [r2, #88]	; 0x58
 8009658:	4b09      	ldr	r3, [pc, #36]	; (8009680 <HAL_PCD_MspInit+0x74>)
 800965a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800965c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009660:	60bb      	str	r3, [r7, #8]
 8009662:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009664:	2200      	movs	r2, #0
 8009666:	2100      	movs	r1, #0
 8009668:	2014      	movs	r0, #20
 800966a:	f7f7 fb18 	bl	8000c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800966e:	2014      	movs	r0, #20
 8009670:	f7f7 fb2f 	bl	8000cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009674:	bf00      	nop
 8009676:	3750      	adds	r7, #80	; 0x50
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	40005c00 	.word	0x40005c00
 8009680:	40021000 	.word	0x40021000

08009684 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009698:	4619      	mov	r1, r3
 800969a:	4610      	mov	r0, r2
 800969c:	f7fe fe20 	bl	80082e0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80096a0:	bf00      	nop
 80096a2:	3708      	adds	r7, #8
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	460b      	mov	r3, r1
 80096b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80096ba:	78fa      	ldrb	r2, [r7, #3]
 80096bc:	6879      	ldr	r1, [r7, #4]
 80096be:	4613      	mov	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	4413      	add	r3, r2
 80096c4:	00db      	lsls	r3, r3, #3
 80096c6:	440b      	add	r3, r1
 80096c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	78fb      	ldrb	r3, [r7, #3]
 80096d0:	4619      	mov	r1, r3
 80096d2:	f7fe fe5a 	bl	800838a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80096d6:	bf00      	nop
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b082      	sub	sp, #8
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	460b      	mov	r3, r1
 80096e8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80096f0:	78fa      	ldrb	r2, [r7, #3]
 80096f2:	6879      	ldr	r1, [r7, #4]
 80096f4:	4613      	mov	r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	4413      	add	r3, r2
 80096fa:	00db      	lsls	r3, r3, #3
 80096fc:	440b      	add	r3, r1
 80096fe:	333c      	adds	r3, #60	; 0x3c
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	78fb      	ldrb	r3, [r7, #3]
 8009704:	4619      	mov	r1, r3
 8009706:	f7fe fea3 	bl	8008450 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800970a:	bf00      	nop
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b082      	sub	sp, #8
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009720:	4618      	mov	r0, r3
 8009722:	f7fe ffb7 	bl	8008694 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009726:	bf00      	nop
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b084      	sub	sp, #16
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009736:	2301      	movs	r3, #1
 8009738:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	2b02      	cmp	r3, #2
 8009740:	d001      	beq.n	8009746 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009742:	f7f7 f825 	bl	8000790 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800974c:	7bfa      	ldrb	r2, [r7, #15]
 800974e:	4611      	mov	r1, r2
 8009750:	4618      	mov	r0, r3
 8009752:	f7fe ff61 	bl	8008618 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800975c:	4618      	mov	r0, r3
 800975e:	f7fe ff0d 	bl	800857c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009762:	bf00      	nop
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
	...

0800976c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800977a:	4618      	mov	r0, r3
 800977c:	f7fe ff5c 	bl	8008638 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d005      	beq.n	8009794 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009788:	4b04      	ldr	r3, [pc, #16]	; (800979c <HAL_PCD_SuspendCallback+0x30>)
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	4a03      	ldr	r2, [pc, #12]	; (800979c <HAL_PCD_SuspendCallback+0x30>)
 800978e:	f043 0306 	orr.w	r3, r3, #6
 8009792:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009794:	bf00      	nop
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	e000ed00 	.word	0xe000ed00

080097a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	699b      	ldr	r3, [r3, #24]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d007      	beq.n	80097c0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80097b0:	4b08      	ldr	r3, [pc, #32]	; (80097d4 <HAL_PCD_ResumeCallback+0x34>)
 80097b2:	691b      	ldr	r3, [r3, #16]
 80097b4:	4a07      	ldr	r2, [pc, #28]	; (80097d4 <HAL_PCD_ResumeCallback+0x34>)
 80097b6:	f023 0306 	bic.w	r3, r3, #6
 80097ba:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80097bc:	f000 f9d4 	bl	8009b68 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fe ff4c 	bl	8008664 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80097cc:	bf00      	nop
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	e000ed00 	.word	0xe000ed00

080097d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80097e0:	4a22      	ldr	r2, [pc, #136]	; (800986c <USBD_LL_Init+0x94>)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a20      	ldr	r2, [pc, #128]	; (800986c <USBD_LL_Init+0x94>)
 80097ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80097f0:	4b1e      	ldr	r3, [pc, #120]	; (800986c <USBD_LL_Init+0x94>)
 80097f2:	4a1f      	ldr	r2, [pc, #124]	; (8009870 <USBD_LL_Init+0x98>)
 80097f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80097f6:	4b1d      	ldr	r3, [pc, #116]	; (800986c <USBD_LL_Init+0x94>)
 80097f8:	2208      	movs	r2, #8
 80097fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80097fc:	4b1b      	ldr	r3, [pc, #108]	; (800986c <USBD_LL_Init+0x94>)
 80097fe:	2202      	movs	r2, #2
 8009800:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009802:	4b1a      	ldr	r3, [pc, #104]	; (800986c <USBD_LL_Init+0x94>)
 8009804:	2202      	movs	r2, #2
 8009806:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009808:	4b18      	ldr	r3, [pc, #96]	; (800986c <USBD_LL_Init+0x94>)
 800980a:	2200      	movs	r2, #0
 800980c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800980e:	4b17      	ldr	r3, [pc, #92]	; (800986c <USBD_LL_Init+0x94>)
 8009810:	2200      	movs	r2, #0
 8009812:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009814:	4b15      	ldr	r3, [pc, #84]	; (800986c <USBD_LL_Init+0x94>)
 8009816:	2200      	movs	r2, #0
 8009818:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800981a:	4b14      	ldr	r3, [pc, #80]	; (800986c <USBD_LL_Init+0x94>)
 800981c:	2200      	movs	r2, #0
 800981e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009820:	4812      	ldr	r0, [pc, #72]	; (800986c <USBD_LL_Init+0x94>)
 8009822:	f7f7 ff25 	bl	8001670 <HAL_PCD_Init>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d001      	beq.n	8009830 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800982c:	f7f6 ffb0 	bl	8000790 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009836:	2318      	movs	r3, #24
 8009838:	2200      	movs	r2, #0
 800983a:	2100      	movs	r1, #0
 800983c:	f7f9 fbc6 	bl	8002fcc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009846:	2358      	movs	r3, #88	; 0x58
 8009848:	2200      	movs	r2, #0
 800984a:	2180      	movs	r1, #128	; 0x80
 800984c:	f7f9 fbbe 	bl	8002fcc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800985a:	2200      	movs	r2, #0
 800985c:	2181      	movs	r1, #129	; 0x81
 800985e:	f7f9 fbb5 	bl	8002fcc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	2000074c 	.word	0x2000074c
 8009870:	40005c00 	.word	0x40005c00

08009874 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800988a:	4618      	mov	r0, r3
 800988c:	f7f7 ffd5 	bl	800183a <HAL_PCD_Start>
 8009890:	4603      	mov	r3, r0
 8009892:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	4618      	mov	r0, r3
 8009898:	f000 f96c 	bl	8009b74 <USBD_Get_USB_Status>
 800989c:	4603      	mov	r3, r0
 800989e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b084      	sub	sp, #16
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	4608      	mov	r0, r1
 80098b4:	4611      	mov	r1, r2
 80098b6:	461a      	mov	r2, r3
 80098b8:	4603      	mov	r3, r0
 80098ba:	70fb      	strb	r3, [r7, #3]
 80098bc:	460b      	mov	r3, r1
 80098be:	70bb      	strb	r3, [r7, #2]
 80098c0:	4613      	mov	r3, r2
 80098c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80098d2:	78bb      	ldrb	r3, [r7, #2]
 80098d4:	883a      	ldrh	r2, [r7, #0]
 80098d6:	78f9      	ldrb	r1, [r7, #3]
 80098d8:	f7f8 f91d 	bl	8001b16 <HAL_PCD_EP_Open>
 80098dc:	4603      	mov	r3, r0
 80098de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 f946 	bl	8009b74 <USBD_Get_USB_Status>
 80098e8:	4603      	mov	r3, r0
 80098ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b084      	sub	sp, #16
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	460b      	mov	r3, r1
 8009900:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009902:	2300      	movs	r3, #0
 8009904:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009910:	78fa      	ldrb	r2, [r7, #3]
 8009912:	4611      	mov	r1, r2
 8009914:	4618      	mov	r0, r3
 8009916:	f7f8 f964 	bl	8001be2 <HAL_PCD_EP_Close>
 800991a:	4603      	mov	r3, r0
 800991c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800991e:	7bfb      	ldrb	r3, [r7, #15]
 8009920:	4618      	mov	r0, r3
 8009922:	f000 f927 	bl	8009b74 <USBD_Get_USB_Status>
 8009926:	4603      	mov	r3, r0
 8009928:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800992a:	7bbb      	ldrb	r3, [r7, #14]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	460b      	mov	r3, r1
 800993e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009944:	2300      	movs	r3, #0
 8009946:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800994e:	78fa      	ldrb	r2, [r7, #3]
 8009950:	4611      	mov	r1, r2
 8009952:	4618      	mov	r0, r3
 8009954:	f7f8 fa0d 	bl	8001d72 <HAL_PCD_EP_SetStall>
 8009958:	4603      	mov	r3, r0
 800995a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800995c:	7bfb      	ldrb	r3, [r7, #15]
 800995e:	4618      	mov	r0, r3
 8009960:	f000 f908 	bl	8009b74 <USBD_Get_USB_Status>
 8009964:	4603      	mov	r3, r0
 8009966:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009968:	7bbb      	ldrb	r3, [r7, #14]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b084      	sub	sp, #16
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	460b      	mov	r3, r1
 800997c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800998c:	78fa      	ldrb	r2, [r7, #3]
 800998e:	4611      	mov	r1, r2
 8009990:	4618      	mov	r0, r3
 8009992:	f7f8 fa40 	bl	8001e16 <HAL_PCD_EP_ClrStall>
 8009996:	4603      	mov	r3, r0
 8009998:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800999a:	7bfb      	ldrb	r3, [r7, #15]
 800999c:	4618      	mov	r0, r3
 800999e:	f000 f8e9 	bl	8009b74 <USBD_Get_USB_Status>
 80099a2:	4603      	mov	r3, r0
 80099a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	460b      	mov	r3, r1
 80099ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80099c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	da0c      	bge.n	80099e6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80099cc:	78fb      	ldrb	r3, [r7, #3]
 80099ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099d2:	68f9      	ldr	r1, [r7, #12]
 80099d4:	1c5a      	adds	r2, r3, #1
 80099d6:	4613      	mov	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4413      	add	r3, r2
 80099dc:	00db      	lsls	r3, r3, #3
 80099de:	440b      	add	r3, r1
 80099e0:	3302      	adds	r3, #2
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	e00b      	b.n	80099fe <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80099e6:	78fb      	ldrb	r3, [r7, #3]
 80099e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099ec:	68f9      	ldr	r1, [r7, #12]
 80099ee:	4613      	mov	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4413      	add	r3, r2
 80099f4:	00db      	lsls	r3, r3, #3
 80099f6:	440b      	add	r3, r1
 80099f8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80099fc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3714      	adds	r7, #20
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b084      	sub	sp, #16
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
 8009a12:	460b      	mov	r3, r1
 8009a14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a24:	78fa      	ldrb	r2, [r7, #3]
 8009a26:	4611      	mov	r1, r2
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7f8 f84f 	bl	8001acc <HAL_PCD_SetAddress>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
 8009a34:	4618      	mov	r0, r3
 8009a36:	f000 f89d 	bl	8009b74 <USBD_Get_USB_Status>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3710      	adds	r7, #16
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	607a      	str	r2, [r7, #4]
 8009a52:	603b      	str	r3, [r7, #0]
 8009a54:	460b      	mov	r3, r1
 8009a56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a66:	7af9      	ldrb	r1, [r7, #11]
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	f7f8 f93e 	bl	8001cec <HAL_PCD_EP_Transmit>
 8009a70:	4603      	mov	r3, r0
 8009a72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a74:	7dfb      	ldrb	r3, [r7, #23]
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 f87c 	bl	8009b74 <USBD_Get_USB_Status>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a80:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3718      	adds	r7, #24
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b086      	sub	sp, #24
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	60f8      	str	r0, [r7, #12]
 8009a92:	607a      	str	r2, [r7, #4]
 8009a94:	603b      	str	r3, [r7, #0]
 8009a96:	460b      	mov	r3, r1
 8009a98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009aa8:	7af9      	ldrb	r1, [r7, #11]
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	f7f8 f8e0 	bl	8001c72 <HAL_PCD_EP_Receive>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ab6:	7dfb      	ldrb	r3, [r7, #23]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f000 f85b 	bl	8009b74 <USBD_Get_USB_Status>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ac2:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3718      	adds	r7, #24
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009ad8:	78fb      	ldrb	r3, [r7, #3]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d002      	beq.n	8009ae4 <HAL_PCDEx_LPM_Callback+0x18>
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d013      	beq.n	8009b0a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009ae2:	e023      	b.n	8009b2c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d007      	beq.n	8009afc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009aec:	f000 f83c 	bl	8009b68 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009af0:	4b10      	ldr	r3, [pc, #64]	; (8009b34 <HAL_PCDEx_LPM_Callback+0x68>)
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	4a0f      	ldr	r2, [pc, #60]	; (8009b34 <HAL_PCDEx_LPM_Callback+0x68>)
 8009af6:	f023 0306 	bic.w	r3, r3, #6
 8009afa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7fe fdae 	bl	8008664 <USBD_LL_Resume>
    break;
 8009b08:	e010      	b.n	8009b2c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7fe fd91 	bl	8008638 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	699b      	ldr	r3, [r3, #24]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d005      	beq.n	8009b2a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b1e:	4b05      	ldr	r3, [pc, #20]	; (8009b34 <HAL_PCDEx_LPM_Callback+0x68>)
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	4a04      	ldr	r2, [pc, #16]	; (8009b34 <HAL_PCDEx_LPM_Callback+0x68>)
 8009b24:	f043 0306 	orr.w	r3, r3, #6
 8009b28:	6113      	str	r3, [r2, #16]
    break;
 8009b2a:	bf00      	nop
}
 8009b2c:	bf00      	nop
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	e000ed00 	.word	0xe000ed00

08009b38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009b40:	4b03      	ldr	r3, [pc, #12]	; (8009b50 <USBD_static_malloc+0x18>)
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	370c      	adds	r7, #12
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	20000a40 	.word	0x20000a40

08009b54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]

}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009b6c:	f7f6 fd2a 	bl	80005c4 <SystemClock_Config>
}
 8009b70:	bf00      	nop
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b82:	79fb      	ldrb	r3, [r7, #7]
 8009b84:	2b03      	cmp	r3, #3
 8009b86:	d817      	bhi.n	8009bb8 <USBD_Get_USB_Status+0x44>
 8009b88:	a201      	add	r2, pc, #4	; (adr r2, 8009b90 <USBD_Get_USB_Status+0x1c>)
 8009b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8e:	bf00      	nop
 8009b90:	08009ba1 	.word	0x08009ba1
 8009b94:	08009ba7 	.word	0x08009ba7
 8009b98:	08009bad 	.word	0x08009bad
 8009b9c:	08009bb3 	.word	0x08009bb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ba4:	e00b      	b.n	8009bbe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	73fb      	strb	r3, [r7, #15]
    break;
 8009baa:	e008      	b.n	8009bbe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009bac:	2301      	movs	r3, #1
 8009bae:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb0:	e005      	b.n	8009bbe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb6:	e002      	b.n	8009bbe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	73fb      	strb	r3, [r7, #15]
    break;
 8009bbc:	bf00      	nop
  }
  return usb_status;
 8009bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3714      	adds	r7, #20
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <__libc_init_array>:
 8009bcc:	b570      	push	{r4, r5, r6, lr}
 8009bce:	4d0d      	ldr	r5, [pc, #52]	; (8009c04 <__libc_init_array+0x38>)
 8009bd0:	4c0d      	ldr	r4, [pc, #52]	; (8009c08 <__libc_init_array+0x3c>)
 8009bd2:	1b64      	subs	r4, r4, r5
 8009bd4:	10a4      	asrs	r4, r4, #2
 8009bd6:	2600      	movs	r6, #0
 8009bd8:	42a6      	cmp	r6, r4
 8009bda:	d109      	bne.n	8009bf0 <__libc_init_array+0x24>
 8009bdc:	4d0b      	ldr	r5, [pc, #44]	; (8009c0c <__libc_init_array+0x40>)
 8009bde:	4c0c      	ldr	r4, [pc, #48]	; (8009c10 <__libc_init_array+0x44>)
 8009be0:	f000 f820 	bl	8009c24 <_init>
 8009be4:	1b64      	subs	r4, r4, r5
 8009be6:	10a4      	asrs	r4, r4, #2
 8009be8:	2600      	movs	r6, #0
 8009bea:	42a6      	cmp	r6, r4
 8009bec:	d105      	bne.n	8009bfa <__libc_init_array+0x2e>
 8009bee:	bd70      	pop	{r4, r5, r6, pc}
 8009bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bf4:	4798      	blx	r3
 8009bf6:	3601      	adds	r6, #1
 8009bf8:	e7ee      	b.n	8009bd8 <__libc_init_array+0xc>
 8009bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bfe:	4798      	blx	r3
 8009c00:	3601      	adds	r6, #1
 8009c02:	e7f2      	b.n	8009bea <__libc_init_array+0x1e>
 8009c04:	08009cc4 	.word	0x08009cc4
 8009c08:	08009cc4 	.word	0x08009cc4
 8009c0c:	08009cc4 	.word	0x08009cc4
 8009c10:	08009cc8 	.word	0x08009cc8

08009c14 <memset>:
 8009c14:	4402      	add	r2, r0
 8009c16:	4603      	mov	r3, r0
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d100      	bne.n	8009c1e <memset+0xa>
 8009c1c:	4770      	bx	lr
 8009c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8009c22:	e7f9      	b.n	8009c18 <memset+0x4>

08009c24 <_init>:
 8009c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c26:	bf00      	nop
 8009c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c2a:	bc08      	pop	{r3}
 8009c2c:	469e      	mov	lr, r3
 8009c2e:	4770      	bx	lr

08009c30 <_fini>:
 8009c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c32:	bf00      	nop
 8009c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c36:	bc08      	pop	{r3}
 8009c38:	469e      	mov	lr, r3
 8009c3a:	4770      	bx	lr
