
Joystick_hid_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007274  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080073fc  080073fc  000173fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800743c  0800743c  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  0800743c  0800743c  0001743c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007444  08007444  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007444  08007444  00017444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007448  08007448  00017448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  0800744c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002011c  2**0
                  CONTENTS
 10 .bss          00000ab8  2000011c  2000011c  0002011c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bd4  20000bd4  0002011c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e699  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000292b  00000000  00000000  0002e7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  00031110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a98  00000000  00000000  00031ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002405f  00000000  00000000  00032778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f6ee  00000000  00000000  000567d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0c8c  00000000  00000000  00065ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00136b51  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f50  00000000  00000000  00136ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000011c 	.word	0x2000011c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080073e4 	.word	0x080073e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000120 	.word	0x20000120
 80001c4:	080073e4 	.word	0x080073e4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fb96 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f834 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f940 	bl	800075c <MX_GPIO_Init>
  MX_ADC1_Init();
 80004dc:	f000 f89a 	bl	8000614 <MX_ADC1_Init>
  MX_ADC2_Init();
 80004e0:	f000 f8ea 	bl	80006b8 <MX_ADC2_Init>
  MX_USB_DEVICE_Init();
 80004e4:	f006 fb0c 	bl	8006b00 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 80004e8:	4811      	ldr	r0, [pc, #68]	; (8000530 <main+0x64>)
 80004ea:	f000 fc63 	bl	8000db4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80004ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004f2:	480f      	ldr	r0, [pc, #60]	; (8000530 <main+0x64>)
 80004f4:	f000 fd63 	bl	8000fbe <HAL_ADC_PollForConversion>
	  x = HAL_ADC_GetValue(&hadc1);
 80004f8:	480d      	ldr	r0, [pc, #52]	; (8000530 <main+0x64>)
 80004fa:	f000 fdeb 	bl	80010d4 <HAL_ADC_GetValue>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0c      	ldr	r2, [pc, #48]	; (8000534 <main+0x68>)
 8000502:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8000504:	480a      	ldr	r0, [pc, #40]	; (8000530 <main+0x64>)
 8000506:	f000 fd27 	bl	8000f58 <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc2);
 800050a:	480b      	ldr	r0, [pc, #44]	; (8000538 <main+0x6c>)
 800050c:	f000 fc52 	bl	8000db4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 1000);
 8000510:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000514:	4808      	ldr	r0, [pc, #32]	; (8000538 <main+0x6c>)
 8000516:	f000 fd52 	bl	8000fbe <HAL_ADC_PollForConversion>
	  y = HAL_ADC_GetValue(&hadc2);
 800051a:	4807      	ldr	r0, [pc, #28]	; (8000538 <main+0x6c>)
 800051c:	f000 fdda 	bl	80010d4 <HAL_ADC_GetValue>
 8000520:	4603      	mov	r3, r0
 8000522:	4a06      	ldr	r2, [pc, #24]	; (800053c <main+0x70>)
 8000524:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc2);
 8000526:	4804      	ldr	r0, [pc, #16]	; (8000538 <main+0x6c>)
 8000528:	f000 fd16 	bl	8000f58 <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc1);
 800052c:	e7dc      	b.n	80004e8 <main+0x1c>
 800052e:	bf00      	nop
 8000530:	20000138 	.word	0x20000138
 8000534:	200001c8 	.word	0x200001c8
 8000538:	20000180 	.word	0x20000180
 800053c:	200001cc 	.word	0x200001cc

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f006 ff40 	bl	80073d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b28      	ldr	r3, [pc, #160]	; (800060c <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a27      	ldr	r2, [pc, #156]	; (800060c <SystemClock_Config+0xcc>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b25      	ldr	r3, [pc, #148]	; (800060c <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b22      	ldr	r3, [pc, #136]	; (8000610 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a21      	ldr	r2, [pc, #132]	; (8000610 <SystemClock_Config+0xd0>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b0:	2308      	movs	r3, #8
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005be:	2307      	movs	r3, #7
 80005c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 fcdc 	bl	8002f84 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005d2:	f000 fa03 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2105      	movs	r1, #5
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 ff3d 	bl	8003474 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000600:	f000 f9ec 	bl	80009dc <Error_Handler>
  }
}
 8000604:	bf00      	nop
 8000606:	3750      	adds	r7, #80	; 0x50
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061a:	463b      	mov	r3, r7
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000626:	4b21      	ldr	r3, [pc, #132]	; (80006ac <MX_ADC1_Init+0x98>)
 8000628:	4a21      	ldr	r2, [pc, #132]	; (80006b0 <MX_ADC1_Init+0x9c>)
 800062a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <MX_ADC1_Init+0x98>)
 800062e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000632:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000634:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <MX_ADC1_Init+0x98>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800063a:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <MX_ADC1_Init+0x98>)
 800063c:	2201      	movs	r2, #1
 800063e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_ADC1_Init+0x98>)
 8000642:	2201      	movs	r2, #1
 8000644:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000646:	4b19      	ldr	r3, [pc, #100]	; (80006ac <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_ADC1_Init+0x98>)
 8000656:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <MX_ADC1_Init+0xa0>)
 8000658:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_ADC1_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_ADC1_Init+0x98>)
 8000662:	2201      	movs	r2, #1
 8000664:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_ADC1_Init+0x98>)
 8000668:	2200      	movs	r2, #0
 800066a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_ADC1_Init+0x98>)
 8000670:	2201      	movs	r2, #1
 8000672:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <MX_ADC1_Init+0x98>)
 8000676:	f000 fb59 	bl	8000d2c <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000680:	f000 f9ac 	bl	80009dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000684:	2301      	movs	r3, #1
 8000686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000688:	2301      	movs	r3, #1
 800068a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	4619      	mov	r1, r3
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_ADC1_Init+0x98>)
 8000696:	f000 fd2b 	bl	80010f0 <HAL_ADC_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006a0:	f000 f99c 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000138 	.word	0x20000138
 80006b0:	40012000 	.word	0x40012000
 80006b4:	0f000001 	.word	0x0f000001

080006b8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006be:	463b      	mov	r3, r7
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80006ca:	4b21      	ldr	r3, [pc, #132]	; (8000750 <MX_ADC2_Init+0x98>)
 80006cc:	4a21      	ldr	r2, [pc, #132]	; (8000754 <MX_ADC2_Init+0x9c>)
 80006ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <MX_ADC2_Init+0x98>)
 80006d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006d6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <MX_ADC2_Init+0x98>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <MX_ADC2_Init+0x98>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80006e4:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_ADC2_Init+0x98>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <MX_ADC2_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_ADC2_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <MX_ADC2_Init+0x98>)
 80006fa:	4a17      	ldr	r2, [pc, #92]	; (8000758 <MX_ADC2_Init+0xa0>)
 80006fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_ADC2_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_ADC2_Init+0x98>)
 8000706:	2201      	movs	r2, #1
 8000708:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_ADC2_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_ADC2_Init+0x98>)
 8000714:	2201      	movs	r2, #1
 8000716:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <MX_ADC2_Init+0x98>)
 800071a:	f000 fb07 	bl	8000d2c <HAL_ADC_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000724:	f000 f95a 	bl	80009dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000728:	2302      	movs	r3, #2
 800072a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800072c:	2301      	movs	r3, #1
 800072e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000734:	463b      	mov	r3, r7
 8000736:	4619      	mov	r1, r3
 8000738:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_ADC2_Init+0x98>)
 800073a:	f000 fcd9 	bl	80010f0 <HAL_ADC_ConfigChannel>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000744:	f000 f94a 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000180 	.word	0x20000180
 8000754:	40012100 	.word	0x40012100
 8000758:	0f000001 	.word	0x0f000001

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
 8000776:	4b93      	ldr	r3, [pc, #588]	; (80009c4 <MX_GPIO_Init+0x268>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a92      	ldr	r2, [pc, #584]	; (80009c4 <MX_GPIO_Init+0x268>)
 800077c:	f043 0310 	orr.w	r3, r3, #16
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b90      	ldr	r3, [pc, #576]	; (80009c4 <MX_GPIO_Init+0x268>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0310 	and.w	r3, r3, #16
 800078a:	61bb      	str	r3, [r7, #24]
 800078c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	4b8c      	ldr	r3, [pc, #560]	; (80009c4 <MX_GPIO_Init+0x268>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a8b      	ldr	r2, [pc, #556]	; (80009c4 <MX_GPIO_Init+0x268>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b89      	ldr	r3, [pc, #548]	; (80009c4 <MX_GPIO_Init+0x268>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	4b85      	ldr	r3, [pc, #532]	; (80009c4 <MX_GPIO_Init+0x268>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a84      	ldr	r2, [pc, #528]	; (80009c4 <MX_GPIO_Init+0x268>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b82      	ldr	r3, [pc, #520]	; (80009c4 <MX_GPIO_Init+0x268>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	4b7e      	ldr	r3, [pc, #504]	; (80009c4 <MX_GPIO_Init+0x268>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a7d      	ldr	r2, [pc, #500]	; (80009c4 <MX_GPIO_Init+0x268>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b7b      	ldr	r3, [pc, #492]	; (80009c4 <MX_GPIO_Init+0x268>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	4b77      	ldr	r3, [pc, #476]	; (80009c4 <MX_GPIO_Init+0x268>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a76      	ldr	r2, [pc, #472]	; (80009c4 <MX_GPIO_Init+0x268>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b74      	ldr	r3, [pc, #464]	; (80009c4 <MX_GPIO_Init+0x268>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b70      	ldr	r3, [pc, #448]	; (80009c4 <MX_GPIO_Init+0x268>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a6f      	ldr	r2, [pc, #444]	; (80009c4 <MX_GPIO_Init+0x268>)
 8000808:	f043 0308 	orr.w	r3, r3, #8
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b6d      	ldr	r3, [pc, #436]	; (80009c4 <MX_GPIO_Init+0x268>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2108      	movs	r1, #8
 800081e:	486a      	ldr	r0, [pc, #424]	; (80009c8 <MX_GPIO_Init+0x26c>)
 8000820:	f001 f932 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	2101      	movs	r1, #1
 8000828:	4868      	ldr	r0, [pc, #416]	; (80009cc <MX_GPIO_Init+0x270>)
 800082a:	f001 f92d 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800082e:	2200      	movs	r2, #0
 8000830:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000834:	4866      	ldr	r0, [pc, #408]	; (80009d0 <MX_GPIO_Init+0x274>)
 8000836:	f001 f927 	bl	8001a88 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800083a:	2308      	movs	r3, #8
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	485d      	ldr	r0, [pc, #372]	; (80009c8 <MX_GPIO_Init+0x26c>)
 8000852:	f000 ff7d 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000856:	2301      	movs	r3, #1
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4857      	ldr	r0, [pc, #348]	; (80009cc <MX_GPIO_Init+0x270>)
 800086e:	f000 ff6f 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000872:	2308      	movs	r3, #8
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000882:	2305      	movs	r3, #5
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	484f      	ldr	r0, [pc, #316]	; (80009cc <MX_GPIO_Init+0x270>)
 800088e:	f000 ff5f 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000892:	2301      	movs	r3, #1
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000896:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	484b      	ldr	r0, [pc, #300]	; (80009d4 <MX_GPIO_Init+0x278>)
 80008a8:	f000 ff52 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008ac:	2310      	movs	r3, #16
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008bc:	2306      	movs	r3, #6
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4843      	ldr	r0, [pc, #268]	; (80009d4 <MX_GPIO_Init+0x278>)
 80008c8:	f000 ff42 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008cc:	23e0      	movs	r3, #224	; 0xe0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008dc:	2305      	movs	r3, #5
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	483b      	ldr	r0, [pc, #236]	; (80009d4 <MX_GPIO_Init+0x278>)
 80008e8:	f000 ff32 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008ec:	2304      	movs	r3, #4
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4836      	ldr	r0, [pc, #216]	; (80009d8 <MX_GPIO_Init+0x27c>)
 8000900:	f000 ff26 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000916:	2305      	movs	r3, #5
 8000918:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	482d      	ldr	r0, [pc, #180]	; (80009d8 <MX_GPIO_Init+0x27c>)
 8000922:	f000 ff15 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000926:	f24f 0310 	movw	r3, #61456	; 0xf010
 800092a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4824      	ldr	r0, [pc, #144]	; (80009d0 <MX_GPIO_Init+0x274>)
 8000940:	f000 ff06 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000944:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000956:	2306      	movs	r3, #6
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	481a      	ldr	r0, [pc, #104]	; (80009cc <MX_GPIO_Init+0x270>)
 8000962:	f000 fef5 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000966:	2320      	movs	r3, #32
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4815      	ldr	r0, [pc, #84]	; (80009d0 <MX_GPIO_Init+0x274>)
 800097a:	f000 fee9 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800097e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000984:	2312      	movs	r3, #18
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000988:	2301      	movs	r3, #1
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000990:	2304      	movs	r3, #4
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	480f      	ldr	r0, [pc, #60]	; (80009d8 <MX_GPIO_Init+0x27c>)
 800099c:	f000 fed8 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009a0:	2302      	movs	r3, #2
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_GPIO_Init+0x26c>)
 80009b6:	f000 fecb 	bl	8001750 <HAL_GPIO_Init>

}
 80009ba:	bf00      	nop
 80009bc:	3730      	adds	r7, #48	; 0x30
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40020800 	.word	0x40020800
 80009d0:	40020c00 	.word	0x40020c00
 80009d4:	40020000 	.word	0x40020000
 80009d8:	40020400 	.word	0x40020400

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a26:	2007      	movs	r0, #7
 8000a28:	f000 fe50 	bl	80016cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	; 0x30
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a2e      	ldr	r2, [pc, #184]	; (8000b10 <HAL_ADC_MspInit+0xd8>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d128      	bne.n	8000aac <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
 8000a5e:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <HAL_ADC_MspInit+0xdc>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a2c      	ldr	r2, [pc, #176]	; (8000b14 <HAL_ADC_MspInit+0xdc>)
 8000a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <HAL_ADC_MspInit+0xdc>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a72:	61bb      	str	r3, [r7, #24]
 8000a74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <HAL_ADC_MspInit+0xdc>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a25      	ldr	r2, [pc, #148]	; (8000b14 <HAL_ADC_MspInit+0xdc>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <HAL_ADC_MspInit+0xdc>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a96:	2303      	movs	r3, #3
 8000a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	481c      	ldr	r0, [pc, #112]	; (8000b18 <HAL_ADC_MspInit+0xe0>)
 8000aa6:	f000 fe53 	bl	8001750 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000aaa:	e02c      	b.n	8000b06 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a1a      	ldr	r2, [pc, #104]	; (8000b1c <HAL_ADC_MspInit+0xe4>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d127      	bne.n	8000b06 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <HAL_ADC_MspInit+0xdc>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a15      	ldr	r2, [pc, #84]	; (8000b14 <HAL_ADC_MspInit+0xdc>)
 8000ac0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <HAL_ADC_MspInit+0xdc>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_ADC_MspInit+0xdc>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <HAL_ADC_MspInit+0xdc>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_ADC_MspInit+0xdc>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aee:	2304      	movs	r3, #4
 8000af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af2:	2303      	movs	r3, #3
 8000af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <HAL_ADC_MspInit+0xe0>)
 8000b02:	f000 fe25 	bl	8001750 <HAL_GPIO_Init>
}
 8000b06:	bf00      	nop
 8000b08:	3730      	adds	r7, #48	; 0x30
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40012000 	.word	0x40012000
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	40012100 	.word	0x40012100

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6c:	f000 f89a 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <OTG_FS_IRQHandler+0x10>)
 8000b7a:	f001 f8ee 	bl	8001d5a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200006b4 	.word	0x200006b4

08000b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb0:	480d      	ldr	r0, [pc, #52]	; (8000be8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bb2:	490e      	ldr	r1, [pc, #56]	; (8000bec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bb4:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bc8:	4c0b      	ldr	r4, [pc, #44]	; (8000bf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bd6:	f7ff ffd7 	bl	8000b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bda:	f006 fbd7 	bl	800738c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fc75 	bl	80004cc <main>
  bx  lr    
 8000be2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000be4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8000bf0:	0800744c 	.word	0x0800744c
  ldr r2, =_sbss
 8000bf4:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8000bf8:	20000bd4 	.word	0x20000bd4

08000bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <HAL_Init+0x40>)
 8000c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_Init+0x40>)
 8000c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_Init+0x40>)
 8000c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 fd4f 	bl	80016cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 f808 	bl	8000c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff fed8 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023c00 	.word	0x40023c00

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_InitTick+0x54>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x58>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 fd67 	bl	8001736 <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00e      	b.n	8000c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d80a      	bhi.n	8000c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f000 fd2f 	bl	80016e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <HAL_InitTick+0x5c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000004 	.word	0x20000004

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	200001d0 	.word	0x200001d0

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	200001d0 	.word	0x200001d0

08000ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff ffee 	bl	8000ccc <HAL_GetTick>
 8000cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfc:	d005      	beq.n	8000d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_Delay+0x44>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d0a:	bf00      	nop
 8000d0c:	f7ff ffde 	bl	8000ccc <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8f7      	bhi.n	8000d0c <HAL_Delay+0x28>
  {
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008

08000d2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d34:	2300      	movs	r3, #0
 8000d36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e033      	b.n	8000daa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d109      	bne.n	8000d5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff fe74 	bl	8000a38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d118      	bne.n	8000d9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d72:	f023 0302 	bic.w	r3, r3, #2
 8000d76:	f043 0202 	orr.w	r2, r3, #2
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 fad8 	bl	8001334 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f023 0303 	bic.w	r3, r3, #3
 8000d92:	f043 0201 	orr.w	r2, r3, #1
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	641a      	str	r2, [r3, #64]	; 0x40
 8000d9a:	e001      	b.n	8000da0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d101      	bne.n	8000dce <HAL_ADC_Start+0x1a>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e0b2      	b.n	8000f34 <HAL_ADC_Start+0x180>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d018      	beq.n	8000e16 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f042 0201 	orr.w	r2, r2, #1
 8000df2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000df4:	4b52      	ldr	r3, [pc, #328]	; (8000f40 <HAL_ADC_Start+0x18c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a52      	ldr	r2, [pc, #328]	; (8000f44 <HAL_ADC_Start+0x190>)
 8000dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfe:	0c9a      	lsrs	r2, r3, #18
 8000e00:	4613      	mov	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	4413      	add	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e08:	e002      	b.n	8000e10 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f9      	bne.n	8000e0a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d17a      	bne.n	8000f1a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e2c:	f023 0301 	bic.w	r3, r3, #1
 8000e30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d007      	beq.n	8000e56 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e62:	d106      	bne.n	8000e72 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e68:	f023 0206 	bic.w	r2, r3, #6
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	645a      	str	r2, [r3, #68]	; 0x44
 8000e70:	e002      	b.n	8000e78 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e80:	4b31      	ldr	r3, [pc, #196]	; (8000f48 <HAL_ADC_Start+0x194>)
 8000e82:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000e8c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d12a      	bne.n	8000ef0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a2b      	ldr	r2, [pc, #172]	; (8000f4c <HAL_ADC_Start+0x198>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d015      	beq.n	8000ed0 <HAL_ADC_Start+0x11c>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a29      	ldr	r2, [pc, #164]	; (8000f50 <HAL_ADC_Start+0x19c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d105      	bne.n	8000eba <HAL_ADC_Start+0x106>
 8000eae:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <HAL_ADC_Start+0x194>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 031f 	and.w	r3, r3, #31
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00a      	beq.n	8000ed0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a25      	ldr	r2, [pc, #148]	; (8000f54 <HAL_ADC_Start+0x1a0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d136      	bne.n	8000f32 <HAL_ADC_Start+0x17e>
 8000ec4:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <HAL_ADC_Start+0x194>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0310 	and.w	r3, r3, #16
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d130      	bne.n	8000f32 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d129      	bne.n	8000f32 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	e020      	b.n	8000f32 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <HAL_ADC_Start+0x198>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d11b      	bne.n	8000f32 <HAL_ADC_Start+0x17e>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d114      	bne.n	8000f32 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	e00b      	b.n	8000f32 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f043 0210 	orr.w	r2, r3, #16
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f043 0201 	orr.w	r2, r3, #1
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	20000000 	.word	0x20000000
 8000f44:	431bde83 	.word	0x431bde83
 8000f48:	40012300 	.word	0x40012300
 8000f4c:	40012000 	.word	0x40012000
 8000f50:	40012100 	.word	0x40012100
 8000f54:	40012200 	.word	0x40012200

08000f58 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d101      	bne.n	8000f6e <HAL_ADC_Stop+0x16>
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	e021      	b.n	8000fb2 <HAL_ADC_Stop+0x5a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2201      	movs	r2, #1
 8000f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 0201 	bic.w	r2, r2, #1
 8000f84:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d109      	bne.n	8000fa8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f9c:	f023 0301 	bic.w	r3, r3, #1
 8000fa0:	f043 0201 	orr.w	r2, r3, #1
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fda:	d113      	bne.n	8001004 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fea:	d10b      	bne.n	8001004 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	f043 0220 	orr.w	r2, r3, #32
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e063      	b.n	80010cc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001004:	f7ff fe62 	bl	8000ccc <HAL_GetTick>
 8001008:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800100a:	e021      	b.n	8001050 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001012:	d01d      	beq.n	8001050 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d007      	beq.n	800102a <HAL_ADC_PollForConversion+0x6c>
 800101a:	f7ff fe57 	bl	8000ccc <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	429a      	cmp	r2, r3
 8001028:	d212      	bcs.n	8001050 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b02      	cmp	r3, #2
 8001036:	d00b      	beq.n	8001050 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f043 0204 	orr.w	r2, r3, #4
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e03d      	b.n	80010cc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b02      	cmp	r3, #2
 800105c:	d1d6      	bne.n	800100c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f06f 0212 	mvn.w	r2, #18
 8001066:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d123      	bne.n	80010ca <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001086:	2b00      	cmp	r3, #0
 8001088:	d11f      	bne.n	80010ca <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001090:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001094:	2b00      	cmp	r3, #0
 8001096:	d006      	beq.n	80010a6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d111      	bne.n	80010ca <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d105      	bne.n	80010ca <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f043 0201 	orr.w	r2, r3, #1
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001104:	2b01      	cmp	r3, #1
 8001106:	d101      	bne.n	800110c <HAL_ADC_ConfigChannel+0x1c>
 8001108:	2302      	movs	r3, #2
 800110a:	e105      	b.n	8001318 <HAL_ADC_ConfigChannel+0x228>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b09      	cmp	r3, #9
 800111a:	d925      	bls.n	8001168 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68d9      	ldr	r1, [r3, #12]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	b29b      	uxth	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	3b1e      	subs	r3, #30
 8001132:	2207      	movs	r2, #7
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43da      	mvns	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	400a      	ands	r2, r1
 8001140:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	68d9      	ldr	r1, [r3, #12]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	b29b      	uxth	r3, r3
 8001152:	4618      	mov	r0, r3
 8001154:	4603      	mov	r3, r0
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4403      	add	r3, r0
 800115a:	3b1e      	subs	r3, #30
 800115c:	409a      	lsls	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	430a      	orrs	r2, r1
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	e022      	b.n	80011ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6919      	ldr	r1, [r3, #16]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	b29b      	uxth	r3, r3
 8001174:	461a      	mov	r2, r3
 8001176:	4613      	mov	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	2207      	movs	r2, #7
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	400a      	ands	r2, r1
 800118a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6919      	ldr	r1, [r3, #16]
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4618      	mov	r0, r3
 800119e:	4603      	mov	r3, r0
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4403      	add	r3, r0
 80011a4:	409a      	lsls	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	430a      	orrs	r2, r1
 80011ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b06      	cmp	r3, #6
 80011b4:	d824      	bhi.n	8001200 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	3b05      	subs	r3, #5
 80011c8:	221f      	movs	r2, #31
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	400a      	ands	r2, r1
 80011d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	3b05      	subs	r3, #5
 80011f2:	fa00 f203 	lsl.w	r2, r0, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
 80011fe:	e04c      	b.n	800129a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b0c      	cmp	r3, #12
 8001206:	d824      	bhi.n	8001252 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	3b23      	subs	r3, #35	; 0x23
 800121a:	221f      	movs	r2, #31
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43da      	mvns	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	400a      	ands	r2, r1
 8001228:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	b29b      	uxth	r3, r3
 8001236:	4618      	mov	r0, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	3b23      	subs	r3, #35	; 0x23
 8001244:	fa00 f203 	lsl.w	r2, r0, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	631a      	str	r2, [r3, #48]	; 0x30
 8001250:	e023      	b.n	800129a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	3b41      	subs	r3, #65	; 0x41
 8001264:	221f      	movs	r2, #31
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	400a      	ands	r2, r1
 8001272:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	b29b      	uxth	r3, r3
 8001280:	4618      	mov	r0, r3
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	3b41      	subs	r3, #65	; 0x41
 800128e:	fa00 f203 	lsl.w	r2, r0, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	430a      	orrs	r2, r1
 8001298:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800129a:	4b22      	ldr	r3, [pc, #136]	; (8001324 <HAL_ADC_ConfigChannel+0x234>)
 800129c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a21      	ldr	r2, [pc, #132]	; (8001328 <HAL_ADC_ConfigChannel+0x238>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d109      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x1cc>
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b12      	cmp	r3, #18
 80012ae:	d105      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a19      	ldr	r2, [pc, #100]	; (8001328 <HAL_ADC_ConfigChannel+0x238>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d123      	bne.n	800130e <HAL_ADC_ConfigChannel+0x21e>
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b10      	cmp	r3, #16
 80012cc:	d003      	beq.n	80012d6 <HAL_ADC_ConfigChannel+0x1e6>
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b11      	cmp	r3, #17
 80012d4:	d11b      	bne.n	800130e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b10      	cmp	r3, #16
 80012e8:	d111      	bne.n	800130e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_ADC_ConfigChannel+0x23c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a10      	ldr	r2, [pc, #64]	; (8001330 <HAL_ADC_ConfigChannel+0x240>)
 80012f0:	fba2 2303 	umull	r2, r3, r2, r3
 80012f4:	0c9a      	lsrs	r2, r3, #18
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001300:	e002      	b.n	8001308 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	3b01      	subs	r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f9      	bne.n	8001302 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	40012300 	.word	0x40012300
 8001328:	40012000 	.word	0x40012000
 800132c:	20000000 	.word	0x20000000
 8001330:	431bde83 	.word	0x431bde83

08001334 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800133c:	4b79      	ldr	r3, [pc, #484]	; (8001524 <ADC_Init+0x1f0>)
 800133e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	431a      	orrs	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001368:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6859      	ldr	r1, [r3, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	021a      	lsls	r2, r3, #8
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800138c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6859      	ldr	r1, [r3, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6899      	ldr	r1, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	430a      	orrs	r2, r1
 80013c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c6:	4a58      	ldr	r2, [pc, #352]	; (8001528 <ADC_Init+0x1f4>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d022      	beq.n	8001412 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6899      	ldr	r1, [r3, #8]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6899      	ldr	r1, [r3, #8]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	e00f      	b.n	8001432 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001420:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001430:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0202 	bic.w	r2, r2, #2
 8001440:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6899      	ldr	r1, [r3, #8]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	7e1b      	ldrb	r3, [r3, #24]
 800144c:	005a      	lsls	r2, r3, #1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3020 	ldrb.w	r3, [r3, #32]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d01b      	beq.n	8001498 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800146e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800147e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6859      	ldr	r1, [r3, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	3b01      	subs	r3, #1
 800148c:	035a      	lsls	r2, r3, #13
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	e007      	b.n	80014a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	051a      	lsls	r2, r3, #20
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6899      	ldr	r1, [r3, #8]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014ea:	025a      	lsls	r2, r3, #9
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	430a      	orrs	r2, r1
 80014f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001502:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6899      	ldr	r1, [r3, #8]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	029a      	lsls	r2, r3, #10
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	430a      	orrs	r2, r1
 8001516:	609a      	str	r2, [r3, #8]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	40012300 	.word	0x40012300
 8001528:	0f000001 	.word	0x0f000001

0800152c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001548:	4013      	ands	r3, r2
 800154a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800155c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155e:	4a04      	ldr	r2, [pc, #16]	; (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	60d3      	str	r3, [r2, #12]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <__NVIC_GetPriorityGrouping+0x18>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	0a1b      	lsrs	r3, r3, #8
 800157e:	f003 0307 	and.w	r3, r3, #7
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	db0b      	blt.n	80015ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	f003 021f 	and.w	r2, r3, #31
 80015a8:	4907      	ldr	r1, [pc, #28]	; (80015c8 <__NVIC_EnableIRQ+0x38>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	095b      	lsrs	r3, r3, #5
 80015b0:	2001      	movs	r0, #1
 80015b2:	fa00 f202 	lsl.w	r2, r0, r2
 80015b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000e100 	.word	0xe000e100

080015cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	db0a      	blt.n	80015f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	490c      	ldr	r1, [pc, #48]	; (8001618 <__NVIC_SetPriority+0x4c>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	0112      	lsls	r2, r2, #4
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	440b      	add	r3, r1
 80015f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f4:	e00a      	b.n	800160c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4908      	ldr	r1, [pc, #32]	; (800161c <__NVIC_SetPriority+0x50>)
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	3b04      	subs	r3, #4
 8001604:	0112      	lsls	r2, r2, #4
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	440b      	add	r3, r1
 800160a:	761a      	strb	r2, [r3, #24]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000e100 	.word	0xe000e100
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001620:	b480      	push	{r7}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f1c3 0307 	rsb	r3, r3, #7
 800163a:	2b04      	cmp	r3, #4
 800163c:	bf28      	it	cs
 800163e:	2304      	movcs	r3, #4
 8001640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3304      	adds	r3, #4
 8001646:	2b06      	cmp	r3, #6
 8001648:	d902      	bls.n	8001650 <NVIC_EncodePriority+0x30>
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3b03      	subs	r3, #3
 800164e:	e000      	b.n	8001652 <NVIC_EncodePriority+0x32>
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	f04f 32ff 	mov.w	r2, #4294967295
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43da      	mvns	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	401a      	ands	r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001668:	f04f 31ff 	mov.w	r1, #4294967295
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	43d9      	mvns	r1, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	4313      	orrs	r3, r2
         );
}
 800167a:	4618      	mov	r0, r3
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001698:	d301      	bcc.n	800169e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169a:	2301      	movs	r3, #1
 800169c:	e00f      	b.n	80016be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <SysTick_Config+0x40>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a6:	210f      	movs	r1, #15
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f7ff ff8e 	bl	80015cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <SysTick_Config+0x40>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <SysTick_Config+0x40>)
 80016b8:	2207      	movs	r2, #7
 80016ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010

080016cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ff29 	bl	800152c <__NVIC_SetPriorityGrouping>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
 80016ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f4:	f7ff ff3e 	bl	8001574 <__NVIC_GetPriorityGrouping>
 80016f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	6978      	ldr	r0, [r7, #20]
 8001700:	f7ff ff8e 	bl	8001620 <NVIC_EncodePriority>
 8001704:	4602      	mov	r2, r0
 8001706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff5d 	bl	80015cc <__NVIC_SetPriority>
}
 8001712:	bf00      	nop
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff31 	bl	8001590 <__NVIC_EnableIRQ>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffa2 	bl	8001688 <SysTick_Config>
 8001744:	4603      	mov	r3, r0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	; 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	e16b      	b.n	8001a44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800176c:	2201      	movs	r2, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	429a      	cmp	r2, r3
 8001786:	f040 815a 	bne.w	8001a3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b01      	cmp	r3, #1
 8001794:	d005      	beq.n	80017a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d130      	bne.n	8001804 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	2203      	movs	r2, #3
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d8:	2201      	movs	r2, #1
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 0201 	and.w	r2, r3, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b03      	cmp	r3, #3
 800180e:	d017      	beq.n	8001840 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d123      	bne.n	8001894 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	08da      	lsrs	r2, r3, #3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3208      	adds	r2, #8
 8001854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	220f      	movs	r2, #15
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	08da      	lsrs	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3208      	adds	r2, #8
 800188e:	69b9      	ldr	r1, [r7, #24]
 8001890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0203 	and.w	r2, r3, #3
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80b4 	beq.w	8001a3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b60      	ldr	r3, [pc, #384]	; (8001a5c <HAL_GPIO_Init+0x30c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	4a5f      	ldr	r2, [pc, #380]	; (8001a5c <HAL_GPIO_Init+0x30c>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e4:	6453      	str	r3, [r2, #68]	; 0x44
 80018e6:	4b5d      	ldr	r3, [pc, #372]	; (8001a5c <HAL_GPIO_Init+0x30c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018f2:	4a5b      	ldr	r2, [pc, #364]	; (8001a60 <HAL_GPIO_Init+0x310>)
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	3302      	adds	r3, #2
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	220f      	movs	r2, #15
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a52      	ldr	r2, [pc, #328]	; (8001a64 <HAL_GPIO_Init+0x314>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d02b      	beq.n	8001976 <HAL_GPIO_Init+0x226>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a51      	ldr	r2, [pc, #324]	; (8001a68 <HAL_GPIO_Init+0x318>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d025      	beq.n	8001972 <HAL_GPIO_Init+0x222>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a50      	ldr	r2, [pc, #320]	; (8001a6c <HAL_GPIO_Init+0x31c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d01f      	beq.n	800196e <HAL_GPIO_Init+0x21e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4f      	ldr	r2, [pc, #316]	; (8001a70 <HAL_GPIO_Init+0x320>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d019      	beq.n	800196a <HAL_GPIO_Init+0x21a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4e      	ldr	r2, [pc, #312]	; (8001a74 <HAL_GPIO_Init+0x324>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d013      	beq.n	8001966 <HAL_GPIO_Init+0x216>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4d      	ldr	r2, [pc, #308]	; (8001a78 <HAL_GPIO_Init+0x328>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d00d      	beq.n	8001962 <HAL_GPIO_Init+0x212>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4c      	ldr	r2, [pc, #304]	; (8001a7c <HAL_GPIO_Init+0x32c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d007      	beq.n	800195e <HAL_GPIO_Init+0x20e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4b      	ldr	r2, [pc, #300]	; (8001a80 <HAL_GPIO_Init+0x330>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d101      	bne.n	800195a <HAL_GPIO_Init+0x20a>
 8001956:	2307      	movs	r3, #7
 8001958:	e00e      	b.n	8001978 <HAL_GPIO_Init+0x228>
 800195a:	2308      	movs	r3, #8
 800195c:	e00c      	b.n	8001978 <HAL_GPIO_Init+0x228>
 800195e:	2306      	movs	r3, #6
 8001960:	e00a      	b.n	8001978 <HAL_GPIO_Init+0x228>
 8001962:	2305      	movs	r3, #5
 8001964:	e008      	b.n	8001978 <HAL_GPIO_Init+0x228>
 8001966:	2304      	movs	r3, #4
 8001968:	e006      	b.n	8001978 <HAL_GPIO_Init+0x228>
 800196a:	2303      	movs	r3, #3
 800196c:	e004      	b.n	8001978 <HAL_GPIO_Init+0x228>
 800196e:	2302      	movs	r3, #2
 8001970:	e002      	b.n	8001978 <HAL_GPIO_Init+0x228>
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <HAL_GPIO_Init+0x228>
 8001976:	2300      	movs	r3, #0
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	f002 0203 	and.w	r2, r2, #3
 800197e:	0092      	lsls	r2, r2, #2
 8001980:	4093      	lsls	r3, r2
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001988:	4935      	ldr	r1, [pc, #212]	; (8001a60 <HAL_GPIO_Init+0x310>)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	3302      	adds	r3, #2
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001996:	4b3b      	ldr	r3, [pc, #236]	; (8001a84 <HAL_GPIO_Init+0x334>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ba:	4a32      	ldr	r2, [pc, #200]	; (8001a84 <HAL_GPIO_Init+0x334>)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c0:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <HAL_GPIO_Init+0x334>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019e4:	4a27      	ldr	r2, [pc, #156]	; (8001a84 <HAL_GPIO_Init+0x334>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ea:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <HAL_GPIO_Init+0x334>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a0e:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <HAL_GPIO_Init+0x334>)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <HAL_GPIO_Init+0x334>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a38:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <HAL_GPIO_Init+0x334>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3301      	adds	r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	2b0f      	cmp	r3, #15
 8001a48:	f67f ae90 	bls.w	800176c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40013800 	.word	0x40013800
 8001a64:	40020000 	.word	0x40020000
 8001a68:	40020400 	.word	0x40020400
 8001a6c:	40020800 	.word	0x40020800
 8001a70:	40020c00 	.word	0x40020c00
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40021400 	.word	0x40021400
 8001a7c:	40021800 	.word	0x40021800
 8001a80:	40021c00 	.word	0x40021c00
 8001a84:	40013c00 	.word	0x40013c00

08001a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
 8001a94:	4613      	mov	r3, r2
 8001a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a98:	787b      	ldrb	r3, [r7, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aa4:	e003      	b.n	8001aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	041a      	lsls	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	619a      	str	r2, [r3, #24]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001aba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001abc:	b08f      	sub	sp, #60	; 0x3c
 8001abe:	af0a      	add	r7, sp, #40	; 0x28
 8001ac0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e10f      	b.n	8001cec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f005 f940 	bl	8006d6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2203      	movs	r2, #3
 8001af0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f001 ffbf 	bl	8003a8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	687e      	ldr	r6, [r7, #4]
 8001b18:	466d      	mov	r5, sp
 8001b1a:	f106 0410 	add.w	r4, r6, #16
 8001b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b2e:	1d33      	adds	r3, r6, #4
 8001b30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b32:	6838      	ldr	r0, [r7, #0]
 8001b34:	f001 fe96 	bl	8003864 <USB_CoreInit>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2202      	movs	r2, #2
 8001b42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e0d0      	b.n	8001cec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f001 ffad 	bl	8003ab0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
 8001b5a:	e04a      	b.n	8001bf2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b5c:	7bfa      	ldrb	r2, [r7, #15]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	333d      	adds	r3, #61	; 0x3d
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	333c      	adds	r3, #60	; 0x3c
 8001b80:	7bfa      	ldrb	r2, [r7, #15]
 8001b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b84:	7bfa      	ldrb	r2, [r7, #15]
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	b298      	uxth	r0, r3
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	3344      	adds	r3, #68	; 0x44
 8001b98:	4602      	mov	r2, r0
 8001b9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	3340      	adds	r3, #64	; 0x40
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4413      	add	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3348      	adds	r3, #72	; 0x48
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	334c      	adds	r3, #76	; 0x4c
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bd8:	7bfa      	ldrb	r2, [r7, #15]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	3354      	adds	r3, #84	; 0x54
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
 8001bf2:	7bfa      	ldrb	r2, [r7, #15]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d3af      	bcc.n	8001b5c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	e044      	b.n	8001c8c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001c2a:	7bfa      	ldrb	r2, [r7, #15]
 8001c2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d3b5      	bcc.n	8001c02 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	687e      	ldr	r6, [r7, #4]
 8001c9e:	466d      	mov	r5, sp
 8001ca0:	f106 0410 	add.w	r4, r6, #16
 8001ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cb4:	1d33      	adds	r3, r6, #4
 8001cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cb8:	6838      	ldr	r0, [r7, #0]
 8001cba:	f001 ff45 	bl	8003b48 <USB_DevInit>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e00d      	b.n	8001cec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f003 f894 	bl	8004e12 <USB_DevDisconnect>

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cf4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_PCD_Start+0x1c>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e020      	b.n	8001d52 <HAL_PCD_Start+0x5e>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d109      	bne.n	8001d34 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d005      	beq.n	8001d34 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f001 fe97 	bl	8003a6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f003 f844 	bl	8004dd0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d5a:	b590      	push	{r4, r7, lr}
 8001d5c:	b08d      	sub	sp, #52	; 0x34
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f003 f902 	bl	8004f7a <USB_GetMode>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 848a 	bne.w	8002692 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f003 f866 	bl	8004e54 <USB_ReadInterrupts>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 8480 	beq.w	8002690 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f003 f853 	bl	8004e54 <USB_ReadInterrupts>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d107      	bne.n	8001dc8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f002 0202 	and.w	r2, r2, #2
 8001dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 f841 	bl	8004e54 <USB_ReadInterrupts>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b10      	cmp	r3, #16
 8001dda:	d161      	bne.n	8001ea0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699a      	ldr	r2, [r3, #24]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0210 	bic.w	r2, r2, #16
 8001dea:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	f003 020f 	and.w	r2, r3, #15
 8001df8:	4613      	mov	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	4413      	add	r3, r2
 8001e08:	3304      	adds	r3, #4
 8001e0a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	0c5b      	lsrs	r3, r3, #17
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d124      	bne.n	8001e62 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d035      	beq.n	8001e90 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	091b      	lsrs	r3, r3, #4
 8001e2c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	6a38      	ldr	r0, [r7, #32]
 8001e38:	f002 fe78 	bl	8004b2c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	091b      	lsrs	r3, r3, #4
 8001e44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e48:	441a      	add	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	6a1a      	ldr	r2, [r3, #32]
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e5a:	441a      	add	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	621a      	str	r2, [r3, #32]
 8001e60:	e016      	b.n	8001e90 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	0c5b      	lsrs	r3, r3, #17
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d110      	bne.n	8001e90 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e74:	2208      	movs	r2, #8
 8001e76:	4619      	mov	r1, r3
 8001e78:	6a38      	ldr	r0, [r7, #32]
 8001e7a:	f002 fe57 	bl	8004b2c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	6a1a      	ldr	r2, [r3, #32]
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e8a:	441a      	add	r2, r3
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699a      	ldr	r2, [r3, #24]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0210 	orr.w	r2, r2, #16
 8001e9e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f002 ffd5 	bl	8004e54 <USB_ReadInterrupts>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eb0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001eb4:	f040 80a7 	bne.w	8002006 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f002 ffda 	bl	8004e7a <USB_ReadDevAllOutEpInterrupt>
 8001ec6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001ec8:	e099      	b.n	8001ffe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 808e 	beq.w	8001ff2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 fffe 	bl	8004ee2 <USB_ReadDevOutEPInterrupt>
 8001ee6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00c      	beq.n	8001f0c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001efe:	461a      	mov	r2, r3
 8001f00:	2301      	movs	r3, #1
 8001f02:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 feaa 	bl	8002c60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00c      	beq.n	8001f30 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	015a      	lsls	r2, r3, #5
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f22:	461a      	mov	r2, r3
 8001f24:	2308      	movs	r3, #8
 8001f26:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 ff80 	bl	8002e30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d008      	beq.n	8001f4c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f46:	461a      	mov	r2, r3
 8001f48:	2310      	movs	r3, #16
 8001f4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d030      	beq.n	8001fb8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5e:	2b80      	cmp	r3, #128	; 0x80
 8001f60:	d109      	bne.n	8001f76 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f74:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	4413      	add	r3, r2
 8001f88:	3304      	adds	r3, #4
 8001f8a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	78db      	ldrb	r3, [r3, #3]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d108      	bne.n	8001fa6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2200      	movs	r2, #0
 8001f98:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f004 fff7 	bl	8006f94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d008      	beq.n	8001fd4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	015a      	lsls	r2, r3, #5
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fce:	461a      	mov	r2, r3
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fea:	461a      	mov	r2, r3
 8001fec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ff0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffa:	085b      	lsrs	r3, r3, #1
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002000:	2b00      	cmp	r3, #0
 8002002:	f47f af62 	bne.w	8001eca <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f002 ff22 	bl	8004e54 <USB_ReadInterrupts>
 8002010:	4603      	mov	r3, r0
 8002012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002016:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800201a:	f040 80db 	bne.w	80021d4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f002 ff43 	bl	8004eae <USB_ReadDevAllInEpInterrupt>
 8002028:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800202e:	e0cd      	b.n	80021cc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 80c2 	beq.w	80021c0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	4611      	mov	r1, r2
 8002046:	4618      	mov	r0, r3
 8002048:	f002 ff69 	bl	8004f1e <USB_ReadDevInEPInterrupt>
 800204c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d057      	beq.n	8002108 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	2201      	movs	r2, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800206c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	43db      	mvns	r3, r3
 8002072:	69f9      	ldr	r1, [r7, #28]
 8002074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002078:	4013      	ands	r3, r2
 800207a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	015a      	lsls	r2, r3, #5
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	4413      	add	r3, r2
 8002084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002088:	461a      	mov	r2, r3
 800208a:	2301      	movs	r3, #1
 800208c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d132      	bne.n	80020fc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	334c      	adds	r3, #76	; 0x4c
 80020a6:	6819      	ldr	r1, [r3, #0]
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4403      	add	r3, r0
 80020b6:	3348      	adds	r3, #72	; 0x48
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4419      	add	r1, r3
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4403      	add	r3, r0
 80020ca:	334c      	adds	r3, #76	; 0x4c
 80020cc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d113      	bne.n	80020fc <HAL_PCD_IRQHandler+0x3a2>
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d8:	4613      	mov	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	3354      	adds	r3, #84	; 0x54
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d108      	bne.n	80020fc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020f4:	461a      	mov	r2, r3
 80020f6:	2101      	movs	r1, #1
 80020f8:	f002 ff70 	bl	8004fdc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	4619      	mov	r1, r3
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f004 fec1 	bl	8006e8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d008      	beq.n	8002124 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	4413      	add	r3, r2
 800211a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800211e:	461a      	mov	r2, r3
 8002120:	2308      	movs	r3, #8
 8002122:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	2b00      	cmp	r3, #0
 800212c:	d008      	beq.n	8002140 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	4413      	add	r3, r2
 8002136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800213a:	461a      	mov	r2, r3
 800213c:	2310      	movs	r3, #16
 800213e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002146:	2b00      	cmp	r3, #0
 8002148:	d008      	beq.n	800215c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	4413      	add	r3, r2
 8002152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002156:	461a      	mov	r2, r3
 8002158:	2340      	movs	r3, #64	; 0x40
 800215a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d023      	beq.n	80021ae <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002166:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002168:	6a38      	ldr	r0, [r7, #32]
 800216a:	f001 fe51 	bl	8003e10 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800216e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	3338      	adds	r3, #56	; 0x38
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	3304      	adds	r3, #4
 8002180:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	78db      	ldrb	r3, [r3, #3]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d108      	bne.n	800219c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2200      	movs	r2, #0
 800218e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	b2db      	uxtb	r3, r3
 8002194:	4619      	mov	r1, r3
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f004 ff0e 	bl	8006fb8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021a8:	461a      	mov	r2, r3
 80021aa:	2302      	movs	r3, #2
 80021ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80021b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fcc3 	bl	8002b46 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	3301      	adds	r3, #1
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c8:	085b      	lsrs	r3, r3, #1
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f47f af2e 	bne.w	8002030 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f002 fe3b 	bl	8004e54 <USB_ReadInterrupts>
 80021de:	4603      	mov	r3, r0
 80021e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021e8:	d122      	bne.n	8002230 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	69fa      	ldr	r2, [r7, #28]
 80021f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002204:	2b01      	cmp	r3, #1
 8002206:	d108      	bne.n	800221a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002210:	2100      	movs	r1, #0
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 feaa 	bl	8002f6c <HAL_PCDEx_LPM_Callback>
 8002218:	e002      	b.n	8002220 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f004 feac 	bl	8006f78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800222e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f002 fe0d 	bl	8004e54 <USB_ReadInterrupts>
 800223a:	4603      	mov	r3, r0
 800223c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002240:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002244:	d112      	bne.n	800226c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b01      	cmp	r3, #1
 8002254:	d102      	bne.n	800225c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f004 fe68 	bl	8006f2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800226a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f002 fdef 	bl	8004e54 <USB_ReadInterrupts>
 8002276:	4603      	mov	r3, r0
 8002278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800227c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002280:	f040 80b7 	bne.w	80023f2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002292:	f023 0301 	bic.w	r3, r3, #1
 8002296:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2110      	movs	r1, #16
 800229e:	4618      	mov	r0, r3
 80022a0:	f001 fdb6 	bl	8003e10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a4:	2300      	movs	r3, #0
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022a8:	e046      	b.n	8002338 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022b6:	461a      	mov	r2, r3
 80022b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022bc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80022be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ce:	0151      	lsls	r1, r2, #5
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	440a      	add	r2, r1
 80022d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80022de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e0:	015a      	lsls	r2, r3, #5
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	4413      	add	r3, r2
 80022e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ea:	461a      	mov	r2, r3
 80022ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022f0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80022f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002302:	0151      	lsls	r1, r2, #5
 8002304:	69fa      	ldr	r2, [r7, #28]
 8002306:	440a      	add	r2, r1
 8002308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800230c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002310:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	4413      	add	r3, r2
 800231a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002322:	0151      	lsls	r1, r2, #5
 8002324:	69fa      	ldr	r2, [r7, #28]
 8002326:	440a      	add	r2, r1
 8002328:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800232c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002330:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002334:	3301      	adds	r3, #1
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800233e:	429a      	cmp	r2, r3
 8002340:	d3b3      	bcc.n	80022aa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	69fa      	ldr	r2, [r7, #28]
 800234c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002350:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002354:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	2b00      	cmp	r3, #0
 800235c:	d016      	beq.n	800238c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002368:	69fa      	ldr	r2, [r7, #28]
 800236a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800236e:	f043 030b 	orr.w	r3, r3, #11
 8002372:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	69fa      	ldr	r2, [r7, #28]
 8002380:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002384:	f043 030b 	orr.w	r3, r3, #11
 8002388:	6453      	str	r3, [r2, #68]	; 0x44
 800238a:	e015      	b.n	80023b8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800239a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800239e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80023a2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023b2:	f043 030b 	orr.w	r3, r3, #11
 80023b6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80023ca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6818      	ldr	r0, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023dc:	461a      	mov	r2, r3
 80023de:	f002 fdfd 	bl	8004fdc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695a      	ldr	r2, [r3, #20]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80023f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f002 fd2c 	bl	8004e54 <USB_ReadInterrupts>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002406:	d124      	bne.n	8002452 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f002 fdc2 	bl	8004f96 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f001 fd77 	bl	8003f0a <USB_GetDevSpeed>
 800241c:	4603      	mov	r3, r0
 800241e:	461a      	mov	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681c      	ldr	r4, [r3, #0]
 8002428:	f001 fa10 	bl	800384c <HAL_RCC_GetHCLKFreq>
 800242c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002432:	b2db      	uxtb	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	4620      	mov	r0, r4
 8002438:	f001 fa76 	bl	8003928 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f004 fd4c 	bl	8006eda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002450:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f002 fcfc 	bl	8004e54 <USB_ReadInterrupts>
 800245c:	4603      	mov	r3, r0
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b08      	cmp	r3, #8
 8002464:	d10a      	bne.n	800247c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f004 fd29 	bl	8006ebe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695a      	ldr	r2, [r3, #20]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f002 0208 	and.w	r2, r2, #8
 800247a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f002 fce7 	bl	8004e54 <USB_ReadInterrupts>
 8002486:	4603      	mov	r3, r0
 8002488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248c:	2b80      	cmp	r3, #128	; 0x80
 800248e:	d122      	bne.n	80024d6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800249c:	2301      	movs	r3, #1
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
 80024a0:	e014      	b.n	80024cc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d105      	bne.n	80024c6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	4619      	mov	r1, r3
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fb0f 	bl	8002ae4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	3301      	adds	r3, #1
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d3e5      	bcc.n	80024a2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f002 fcba 	bl	8004e54 <USB_ReadInterrupts>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024ea:	d13b      	bne.n	8002564 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024ec:	2301      	movs	r3, #1
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
 80024f0:	e02b      	b.n	800254a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002506:	4613      	mov	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	3340      	adds	r3, #64	; 0x40
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d115      	bne.n	8002544 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002518:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800251a:	2b00      	cmp	r3, #0
 800251c:	da12      	bge.n	8002544 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002522:	4613      	mov	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	333f      	adds	r3, #63	; 0x3f
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	b2db      	uxtb	r3, r3
 8002536:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800253a:	b2db      	uxtb	r3, r3
 800253c:	4619      	mov	r1, r3
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fad0 	bl	8002ae4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	3301      	adds	r3, #1
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002550:	429a      	cmp	r2, r3
 8002552:	d3ce      	bcc.n	80024f2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002562:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f002 fc73 	bl	8004e54 <USB_ReadInterrupts>
 800256e:	4603      	mov	r3, r0
 8002570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002574:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002578:	d155      	bne.n	8002626 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800257a:	2301      	movs	r3, #1
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
 800257e:	e045      	b.n	800260c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	4413      	add	r3, r2
 8002588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002594:	4613      	mov	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d12e      	bne.n	8002606 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	da2b      	bge.n	8002606 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80025ba:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025be:	429a      	cmp	r2, r3
 80025c0:	d121      	bne.n	8002606 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80025d4:	2201      	movs	r2, #1
 80025d6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10a      	bne.n	8002606 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	69fa      	ldr	r2, [r7, #28]
 80025fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002602:	6053      	str	r3, [r2, #4]
            break;
 8002604:	e007      	b.n	8002616 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	3301      	adds	r3, #1
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002612:	429a      	cmp	r2, r3
 8002614:	d3b4      	bcc.n	8002580 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002624:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f002 fc12 	bl	8004e54 <USB_ReadInterrupts>
 8002630:	4603      	mov	r3, r0
 8002632:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263a:	d10a      	bne.n	8002652 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f004 fccd 	bl	8006fdc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695a      	ldr	r2, [r3, #20]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002650:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f002 fbfc 	bl	8004e54 <USB_ReadInterrupts>
 800265c:	4603      	mov	r3, r0
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b04      	cmp	r3, #4
 8002664:	d115      	bne.n	8002692 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f004 fcbd 	bl	8006ff8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6859      	ldr	r1, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	430a      	orrs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	e000      	b.n	8002692 <HAL_PCD_IRQHandler+0x938>
      return;
 8002690:	bf00      	nop
    }
  }
}
 8002692:	3734      	adds	r7, #52	; 0x34
 8002694:	46bd      	mov	sp, r7
 8002696:	bd90      	pop	{r4, r7, pc}

08002698 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_PCD_SetAddress+0x1a>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e013      	b.n	80026da <HAL_PCD_SetAddress+0x42>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	4611      	mov	r1, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f002 fb5a 	bl	8004d84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b084      	sub	sp, #16
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	4608      	mov	r0, r1
 80026ec:	4611      	mov	r1, r2
 80026ee:	461a      	mov	r2, r3
 80026f0:	4603      	mov	r3, r0
 80026f2:	70fb      	strb	r3, [r7, #3]
 80026f4:	460b      	mov	r3, r1
 80026f6:	803b      	strh	r3, [r7, #0]
 80026f8:	4613      	mov	r3, r2
 80026fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002700:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002704:	2b00      	cmp	r3, #0
 8002706:	da0f      	bge.n	8002728 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	f003 020f 	and.w	r2, r3, #15
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	3338      	adds	r3, #56	; 0x38
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	4413      	add	r3, r2
 800271c:	3304      	adds	r3, #4
 800271e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	705a      	strb	r2, [r3, #1]
 8002726:	e00f      	b.n	8002748 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	f003 020f 	and.w	r2, r3, #15
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	3304      	adds	r3, #4
 8002740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	b2da      	uxtb	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002754:	883a      	ldrh	r2, [r7, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	78ba      	ldrb	r2, [r7, #2]
 800275e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	785b      	ldrb	r3, [r3, #1]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d004      	beq.n	8002772 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002772:	78bb      	ldrb	r3, [r7, #2]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d102      	bne.n	800277e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_PCD_EP_Open+0xaa>
 8002788:	2302      	movs	r3, #2
 800278a:	e00e      	b.n	80027aa <HAL_PCD_EP_Open+0xc8>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68f9      	ldr	r1, [r7, #12]
 800279a:	4618      	mov	r0, r3
 800279c:	f001 fbda 	bl	8003f54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80027a8:	7afb      	ldrb	r3, [r7, #11]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	460b      	mov	r3, r1
 80027bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	da0f      	bge.n	80027e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	f003 020f 	and.w	r2, r3, #15
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	3338      	adds	r3, #56	; 0x38
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	3304      	adds	r3, #4
 80027dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	705a      	strb	r2, [r3, #1]
 80027e4:	e00f      	b.n	8002806 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	f003 020f 	and.w	r2, r3, #15
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	4413      	add	r3, r2
 80027fc:	3304      	adds	r3, #4
 80027fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	b2da      	uxtb	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_PCD_EP_Close+0x6e>
 800281c:	2302      	movs	r3, #2
 800281e:	e00e      	b.n	800283e <HAL_PCD_EP_Close+0x8c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68f9      	ldr	r1, [r7, #12]
 800282e:	4618      	mov	r0, r3
 8002830:	f001 fc18 	bl	8004064 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b086      	sub	sp, #24
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	607a      	str	r2, [r7, #4]
 8002850:	603b      	str	r3, [r7, #0]
 8002852:	460b      	mov	r3, r1
 8002854:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002856:	7afb      	ldrb	r3, [r7, #11]
 8002858:	f003 020f 	and.w	r2, r3, #15
 800285c:	4613      	mov	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4413      	add	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4413      	add	r3, r2
 800286c:	3304      	adds	r3, #4
 800286e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2200      	movs	r2, #0
 8002880:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2200      	movs	r2, #0
 8002886:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002888:	7afb      	ldrb	r3, [r7, #11]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	b2da      	uxtb	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d102      	bne.n	80028a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028a2:	7afb      	ldrb	r3, [r7, #11]
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d109      	bne.n	80028c0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	6979      	ldr	r1, [r7, #20]
 80028ba:	f001 fef7 	bl	80046ac <USB_EP0StartXfer>
 80028be:	e008      	b.n	80028d2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	6979      	ldr	r1, [r7, #20]
 80028ce:	f001 fca5 	bl	800421c <USB_EPStartXfer>
  }

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	460b      	mov	r3, r1
 80028ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ec:	7afb      	ldrb	r3, [r7, #11]
 80028ee:	f003 020f 	and.w	r2, r3, #15
 80028f2:	4613      	mov	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	3338      	adds	r3, #56	; 0x38
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4413      	add	r3, r2
 8002900:	3304      	adds	r3, #4
 8002902:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2200      	movs	r2, #0
 8002914:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2201      	movs	r2, #1
 800291a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800291c:	7afb      	ldrb	r3, [r7, #11]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	b2da      	uxtb	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d102      	bne.n	8002936 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002936:	7afb      	ldrb	r3, [r7, #11]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	2b00      	cmp	r3, #0
 800293e:	d109      	bne.n	8002954 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	6979      	ldr	r1, [r7, #20]
 800294e:	f001 fead 	bl	80046ac <USB_EP0StartXfer>
 8002952:	e008      	b.n	8002966 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	461a      	mov	r2, r3
 8002960:	6979      	ldr	r1, [r7, #20]
 8002962:	f001 fc5b 	bl	800421c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	f003 020f 	and.w	r2, r3, #15
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	429a      	cmp	r2, r3
 8002988:	d901      	bls.n	800298e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e050      	b.n	8002a30 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800298e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002992:	2b00      	cmp	r3, #0
 8002994:	da0f      	bge.n	80029b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	f003 020f 	and.w	r2, r3, #15
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	3338      	adds	r3, #56	; 0x38
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	3304      	adds	r3, #4
 80029ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2201      	movs	r2, #1
 80029b2:	705a      	strb	r2, [r3, #1]
 80029b4:	e00d      	b.n	80029d2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	4413      	add	r3, r2
 80029c8:	3304      	adds	r3, #4
 80029ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2201      	movs	r2, #1
 80029d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_PCD_EP_SetStall+0x82>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e01e      	b.n	8002a30 <HAL_PCD_EP_SetStall+0xc0>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68f9      	ldr	r1, [r7, #12]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f002 f8eb 	bl	8004bdc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	b2d9      	uxtb	r1, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a20:	461a      	mov	r2, r3
 8002a22:	f002 fadb 	bl	8004fdc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	f003 020f 	and.w	r2, r3, #15
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d901      	bls.n	8002a56 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e042      	b.n	8002adc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	da0f      	bge.n	8002a7e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	f003 020f 	and.w	r2, r3, #15
 8002a64:	4613      	mov	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	3338      	adds	r3, #56	; 0x38
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	4413      	add	r3, r2
 8002a72:	3304      	adds	r3, #4
 8002a74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	705a      	strb	r2, [r3, #1]
 8002a7c:	e00f      	b.n	8002a9e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	3304      	adds	r3, #4
 8002a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aa4:	78fb      	ldrb	r3, [r7, #3]
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_PCD_EP_ClrStall+0x86>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e00e      	b.n	8002adc <HAL_PCD_EP_ClrStall+0xa4>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68f9      	ldr	r1, [r7, #12]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f002 f8f3 	bl	8004cb8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002af0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	da0c      	bge.n	8002b12 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	f003 020f 	and.w	r2, r3, #15
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	3338      	adds	r3, #56	; 0x38
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	e00c      	b.n	8002b2c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	f003 020f 	and.w	r2, r3, #15
 8002b18:	4613      	mov	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4413      	add	r3, r2
 8002b28:	3304      	adds	r3, #4
 8002b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68f9      	ldr	r1, [r7, #12]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f001 ff12 	bl	800495c <USB_EPStopXfer>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002b3c:	7afb      	ldrb	r3, [r7, #11]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b08a      	sub	sp, #40	; 0x28
 8002b4a:	af02      	add	r7, sp, #8
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	3338      	adds	r3, #56	; 0x38
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a1a      	ldr	r2, [r3, #32]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d901      	bls.n	8002b7e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e06c      	b.n	8002c58 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d902      	bls.n	8002b9a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3303      	adds	r3, #3
 8002b9e:	089b      	lsrs	r3, r3, #2
 8002ba0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ba2:	e02b      	b.n	8002bfc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	699a      	ldr	r2, [r3, #24]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d902      	bls.n	8002bc0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	3303      	adds	r3, #3
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6919      	ldr	r1, [r3, #16]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	4603      	mov	r3, r0
 8002bde:	6978      	ldr	r0, [r7, #20]
 8002be0:	f001 ff66 	bl	8004ab0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	441a      	add	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a1a      	ldr	r2, [r3, #32]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	441a      	add	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d809      	bhi.n	8002c26 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a1a      	ldr	r2, [r3, #32]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d203      	bcs.n	8002c26 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1be      	bne.n	8002ba4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d811      	bhi.n	8002c56 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	2201      	movs	r2, #1
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	6939      	ldr	r1, [r7, #16]
 8002c4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c52:	4013      	ands	r3, r2
 8002c54:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3720      	adds	r7, #32
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	333c      	adds	r3, #60	; 0x3c
 8002c78:	3304      	adds	r3, #4
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	015a      	lsls	r2, r3, #5
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	4413      	add	r3, r2
 8002c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d17b      	bne.n	8002d8e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d015      	beq.n	8002ccc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	4a61      	ldr	r2, [pc, #388]	; (8002e28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	f240 80b9 	bls.w	8002e1c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80b3 	beq.w	8002e1c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cc8:	6093      	str	r3, [r2, #8]
 8002cca:	e0a7      	b.n	8002e1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	2320      	movs	r3, #32
 8002ce6:	6093      	str	r3, [r2, #8]
 8002ce8:	e098      	b.n	8002e1c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f040 8093 	bne.w	8002e1c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	4a4b      	ldr	r2, [pc, #300]	; (8002e28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d90f      	bls.n	8002d1e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d14:	461a      	mov	r2, r3
 8002d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d1a:	6093      	str	r3, [r2, #8]
 8002d1c:	e07e      	b.n	8002e1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	4413      	add	r3, r2
 8002d30:	3304      	adds	r3, #4
 8002d32:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	69da      	ldr	r2, [r3, #28]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	0159      	lsls	r1, r3, #5
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	440b      	add	r3, r1
 8002d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4a:	1ad2      	subs	r2, r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d114      	bne.n	8002d80 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d109      	bne.n	8002d72 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d68:	461a      	mov	r2, r3
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	f002 f936 	bl	8004fdc <USB_EP0_OutStart>
 8002d70:	e006      	b.n	8002d80 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	691a      	ldr	r2, [r3, #16]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	441a      	add	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	4619      	mov	r1, r3
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f004 f864 	bl	8006e54 <HAL_PCD_DataOutStageCallback>
 8002d8c:	e046      	b.n	8002e1c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	4a26      	ldr	r2, [pc, #152]	; (8002e2c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d124      	bne.n	8002de0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00a      	beq.n	8002db6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dac:	461a      	mov	r2, r3
 8002dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002db2:	6093      	str	r3, [r2, #8]
 8002db4:	e032      	b.n	8002e1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2320      	movs	r3, #32
 8002dd0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f004 f83b 	bl	8006e54 <HAL_PCD_DataOutStageCallback>
 8002dde:	e01d      	b.n	8002e1c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d114      	bne.n	8002e10 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	4613      	mov	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d108      	bne.n	8002e10 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e08:	461a      	mov	r2, r3
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	f002 f8e6 	bl	8004fdc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	4619      	mov	r1, r3
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f004 f81c 	bl	8006e54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3720      	adds	r7, #32
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	4f54300a 	.word	0x4f54300a
 8002e2c:	4f54310a 	.word	0x4f54310a

08002e30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	333c      	adds	r3, #60	; 0x3c
 8002e48:	3304      	adds	r3, #4
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4a15      	ldr	r2, [pc, #84]	; (8002eb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d90e      	bls.n	8002e84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d009      	beq.n	8002e84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f003 ffd3 	bl	8006e30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4a0a      	ldr	r2, [pc, #40]	; (8002eb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d90c      	bls.n	8002eac <PCD_EP_OutSetupPacket_int+0x7c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d108      	bne.n	8002eac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	f002 f898 	bl	8004fdc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	4f54300a 	.word	0x4f54300a

08002ebc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	70fb      	strb	r3, [r7, #3]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d107      	bne.n	8002eea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002eda:	883b      	ldrh	r3, [r7, #0]
 8002edc:	0419      	lsls	r1, r3, #16
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ee8:	e028      	b.n	8002f3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ef8:	2300      	movs	r3, #0
 8002efa:	73fb      	strb	r3, [r7, #15]
 8002efc:	e00d      	b.n	8002f1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	3340      	adds	r3, #64	; 0x40
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	0c1b      	lsrs	r3, r3, #16
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	4413      	add	r3, r2
 8002f12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	3301      	adds	r3, #1
 8002f18:	73fb      	strb	r3, [r7, #15]
 8002f1a:	7bfa      	ldrb	r2, [r7, #15]
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d3ec      	bcc.n	8002efe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f24:	883b      	ldrh	r3, [r7, #0]
 8002f26:	0418      	lsls	r0, r3, #16
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6819      	ldr	r1, [r3, #0]
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	4302      	orrs	r2, r0
 8002f34:	3340      	adds	r3, #64	; 0x40
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	460b      	mov	r3, r1
 8002f54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e267      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d075      	beq.n	800308e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fa2:	4b88      	ldr	r3, [pc, #544]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d00c      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fae:	4b85      	ldr	r3, [pc, #532]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d112      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fba:	4b82      	ldr	r3, [pc, #520]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc8:	4b7e      	ldr	r3, [pc, #504]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d05b      	beq.n	800308c <HAL_RCC_OscConfig+0x108>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d157      	bne.n	800308c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e242      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe8:	d106      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x74>
 8002fea:	4b76      	ldr	r3, [pc, #472]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a75      	ldr	r2, [pc, #468]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8002ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	e01d      	b.n	8003034 <HAL_RCC_OscConfig+0xb0>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0x98>
 8003002:	4b70      	ldr	r3, [pc, #448]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a6f      	ldr	r2, [pc, #444]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	4b6d      	ldr	r3, [pc, #436]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a6c      	ldr	r2, [pc, #432]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e00b      	b.n	8003034 <HAL_RCC_OscConfig+0xb0>
 800301c:	4b69      	ldr	r3, [pc, #420]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a68      	ldr	r2, [pc, #416]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	4b66      	ldr	r3, [pc, #408]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a65      	ldr	r2, [pc, #404]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 800302e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d013      	beq.n	8003064 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7fd fe46 	bl	8000ccc <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003044:	f7fd fe42 	bl	8000ccc <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b64      	cmp	r3, #100	; 0x64
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e207      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003056:	4b5b      	ldr	r3, [pc, #364]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0xc0>
 8003062:	e014      	b.n	800308e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7fd fe32 	bl	8000ccc <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800306c:	f7fd fe2e 	bl	8000ccc <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e1f3      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307e:	4b51      	ldr	r3, [pc, #324]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0xe8>
 800308a:	e000      	b.n	800308e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d063      	beq.n	8003162 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800309a:	4b4a      	ldr	r3, [pc, #296]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00b      	beq.n	80030be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030a6:	4b47      	ldr	r3, [pc, #284]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d11c      	bne.n	80030ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030b2:	4b44      	ldr	r3, [pc, #272]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d116      	bne.n	80030ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030be:	4b41      	ldr	r3, [pc, #260]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d005      	beq.n	80030d6 <HAL_RCC_OscConfig+0x152>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d001      	beq.n	80030d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e1c7      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d6:	4b3b      	ldr	r3, [pc, #236]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4937      	ldr	r1, [pc, #220]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ea:	e03a      	b.n	8003162 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d020      	beq.n	8003136 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f4:	4b34      	ldr	r3, [pc, #208]	; (80031c8 <HAL_RCC_OscConfig+0x244>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fa:	f7fd fde7 	bl	8000ccc <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003102:	f7fd fde3 	bl	8000ccc <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e1a8      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003114:	4b2b      	ldr	r3, [pc, #172]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003120:	4b28      	ldr	r3, [pc, #160]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4925      	ldr	r1, [pc, #148]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003130:	4313      	orrs	r3, r2
 8003132:	600b      	str	r3, [r1, #0]
 8003134:	e015      	b.n	8003162 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003136:	4b24      	ldr	r3, [pc, #144]	; (80031c8 <HAL_RCC_OscConfig+0x244>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7fd fdc6 	bl	8000ccc <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003144:	f7fd fdc2 	bl	8000ccc <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e187      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003156:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d036      	beq.n	80031dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d016      	beq.n	80031a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003176:	4b15      	ldr	r3, [pc, #84]	; (80031cc <HAL_RCC_OscConfig+0x248>)
 8003178:	2201      	movs	r2, #1
 800317a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317c:	f7fd fda6 	bl	8000ccc <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003184:	f7fd fda2 	bl	8000ccc <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e167      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0x200>
 80031a2:	e01b      	b.n	80031dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a4:	4b09      	ldr	r3, [pc, #36]	; (80031cc <HAL_RCC_OscConfig+0x248>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031aa:	f7fd fd8f 	bl	8000ccc <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b0:	e00e      	b.n	80031d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b2:	f7fd fd8b 	bl	8000ccc <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d907      	bls.n	80031d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e150      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
 80031c4:	40023800 	.word	0x40023800
 80031c8:	42470000 	.word	0x42470000
 80031cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d0:	4b88      	ldr	r3, [pc, #544]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 80031d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1ea      	bne.n	80031b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 8097 	beq.w	8003318 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ea:	2300      	movs	r3, #0
 80031ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ee:	4b81      	ldr	r3, [pc, #516]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10f      	bne.n	800321a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	4b7d      	ldr	r3, [pc, #500]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	4a7c      	ldr	r2, [pc, #496]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003208:	6413      	str	r3, [r2, #64]	; 0x40
 800320a:	4b7a      	ldr	r3, [pc, #488]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003216:	2301      	movs	r3, #1
 8003218:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321a:	4b77      	ldr	r3, [pc, #476]	; (80033f8 <HAL_RCC_OscConfig+0x474>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d118      	bne.n	8003258 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003226:	4b74      	ldr	r3, [pc, #464]	; (80033f8 <HAL_RCC_OscConfig+0x474>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a73      	ldr	r2, [pc, #460]	; (80033f8 <HAL_RCC_OscConfig+0x474>)
 800322c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003232:	f7fd fd4b 	bl	8000ccc <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323a:	f7fd fd47 	bl	8000ccc <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e10c      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324c:	4b6a      	ldr	r3, [pc, #424]	; (80033f8 <HAL_RCC_OscConfig+0x474>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d106      	bne.n	800326e <HAL_RCC_OscConfig+0x2ea>
 8003260:	4b64      	ldr	r3, [pc, #400]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003264:	4a63      	ldr	r2, [pc, #396]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6713      	str	r3, [r2, #112]	; 0x70
 800326c:	e01c      	b.n	80032a8 <HAL_RCC_OscConfig+0x324>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b05      	cmp	r3, #5
 8003274:	d10c      	bne.n	8003290 <HAL_RCC_OscConfig+0x30c>
 8003276:	4b5f      	ldr	r3, [pc, #380]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	4a5e      	ldr	r2, [pc, #376]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 800327c:	f043 0304 	orr.w	r3, r3, #4
 8003280:	6713      	str	r3, [r2, #112]	; 0x70
 8003282:	4b5c      	ldr	r3, [pc, #368]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	4a5b      	ldr	r2, [pc, #364]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	6713      	str	r3, [r2, #112]	; 0x70
 800328e:	e00b      	b.n	80032a8 <HAL_RCC_OscConfig+0x324>
 8003290:	4b58      	ldr	r3, [pc, #352]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	4a57      	ldr	r2, [pc, #348]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003296:	f023 0301 	bic.w	r3, r3, #1
 800329a:	6713      	str	r3, [r2, #112]	; 0x70
 800329c:	4b55      	ldr	r3, [pc, #340]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	4a54      	ldr	r2, [pc, #336]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 80032a2:	f023 0304 	bic.w	r3, r3, #4
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d015      	beq.n	80032dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b0:	f7fd fd0c 	bl	8000ccc <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b6:	e00a      	b.n	80032ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b8:	f7fd fd08 	bl	8000ccc <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e0cb      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ce:	4b49      	ldr	r3, [pc, #292]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0ee      	beq.n	80032b8 <HAL_RCC_OscConfig+0x334>
 80032da:	e014      	b.n	8003306 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032dc:	f7fd fcf6 	bl	8000ccc <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e4:	f7fd fcf2 	bl	8000ccc <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e0b5      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032fa:	4b3e      	ldr	r3, [pc, #248]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1ee      	bne.n	80032e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003306:	7dfb      	ldrb	r3, [r7, #23]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d105      	bne.n	8003318 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800330c:	4b39      	ldr	r3, [pc, #228]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	4a38      	ldr	r2, [pc, #224]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003316:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80a1 	beq.w	8003464 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003322:	4b34      	ldr	r3, [pc, #208]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b08      	cmp	r3, #8
 800332c:	d05c      	beq.n	80033e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d141      	bne.n	80033ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003336:	4b31      	ldr	r3, [pc, #196]	; (80033fc <HAL_RCC_OscConfig+0x478>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7fd fcc6 	bl	8000ccc <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003344:	f7fd fcc2 	bl	8000ccc <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e087      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003356:	4b27      	ldr	r3, [pc, #156]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69da      	ldr	r2, [r3, #28]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	019b      	lsls	r3, r3, #6
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	3b01      	subs	r3, #1
 800337c:	041b      	lsls	r3, r3, #16
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	061b      	lsls	r3, r3, #24
 8003386:	491b      	ldr	r1, [pc, #108]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003388:	4313      	orrs	r3, r2
 800338a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800338c:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <HAL_RCC_OscConfig+0x478>)
 800338e:	2201      	movs	r2, #1
 8003390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003392:	f7fd fc9b 	bl	8000ccc <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339a:	f7fd fc97 	bl	8000ccc <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e05c      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ac:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0f0      	beq.n	800339a <HAL_RCC_OscConfig+0x416>
 80033b8:	e054      	b.n	8003464 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ba:	4b10      	ldr	r3, [pc, #64]	; (80033fc <HAL_RCC_OscConfig+0x478>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fd fc84 	bl	8000ccc <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fd fc80 	bl	8000ccc <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e045      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033da:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x444>
 80033e6:	e03d      	b.n	8003464 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d107      	bne.n	8003400 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e038      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40007000 	.word	0x40007000
 80033fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003400:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <HAL_RCC_OscConfig+0x4ec>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d028      	beq.n	8003460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003418:	429a      	cmp	r2, r3
 800341a:	d121      	bne.n	8003460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003426:	429a      	cmp	r2, r3
 8003428:	d11a      	bne.n	8003460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003430:	4013      	ands	r3, r2
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003436:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003438:	4293      	cmp	r3, r2
 800343a:	d111      	bne.n	8003460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	085b      	lsrs	r3, r3, #1
 8003448:	3b01      	subs	r3, #1
 800344a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800344c:	429a      	cmp	r2, r3
 800344e:	d107      	bne.n	8003460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40023800 	.word	0x40023800

08003474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0cc      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003488:	4b68      	ldr	r3, [pc, #416]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d90c      	bls.n	80034b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b65      	ldr	r3, [pc, #404]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800349e:	4b63      	ldr	r3, [pc, #396]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0b8      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d020      	beq.n	80034fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c8:	4b59      	ldr	r3, [pc, #356]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4a58      	ldr	r2, [pc, #352]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e0:	4b53      	ldr	r3, [pc, #332]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4a52      	ldr	r2, [pc, #328]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ec:	4b50      	ldr	r3, [pc, #320]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	494d      	ldr	r1, [pc, #308]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d044      	beq.n	8003594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	4b47      	ldr	r3, [pc, #284]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d119      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e07f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d003      	beq.n	8003532 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800352e:	2b03      	cmp	r3, #3
 8003530:	d107      	bne.n	8003542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003532:	4b3f      	ldr	r3, [pc, #252]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e06f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003542:	4b3b      	ldr	r3, [pc, #236]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e067      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003552:	4b37      	ldr	r3, [pc, #220]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f023 0203 	bic.w	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4934      	ldr	r1, [pc, #208]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	4313      	orrs	r3, r2
 8003562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003564:	f7fd fbb2 	bl	8000ccc <HAL_GetTick>
 8003568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	e00a      	b.n	8003582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800356c:	f7fd fbae 	bl	8000ccc <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	; 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e04f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003582:	4b2b      	ldr	r3, [pc, #172]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 020c 	and.w	r2, r3, #12
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	429a      	cmp	r2, r3
 8003592:	d1eb      	bne.n	800356c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003594:	4b25      	ldr	r3, [pc, #148]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d20c      	bcs.n	80035bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a2:	4b22      	ldr	r3, [pc, #136]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b20      	ldr	r3, [pc, #128]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e032      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c8:	4b19      	ldr	r3, [pc, #100]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4916      	ldr	r1, [pc, #88]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035e6:	4b12      	ldr	r3, [pc, #72]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	490e      	ldr	r1, [pc, #56]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035fa:	f000 f821 	bl	8003640 <HAL_RCC_GetSysClockFreq>
 80035fe:	4602      	mov	r2, r0
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	091b      	lsrs	r3, r3, #4
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	490a      	ldr	r1, [pc, #40]	; (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 800360c:	5ccb      	ldrb	r3, [r1, r3]
 800360e:	fa22 f303 	lsr.w	r3, r2, r3
 8003612:	4a09      	ldr	r2, [pc, #36]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 8003614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <HAL_RCC_ClockConfig+0x1c8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fd fb12 	bl	8000c44 <HAL_InitTick>

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40023c00 	.word	0x40023c00
 8003630:	40023800 	.word	0x40023800
 8003634:	0800742c 	.word	0x0800742c
 8003638:	20000000 	.word	0x20000000
 800363c:	20000004 	.word	0x20000004

08003640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003644:	b094      	sub	sp, #80	; 0x50
 8003646:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	647b      	str	r3, [r7, #68]	; 0x44
 800364c:	2300      	movs	r3, #0
 800364e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003650:	2300      	movs	r3, #0
 8003652:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003658:	4b79      	ldr	r3, [pc, #484]	; (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 030c 	and.w	r3, r3, #12
 8003660:	2b08      	cmp	r3, #8
 8003662:	d00d      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0x40>
 8003664:	2b08      	cmp	r3, #8
 8003666:	f200 80e1 	bhi.w	800382c <HAL_RCC_GetSysClockFreq+0x1ec>
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_RCC_GetSysClockFreq+0x34>
 800366e:	2b04      	cmp	r3, #4
 8003670:	d003      	beq.n	800367a <HAL_RCC_GetSysClockFreq+0x3a>
 8003672:	e0db      	b.n	800382c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003674:	4b73      	ldr	r3, [pc, #460]	; (8003844 <HAL_RCC_GetSysClockFreq+0x204>)
 8003676:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003678:	e0db      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800367a:	4b73      	ldr	r3, [pc, #460]	; (8003848 <HAL_RCC_GetSysClockFreq+0x208>)
 800367c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800367e:	e0d8      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003680:	4b6f      	ldr	r3, [pc, #444]	; (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003688:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800368a:	4b6d      	ldr	r3, [pc, #436]	; (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d063      	beq.n	800375e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003696:	4b6a      	ldr	r3, [pc, #424]	; (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	099b      	lsrs	r3, r3, #6
 800369c:	2200      	movs	r2, #0
 800369e:	63bb      	str	r3, [r7, #56]	; 0x38
 80036a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a8:	633b      	str	r3, [r7, #48]	; 0x30
 80036aa:	2300      	movs	r3, #0
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34
 80036ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036b2:	4622      	mov	r2, r4
 80036b4:	462b      	mov	r3, r5
 80036b6:	f04f 0000 	mov.w	r0, #0
 80036ba:	f04f 0100 	mov.w	r1, #0
 80036be:	0159      	lsls	r1, r3, #5
 80036c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036c4:	0150      	lsls	r0, r2, #5
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4621      	mov	r1, r4
 80036cc:	1a51      	subs	r1, r2, r1
 80036ce:	6139      	str	r1, [r7, #16]
 80036d0:	4629      	mov	r1, r5
 80036d2:	eb63 0301 	sbc.w	r3, r3, r1
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036e4:	4659      	mov	r1, fp
 80036e6:	018b      	lsls	r3, r1, #6
 80036e8:	4651      	mov	r1, sl
 80036ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036ee:	4651      	mov	r1, sl
 80036f0:	018a      	lsls	r2, r1, #6
 80036f2:	4651      	mov	r1, sl
 80036f4:	ebb2 0801 	subs.w	r8, r2, r1
 80036f8:	4659      	mov	r1, fp
 80036fa:	eb63 0901 	sbc.w	r9, r3, r1
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800370a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800370e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003712:	4690      	mov	r8, r2
 8003714:	4699      	mov	r9, r3
 8003716:	4623      	mov	r3, r4
 8003718:	eb18 0303 	adds.w	r3, r8, r3
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	462b      	mov	r3, r5
 8003720:	eb49 0303 	adc.w	r3, r9, r3
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003732:	4629      	mov	r1, r5
 8003734:	024b      	lsls	r3, r1, #9
 8003736:	4621      	mov	r1, r4
 8003738:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800373c:	4621      	mov	r1, r4
 800373e:	024a      	lsls	r2, r1, #9
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003746:	2200      	movs	r2, #0
 8003748:	62bb      	str	r3, [r7, #40]	; 0x28
 800374a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800374c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003750:	f7fc fd3a 	bl	80001c8 <__aeabi_uldivmod>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4613      	mov	r3, r2
 800375a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800375c:	e058      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800375e:	4b38      	ldr	r3, [pc, #224]	; (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	099b      	lsrs	r3, r3, #6
 8003764:	2200      	movs	r2, #0
 8003766:	4618      	mov	r0, r3
 8003768:	4611      	mov	r1, r2
 800376a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800376e:	623b      	str	r3, [r7, #32]
 8003770:	2300      	movs	r3, #0
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
 8003774:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003778:	4642      	mov	r2, r8
 800377a:	464b      	mov	r3, r9
 800377c:	f04f 0000 	mov.w	r0, #0
 8003780:	f04f 0100 	mov.w	r1, #0
 8003784:	0159      	lsls	r1, r3, #5
 8003786:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800378a:	0150      	lsls	r0, r2, #5
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4641      	mov	r1, r8
 8003792:	ebb2 0a01 	subs.w	sl, r2, r1
 8003796:	4649      	mov	r1, r9
 8003798:	eb63 0b01 	sbc.w	fp, r3, r1
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037b0:	ebb2 040a 	subs.w	r4, r2, sl
 80037b4:	eb63 050b 	sbc.w	r5, r3, fp
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	00eb      	lsls	r3, r5, #3
 80037c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037c6:	00e2      	lsls	r2, r4, #3
 80037c8:	4614      	mov	r4, r2
 80037ca:	461d      	mov	r5, r3
 80037cc:	4643      	mov	r3, r8
 80037ce:	18e3      	adds	r3, r4, r3
 80037d0:	603b      	str	r3, [r7, #0]
 80037d2:	464b      	mov	r3, r9
 80037d4:	eb45 0303 	adc.w	r3, r5, r3
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037e6:	4629      	mov	r1, r5
 80037e8:	028b      	lsls	r3, r1, #10
 80037ea:	4621      	mov	r1, r4
 80037ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037f0:	4621      	mov	r1, r4
 80037f2:	028a      	lsls	r2, r1, #10
 80037f4:	4610      	mov	r0, r2
 80037f6:	4619      	mov	r1, r3
 80037f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037fa:	2200      	movs	r2, #0
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	61fa      	str	r2, [r7, #28]
 8003800:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003804:	f7fc fce0 	bl	80001c8 <__aeabi_uldivmod>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4613      	mov	r3, r2
 800380e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	0c1b      	lsrs	r3, r3, #16
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	3301      	adds	r3, #1
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003820:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003824:	fbb2 f3f3 	udiv	r3, r2, r3
 8003828:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800382a:	e002      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800382c:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_RCC_GetSysClockFreq+0x204>)
 800382e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003834:	4618      	mov	r0, r3
 8003836:	3750      	adds	r7, #80	; 0x50
 8003838:	46bd      	mov	sp, r7
 800383a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800383e:	bf00      	nop
 8003840:	40023800 	.word	0x40023800
 8003844:	00f42400 	.word	0x00f42400
 8003848:	007a1200 	.word	0x007a1200

0800384c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003850:	4b03      	ldr	r3, [pc, #12]	; (8003860 <HAL_RCC_GetHCLKFreq+0x14>)
 8003852:	681b      	ldr	r3, [r3, #0]
}
 8003854:	4618      	mov	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000000 	.word	0x20000000

08003864 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003864:	b084      	sub	sp, #16
 8003866:	b580      	push	{r7, lr}
 8003868:	b084      	sub	sp, #16
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	f107 001c 	add.w	r0, r7, #28
 8003872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	2b01      	cmp	r3, #1
 800387a:	d122      	bne.n	80038c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003880:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80038a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d105      	bne.n	80038b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f001 fbee 	bl	8005098 <USB_CoreReset>
 80038bc:	4603      	mov	r3, r0
 80038be:	73fb      	strb	r3, [r7, #15]
 80038c0:	e01a      	b.n	80038f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f001 fbe2 	bl	8005098 <USB_CoreReset>
 80038d4:	4603      	mov	r3, r0
 80038d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80038d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	639a      	str	r2, [r3, #56]	; 0x38
 80038ea:	e005      	b.n	80038f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80038f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d10b      	bne.n	8003916 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f043 0206 	orr.w	r2, r3, #6
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f043 0220 	orr.w	r2, r3, #32
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003916:	7bfb      	ldrb	r3, [r7, #15]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003922:	b004      	add	sp, #16
 8003924:	4770      	bx	lr
	...

08003928 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	4613      	mov	r3, r2
 8003934:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d165      	bne.n	8003a08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4a41      	ldr	r2, [pc, #260]	; (8003a44 <USB_SetTurnaroundTime+0x11c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d906      	bls.n	8003952 <USB_SetTurnaroundTime+0x2a>
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4a40      	ldr	r2, [pc, #256]	; (8003a48 <USB_SetTurnaroundTime+0x120>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d202      	bcs.n	8003952 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800394c:	230f      	movs	r3, #15
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	e062      	b.n	8003a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	4a3c      	ldr	r2, [pc, #240]	; (8003a48 <USB_SetTurnaroundTime+0x120>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d306      	bcc.n	8003968 <USB_SetTurnaroundTime+0x40>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	4a3b      	ldr	r2, [pc, #236]	; (8003a4c <USB_SetTurnaroundTime+0x124>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d202      	bcs.n	8003968 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003962:	230e      	movs	r3, #14
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	e057      	b.n	8003a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	4a38      	ldr	r2, [pc, #224]	; (8003a4c <USB_SetTurnaroundTime+0x124>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d306      	bcc.n	800397e <USB_SetTurnaroundTime+0x56>
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4a37      	ldr	r2, [pc, #220]	; (8003a50 <USB_SetTurnaroundTime+0x128>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d202      	bcs.n	800397e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003978:	230d      	movs	r3, #13
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	e04c      	b.n	8003a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	4a33      	ldr	r2, [pc, #204]	; (8003a50 <USB_SetTurnaroundTime+0x128>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d306      	bcc.n	8003994 <USB_SetTurnaroundTime+0x6c>
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	4a32      	ldr	r2, [pc, #200]	; (8003a54 <USB_SetTurnaroundTime+0x12c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d802      	bhi.n	8003994 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800398e:	230c      	movs	r3, #12
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	e041      	b.n	8003a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4a2f      	ldr	r2, [pc, #188]	; (8003a54 <USB_SetTurnaroundTime+0x12c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d906      	bls.n	80039aa <USB_SetTurnaroundTime+0x82>
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4a2e      	ldr	r2, [pc, #184]	; (8003a58 <USB_SetTurnaroundTime+0x130>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d802      	bhi.n	80039aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80039a4:	230b      	movs	r3, #11
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	e036      	b.n	8003a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	4a2a      	ldr	r2, [pc, #168]	; (8003a58 <USB_SetTurnaroundTime+0x130>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d906      	bls.n	80039c0 <USB_SetTurnaroundTime+0x98>
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	4a29      	ldr	r2, [pc, #164]	; (8003a5c <USB_SetTurnaroundTime+0x134>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d802      	bhi.n	80039c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80039ba:	230a      	movs	r3, #10
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	e02b      	b.n	8003a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4a26      	ldr	r2, [pc, #152]	; (8003a5c <USB_SetTurnaroundTime+0x134>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d906      	bls.n	80039d6 <USB_SetTurnaroundTime+0xae>
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	4a25      	ldr	r2, [pc, #148]	; (8003a60 <USB_SetTurnaroundTime+0x138>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d202      	bcs.n	80039d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80039d0:	2309      	movs	r3, #9
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	e020      	b.n	8003a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	4a21      	ldr	r2, [pc, #132]	; (8003a60 <USB_SetTurnaroundTime+0x138>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d306      	bcc.n	80039ec <USB_SetTurnaroundTime+0xc4>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	4a20      	ldr	r2, [pc, #128]	; (8003a64 <USB_SetTurnaroundTime+0x13c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d802      	bhi.n	80039ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80039e6:	2308      	movs	r3, #8
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	e015      	b.n	8003a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4a1d      	ldr	r2, [pc, #116]	; (8003a64 <USB_SetTurnaroundTime+0x13c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d906      	bls.n	8003a02 <USB_SetTurnaroundTime+0xda>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4a1c      	ldr	r2, [pc, #112]	; (8003a68 <USB_SetTurnaroundTime+0x140>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d202      	bcs.n	8003a02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80039fc:	2307      	movs	r3, #7
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	e00a      	b.n	8003a18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003a02:	2306      	movs	r3, #6
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	e007      	b.n	8003a18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d102      	bne.n	8003a14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003a0e:	2309      	movs	r3, #9
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	e001      	b.n	8003a18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003a14:	2309      	movs	r3, #9
 8003a16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	029b      	lsls	r3, r3, #10
 8003a2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003a30:	431a      	orrs	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	00d8acbf 	.word	0x00d8acbf
 8003a48:	00e4e1c0 	.word	0x00e4e1c0
 8003a4c:	00f42400 	.word	0x00f42400
 8003a50:	01067380 	.word	0x01067380
 8003a54:	011a499f 	.word	0x011a499f
 8003a58:	01312cff 	.word	0x01312cff
 8003a5c:	014ca43f 	.word	0x014ca43f
 8003a60:	016e3600 	.word	0x016e3600
 8003a64:	01a6ab1f 	.word	0x01a6ab1f
 8003a68:	01e84800 	.word	0x01e84800

08003a6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f043 0201 	orr.w	r2, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f023 0201 	bic.w	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003acc:	78fb      	ldrb	r3, [r7, #3]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d115      	bne.n	8003afe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ade:	2001      	movs	r0, #1
 8003ae0:	f7fd f900 	bl	8000ce4 <HAL_Delay>
      ms++;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f001 fa45 	bl	8004f7a <USB_GetMode>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d01e      	beq.n	8003b34 <USB_SetCurrentMode+0x84>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b31      	cmp	r3, #49	; 0x31
 8003afa:	d9f0      	bls.n	8003ade <USB_SetCurrentMode+0x2e>
 8003afc:	e01a      	b.n	8003b34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003afe:	78fb      	ldrb	r3, [r7, #3]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d115      	bne.n	8003b30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b10:	2001      	movs	r0, #1
 8003b12:	f7fd f8e7 	bl	8000ce4 <HAL_Delay>
      ms++;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f001 fa2c 	bl	8004f7a <USB_GetMode>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <USB_SetCurrentMode+0x84>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b31      	cmp	r3, #49	; 0x31
 8003b2c:	d9f0      	bls.n	8003b10 <USB_SetCurrentMode+0x60>
 8003b2e:	e001      	b.n	8003b34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e005      	b.n	8003b40 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b32      	cmp	r3, #50	; 0x32
 8003b38:	d101      	bne.n	8003b3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b48:	b084      	sub	sp, #16
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b086      	sub	sp, #24
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b62:	2300      	movs	r3, #0
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	e009      	b.n	8003b7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	3340      	adds	r3, #64	; 0x40
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	2200      	movs	r2, #0
 8003b74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	2b0e      	cmp	r3, #14
 8003b80:	d9f2      	bls.n	8003b68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d11c      	bne.n	8003bc2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b96:	f043 0302 	orr.w	r3, r3, #2
 8003b9a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	639a      	str	r2, [r3, #56]	; 0x38
 8003bc0:	e00b      	b.n	8003bda <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003be0:	461a      	mov	r2, r3
 8003be2:	2300      	movs	r3, #0
 8003be4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bec:	4619      	mov	r1, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	680b      	ldr	r3, [r1, #0]
 8003bf8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d10c      	bne.n	8003c1a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d104      	bne.n	8003c10 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c06:	2100      	movs	r1, #0
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f965 	bl	8003ed8 <USB_SetDevSpeed>
 8003c0e:	e008      	b.n	8003c22 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c10:	2101      	movs	r1, #1
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f960 	bl	8003ed8 <USB_SetDevSpeed>
 8003c18:	e003      	b.n	8003c22 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c1a:	2103      	movs	r1, #3
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f95b 	bl	8003ed8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c22:	2110      	movs	r1, #16
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f8f3 	bl	8003e10 <USB_FlushTxFifo>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f91f 	bl	8003e78 <USB_FlushRxFifo>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c56:	461a      	mov	r2, r3
 8003c58:	2300      	movs	r3, #0
 8003c5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c62:	461a      	mov	r2, r3
 8003c64:	2300      	movs	r3, #0
 8003c66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c68:	2300      	movs	r3, #0
 8003c6a:	613b      	str	r3, [r7, #16]
 8003c6c:	e043      	b.n	8003cf6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c84:	d118      	bne.n	8003cb8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10a      	bne.n	8003ca2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c98:	461a      	mov	r2, r3
 8003c9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	e013      	b.n	8003cca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	e008      	b.n	8003cca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	2300      	movs	r3, #0
 8003cda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce8:	461a      	mov	r2, r3
 8003cea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	613b      	str	r3, [r7, #16]
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d3b7      	bcc.n	8003c6e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cfe:	2300      	movs	r3, #0
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	e043      	b.n	8003d8c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d1a:	d118      	bne.n	8003d4e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10a      	bne.n	8003d38 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	e013      	b.n	8003d60 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d44:	461a      	mov	r2, r3
 8003d46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	e008      	b.n	8003d60 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	2300      	movs	r3, #0
 8003d70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d3b7      	bcc.n	8003d04 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003da2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003db4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d105      	bne.n	8003dc8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f043 0210 	orr.w	r2, r3, #16
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699a      	ldr	r2, [r3, #24]
 8003dcc:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <USB_DevInit+0x2c4>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d005      	beq.n	8003de6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	f043 0208 	orr.w	r2, r3, #8
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d107      	bne.n	8003dfc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003df4:	f043 0304 	orr.w	r3, r3, #4
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e08:	b004      	add	sp, #16
 8003e0a:	4770      	bx	lr
 8003e0c:	803c3800 	.word	0x803c3800

08003e10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	3301      	adds	r3, #1
 8003e22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4a13      	ldr	r2, [pc, #76]	; (8003e74 <USB_FlushTxFifo+0x64>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d901      	bls.n	8003e30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e01b      	b.n	8003e68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	daf2      	bge.n	8003e1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	019b      	lsls	r3, r3, #6
 8003e40:	f043 0220 	orr.w	r2, r3, #32
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4a08      	ldr	r2, [pc, #32]	; (8003e74 <USB_FlushTxFifo+0x64>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e006      	b.n	8003e68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	d0f0      	beq.n	8003e48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	00030d40 	.word	0x00030d40

08003e78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	3301      	adds	r3, #1
 8003e88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4a11      	ldr	r2, [pc, #68]	; (8003ed4 <USB_FlushRxFifo+0x5c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d901      	bls.n	8003e96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e018      	b.n	8003ec8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	daf2      	bge.n	8003e84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2210      	movs	r2, #16
 8003ea6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4a08      	ldr	r2, [pc, #32]	; (8003ed4 <USB_FlushRxFifo+0x5c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e006      	b.n	8003ec8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	2b10      	cmp	r3, #16
 8003ec4:	d0f0      	beq.n	8003ea8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	00030d40 	.word	0x00030d40

08003ed8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	68f9      	ldr	r1, [r7, #12]
 8003ef4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b087      	sub	sp, #28
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 0306 	and.w	r3, r3, #6
 8003f22:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d102      	bne.n	8003f30 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	75fb      	strb	r3, [r7, #23]
 8003f2e:	e00a      	b.n	8003f46 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d002      	beq.n	8003f3c <USB_GetDevSpeed+0x32>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b06      	cmp	r3, #6
 8003f3a:	d102      	bne.n	8003f42 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	75fb      	strb	r3, [r7, #23]
 8003f40:	e001      	b.n	8003f46 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003f42:	230f      	movs	r3, #15
 8003f44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	371c      	adds	r7, #28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	785b      	ldrb	r3, [r3, #1]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d13a      	bne.n	8003fe6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	2101      	movs	r1, #1
 8003f82:	fa01 f303 	lsl.w	r3, r1, r3
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	68f9      	ldr	r1, [r7, #12]
 8003f8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d155      	bne.n	8004054 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	791b      	ldrb	r3, [r3, #4]
 8003fc2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fc4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	059b      	lsls	r3, r3, #22
 8003fca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	0151      	lsls	r1, r2, #5
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	440a      	add	r2, r1
 8003fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	e036      	b.n	8004054 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fec:	69da      	ldr	r2, [r3, #28]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffc:	041b      	lsls	r3, r3, #16
 8003ffe:	68f9      	ldr	r1, [r7, #12]
 8004000:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004004:	4313      	orrs	r3, r2
 8004006:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d11a      	bne.n	8004054 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4413      	add	r3, r2
 8004026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	791b      	ldrb	r3, [r3, #4]
 8004038:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800403a:	430b      	orrs	r3, r1
 800403c:	4313      	orrs	r3, r2
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	0151      	lsls	r1, r2, #5
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	440a      	add	r2, r1
 8004046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800404a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800404e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004052:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	785b      	ldrb	r3, [r3, #1]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d161      	bne.n	8004144 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004092:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004096:	d11f      	bne.n	80040d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	0151      	lsls	r1, r2, #5
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	440a      	add	r2, r1
 80040ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	0151      	lsls	r1, r2, #5
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	440a      	add	r2, r1
 80040ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	f003 030f 	and.w	r3, r3, #15
 80040e8:	2101      	movs	r1, #1
 80040ea:	fa01 f303 	lsl.w	r3, r1, r3
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	43db      	mvns	r3, r3
 80040f2:	68f9      	ldr	r1, [r7, #12]
 80040f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040f8:	4013      	ands	r3, r2
 80040fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	2101      	movs	r1, #1
 800410e:	fa01 f303 	lsl.w	r3, r1, r3
 8004112:	b29b      	uxth	r3, r3
 8004114:	43db      	mvns	r3, r3
 8004116:	68f9      	ldr	r1, [r7, #12]
 8004118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800411c:	4013      	ands	r3, r2
 800411e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	0159      	lsls	r1, r3, #5
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	440b      	add	r3, r1
 8004136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413a:	4619      	mov	r1, r3
 800413c:	4b35      	ldr	r3, [pc, #212]	; (8004214 <USB_DeactivateEndpoint+0x1b0>)
 800413e:	4013      	ands	r3, r2
 8004140:	600b      	str	r3, [r1, #0]
 8004142:	e060      	b.n	8004206 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800415a:	d11f      	bne.n	800419c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	0151      	lsls	r1, r2, #5
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	440a      	add	r2, r1
 8004172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004176:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800417a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	0151      	lsls	r1, r2, #5
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	440a      	add	r2, r1
 8004192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004196:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800419a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	2101      	movs	r1, #1
 80041ae:	fa01 f303 	lsl.w	r3, r1, r3
 80041b2:	041b      	lsls	r3, r3, #16
 80041b4:	43db      	mvns	r3, r3
 80041b6:	68f9      	ldr	r1, [r7, #12]
 80041b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041bc:	4013      	ands	r3, r2
 80041be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	2101      	movs	r1, #1
 80041d2:	fa01 f303 	lsl.w	r3, r1, r3
 80041d6:	041b      	lsls	r3, r3, #16
 80041d8:	43db      	mvns	r3, r3
 80041da:	68f9      	ldr	r1, [r7, #12]
 80041dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041e0:	4013      	ands	r3, r2
 80041e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	0159      	lsls	r1, r3, #5
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	440b      	add	r3, r1
 80041fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fe:	4619      	mov	r1, r3
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <USB_DeactivateEndpoint+0x1b4>)
 8004202:	4013      	ands	r3, r2
 8004204:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	ec337800 	.word	0xec337800
 8004218:	eff37800 	.word	0xeff37800

0800421c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	; 0x28
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	4613      	mov	r3, r2
 8004228:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	785b      	ldrb	r3, [r3, #1]
 8004238:	2b01      	cmp	r3, #1
 800423a:	f040 815c 	bne.w	80044f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d132      	bne.n	80042ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	0151      	lsls	r1, r2, #5
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	440a      	add	r2, r1
 800425c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004260:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004264:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004268:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	0151      	lsls	r1, r2, #5
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	440a      	add	r2, r1
 8004280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004284:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004288:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	0151      	lsls	r1, r2, #5
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	440a      	add	r2, r1
 80042a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a4:	0cdb      	lsrs	r3, r3, #19
 80042a6:	04db      	lsls	r3, r3, #19
 80042a8:	6113      	str	r3, [r2, #16]
 80042aa:	e074      	b.n	8004396 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	0151      	lsls	r1, r2, #5
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	440a      	add	r2, r1
 80042c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042c6:	0cdb      	lsrs	r3, r3, #19
 80042c8:	04db      	lsls	r3, r3, #19
 80042ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	0151      	lsls	r1, r2, #5
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	440a      	add	r2, r1
 80042e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	6999      	ldr	r1, [r3, #24]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	440b      	add	r3, r1
 8004308:	1e59      	subs	r1, r3, #1
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004312:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004314:	4b9d      	ldr	r3, [pc, #628]	; (800458c <USB_EPStartXfer+0x370>)
 8004316:	400b      	ands	r3, r1
 8004318:	69b9      	ldr	r1, [r7, #24]
 800431a:	0148      	lsls	r0, r1, #5
 800431c:	69f9      	ldr	r1, [r7, #28]
 800431e:	4401      	add	r1, r0
 8004320:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004324:	4313      	orrs	r3, r2
 8004326:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004334:	691a      	ldr	r2, [r3, #16]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800433e:	69b9      	ldr	r1, [r7, #24]
 8004340:	0148      	lsls	r0, r1, #5
 8004342:	69f9      	ldr	r1, [r7, #28]
 8004344:	4401      	add	r1, r0
 8004346:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800434a:	4313      	orrs	r3, r2
 800434c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	791b      	ldrb	r3, [r3, #4]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d11f      	bne.n	8004396 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	0151      	lsls	r1, r2, #5
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	440a      	add	r2, r1
 800436c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004370:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004374:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	0151      	lsls	r1, r2, #5
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	440a      	add	r2, r1
 800438c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004390:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004394:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d14b      	bne.n	8004434 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d009      	beq.n	80043b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b0:	461a      	mov	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	791b      	ldrb	r3, [r3, #4]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d128      	bne.n	8004412 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d110      	bne.n	80043f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	0151      	lsls	r1, r2, #5
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	440a      	add	r2, r1
 80043e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	e00f      	b.n	8004412 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	0151      	lsls	r1, r2, #5
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	440a      	add	r2, r1
 8004408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800440c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004410:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	0151      	lsls	r1, r2, #5
 8004424:	69fa      	ldr	r2, [r7, #28]
 8004426:	440a      	add	r2, r1
 8004428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800442c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	e133      	b.n	800469c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	4413      	add	r3, r2
 800443c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	0151      	lsls	r1, r2, #5
 8004446:	69fa      	ldr	r2, [r7, #28]
 8004448:	440a      	add	r2, r1
 800444a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800444e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004452:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	791b      	ldrb	r3, [r3, #4]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d015      	beq.n	8004488 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 811b 	beq.w	800469c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	2101      	movs	r1, #1
 8004478:	fa01 f303 	lsl.w	r3, r1, r3
 800447c:	69f9      	ldr	r1, [r7, #28]
 800447e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004482:	4313      	orrs	r3, r2
 8004484:	634b      	str	r3, [r1, #52]	; 0x34
 8004486:	e109      	b.n	800469c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d110      	bne.n	80044ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	0151      	lsls	r1, r2, #5
 80044aa:	69fa      	ldr	r2, [r7, #28]
 80044ac:	440a      	add	r2, r1
 80044ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	e00f      	b.n	80044da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	0151      	lsls	r1, r2, #5
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	440a      	add	r2, r1
 80044d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	6919      	ldr	r1, [r3, #16]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	781a      	ldrb	r2, [r3, #0]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	b298      	uxth	r0, r3
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	4603      	mov	r3, r0
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 fade 	bl	8004ab0 <USB_WritePacket>
 80044f4:	e0d2      	b.n	800469c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	0151      	lsls	r1, r2, #5
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	440a      	add	r2, r1
 800450c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004510:	0cdb      	lsrs	r3, r3, #19
 8004512:	04db      	lsls	r3, r3, #19
 8004514:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	0151      	lsls	r1, r2, #5
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	440a      	add	r2, r1
 800452c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004530:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004534:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004538:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d126      	bne.n	8004590 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454e:	691a      	ldr	r2, [r3, #16]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004558:	69b9      	ldr	r1, [r7, #24]
 800455a:	0148      	lsls	r0, r1, #5
 800455c:	69f9      	ldr	r1, [r7, #28]
 800455e:	4401      	add	r1, r0
 8004560:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004564:	4313      	orrs	r3, r2
 8004566:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	0151      	lsls	r1, r2, #5
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	440a      	add	r2, r1
 800457e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004582:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004586:	6113      	str	r3, [r2, #16]
 8004588:	e03a      	b.n	8004600 <USB_EPStartXfer+0x3e4>
 800458a:	bf00      	nop
 800458c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	699a      	ldr	r2, [r3, #24]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	4413      	add	r3, r2
 800459a:	1e5a      	subs	r2, r3, #1
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	8afa      	ldrh	r2, [r7, #22]
 80045ac:	fb03 f202 	mul.w	r2, r3, r2
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	8afb      	ldrh	r3, [r7, #22]
 80045c4:	04d9      	lsls	r1, r3, #19
 80045c6:	4b38      	ldr	r3, [pc, #224]	; (80046a8 <USB_EPStartXfer+0x48c>)
 80045c8:	400b      	ands	r3, r1
 80045ca:	69b9      	ldr	r1, [r7, #24]
 80045cc:	0148      	lsls	r0, r1, #5
 80045ce:	69f9      	ldr	r1, [r7, #28]
 80045d0:	4401      	add	r1, r0
 80045d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045d6:	4313      	orrs	r3, r2
 80045d8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f0:	69b9      	ldr	r1, [r7, #24]
 80045f2:	0148      	lsls	r0, r1, #5
 80045f4:	69f9      	ldr	r1, [r7, #28]
 80045f6:	4401      	add	r1, r0
 80045f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045fc:	4313      	orrs	r3, r2
 80045fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d10d      	bne.n	8004622 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	6919      	ldr	r1, [r3, #16]
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461e:	460a      	mov	r2, r1
 8004620:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	791b      	ldrb	r3, [r3, #4]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d128      	bne.n	800467c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d110      	bne.n	800465c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	0151      	lsls	r1, r2, #5
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	440a      	add	r2, r1
 8004650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004654:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	e00f      	b.n	800467c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	440a      	add	r2, r1
 8004672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	0151      	lsls	r1, r2, #5
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	440a      	add	r2, r1
 8004692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004696:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800469a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3720      	adds	r7, #32
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	1ff80000 	.word	0x1ff80000

080046ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	4613      	mov	r3, r2
 80046b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	785b      	ldrb	r3, [r3, #1]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	f040 80ce 	bne.w	800486a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d132      	bne.n	800473c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	0151      	lsls	r1, r2, #5
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	440a      	add	r2, r1
 80046ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	0151      	lsls	r1, r2, #5
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	440a      	add	r2, r1
 8004710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004714:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004718:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	0151      	lsls	r1, r2, #5
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	440a      	add	r2, r1
 8004730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004734:	0cdb      	lsrs	r3, r3, #19
 8004736:	04db      	lsls	r3, r3, #19
 8004738:	6113      	str	r3, [r2, #16]
 800473a:	e04e      	b.n	80047da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	0151      	lsls	r1, r2, #5
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	440a      	add	r2, r1
 8004752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004756:	0cdb      	lsrs	r3, r3, #19
 8004758:	04db      	lsls	r3, r3, #19
 800475a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	0151      	lsls	r1, r2, #5
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	440a      	add	r2, r1
 8004772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004776:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800477a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800477e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	699a      	ldr	r2, [r3, #24]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	429a      	cmp	r2, r3
 800478a:	d903      	bls.n	8004794 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	0151      	lsls	r1, r2, #5
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	440a      	add	r2, r1
 80047aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c0:	691a      	ldr	r2, [r3, #16]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ca:	6939      	ldr	r1, [r7, #16]
 80047cc:	0148      	lsls	r0, r1, #5
 80047ce:	6979      	ldr	r1, [r7, #20]
 80047d0:	4401      	add	r1, r0
 80047d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047d6:	4313      	orrs	r3, r2
 80047d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d11e      	bne.n	800481e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d009      	beq.n	80047fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f4:	461a      	mov	r2, r3
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	0151      	lsls	r1, r2, #5
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	440a      	add	r2, r1
 8004812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004816:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	e097      	b.n	800494e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	0151      	lsls	r1, r2, #5
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	440a      	add	r2, r1
 8004834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004838:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800483c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 8083 	beq.w	800494e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	2101      	movs	r1, #1
 800485a:	fa01 f303 	lsl.w	r3, r1, r3
 800485e:	6979      	ldr	r1, [r7, #20]
 8004860:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004864:	4313      	orrs	r3, r2
 8004866:	634b      	str	r3, [r1, #52]	; 0x34
 8004868:	e071      	b.n	800494e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	0151      	lsls	r1, r2, #5
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	440a      	add	r2, r1
 8004880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004884:	0cdb      	lsrs	r3, r3, #19
 8004886:	04db      	lsls	r3, r3, #19
 8004888:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	4413      	add	r3, r2
 8004892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	0151      	lsls	r1, r2, #5
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	440a      	add	r2, r1
 80048a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	0151      	lsls	r1, r2, #5
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	440a      	add	r2, r1
 80048dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048fc:	6939      	ldr	r1, [r7, #16]
 80048fe:	0148      	lsls	r0, r1, #5
 8004900:	6979      	ldr	r1, [r7, #20]
 8004902:	4401      	add	r1, r0
 8004904:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004908:	4313      	orrs	r3, r2
 800490a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800490c:	79fb      	ldrb	r3, [r7, #7]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d10d      	bne.n	800492e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d009      	beq.n	800492e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	6919      	ldr	r1, [r3, #16]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492a:	460a      	mov	r2, r1
 800492c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	0151      	lsls	r1, r2, #5
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	440a      	add	r2, r1
 8004944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004948:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800494c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	371c      	adds	r7, #28
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	785b      	ldrb	r3, [r3, #1]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d14a      	bne.n	8004a10 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800498e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004992:	f040 8086 	bne.w	8004aa2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	7812      	ldrb	r2, [r2, #0]
 80049aa:	0151      	lsls	r1, r2, #5
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	440a      	add	r2, r1
 80049b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	7812      	ldrb	r2, [r2, #0]
 80049ce:	0151      	lsls	r1, r2, #5
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	440a      	add	r2, r1
 80049d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3301      	adds	r3, #1
 80049e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d902      	bls.n	80049f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	75fb      	strb	r3, [r7, #23]
          break;
 80049f2:	e056      	b.n	8004aa2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a0c:	d0e7      	beq.n	80049de <USB_EPStopXfer+0x82>
 8004a0e:	e048      	b.n	8004aa2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a28:	d13b      	bne.n	8004aa2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	7812      	ldrb	r2, [r2, #0]
 8004a3e:	0151      	lsls	r1, r2, #5
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	440a      	add	r2, r1
 8004a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a4c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	7812      	ldrb	r2, [r2, #0]
 8004a62:	0151      	lsls	r1, r2, #5
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	440a      	add	r2, r1
 8004a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3301      	adds	r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d902      	bls.n	8004a88 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	75fb      	strb	r3, [r7, #23]
          break;
 8004a86:	e00c      	b.n	8004aa2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aa0:	d0e7      	beq.n	8004a72 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	371c      	adds	r7, #28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b089      	sub	sp, #36	; 0x24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	4611      	mov	r1, r2
 8004abc:	461a      	mov	r2, r3
 8004abe:	460b      	mov	r3, r1
 8004ac0:	71fb      	strb	r3, [r7, #7]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004ace:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d123      	bne.n	8004b1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ad6:	88bb      	ldrh	r3, [r7, #4]
 8004ad8:	3303      	adds	r3, #3
 8004ada:	089b      	lsrs	r3, r3, #2
 8004adc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61bb      	str	r3, [r7, #24]
 8004ae2:	e018      	b.n	8004b16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	031a      	lsls	r2, r3, #12
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af0:	461a      	mov	r2, r3
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	3301      	adds	r3, #1
 8004afc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	3301      	adds	r3, #1
 8004b02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	3301      	adds	r3, #1
 8004b08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	3301      	adds	r3, #1
 8004b14:	61bb      	str	r3, [r7, #24]
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d3e2      	bcc.n	8004ae4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3724      	adds	r7, #36	; 0x24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b08b      	sub	sp, #44	; 0x2c
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	4613      	mov	r3, r2
 8004b38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	089b      	lsrs	r3, r3, #2
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	f003 0303 	and.w	r3, r3, #3
 8004b50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004b52:	2300      	movs	r3, #0
 8004b54:	623b      	str	r3, [r7, #32]
 8004b56:	e014      	b.n	8004b82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	3301      	adds	r3, #1
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	3301      	adds	r3, #1
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	3301      	adds	r3, #1
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	623b      	str	r3, [r7, #32]
 8004b82:	6a3a      	ldr	r2, [r7, #32]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d3e6      	bcc.n	8004b58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004b8a:	8bfb      	ldrh	r3, [r7, #30]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d01e      	beq.n	8004bce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f107 0310 	add.w	r3, r7, #16
 8004ba0:	6812      	ldr	r2, [r2, #0]
 8004ba2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	701a      	strb	r2, [r3, #0]
      i++;
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	623b      	str	r3, [r7, #32]
      pDest++;
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004bc2:	8bfb      	ldrh	r3, [r7, #30]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004bc8:	8bfb      	ldrh	r3, [r7, #30]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1ea      	bne.n	8004ba4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	372c      	adds	r7, #44	; 0x2c
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	785b      	ldrb	r3, [r3, #1]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d12c      	bne.n	8004c52 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	db12      	blt.n	8004c30 <USB_EPSetStall+0x54>
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00f      	beq.n	8004c30 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	0151      	lsls	r1, r2, #5
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	440a      	add	r2, r1
 8004c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c2e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	0151      	lsls	r1, r2, #5
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	440a      	add	r2, r1
 8004c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	e02b      	b.n	8004caa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	db12      	blt.n	8004c8a <USB_EPSetStall+0xae>
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00f      	beq.n	8004c8a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	0151      	lsls	r1, r2, #5
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	440a      	add	r2, r1
 8004c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c88:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	0151      	lsls	r1, r2, #5
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	440a      	add	r2, r1
 8004ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ca4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ca8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	785b      	ldrb	r3, [r3, #1]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d128      	bne.n	8004d26 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	0151      	lsls	r1, r2, #5
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	440a      	add	r2, r1
 8004cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cf2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	791b      	ldrb	r3, [r3, #4]
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d003      	beq.n	8004d04 <USB_EPClearStall+0x4c>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	791b      	ldrb	r3, [r3, #4]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d138      	bne.n	8004d76 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	0151      	lsls	r1, r2, #5
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	440a      	add	r2, r1
 8004d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	e027      	b.n	8004d76 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	0151      	lsls	r1, r2, #5
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	440a      	add	r2, r1
 8004d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	791b      	ldrb	r3, [r3, #4]
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d003      	beq.n	8004d56 <USB_EPClearStall+0x9e>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	791b      	ldrb	r3, [r3, #4]
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d10f      	bne.n	8004d76 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	0151      	lsls	r1, r2, #5
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	440a      	add	r2, r1
 8004d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d74:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004da2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004da6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004db8:	68f9      	ldr	r1, [r7, #12]
 8004dba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004dea:	f023 0303 	bic.w	r3, r3, #3
 8004dee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dfe:	f023 0302 	bic.w	r3, r3, #2
 8004e02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b085      	sub	sp, #20
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e2c:	f023 0303 	bic.w	r3, r3, #3
 8004e30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e40:	f043 0302 	orr.w	r3, r3, #2
 8004e44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b085      	sub	sp, #20
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	0c1b      	lsrs	r3, r3, #16
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	b29b      	uxth	r3, r3
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b085      	sub	sp, #20
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	460b      	mov	r3, r1
 8004eec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004ef2:	78fb      	ldrb	r3, [r7, #3]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f10:	68bb      	ldr	r3, [r7, #8]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b087      	sub	sp, #28
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	460b      	mov	r3, r1
 8004f28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f40:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	f003 030f 	and.w	r3, r3, #15
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4e:	01db      	lsls	r3, r3, #7
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	f003 0301 	and.w	r3, r3, #1
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b085      	sub	sp, #20
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004fb4:	f023 0307 	bic.w	r3, r3, #7
 8004fb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	333c      	adds	r3, #60	; 0x3c
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4a26      	ldr	r2, [pc, #152]	; (8005094 <USB_EP0_OutStart+0xb8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d90a      	bls.n	8005016 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800500c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005010:	d101      	bne.n	8005016 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	e037      	b.n	8005086 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501c:	461a      	mov	r2, r3
 800501e:	2300      	movs	r3, #0
 8005020:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005030:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005034:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005044:	f043 0318 	orr.w	r3, r3, #24
 8005048:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005058:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800505c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800505e:	7afb      	ldrb	r3, [r7, #11]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d10f      	bne.n	8005084 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506a:	461a      	mov	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800507e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005082:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	371c      	adds	r7, #28
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	4f54300a 	.word	0x4f54300a

08005098 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3301      	adds	r3, #1
 80050a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4a13      	ldr	r2, [pc, #76]	; (80050fc <USB_CoreReset+0x64>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d901      	bls.n	80050b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e01b      	b.n	80050ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	daf2      	bge.n	80050a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f043 0201 	orr.w	r2, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3301      	adds	r3, #1
 80050d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4a09      	ldr	r2, [pc, #36]	; (80050fc <USB_CoreReset+0x64>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d901      	bls.n	80050e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e006      	b.n	80050ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d0f0      	beq.n	80050ce <USB_CoreReset+0x36>

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	00030d40 	.word	0x00030d40

08005100 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800510c:	2010      	movs	r0, #16
 800510e:	f002 f8f9 	bl	8007304 <USBD_static_malloc>
 8005112:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d109      	bne.n	800512e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	32b0      	adds	r2, #176	; 0xb0
 8005124:	2100      	movs	r1, #0
 8005126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800512a:	2302      	movs	r3, #2
 800512c:	e048      	b.n	80051c0 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	32b0      	adds	r2, #176	; 0xb0
 8005138:	68f9      	ldr	r1, [r7, #12]
 800513a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	32b0      	adds	r2, #176	; 0xb0
 8005148:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	7c1b      	ldrb	r3, [r3, #16]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10d      	bne.n	8005176 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800515a:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <USBD_HID_Init+0xc8>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	f003 020f 	and.w	r2, r3, #15
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	4613      	mov	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	3326      	adds	r3, #38	; 0x26
 8005170:	2207      	movs	r2, #7
 8005172:	801a      	strh	r2, [r3, #0]
 8005174:	e00c      	b.n	8005190 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005176:	4b14      	ldr	r3, [pc, #80]	; (80051c8 <USBD_HID_Init+0xc8>)
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	f003 020f 	and.w	r2, r3, #15
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	4613      	mov	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	440b      	add	r3, r1
 800518a:	3326      	adds	r3, #38	; 0x26
 800518c:	220a      	movs	r2, #10
 800518e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005190:	4b0d      	ldr	r3, [pc, #52]	; (80051c8 <USBD_HID_Init+0xc8>)
 8005192:	7819      	ldrb	r1, [r3, #0]
 8005194:	2304      	movs	r3, #4
 8005196:	2203      	movs	r2, #3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f001 ffa2 	bl	80070e2 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800519e:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <USBD_HID_Init+0xc8>)
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	f003 020f 	and.w	r2, r3, #15
 80051a6:	6879      	ldr	r1, [r7, #4]
 80051a8:	4613      	mov	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	440b      	add	r3, r1
 80051b2:	3324      	adds	r3, #36	; 0x24
 80051b4:	2201      	movs	r2, #1
 80051b6:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	200000ca 	.word	0x200000ca

080051cc <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80051d8:	4b1f      	ldr	r3, [pc, #124]	; (8005258 <USBD_HID_DeInit+0x8c>)
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	4619      	mov	r1, r3
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f001 ffa5 	bl	800712e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80051e4:	4b1c      	ldr	r3, [pc, #112]	; (8005258 <USBD_HID_DeInit+0x8c>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	f003 020f 	and.w	r2, r3, #15
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	440b      	add	r3, r1
 80051f8:	3324      	adds	r3, #36	; 0x24
 80051fa:	2200      	movs	r2, #0
 80051fc:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80051fe:	4b16      	ldr	r3, [pc, #88]	; (8005258 <USBD_HID_DeInit+0x8c>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	f003 020f 	and.w	r2, r3, #15
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	440b      	add	r3, r1
 8005212:	3326      	adds	r3, #38	; 0x26
 8005214:	2200      	movs	r2, #0
 8005216:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	32b0      	adds	r2, #176	; 0xb0
 8005222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d011      	beq.n	800524e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	32b0      	adds	r2, #176	; 0xb0
 8005234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005238:	4618      	mov	r0, r3
 800523a:	f002 f871 	bl	8007320 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	32b0      	adds	r2, #176	; 0xb0
 8005248:	2100      	movs	r1, #0
 800524a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	200000ca 	.word	0x200000ca

0800525c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	32b0      	adds	r2, #176	; 0xb0
 8005270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005274:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005284:	2303      	movs	r3, #3
 8005286:	e0e8      	b.n	800545a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005290:	2b00      	cmp	r3, #0
 8005292:	d046      	beq.n	8005322 <USBD_HID_Setup+0xc6>
 8005294:	2b20      	cmp	r3, #32
 8005296:	f040 80d8 	bne.w	800544a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	785b      	ldrb	r3, [r3, #1]
 800529e:	3b02      	subs	r3, #2
 80052a0:	2b09      	cmp	r3, #9
 80052a2:	d836      	bhi.n	8005312 <USBD_HID_Setup+0xb6>
 80052a4:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <USBD_HID_Setup+0x50>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	08005303 	.word	0x08005303
 80052b0:	080052e3 	.word	0x080052e3
 80052b4:	08005313 	.word	0x08005313
 80052b8:	08005313 	.word	0x08005313
 80052bc:	08005313 	.word	0x08005313
 80052c0:	08005313 	.word	0x08005313
 80052c4:	08005313 	.word	0x08005313
 80052c8:	08005313 	.word	0x08005313
 80052cc:	080052f1 	.word	0x080052f1
 80052d0:	080052d5 	.word	0x080052d5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	885b      	ldrh	r3, [r3, #2]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	461a      	mov	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	601a      	str	r2, [r3, #0]
          break;
 80052e0:	e01e      	b.n	8005320 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2201      	movs	r2, #1
 80052e6:	4619      	mov	r1, r3
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f001 fba5 	bl	8006a38 <USBD_CtlSendData>
          break;
 80052ee:	e017      	b.n	8005320 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	885b      	ldrh	r3, [r3, #2]
 80052f4:	0a1b      	lsrs	r3, r3, #8
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	461a      	mov	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	605a      	str	r2, [r3, #4]
          break;
 8005300:	e00e      	b.n	8005320 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3304      	adds	r3, #4
 8005306:	2201      	movs	r2, #1
 8005308:	4619      	mov	r1, r3
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f001 fb94 	bl	8006a38 <USBD_CtlSendData>
          break;
 8005310:	e006      	b.n	8005320 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005312:	6839      	ldr	r1, [r7, #0]
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f001 fb1e 	bl	8006956 <USBD_CtlError>
          ret = USBD_FAIL;
 800531a:	2303      	movs	r3, #3
 800531c:	75fb      	strb	r3, [r7, #23]
          break;
 800531e:	bf00      	nop
      }
      break;
 8005320:	e09a      	b.n	8005458 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	785b      	ldrb	r3, [r3, #1]
 8005326:	2b0b      	cmp	r3, #11
 8005328:	f200 8086 	bhi.w	8005438 <USBD_HID_Setup+0x1dc>
 800532c:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <USBD_HID_Setup+0xd8>)
 800532e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005332:	bf00      	nop
 8005334:	08005365 	.word	0x08005365
 8005338:	08005447 	.word	0x08005447
 800533c:	08005439 	.word	0x08005439
 8005340:	08005439 	.word	0x08005439
 8005344:	08005439 	.word	0x08005439
 8005348:	08005439 	.word	0x08005439
 800534c:	0800538f 	.word	0x0800538f
 8005350:	08005439 	.word	0x08005439
 8005354:	08005439 	.word	0x08005439
 8005358:	08005439 	.word	0x08005439
 800535c:	080053e7 	.word	0x080053e7
 8005360:	08005411 	.word	0x08005411
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b03      	cmp	r3, #3
 800536e:	d107      	bne.n	8005380 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005370:	f107 030a 	add.w	r3, r7, #10
 8005374:	2202      	movs	r2, #2
 8005376:	4619      	mov	r1, r3
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f001 fb5d 	bl	8006a38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800537e:	e063      	b.n	8005448 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005380:	6839      	ldr	r1, [r7, #0]
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f001 fae7 	bl	8006956 <USBD_CtlError>
            ret = USBD_FAIL;
 8005388:	2303      	movs	r3, #3
 800538a:	75fb      	strb	r3, [r7, #23]
          break;
 800538c:	e05c      	b.n	8005448 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	885b      	ldrh	r3, [r3, #2]
 8005392:	0a1b      	lsrs	r3, r3, #8
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b22      	cmp	r3, #34	; 0x22
 8005398:	d108      	bne.n	80053ac <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	88db      	ldrh	r3, [r3, #6]
 800539e:	2b4a      	cmp	r3, #74	; 0x4a
 80053a0:	bf28      	it	cs
 80053a2:	234a      	movcs	r3, #74	; 0x4a
 80053a4:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80053a6:	4b2f      	ldr	r3, [pc, #188]	; (8005464 <USBD_HID_Setup+0x208>)
 80053a8:	613b      	str	r3, [r7, #16]
 80053aa:	e015      	b.n	80053d8 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	885b      	ldrh	r3, [r3, #2]
 80053b0:	0a1b      	lsrs	r3, r3, #8
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b21      	cmp	r3, #33	; 0x21
 80053b6:	d108      	bne.n	80053ca <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80053b8:	4b2b      	ldr	r3, [pc, #172]	; (8005468 <USBD_HID_Setup+0x20c>)
 80053ba:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	88db      	ldrh	r3, [r3, #6]
 80053c0:	2b09      	cmp	r3, #9
 80053c2:	bf28      	it	cs
 80053c4:	2309      	movcs	r3, #9
 80053c6:	82bb      	strh	r3, [r7, #20]
 80053c8:	e006      	b.n	80053d8 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80053ca:	6839      	ldr	r1, [r7, #0]
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f001 fac2 	bl	8006956 <USBD_CtlError>
            ret = USBD_FAIL;
 80053d2:	2303      	movs	r3, #3
 80053d4:	75fb      	strb	r3, [r7, #23]
            break;
 80053d6:	e037      	b.n	8005448 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80053d8:	8abb      	ldrh	r3, [r7, #20]
 80053da:	461a      	mov	r2, r3
 80053dc:	6939      	ldr	r1, [r7, #16]
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f001 fb2a 	bl	8006a38 <USBD_CtlSendData>
          break;
 80053e4:	e030      	b.n	8005448 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	d107      	bne.n	8005402 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	3308      	adds	r3, #8
 80053f6:	2201      	movs	r2, #1
 80053f8:	4619      	mov	r1, r3
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f001 fb1c 	bl	8006a38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005400:	e022      	b.n	8005448 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005402:	6839      	ldr	r1, [r7, #0]
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f001 faa6 	bl	8006956 <USBD_CtlError>
            ret = USBD_FAIL;
 800540a:	2303      	movs	r3, #3
 800540c:	75fb      	strb	r3, [r7, #23]
          break;
 800540e:	e01b      	b.n	8005448 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b03      	cmp	r3, #3
 800541a:	d106      	bne.n	800542a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	885b      	ldrh	r3, [r3, #2]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	461a      	mov	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005428:	e00e      	b.n	8005448 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800542a:	6839      	ldr	r1, [r7, #0]
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f001 fa92 	bl	8006956 <USBD_CtlError>
            ret = USBD_FAIL;
 8005432:	2303      	movs	r3, #3
 8005434:	75fb      	strb	r3, [r7, #23]
          break;
 8005436:	e007      	b.n	8005448 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005438:	6839      	ldr	r1, [r7, #0]
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f001 fa8b 	bl	8006956 <USBD_CtlError>
          ret = USBD_FAIL;
 8005440:	2303      	movs	r3, #3
 8005442:	75fb      	strb	r3, [r7, #23]
          break;
 8005444:	e000      	b.n	8005448 <USBD_HID_Setup+0x1ec>
          break;
 8005446:	bf00      	nop
      }
      break;
 8005448:	e006      	b.n	8005458 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800544a:	6839      	ldr	r1, [r7, #0]
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f001 fa82 	bl	8006956 <USBD_CtlError>
      ret = USBD_FAIL;
 8005452:	2303      	movs	r3, #3
 8005454:	75fb      	strb	r3, [r7, #23]
      break;
 8005456:	bf00      	nop
  }

  return (uint8_t)ret;
 8005458:	7dfb      	ldrb	r3, [r7, #23]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20000080 	.word	0x20000080
 8005468:	20000068 	.word	0x20000068

0800546c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005474:	2181      	movs	r1, #129	; 0x81
 8005476:	4809      	ldr	r0, [pc, #36]	; (800549c <USBD_HID_GetFSCfgDesc+0x30>)
 8005478:	f000 fc35 	bl	8005ce6 <USBD_GetEpDesc>
 800547c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	220a      	movs	r2, #10
 8005488:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2222      	movs	r2, #34	; 0x22
 800548e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005490:	4b02      	ldr	r3, [pc, #8]	; (800549c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20000044 	.word	0x20000044

080054a0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80054a8:	2181      	movs	r1, #129	; 0x81
 80054aa:	4809      	ldr	r0, [pc, #36]	; (80054d0 <USBD_HID_GetHSCfgDesc+0x30>)
 80054ac:	f000 fc1b 	bl	8005ce6 <USBD_GetEpDesc>
 80054b0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2207      	movs	r2, #7
 80054bc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2222      	movs	r2, #34	; 0x22
 80054c2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80054c4:	4b02      	ldr	r3, [pc, #8]	; (80054d0 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20000044 	.word	0x20000044

080054d4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80054dc:	2181      	movs	r1, #129	; 0x81
 80054de:	4809      	ldr	r0, [pc, #36]	; (8005504 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80054e0:	f000 fc01 	bl	8005ce6 <USBD_GetEpDesc>
 80054e4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	220a      	movs	r2, #10
 80054f0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2222      	movs	r2, #34	; 0x22
 80054f6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80054f8:	4b02      	ldr	r3, [pc, #8]	; (8005504 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20000044 	.word	0x20000044

08005508 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	32b0      	adds	r2, #176	; 0xb0
 800551e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005522:	2200      	movs	r2, #0
 8005524:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	220a      	movs	r2, #10
 8005540:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005542:	4b03      	ldr	r3, [pc, #12]	; (8005550 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005544:	4618      	mov	r0, r3
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	20000074 	.word	0x20000074

08005554 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	4613      	mov	r3, r2
 8005560:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005568:	2303      	movs	r3, #3
 800556a:	e01f      	b.n	80055ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	79fa      	ldrb	r2, [r7, #7]
 800559e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f001 fd37 	bl	8007014 <USBD_LL_Init>
 80055a6:	4603      	mov	r3, r0
 80055a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80055aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80055be:	2300      	movs	r3, #0
 80055c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e025      	b.n	8005618 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	32ae      	adds	r2, #174	; 0xae
 80055de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00f      	beq.n	8005608 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	32ae      	adds	r2, #174	; 0xae
 80055f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	f107 020e 	add.w	r2, r7, #14
 80055fc:	4610      	mov	r0, r2
 80055fe:	4798      	blx	r3
 8005600:	4602      	mov	r2, r0
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f001 fd3f 	bl	80070ac <USBD_LL_Start>
 800562e:	4603      	mov	r3, r0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005640:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005642:	4618      	mov	r0, r3
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	460b      	mov	r3, r1
 8005658:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800565a:	2300      	movs	r3, #0
 800565c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005664:	2b00      	cmp	r3, #0
 8005666:	d009      	beq.n	800567c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	78fa      	ldrb	r2, [r7, #3]
 8005672:	4611      	mov	r1, r2
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	4798      	blx	r3
 8005678:	4603      	mov	r3, r0
 800567a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800567c:	7bfb      	ldrb	r3, [r7, #15]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	460b      	mov	r3, r1
 8005690:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	78fa      	ldrb	r2, [r7, #3]
 80056a0:	4611      	mov	r1, r2
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	4798      	blx	r3
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80056ac:	2303      	movs	r3, #3
 80056ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b084      	sub	sp, #16
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056ca:	6839      	ldr	r1, [r7, #0]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f001 f908 	bl	80068e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80056e0:	461a      	mov	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056ee:	f003 031f 	and.w	r3, r3, #31
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d01a      	beq.n	800572c <USBD_LL_SetupStage+0x72>
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d822      	bhi.n	8005740 <USBD_LL_SetupStage+0x86>
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <USBD_LL_SetupStage+0x4a>
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d00a      	beq.n	8005718 <USBD_LL_SetupStage+0x5e>
 8005702:	e01d      	b.n	8005740 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fb5f 	bl	8005dd0 <USBD_StdDevReq>
 8005712:	4603      	mov	r3, r0
 8005714:	73fb      	strb	r3, [r7, #15]
      break;
 8005716:	e020      	b.n	800575a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800571e:	4619      	mov	r1, r3
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fbc7 	bl	8005eb4 <USBD_StdItfReq>
 8005726:	4603      	mov	r3, r0
 8005728:	73fb      	strb	r3, [r7, #15]
      break;
 800572a:	e016      	b.n	800575a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fc29 	bl	8005f8c <USBD_StdEPReq>
 800573a:	4603      	mov	r3, r0
 800573c:	73fb      	strb	r3, [r7, #15]
      break;
 800573e:	e00c      	b.n	800575a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005746:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800574a:	b2db      	uxtb	r3, r3
 800574c:	4619      	mov	r1, r3
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f001 fd0c 	bl	800716c <USBD_LL_StallEP>
 8005754:	4603      	mov	r3, r0
 8005756:	73fb      	strb	r3, [r7, #15]
      break;
 8005758:	bf00      	nop
  }

  return ret;
 800575a:	7bfb      	ldrb	r3, [r7, #15]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	460b      	mov	r3, r1
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005776:	7afb      	ldrb	r3, [r7, #11]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d16e      	bne.n	800585a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005782:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800578a:	2b03      	cmp	r3, #3
 800578c:	f040 8098 	bne.w	80058c0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	429a      	cmp	r2, r3
 800579a:	d913      	bls.n	80057c4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	1ad2      	subs	r2, r2, r3
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	4293      	cmp	r3, r2
 80057b4:	bf28      	it	cs
 80057b6:	4613      	movcs	r3, r2
 80057b8:	461a      	mov	r2, r3
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f001 f967 	bl	8006a90 <USBD_CtlContinueRx>
 80057c2:	e07d      	b.n	80058c0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80057ca:	f003 031f 	and.w	r3, r3, #31
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d014      	beq.n	80057fc <USBD_LL_DataOutStage+0x98>
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d81d      	bhi.n	8005812 <USBD_LL_DataOutStage+0xae>
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <USBD_LL_DataOutStage+0x7c>
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d003      	beq.n	80057e6 <USBD_LL_DataOutStage+0x82>
 80057de:	e018      	b.n	8005812 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	75bb      	strb	r3, [r7, #22]
            break;
 80057e4:	e018      	b.n	8005818 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	4619      	mov	r1, r3
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 fa5e 	bl	8005cb2 <USBD_CoreFindIF>
 80057f6:	4603      	mov	r3, r0
 80057f8:	75bb      	strb	r3, [r7, #22]
            break;
 80057fa:	e00d      	b.n	8005818 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005802:	b2db      	uxtb	r3, r3
 8005804:	4619      	mov	r1, r3
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f000 fa60 	bl	8005ccc <USBD_CoreFindEP>
 800580c:	4603      	mov	r3, r0
 800580e:	75bb      	strb	r3, [r7, #22]
            break;
 8005810:	e002      	b.n	8005818 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	75bb      	strb	r3, [r7, #22]
            break;
 8005816:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005818:	7dbb      	ldrb	r3, [r7, #22]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d119      	bne.n	8005852 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b03      	cmp	r3, #3
 8005828:	d113      	bne.n	8005852 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800582a:	7dba      	ldrb	r2, [r7, #22]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	32ae      	adds	r2, #174	; 0xae
 8005830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00b      	beq.n	8005852 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800583a:	7dba      	ldrb	r2, [r7, #22]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005842:	7dba      	ldrb	r2, [r7, #22]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	32ae      	adds	r2, #174	; 0xae
 8005848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f001 f92d 	bl	8006ab2 <USBD_CtlSendStatus>
 8005858:	e032      	b.n	80058c0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800585a:	7afb      	ldrb	r3, [r7, #11]
 800585c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005860:	b2db      	uxtb	r3, r3
 8005862:	4619      	mov	r1, r3
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 fa31 	bl	8005ccc <USBD_CoreFindEP>
 800586a:	4603      	mov	r3, r0
 800586c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800586e:	7dbb      	ldrb	r3, [r7, #22]
 8005870:	2bff      	cmp	r3, #255	; 0xff
 8005872:	d025      	beq.n	80058c0 <USBD_LL_DataOutStage+0x15c>
 8005874:	7dbb      	ldrb	r3, [r7, #22]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d122      	bne.n	80058c0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b03      	cmp	r3, #3
 8005884:	d117      	bne.n	80058b6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005886:	7dba      	ldrb	r2, [r7, #22]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	32ae      	adds	r2, #174	; 0xae
 800588c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00f      	beq.n	80058b6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005896:	7dba      	ldrb	r2, [r7, #22]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800589e:	7dba      	ldrb	r2, [r7, #22]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	32ae      	adds	r2, #174	; 0xae
 80058a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	7afa      	ldrb	r2, [r7, #11]
 80058ac:	4611      	mov	r1, r2
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	4798      	blx	r3
 80058b2:	4603      	mov	r3, r0
 80058b4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80058b6:	7dfb      	ldrb	r3, [r7, #23]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80058bc:	7dfb      	ldrb	r3, [r7, #23]
 80058be:	e000      	b.n	80058c2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b086      	sub	sp, #24
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	460b      	mov	r3, r1
 80058d4:	607a      	str	r2, [r7, #4]
 80058d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80058d8:	7afb      	ldrb	r3, [r7, #11]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d16f      	bne.n	80059be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3314      	adds	r3, #20
 80058e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d15a      	bne.n	80059a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	689a      	ldr	r2, [r3, #8]
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d914      	bls.n	8005924 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	1ad2      	subs	r2, r2, r3
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	461a      	mov	r2, r3
 800590e:	6879      	ldr	r1, [r7, #4]
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f001 f8ac 	bl	8006a6e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005916:	2300      	movs	r3, #0
 8005918:	2200      	movs	r2, #0
 800591a:	2100      	movs	r1, #0
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f001 fccf 	bl	80072c0 <USBD_LL_PrepareReceive>
 8005922:	e03f      	b.n	80059a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	429a      	cmp	r2, r3
 800592e:	d11c      	bne.n	800596a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005938:	429a      	cmp	r2, r3
 800593a:	d316      	bcc.n	800596a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005946:	429a      	cmp	r2, r3
 8005948:	d20f      	bcs.n	800596a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800594a:	2200      	movs	r2, #0
 800594c:	2100      	movs	r1, #0
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f001 f88d 	bl	8006a6e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800595c:	2300      	movs	r3, #0
 800595e:	2200      	movs	r2, #0
 8005960:	2100      	movs	r1, #0
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f001 fcac 	bl	80072c0 <USBD_LL_PrepareReceive>
 8005968:	e01c      	b.n	80059a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b03      	cmp	r3, #3
 8005974:	d10f      	bne.n	8005996 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d009      	beq.n	8005996 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005996:	2180      	movs	r1, #128	; 0x80
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f001 fbe7 	bl	800716c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f001 f89a 	bl	8006ad8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d03a      	beq.n	8005a24 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f7ff fe42 	bl	8005638 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80059bc:	e032      	b.n	8005a24 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80059be:	7afb      	ldrb	r3, [r7, #11]
 80059c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	4619      	mov	r1, r3
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 f97f 	bl	8005ccc <USBD_CoreFindEP>
 80059ce:	4603      	mov	r3, r0
 80059d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
 80059d4:	2bff      	cmp	r3, #255	; 0xff
 80059d6:	d025      	beq.n	8005a24 <USBD_LL_DataInStage+0x15a>
 80059d8:	7dfb      	ldrb	r3, [r7, #23]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d122      	bne.n	8005a24 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d11c      	bne.n	8005a24 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80059ea:	7dfa      	ldrb	r2, [r7, #23]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	32ae      	adds	r2, #174	; 0xae
 80059f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d014      	beq.n	8005a24 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80059fa:	7dfa      	ldrb	r2, [r7, #23]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005a02:	7dfa      	ldrb	r2, [r7, #23]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	32ae      	adds	r2, #174	; 0xae
 8005a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	7afa      	ldrb	r2, [r7, #11]
 8005a10:	4611      	mov	r1, r2
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	4798      	blx	r3
 8005a16:	4603      	mov	r3, r0
 8005a18:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005a1a:	7dbb      	ldrb	r3, [r7, #22]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005a20:	7dbb      	ldrb	r3, [r7, #22]
 8005a22:	e000      	b.n	8005a26 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d014      	beq.n	8005a94 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00e      	beq.n	8005a94 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6852      	ldr	r2, [r2, #4]
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	4611      	mov	r1, r2
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	4798      	blx	r3
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005a90:	2303      	movs	r3, #3
 8005a92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a94:	2340      	movs	r3, #64	; 0x40
 8005a96:	2200      	movs	r2, #0
 8005a98:	2100      	movs	r1, #0
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f001 fb21 	bl	80070e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2240      	movs	r2, #64	; 0x40
 8005aac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ab0:	2340      	movs	r3, #64	; 0x40
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	2180      	movs	r1, #128	; 0x80
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f001 fb13 	bl	80070e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2240      	movs	r2, #64	; 0x40
 8005ac6:	621a      	str	r2, [r3, #32]

  return ret;
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	460b      	mov	r3, r1
 8005adc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	78fa      	ldrb	r2, [r7, #3]
 8005ae2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2204      	movs	r2, #4
 8005b0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d106      	bne.n	8005b40 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d110      	bne.n	8005b84 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00b      	beq.n	8005b84 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d005      	beq.n	8005b84 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b082      	sub	sp, #8
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	460b      	mov	r3, r1
 8005b98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	32ae      	adds	r2, #174	; 0xae
 8005ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e01c      	b.n	8005bea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d115      	bne.n	8005be8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	32ae      	adds	r2, #174	; 0xae
 8005bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00b      	beq.n	8005be8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	32ae      	adds	r2, #174	; 0xae
 8005bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	78fa      	ldrb	r2, [r7, #3]
 8005be2:	4611      	mov	r1, r2
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	32ae      	adds	r2, #174	; 0xae
 8005c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e01c      	b.n	8005c4e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d115      	bne.n	8005c4c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	32ae      	adds	r2, #174	; 0xae
 8005c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00b      	beq.n	8005c4c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	32ae      	adds	r2, #174	; 0xae
 8005c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	78fa      	ldrb	r2, [r7, #3]
 8005c46:	4611      	mov	r1, r2
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00e      	beq.n	8005ca8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6852      	ldr	r2, [r2, #4]
 8005c96:	b2d2      	uxtb	r2, r2
 8005c98:	4611      	mov	r1, r2
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	4798      	blx	r3
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	460b      	mov	r3, r1
 8005cbc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005cbe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005cd8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b086      	sub	sp, #24
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	885b      	ldrh	r3, [r3, #2]
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d920      	bls.n	8005d50 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005d16:	e013      	b.n	8005d40 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005d18:	f107 030a 	add.w	r3, r7, #10
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6978      	ldr	r0, [r7, #20]
 8005d20:	f000 f81b 	bl	8005d5a <USBD_GetNextDesc>
 8005d24:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	785b      	ldrb	r3, [r3, #1]
 8005d2a:	2b05      	cmp	r3, #5
 8005d2c:	d108      	bne.n	8005d40 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	789b      	ldrb	r3, [r3, #2]
 8005d36:	78fa      	ldrb	r2, [r7, #3]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d008      	beq.n	8005d4e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	885b      	ldrh	r3, [r3, #2]
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	897b      	ldrh	r3, [r7, #10]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d8e5      	bhi.n	8005d18 <USBD_GetEpDesc+0x32>
 8005d4c:	e000      	b.n	8005d50 <USBD_GetEpDesc+0x6a>
          break;
 8005d4e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005d50:	693b      	ldr	r3, [r7, #16]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3718      	adds	r7, #24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	881a      	ldrh	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	4413      	add	r3, r2
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4413      	add	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005d86:	68fb      	ldr	r3, [r7, #12]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	3301      	adds	r3, #1
 8005daa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005db2:	8a3b      	ldrh	r3, [r7, #16]
 8005db4:	021b      	lsls	r3, r3, #8
 8005db6:	b21a      	sxth	r2, r3
 8005db8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	b21b      	sxth	r3, r3
 8005dc0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005dc2:	89fb      	ldrh	r3, [r7, #14]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	371c      	adds	r7, #28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005de6:	2b40      	cmp	r3, #64	; 0x40
 8005de8:	d005      	beq.n	8005df6 <USBD_StdDevReq+0x26>
 8005dea:	2b40      	cmp	r3, #64	; 0x40
 8005dec:	d857      	bhi.n	8005e9e <USBD_StdDevReq+0xce>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00f      	beq.n	8005e12 <USBD_StdDevReq+0x42>
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	d153      	bne.n	8005e9e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	32ae      	adds	r2, #174	; 0xae
 8005e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	6839      	ldr	r1, [r7, #0]
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	4798      	blx	r3
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e10:	e04a      	b.n	8005ea8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	785b      	ldrb	r3, [r3, #1]
 8005e16:	2b09      	cmp	r3, #9
 8005e18:	d83b      	bhi.n	8005e92 <USBD_StdDevReq+0xc2>
 8005e1a:	a201      	add	r2, pc, #4	; (adr r2, 8005e20 <USBD_StdDevReq+0x50>)
 8005e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e20:	08005e75 	.word	0x08005e75
 8005e24:	08005e89 	.word	0x08005e89
 8005e28:	08005e93 	.word	0x08005e93
 8005e2c:	08005e7f 	.word	0x08005e7f
 8005e30:	08005e93 	.word	0x08005e93
 8005e34:	08005e53 	.word	0x08005e53
 8005e38:	08005e49 	.word	0x08005e49
 8005e3c:	08005e93 	.word	0x08005e93
 8005e40:	08005e6b 	.word	0x08005e6b
 8005e44:	08005e5d 	.word	0x08005e5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fa3c 	bl	80062c8 <USBD_GetDescriptor>
          break;
 8005e50:	e024      	b.n	8005e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005e52:	6839      	ldr	r1, [r7, #0]
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fba1 	bl	800659c <USBD_SetAddress>
          break;
 8005e5a:	e01f      	b.n	8005e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fbe0 	bl	8006624 <USBD_SetConfig>
 8005e64:	4603      	mov	r3, r0
 8005e66:	73fb      	strb	r3, [r7, #15]
          break;
 8005e68:	e018      	b.n	8005e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005e6a:	6839      	ldr	r1, [r7, #0]
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fc83 	bl	8006778 <USBD_GetConfig>
          break;
 8005e72:	e013      	b.n	8005e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005e74:	6839      	ldr	r1, [r7, #0]
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fcb4 	bl	80067e4 <USBD_GetStatus>
          break;
 8005e7c:	e00e      	b.n	8005e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fce3 	bl	800684c <USBD_SetFeature>
          break;
 8005e86:	e009      	b.n	8005e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e88:	6839      	ldr	r1, [r7, #0]
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fd07 	bl	800689e <USBD_ClrFeature>
          break;
 8005e90:	e004      	b.n	8005e9c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005e92:	6839      	ldr	r1, [r7, #0]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fd5e 	bl	8006956 <USBD_CtlError>
          break;
 8005e9a:	bf00      	nop
      }
      break;
 8005e9c:	e004      	b.n	8005ea8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005e9e:	6839      	ldr	r1, [r7, #0]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fd58 	bl	8006956 <USBD_CtlError>
      break;
 8005ea6:	bf00      	nop
  }

  return ret;
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop

08005eb4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005eca:	2b40      	cmp	r3, #64	; 0x40
 8005ecc:	d005      	beq.n	8005eda <USBD_StdItfReq+0x26>
 8005ece:	2b40      	cmp	r3, #64	; 0x40
 8005ed0:	d852      	bhi.n	8005f78 <USBD_StdItfReq+0xc4>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <USBD_StdItfReq+0x26>
 8005ed6:	2b20      	cmp	r3, #32
 8005ed8:	d14e      	bne.n	8005f78 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d840      	bhi.n	8005f6a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	889b      	ldrh	r3, [r3, #4]
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d836      	bhi.n	8005f60 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	889b      	ldrh	r3, [r3, #4]
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	4619      	mov	r1, r3
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7ff fed9 	bl	8005cb2 <USBD_CoreFindIF>
 8005f00:	4603      	mov	r3, r0
 8005f02:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f04:	7bbb      	ldrb	r3, [r7, #14]
 8005f06:	2bff      	cmp	r3, #255	; 0xff
 8005f08:	d01d      	beq.n	8005f46 <USBD_StdItfReq+0x92>
 8005f0a:	7bbb      	ldrb	r3, [r7, #14]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d11a      	bne.n	8005f46 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005f10:	7bba      	ldrb	r2, [r7, #14]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	32ae      	adds	r2, #174	; 0xae
 8005f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00f      	beq.n	8005f40 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005f20:	7bba      	ldrb	r2, [r7, #14]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005f28:	7bba      	ldrb	r2, [r7, #14]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	32ae      	adds	r2, #174	; 0xae
 8005f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	6839      	ldr	r1, [r7, #0]
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	4798      	blx	r3
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f3e:	e004      	b.n	8005f4a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005f40:	2303      	movs	r3, #3
 8005f42:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f44:	e001      	b.n	8005f4a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005f46:	2303      	movs	r3, #3
 8005f48:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	88db      	ldrh	r3, [r3, #6]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d110      	bne.n	8005f74 <USBD_StdItfReq+0xc0>
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10d      	bne.n	8005f74 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fdaa 	bl	8006ab2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f5e:	e009      	b.n	8005f74 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005f60:	6839      	ldr	r1, [r7, #0]
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fcf7 	bl	8006956 <USBD_CtlError>
          break;
 8005f68:	e004      	b.n	8005f74 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fcf2 	bl	8006956 <USBD_CtlError>
          break;
 8005f72:	e000      	b.n	8005f76 <USBD_StdItfReq+0xc2>
          break;
 8005f74:	bf00      	nop
      }
      break;
 8005f76:	e004      	b.n	8005f82 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005f78:	6839      	ldr	r1, [r7, #0]
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fceb 	bl	8006956 <USBD_CtlError>
      break;
 8005f80:	bf00      	nop
  }

  return ret;
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	889b      	ldrh	r3, [r3, #4]
 8005f9e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fa8:	2b40      	cmp	r3, #64	; 0x40
 8005faa:	d007      	beq.n	8005fbc <USBD_StdEPReq+0x30>
 8005fac:	2b40      	cmp	r3, #64	; 0x40
 8005fae:	f200 817f 	bhi.w	80062b0 <USBD_StdEPReq+0x324>
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d02a      	beq.n	800600c <USBD_StdEPReq+0x80>
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	f040 817a 	bne.w	80062b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005fbc:	7bbb      	ldrb	r3, [r7, #14]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7ff fe83 	bl	8005ccc <USBD_CoreFindEP>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fca:	7b7b      	ldrb	r3, [r7, #13]
 8005fcc:	2bff      	cmp	r3, #255	; 0xff
 8005fce:	f000 8174 	beq.w	80062ba <USBD_StdEPReq+0x32e>
 8005fd2:	7b7b      	ldrb	r3, [r7, #13]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f040 8170 	bne.w	80062ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005fda:	7b7a      	ldrb	r2, [r7, #13]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005fe2:	7b7a      	ldrb	r2, [r7, #13]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	32ae      	adds	r2, #174	; 0xae
 8005fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 8163 	beq.w	80062ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005ff4:	7b7a      	ldrb	r2, [r7, #13]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	32ae      	adds	r2, #174	; 0xae
 8005ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	4798      	blx	r3
 8006006:	4603      	mov	r3, r0
 8006008:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800600a:	e156      	b.n	80062ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	785b      	ldrb	r3, [r3, #1]
 8006010:	2b03      	cmp	r3, #3
 8006012:	d008      	beq.n	8006026 <USBD_StdEPReq+0x9a>
 8006014:	2b03      	cmp	r3, #3
 8006016:	f300 8145 	bgt.w	80062a4 <USBD_StdEPReq+0x318>
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 809b 	beq.w	8006156 <USBD_StdEPReq+0x1ca>
 8006020:	2b01      	cmp	r3, #1
 8006022:	d03c      	beq.n	800609e <USBD_StdEPReq+0x112>
 8006024:	e13e      	b.n	80062a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d002      	beq.n	8006038 <USBD_StdEPReq+0xac>
 8006032:	2b03      	cmp	r3, #3
 8006034:	d016      	beq.n	8006064 <USBD_StdEPReq+0xd8>
 8006036:	e02c      	b.n	8006092 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006038:	7bbb      	ldrb	r3, [r7, #14]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00d      	beq.n	800605a <USBD_StdEPReq+0xce>
 800603e:	7bbb      	ldrb	r3, [r7, #14]
 8006040:	2b80      	cmp	r3, #128	; 0x80
 8006042:	d00a      	beq.n	800605a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006044:	7bbb      	ldrb	r3, [r7, #14]
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 f88f 	bl	800716c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800604e:	2180      	movs	r1, #128	; 0x80
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f001 f88b 	bl	800716c <USBD_LL_StallEP>
 8006056:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006058:	e020      	b.n	800609c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800605a:	6839      	ldr	r1, [r7, #0]
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fc7a 	bl	8006956 <USBD_CtlError>
              break;
 8006062:	e01b      	b.n	800609c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	885b      	ldrh	r3, [r3, #2]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10e      	bne.n	800608a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800606c:	7bbb      	ldrb	r3, [r7, #14]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00b      	beq.n	800608a <USBD_StdEPReq+0xfe>
 8006072:	7bbb      	ldrb	r3, [r7, #14]
 8006074:	2b80      	cmp	r3, #128	; 0x80
 8006076:	d008      	beq.n	800608a <USBD_StdEPReq+0xfe>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	88db      	ldrh	r3, [r3, #6]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d104      	bne.n	800608a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006080:	7bbb      	ldrb	r3, [r7, #14]
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f001 f871 	bl	800716c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fd11 	bl	8006ab2 <USBD_CtlSendStatus>

              break;
 8006090:	e004      	b.n	800609c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fc5e 	bl	8006956 <USBD_CtlError>
              break;
 800609a:	bf00      	nop
          }
          break;
 800609c:	e107      	b.n	80062ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d002      	beq.n	80060b0 <USBD_StdEPReq+0x124>
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d016      	beq.n	80060dc <USBD_StdEPReq+0x150>
 80060ae:	e04b      	b.n	8006148 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060b0:	7bbb      	ldrb	r3, [r7, #14]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00d      	beq.n	80060d2 <USBD_StdEPReq+0x146>
 80060b6:	7bbb      	ldrb	r3, [r7, #14]
 80060b8:	2b80      	cmp	r3, #128	; 0x80
 80060ba:	d00a      	beq.n	80060d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80060bc:	7bbb      	ldrb	r3, [r7, #14]
 80060be:	4619      	mov	r1, r3
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f001 f853 	bl	800716c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80060c6:	2180      	movs	r1, #128	; 0x80
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f001 f84f 	bl	800716c <USBD_LL_StallEP>
 80060ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060d0:	e040      	b.n	8006154 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fc3e 	bl	8006956 <USBD_CtlError>
              break;
 80060da:	e03b      	b.n	8006154 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	885b      	ldrh	r3, [r3, #2]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d136      	bne.n	8006152 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80060e4:	7bbb      	ldrb	r3, [r7, #14]
 80060e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d004      	beq.n	80060f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80060ee:	7bbb      	ldrb	r3, [r7, #14]
 80060f0:	4619      	mov	r1, r3
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f001 f859 	bl	80071aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fcda 	bl	8006ab2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80060fe:	7bbb      	ldrb	r3, [r7, #14]
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff fde2 	bl	8005ccc <USBD_CoreFindEP>
 8006108:	4603      	mov	r3, r0
 800610a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800610c:	7b7b      	ldrb	r3, [r7, #13]
 800610e:	2bff      	cmp	r3, #255	; 0xff
 8006110:	d01f      	beq.n	8006152 <USBD_StdEPReq+0x1c6>
 8006112:	7b7b      	ldrb	r3, [r7, #13]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d11c      	bne.n	8006152 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006118:	7b7a      	ldrb	r2, [r7, #13]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006120:	7b7a      	ldrb	r2, [r7, #13]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	32ae      	adds	r2, #174	; 0xae
 8006126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d010      	beq.n	8006152 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006130:	7b7a      	ldrb	r2, [r7, #13]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	32ae      	adds	r2, #174	; 0xae
 8006136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	4798      	blx	r3
 8006142:	4603      	mov	r3, r0
 8006144:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006146:	e004      	b.n	8006152 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fc03 	bl	8006956 <USBD_CtlError>
              break;
 8006150:	e000      	b.n	8006154 <USBD_StdEPReq+0x1c8>
              break;
 8006152:	bf00      	nop
          }
          break;
 8006154:	e0ab      	b.n	80062ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d002      	beq.n	8006168 <USBD_StdEPReq+0x1dc>
 8006162:	2b03      	cmp	r3, #3
 8006164:	d032      	beq.n	80061cc <USBD_StdEPReq+0x240>
 8006166:	e097      	b.n	8006298 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006168:	7bbb      	ldrb	r3, [r7, #14]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d007      	beq.n	800617e <USBD_StdEPReq+0x1f2>
 800616e:	7bbb      	ldrb	r3, [r7, #14]
 8006170:	2b80      	cmp	r3, #128	; 0x80
 8006172:	d004      	beq.n	800617e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006174:	6839      	ldr	r1, [r7, #0]
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fbed 	bl	8006956 <USBD_CtlError>
                break;
 800617c:	e091      	b.n	80062a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800617e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006182:	2b00      	cmp	r3, #0
 8006184:	da0b      	bge.n	800619e <USBD_StdEPReq+0x212>
 8006186:	7bbb      	ldrb	r3, [r7, #14]
 8006188:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800618c:	4613      	mov	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	3310      	adds	r3, #16
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	4413      	add	r3, r2
 800619a:	3304      	adds	r3, #4
 800619c:	e00b      	b.n	80061b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800619e:	7bbb      	ldrb	r3, [r7, #14]
 80061a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	4413      	add	r3, r2
 80061b4:	3304      	adds	r3, #4
 80061b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	2200      	movs	r2, #0
 80061bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2202      	movs	r2, #2
 80061c2:	4619      	mov	r1, r3
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fc37 	bl	8006a38 <USBD_CtlSendData>
              break;
 80061ca:	e06a      	b.n	80062a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80061cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	da11      	bge.n	80061f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80061d4:	7bbb      	ldrb	r3, [r7, #14]
 80061d6:	f003 020f 	and.w	r2, r3, #15
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	4613      	mov	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	440b      	add	r3, r1
 80061e6:	3324      	adds	r3, #36	; 0x24
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d117      	bne.n	800621e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80061ee:	6839      	ldr	r1, [r7, #0]
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fbb0 	bl	8006956 <USBD_CtlError>
                  break;
 80061f6:	e054      	b.n	80062a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80061f8:	7bbb      	ldrb	r3, [r7, #14]
 80061fa:	f003 020f 	and.w	r2, r3, #15
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d104      	bne.n	800621e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fb9d 	bl	8006956 <USBD_CtlError>
                  break;
 800621c:	e041      	b.n	80062a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800621e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006222:	2b00      	cmp	r3, #0
 8006224:	da0b      	bge.n	800623e <USBD_StdEPReq+0x2b2>
 8006226:	7bbb      	ldrb	r3, [r7, #14]
 8006228:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800622c:	4613      	mov	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	3310      	adds	r3, #16
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	4413      	add	r3, r2
 800623a:	3304      	adds	r3, #4
 800623c:	e00b      	b.n	8006256 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800623e:	7bbb      	ldrb	r3, [r7, #14]
 8006240:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006244:	4613      	mov	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	4413      	add	r3, r2
 8006254:	3304      	adds	r3, #4
 8006256:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006258:	7bbb      	ldrb	r3, [r7, #14]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <USBD_StdEPReq+0x2d8>
 800625e:	7bbb      	ldrb	r3, [r7, #14]
 8006260:	2b80      	cmp	r3, #128	; 0x80
 8006262:	d103      	bne.n	800626c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2200      	movs	r2, #0
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	e00e      	b.n	800628a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800626c:	7bbb      	ldrb	r3, [r7, #14]
 800626e:	4619      	mov	r1, r3
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 ffb9 	bl	80071e8 <USBD_LL_IsStallEP>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2201      	movs	r2, #1
 8006280:	601a      	str	r2, [r3, #0]
 8006282:	e002      	b.n	800628a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2200      	movs	r2, #0
 8006288:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2202      	movs	r2, #2
 800628e:	4619      	mov	r1, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fbd1 	bl	8006a38 <USBD_CtlSendData>
              break;
 8006296:	e004      	b.n	80062a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fb5b 	bl	8006956 <USBD_CtlError>
              break;
 80062a0:	bf00      	nop
          }
          break;
 80062a2:	e004      	b.n	80062ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80062a4:	6839      	ldr	r1, [r7, #0]
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fb55 	bl	8006956 <USBD_CtlError>
          break;
 80062ac:	bf00      	nop
      }
      break;
 80062ae:	e005      	b.n	80062bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80062b0:	6839      	ldr	r1, [r7, #0]
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fb4f 	bl	8006956 <USBD_CtlError>
      break;
 80062b8:	e000      	b.n	80062bc <USBD_StdEPReq+0x330>
      break;
 80062ba:	bf00      	nop
  }

  return ret;
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	885b      	ldrh	r3, [r3, #2]
 80062e2:	0a1b      	lsrs	r3, r3, #8
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b01      	subs	r3, #1
 80062e8:	2b06      	cmp	r3, #6
 80062ea:	f200 8128 	bhi.w	800653e <USBD_GetDescriptor+0x276>
 80062ee:	a201      	add	r2, pc, #4	; (adr r2, 80062f4 <USBD_GetDescriptor+0x2c>)
 80062f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f4:	08006311 	.word	0x08006311
 80062f8:	08006329 	.word	0x08006329
 80062fc:	08006369 	.word	0x08006369
 8006300:	0800653f 	.word	0x0800653f
 8006304:	0800653f 	.word	0x0800653f
 8006308:	080064df 	.word	0x080064df
 800630c:	0800650b 	.word	0x0800650b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	7c12      	ldrb	r2, [r2, #16]
 800631c:	f107 0108 	add.w	r1, r7, #8
 8006320:	4610      	mov	r0, r2
 8006322:	4798      	blx	r3
 8006324:	60f8      	str	r0, [r7, #12]
      break;
 8006326:	e112      	b.n	800654e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	7c1b      	ldrb	r3, [r3, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10d      	bne.n	800634c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006338:	f107 0208 	add.w	r2, r7, #8
 800633c:	4610      	mov	r0, r2
 800633e:	4798      	blx	r3
 8006340:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	3301      	adds	r3, #1
 8006346:	2202      	movs	r2, #2
 8006348:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800634a:	e100      	b.n	800654e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006354:	f107 0208 	add.w	r2, r7, #8
 8006358:	4610      	mov	r0, r2
 800635a:	4798      	blx	r3
 800635c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3301      	adds	r3, #1
 8006362:	2202      	movs	r2, #2
 8006364:	701a      	strb	r2, [r3, #0]
      break;
 8006366:	e0f2      	b.n	800654e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	885b      	ldrh	r3, [r3, #2]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b05      	cmp	r3, #5
 8006370:	f200 80ac 	bhi.w	80064cc <USBD_GetDescriptor+0x204>
 8006374:	a201      	add	r2, pc, #4	; (adr r2, 800637c <USBD_GetDescriptor+0xb4>)
 8006376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637a:	bf00      	nop
 800637c:	08006395 	.word	0x08006395
 8006380:	080063c9 	.word	0x080063c9
 8006384:	080063fd 	.word	0x080063fd
 8006388:	08006431 	.word	0x08006431
 800638c:	08006465 	.word	0x08006465
 8006390:	08006499 	.word	0x08006499
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00b      	beq.n	80063b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	7c12      	ldrb	r2, [r2, #16]
 80063ac:	f107 0108 	add.w	r1, r7, #8
 80063b0:	4610      	mov	r0, r2
 80063b2:	4798      	blx	r3
 80063b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063b6:	e091      	b.n	80064dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063b8:	6839      	ldr	r1, [r7, #0]
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 facb 	bl	8006956 <USBD_CtlError>
            err++;
 80063c0:	7afb      	ldrb	r3, [r7, #11]
 80063c2:	3301      	adds	r3, #1
 80063c4:	72fb      	strb	r3, [r7, #11]
          break;
 80063c6:	e089      	b.n	80064dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00b      	beq.n	80063ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	7c12      	ldrb	r2, [r2, #16]
 80063e0:	f107 0108 	add.w	r1, r7, #8
 80063e4:	4610      	mov	r0, r2
 80063e6:	4798      	blx	r3
 80063e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063ea:	e077      	b.n	80064dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063ec:	6839      	ldr	r1, [r7, #0]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fab1 	bl	8006956 <USBD_CtlError>
            err++;
 80063f4:	7afb      	ldrb	r3, [r7, #11]
 80063f6:	3301      	adds	r3, #1
 80063f8:	72fb      	strb	r3, [r7, #11]
          break;
 80063fa:	e06f      	b.n	80064dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00b      	beq.n	8006420 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	7c12      	ldrb	r2, [r2, #16]
 8006414:	f107 0108 	add.w	r1, r7, #8
 8006418:	4610      	mov	r0, r2
 800641a:	4798      	blx	r3
 800641c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800641e:	e05d      	b.n	80064dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006420:	6839      	ldr	r1, [r7, #0]
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fa97 	bl	8006956 <USBD_CtlError>
            err++;
 8006428:	7afb      	ldrb	r3, [r7, #11]
 800642a:	3301      	adds	r3, #1
 800642c:	72fb      	strb	r3, [r7, #11]
          break;
 800642e:	e055      	b.n	80064dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00b      	beq.n	8006454 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	7c12      	ldrb	r2, [r2, #16]
 8006448:	f107 0108 	add.w	r1, r7, #8
 800644c:	4610      	mov	r0, r2
 800644e:	4798      	blx	r3
 8006450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006452:	e043      	b.n	80064dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006454:	6839      	ldr	r1, [r7, #0]
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fa7d 	bl	8006956 <USBD_CtlError>
            err++;
 800645c:	7afb      	ldrb	r3, [r7, #11]
 800645e:	3301      	adds	r3, #1
 8006460:	72fb      	strb	r3, [r7, #11]
          break;
 8006462:	e03b      	b.n	80064dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00b      	beq.n	8006488 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	7c12      	ldrb	r2, [r2, #16]
 800647c:	f107 0108 	add.w	r1, r7, #8
 8006480:	4610      	mov	r0, r2
 8006482:	4798      	blx	r3
 8006484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006486:	e029      	b.n	80064dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa63 	bl	8006956 <USBD_CtlError>
            err++;
 8006490:	7afb      	ldrb	r3, [r7, #11]
 8006492:	3301      	adds	r3, #1
 8006494:	72fb      	strb	r3, [r7, #11]
          break;
 8006496:	e021      	b.n	80064dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00b      	beq.n	80064bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	7c12      	ldrb	r2, [r2, #16]
 80064b0:	f107 0108 	add.w	r1, r7, #8
 80064b4:	4610      	mov	r0, r2
 80064b6:	4798      	blx	r3
 80064b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064ba:	e00f      	b.n	80064dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fa49 	bl	8006956 <USBD_CtlError>
            err++;
 80064c4:	7afb      	ldrb	r3, [r7, #11]
 80064c6:	3301      	adds	r3, #1
 80064c8:	72fb      	strb	r3, [r7, #11]
          break;
 80064ca:	e007      	b.n	80064dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa41 	bl	8006956 <USBD_CtlError>
          err++;
 80064d4:	7afb      	ldrb	r3, [r7, #11]
 80064d6:	3301      	adds	r3, #1
 80064d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80064da:	bf00      	nop
      }
      break;
 80064dc:	e037      	b.n	800654e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	7c1b      	ldrb	r3, [r3, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d109      	bne.n	80064fa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ee:	f107 0208 	add.w	r2, r7, #8
 80064f2:	4610      	mov	r0, r2
 80064f4:	4798      	blx	r3
 80064f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064f8:	e029      	b.n	800654e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fa2a 	bl	8006956 <USBD_CtlError>
        err++;
 8006502:	7afb      	ldrb	r3, [r7, #11]
 8006504:	3301      	adds	r3, #1
 8006506:	72fb      	strb	r3, [r7, #11]
      break;
 8006508:	e021      	b.n	800654e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	7c1b      	ldrb	r3, [r3, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10d      	bne.n	800652e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651a:	f107 0208 	add.w	r2, r7, #8
 800651e:	4610      	mov	r0, r2
 8006520:	4798      	blx	r3
 8006522:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	3301      	adds	r3, #1
 8006528:	2207      	movs	r2, #7
 800652a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800652c:	e00f      	b.n	800654e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fa10 	bl	8006956 <USBD_CtlError>
        err++;
 8006536:	7afb      	ldrb	r3, [r7, #11]
 8006538:	3301      	adds	r3, #1
 800653a:	72fb      	strb	r3, [r7, #11]
      break;
 800653c:	e007      	b.n	800654e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fa08 	bl	8006956 <USBD_CtlError>
      err++;
 8006546:	7afb      	ldrb	r3, [r7, #11]
 8006548:	3301      	adds	r3, #1
 800654a:	72fb      	strb	r3, [r7, #11]
      break;
 800654c:	bf00      	nop
  }

  if (err != 0U)
 800654e:	7afb      	ldrb	r3, [r7, #11]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d11e      	bne.n	8006592 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	88db      	ldrh	r3, [r3, #6]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d016      	beq.n	800658a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800655c:	893b      	ldrh	r3, [r7, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00e      	beq.n	8006580 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	88da      	ldrh	r2, [r3, #6]
 8006566:	893b      	ldrh	r3, [r7, #8]
 8006568:	4293      	cmp	r3, r2
 800656a:	bf28      	it	cs
 800656c:	4613      	movcs	r3, r2
 800656e:	b29b      	uxth	r3, r3
 8006570:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006572:	893b      	ldrh	r3, [r7, #8]
 8006574:	461a      	mov	r2, r3
 8006576:	68f9      	ldr	r1, [r7, #12]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fa5d 	bl	8006a38 <USBD_CtlSendData>
 800657e:	e009      	b.n	8006594 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f9e7 	bl	8006956 <USBD_CtlError>
 8006588:	e004      	b.n	8006594 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fa91 	bl	8006ab2 <USBD_CtlSendStatus>
 8006590:	e000      	b.n	8006594 <USBD_GetDescriptor+0x2cc>
    return;
 8006592:	bf00      	nop
  }
}
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop

0800659c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	889b      	ldrh	r3, [r3, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d131      	bne.n	8006612 <USBD_SetAddress+0x76>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	88db      	ldrh	r3, [r3, #6]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d12d      	bne.n	8006612 <USBD_SetAddress+0x76>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	885b      	ldrh	r3, [r3, #2]
 80065ba:	2b7f      	cmp	r3, #127	; 0x7f
 80065bc:	d829      	bhi.n	8006612 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	885b      	ldrh	r3, [r3, #2]
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	d104      	bne.n	80065e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f9bc 	bl	8006956 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065de:	e01d      	b.n	800661c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	7bfa      	ldrb	r2, [r7, #15]
 80065e4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fe27 	bl	8007240 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fa5d 	bl	8006ab2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d004      	beq.n	8006608 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2202      	movs	r2, #2
 8006602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006606:	e009      	b.n	800661c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006610:	e004      	b.n	800661c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006612:	6839      	ldr	r1, [r7, #0]
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f99e 	bl	8006956 <USBD_CtlError>
  }
}
 800661a:	bf00      	nop
 800661c:	bf00      	nop
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	885b      	ldrh	r3, [r3, #2]
 8006636:	b2da      	uxtb	r2, r3
 8006638:	4b4e      	ldr	r3, [pc, #312]	; (8006774 <USBD_SetConfig+0x150>)
 800663a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800663c:	4b4d      	ldr	r3, [pc, #308]	; (8006774 <USBD_SetConfig+0x150>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d905      	bls.n	8006650 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f985 	bl	8006956 <USBD_CtlError>
    return USBD_FAIL;
 800664c:	2303      	movs	r3, #3
 800664e:	e08c      	b.n	800676a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d002      	beq.n	8006662 <USBD_SetConfig+0x3e>
 800665c:	2b03      	cmp	r3, #3
 800665e:	d029      	beq.n	80066b4 <USBD_SetConfig+0x90>
 8006660:	e075      	b.n	800674e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006662:	4b44      	ldr	r3, [pc, #272]	; (8006774 <USBD_SetConfig+0x150>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d020      	beq.n	80066ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800666a:	4b42      	ldr	r3, [pc, #264]	; (8006774 <USBD_SetConfig+0x150>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006674:	4b3f      	ldr	r3, [pc, #252]	; (8006774 <USBD_SetConfig+0x150>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7fe ffe7 	bl	800564e <USBD_SetClassConfig>
 8006680:	4603      	mov	r3, r0
 8006682:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d008      	beq.n	800669c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800668a:	6839      	ldr	r1, [r7, #0]
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f962 	bl	8006956 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2202      	movs	r2, #2
 8006696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800669a:	e065      	b.n	8006768 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fa08 	bl	8006ab2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2203      	movs	r2, #3
 80066a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80066aa:	e05d      	b.n	8006768 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fa00 	bl	8006ab2 <USBD_CtlSendStatus>
      break;
 80066b2:	e059      	b.n	8006768 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80066b4:	4b2f      	ldr	r3, [pc, #188]	; (8006774 <USBD_SetConfig+0x150>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d112      	bne.n	80066e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2202      	movs	r2, #2
 80066c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80066c4:	4b2b      	ldr	r3, [pc, #172]	; (8006774 <USBD_SetConfig+0x150>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	461a      	mov	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80066ce:	4b29      	ldr	r3, [pc, #164]	; (8006774 <USBD_SetConfig+0x150>)
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	4619      	mov	r1, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7fe ffd6 	bl	8005686 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f9e9 	bl	8006ab2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80066e0:	e042      	b.n	8006768 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80066e2:	4b24      	ldr	r3, [pc, #144]	; (8006774 <USBD_SetConfig+0x150>)
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d02a      	beq.n	8006746 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	4619      	mov	r1, r3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7fe ffc4 	bl	8005686 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80066fe:	4b1d      	ldr	r3, [pc, #116]	; (8006774 <USBD_SetConfig+0x150>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	461a      	mov	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006708:	4b1a      	ldr	r3, [pc, #104]	; (8006774 <USBD_SetConfig+0x150>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	4619      	mov	r1, r3
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7fe ff9d 	bl	800564e <USBD_SetClassConfig>
 8006714:	4603      	mov	r3, r0
 8006716:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006718:	7bfb      	ldrb	r3, [r7, #15]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00f      	beq.n	800673e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f918 	bl	8006956 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	b2db      	uxtb	r3, r3
 800672c:	4619      	mov	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7fe ffa9 	bl	8005686 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800673c:	e014      	b.n	8006768 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f9b7 	bl	8006ab2 <USBD_CtlSendStatus>
      break;
 8006744:	e010      	b.n	8006768 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f9b3 	bl	8006ab2 <USBD_CtlSendStatus>
      break;
 800674c:	e00c      	b.n	8006768 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f900 	bl	8006956 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006756:	4b07      	ldr	r3, [pc, #28]	; (8006774 <USBD_SetConfig+0x150>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	4619      	mov	r1, r3
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f7fe ff92 	bl	8005686 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006762:	2303      	movs	r3, #3
 8006764:	73fb      	strb	r3, [r7, #15]
      break;
 8006766:	bf00      	nop
  }

  return ret;
 8006768:	7bfb      	ldrb	r3, [r7, #15]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	200001d4 	.word	0x200001d4

08006778 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	88db      	ldrh	r3, [r3, #6]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d004      	beq.n	8006794 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f8e2 	bl	8006956 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006792:	e023      	b.n	80067dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b02      	cmp	r3, #2
 800679e:	dc02      	bgt.n	80067a6 <USBD_GetConfig+0x2e>
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	dc03      	bgt.n	80067ac <USBD_GetConfig+0x34>
 80067a4:	e015      	b.n	80067d2 <USBD_GetConfig+0x5a>
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d00b      	beq.n	80067c2 <USBD_GetConfig+0x4a>
 80067aa:	e012      	b.n	80067d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3308      	adds	r3, #8
 80067b6:	2201      	movs	r2, #1
 80067b8:	4619      	mov	r1, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f93c 	bl	8006a38 <USBD_CtlSendData>
        break;
 80067c0:	e00c      	b.n	80067dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	3304      	adds	r3, #4
 80067c6:	2201      	movs	r2, #1
 80067c8:	4619      	mov	r1, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f934 	bl	8006a38 <USBD_CtlSendData>
        break;
 80067d0:	e004      	b.n	80067dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f8be 	bl	8006956 <USBD_CtlError>
        break;
 80067da:	bf00      	nop
}
 80067dc:	bf00      	nop
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	3b01      	subs	r3, #1
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d81e      	bhi.n	800683a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	88db      	ldrh	r3, [r3, #6]
 8006800:	2b02      	cmp	r3, #2
 8006802:	d004      	beq.n	800680e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f8a5 	bl	8006956 <USBD_CtlError>
        break;
 800680c:	e01a      	b.n	8006844 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800681a:	2b00      	cmp	r3, #0
 800681c:	d005      	beq.n	800682a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f043 0202 	orr.w	r2, r3, #2
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	330c      	adds	r3, #12
 800682e:	2202      	movs	r2, #2
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f900 	bl	8006a38 <USBD_CtlSendData>
      break;
 8006838:	e004      	b.n	8006844 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f88a 	bl	8006956 <USBD_CtlError>
      break;
 8006842:	bf00      	nop
  }
}
 8006844:	bf00      	nop
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	885b      	ldrh	r3, [r3, #2]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d107      	bne.n	800686e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f923 	bl	8006ab2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800686c:	e013      	b.n	8006896 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	885b      	ldrh	r3, [r3, #2]
 8006872:	2b02      	cmp	r3, #2
 8006874:	d10b      	bne.n	800688e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	889b      	ldrh	r3, [r3, #4]
 800687a:	0a1b      	lsrs	r3, r3, #8
 800687c:	b29b      	uxth	r3, r3
 800687e:	b2da      	uxtb	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f913 	bl	8006ab2 <USBD_CtlSendStatus>
}
 800688c:	e003      	b.n	8006896 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f860 	bl	8006956 <USBD_CtlError>
}
 8006896:	bf00      	nop
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b082      	sub	sp, #8
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	3b01      	subs	r3, #1
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d80b      	bhi.n	80068ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	885b      	ldrh	r3, [r3, #2]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d10c      	bne.n	80068d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f8f3 	bl	8006ab2 <USBD_CtlSendStatus>
      }
      break;
 80068cc:	e004      	b.n	80068d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f840 	bl	8006956 <USBD_CtlError>
      break;
 80068d6:	e000      	b.n	80068da <USBD_ClrFeature+0x3c>
      break;
 80068d8:	bf00      	nop
  }
}
 80068da:	bf00      	nop
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	781a      	ldrb	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3301      	adds	r3, #1
 80068fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	781a      	ldrb	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3301      	adds	r3, #1
 800690a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f7ff fa41 	bl	8005d94 <SWAPBYTE>
 8006912:	4603      	mov	r3, r0
 8006914:	461a      	mov	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3301      	adds	r3, #1
 800691e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3301      	adds	r3, #1
 8006924:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f7ff fa34 	bl	8005d94 <SWAPBYTE>
 800692c:	4603      	mov	r3, r0
 800692e:	461a      	mov	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3301      	adds	r3, #1
 8006938:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3301      	adds	r3, #1
 800693e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f7ff fa27 	bl	8005d94 <SWAPBYTE>
 8006946:	4603      	mov	r3, r0
 8006948:	461a      	mov	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	80da      	strh	r2, [r3, #6]
}
 800694e:	bf00      	nop
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b082      	sub	sp, #8
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006960:	2180      	movs	r1, #128	; 0x80
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fc02 	bl	800716c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006968:	2100      	movs	r1, #0
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fbfe 	bl	800716c <USBD_LL_StallEP>
}
 8006970:	bf00      	nop
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d036      	beq.n	80069fc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006992:	6938      	ldr	r0, [r7, #16]
 8006994:	f000 f836 	bl	8006a04 <USBD_GetLen>
 8006998:	4603      	mov	r3, r0
 800699a:	3301      	adds	r3, #1
 800699c:	b29b      	uxth	r3, r3
 800699e:	005b      	lsls	r3, r3, #1
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80069a6:	7dfb      	ldrb	r3, [r7, #23]
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	4413      	add	r3, r2
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	7812      	ldrb	r2, [r2, #0]
 80069b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80069b2:	7dfb      	ldrb	r3, [r7, #23]
 80069b4:	3301      	adds	r3, #1
 80069b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80069b8:	7dfb      	ldrb	r3, [r7, #23]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	4413      	add	r3, r2
 80069be:	2203      	movs	r2, #3
 80069c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80069c2:	7dfb      	ldrb	r3, [r7, #23]
 80069c4:	3301      	adds	r3, #1
 80069c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80069c8:	e013      	b.n	80069f2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	4413      	add	r3, r2
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	7812      	ldrb	r2, [r2, #0]
 80069d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	3301      	adds	r3, #1
 80069da:	613b      	str	r3, [r7, #16]
    idx++;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
 80069de:	3301      	adds	r3, #1
 80069e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80069e2:	7dfb      	ldrb	r3, [r7, #23]
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	4413      	add	r3, r2
 80069e8:	2200      	movs	r2, #0
 80069ea:	701a      	strb	r2, [r3, #0]
    idx++;
 80069ec:	7dfb      	ldrb	r3, [r7, #23]
 80069ee:	3301      	adds	r3, #1
 80069f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e7      	bne.n	80069ca <USBD_GetString+0x52>
 80069fa:	e000      	b.n	80069fe <USBD_GetString+0x86>
    return;
 80069fc:	bf00      	nop
  }
}
 80069fe:	3718      	adds	r7, #24
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006a14:	e005      	b.n	8006a22 <USBD_GetLen+0x1e>
  {
    len++;
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1f5      	bne.n	8006a16 <USBD_GetLen+0x12>
  }

  return len;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f000 fc0d 	bl	800727e <USBD_LL_Transmit>

  return USBD_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b084      	sub	sp, #16
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	60f8      	str	r0, [r7, #12]
 8006a76:	60b9      	str	r1, [r7, #8]
 8006a78:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	2100      	movs	r1, #0
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 fbfc 	bl	800727e <USBD_LL_Transmit>

  return USBD_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 fc0c 	bl	80072c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b082      	sub	sp, #8
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2204      	movs	r2, #4
 8006abe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fbd8 	bl	800727e <USBD_LL_Transmit>

  return USBD_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2205      	movs	r2, #5
 8006ae4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ae8:	2300      	movs	r3, #0
 8006aea:	2200      	movs	r2, #0
 8006aec:	2100      	movs	r1, #0
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fbe6 	bl	80072c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b04:	2200      	movs	r2, #0
 8006b06:	490e      	ldr	r1, [pc, #56]	; (8006b40 <MX_USB_DEVICE_Init+0x40>)
 8006b08:	480e      	ldr	r0, [pc, #56]	; (8006b44 <MX_USB_DEVICE_Init+0x44>)
 8006b0a:	f7fe fd23 	bl	8005554 <USBD_Init>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b14:	f7f9 ff62 	bl	80009dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006b18:	490b      	ldr	r1, [pc, #44]	; (8006b48 <MX_USB_DEVICE_Init+0x48>)
 8006b1a:	480a      	ldr	r0, [pc, #40]	; (8006b44 <MX_USB_DEVICE_Init+0x44>)
 8006b1c:	f7fe fd4a 	bl	80055b4 <USBD_RegisterClass>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b26:	f7f9 ff59 	bl	80009dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b2a:	4806      	ldr	r0, [pc, #24]	; (8006b44 <MX_USB_DEVICE_Init+0x44>)
 8006b2c:	f7fe fd78 	bl	8005620 <USBD_Start>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006b36:	f7f9 ff51 	bl	80009dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006b3a:	bf00      	nop
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	200000cc 	.word	0x200000cc
 8006b44:	200001d8 	.word	0x200001d8
 8006b48:	2000000c 	.word	0x2000000c

08006b4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	4603      	mov	r3, r0
 8006b54:	6039      	str	r1, [r7, #0]
 8006b56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	2212      	movs	r2, #18
 8006b5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006b5e:	4b03      	ldr	r3, [pc, #12]	; (8006b6c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	200000e8 	.word	0x200000e8

08006b70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	4603      	mov	r3, r0
 8006b78:	6039      	str	r1, [r7, #0]
 8006b7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	2204      	movs	r2, #4
 8006b80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006b82:	4b03      	ldr	r3, [pc, #12]	; (8006b90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	200000fc 	.word	0x200000fc

08006b94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	6039      	str	r1, [r7, #0]
 8006b9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ba0:	79fb      	ldrb	r3, [r7, #7]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d105      	bne.n	8006bb2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	4907      	ldr	r1, [pc, #28]	; (8006bc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006baa:	4808      	ldr	r0, [pc, #32]	; (8006bcc <USBD_FS_ProductStrDescriptor+0x38>)
 8006bac:	f7ff fee4 	bl	8006978 <USBD_GetString>
 8006bb0:	e004      	b.n	8006bbc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	4904      	ldr	r1, [pc, #16]	; (8006bc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006bb6:	4805      	ldr	r0, [pc, #20]	; (8006bcc <USBD_FS_ProductStrDescriptor+0x38>)
 8006bb8:	f7ff fede 	bl	8006978 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006bbc:	4b02      	ldr	r3, [pc, #8]	; (8006bc8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	200004b4 	.word	0x200004b4
 8006bcc:	080073fc 	.word	0x080073fc

08006bd0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	6039      	str	r1, [r7, #0]
 8006bda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	4904      	ldr	r1, [pc, #16]	; (8006bf0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006be0:	4804      	ldr	r0, [pc, #16]	; (8006bf4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006be2:	f7ff fec9 	bl	8006978 <USBD_GetString>
  return USBD_StrDesc;
 8006be6:	4b02      	ldr	r3, [pc, #8]	; (8006bf0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	200004b4 	.word	0x200004b4
 8006bf4:	0800740c 	.word	0x0800740c

08006bf8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	4603      	mov	r3, r0
 8006c00:	6039      	str	r1, [r7, #0]
 8006c02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	221a      	movs	r2, #26
 8006c08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006c0a:	f000 f843 	bl	8006c94 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006c0e:	4b02      	ldr	r3, [pc, #8]	; (8006c18 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	20000100 	.word	0x20000100

08006c1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	4603      	mov	r3, r0
 8006c24:	6039      	str	r1, [r7, #0]
 8006c26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006c28:	79fb      	ldrb	r3, [r7, #7]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d105      	bne.n	8006c3a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	4907      	ldr	r1, [pc, #28]	; (8006c50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c32:	4808      	ldr	r0, [pc, #32]	; (8006c54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c34:	f7ff fea0 	bl	8006978 <USBD_GetString>
 8006c38:	e004      	b.n	8006c44 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	4904      	ldr	r1, [pc, #16]	; (8006c50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c3e:	4805      	ldr	r0, [pc, #20]	; (8006c54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c40:	f7ff fe9a 	bl	8006978 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c44:	4b02      	ldr	r3, [pc, #8]	; (8006c50 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	200004b4 	.word	0x200004b4
 8006c54:	08007410 	.word	0x08007410

08006c58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	4603      	mov	r3, r0
 8006c60:	6039      	str	r1, [r7, #0]
 8006c62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c64:	79fb      	ldrb	r3, [r7, #7]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d105      	bne.n	8006c76 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	4907      	ldr	r1, [pc, #28]	; (8006c8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c6e:	4808      	ldr	r0, [pc, #32]	; (8006c90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c70:	f7ff fe82 	bl	8006978 <USBD_GetString>
 8006c74:	e004      	b.n	8006c80 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	4904      	ldr	r1, [pc, #16]	; (8006c8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c7a:	4805      	ldr	r0, [pc, #20]	; (8006c90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c7c:	f7ff fe7c 	bl	8006978 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c80:	4b02      	ldr	r3, [pc, #8]	; (8006c8c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	200004b4 	.word	0x200004b4
 8006c90:	0800741c 	.word	0x0800741c

08006c94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006c9a:	4b0f      	ldr	r3, [pc, #60]	; (8006cd8 <Get_SerialNum+0x44>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006ca0:	4b0e      	ldr	r3, [pc, #56]	; (8006cdc <Get_SerialNum+0x48>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006ca6:	4b0e      	ldr	r3, [pc, #56]	; (8006ce0 <Get_SerialNum+0x4c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d009      	beq.n	8006cce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006cba:	2208      	movs	r2, #8
 8006cbc:	4909      	ldr	r1, [pc, #36]	; (8006ce4 <Get_SerialNum+0x50>)
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 f814 	bl	8006cec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006cc4:	2204      	movs	r2, #4
 8006cc6:	4908      	ldr	r1, [pc, #32]	; (8006ce8 <Get_SerialNum+0x54>)
 8006cc8:	68b8      	ldr	r0, [r7, #8]
 8006cca:	f000 f80f 	bl	8006cec <IntToUnicode>
  }
}
 8006cce:	bf00      	nop
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	1fff7a10 	.word	0x1fff7a10
 8006cdc:	1fff7a14 	.word	0x1fff7a14
 8006ce0:	1fff7a18 	.word	0x1fff7a18
 8006ce4:	20000102 	.word	0x20000102
 8006ce8:	20000112 	.word	0x20000112

08006cec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b087      	sub	sp, #28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006cfe:	2300      	movs	r3, #0
 8006d00:	75fb      	strb	r3, [r7, #23]
 8006d02:	e027      	b.n	8006d54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	0f1b      	lsrs	r3, r3, #28
 8006d08:	2b09      	cmp	r3, #9
 8006d0a:	d80b      	bhi.n	8006d24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	0f1b      	lsrs	r3, r3, #28
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	4619      	mov	r1, r3
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	440b      	add	r3, r1
 8006d1c:	3230      	adds	r2, #48	; 0x30
 8006d1e:	b2d2      	uxtb	r2, r2
 8006d20:	701a      	strb	r2, [r3, #0]
 8006d22:	e00a      	b.n	8006d3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	0f1b      	lsrs	r3, r3, #28
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	7dfb      	ldrb	r3, [r7, #23]
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	4619      	mov	r1, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	440b      	add	r3, r1
 8006d34:	3237      	adds	r2, #55	; 0x37
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	011b      	lsls	r3, r3, #4
 8006d3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006d40:	7dfb      	ldrb	r3, [r7, #23]
 8006d42:	005b      	lsls	r3, r3, #1
 8006d44:	3301      	adds	r3, #1
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	4413      	add	r3, r2
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
 8006d50:	3301      	adds	r3, #1
 8006d52:	75fb      	strb	r3, [r7, #23]
 8006d54:	7dfa      	ldrb	r2, [r7, #23]
 8006d56:	79fb      	ldrb	r3, [r7, #7]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d3d3      	bcc.n	8006d04 <IntToUnicode+0x18>
  }
}
 8006d5c:	bf00      	nop
 8006d5e:	bf00      	nop
 8006d60:	371c      	adds	r7, #28
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
	...

08006d6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08a      	sub	sp, #40	; 0x28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d74:	f107 0314 	add.w	r3, r7, #20
 8006d78:	2200      	movs	r2, #0
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	605a      	str	r2, [r3, #4]
 8006d7e:	609a      	str	r2, [r3, #8]
 8006d80:	60da      	str	r2, [r3, #12]
 8006d82:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d8c:	d147      	bne.n	8006e1e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d8e:	2300      	movs	r3, #0
 8006d90:	613b      	str	r3, [r7, #16]
 8006d92:	4b25      	ldr	r3, [pc, #148]	; (8006e28 <HAL_PCD_MspInit+0xbc>)
 8006d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d96:	4a24      	ldr	r2, [pc, #144]	; (8006e28 <HAL_PCD_MspInit+0xbc>)
 8006d98:	f043 0301 	orr.w	r3, r3, #1
 8006d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d9e:	4b22      	ldr	r3, [pc, #136]	; (8006e28 <HAL_PCD_MspInit+0xbc>)
 8006da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	613b      	str	r3, [r7, #16]
 8006da8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006daa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006db0:	2300      	movs	r3, #0
 8006db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db4:	2300      	movs	r3, #0
 8006db6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006db8:	f107 0314 	add.w	r3, r7, #20
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	481b      	ldr	r0, [pc, #108]	; (8006e2c <HAL_PCD_MspInit+0xc0>)
 8006dc0:	f7fa fcc6 	bl	8001750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006dc4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dca:	2302      	movs	r3, #2
 8006dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006dd6:	230a      	movs	r3, #10
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dda:	f107 0314 	add.w	r3, r7, #20
 8006dde:	4619      	mov	r1, r3
 8006de0:	4812      	ldr	r0, [pc, #72]	; (8006e2c <HAL_PCD_MspInit+0xc0>)
 8006de2:	f7fa fcb5 	bl	8001750 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006de6:	4b10      	ldr	r3, [pc, #64]	; (8006e28 <HAL_PCD_MspInit+0xbc>)
 8006de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dea:	4a0f      	ldr	r2, [pc, #60]	; (8006e28 <HAL_PCD_MspInit+0xbc>)
 8006dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df0:	6353      	str	r3, [r2, #52]	; 0x34
 8006df2:	2300      	movs	r3, #0
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	4b0c      	ldr	r3, [pc, #48]	; (8006e28 <HAL_PCD_MspInit+0xbc>)
 8006df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dfa:	4a0b      	ldr	r2, [pc, #44]	; (8006e28 <HAL_PCD_MspInit+0xbc>)
 8006dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e00:	6453      	str	r3, [r2, #68]	; 0x44
 8006e02:	4b09      	ldr	r3, [pc, #36]	; (8006e28 <HAL_PCD_MspInit+0xbc>)
 8006e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006e0e:	2200      	movs	r2, #0
 8006e10:	2100      	movs	r1, #0
 8006e12:	2043      	movs	r0, #67	; 0x43
 8006e14:	f7fa fc65 	bl	80016e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006e18:	2043      	movs	r0, #67	; 0x43
 8006e1a:	f7fa fc7e 	bl	800171a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006e1e:	bf00      	nop
 8006e20:	3728      	adds	r7, #40	; 0x28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	40023800 	.word	0x40023800
 8006e2c:	40020000 	.word	0x40020000

08006e30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006e44:	4619      	mov	r1, r3
 8006e46:	4610      	mov	r0, r2
 8006e48:	f7fe fc37 	bl	80056ba <USBD_LL_SetupStage>
}
 8006e4c:	bf00      	nop
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006e66:	78fa      	ldrb	r2, [r7, #3]
 8006e68:	6879      	ldr	r1, [r7, #4]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	4413      	add	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	440b      	add	r3, r1
 8006e74:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	78fb      	ldrb	r3, [r7, #3]
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	f7fe fc71 	bl	8005764 <USBD_LL_DataOutStage>
}
 8006e82:	bf00      	nop
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	460b      	mov	r3, r1
 8006e94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006e9c:	78fa      	ldrb	r2, [r7, #3]
 8006e9e:	6879      	ldr	r1, [r7, #4]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	4413      	add	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	440b      	add	r3, r1
 8006eaa:	334c      	adds	r3, #76	; 0x4c
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	78fb      	ldrb	r3, [r7, #3]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	f7fe fd0a 	bl	80058ca <USBD_LL_DataInStage>
}
 8006eb6:	bf00      	nop
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b082      	sub	sp, #8
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fe fe3e 	bl	8005b4e <USBD_LL_SOF>
}
 8006ed2:	bf00      	nop
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b084      	sub	sp, #16
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d102      	bne.n	8006ef4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	73fb      	strb	r3, [r7, #15]
 8006ef2:	e008      	b.n	8006f06 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d102      	bne.n	8006f02 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006efc:	2301      	movs	r3, #1
 8006efe:	73fb      	strb	r3, [r7, #15]
 8006f00:	e001      	b.n	8006f06 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006f02:	f7f9 fd6b 	bl	80009dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f0c:	7bfa      	ldrb	r2, [r7, #15]
 8006f0e:	4611      	mov	r1, r2
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7fe fdde 	bl	8005ad2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7fe fd86 	bl	8005a2e <USBD_LL_Reset>
}
 8006f22:	bf00      	nop
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
	...

08006f2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe fdd9 	bl	8005af2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	6812      	ldr	r2, [r2, #0]
 8006f4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f52:	f043 0301 	orr.w	r3, r3, #1
 8006f56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a1b      	ldr	r3, [r3, #32]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d005      	beq.n	8006f6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f60:	4b04      	ldr	r3, [pc, #16]	; (8006f74 <HAL_PCD_SuspendCallback+0x48>)
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	4a03      	ldr	r2, [pc, #12]	; (8006f74 <HAL_PCD_SuspendCallback+0x48>)
 8006f66:	f043 0306 	orr.w	r3, r3, #6
 8006f6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006f6c:	bf00      	nop
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	e000ed00 	.word	0xe000ed00

08006f78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fe fdc9 	bl	8005b1e <USBD_LL_Resume>
}
 8006f8c:	bf00      	nop
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006fa6:	78fa      	ldrb	r2, [r7, #3]
 8006fa8:	4611      	mov	r1, r2
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe fe21 	bl	8005bf2 <USBD_LL_IsoOUTIncomplete>
}
 8006fb0:	bf00      	nop
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006fca:	78fa      	ldrb	r2, [r7, #3]
 8006fcc:	4611      	mov	r1, r2
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fe fddd 	bl	8005b8e <USBD_LL_IsoINIncomplete>
}
 8006fd4:	bf00      	nop
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fe fe33 	bl	8005c56 <USBD_LL_DevConnected>
}
 8006ff0:	bf00      	nop
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007006:	4618      	mov	r0, r3
 8007008:	f7fe fe30 	bl	8005c6c <USBD_LL_DevDisconnected>
}
 800700c:	bf00      	nop
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d13c      	bne.n	800709e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007024:	4a20      	ldr	r2, [pc, #128]	; (80070a8 <USBD_LL_Init+0x94>)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a1e      	ldr	r2, [pc, #120]	; (80070a8 <USBD_LL_Init+0x94>)
 8007030:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007034:	4b1c      	ldr	r3, [pc, #112]	; (80070a8 <USBD_LL_Init+0x94>)
 8007036:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800703a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800703c:	4b1a      	ldr	r3, [pc, #104]	; (80070a8 <USBD_LL_Init+0x94>)
 800703e:	2204      	movs	r2, #4
 8007040:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007042:	4b19      	ldr	r3, [pc, #100]	; (80070a8 <USBD_LL_Init+0x94>)
 8007044:	2202      	movs	r2, #2
 8007046:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007048:	4b17      	ldr	r3, [pc, #92]	; (80070a8 <USBD_LL_Init+0x94>)
 800704a:	2200      	movs	r2, #0
 800704c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800704e:	4b16      	ldr	r3, [pc, #88]	; (80070a8 <USBD_LL_Init+0x94>)
 8007050:	2202      	movs	r2, #2
 8007052:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007054:	4b14      	ldr	r3, [pc, #80]	; (80070a8 <USBD_LL_Init+0x94>)
 8007056:	2200      	movs	r2, #0
 8007058:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800705a:	4b13      	ldr	r3, [pc, #76]	; (80070a8 <USBD_LL_Init+0x94>)
 800705c:	2200      	movs	r2, #0
 800705e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007060:	4b11      	ldr	r3, [pc, #68]	; (80070a8 <USBD_LL_Init+0x94>)
 8007062:	2200      	movs	r2, #0
 8007064:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007066:	4b10      	ldr	r3, [pc, #64]	; (80070a8 <USBD_LL_Init+0x94>)
 8007068:	2201      	movs	r2, #1
 800706a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800706c:	4b0e      	ldr	r3, [pc, #56]	; (80070a8 <USBD_LL_Init+0x94>)
 800706e:	2200      	movs	r2, #0
 8007070:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007072:	480d      	ldr	r0, [pc, #52]	; (80070a8 <USBD_LL_Init+0x94>)
 8007074:	f7fa fd21 	bl	8001aba <HAL_PCD_Init>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800707e:	f7f9 fcad 	bl	80009dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007082:	2180      	movs	r1, #128	; 0x80
 8007084:	4808      	ldr	r0, [pc, #32]	; (80070a8 <USBD_LL_Init+0x94>)
 8007086:	f7fb ff60 	bl	8002f4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800708a:	2240      	movs	r2, #64	; 0x40
 800708c:	2100      	movs	r1, #0
 800708e:	4806      	ldr	r0, [pc, #24]	; (80070a8 <USBD_LL_Init+0x94>)
 8007090:	f7fb ff14 	bl	8002ebc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007094:	2280      	movs	r2, #128	; 0x80
 8007096:	2101      	movs	r1, #1
 8007098:	4803      	ldr	r0, [pc, #12]	; (80070a8 <USBD_LL_Init+0x94>)
 800709a:	f7fb ff0f 	bl	8002ebc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	200006b4 	.word	0x200006b4

080070ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fa fe16 	bl	8001cf4 <HAL_PCD_Start>
 80070c8:	4603      	mov	r3, r0
 80070ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 f930 	bl	8007334 <USBD_Get_USB_Status>
 80070d4:	4603      	mov	r3, r0
 80070d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b084      	sub	sp, #16
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
 80070ea:	4608      	mov	r0, r1
 80070ec:	4611      	mov	r1, r2
 80070ee:	461a      	mov	r2, r3
 80070f0:	4603      	mov	r3, r0
 80070f2:	70fb      	strb	r3, [r7, #3]
 80070f4:	460b      	mov	r3, r1
 80070f6:	70bb      	strb	r3, [r7, #2]
 80070f8:	4613      	mov	r3, r2
 80070fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800710a:	78bb      	ldrb	r3, [r7, #2]
 800710c:	883a      	ldrh	r2, [r7, #0]
 800710e:	78f9      	ldrb	r1, [r7, #3]
 8007110:	f7fb fae7 	bl	80026e2 <HAL_PCD_EP_Open>
 8007114:	4603      	mov	r3, r0
 8007116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007118:	7bfb      	ldrb	r3, [r7, #15]
 800711a:	4618      	mov	r0, r3
 800711c:	f000 f90a 	bl	8007334 <USBD_Get_USB_Status>
 8007120:	4603      	mov	r3, r0
 8007122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007124:	7bbb      	ldrb	r3, [r7, #14]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	460b      	mov	r3, r1
 8007138:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007148:	78fa      	ldrb	r2, [r7, #3]
 800714a:	4611      	mov	r1, r2
 800714c:	4618      	mov	r0, r3
 800714e:	f7fb fb30 	bl	80027b2 <HAL_PCD_EP_Close>
 8007152:	4603      	mov	r3, r0
 8007154:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007156:	7bfb      	ldrb	r3, [r7, #15]
 8007158:	4618      	mov	r0, r3
 800715a:	f000 f8eb 	bl	8007334 <USBD_Get_USB_Status>
 800715e:	4603      	mov	r3, r0
 8007160:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007162:	7bbb      	ldrb	r3, [r7, #14]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	460b      	mov	r3, r1
 8007176:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007186:	78fa      	ldrb	r2, [r7, #3]
 8007188:	4611      	mov	r1, r2
 800718a:	4618      	mov	r0, r3
 800718c:	f7fb fbf0 	bl	8002970 <HAL_PCD_EP_SetStall>
 8007190:	4603      	mov	r3, r0
 8007192:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007194:	7bfb      	ldrb	r3, [r7, #15]
 8007196:	4618      	mov	r0, r3
 8007198:	f000 f8cc 	bl	8007334 <USBD_Get_USB_Status>
 800719c:	4603      	mov	r3, r0
 800719e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b084      	sub	sp, #16
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
 80071b2:	460b      	mov	r3, r1
 80071b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071c4:	78fa      	ldrb	r2, [r7, #3]
 80071c6:	4611      	mov	r1, r2
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7fb fc35 	bl	8002a38 <HAL_PCD_EP_ClrStall>
 80071ce:	4603      	mov	r3, r0
 80071d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071d2:	7bfb      	ldrb	r3, [r7, #15]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 f8ad 	bl	8007334 <USBD_Get_USB_Status>
 80071da:	4603      	mov	r3, r0
 80071dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071de:	7bbb      	ldrb	r3, [r7, #14]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	460b      	mov	r3, r1
 80071f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80071fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007200:	2b00      	cmp	r3, #0
 8007202:	da0b      	bge.n	800721c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007204:	78fb      	ldrb	r3, [r7, #3]
 8007206:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800720a:	68f9      	ldr	r1, [r7, #12]
 800720c:	4613      	mov	r3, r2
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	4413      	add	r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	440b      	add	r3, r1
 8007216:	333e      	adds	r3, #62	; 0x3e
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	e00b      	b.n	8007234 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800721c:	78fb      	ldrb	r3, [r7, #3]
 800721e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007222:	68f9      	ldr	r1, [r7, #12]
 8007224:	4613      	mov	r3, r2
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	4413      	add	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	440b      	add	r3, r1
 800722e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007232:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007234:	4618      	mov	r0, r3
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800724c:	2300      	movs	r3, #0
 800724e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800725a:	78fa      	ldrb	r2, [r7, #3]
 800725c:	4611      	mov	r1, r2
 800725e:	4618      	mov	r0, r3
 8007260:	f7fb fa1a 	bl	8002698 <HAL_PCD_SetAddress>
 8007264:	4603      	mov	r3, r0
 8007266:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007268:	7bfb      	ldrb	r3, [r7, #15]
 800726a:	4618      	mov	r0, r3
 800726c:	f000 f862 	bl	8007334 <USBD_Get_USB_Status>
 8007270:	4603      	mov	r3, r0
 8007272:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007274:	7bbb      	ldrb	r3, [r7, #14]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b086      	sub	sp, #24
 8007282:	af00      	add	r7, sp, #0
 8007284:	60f8      	str	r0, [r7, #12]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	603b      	str	r3, [r7, #0]
 800728a:	460b      	mov	r3, r1
 800728c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800729c:	7af9      	ldrb	r1, [r7, #11]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	f7fb fb1b 	bl	80028dc <HAL_PCD_EP_Transmit>
 80072a6:	4603      	mov	r3, r0
 80072a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072aa:	7dfb      	ldrb	r3, [r7, #23]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 f841 	bl	8007334 <USBD_Get_USB_Status>
 80072b2:	4603      	mov	r3, r0
 80072b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80072b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3718      	adds	r7, #24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	607a      	str	r2, [r7, #4]
 80072ca:	603b      	str	r3, [r7, #0]
 80072cc:	460b      	mov	r3, r1
 80072ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80072de:	7af9      	ldrb	r1, [r7, #11]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	f7fb faaf 	bl	8002846 <HAL_PCD_EP_Receive>
 80072e8:	4603      	mov	r3, r0
 80072ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072ec:	7dfb      	ldrb	r3, [r7, #23]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 f820 	bl	8007334 <USBD_Get_USB_Status>
 80072f4:	4603      	mov	r3, r0
 80072f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80072f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
	...

08007304 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800730c:	4b03      	ldr	r3, [pc, #12]	; (800731c <USBD_static_malloc+0x18>)
}
 800730e:	4618      	mov	r0, r3
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	20000bc0 	.word	0x20000bc0

08007320 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]

}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	4603      	mov	r3, r0
 800733c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007342:	79fb      	ldrb	r3, [r7, #7]
 8007344:	2b03      	cmp	r3, #3
 8007346:	d817      	bhi.n	8007378 <USBD_Get_USB_Status+0x44>
 8007348:	a201      	add	r2, pc, #4	; (adr r2, 8007350 <USBD_Get_USB_Status+0x1c>)
 800734a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734e:	bf00      	nop
 8007350:	08007361 	.word	0x08007361
 8007354:	08007367 	.word	0x08007367
 8007358:	0800736d 	.word	0x0800736d
 800735c:	08007373 	.word	0x08007373
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	73fb      	strb	r3, [r7, #15]
    break;
 8007364:	e00b      	b.n	800737e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007366:	2303      	movs	r3, #3
 8007368:	73fb      	strb	r3, [r7, #15]
    break;
 800736a:	e008      	b.n	800737e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800736c:	2301      	movs	r3, #1
 800736e:	73fb      	strb	r3, [r7, #15]
    break;
 8007370:	e005      	b.n	800737e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007372:	2303      	movs	r3, #3
 8007374:	73fb      	strb	r3, [r7, #15]
    break;
 8007376:	e002      	b.n	800737e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007378:	2303      	movs	r3, #3
 800737a:	73fb      	strb	r3, [r7, #15]
    break;
 800737c:	bf00      	nop
  }
  return usb_status;
 800737e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007380:	4618      	mov	r0, r3
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <__libc_init_array>:
 800738c:	b570      	push	{r4, r5, r6, lr}
 800738e:	4d0d      	ldr	r5, [pc, #52]	; (80073c4 <__libc_init_array+0x38>)
 8007390:	4c0d      	ldr	r4, [pc, #52]	; (80073c8 <__libc_init_array+0x3c>)
 8007392:	1b64      	subs	r4, r4, r5
 8007394:	10a4      	asrs	r4, r4, #2
 8007396:	2600      	movs	r6, #0
 8007398:	42a6      	cmp	r6, r4
 800739a:	d109      	bne.n	80073b0 <__libc_init_array+0x24>
 800739c:	4d0b      	ldr	r5, [pc, #44]	; (80073cc <__libc_init_array+0x40>)
 800739e:	4c0c      	ldr	r4, [pc, #48]	; (80073d0 <__libc_init_array+0x44>)
 80073a0:	f000 f820 	bl	80073e4 <_init>
 80073a4:	1b64      	subs	r4, r4, r5
 80073a6:	10a4      	asrs	r4, r4, #2
 80073a8:	2600      	movs	r6, #0
 80073aa:	42a6      	cmp	r6, r4
 80073ac:	d105      	bne.n	80073ba <__libc_init_array+0x2e>
 80073ae:	bd70      	pop	{r4, r5, r6, pc}
 80073b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073b4:	4798      	blx	r3
 80073b6:	3601      	adds	r6, #1
 80073b8:	e7ee      	b.n	8007398 <__libc_init_array+0xc>
 80073ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80073be:	4798      	blx	r3
 80073c0:	3601      	adds	r6, #1
 80073c2:	e7f2      	b.n	80073aa <__libc_init_array+0x1e>
 80073c4:	08007444 	.word	0x08007444
 80073c8:	08007444 	.word	0x08007444
 80073cc:	08007444 	.word	0x08007444
 80073d0:	08007448 	.word	0x08007448

080073d4 <memset>:
 80073d4:	4402      	add	r2, r0
 80073d6:	4603      	mov	r3, r0
 80073d8:	4293      	cmp	r3, r2
 80073da:	d100      	bne.n	80073de <memset+0xa>
 80073dc:	4770      	bx	lr
 80073de:	f803 1b01 	strb.w	r1, [r3], #1
 80073e2:	e7f9      	b.n	80073d8 <memset+0x4>

080073e4 <_init>:
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	bf00      	nop
 80073e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ea:	bc08      	pop	{r3}
 80073ec:	469e      	mov	lr, r3
 80073ee:	4770      	bx	lr

080073f0 <_fini>:
 80073f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f2:	bf00      	nop
 80073f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f6:	bc08      	pop	{r3}
 80073f8:	469e      	mov	lr, r3
 80073fa:	4770      	bx	lr
