
TEST6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037f0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800397c  0800397c  0001397c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039c4  080039c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080039c4  080039c4  000139c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039cc  080039cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039cc  080039cc  000139cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039d0  080039d0  000139d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  080039e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080039e0  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e699  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c6b  00000000  00000000  0002e6d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00030340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  00030f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8c8  00000000  00000000  00031b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d682  00000000  00000000  0004c410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af17c  00000000  00000000  00059a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108c0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033c4  00000000  00000000  00108c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003964 	.word	0x08003964

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003964 	.word	0x08003964

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fab0 	bl	8000a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f807 	bl	80004ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8fc 	bl	80006d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f8ca 	bl	8000678 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004e4:	f000 f852 	bl	800058c <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <main+0x18>

080004ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b096      	sub	sp, #88	; 0x58
 80004ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f0:	f107 0314 	add.w	r3, r7, #20
 80004f4:	2244      	movs	r2, #68	; 0x44
 80004f6:	2100      	movs	r1, #0
 80004f8:	4618      	mov	r0, r3
 80004fa:	f003 fa2b 	bl	8003954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fe:	463b      	mov	r3, r7
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800050c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000510:	f001 fd42 	bl	8001f98 <HAL_PWREx_ControlVoltageScaling>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800051a:	f000 f967 	bl	80007ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800051e:	2310      	movs	r3, #16
 8000520:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000522:	2301      	movs	r3, #1
 8000524:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800052a:	2360      	movs	r3, #96	; 0x60
 800052c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052e:	2302      	movs	r3, #2
 8000530:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000532:	2301      	movs	r3, #1
 8000534:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 800053a:	2328      	movs	r3, #40	; 0x28
 800053c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800053e:	2302      	movs	r3, #2
 8000540:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000542:	2302      	movs	r3, #2
 8000544:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	4618      	mov	r0, r3
 800054c:	f001 fd7a 	bl	8002044 <HAL_RCC_OscConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000556:	f000 f949 	bl	80007ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055a:	230f      	movs	r3, #15
 800055c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800055e:	2303      	movs	r3, #3
 8000560:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800056e:	463b      	mov	r3, r7
 8000570:	2104      	movs	r1, #4
 8000572:	4618      	mov	r0, r3
 8000574:	f002 f9c8 	bl	8002908 <HAL_RCC_ClockConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800057e:	f000 f935 	bl	80007ec <Error_Handler>
  }
}
 8000582:	bf00      	nop
 8000584:	3758      	adds	r7, #88	; 0x58
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000592:	f107 031c 	add.w	r3, r7, #28
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
 80005ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005ae:	4b2f      	ldr	r3, [pc, #188]	; (800066c <MX_ADC1_Init+0xe0>)
 80005b0:	4a2f      	ldr	r2, [pc, #188]	; (8000670 <MX_ADC1_Init+0xe4>)
 80005b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005b4:	4b2d      	ldr	r3, [pc, #180]	; (800066c <MX_ADC1_Init+0xe0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ba:	4b2c      	ldr	r3, [pc, #176]	; (800066c <MX_ADC1_Init+0xe0>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c0:	4b2a      	ldr	r3, [pc, #168]	; (800066c <MX_ADC1_Init+0xe0>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005c6:	4b29      	ldr	r3, [pc, #164]	; (800066c <MX_ADC1_Init+0xe0>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005cc:	4b27      	ldr	r3, [pc, #156]	; (800066c <MX_ADC1_Init+0xe0>)
 80005ce:	2204      	movs	r2, #4
 80005d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005d2:	4b26      	ldr	r3, [pc, #152]	; (800066c <MX_ADC1_Init+0xe0>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005d8:	4b24      	ldr	r3, [pc, #144]	; (800066c <MX_ADC1_Init+0xe0>)
 80005da:	2201      	movs	r2, #1
 80005dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005de:	4b23      	ldr	r3, [pc, #140]	; (800066c <MX_ADC1_Init+0xe0>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e4:	4b21      	ldr	r3, [pc, #132]	; (800066c <MX_ADC1_Init+0xe0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ec:	4b1f      	ldr	r3, [pc, #124]	; (800066c <MX_ADC1_Init+0xe0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f2:	4b1e      	ldr	r3, [pc, #120]	; (800066c <MX_ADC1_Init+0xe0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f8:	4b1c      	ldr	r3, [pc, #112]	; (800066c <MX_ADC1_Init+0xe0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000600:	4b1a      	ldr	r3, [pc, #104]	; (800066c <MX_ADC1_Init+0xe0>)
 8000602:	2200      	movs	r2, #0
 8000604:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <MX_ADC1_Init+0xe0>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800060e:	4817      	ldr	r0, [pc, #92]	; (800066c <MX_ADC1_Init+0xe0>)
 8000610:	f000 fc2e 	bl	8000e70 <HAL_ADC_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800061a:	f000 f8e7 	bl	80007ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4619      	mov	r1, r3
 8000628:	4810      	ldr	r0, [pc, #64]	; (800066c <MX_ADC1_Init+0xe0>)
 800062a:	f001 f993 	bl	8001954 <HAL_ADCEx_MultiModeConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000634:	f000 f8da 	bl	80007ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_ADC1_Init+0xe8>)
 800063a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800063c:	2306      	movs	r3, #6
 800063e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000644:	237f      	movs	r3, #127	; 0x7f
 8000646:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000648:	2304      	movs	r3, #4
 800064a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_ADC1_Init+0xe0>)
 8000656:	f000 fd5b 	bl	8001110 <HAL_ADC_ConfigChannel>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000660:	f000 f8c4 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	3728      	adds	r7, #40	; 0x28
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000028 	.word	0x20000028
 8000670:	50040000 	.word	0x50040000
 8000674:	14f00020 	.word	0x14f00020

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 800067e:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <MX_USART2_UART_Init+0x5c>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006bc:	f002 fcce 	bl	800305c <HAL_UART_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006c6:	f000 f891 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000008c 	.word	0x2000008c
 80006d4:	40004400 	.word	0x40004400

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	4b3c      	ldr	r3, [pc, #240]	; (80007e0 <MX_GPIO_Init+0x108>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	4a3b      	ldr	r2, [pc, #236]	; (80007e0 <MX_GPIO_Init+0x108>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fa:	4b39      	ldr	r3, [pc, #228]	; (80007e0 <MX_GPIO_Init+0x108>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	4b36      	ldr	r3, [pc, #216]	; (80007e0 <MX_GPIO_Init+0x108>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	4a35      	ldr	r2, [pc, #212]	; (80007e0 <MX_GPIO_Init+0x108>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000712:	4b33      	ldr	r3, [pc, #204]	; (80007e0 <MX_GPIO_Init+0x108>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b30      	ldr	r3, [pc, #192]	; (80007e0 <MX_GPIO_Init+0x108>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	4a2f      	ldr	r2, [pc, #188]	; (80007e0 <MX_GPIO_Init+0x108>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072a:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <MX_GPIO_Init+0x108>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <MX_GPIO_Init+0x108>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a29      	ldr	r2, [pc, #164]	; (80007e0 <MX_GPIO_Init+0x108>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <MX_GPIO_Init+0x108>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	21b0      	movs	r1, #176	; 0xb0
 8000752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000756:	f001 fbf9 	bl	8001f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000760:	4820      	ldr	r0, [pc, #128]	; (80007e4 <MX_GPIO_Init+0x10c>)
 8000762:	f001 fbf3 	bl	8001f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800076c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	481a      	ldr	r0, [pc, #104]	; (80007e8 <MX_GPIO_Init+0x110>)
 800077e:	f001 fa73 	bl	8001c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000782:	23b0      	movs	r3, #176	; 0xb0
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079c:	f001 fa64 	bl	8001c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80007a0:	2340      	movs	r3, #64	; 0x40
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b6:	f001 fa57 	bl	8001c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80007ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_GPIO_Init+0x10c>)
 80007d4:	f001 fa48 	bl	8001c68 <HAL_GPIO_Init>

}
 80007d8:	bf00      	nop
 80007da:	3728      	adds	r7, #40	; 0x28
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021000 	.word	0x40021000
 80007e4:	48000400 	.word	0x48000400
 80007e8:	48000800 	.word	0x48000800

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <Error_Handler+0x8>
	...

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <HAL_MspInit+0x44>)
 8000800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000802:	4a0e      	ldr	r2, [pc, #56]	; (800083c <HAL_MspInit+0x44>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6613      	str	r3, [r2, #96]	; 0x60
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <HAL_MspInit+0x44>)
 800080c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_MspInit+0x44>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_MspInit+0x44>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	6593      	str	r3, [r2, #88]	; 0x58
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_MspInit+0x44>)
 8000824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000

08000840 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a15      	ldr	r2, [pc, #84]	; (80008b4 <HAL_ADC_MspInit+0x74>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d124      	bne.n	80008ac <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_ADC_MspInit+0x78>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <HAL_ADC_MspInit+0x78>)
 8000868:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_ADC_MspInit+0x78>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_ADC_MspInit+0x78>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <HAL_ADC_MspInit+0x78>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_ADC_MspInit+0x78>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000892:	2301      	movs	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000896:	230b      	movs	r3, #11
 8000898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a8:	f001 f9de 	bl	8001c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	; 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	50040000 	.word	0x50040000
 80008b8:	40021000 	.word	0x40021000

080008bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b096      	sub	sp, #88	; 0x58
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	2234      	movs	r2, #52	; 0x34
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 f839 	bl	8003954 <memset>
  if(huart->Instance==USART2)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a1f      	ldr	r2, [pc, #124]	; (8000964 <HAL_UART_MspInit+0xa8>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d136      	bne.n	800095a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 fa29 	bl	8002d50 <HAL_RCCEx_PeriphCLKConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000904:	f7ff ff72 	bl	80007ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <HAL_UART_MspInit+0xac>)
 800090a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090c:	4a16      	ldr	r2, [pc, #88]	; (8000968 <HAL_UART_MspInit+0xac>)
 800090e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000912:	6593      	str	r3, [r2, #88]	; 0x58
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <HAL_UART_MspInit+0xac>)
 8000916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <HAL_UART_MspInit+0xac>)
 8000922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000924:	4a10      	ldr	r2, [pc, #64]	; (8000968 <HAL_UART_MspInit+0xac>)
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <HAL_UART_MspInit+0xac>)
 800092e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000938:	230c      	movs	r3, #12
 800093a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000948:	2307      	movs	r3, #7
 800094a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000950:	4619      	mov	r1, r3
 8000952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000956:	f001 f987 	bl	8001c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800095a:	bf00      	nop
 800095c:	3758      	adds	r7, #88	; 0x58
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40004400 	.word	0x40004400
 8000968:	40021000 	.word	0x40021000

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <NMI_Handler+0x4>

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 f89a 	bl	8000af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <SystemInit+0x20>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <SystemInit+0x20>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e8:	f7ff ffea 	bl	80009c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ee:	490d      	ldr	r1, [pc, #52]	; (8000a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <LoopForever+0xe>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a04:	4c0a      	ldr	r4, [pc, #40]	; (8000a30 <LoopForever+0x16>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a12:	f002 ff7b 	bl	800390c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a16:	f7ff fd5b 	bl	80004d0 <main>

08000a1a <LoopForever>:

LoopForever:
    b LoopForever
 8000a1a:	e7fe      	b.n	8000a1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a1c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a28:	080039d4 	.word	0x080039d4
  ldr r2, =_sbss
 8000a2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a30:	20000114 	.word	0x20000114

08000a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_2_IRQHandler>
	...

08000a38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <HAL_Init+0x3c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <HAL_Init+0x3c>)
 8000a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4e:	2003      	movs	r0, #3
 8000a50:	f001 f8d6 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a54:	2000      	movs	r0, #0
 8000a56:	f000 f80f 	bl	8000a78 <HAL_InitTick>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d002      	beq.n	8000a66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	71fb      	strb	r3, [r7, #7]
 8000a64:	e001      	b.n	8000a6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a66:	f7ff fec7 	bl	80007f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40022000 	.word	0x40022000

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a80:	2300      	movs	r3, #0
 8000a82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <HAL_InitTick+0x6c>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d023      	beq.n	8000ad4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <HAL_InitTick+0x70>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <HAL_InitTick+0x6c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4619      	mov	r1, r3
 8000a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 f8d3 	bl	8001c4e <HAL_SYSTICK_Config>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d10f      	bne.n	8000ace <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b0f      	cmp	r3, #15
 8000ab2:	d809      	bhi.n	8000ac8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	f001 f8ab 	bl	8001c16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <HAL_InitTick+0x74>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6013      	str	r3, [r2, #0]
 8000ac6:	e007      	b.n	8000ad8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	73fb      	strb	r3, [r7, #15]
 8000acc:	e004      	b.n	8000ad8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	73fb      	strb	r3, [r7, #15]
 8000ad2:	e001      	b.n	8000ad8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	20000004 	.word	0x20000004

08000af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_IncTick+0x20>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_IncTick+0x24>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <HAL_IncTick+0x24>)
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000110 	.word	0x20000110

08000b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <HAL_GetTick+0x14>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000110 	.word	0x20000110

08000b30 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	431a      	orrs	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	609a      	str	r2, [r3, #8]
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 8000b5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	3360      	adds	r3, #96	; 0x60
 8000baa:	461a      	mov	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4413      	add	r3, r2
 8000bb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <LL_ADC_SetOffset+0x44>)
 8000bba:	4013      	ands	r3, r2
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000bd0:	bf00      	nop
 8000bd2:	371c      	adds	r7, #28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	03fff000 	.word	0x03fff000

08000be0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	3360      	adds	r3, #96	; 0x60
 8000bee:	461a      	mov	r2, r3
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b087      	sub	sp, #28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	3360      	adds	r3, #96	; 0x60
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	431a      	orrs	r2, r3
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000c36:	bf00      	nop
 8000c38:	371c      	adds	r7, #28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	431a      	orrs	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	615a      	str	r2, [r3, #20]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b087      	sub	sp, #28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	3330      	adds	r3, #48	; 0x30
 8000c78:	461a      	mov	r2, r3
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	0a1b      	lsrs	r3, r3, #8
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	f003 030c 	and.w	r3, r3, #12
 8000c84:	4413      	add	r3, r2
 8000c86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	f003 031f 	and.w	r3, r3, #31
 8000c92:	211f      	movs	r1, #31
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	0e9b      	lsrs	r3, r3, #26
 8000ca0:	f003 011f 	and.w	r1, r3, #31
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	f003 031f 	and.w	r3, r3, #31
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000cb4:	bf00      	nop
 8000cb6:	371c      	adds	r7, #28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	3314      	adds	r3, #20
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	0e5b      	lsrs	r3, r3, #25
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	4413      	add	r3, r2
 8000cde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	0d1b      	lsrs	r3, r3, #20
 8000ce8:	f003 031f 	and.w	r3, r3, #31
 8000cec:	2107      	movs	r1, #7
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	401a      	ands	r2, r3
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	0d1b      	lsrs	r3, r3, #20
 8000cfa:	f003 031f 	and.w	r3, r3, #31
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	fa01 f303 	lsl.w	r3, r1, r3
 8000d04:	431a      	orrs	r2, r3
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000d0a:	bf00      	nop
 8000d0c:	371c      	adds	r7, #28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d30:	43db      	mvns	r3, r3
 8000d32:	401a      	ands	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0318 	and.w	r3, r3, #24
 8000d3a:	4908      	ldr	r1, [pc, #32]	; (8000d5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000d3c:	40d9      	lsrs	r1, r3
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	400b      	ands	r3, r1
 8000d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d46:	431a      	orrs	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	0007ffff 	.word	0x0007ffff

08000d60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000d70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	6093      	str	r3, [r2, #8]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d98:	d101      	bne.n	8000d9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e000      	b.n	8000da0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000dbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000dc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000de8:	d101      	bne.n	8000dee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000dea:	2301      	movs	r3, #1
 8000dec:	e000      	b.n	8000df0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d101      	bne.n	8000e14 <LL_ADC_IsEnabled+0x18>
 8000e10:	2301      	movs	r3, #1
 8000e12:	e000      	b.n	8000e16 <LL_ADC_IsEnabled+0x1a>
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	d101      	bne.n	8000e3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e36:	2301      	movs	r3, #1
 8000e38:	e000      	b.n	8000e3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f003 0308 	and.w	r3, r3, #8
 8000e58:	2b08      	cmp	r3, #8
 8000e5a:	d101      	bne.n	8000e60 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e131      	b.n	80010ee <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d109      	bne.n	8000eac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff fcd1 	bl	8000840 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff67 	bl	8000d84 <LL_ADC_IsDeepPowerDownEnabled>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d004      	beq.n	8000ec6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff4d 	bl	8000d60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff82 	bl	8000dd4 <LL_ADC_IsInternalRegulatorEnabled>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d115      	bne.n	8000f02 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff66 	bl	8000dac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000ee0:	4b85      	ldr	r3, [pc, #532]	; (80010f8 <HAL_ADC_Init+0x288>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	099b      	lsrs	r3, r3, #6
 8000ee6:	4a85      	ldr	r2, [pc, #532]	; (80010fc <HAL_ADC_Init+0x28c>)
 8000ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8000eec:	099b      	lsrs	r3, r3, #6
 8000eee:	3301      	adds	r3, #1
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000ef4:	e002      	b.n	8000efc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1f9      	bne.n	8000ef6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ff64 	bl	8000dd4 <LL_ADC_IsInternalRegulatorEnabled>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10d      	bne.n	8000f2e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f16:	f043 0210 	orr.w	r2, r3, #16
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f22:	f043 0201 	orr.w	r2, r3, #1
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff75 	bl	8000e22 <LL_ADC_REG_IsConversionOngoing>
 8000f38:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f3e:	f003 0310 	and.w	r3, r3, #16
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f040 80ca 	bne.w	80010dc <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f040 80c6 	bne.w	80010dc <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f54:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f58:	f043 0202 	orr.w	r2, r3, #2
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff49 	bl	8000dfc <LL_ADC_IsEnabled>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d110      	bne.n	8000f92 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f70:	4863      	ldr	r0, [pc, #396]	; (8001100 <HAL_ADC_Init+0x290>)
 8000f72:	f7ff ff43 	bl	8000dfc <LL_ADC_IsEnabled>
 8000f76:	4604      	mov	r4, r0
 8000f78:	4862      	ldr	r0, [pc, #392]	; (8001104 <HAL_ADC_Init+0x294>)
 8000f7a:	f7ff ff3f 	bl	8000dfc <LL_ADC_IsEnabled>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4323      	orrs	r3, r4
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d105      	bne.n	8000f92 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	485e      	ldr	r0, [pc, #376]	; (8001108 <HAL_ADC_Init+0x298>)
 8000f8e:	f7ff fdcf 	bl	8000b30 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	7e5b      	ldrb	r3, [r3, #25]
 8000f96:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f9c:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000fa2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000fa8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fb0:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d106      	bne.n	8000fce <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	045b      	lsls	r3, r3, #17
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d009      	beq.n	8000fea <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fda:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68da      	ldr	r2, [r3, #12]
 8000ff0:	4b46      	ldr	r3, [pc, #280]	; (800110c <HAL_ADC_Init+0x29c>)
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	69b9      	ldr	r1, [r7, #24]
 8000ffa:	430b      	orrs	r3, r1
 8000ffc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ff0d 	bl	8000e22 <LL_ADC_REG_IsConversionOngoing>
 8001008:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ff1a 	bl	8000e48 <LL_ADC_INJ_IsConversionOngoing>
 8001014:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d13d      	bne.n	8001098 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d13a      	bne.n	8001098 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001026:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800102e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800103e:	f023 0302 	bic.w	r3, r3, #2
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	69b9      	ldr	r1, [r7, #24]
 8001048:	430b      	orrs	r3, r1
 800104a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001052:	2b01      	cmp	r3, #1
 8001054:	d118      	bne.n	8001088 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001060:	f023 0304 	bic.w	r3, r3, #4
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800106c:	4311      	orrs	r1, r2
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001072:	4311      	orrs	r1, r2
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001078:	430a      	orrs	r2, r1
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f042 0201 	orr.w	r2, r2, #1
 8001084:	611a      	str	r2, [r3, #16]
 8001086:	e007      	b.n	8001098 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	691a      	ldr	r2, [r3, #16]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0201 	bic.w	r2, r2, #1
 8001096:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d10c      	bne.n	80010ba <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f023 010f 	bic.w	r1, r3, #15
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	1e5a      	subs	r2, r3, #1
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	631a      	str	r2, [r3, #48]	; 0x30
 80010b8:	e007      	b.n	80010ca <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 020f 	bic.w	r2, r2, #15
 80010c8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ce:	f023 0303 	bic.w	r3, r3, #3
 80010d2:	f043 0201 	orr.w	r2, r3, #1
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	655a      	str	r2, [r3, #84]	; 0x54
 80010da:	e007      	b.n	80010ec <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e0:	f043 0210 	orr.w	r2, r3, #16
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80010ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd90      	pop	{r4, r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000000 	.word	0x20000000
 80010fc:	053e2d63 	.word	0x053e2d63
 8001100:	50040000 	.word	0x50040000
 8001104:	50040100 	.word	0x50040100
 8001108:	50040300 	.word	0x50040300
 800110c:	fff0c007 	.word	0xfff0c007

08001110 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b0b6      	sub	sp, #216	; 0xd8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800112a:	2b01      	cmp	r3, #1
 800112c:	d101      	bne.n	8001132 <HAL_ADC_ConfigChannel+0x22>
 800112e:	2302      	movs	r3, #2
 8001130:	e3d5      	b.n	80018de <HAL_ADC_ConfigChannel+0x7ce>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2201      	movs	r2, #1
 8001136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fe6f 	bl	8000e22 <LL_ADC_REG_IsConversionOngoing>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	f040 83ba 	bne.w	80018c0 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b05      	cmp	r3, #5
 8001152:	d824      	bhi.n	800119e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	3b02      	subs	r3, #2
 800115a:	2b03      	cmp	r3, #3
 800115c:	d81b      	bhi.n	8001196 <HAL_ADC_ConfigChannel+0x86>
 800115e:	a201      	add	r2, pc, #4	; (adr r2, 8001164 <HAL_ADC_ConfigChannel+0x54>)
 8001160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001164:	08001175 	.word	0x08001175
 8001168:	0800117d 	.word	0x0800117d
 800116c:	08001185 	.word	0x08001185
 8001170:	0800118d 	.word	0x0800118d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	220c      	movs	r2, #12
 8001178:	605a      	str	r2, [r3, #4]
          break;
 800117a:	e011      	b.n	80011a0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	2212      	movs	r2, #18
 8001180:	605a      	str	r2, [r3, #4]
          break;
 8001182:	e00d      	b.n	80011a0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	2218      	movs	r2, #24
 8001188:	605a      	str	r2, [r3, #4]
          break;
 800118a:	e009      	b.n	80011a0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001192:	605a      	str	r2, [r3, #4]
          break;
 8001194:	e004      	b.n	80011a0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	2206      	movs	r2, #6
 800119a:	605a      	str	r2, [r3, #4]
          break;
 800119c:	e000      	b.n	80011a0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800119e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	6859      	ldr	r1, [r3, #4]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	f7ff fd5b 	bl	8000c68 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fe33 	bl	8000e22 <LL_ADC_REG_IsConversionOngoing>
 80011bc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fe3f 	bl	8000e48 <LL_ADC_INJ_IsConversionOngoing>
 80011ca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f040 81c1 	bne.w	800155a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f040 81bc 	bne.w	800155a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80011ea:	d10f      	bne.n	800120c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2200      	movs	r2, #0
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff fd62 	bl	8000cc0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fd1c 	bl	8000c42 <LL_ADC_SetSamplingTimeCommonConfig>
 800120a:	e00e      	b.n	800122a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	6819      	ldr	r1, [r3, #0]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	461a      	mov	r2, r3
 800121a:	f7ff fd51 	bl	8000cc0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fd0c 	bl	8000c42 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	695a      	ldr	r2, [r3, #20]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	08db      	lsrs	r3, r3, #3
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	2b04      	cmp	r3, #4
 800124a:	d00a      	beq.n	8001262 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	6919      	ldr	r1, [r3, #16]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800125c:	f7ff fc9c 	bl	8000b98 <LL_ADC_SetOffset>
 8001260:	e17b      	b.n	800155a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fcb9 	bl	8000be0 <LL_ADC_GetOffsetChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10a      	bne.n	800128e <HAL_ADC_ConfigChannel+0x17e>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fcae 	bl	8000be0 <LL_ADC_GetOffsetChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	0e9b      	lsrs	r3, r3, #26
 8001288:	f003 021f 	and.w	r2, r3, #31
 800128c:	e01e      	b.n	80012cc <HAL_ADC_ConfigChannel+0x1bc>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fca3 	bl	8000be0 <LL_ADC_GetOffsetChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80012a4:	fa93 f3a3 	rbit	r3, r3
 80012a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80012b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80012b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d101      	bne.n	80012c0 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80012bc:	2320      	movs	r3, #32
 80012be:	e004      	b.n	80012ca <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80012c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80012c4:	fab3 f383 	clz	r3, r3
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d105      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x1d4>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	0e9b      	lsrs	r3, r3, #26
 80012de:	f003 031f 	and.w	r3, r3, #31
 80012e2:	e018      	b.n	8001316 <HAL_ADC_ConfigChannel+0x206>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80012f0:	fa93 f3a3 	rbit	r3, r3
 80012f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80012f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001300:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001308:	2320      	movs	r3, #32
 800130a:	e004      	b.n	8001316 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800130c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001310:	fab3 f383 	clz	r3, r3
 8001314:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001316:	429a      	cmp	r2, r3
 8001318:	d106      	bne.n	8001328 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fc72 	bl	8000c0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2101      	movs	r1, #1
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fc56 	bl	8000be0 <LL_ADC_GetOffsetChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10a      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x244>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2101      	movs	r1, #1
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fc4b 	bl	8000be0 <LL_ADC_GetOffsetChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	0e9b      	lsrs	r3, r3, #26
 800134e:	f003 021f 	and.w	r2, r3, #31
 8001352:	e01e      	b.n	8001392 <HAL_ADC_ConfigChannel+0x282>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2101      	movs	r1, #1
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fc40 	bl	8000be0 <LL_ADC_GetOffsetChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800136a:	fa93 f3a3 	rbit	r3, r3
 800136e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001376:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800137a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001382:	2320      	movs	r3, #32
 8001384:	e004      	b.n	8001390 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001386:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800138a:	fab3 f383 	clz	r3, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800139a:	2b00      	cmp	r3, #0
 800139c:	d105      	bne.n	80013aa <HAL_ADC_ConfigChannel+0x29a>
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	0e9b      	lsrs	r3, r3, #26
 80013a4:	f003 031f 	and.w	r3, r3, #31
 80013a8:	e018      	b.n	80013dc <HAL_ADC_ConfigChannel+0x2cc>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013b6:	fa93 f3a3 	rbit	r3, r3
 80013ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80013be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80013c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80013c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80013ce:	2320      	movs	r3, #32
 80013d0:	e004      	b.n	80013dc <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80013d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013d6:	fab3 f383 	clz	r3, r3
 80013da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80013dc:	429a      	cmp	r2, r3
 80013de:	d106      	bne.n	80013ee <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2200      	movs	r2, #0
 80013e6:	2101      	movs	r1, #1
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fc0f 	bl	8000c0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2102      	movs	r1, #2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fbf3 	bl	8000be0 <LL_ADC_GetOffsetChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10a      	bne.n	800141a <HAL_ADC_ConfigChannel+0x30a>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2102      	movs	r1, #2
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fbe8 	bl	8000be0 <LL_ADC_GetOffsetChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	0e9b      	lsrs	r3, r3, #26
 8001414:	f003 021f 	and.w	r2, r3, #31
 8001418:	e01e      	b.n	8001458 <HAL_ADC_ConfigChannel+0x348>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2102      	movs	r1, #2
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fbdd 	bl	8000be0 <LL_ADC_GetOffsetChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001430:	fa93 f3a3 	rbit	r3, r3
 8001434:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001438:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800143c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001440:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001448:	2320      	movs	r3, #32
 800144a:	e004      	b.n	8001456 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800144c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001450:	fab3 f383 	clz	r3, r3
 8001454:	b2db      	uxtb	r3, r3
 8001456:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001460:	2b00      	cmp	r3, #0
 8001462:	d105      	bne.n	8001470 <HAL_ADC_ConfigChannel+0x360>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	0e9b      	lsrs	r3, r3, #26
 800146a:	f003 031f 	and.w	r3, r3, #31
 800146e:	e016      	b.n	800149e <HAL_ADC_ConfigChannel+0x38e>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001478:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800147c:	fa93 f3a3 	rbit	r3, r3
 8001480:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001482:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001484:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001488:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001490:	2320      	movs	r3, #32
 8001492:	e004      	b.n	800149e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001494:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001498:	fab3 f383 	clz	r3, r3
 800149c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800149e:	429a      	cmp	r2, r3
 80014a0:	d106      	bne.n	80014b0 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2200      	movs	r2, #0
 80014a8:	2102      	movs	r1, #2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fbae 	bl	8000c0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2103      	movs	r1, #3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fb92 	bl	8000be0 <LL_ADC_GetOffsetChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10a      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x3cc>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2103      	movs	r1, #3
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fb87 	bl	8000be0 <LL_ADC_GetOffsetChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	0e9b      	lsrs	r3, r3, #26
 80014d6:	f003 021f 	and.w	r2, r3, #31
 80014da:	e017      	b.n	800150c <HAL_ADC_ConfigChannel+0x3fc>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2103      	movs	r1, #3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fb7c 	bl	8000be0 <LL_ADC_GetOffsetChannel>
 80014e8:	4603      	mov	r3, r0
 80014ea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014ee:	fa93 f3a3 	rbit	r3, r3
 80014f2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80014f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014f6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80014f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80014fe:	2320      	movs	r3, #32
 8001500:	e003      	b.n	800150a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001502:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001504:	fab3 f383 	clz	r3, r3
 8001508:	b2db      	uxtb	r3, r3
 800150a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001514:	2b00      	cmp	r3, #0
 8001516:	d105      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x414>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	0e9b      	lsrs	r3, r3, #26
 800151e:	f003 031f 	and.w	r3, r3, #31
 8001522:	e011      	b.n	8001548 <HAL_ADC_ConfigChannel+0x438>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800152c:	fa93 f3a3 	rbit	r3, r3
 8001530:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001532:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001534:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800153c:	2320      	movs	r3, #32
 800153e:	e003      	b.n	8001548 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001542:	fab3 f383 	clz	r3, r3
 8001546:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001548:	429a      	cmp	r2, r3
 800154a:	d106      	bne.n	800155a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2200      	movs	r2, #0
 8001552:	2103      	movs	r1, #3
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fb59 	bl	8000c0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fc4c 	bl	8000dfc <LL_ADC_IsEnabled>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	f040 8140 	bne.w	80017ec <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	6819      	ldr	r1, [r3, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	461a      	mov	r2, r3
 800157a:	f7ff fbcd 	bl	8000d18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	4a8f      	ldr	r2, [pc, #572]	; (80017c0 <HAL_ADC_ConfigChannel+0x6b0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	f040 8131 	bne.w	80017ec <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10b      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x4a2>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	0e9b      	lsrs	r3, r3, #26
 80015a0:	3301      	adds	r3, #1
 80015a2:	f003 031f 	and.w	r3, r3, #31
 80015a6:	2b09      	cmp	r3, #9
 80015a8:	bf94      	ite	ls
 80015aa:	2301      	movls	r3, #1
 80015ac:	2300      	movhi	r3, #0
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	e019      	b.n	80015e6 <HAL_ADC_ConfigChannel+0x4d6>
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80015c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015c2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80015c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80015ca:	2320      	movs	r3, #32
 80015cc:	e003      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80015ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015d0:	fab3 f383 	clz	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	3301      	adds	r3, #1
 80015d8:	f003 031f 	and.w	r3, r3, #31
 80015dc:	2b09      	cmp	r3, #9
 80015de:	bf94      	ite	ls
 80015e0:	2301      	movls	r3, #1
 80015e2:	2300      	movhi	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d079      	beq.n	80016de <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d107      	bne.n	8001606 <HAL_ADC_ConfigChannel+0x4f6>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	0e9b      	lsrs	r3, r3, #26
 80015fc:	3301      	adds	r3, #1
 80015fe:	069b      	lsls	r3, r3, #26
 8001600:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001604:	e015      	b.n	8001632 <HAL_ADC_ConfigChannel+0x522>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800160e:	fa93 f3a3 	rbit	r3, r3
 8001612:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001616:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800161e:	2320      	movs	r3, #32
 8001620:	e003      	b.n	800162a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001624:	fab3 f383 	clz	r3, r3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	3301      	adds	r3, #1
 800162c:	069b      	lsls	r3, r3, #26
 800162e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800163a:	2b00      	cmp	r3, #0
 800163c:	d109      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x542>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	0e9b      	lsrs	r3, r3, #26
 8001644:	3301      	adds	r3, #1
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	2101      	movs	r1, #1
 800164c:	fa01 f303 	lsl.w	r3, r1, r3
 8001650:	e017      	b.n	8001682 <HAL_ADC_ConfigChannel+0x572>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800165a:	fa93 f3a3 	rbit	r3, r3
 800165e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001662:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800166a:	2320      	movs	r3, #32
 800166c:	e003      	b.n	8001676 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800166e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001670:	fab3 f383 	clz	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	3301      	adds	r3, #1
 8001678:	f003 031f 	and.w	r3, r3, #31
 800167c:	2101      	movs	r1, #1
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	ea42 0103 	orr.w	r1, r2, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10a      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x598>
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	0e9b      	lsrs	r3, r3, #26
 8001698:	3301      	adds	r3, #1
 800169a:	f003 021f 	and.w	r2, r3, #31
 800169e:	4613      	mov	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4413      	add	r3, r2
 80016a4:	051b      	lsls	r3, r3, #20
 80016a6:	e018      	b.n	80016da <HAL_ADC_ConfigChannel+0x5ca>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016b0:	fa93 f3a3 	rbit	r3, r3
 80016b4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80016b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80016ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80016c0:	2320      	movs	r3, #32
 80016c2:	e003      	b.n	80016cc <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80016c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016c6:	fab3 f383 	clz	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	3301      	adds	r3, #1
 80016ce:	f003 021f 	and.w	r2, r3, #31
 80016d2:	4613      	mov	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016da:	430b      	orrs	r3, r1
 80016dc:	e081      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d107      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x5ea>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	0e9b      	lsrs	r3, r3, #26
 80016f0:	3301      	adds	r3, #1
 80016f2:	069b      	lsls	r3, r3, #26
 80016f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016f8:	e015      	b.n	8001726 <HAL_ADC_ConfigChannel+0x616>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001702:	fa93 f3a3 	rbit	r3, r3
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800170c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001712:	2320      	movs	r3, #32
 8001714:	e003      	b.n	800171e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001718:	fab3 f383 	clz	r3, r3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	3301      	adds	r3, #1
 8001720:	069b      	lsls	r3, r3, #26
 8001722:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800172e:	2b00      	cmp	r3, #0
 8001730:	d109      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x636>
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	0e9b      	lsrs	r3, r3, #26
 8001738:	3301      	adds	r3, #1
 800173a:	f003 031f 	and.w	r3, r3, #31
 800173e:	2101      	movs	r1, #1
 8001740:	fa01 f303 	lsl.w	r3, r1, r3
 8001744:	e017      	b.n	8001776 <HAL_ADC_ConfigChannel+0x666>
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	fa93 f3a3 	rbit	r3, r3
 8001752:	61fb      	str	r3, [r7, #28]
  return result;
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800175e:	2320      	movs	r3, #32
 8001760:	e003      	b.n	800176a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	fab3 f383 	clz	r3, r3
 8001768:	b2db      	uxtb	r3, r3
 800176a:	3301      	adds	r3, #1
 800176c:	f003 031f 	and.w	r3, r3, #31
 8001770:	2101      	movs	r1, #1
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	ea42 0103 	orr.w	r1, r2, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10d      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x692>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	0e9b      	lsrs	r3, r3, #26
 800178c:	3301      	adds	r3, #1
 800178e:	f003 021f 	and.w	r2, r3, #31
 8001792:	4613      	mov	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	3b1e      	subs	r3, #30
 800179a:	051b      	lsls	r3, r3, #20
 800179c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017a0:	e01e      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x6d0>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	613b      	str	r3, [r7, #16]
  return result;
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d104      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80017ba:	2320      	movs	r3, #32
 80017bc:	e006      	b.n	80017cc <HAL_ADC_ConfigChannel+0x6bc>
 80017be:	bf00      	nop
 80017c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	fab3 f383 	clz	r3, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	3301      	adds	r3, #1
 80017ce:	f003 021f 	and.w	r2, r3, #31
 80017d2:	4613      	mov	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	3b1e      	subs	r3, #30
 80017da:	051b      	lsls	r3, r3, #20
 80017dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017e0:	430b      	orrs	r3, r1
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	6892      	ldr	r2, [r2, #8]
 80017e6:	4619      	mov	r1, r3
 80017e8:	f7ff fa6a 	bl	8000cc0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b3d      	ldr	r3, [pc, #244]	; (80018e8 <HAL_ADC_ConfigChannel+0x7d8>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d06c      	beq.n	80018d2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017f8:	483c      	ldr	r0, [pc, #240]	; (80018ec <HAL_ADC_ConfigChannel+0x7dc>)
 80017fa:	f7ff f9bf 	bl	8000b7c <LL_ADC_GetCommonPathInternalCh>
 80017fe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a3a      	ldr	r2, [pc, #232]	; (80018f0 <HAL_ADC_ConfigChannel+0x7e0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d127      	bne.n	800185c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800180c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001810:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d121      	bne.n	800185c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a35      	ldr	r2, [pc, #212]	; (80018f4 <HAL_ADC_ConfigChannel+0x7e4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d157      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001822:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001826:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800182a:	4619      	mov	r1, r3
 800182c:	482f      	ldr	r0, [pc, #188]	; (80018ec <HAL_ADC_ConfigChannel+0x7dc>)
 800182e:	f7ff f992 	bl	8000b56 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001832:	4b31      	ldr	r3, [pc, #196]	; (80018f8 <HAL_ADC_ConfigChannel+0x7e8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	099b      	lsrs	r3, r3, #6
 8001838:	4a30      	ldr	r2, [pc, #192]	; (80018fc <HAL_ADC_ConfigChannel+0x7ec>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	099b      	lsrs	r3, r3, #6
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800184c:	e002      	b.n	8001854 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3b01      	subs	r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f9      	bne.n	800184e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800185a:	e03a      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a27      	ldr	r2, [pc, #156]	; (8001900 <HAL_ADC_ConfigChannel+0x7f0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d113      	bne.n	800188e <HAL_ADC_ConfigChannel+0x77e>
 8001866:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800186a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10d      	bne.n	800188e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a1f      	ldr	r2, [pc, #124]	; (80018f4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d12a      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800187c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001880:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001884:	4619      	mov	r1, r3
 8001886:	4819      	ldr	r0, [pc, #100]	; (80018ec <HAL_ADC_ConfigChannel+0x7dc>)
 8001888:	f7ff f965 	bl	8000b56 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800188c:	e021      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1c      	ldr	r2, [pc, #112]	; (8001904 <HAL_ADC_ConfigChannel+0x7f4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d11c      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001898:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800189c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d116      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <HAL_ADC_ConfigChannel+0x7e4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d111      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018b6:	4619      	mov	r1, r3
 80018b8:	480c      	ldr	r0, [pc, #48]	; (80018ec <HAL_ADC_ConfigChannel+0x7dc>)
 80018ba:	f7ff f94c 	bl	8000b56 <LL_ADC_SetCommonPathInternalCh>
 80018be:	e008      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c4:	f043 0220 	orr.w	r2, r3, #32
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80018da:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80018de:	4618      	mov	r0, r3
 80018e0:	37d8      	adds	r7, #216	; 0xd8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	80080000 	.word	0x80080000
 80018ec:	50040300 	.word	0x50040300
 80018f0:	c7520000 	.word	0xc7520000
 80018f4:	50040000 	.word	0x50040000
 80018f8:	20000000 	.word	0x20000000
 80018fc:	053e2d63 	.word	0x053e2d63
 8001900:	cb840000 	.word	0xcb840000
 8001904:	80000001 	.word	0x80000001

08001908 <LL_ADC_IsEnabled>:
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <LL_ADC_IsEnabled+0x18>
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <LL_ADC_IsEnabled+0x1a>
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <LL_ADC_REG_IsConversionOngoing>:
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	2b04      	cmp	r3, #4
 8001940:	d101      	bne.n	8001946 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b09f      	sub	sp, #124	; 0x7c
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800196e:	2302      	movs	r3, #2
 8001970:	e089      	b.n	8001a86 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800197a:	2300      	movs	r3, #0
 800197c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800197e:	2300      	movs	r3, #0
 8001980:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a42      	ldr	r2, [pc, #264]	; (8001a90 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d102      	bne.n	8001992 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800198c:	4b41      	ldr	r3, [pc, #260]	; (8001a94 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	e001      	b.n	8001996 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10b      	bne.n	80019b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a0:	f043 0220 	orr.w	r2, r3, #32
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e068      	b.n	8001a86 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff ffb9 	bl	800192e <LL_ADC_REG_IsConversionOngoing>
 80019bc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff ffb3 	bl	800192e <LL_ADC_REG_IsConversionOngoing>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d14a      	bne.n	8001a64 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80019ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d147      	bne.n	8001a64 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80019d4:	4b30      	ldr	r3, [pc, #192]	; (8001a98 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80019d6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d027      	beq.n	8001a30 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80019e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6859      	ldr	r1, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019f2:	035b      	lsls	r3, r3, #13
 80019f4:	430b      	orrs	r3, r1
 80019f6:	431a      	orrs	r2, r3
 80019f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019fc:	4824      	ldr	r0, [pc, #144]	; (8001a90 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80019fe:	f7ff ff83 	bl	8001908 <LL_ADC_IsEnabled>
 8001a02:	4604      	mov	r4, r0
 8001a04:	4823      	ldr	r0, [pc, #140]	; (8001a94 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001a06:	f7ff ff7f 	bl	8001908 <LL_ADC_IsEnabled>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4323      	orrs	r3, r4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d132      	bne.n	8001a78 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001a1a:	f023 030f 	bic.w	r3, r3, #15
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	6811      	ldr	r1, [r2, #0]
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	6892      	ldr	r2, [r2, #8]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a2c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a2e:	e023      	b.n	8001a78 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a3a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a3c:	4814      	ldr	r0, [pc, #80]	; (8001a90 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001a3e:	f7ff ff63 	bl	8001908 <LL_ADC_IsEnabled>
 8001a42:	4604      	mov	r4, r0
 8001a44:	4813      	ldr	r0, [pc, #76]	; (8001a94 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001a46:	f7ff ff5f 	bl	8001908 <LL_ADC_IsEnabled>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4323      	orrs	r3, r4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d112      	bne.n	8001a78 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001a5a:	f023 030f 	bic.w	r3, r3, #15
 8001a5e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001a60:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a62:	e009      	b.n	8001a78 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a68:	f043 0220 	orr.w	r2, r3, #32
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001a76:	e000      	b.n	8001a7a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a78:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001a82:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	377c      	adds	r7, #124	; 0x7c
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd90      	pop	{r4, r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	50040000 	.word	0x50040000
 8001a94:	50040100 	.word	0x50040100
 8001a98:	50040300 	.word	0x50040300

08001a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	60d3      	str	r3, [r2, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <__NVIC_GetPriorityGrouping+0x18>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	f003 0307 	and.w	r3, r3, #7
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0a      	blt.n	8001b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	490c      	ldr	r1, [pc, #48]	; (8001b4c <__NVIC_SetPriority+0x4c>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b28:	e00a      	b.n	8001b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4908      	ldr	r1, [pc, #32]	; (8001b50 <__NVIC_SetPriority+0x50>)
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3b04      	subs	r3, #4
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	761a      	strb	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f1c3 0307 	rsb	r3, r3, #7
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	bf28      	it	cs
 8001b72:	2304      	movcs	r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d902      	bls.n	8001b84 <NVIC_EncodePriority+0x30>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b03      	subs	r3, #3
 8001b82:	e000      	b.n	8001b86 <NVIC_EncodePriority+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	4313      	orrs	r3, r2
         );
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bcc:	d301      	bcc.n	8001bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00f      	b.n	8001bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <SysTick_Config+0x40>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f7ff ff8e 	bl	8001b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <SysTick_Config+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bea:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <SysTick_Config+0x40>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	e000e010 	.word	0xe000e010

08001c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff47 	bl	8001a9c <__NVIC_SetPriorityGrouping>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c28:	f7ff ff5c 	bl	8001ae4 <__NVIC_GetPriorityGrouping>
 8001c2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	6978      	ldr	r0, [r7, #20]
 8001c34:	f7ff ff8e 	bl	8001b54 <NVIC_EncodePriority>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff5d 	bl	8001b00 <__NVIC_SetPriority>
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ffb0 	bl	8001bbc <SysTick_Config>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c76:	e14e      	b.n	8001f16 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	4013      	ands	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 8140 	beq.w	8001f10 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d005      	beq.n	8001ca8 <HAL_GPIO_Init+0x40>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d130      	bne.n	8001d0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cde:	2201      	movs	r2, #1
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4013      	ands	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	f003 0201 	and.w	r2, r3, #1
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d017      	beq.n	8001d46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	2203      	movs	r2, #3
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d123      	bne.n	8001d9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	220f      	movs	r2, #15
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	691a      	ldr	r2, [r3, #16]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	08da      	lsrs	r2, r3, #3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3208      	adds	r2, #8
 8001d94:	6939      	ldr	r1, [r7, #16]
 8001d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	2203      	movs	r2, #3
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 0203 	and.w	r2, r3, #3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 809a 	beq.w	8001f10 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ddc:	4b55      	ldr	r3, [pc, #340]	; (8001f34 <HAL_GPIO_Init+0x2cc>)
 8001dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de0:	4a54      	ldr	r2, [pc, #336]	; (8001f34 <HAL_GPIO_Init+0x2cc>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6613      	str	r3, [r2, #96]	; 0x60
 8001de8:	4b52      	ldr	r3, [pc, #328]	; (8001f34 <HAL_GPIO_Init+0x2cc>)
 8001dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001df4:	4a50      	ldr	r2, [pc, #320]	; (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	089b      	lsrs	r3, r3, #2
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	220f      	movs	r2, #15
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e1e:	d013      	beq.n	8001e48 <HAL_GPIO_Init+0x1e0>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a46      	ldr	r2, [pc, #280]	; (8001f3c <HAL_GPIO_Init+0x2d4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d00d      	beq.n	8001e44 <HAL_GPIO_Init+0x1dc>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a45      	ldr	r2, [pc, #276]	; (8001f40 <HAL_GPIO_Init+0x2d8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d007      	beq.n	8001e40 <HAL_GPIO_Init+0x1d8>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a44      	ldr	r2, [pc, #272]	; (8001f44 <HAL_GPIO_Init+0x2dc>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d101      	bne.n	8001e3c <HAL_GPIO_Init+0x1d4>
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e006      	b.n	8001e4a <HAL_GPIO_Init+0x1e2>
 8001e3c:	2307      	movs	r3, #7
 8001e3e:	e004      	b.n	8001e4a <HAL_GPIO_Init+0x1e2>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e002      	b.n	8001e4a <HAL_GPIO_Init+0x1e2>
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <HAL_GPIO_Init+0x1e2>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	f002 0203 	and.w	r2, r2, #3
 8001e50:	0092      	lsls	r2, r2, #2
 8001e52:	4093      	lsls	r3, r2
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e5a:	4937      	ldr	r1, [pc, #220]	; (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	089b      	lsrs	r3, r3, #2
 8001e60:	3302      	adds	r3, #2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e68:	4b37      	ldr	r3, [pc, #220]	; (8001f48 <HAL_GPIO_Init+0x2e0>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e8c:	4a2e      	ldr	r2, [pc, #184]	; (8001f48 <HAL_GPIO_Init+0x2e0>)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e92:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <HAL_GPIO_Init+0x2e0>)
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eb6:	4a24      	ldr	r2, [pc, #144]	; (8001f48 <HAL_GPIO_Init+0x2e0>)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ebc:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <HAL_GPIO_Init+0x2e0>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ee0:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <HAL_GPIO_Init+0x2e0>)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ee6:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <HAL_GPIO_Init+0x2e0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f0a:	4a0f      	ldr	r2, [pc, #60]	; (8001f48 <HAL_GPIO_Init+0x2e0>)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3301      	adds	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f47f aea9 	bne.w	8001c78 <HAL_GPIO_Init+0x10>
  }
}
 8001f26:	bf00      	nop
 8001f28:	bf00      	nop
 8001f2a:	371c      	adds	r7, #28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40010000 	.word	0x40010000
 8001f3c:	48000400 	.word	0x48000400
 8001f40:	48000800 	.word	0x48000800
 8001f44:	48000c00 	.word	0x48000c00
 8001f48:	40010400 	.word	0x40010400

08001f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	807b      	strh	r3, [r7, #2]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f5c:	787b      	ldrb	r3, [r7, #1]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f62:	887a      	ldrh	r2, [r7, #2]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f68:	e002      	b.n	8001f70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40007000 	.word	0x40007000

08001f98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa6:	d130      	bne.n	800200a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa8:	4b23      	ldr	r3, [pc, #140]	; (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fb4:	d038      	beq.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fbe:	4a1e      	ldr	r2, [pc, #120]	; (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fc4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2232      	movs	r2, #50	; 0x32
 8001fcc:	fb02 f303 	mul.w	r3, r2, r3
 8001fd0:	4a1b      	ldr	r2, [pc, #108]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	0c9b      	lsrs	r3, r3, #18
 8001fd8:	3301      	adds	r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fdc:	e002      	b.n	8001fe4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fe4:	4b14      	ldr	r3, [pc, #80]	; (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff0:	d102      	bne.n	8001ff8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f2      	bne.n	8001fde <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002004:	d110      	bne.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e00f      	b.n	800202a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002016:	d007      	beq.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002020:	4a05      	ldr	r2, [pc, #20]	; (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002026:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40007000 	.word	0x40007000
 800203c:	20000000 	.word	0x20000000
 8002040:	431bde83 	.word	0x431bde83

08002044 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d102      	bne.n	8002058 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	f000 bc4f 	b.w	80028f6 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002058:	4b97      	ldr	r3, [pc, #604]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 030c 	and.w	r3, r3, #12
 8002060:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002062:	4b95      	ldr	r3, [pc, #596]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 80e6 	beq.w	8002246 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d007      	beq.n	8002090 <HAL_RCC_OscConfig+0x4c>
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	2b0c      	cmp	r3, #12
 8002084:	f040 808d 	bne.w	80021a2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	2b01      	cmp	r3, #1
 800208c:	f040 8089 	bne.w	80021a2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002090:	4b89      	ldr	r3, [pc, #548]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d006      	beq.n	80020aa <HAL_RCC_OscConfig+0x66>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	f000 bc26 	b.w	80028f6 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020ae:	4b82      	ldr	r3, [pc, #520]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d004      	beq.n	80020c4 <HAL_RCC_OscConfig+0x80>
 80020ba:	4b7f      	ldr	r3, [pc, #508]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c2:	e005      	b.n	80020d0 <HAL_RCC_OscConfig+0x8c>
 80020c4:	4b7c      	ldr	r3, [pc, #496]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80020c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d224      	bcs.n	800211e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 fdd9 	bl	8002c90 <RCC_SetFlashLatencyFromMSIRange>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	f000 bc06 	b.w	80028f6 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ea:	4b73      	ldr	r3, [pc, #460]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a72      	ldr	r2, [pc, #456]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80020f0:	f043 0308 	orr.w	r3, r3, #8
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	4b70      	ldr	r3, [pc, #448]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	496d      	ldr	r1, [pc, #436]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002104:	4313      	orrs	r3, r2
 8002106:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002108:	4b6b      	ldr	r3, [pc, #428]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	021b      	lsls	r3, r3, #8
 8002116:	4968      	ldr	r1, [pc, #416]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002118:	4313      	orrs	r3, r2
 800211a:	604b      	str	r3, [r1, #4]
 800211c:	e025      	b.n	800216a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800211e:	4b66      	ldr	r3, [pc, #408]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a65      	ldr	r2, [pc, #404]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002124:	f043 0308 	orr.w	r3, r3, #8
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b63      	ldr	r3, [pc, #396]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	4960      	ldr	r1, [pc, #384]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800213c:	4b5e      	ldr	r3, [pc, #376]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	495b      	ldr	r1, [pc, #364]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d109      	bne.n	800216a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	4618      	mov	r0, r3
 800215c:	f000 fd98 	bl	8002c90 <RCC_SetFlashLatencyFromMSIRange>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e3c5      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800216a:	f000 fccd 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 800216e:	4602      	mov	r2, r0
 8002170:	4b51      	ldr	r3, [pc, #324]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	4950      	ldr	r1, [pc, #320]	; (80022bc <HAL_RCC_OscConfig+0x278>)
 800217c:	5ccb      	ldrb	r3, [r1, r3]
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	fa22 f303 	lsr.w	r3, r2, r3
 8002186:	4a4e      	ldr	r2, [pc, #312]	; (80022c0 <HAL_RCC_OscConfig+0x27c>)
 8002188:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800218a:	4b4e      	ldr	r3, [pc, #312]	; (80022c4 <HAL_RCC_OscConfig+0x280>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fc72 	bl	8000a78 <HAL_InitTick>
 8002194:	4603      	mov	r3, r0
 8002196:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002198:	7dfb      	ldrb	r3, [r7, #23]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d052      	beq.n	8002244 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800219e:	7dfb      	ldrb	r3, [r7, #23]
 80021a0:	e3a9      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d032      	beq.n	8002210 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021aa:	4b43      	ldr	r3, [pc, #268]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a42      	ldr	r2, [pc, #264]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021b6:	f7fe fcaf 	bl	8000b18 <HAL_GetTick>
 80021ba:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021be:	f7fe fcab 	bl	8000b18 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e392      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021d0:	4b39      	ldr	r3, [pc, #228]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021dc:	4b36      	ldr	r3, [pc, #216]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a35      	ldr	r2, [pc, #212]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80021e2:	f043 0308 	orr.w	r3, r3, #8
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	4b33      	ldr	r3, [pc, #204]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	4930      	ldr	r1, [pc, #192]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021fa:	4b2f      	ldr	r3, [pc, #188]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	492b      	ldr	r1, [pc, #172]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 800220a:	4313      	orrs	r3, r2
 800220c:	604b      	str	r3, [r1, #4]
 800220e:	e01a      	b.n	8002246 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002210:	4b29      	ldr	r3, [pc, #164]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a28      	ldr	r2, [pc, #160]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002216:	f023 0301 	bic.w	r3, r3, #1
 800221a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800221c:	f7fe fc7c 	bl	8000b18 <HAL_GetTick>
 8002220:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002224:	f7fe fc78 	bl	8000b18 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e35f      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002236:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x1e0>
 8002242:	e000      	b.n	8002246 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002244:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d073      	beq.n	800233a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	2b08      	cmp	r3, #8
 8002256:	d005      	beq.n	8002264 <HAL_RCC_OscConfig+0x220>
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	2b0c      	cmp	r3, #12
 800225c:	d10e      	bne.n	800227c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	2b03      	cmp	r3, #3
 8002262:	d10b      	bne.n	800227c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002264:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d063      	beq.n	8002338 <HAL_RCC_OscConfig+0x2f4>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d15f      	bne.n	8002338 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e33c      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002284:	d106      	bne.n	8002294 <HAL_RCC_OscConfig+0x250>
 8002286:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a0b      	ldr	r2, [pc, #44]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 800228c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e025      	b.n	80022e0 <HAL_RCC_OscConfig+0x29c>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800229c:	d114      	bne.n	80022c8 <HAL_RCC_OscConfig+0x284>
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80022a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b03      	ldr	r3, [pc, #12]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a02      	ldr	r2, [pc, #8]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e013      	b.n	80022e0 <HAL_RCC_OscConfig+0x29c>
 80022b8:	40021000 	.word	0x40021000
 80022bc:	0800397c 	.word	0x0800397c
 80022c0:	20000000 	.word	0x20000000
 80022c4:	20000004 	.word	0x20000004
 80022c8:	4b8f      	ldr	r3, [pc, #572]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a8e      	ldr	r2, [pc, #568]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b8c      	ldr	r3, [pc, #560]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a8b      	ldr	r2, [pc, #556]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80022da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d013      	beq.n	8002310 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe fc16 	bl	8000b18 <HAL_GetTick>
 80022ec:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f0:	f7fe fc12 	bl	8000b18 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	; 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e2f9      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002302:	4b81      	ldr	r3, [pc, #516]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0x2ac>
 800230e:	e014      	b.n	800233a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7fe fc02 	bl	8000b18 <HAL_GetTick>
 8002314:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002318:	f7fe fbfe 	bl	8000b18 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e2e5      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800232a:	4b77      	ldr	r3, [pc, #476]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x2d4>
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d060      	beq.n	8002408 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	2b04      	cmp	r3, #4
 800234a:	d005      	beq.n	8002358 <HAL_RCC_OscConfig+0x314>
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	2b0c      	cmp	r3, #12
 8002350:	d119      	bne.n	8002386 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d116      	bne.n	8002386 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002358:	4b6b      	ldr	r3, [pc, #428]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_RCC_OscConfig+0x32c>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e2c2      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002370:	4b65      	ldr	r3, [pc, #404]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	061b      	lsls	r3, r3, #24
 800237e:	4962      	ldr	r1, [pc, #392]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002384:	e040      	b.n	8002408 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d023      	beq.n	80023d6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238e:	4b5e      	ldr	r3, [pc, #376]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a5d      	ldr	r2, [pc, #372]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239a:	f7fe fbbd 	bl	8000b18 <HAL_GetTick>
 800239e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a2:	f7fe fbb9 	bl	8000b18 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e2a0      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b4:	4b54      	ldr	r3, [pc, #336]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c0:	4b51      	ldr	r3, [pc, #324]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	061b      	lsls	r3, r3, #24
 80023ce:	494e      	ldr	r1, [pc, #312]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]
 80023d4:	e018      	b.n	8002408 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d6:	4b4c      	ldr	r3, [pc, #304]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a4b      	ldr	r2, [pc, #300]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e2:	f7fe fb99 	bl	8000b18 <HAL_GetTick>
 80023e6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ea:	f7fe fb95 	bl	8000b18 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e27c      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023fc:	4b42      	ldr	r3, [pc, #264]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f0      	bne.n	80023ea <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 8082 	beq.w	800251a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d05f      	beq.n	80024de <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800241e:	4b3a      	ldr	r3, [pc, #232]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002424:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	429a      	cmp	r2, r3
 8002432:	d037      	beq.n	80024a4 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d006      	beq.n	800244c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e254      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d01b      	beq.n	800248e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002456:	4b2c      	ldr	r3, [pc, #176]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245c:	4a2a      	ldr	r2, [pc, #168]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 800245e:	f023 0301 	bic.w	r3, r3, #1
 8002462:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002466:	f7fe fb57 	bl	8000b18 <HAL_GetTick>
 800246a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246e:	f7fe fb53 	bl	8000b18 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b11      	cmp	r3, #17
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e23a      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002480:	4b21      	ldr	r3, [pc, #132]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 8002482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1ef      	bne.n	800246e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800248e:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002494:	f023 0210 	bic.w	r2, r3, #16
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	491a      	ldr	r1, [pc, #104]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024a4:	4b18      	ldr	r3, [pc, #96]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024aa:	4a17      	ldr	r2, [pc, #92]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b4:	f7fe fb30 	bl	8000b18 <HAL_GetTick>
 80024b8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024bc:	f7fe fb2c 	bl	8000b18 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b11      	cmp	r3, #17
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e213      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ce:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0ef      	beq.n	80024bc <HAL_RCC_OscConfig+0x478>
 80024dc:	e01d      	b.n	800251a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024e4:	4a08      	ldr	r2, [pc, #32]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	f023 0301 	bic.w	r3, r3, #1
 80024ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ee:	f7fe fb13 	bl	8000b18 <HAL_GetTick>
 80024f2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f6:	f7fe fb0f 	bl	8000b18 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b11      	cmp	r3, #17
 8002502:	d903      	bls.n	800250c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e1f6      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
 8002508:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800250c:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 800250e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1ed      	bne.n	80024f6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80bd 	beq.w	80026a2 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002528:	2300      	movs	r3, #0
 800252a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800252e:	4ba1      	ldr	r3, [pc, #644]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 8002530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10e      	bne.n	8002558 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	4b9e      	ldr	r3, [pc, #632]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253e:	4a9d      	ldr	r2, [pc, #628]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 8002540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002544:	6593      	str	r3, [r2, #88]	; 0x58
 8002546:	4b9b      	ldr	r3, [pc, #620]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 8002548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002552:	2301      	movs	r3, #1
 8002554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002558:	4b97      	ldr	r3, [pc, #604]	; (80027b8 <HAL_RCC_OscConfig+0x774>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d118      	bne.n	8002596 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002564:	4b94      	ldr	r3, [pc, #592]	; (80027b8 <HAL_RCC_OscConfig+0x774>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a93      	ldr	r2, [pc, #588]	; (80027b8 <HAL_RCC_OscConfig+0x774>)
 800256a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002570:	f7fe fad2 	bl	8000b18 <HAL_GetTick>
 8002574:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002578:	f7fe face 	bl	8000b18 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e1b5      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800258a:	4b8b      	ldr	r3, [pc, #556]	; (80027b8 <HAL_RCC_OscConfig+0x774>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d02c      	beq.n	80025fc <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80025a2:	4b84      	ldr	r3, [pc, #528]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b4:	497f      	ldr	r1, [pc, #508]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d010      	beq.n	80025ea <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80025c8:	4b7a      	ldr	r3, [pc, #488]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ce:	4a79      	ldr	r2, [pc, #484]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 80025d0:	f043 0304 	orr.w	r3, r3, #4
 80025d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80025d8:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 80025da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025de:	4a75      	ldr	r2, [pc, #468]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025e8:	e018      	b.n	800261c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80025ea:	4b72      	ldr	r3, [pc, #456]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f0:	4a70      	ldr	r2, [pc, #448]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025fa:	e00f      	b.n	800261c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002602:	4a6c      	ldr	r2, [pc, #432]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800260c:	4b69      	ldr	r3, [pc, #420]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002612:	4a68      	ldr	r2, [pc, #416]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 8002614:	f023 0304 	bic.w	r3, r3, #4
 8002618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d016      	beq.n	8002652 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002624:	f7fe fa78 	bl	8000b18 <HAL_GetTick>
 8002628:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800262a:	e00a      	b.n	8002642 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262c:	f7fe fa74 	bl	8000b18 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	f241 3288 	movw	r2, #5000	; 0x1388
 800263a:	4293      	cmp	r3, r2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e159      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002642:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0ed      	beq.n	800262c <HAL_RCC_OscConfig+0x5e8>
 8002650:	e01d      	b.n	800268e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002652:	f7fe fa61 	bl	8000b18 <HAL_GetTick>
 8002656:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002658:	e00a      	b.n	8002670 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265a:	f7fe fa5d 	bl	8000b18 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	f241 3288 	movw	r2, #5000	; 0x1388
 8002668:	4293      	cmp	r3, r2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e142      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002670:	4b50      	ldr	r3, [pc, #320]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1ed      	bne.n	800265a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800267e:	4b4d      	ldr	r3, [pc, #308]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 8002680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002684:	4a4b      	ldr	r2, [pc, #300]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 8002686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800268a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800268e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002692:	2b01      	cmp	r3, #1
 8002694:	d105      	bne.n	80026a2 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002696:	4b47      	ldr	r3, [pc, #284]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	4a46      	ldr	r2, [pc, #280]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 800269c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0320 	and.w	r3, r3, #32
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d03c      	beq.n	8002728 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d01c      	beq.n	80026f0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026b6:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 80026b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026bc:	4a3d      	ldr	r2, [pc, #244]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c6:	f7fe fa27 	bl	8000b18 <HAL_GetTick>
 80026ca:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026ce:	f7fe fa23 	bl	8000b18 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e10a      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026e0:	4b34      	ldr	r3, [pc, #208]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 80026e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0ef      	beq.n	80026ce <HAL_RCC_OscConfig+0x68a>
 80026ee:	e01b      	b.n	8002728 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026f0:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 80026f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026f6:	4a2f      	ldr	r2, [pc, #188]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002700:	f7fe fa0a 	bl	8000b18 <HAL_GetTick>
 8002704:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002708:	f7fe fa06 	bl	8000b18 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e0ed      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800271a:	4b26      	ldr	r3, [pc, #152]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 800271c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1ef      	bne.n	8002708 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 80e1 	beq.w	80028f4 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002736:	2b02      	cmp	r3, #2
 8002738:	f040 80b5 	bne.w	80028a6 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800273c:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f003 0203 	and.w	r2, r3, #3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	429a      	cmp	r2, r3
 800274e:	d124      	bne.n	800279a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275a:	3b01      	subs	r3, #1
 800275c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d11b      	bne.n	800279a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d113      	bne.n	800279a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277c:	085b      	lsrs	r3, r3, #1
 800277e:	3b01      	subs	r3, #1
 8002780:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d109      	bne.n	800279a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	085b      	lsrs	r3, r3, #1
 8002792:	3b01      	subs	r3, #1
 8002794:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002796:	429a      	cmp	r2, r3
 8002798:	d05f      	beq.n	800285a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	2b0c      	cmp	r3, #12
 800279e:	d05a      	beq.n	8002856 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a03      	ldr	r2, [pc, #12]	; (80027b4 <HAL_RCC_OscConfig+0x770>)
 80027a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027ac:	f7fe f9b4 	bl	8000b18 <HAL_GetTick>
 80027b0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b2:	e00c      	b.n	80027ce <HAL_RCC_OscConfig+0x78a>
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fe f9ac 	bl	8000b18 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e093      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ce:	4b4c      	ldr	r3, [pc, #304]	; (8002900 <HAL_RCC_OscConfig+0x8bc>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027da:	4b49      	ldr	r3, [pc, #292]	; (8002900 <HAL_RCC_OscConfig+0x8bc>)
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	4b49      	ldr	r3, [pc, #292]	; (8002904 <HAL_RCC_OscConfig+0x8c0>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027ea:	3a01      	subs	r2, #1
 80027ec:	0112      	lsls	r2, r2, #4
 80027ee:	4311      	orrs	r1, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027f4:	0212      	lsls	r2, r2, #8
 80027f6:	4311      	orrs	r1, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027fc:	0852      	lsrs	r2, r2, #1
 80027fe:	3a01      	subs	r2, #1
 8002800:	0552      	lsls	r2, r2, #21
 8002802:	4311      	orrs	r1, r2
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002808:	0852      	lsrs	r2, r2, #1
 800280a:	3a01      	subs	r2, #1
 800280c:	0652      	lsls	r2, r2, #25
 800280e:	430a      	orrs	r2, r1
 8002810:	493b      	ldr	r1, [pc, #236]	; (8002900 <HAL_RCC_OscConfig+0x8bc>)
 8002812:	4313      	orrs	r3, r2
 8002814:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002816:	4b3a      	ldr	r3, [pc, #232]	; (8002900 <HAL_RCC_OscConfig+0x8bc>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a39      	ldr	r2, [pc, #228]	; (8002900 <HAL_RCC_OscConfig+0x8bc>)
 800281c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002820:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002822:	4b37      	ldr	r3, [pc, #220]	; (8002900 <HAL_RCC_OscConfig+0x8bc>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	4a36      	ldr	r2, [pc, #216]	; (8002900 <HAL_RCC_OscConfig+0x8bc>)
 8002828:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800282c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800282e:	f7fe f973 	bl	8000b18 <HAL_GetTick>
 8002832:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002836:	f7fe f96f 	bl	8000b18 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e056      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002848:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <HAL_RCC_OscConfig+0x8bc>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002854:	e04e      	b.n	80028f4 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e04d      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800285a:	4b29      	ldr	r3, [pc, #164]	; (8002900 <HAL_RCC_OscConfig+0x8bc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d146      	bne.n	80028f4 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002866:	4b26      	ldr	r3, [pc, #152]	; (8002900 <HAL_RCC_OscConfig+0x8bc>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a25      	ldr	r2, [pc, #148]	; (8002900 <HAL_RCC_OscConfig+0x8bc>)
 800286c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002870:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002872:	4b23      	ldr	r3, [pc, #140]	; (8002900 <HAL_RCC_OscConfig+0x8bc>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	4a22      	ldr	r2, [pc, #136]	; (8002900 <HAL_RCC_OscConfig+0x8bc>)
 8002878:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800287c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800287e:	f7fe f94b 	bl	8000b18 <HAL_GetTick>
 8002882:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002886:	f7fe f947 	bl	8000b18 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e02e      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002898:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_RCC_OscConfig+0x8bc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x842>
 80028a4:	e026      	b.n	80028f4 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	2b0c      	cmp	r3, #12
 80028aa:	d021      	beq.n	80028f0 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <HAL_RCC_OscConfig+0x8bc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a13      	ldr	r2, [pc, #76]	; (8002900 <HAL_RCC_OscConfig+0x8bc>)
 80028b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fe f92e 	bl	8000b18 <HAL_GetTick>
 80028bc:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fe f92a 	bl	8000b18 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e011      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d2:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_OscConfig+0x8bc>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80028de:	4b08      	ldr	r3, [pc, #32]	; (8002900 <HAL_RCC_OscConfig+0x8bc>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	4a07      	ldr	r2, [pc, #28]	; (8002900 <HAL_RCC_OscConfig+0x8bc>)
 80028e4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80028e8:	f023 0303 	bic.w	r3, r3, #3
 80028ec:	60d3      	str	r3, [r2, #12]
 80028ee:	e001      	b.n	80028f4 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3728      	adds	r7, #40	; 0x28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000
 8002904:	f99f808c 	.word	0xf99f808c

08002908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0e7      	b.n	8002aec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800291c:	4b75      	ldr	r3, [pc, #468]	; (8002af4 <HAL_RCC_ClockConfig+0x1ec>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d910      	bls.n	800294c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292a:	4b72      	ldr	r3, [pc, #456]	; (8002af4 <HAL_RCC_ClockConfig+0x1ec>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 0207 	bic.w	r2, r3, #7
 8002932:	4970      	ldr	r1, [pc, #448]	; (8002af4 <HAL_RCC_ClockConfig+0x1ec>)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800293a:	4b6e      	ldr	r3, [pc, #440]	; (8002af4 <HAL_RCC_ClockConfig+0x1ec>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d001      	beq.n	800294c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0cf      	b.n	8002aec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d010      	beq.n	800297a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	4b66      	ldr	r3, [pc, #408]	; (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002964:	429a      	cmp	r2, r3
 8002966:	d908      	bls.n	800297a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002968:	4b63      	ldr	r3, [pc, #396]	; (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	4960      	ldr	r1, [pc, #384]	; (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d04c      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b03      	cmp	r3, #3
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298e:	4b5a      	ldr	r3, [pc, #360]	; (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d121      	bne.n	80029de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0a6      	b.n	8002aec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029a6:	4b54      	ldr	r3, [pc, #336]	; (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d115      	bne.n	80029de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e09a      	b.n	8002aec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d107      	bne.n	80029ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029be:	4b4e      	ldr	r3, [pc, #312]	; (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e08e      	b.n	8002aec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029ce:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e086      	b.n	8002aec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029de:	4b46      	ldr	r3, [pc, #280]	; (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f023 0203 	bic.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4943      	ldr	r1, [pc, #268]	; (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f0:	f7fe f892 	bl	8000b18 <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f8:	f7fe f88e 	bl	8000b18 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e06e      	b.n	8002aec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0e:	4b3a      	ldr	r3, [pc, #232]	; (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 020c 	and.w	r2, r3, #12
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d1eb      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d010      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d208      	bcs.n	8002a4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a3c:	4b2e      	ldr	r3, [pc, #184]	; (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	492b      	ldr	r1, [pc, #172]	; (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a4e:	4b29      	ldr	r3, [pc, #164]	; (8002af4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d210      	bcs.n	8002a7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5c:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f023 0207 	bic.w	r2, r3, #7
 8002a64:	4923      	ldr	r1, [pc, #140]	; (8002af4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6c:	4b21      	ldr	r3, [pc, #132]	; (8002af4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d001      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e036      	b.n	8002aec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d008      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a8a:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	4918      	ldr	r1, [pc, #96]	; (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d009      	beq.n	8002abc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa8:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4910      	ldr	r1, [pc, #64]	; (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002abc:	f000 f824 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	091b      	lsrs	r3, r3, #4
 8002ac8:	f003 030f 	and.w	r3, r3, #15
 8002acc:	490b      	ldr	r1, [pc, #44]	; (8002afc <HAL_RCC_ClockConfig+0x1f4>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad8:	4a09      	ldr	r2, [pc, #36]	; (8002b00 <HAL_RCC_ClockConfig+0x1f8>)
 8002ada:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002adc:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <HAL_RCC_ClockConfig+0x1fc>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fd ffc9 	bl	8000a78 <HAL_InitTick>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002aea:	7afb      	ldrb	r3, [r7, #11]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40022000 	.word	0x40022000
 8002af8:	40021000 	.word	0x40021000
 8002afc:	0800397c 	.word	0x0800397c
 8002b00:	20000000 	.word	0x20000000
 8002b04:	20000004 	.word	0x20000004

08002b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b089      	sub	sp, #36	; 0x24
 8002b0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b16:	4b3e      	ldr	r3, [pc, #248]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b20:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x34>
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b0c      	cmp	r3, #12
 8002b34:	d121      	bne.n	8002b7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d11e      	bne.n	8002b7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b3c:	4b34      	ldr	r3, [pc, #208]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d107      	bne.n	8002b58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b48:	4b31      	ldr	r3, [pc, #196]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b4e:	0a1b      	lsrs	r3, r3, #8
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	e005      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b58:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b64:	4a2b      	ldr	r2, [pc, #172]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10d      	bne.n	8002b90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b78:	e00a      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d102      	bne.n	8002b86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b80:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b82:	61bb      	str	r3, [r7, #24]
 8002b84:	e004      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b8c:	4b23      	ldr	r3, [pc, #140]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x114>)
 8002b8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	2b0c      	cmp	r3, #12
 8002b94:	d134      	bne.n	8002c00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b96:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d003      	beq.n	8002bae <HAL_RCC_GetSysClockFreq+0xa6>
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d003      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xac>
 8002bac:	e005      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002bae:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bb0:	617b      	str	r3, [r7, #20]
      break;
 8002bb2:	e005      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bb4:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x114>)
 8002bb6:	617b      	str	r3, [r7, #20]
      break;
 8002bb8:	e002      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	617b      	str	r3, [r7, #20]
      break;
 8002bbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bc0:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	3301      	adds	r3, #1
 8002bcc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bce:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	0a1b      	lsrs	r3, r3, #8
 8002bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	fb03 f202 	mul.w	r2, r3, r2
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	0e5b      	lsrs	r3, r3, #25
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c00:	69bb      	ldr	r3, [r7, #24]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3724      	adds	r7, #36	; 0x24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000
 8002c14:	08003994 	.word	0x08003994
 8002c18:	00f42400 	.word	0x00f42400
 8002c1c:	007a1200 	.word	0x007a1200

08002c20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20000000 	.word	0x20000000

08002c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c3c:	f7ff fff0 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	0a1b      	lsrs	r3, r3, #8
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	4904      	ldr	r1, [pc, #16]	; (8002c60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c4e:	5ccb      	ldrb	r3, [r1, r3]
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	0800398c 	.word	0x0800398c

08002c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c68:	f7ff ffda 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	0adb      	lsrs	r3, r3, #11
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	4904      	ldr	r1, [pc, #16]	; (8002c8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c7a:	5ccb      	ldrb	r3, [r1, r3]
 8002c7c:	f003 031f 	and.w	r3, r3, #31
 8002c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	0800398c 	.word	0x0800398c

08002c90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c98:	2300      	movs	r3, #0
 8002c9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c9c:	4b2a      	ldr	r3, [pc, #168]	; (8002d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ca8:	f7ff f968 	bl	8001f7c <HAL_PWREx_GetVoltageRange>
 8002cac:	6178      	str	r0, [r7, #20]
 8002cae:	e014      	b.n	8002cda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cb0:	4b25      	ldr	r3, [pc, #148]	; (8002d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb4:	4a24      	ldr	r2, [pc, #144]	; (8002d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cba:	6593      	str	r3, [r2, #88]	; 0x58
 8002cbc:	4b22      	ldr	r3, [pc, #136]	; (8002d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cc8:	f7ff f958 	bl	8001f7c <HAL_PWREx_GetVoltageRange>
 8002ccc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cce:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd2:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ce0:	d10b      	bne.n	8002cfa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b80      	cmp	r3, #128	; 0x80
 8002ce6:	d919      	bls.n	8002d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2ba0      	cmp	r3, #160	; 0xa0
 8002cec:	d902      	bls.n	8002cf4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cee:	2302      	movs	r3, #2
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	e013      	b.n	8002d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	e010      	b.n	8002d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b80      	cmp	r3, #128	; 0x80
 8002cfe:	d902      	bls.n	8002d06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d00:	2303      	movs	r3, #3
 8002d02:	613b      	str	r3, [r7, #16]
 8002d04:	e00a      	b.n	8002d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b80      	cmp	r3, #128	; 0x80
 8002d0a:	d102      	bne.n	8002d12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	e004      	b.n	8002d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b70      	cmp	r3, #112	; 0x70
 8002d16:	d101      	bne.n	8002d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d18:	2301      	movs	r3, #1
 8002d1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f023 0207 	bic.w	r2, r3, #7
 8002d24:	4909      	ldr	r1, [pc, #36]	; (8002d4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d2c:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d001      	beq.n	8002d3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40022000 	.word	0x40022000

08002d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d58:	2300      	movs	r3, #0
 8002d5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 809e 	beq.w	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d72:	4b46      	ldr	r3, [pc, #280]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002d82:	2300      	movs	r3, #0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00d      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d88:	4b40      	ldr	r3, [pc, #256]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8c:	4a3f      	ldr	r2, [pc, #252]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d92:	6593      	str	r3, [r2, #88]	; 0x58
 8002d94:	4b3d      	ldr	r3, [pc, #244]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da0:	2301      	movs	r3, #1
 8002da2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002da4:	4b3a      	ldr	r3, [pc, #232]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a39      	ldr	r2, [pc, #228]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002db0:	f7fd feb2 	bl	8000b18 <HAL_GetTick>
 8002db4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002db6:	e009      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db8:	f7fd feae 	bl	8000b18 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d902      	bls.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	74fb      	strb	r3, [r7, #19]
        break;
 8002dca:	e005      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dcc:	4b30      	ldr	r3, [pc, #192]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0ef      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002dd8:	7cfb      	ldrb	r3, [r7, #19]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d15a      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dde:	4b2b      	ldr	r3, [pc, #172]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01e      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d019      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dfa:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e04:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e06:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0c:	4a1f      	ldr	r2, [pc, #124]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e16:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1c:	4a1b      	ldr	r2, [pc, #108]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e26:	4a19      	ldr	r2, [pc, #100]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d016      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fd fe6e 	bl	8000b18 <HAL_GetTick>
 8002e3c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e3e:	e00b      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e40:	f7fd fe6a 	bl	8000b18 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d902      	bls.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	74fb      	strb	r3, [r7, #19]
            break;
 8002e56:	e006      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e58:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0ec      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002e66:	7cfb      	ldrb	r3, [r7, #19]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10b      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e6c:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	4904      	ldr	r1, [pc, #16]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e82:	e009      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e84:	7cfb      	ldrb	r3, [r7, #19]
 8002e86:	74bb      	strb	r3, [r7, #18]
 8002e88:	e006      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e94:	7cfb      	ldrb	r3, [r7, #19]
 8002e96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e98:	7c7b      	ldrb	r3, [r7, #17]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d105      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9e:	4b6e      	ldr	r3, [pc, #440]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea2:	4a6d      	ldr	r2, [pc, #436]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eb6:	4b68      	ldr	r3, [pc, #416]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	f023 0203 	bic.w	r2, r3, #3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4964      	ldr	r1, [pc, #400]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ed8:	4b5f      	ldr	r3, [pc, #380]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	f023 020c 	bic.w	r2, r3, #12
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	495c      	ldr	r1, [pc, #368]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002efa:	4b57      	ldr	r3, [pc, #348]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4953      	ldr	r1, [pc, #332]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f1c:	4b4e      	ldr	r3, [pc, #312]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	494b      	ldr	r1, [pc, #300]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f3e:	4b46      	ldr	r3, [pc, #280]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	4942      	ldr	r1, [pc, #264]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f60:	4b3d      	ldr	r3, [pc, #244]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	493a      	ldr	r1, [pc, #232]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f82:	4b35      	ldr	r3, [pc, #212]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	4931      	ldr	r1, [pc, #196]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fa4:	4b2c      	ldr	r3, [pc, #176]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002faa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	4929      	ldr	r1, [pc, #164]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fc6:	4b24      	ldr	r3, [pc, #144]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	4920      	ldr	r1, [pc, #128]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d015      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff6:	4918      	ldr	r1, [pc, #96]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003006:	d105      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003008:	4b13      	ldr	r3, [pc, #76]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4a12      	ldr	r2, [pc, #72]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800300e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003012:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d015      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003020:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003026:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	490a      	ldr	r1, [pc, #40]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800303e:	d105      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	4a04      	ldr	r2, [pc, #16]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800304a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800304c:	7cbb      	ldrb	r3, [r7, #18]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000

0800305c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e040      	b.n	80030f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fd fc1c 	bl	80008bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2224      	movs	r2, #36	; 0x24
 8003088:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0201 	bic.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f82c 	bl	80030f8 <UART_SetConfig>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e022      	b.n	80030f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fa7a 	bl	80035ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 fb01 	bl	80036f0 <UART_CheckIdleState>
 80030ee:	4603      	mov	r3, r0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030fc:	b08a      	sub	sp, #40	; 0x28
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	431a      	orrs	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	431a      	orrs	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	4313      	orrs	r3, r2
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	4b9e      	ldr	r3, [pc, #632]	; (80033a0 <UART_SetConfig+0x2a8>)
 8003128:	4013      	ands	r3, r2
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	6812      	ldr	r2, [r2, #0]
 800312e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003130:	430b      	orrs	r3, r1
 8003132:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a93      	ldr	r2, [pc, #588]	; (80033a4 <UART_SetConfig+0x2ac>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003160:	4313      	orrs	r3, r2
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003174:	430a      	orrs	r2, r1
 8003176:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a8a      	ldr	r2, [pc, #552]	; (80033a8 <UART_SetConfig+0x2b0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d126      	bne.n	80031d0 <UART_SetConfig+0xd8>
 8003182:	4b8a      	ldr	r3, [pc, #552]	; (80033ac <UART_SetConfig+0x2b4>)
 8003184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	2b03      	cmp	r3, #3
 800318e:	d81b      	bhi.n	80031c8 <UART_SetConfig+0xd0>
 8003190:	a201      	add	r2, pc, #4	; (adr r2, 8003198 <UART_SetConfig+0xa0>)
 8003192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003196:	bf00      	nop
 8003198:	080031a9 	.word	0x080031a9
 800319c:	080031b9 	.word	0x080031b9
 80031a0:	080031b1 	.word	0x080031b1
 80031a4:	080031c1 	.word	0x080031c1
 80031a8:	2301      	movs	r3, #1
 80031aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ae:	e0ab      	b.n	8003308 <UART_SetConfig+0x210>
 80031b0:	2302      	movs	r3, #2
 80031b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b6:	e0a7      	b.n	8003308 <UART_SetConfig+0x210>
 80031b8:	2304      	movs	r3, #4
 80031ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031be:	e0a3      	b.n	8003308 <UART_SetConfig+0x210>
 80031c0:	2308      	movs	r3, #8
 80031c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c6:	e09f      	b.n	8003308 <UART_SetConfig+0x210>
 80031c8:	2310      	movs	r3, #16
 80031ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ce:	e09b      	b.n	8003308 <UART_SetConfig+0x210>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a76      	ldr	r2, [pc, #472]	; (80033b0 <UART_SetConfig+0x2b8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d138      	bne.n	800324c <UART_SetConfig+0x154>
 80031da:	4b74      	ldr	r3, [pc, #464]	; (80033ac <UART_SetConfig+0x2b4>)
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e0:	f003 030c 	and.w	r3, r3, #12
 80031e4:	2b0c      	cmp	r3, #12
 80031e6:	d82d      	bhi.n	8003244 <UART_SetConfig+0x14c>
 80031e8:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <UART_SetConfig+0xf8>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003225 	.word	0x08003225
 80031f4:	08003245 	.word	0x08003245
 80031f8:	08003245 	.word	0x08003245
 80031fc:	08003245 	.word	0x08003245
 8003200:	08003235 	.word	0x08003235
 8003204:	08003245 	.word	0x08003245
 8003208:	08003245 	.word	0x08003245
 800320c:	08003245 	.word	0x08003245
 8003210:	0800322d 	.word	0x0800322d
 8003214:	08003245 	.word	0x08003245
 8003218:	08003245 	.word	0x08003245
 800321c:	08003245 	.word	0x08003245
 8003220:	0800323d 	.word	0x0800323d
 8003224:	2300      	movs	r3, #0
 8003226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800322a:	e06d      	b.n	8003308 <UART_SetConfig+0x210>
 800322c:	2302      	movs	r3, #2
 800322e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003232:	e069      	b.n	8003308 <UART_SetConfig+0x210>
 8003234:	2304      	movs	r3, #4
 8003236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800323a:	e065      	b.n	8003308 <UART_SetConfig+0x210>
 800323c:	2308      	movs	r3, #8
 800323e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003242:	e061      	b.n	8003308 <UART_SetConfig+0x210>
 8003244:	2310      	movs	r3, #16
 8003246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800324a:	e05d      	b.n	8003308 <UART_SetConfig+0x210>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a58      	ldr	r2, [pc, #352]	; (80033b4 <UART_SetConfig+0x2bc>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d125      	bne.n	80032a2 <UART_SetConfig+0x1aa>
 8003256:	4b55      	ldr	r3, [pc, #340]	; (80033ac <UART_SetConfig+0x2b4>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003260:	2b30      	cmp	r3, #48	; 0x30
 8003262:	d016      	beq.n	8003292 <UART_SetConfig+0x19a>
 8003264:	2b30      	cmp	r3, #48	; 0x30
 8003266:	d818      	bhi.n	800329a <UART_SetConfig+0x1a2>
 8003268:	2b20      	cmp	r3, #32
 800326a:	d00a      	beq.n	8003282 <UART_SetConfig+0x18a>
 800326c:	2b20      	cmp	r3, #32
 800326e:	d814      	bhi.n	800329a <UART_SetConfig+0x1a2>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <UART_SetConfig+0x182>
 8003274:	2b10      	cmp	r3, #16
 8003276:	d008      	beq.n	800328a <UART_SetConfig+0x192>
 8003278:	e00f      	b.n	800329a <UART_SetConfig+0x1a2>
 800327a:	2300      	movs	r3, #0
 800327c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003280:	e042      	b.n	8003308 <UART_SetConfig+0x210>
 8003282:	2302      	movs	r3, #2
 8003284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003288:	e03e      	b.n	8003308 <UART_SetConfig+0x210>
 800328a:	2304      	movs	r3, #4
 800328c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003290:	e03a      	b.n	8003308 <UART_SetConfig+0x210>
 8003292:	2308      	movs	r3, #8
 8003294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003298:	e036      	b.n	8003308 <UART_SetConfig+0x210>
 800329a:	2310      	movs	r3, #16
 800329c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a0:	e032      	b.n	8003308 <UART_SetConfig+0x210>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a3f      	ldr	r2, [pc, #252]	; (80033a4 <UART_SetConfig+0x2ac>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d12a      	bne.n	8003302 <UART_SetConfig+0x20a>
 80032ac:	4b3f      	ldr	r3, [pc, #252]	; (80033ac <UART_SetConfig+0x2b4>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032ba:	d01a      	beq.n	80032f2 <UART_SetConfig+0x1fa>
 80032bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032c0:	d81b      	bhi.n	80032fa <UART_SetConfig+0x202>
 80032c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032c6:	d00c      	beq.n	80032e2 <UART_SetConfig+0x1ea>
 80032c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032cc:	d815      	bhi.n	80032fa <UART_SetConfig+0x202>
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <UART_SetConfig+0x1e2>
 80032d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d6:	d008      	beq.n	80032ea <UART_SetConfig+0x1f2>
 80032d8:	e00f      	b.n	80032fa <UART_SetConfig+0x202>
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e0:	e012      	b.n	8003308 <UART_SetConfig+0x210>
 80032e2:	2302      	movs	r3, #2
 80032e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e8:	e00e      	b.n	8003308 <UART_SetConfig+0x210>
 80032ea:	2304      	movs	r3, #4
 80032ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032f0:	e00a      	b.n	8003308 <UART_SetConfig+0x210>
 80032f2:	2308      	movs	r3, #8
 80032f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032f8:	e006      	b.n	8003308 <UART_SetConfig+0x210>
 80032fa:	2310      	movs	r3, #16
 80032fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003300:	e002      	b.n	8003308 <UART_SetConfig+0x210>
 8003302:	2310      	movs	r3, #16
 8003304:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a25      	ldr	r2, [pc, #148]	; (80033a4 <UART_SetConfig+0x2ac>)
 800330e:	4293      	cmp	r3, r2
 8003310:	f040 808a 	bne.w	8003428 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003314:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003318:	2b08      	cmp	r3, #8
 800331a:	d824      	bhi.n	8003366 <UART_SetConfig+0x26e>
 800331c:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <UART_SetConfig+0x22c>)
 800331e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003322:	bf00      	nop
 8003324:	08003349 	.word	0x08003349
 8003328:	08003367 	.word	0x08003367
 800332c:	08003351 	.word	0x08003351
 8003330:	08003367 	.word	0x08003367
 8003334:	08003357 	.word	0x08003357
 8003338:	08003367 	.word	0x08003367
 800333c:	08003367 	.word	0x08003367
 8003340:	08003367 	.word	0x08003367
 8003344:	0800335f 	.word	0x0800335f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003348:	f7ff fc76 	bl	8002c38 <HAL_RCC_GetPCLK1Freq>
 800334c:	61f8      	str	r0, [r7, #28]
        break;
 800334e:	e010      	b.n	8003372 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003350:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <UART_SetConfig+0x2c0>)
 8003352:	61fb      	str	r3, [r7, #28]
        break;
 8003354:	e00d      	b.n	8003372 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003356:	f7ff fbd7 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 800335a:	61f8      	str	r0, [r7, #28]
        break;
 800335c:	e009      	b.n	8003372 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800335e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003362:	61fb      	str	r3, [r7, #28]
        break;
 8003364:	e005      	b.n	8003372 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003370:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8109 	beq.w	800358c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4413      	add	r3, r2
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	429a      	cmp	r2, r3
 8003388:	d305      	bcc.n	8003396 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	429a      	cmp	r2, r3
 8003394:	d912      	bls.n	80033bc <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800339c:	e0f6      	b.n	800358c <UART_SetConfig+0x494>
 800339e:	bf00      	nop
 80033a0:	efff69f3 	.word	0xefff69f3
 80033a4:	40008000 	.word	0x40008000
 80033a8:	40013800 	.word	0x40013800
 80033ac:	40021000 	.word	0x40021000
 80033b0:	40004400 	.word	0x40004400
 80033b4:	40004800 	.word	0x40004800
 80033b8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	2200      	movs	r2, #0
 80033c0:	461c      	mov	r4, r3
 80033c2:	4615      	mov	r5, r2
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	022b      	lsls	r3, r5, #8
 80033ce:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033d2:	0222      	lsls	r2, r4, #8
 80033d4:	68f9      	ldr	r1, [r7, #12]
 80033d6:	6849      	ldr	r1, [r1, #4]
 80033d8:	0849      	lsrs	r1, r1, #1
 80033da:	2000      	movs	r0, #0
 80033dc:	4688      	mov	r8, r1
 80033de:	4681      	mov	r9, r0
 80033e0:	eb12 0a08 	adds.w	sl, r2, r8
 80033e4:	eb43 0b09 	adc.w	fp, r3, r9
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033f6:	4650      	mov	r0, sl
 80033f8:	4659      	mov	r1, fp
 80033fa:	f7fc fee7 	bl	80001cc <__aeabi_uldivmod>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4613      	mov	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800340c:	d308      	bcc.n	8003420 <UART_SetConfig+0x328>
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003414:	d204      	bcs.n	8003420 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	e0b5      	b.n	800358c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003426:	e0b1      	b.n	800358c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003430:	d15d      	bne.n	80034ee <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003432:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003436:	2b08      	cmp	r3, #8
 8003438:	d827      	bhi.n	800348a <UART_SetConfig+0x392>
 800343a:	a201      	add	r2, pc, #4	; (adr r2, 8003440 <UART_SetConfig+0x348>)
 800343c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003440:	08003465 	.word	0x08003465
 8003444:	0800346d 	.word	0x0800346d
 8003448:	08003475 	.word	0x08003475
 800344c:	0800348b 	.word	0x0800348b
 8003450:	0800347b 	.word	0x0800347b
 8003454:	0800348b 	.word	0x0800348b
 8003458:	0800348b 	.word	0x0800348b
 800345c:	0800348b 	.word	0x0800348b
 8003460:	08003483 	.word	0x08003483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003464:	f7ff fbe8 	bl	8002c38 <HAL_RCC_GetPCLK1Freq>
 8003468:	61f8      	str	r0, [r7, #28]
        break;
 800346a:	e014      	b.n	8003496 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800346c:	f7ff fbfa 	bl	8002c64 <HAL_RCC_GetPCLK2Freq>
 8003470:	61f8      	str	r0, [r7, #28]
        break;
 8003472:	e010      	b.n	8003496 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003474:	4b4c      	ldr	r3, [pc, #304]	; (80035a8 <UART_SetConfig+0x4b0>)
 8003476:	61fb      	str	r3, [r7, #28]
        break;
 8003478:	e00d      	b.n	8003496 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800347a:	f7ff fb45 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 800347e:	61f8      	str	r0, [r7, #28]
        break;
 8003480:	e009      	b.n	8003496 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003486:	61fb      	str	r3, [r7, #28]
        break;
 8003488:	e005      	b.n	8003496 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003494:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d077      	beq.n	800358c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	005a      	lsls	r2, r3, #1
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	085b      	lsrs	r3, r3, #1
 80034a6:	441a      	add	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	2b0f      	cmp	r3, #15
 80034b6:	d916      	bls.n	80034e6 <UART_SetConfig+0x3ee>
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034be:	d212      	bcs.n	80034e6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	f023 030f 	bic.w	r3, r3, #15
 80034c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	085b      	lsrs	r3, r3, #1
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	8afb      	ldrh	r3, [r7, #22]
 80034d8:	4313      	orrs	r3, r2
 80034da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	8afa      	ldrh	r2, [r7, #22]
 80034e2:	60da      	str	r2, [r3, #12]
 80034e4:	e052      	b.n	800358c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034ec:	e04e      	b.n	800358c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d827      	bhi.n	8003546 <UART_SetConfig+0x44e>
 80034f6:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <UART_SetConfig+0x404>)
 80034f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fc:	08003521 	.word	0x08003521
 8003500:	08003529 	.word	0x08003529
 8003504:	08003531 	.word	0x08003531
 8003508:	08003547 	.word	0x08003547
 800350c:	08003537 	.word	0x08003537
 8003510:	08003547 	.word	0x08003547
 8003514:	08003547 	.word	0x08003547
 8003518:	08003547 	.word	0x08003547
 800351c:	0800353f 	.word	0x0800353f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003520:	f7ff fb8a 	bl	8002c38 <HAL_RCC_GetPCLK1Freq>
 8003524:	61f8      	str	r0, [r7, #28]
        break;
 8003526:	e014      	b.n	8003552 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003528:	f7ff fb9c 	bl	8002c64 <HAL_RCC_GetPCLK2Freq>
 800352c:	61f8      	str	r0, [r7, #28]
        break;
 800352e:	e010      	b.n	8003552 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003530:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <UART_SetConfig+0x4b0>)
 8003532:	61fb      	str	r3, [r7, #28]
        break;
 8003534:	e00d      	b.n	8003552 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003536:	f7ff fae7 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 800353a:	61f8      	str	r0, [r7, #28]
        break;
 800353c:	e009      	b.n	8003552 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003542:	61fb      	str	r3, [r7, #28]
        break;
 8003544:	e005      	b.n	8003552 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003550:	bf00      	nop
    }

    if (pclk != 0U)
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d019      	beq.n	800358c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	085a      	lsrs	r2, r3, #1
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	441a      	add	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	fbb2 f3f3 	udiv	r3, r2, r3
 800356a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2b0f      	cmp	r3, #15
 8003570:	d909      	bls.n	8003586 <UART_SetConfig+0x48e>
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003578:	d205      	bcs.n	8003586 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60da      	str	r2, [r3, #12]
 8003584:	e002      	b.n	800358c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003598:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800359c:	4618      	mov	r0, r3
 800359e:	3728      	adds	r7, #40	; 0x28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035a6:	bf00      	nop
 80035a8:	00f42400 	.word	0x00f42400

080035ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01a      	beq.n	80036c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036aa:	d10a      	bne.n	80036c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	605a      	str	r2, [r3, #4]
  }
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003700:	f7fd fa0a 	bl	8000b18 <HAL_GetTick>
 8003704:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b08      	cmp	r3, #8
 8003712:	d10e      	bne.n	8003732 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f82d 	bl	8003782 <UART_WaitOnFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e023      	b.n	800377a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b04      	cmp	r3, #4
 800373e:	d10e      	bne.n	800375e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003740:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f817 	bl	8003782 <UART_WaitOnFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e00d      	b.n	800377a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b09c      	sub	sp, #112	; 0x70
 8003786:	af00      	add	r7, sp, #0
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	4613      	mov	r3, r2
 8003790:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003792:	e0a5      	b.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379a:	f000 80a1 	beq.w	80038e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379e:	f7fd f9bb 	bl	8000b18 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d302      	bcc.n	80037b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80037ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d13e      	bne.n	8003832 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037bc:	e853 3f00 	ldrex	r3, [r3]
 80037c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037c8:	667b      	str	r3, [r7, #100]	; 0x64
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037da:	e841 2300 	strex	r3, r2, [r1]
 80037de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1e6      	bne.n	80037b4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3308      	adds	r3, #8
 80037ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f0:	e853 3f00 	ldrex	r3, [r3]
 80037f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f8:	f023 0301 	bic.w	r3, r3, #1
 80037fc:	663b      	str	r3, [r7, #96]	; 0x60
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3308      	adds	r3, #8
 8003804:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003806:	64ba      	str	r2, [r7, #72]	; 0x48
 8003808:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800380c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800380e:	e841 2300 	strex	r3, r2, [r1]
 8003812:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1e5      	bne.n	80037e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2220      	movs	r2, #32
 800381e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e067      	b.n	8003902 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d04f      	beq.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800384a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800384e:	d147      	bne.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003858:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003862:	e853 3f00 	ldrex	r3, [r3]
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800386e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003878:	637b      	str	r3, [r7, #52]	; 0x34
 800387a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800387e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003880:	e841 2300 	strex	r3, r2, [r1]
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e6      	bne.n	800385a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3308      	adds	r3, #8
 8003892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	e853 3f00 	ldrex	r3, [r3]
 800389a:	613b      	str	r3, [r7, #16]
   return(result);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f023 0301 	bic.w	r3, r3, #1
 80038a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3308      	adds	r3, #8
 80038aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038ac:	623a      	str	r2, [r7, #32]
 80038ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b0:	69f9      	ldr	r1, [r7, #28]
 80038b2:	6a3a      	ldr	r2, [r7, #32]
 80038b4:	e841 2300 	strex	r3, r2, [r1]
 80038b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1e5      	bne.n	800388c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e010      	b.n	8003902 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	69da      	ldr	r2, [r3, #28]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4013      	ands	r3, r2
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	bf0c      	ite	eq
 80038f0:	2301      	moveq	r3, #1
 80038f2:	2300      	movne	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	f43f af4a 	beq.w	8003794 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3770      	adds	r7, #112	; 0x70
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <__libc_init_array>:
 800390c:	b570      	push	{r4, r5, r6, lr}
 800390e:	4d0d      	ldr	r5, [pc, #52]	; (8003944 <__libc_init_array+0x38>)
 8003910:	4c0d      	ldr	r4, [pc, #52]	; (8003948 <__libc_init_array+0x3c>)
 8003912:	1b64      	subs	r4, r4, r5
 8003914:	10a4      	asrs	r4, r4, #2
 8003916:	2600      	movs	r6, #0
 8003918:	42a6      	cmp	r6, r4
 800391a:	d109      	bne.n	8003930 <__libc_init_array+0x24>
 800391c:	4d0b      	ldr	r5, [pc, #44]	; (800394c <__libc_init_array+0x40>)
 800391e:	4c0c      	ldr	r4, [pc, #48]	; (8003950 <__libc_init_array+0x44>)
 8003920:	f000 f820 	bl	8003964 <_init>
 8003924:	1b64      	subs	r4, r4, r5
 8003926:	10a4      	asrs	r4, r4, #2
 8003928:	2600      	movs	r6, #0
 800392a:	42a6      	cmp	r6, r4
 800392c:	d105      	bne.n	800393a <__libc_init_array+0x2e>
 800392e:	bd70      	pop	{r4, r5, r6, pc}
 8003930:	f855 3b04 	ldr.w	r3, [r5], #4
 8003934:	4798      	blx	r3
 8003936:	3601      	adds	r6, #1
 8003938:	e7ee      	b.n	8003918 <__libc_init_array+0xc>
 800393a:	f855 3b04 	ldr.w	r3, [r5], #4
 800393e:	4798      	blx	r3
 8003940:	3601      	adds	r6, #1
 8003942:	e7f2      	b.n	800392a <__libc_init_array+0x1e>
 8003944:	080039cc 	.word	0x080039cc
 8003948:	080039cc 	.word	0x080039cc
 800394c:	080039cc 	.word	0x080039cc
 8003950:	080039d0 	.word	0x080039d0

08003954 <memset>:
 8003954:	4402      	add	r2, r0
 8003956:	4603      	mov	r3, r0
 8003958:	4293      	cmp	r3, r2
 800395a:	d100      	bne.n	800395e <memset+0xa>
 800395c:	4770      	bx	lr
 800395e:	f803 1b01 	strb.w	r1, [r3], #1
 8003962:	e7f9      	b.n	8003958 <memset+0x4>

08003964 <_init>:
 8003964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003966:	bf00      	nop
 8003968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396a:	bc08      	pop	{r3}
 800396c:	469e      	mov	lr, r3
 800396e:	4770      	bx	lr

08003970 <_fini>:
 8003970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003972:	bf00      	nop
 8003974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003976:	bc08      	pop	{r3}
 8003978:	469e      	mov	lr, r3
 800397a:	4770      	bx	lr
