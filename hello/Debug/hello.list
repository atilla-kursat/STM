
hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fec  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b8  080031b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080031b8  080031b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031b8  080031b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031b8  080031b8  000131b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031bc  080031bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  080031cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080031cc  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000937e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016d3  00000000  00000000  000293ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  0002aa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  0002b3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d16  00000000  00000000  0002bc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009208  00000000  00000000  0004597e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9bff  00000000  00000000  0004eb86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8785  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025d0  00000000  00000000  000f87d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003160 	.word	0x08003160

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003160 	.word	0x08003160

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fa2c 	bl	800062c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f81a 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f8de 	bl	8000398 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001dc:	f000 f866 	bl	80002ac <MX_ADC1_Init>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 80001e0:	4808      	ldr	r0, [pc, #32]	; (8000204 <main+0x38>)
 80001e2:	f000 fe33 	bl	8000e4c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80001e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001ea:	4806      	ldr	r0, [pc, #24]	; (8000204 <main+0x38>)
 80001ec:	f000 ff1c 	bl	8001028 <HAL_ADC_PollForConversion>
	  x = HAL_ADC_GetValue(&hadc1);
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <main+0x38>)
 80001f2:	f000 fff1 	bl	80011d8 <HAL_ADC_GetValue>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4a03      	ldr	r2, [pc, #12]	; (8000208 <main+0x3c>)
 80001fa:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 80001fc:	4801      	ldr	r0, [pc, #4]	; (8000204 <main+0x38>)
 80001fe:	f000 fedf 	bl	8000fc0 <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc1);
 8000202:	e7ed      	b.n	80001e0 <main+0x14>
 8000204:	20000028 	.word	0x20000028
 8000208:	2000008c 	.word	0x2000008c

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b096      	sub	sp, #88	; 0x58
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0314 	add.w	r3, r7, #20
 8000216:	2244      	movs	r2, #68	; 0x44
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f002 ff98 	bl	8003150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	463b      	mov	r3, r7
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800022e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000232:	f002 f8c5 	bl	80023c0 <HAL_PWREx_ControlVoltageScaling>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800023c:	f000 f926 	bl	800048c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000240:	2310      	movs	r3, #16
 8000242:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000244:	2301      	movs	r3, #1
 8000246:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000248:	2300      	movs	r3, #0
 800024a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800024c:	2360      	movs	r3, #96	; 0x60
 800024e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000250:	2302      	movs	r3, #2
 8000252:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000254:	2301      	movs	r3, #1
 8000256:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000258:	2301      	movs	r3, #1
 800025a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 800025c:	2328      	movs	r3, #40	; 0x28
 800025e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000260:	2302      	movs	r3, #2
 8000262:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000264:	2302      	movs	r3, #2
 8000266:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	4618      	mov	r0, r3
 800026e:	f002 f8fd 	bl	800246c <HAL_RCC_OscConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000278:	f000 f908 	bl	800048c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027c:	230f      	movs	r3, #15
 800027e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000280:	2303      	movs	r3, #3
 8000282:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000290:	463b      	mov	r3, r7
 8000292:	2104      	movs	r1, #4
 8000294:	4618      	mov	r0, r3
 8000296:	f002 fd4b 	bl	8002d30 <HAL_RCC_ClockConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002a0:	f000 f8f4 	bl	800048c <Error_Handler>
  }
}
 80002a4:	bf00      	nop
 80002a6:	3758      	adds	r7, #88	; 0x58
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b08a      	sub	sp, #40	; 0x28
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002b2:	f107 031c 	add.w	r3, r7, #28
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	60da      	str	r2, [r3, #12]
 80002ca:	611a      	str	r2, [r3, #16]
 80002cc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ce:	4b2f      	ldr	r3, [pc, #188]	; (800038c <MX_ADC1_Init+0xe0>)
 80002d0:	4a2f      	ldr	r2, [pc, #188]	; (8000390 <MX_ADC1_Init+0xe4>)
 80002d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002d4:	4b2d      	ldr	r3, [pc, #180]	; (800038c <MX_ADC1_Init+0xe0>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002da:	4b2c      	ldr	r3, [pc, #176]	; (800038c <MX_ADC1_Init+0xe0>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002e0:	4b2a      	ldr	r3, [pc, #168]	; (800038c <MX_ADC1_Init+0xe0>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002e6:	4b29      	ldr	r3, [pc, #164]	; (800038c <MX_ADC1_Init+0xe0>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002ec:	4b27      	ldr	r3, [pc, #156]	; (800038c <MX_ADC1_Init+0xe0>)
 80002ee:	2204      	movs	r2, #4
 80002f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002f2:	4b26      	ldr	r3, [pc, #152]	; (800038c <MX_ADC1_Init+0xe0>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002f8:	4b24      	ldr	r3, [pc, #144]	; (800038c <MX_ADC1_Init+0xe0>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80002fe:	4b23      	ldr	r3, [pc, #140]	; (800038c <MX_ADC1_Init+0xe0>)
 8000300:	2201      	movs	r2, #1
 8000302:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000304:	4b21      	ldr	r3, [pc, #132]	; (800038c <MX_ADC1_Init+0xe0>)
 8000306:	2200      	movs	r2, #0
 8000308:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800030c:	4b1f      	ldr	r3, [pc, #124]	; (800038c <MX_ADC1_Init+0xe0>)
 800030e:	2200      	movs	r2, #0
 8000310:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000312:	4b1e      	ldr	r3, [pc, #120]	; (800038c <MX_ADC1_Init+0xe0>)
 8000314:	2200      	movs	r2, #0
 8000316:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000318:	4b1c      	ldr	r3, [pc, #112]	; (800038c <MX_ADC1_Init+0xe0>)
 800031a:	2200      	movs	r2, #0
 800031c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000320:	4b1a      	ldr	r3, [pc, #104]	; (800038c <MX_ADC1_Init+0xe0>)
 8000322:	2200      	movs	r2, #0
 8000324:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000326:	4b19      	ldr	r3, [pc, #100]	; (800038c <MX_ADC1_Init+0xe0>)
 8000328:	2200      	movs	r2, #0
 800032a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800032e:	4817      	ldr	r0, [pc, #92]	; (800038c <MX_ADC1_Init+0xe0>)
 8000330:	f000 fc3c 	bl	8000bac <HAL_ADC_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800033a:	f000 f8a7 	bl	800048c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800033e:	2300      	movs	r3, #0
 8000340:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000342:	f107 031c 	add.w	r3, r7, #28
 8000346:	4619      	mov	r1, r3
 8000348:	4810      	ldr	r0, [pc, #64]	; (800038c <MX_ADC1_Init+0xe0>)
 800034a:	f001 fd17 	bl	8001d7c <HAL_ADCEx_MultiModeConfigChannel>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000354:	f000 f89a 	bl	800048c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000358:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <MX_ADC1_Init+0xe8>)
 800035a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800035c:	2306      	movs	r3, #6
 800035e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000364:	237f      	movs	r3, #127	; 0x7f
 8000366:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000368:	2304      	movs	r3, #4
 800036a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	4619      	mov	r1, r3
 8000374:	4805      	ldr	r0, [pc, #20]	; (800038c <MX_ADC1_Init+0xe0>)
 8000376:	f000 ff3d 	bl	80011f4 <HAL_ADC_ConfigChannel>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000380:	f000 f884 	bl	800048c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000384:	bf00      	nop
 8000386:	3728      	adds	r7, #40	; 0x28
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000028 	.word	0x20000028
 8000390:	50040000 	.word	0x50040000
 8000394:	08600004 	.word	0x08600004

08000398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b08a      	sub	sp, #40	; 0x28
 800039c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039e:	f107 0314 	add.w	r3, r7, #20
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
 80003ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003ae:	4b34      	ldr	r3, [pc, #208]	; (8000480 <MX_GPIO_Init+0xe8>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b2:	4a33      	ldr	r2, [pc, #204]	; (8000480 <MX_GPIO_Init+0xe8>)
 80003b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ba:	4b31      	ldr	r3, [pc, #196]	; (8000480 <MX_GPIO_Init+0xe8>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003c2:	613b      	str	r3, [r7, #16]
 80003c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c6:	4b2e      	ldr	r3, [pc, #184]	; (8000480 <MX_GPIO_Init+0xe8>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ca:	4a2d      	ldr	r2, [pc, #180]	; (8000480 <MX_GPIO_Init+0xe8>)
 80003cc:	f043 0304 	orr.w	r3, r3, #4
 80003d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003d2:	4b2b      	ldr	r3, [pc, #172]	; (8000480 <MX_GPIO_Init+0xe8>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	f003 0304 	and.w	r3, r3, #4
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003de:	4b28      	ldr	r3, [pc, #160]	; (8000480 <MX_GPIO_Init+0xe8>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	4a27      	ldr	r2, [pc, #156]	; (8000480 <MX_GPIO_Init+0xe8>)
 80003e4:	f043 0302 	orr.w	r3, r3, #2
 80003e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ea:	4b25      	ldr	r3, [pc, #148]	; (8000480 <MX_GPIO_Init+0xe8>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	f003 0302 	and.w	r3, r3, #2
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f6:	4b22      	ldr	r3, [pc, #136]	; (8000480 <MX_GPIO_Init+0xe8>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	4a21      	ldr	r2, [pc, #132]	; (8000480 <MX_GPIO_Init+0xe8>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000402:	4b1f      	ldr	r3, [pc, #124]	; (8000480 <MX_GPIO_Init+0xe8>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000414:	481b      	ldr	r0, [pc, #108]	; (8000484 <MX_GPIO_Init+0xec>)
 8000416:	f001 ffad 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2180      	movs	r1, #128	; 0x80
 800041e:	481a      	ldr	r0, [pc, #104]	; (8000488 <MX_GPIO_Init+0xf0>)
 8000420:	f001 ffa8 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042a:	2301      	movs	r3, #1
 800042c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000432:	2300      	movs	r3, #0
 8000434:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	4619      	mov	r1, r3
 800043c:	4811      	ldr	r0, [pc, #68]	; (8000484 <MX_GPIO_Init+0xec>)
 800043e:	f001 fe27 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000442:	2380      	movs	r3, #128	; 0x80
 8000444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000446:	2301      	movs	r3, #1
 8000448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	2300      	movs	r3, #0
 800044c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044e:	2300      	movs	r3, #0
 8000450:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000452:	f107 0314 	add.w	r3, r7, #20
 8000456:	4619      	mov	r1, r3
 8000458:	480b      	ldr	r0, [pc, #44]	; (8000488 <MX_GPIO_Init+0xf0>)
 800045a:	f001 fe19 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800045e:	2340      	movs	r3, #64	; 0x40
 8000460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000462:	2300      	movs	r3, #0
 8000464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046a:	f107 0314 	add.w	r3, r7, #20
 800046e:	4619      	mov	r1, r3
 8000470:	4804      	ldr	r0, [pc, #16]	; (8000484 <MX_GPIO_Init+0xec>)
 8000472:	f001 fe0d 	bl	8002090 <HAL_GPIO_Init>

}
 8000476:	bf00      	nop
 8000478:	3728      	adds	r7, #40	; 0x28
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000
 8000484:	48000400 	.word	0x48000400
 8000488:	48000800 	.word	0x48000800

0800048c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000490:	b672      	cpsid	i
}
 8000492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000494:	e7fe      	b.n	8000494 <Error_Handler+0x8>
	...

08000498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049e:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <HAL_MspInit+0x44>)
 80004a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004a2:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <HAL_MspInit+0x44>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	6613      	str	r3, [r2, #96]	; 0x60
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <HAL_MspInit+0x44>)
 80004ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <HAL_MspInit+0x44>)
 80004b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ba:	4a08      	ldr	r2, [pc, #32]	; (80004dc <HAL_MspInit+0x44>)
 80004bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c0:	6593      	str	r3, [r2, #88]	; 0x58
 80004c2:	4b06      	ldr	r3, [pc, #24]	; (80004dc <HAL_MspInit+0x44>)
 80004c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000

080004e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	; 0x28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a15      	ldr	r2, [pc, #84]	; (8000554 <HAL_ADC_MspInit+0x74>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d123      	bne.n	800054a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000502:	4b15      	ldr	r3, [pc, #84]	; (8000558 <HAL_ADC_MspInit+0x78>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	4a14      	ldr	r2, [pc, #80]	; (8000558 <HAL_ADC_MspInit+0x78>)
 8000508:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800050c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050e:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_ADC_MspInit+0x78>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <HAL_ADC_MspInit+0x78>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <HAL_ADC_MspInit+0x78>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <HAL_ADC_MspInit+0x78>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000532:	2302      	movs	r3, #2
 8000534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000536:	230b      	movs	r3, #11
 8000538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	4619      	mov	r1, r3
 8000544:	4805      	ldr	r0, [pc, #20]	; (800055c <HAL_ADC_MspInit+0x7c>)
 8000546:	f001 fda3 	bl	8002090 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800054a:	bf00      	nop
 800054c:	3728      	adds	r7, #40	; 0x28
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	50040000 	.word	0x50040000
 8000558:	40021000 	.word	0x40021000
 800055c:	48000800 	.word	0x48000800

08000560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <NMI_Handler+0x4>

08000566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <HardFault_Handler+0x4>

0800056c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <MemManage_Handler+0x4>

08000572 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000576:	e7fe      	b.n	8000576 <BusFault_Handler+0x4>

08000578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800057c:	e7fe      	b.n	800057c <UsageFault_Handler+0x4>

0800057e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ac:	f000 f89a 	bl	80006e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <SystemInit+0x20>)
 80005ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005be:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <SystemInit+0x20>)
 80005c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000610 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005dc:	f7ff ffea 	bl	80005b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e0:	480c      	ldr	r0, [pc, #48]	; (8000614 <LoopForever+0x6>)
  ldr r1, =_edata
 80005e2:	490d      	ldr	r1, [pc, #52]	; (8000618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e4:	4a0d      	ldr	r2, [pc, #52]	; (800061c <LoopForever+0xe>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e8:	e002      	b.n	80005f0 <LoopCopyDataInit>

080005ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ee:	3304      	adds	r3, #4

080005f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f4:	d3f9      	bcc.n	80005ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f8:	4c0a      	ldr	r4, [pc, #40]	; (8000624 <LoopForever+0x16>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005fc:	e001      	b.n	8000602 <LoopFillZerobss>

080005fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000600:	3204      	adds	r2, #4

08000602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000604:	d3fb      	bcc.n	80005fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000606:	f002 fd7f 	bl	8003108 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800060a:	f7ff fddf 	bl	80001cc <main>

0800060e <LoopForever>:

LoopForever:
    b LoopForever
 800060e:	e7fe      	b.n	800060e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000610:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000618:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800061c:	080031c0 	.word	0x080031c0
  ldr r2, =_sbss
 8000620:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000624:	20000094 	.word	0x20000094

08000628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000628:	e7fe      	b.n	8000628 <ADC1_2_IRQHandler>
	...

0800062c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000632:	2300      	movs	r3, #0
 8000634:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <HAL_Init+0x3c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <HAL_Init+0x3c>)
 800063c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000640:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000642:	2003      	movs	r0, #3
 8000644:	f001 fcf0 	bl	8002028 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000648:	2000      	movs	r0, #0
 800064a:	f000 f80f 	bl	800066c <HAL_InitTick>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d002      	beq.n	800065a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000654:	2301      	movs	r3, #1
 8000656:	71fb      	strb	r3, [r7, #7]
 8000658:	e001      	b.n	800065e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800065a:	f7ff ff1d 	bl	8000498 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800065e:	79fb      	ldrb	r3, [r7, #7]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40022000 	.word	0x40022000

0800066c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000674:	2300      	movs	r3, #0
 8000676:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000678:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <HAL_InitTick+0x6c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d023      	beq.n	80006c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <HAL_InitTick+0x70>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <HAL_InitTick+0x6c>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	4619      	mov	r1, r3
 800068a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000692:	fbb2 f3f3 	udiv	r3, r2, r3
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fced 	bl	8002076 <HAL_SYSTICK_Config>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d10f      	bne.n	80006c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b0f      	cmp	r3, #15
 80006a6:	d809      	bhi.n	80006bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a8:	2200      	movs	r2, #0
 80006aa:	6879      	ldr	r1, [r7, #4]
 80006ac:	f04f 30ff 	mov.w	r0, #4294967295
 80006b0:	f001 fcc5 	bl	800203e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006b4:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <HAL_InitTick+0x74>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6013      	str	r3, [r2, #0]
 80006ba:	e007      	b.n	80006cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006bc:	2301      	movs	r3, #1
 80006be:	73fb      	strb	r3, [r7, #15]
 80006c0:	e004      	b.n	80006cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	73fb      	strb	r3, [r7, #15]
 80006c6:	e001      	b.n	80006cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006c8:	2301      	movs	r3, #1
 80006ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000008 	.word	0x20000008
 80006dc:	20000000 	.word	0x20000000
 80006e0:	20000004 	.word	0x20000004

080006e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <HAL_IncTick+0x20>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_IncTick+0x24>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	4a04      	ldr	r2, [pc, #16]	; (8000708 <HAL_IncTick+0x24>)
 80006f6:	6013      	str	r3, [r2, #0]
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	20000008 	.word	0x20000008
 8000708:	20000090 	.word	0x20000090

0800070c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return uwTick;
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <HAL_GetTick+0x14>)
 8000712:	681b      	ldr	r3, [r3, #0]
}
 8000714:	4618      	mov	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	20000090 	.word	0x20000090

08000724 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	431a      	orrs	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	609a      	str	r2, [r3, #8]
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800074a:	b480      	push	{r7}
 800074c:	b083      	sub	sp, #12
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
 8000752:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	431a      	orrs	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	609a      	str	r2, [r3, #8]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000780:	4618      	mov	r0, r3
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800078c:	b480      	push	{r7}
 800078e:	b087      	sub	sp, #28
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
 8000798:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	3360      	adds	r3, #96	; 0x60
 800079e:	461a      	mov	r2, r3
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4413      	add	r3, r2
 80007a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <LL_ADC_SetOffset+0x44>)
 80007ae:	4013      	ands	r3, r2
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	430a      	orrs	r2, r1
 80007ba:	4313      	orrs	r3, r2
 80007bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80007c4:	bf00      	nop
 80007c6:	371c      	adds	r7, #28
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	03fff000 	.word	0x03fff000

080007d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3360      	adds	r3, #96	; 0x60
 80007e2:	461a      	mov	r2, r3
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000800:	b480      	push	{r7}
 8000802:	b087      	sub	sp, #28
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	3360      	adds	r3, #96	; 0x60
 8000810:	461a      	mov	r2, r3
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	4413      	add	r3, r2
 8000818:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	431a      	orrs	r2, r3
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800082a:	bf00      	nop
 800082c:	371c      	adds	r7, #28
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	431a      	orrs	r2, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	615a      	str	r2, [r3, #20]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800086c:	2b00      	cmp	r3, #0
 800086e:	d101      	bne.n	8000874 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000870:	2301      	movs	r3, #1
 8000872:	e000      	b.n	8000876 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000882:	b480      	push	{r7}
 8000884:	b087      	sub	sp, #28
 8000886:	af00      	add	r7, sp, #0
 8000888:	60f8      	str	r0, [r7, #12]
 800088a:	60b9      	str	r1, [r7, #8]
 800088c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	3330      	adds	r3, #48	; 0x30
 8000892:	461a      	mov	r2, r3
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	0a1b      	lsrs	r3, r3, #8
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	f003 030c 	and.w	r3, r3, #12
 800089e:	4413      	add	r3, r2
 80008a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	f003 031f 	and.w	r3, r3, #31
 80008ac:	211f      	movs	r1, #31
 80008ae:	fa01 f303 	lsl.w	r3, r1, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	401a      	ands	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	0e9b      	lsrs	r3, r3, #26
 80008ba:	f003 011f 	and.w	r1, r3, #31
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	f003 031f 	and.w	r3, r3, #31
 80008c4:	fa01 f303 	lsl.w	r3, r1, r3
 80008c8:	431a      	orrs	r2, r3
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80008ce:	bf00      	nop
 80008d0:	371c      	adds	r7, #28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80008da:	b480      	push	{r7}
 80008dc:	b087      	sub	sp, #28
 80008de:	af00      	add	r7, sp, #0
 80008e0:	60f8      	str	r0, [r7, #12]
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	3314      	adds	r3, #20
 80008ea:	461a      	mov	r2, r3
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	0e5b      	lsrs	r3, r3, #25
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	4413      	add	r3, r2
 80008f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	0d1b      	lsrs	r3, r3, #20
 8000902:	f003 031f 	and.w	r3, r3, #31
 8000906:	2107      	movs	r1, #7
 8000908:	fa01 f303 	lsl.w	r3, r1, r3
 800090c:	43db      	mvns	r3, r3
 800090e:	401a      	ands	r2, r3
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	0d1b      	lsrs	r3, r3, #20
 8000914:	f003 031f 	and.w	r3, r3, #31
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	fa01 f303 	lsl.w	r3, r1, r3
 800091e:	431a      	orrs	r2, r3
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000924:	bf00      	nop
 8000926:	371c      	adds	r7, #28
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000948:	43db      	mvns	r3, r3
 800094a:	401a      	ands	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f003 0318 	and.w	r3, r3, #24
 8000952:	4908      	ldr	r1, [pc, #32]	; (8000974 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000954:	40d9      	lsrs	r1, r3
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	400b      	ands	r3, r1
 800095a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800095e:	431a      	orrs	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	0007ffff 	.word	0x0007ffff

08000978 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	f003 031f 	and.w	r3, r3, #31
}
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80009c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	6093      	str	r3, [r2, #8]
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80009e8:	d101      	bne.n	80009ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80009ea:	2301      	movs	r3, #1
 80009ec:	e000      	b.n	80009f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000a0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000a38:	d101      	bne.n	8000a3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e000      	b.n	8000a40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000a3e:	2300      	movs	r3, #0
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000a5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a60:	f043 0201 	orr.w	r2, r3, #1
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000a84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a88:	f043 0202 	orr.w	r2, r3, #2
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d101      	bne.n	8000ab4 <LL_ADC_IsEnabled+0x18>
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	e000      	b.n	8000ab6 <LL_ADC_IsEnabled+0x1a>
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	d101      	bne.n	8000ada <LL_ADC_IsDisableOngoing+0x18>
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e000      	b.n	8000adc <LL_ADC_IsDisableOngoing+0x1a>
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000af8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000afc:	f043 0204 	orr.w	r2, r3, #4
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b24:	f043 0210 	orr.w	r2, r3, #16
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	2b04      	cmp	r3, #4
 8000b4a:	d101      	bne.n	8000b50 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e000      	b.n	8000b52 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b72:	f043 0220 	orr.w	r2, r3, #32
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	f003 0308 	and.w	r3, r3, #8
 8000b96:	2b08      	cmp	r3, #8
 8000b98:	d101      	bne.n	8000b9e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e000      	b.n	8000ba0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000bac:	b590      	push	{r4, r7, lr}
 8000bae:	b089      	sub	sp, #36	; 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e131      	b.n	8000e2a <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	691b      	ldr	r3, [r3, #16]
 8000bca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d109      	bne.n	8000be8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff fc83 	bl	80004e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fef1 	bl	80009d4 <LL_ADC_IsDeepPowerDownEnabled>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d004      	beq.n	8000c02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fed7 	bl	80009b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff0c 	bl	8000a24 <LL_ADC_IsInternalRegulatorEnabled>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d115      	bne.n	8000c3e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fef0 	bl	80009fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000c1c:	4b85      	ldr	r3, [pc, #532]	; (8000e34 <HAL_ADC_Init+0x288>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	099b      	lsrs	r3, r3, #6
 8000c22:	4a85      	ldr	r2, [pc, #532]	; (8000e38 <HAL_ADC_Init+0x28c>)
 8000c24:	fba2 2303 	umull	r2, r3, r2, r3
 8000c28:	099b      	lsrs	r3, r3, #6
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c30:	e002      	b.n	8000c38 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	3b01      	subs	r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d1f9      	bne.n	8000c32 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff feee 	bl	8000a24 <LL_ADC_IsInternalRegulatorEnabled>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10d      	bne.n	8000c6a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c52:	f043 0210 	orr.w	r2, r3, #16
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5e:	f043 0201 	orr.w	r2, r3, #1
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ff62 	bl	8000b38 <LL_ADC_REG_IsConversionOngoing>
 8000c74:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c7a:	f003 0310 	and.w	r3, r3, #16
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f040 80ca 	bne.w	8000e18 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f040 80c6 	bne.w	8000e18 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000c94:	f043 0202 	orr.w	r2, r3, #2
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fefb 	bl	8000a9c <LL_ADC_IsEnabled>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d110      	bne.n	8000cce <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000cac:	4863      	ldr	r0, [pc, #396]	; (8000e3c <HAL_ADC_Init+0x290>)
 8000cae:	f7ff fef5 	bl	8000a9c <LL_ADC_IsEnabled>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	4862      	ldr	r0, [pc, #392]	; (8000e40 <HAL_ADC_Init+0x294>)
 8000cb6:	f7ff fef1 	bl	8000a9c <LL_ADC_IsEnabled>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4323      	orrs	r3, r4
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d105      	bne.n	8000cce <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	485e      	ldr	r0, [pc, #376]	; (8000e44 <HAL_ADC_Init+0x298>)
 8000cca:	f7ff fd2b 	bl	8000724 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	7e5b      	ldrb	r3, [r3, #25]
 8000cd2:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000cd8:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000cde:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000ce4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cec:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d106      	bne.n	8000d0a <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d00:	3b01      	subs	r3, #1
 8000d02:	045b      	lsls	r3, r3, #17
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d009      	beq.n	8000d26 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d16:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	4b46      	ldr	r3, [pc, #280]	; (8000e48 <HAL_ADC_Init+0x29c>)
 8000d2e:	4013      	ands	r3, r2
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	6812      	ldr	r2, [r2, #0]
 8000d34:	69b9      	ldr	r1, [r7, #24]
 8000d36:	430b      	orrs	r3, r1
 8000d38:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fefa 	bl	8000b38 <LL_ADC_REG_IsConversionOngoing>
 8000d44:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff1b 	bl	8000b86 <LL_ADC_INJ_IsConversionOngoing>
 8000d50:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d13d      	bne.n	8000dd4 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d13a      	bne.n	8000dd4 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d62:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d6a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d7a:	f023 0302 	bic.w	r3, r3, #2
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	6812      	ldr	r2, [r2, #0]
 8000d82:	69b9      	ldr	r1, [r7, #24]
 8000d84:	430b      	orrs	r3, r1
 8000d86:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d118      	bne.n	8000dc4 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000d9c:	f023 0304 	bic.w	r3, r3, #4
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000da8:	4311      	orrs	r1, r2
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000dae:	4311      	orrs	r1, r2
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000db4:	430a      	orrs	r2, r1
 8000db6:	431a      	orrs	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f042 0201 	orr.w	r2, r2, #1
 8000dc0:	611a      	str	r2, [r3, #16]
 8000dc2:	e007      	b.n	8000dd4 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	691a      	ldr	r2, [r3, #16]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f022 0201 	bic.w	r2, r2, #1
 8000dd2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d10c      	bne.n	8000df6 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f023 010f 	bic.w	r1, r3, #15
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	1e5a      	subs	r2, r3, #1
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	430a      	orrs	r2, r1
 8000df2:	631a      	str	r2, [r3, #48]	; 0x30
 8000df4:	e007      	b.n	8000e06 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 020f 	bic.w	r2, r2, #15
 8000e04:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e0a:	f023 0303 	bic.w	r3, r3, #3
 8000e0e:	f043 0201 	orr.w	r2, r3, #1
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	655a      	str	r2, [r3, #84]	; 0x54
 8000e16:	e007      	b.n	8000e28 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e1c:	f043 0210 	orr.w	r2, r3, #16
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e28:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	; 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd90      	pop	{r4, r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000000 	.word	0x20000000
 8000e38:	053e2d63 	.word	0x053e2d63
 8000e3c:	50040000 	.word	0x50040000
 8000e40:	50040100 	.word	0x50040100
 8000e44:	50040300 	.word	0x50040300
 8000e48:	fff0c007 	.word	0xfff0c007

08000e4c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000e54:	4857      	ldr	r0, [pc, #348]	; (8000fb4 <HAL_ADC_Start+0x168>)
 8000e56:	f7ff fd8f 	bl	8000978 <LL_ADC_GetMultimode>
 8000e5a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fe69 	bl	8000b38 <LL_ADC_REG_IsConversionOngoing>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f040 809c 	bne.w	8000fa6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d101      	bne.n	8000e7c <HAL_ADC_Start+0x30>
 8000e78:	2302      	movs	r3, #2
 8000e7a:	e097      	b.n	8000fac <HAL_ADC_Start+0x160>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f000 fe6d 	bl	8001b64 <ADC_Enable>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e8e:	7dfb      	ldrb	r3, [r7, #23]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f040 8083 	bne.w	8000f9c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e9a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e9e:	f023 0301 	bic.w	r3, r3, #1
 8000ea2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a42      	ldr	r2, [pc, #264]	; (8000fb8 <HAL_ADC_Start+0x16c>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d002      	beq.n	8000eba <HAL_ADC_Start+0x6e>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	e000      	b.n	8000ebc <HAL_ADC_Start+0x70>
 8000eba:	4b40      	ldr	r3, [pc, #256]	; (8000fbc <HAL_ADC_Start+0x170>)
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	6812      	ldr	r2, [r2, #0]
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d002      	beq.n	8000eca <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d105      	bne.n	8000ed6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ece:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ee2:	d106      	bne.n	8000ef2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee8:	f023 0206 	bic.w	r2, r3, #6
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	659a      	str	r2, [r3, #88]	; 0x58
 8000ef0:	e002      	b.n	8000ef8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	221c      	movs	r2, #28
 8000efe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a2a      	ldr	r2, [pc, #168]	; (8000fb8 <HAL_ADC_Start+0x16c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d002      	beq.n	8000f18 <HAL_ADC_Start+0xcc>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	e000      	b.n	8000f1a <HAL_ADC_Start+0xce>
 8000f18:	4b28      	ldr	r3, [pc, #160]	; (8000fbc <HAL_ADC_Start+0x170>)
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	6812      	ldr	r2, [r2, #0]
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d008      	beq.n	8000f34 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d005      	beq.n	8000f34 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	2b05      	cmp	r3, #5
 8000f2c:	d002      	beq.n	8000f34 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	2b09      	cmp	r3, #9
 8000f32:	d114      	bne.n	8000f5e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d007      	beq.n	8000f52 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fdc6 	bl	8000ae8 <LL_ADC_REG_StartConversion>
 8000f5c:	e025      	b.n	8000faa <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <HAL_ADC_Start+0x16c>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d002      	beq.n	8000f7a <HAL_ADC_Start+0x12e>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	e000      	b.n	8000f7c <HAL_ADC_Start+0x130>
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <HAL_ADC_Start+0x170>)
 8000f7c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d00f      	beq.n	8000faa <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	655a      	str	r2, [r3, #84]	; 0x54
 8000f9a:	e006      	b.n	8000faa <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000fa4:	e001      	b.n	8000faa <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	50040300 	.word	0x50040300
 8000fb8:	50040100 	.word	0x50040100
 8000fbc:	50040000 	.word	0x50040000

08000fc0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d101      	bne.n	8000fd6 <HAL_ADC_Stop+0x16>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e023      	b.n	800101e <HAL_ADC_Stop+0x5e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8000fde:	2103      	movs	r1, #3
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 fd03 	bl	80019ec <ADC_ConversionStop>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d111      	bne.n	8001014 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 fe3d 	bl	8001c70 <ADC_Disable>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d109      	bne.n	8001014 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001004:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	f043 0201 	orr.w	r2, r3, #1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001032:	4866      	ldr	r0, [pc, #408]	; (80011cc <HAL_ADC_PollForConversion+0x1a4>)
 8001034:	f7ff fca0 	bl	8000978 <LL_ADC_GetMultimode>
 8001038:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	2b08      	cmp	r3, #8
 8001040:	d102      	bne.n	8001048 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001042:	2308      	movs	r3, #8
 8001044:	61fb      	str	r3, [r7, #28]
 8001046:	e02a      	b.n	800109e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d005      	beq.n	800105a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	2b05      	cmp	r3, #5
 8001052:	d002      	beq.n	800105a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	2b09      	cmp	r3, #9
 8001058:	d111      	bne.n	800107e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b00      	cmp	r3, #0
 8001066:	d007      	beq.n	8001078 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800106c:	f043 0220 	orr.w	r2, r3, #32
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e0a4      	b.n	80011c2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001078:	2304      	movs	r3, #4
 800107a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800107c:	e00f      	b.n	800109e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800107e:	4853      	ldr	r0, [pc, #332]	; (80011cc <HAL_ADC_PollForConversion+0x1a4>)
 8001080:	f7ff fc88 	bl	8000994 <LL_ADC_GetMultiDMATransfer>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d007      	beq.n	800109a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800108e:	f043 0220 	orr.w	r2, r3, #32
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e093      	b.n	80011c2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800109a:	2304      	movs	r3, #4
 800109c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800109e:	f7ff fb35 	bl	800070c <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80010a4:	e021      	b.n	80010ea <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d01d      	beq.n	80010ea <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80010ae:	f7ff fb2d 	bl	800070c <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d302      	bcc.n	80010c4 <HAL_ADC_PollForConversion+0x9c>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d112      	bne.n	80010ea <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	4013      	ands	r3, r2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10b      	bne.n	80010ea <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d6:	f043 0204 	orr.w	r2, r3, #4
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e06b      	b.n	80011c2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	4013      	ands	r3, r2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0d6      	beq.n	80010a6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fba7 	bl	800085c <LL_ADC_REG_IsTriggerSourceSWStart>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d01c      	beq.n	800114e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	7e5b      	ldrb	r3, [r3, #25]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d118      	bne.n	800114e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	2b08      	cmp	r3, #8
 8001128:	d111      	bne.n	800114e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800113a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d105      	bne.n	800114e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001146:	f043 0201 	orr.w	r2, r3, #1
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a1f      	ldr	r2, [pc, #124]	; (80011d0 <HAL_ADC_PollForConversion+0x1a8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d002      	beq.n	800115e <HAL_ADC_PollForConversion+0x136>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	e000      	b.n	8001160 <HAL_ADC_PollForConversion+0x138>
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <HAL_ADC_PollForConversion+0x1ac>)
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	6812      	ldr	r2, [r2, #0]
 8001164:	4293      	cmp	r3, r2
 8001166:	d008      	beq.n	800117a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d005      	beq.n	800117a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	2b05      	cmp	r3, #5
 8001172:	d002      	beq.n	800117a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	2b09      	cmp	r3, #9
 8001178:	d104      	bne.n	8001184 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
 8001182:	e00c      	b.n	800119e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a11      	ldr	r2, [pc, #68]	; (80011d0 <HAL_ADC_PollForConversion+0x1a8>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d002      	beq.n	8001194 <HAL_ADC_PollForConversion+0x16c>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	e000      	b.n	8001196 <HAL_ADC_PollForConversion+0x16e>
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <HAL_ADC_PollForConversion+0x1ac>)
 8001196:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	d104      	bne.n	80011ae <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2208      	movs	r2, #8
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	e008      	b.n	80011c0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d103      	bne.n	80011c0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	220c      	movs	r2, #12
 80011be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	50040300 	.word	0x50040300
 80011d0:	50040100 	.word	0x50040100
 80011d4:	50040000 	.word	0x50040000

080011d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b0b6      	sub	sp, #216	; 0xd8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800120e:	2b01      	cmp	r3, #1
 8001210:	d101      	bne.n	8001216 <HAL_ADC_ConfigChannel+0x22>
 8001212:	2302      	movs	r3, #2
 8001214:	e3d5      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x7ce>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fc88 	bl	8000b38 <LL_ADC_REG_IsConversionOngoing>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	f040 83ba 	bne.w	80019a4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b05      	cmp	r3, #5
 8001236:	d824      	bhi.n	8001282 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	3b02      	subs	r3, #2
 800123e:	2b03      	cmp	r3, #3
 8001240:	d81b      	bhi.n	800127a <HAL_ADC_ConfigChannel+0x86>
 8001242:	a201      	add	r2, pc, #4	; (adr r2, 8001248 <HAL_ADC_ConfigChannel+0x54>)
 8001244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001248:	08001259 	.word	0x08001259
 800124c:	08001261 	.word	0x08001261
 8001250:	08001269 	.word	0x08001269
 8001254:	08001271 	.word	0x08001271
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	220c      	movs	r2, #12
 800125c:	605a      	str	r2, [r3, #4]
          break;
 800125e:	e011      	b.n	8001284 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2212      	movs	r2, #18
 8001264:	605a      	str	r2, [r3, #4]
          break;
 8001266:	e00d      	b.n	8001284 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	2218      	movs	r2, #24
 800126c:	605a      	str	r2, [r3, #4]
          break;
 800126e:	e009      	b.n	8001284 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001276:	605a      	str	r2, [r3, #4]
          break;
 8001278:	e004      	b.n	8001284 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	2206      	movs	r2, #6
 800127e:	605a      	str	r2, [r3, #4]
          break;
 8001280:	e000      	b.n	8001284 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001282:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	6859      	ldr	r1, [r3, #4]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	f7ff faf6 	bl	8000882 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fc4c 	bl	8000b38 <LL_ADC_REG_IsConversionOngoing>
 80012a0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fc6c 	bl	8000b86 <LL_ADC_INJ_IsConversionOngoing>
 80012ae:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f040 81c1 	bne.w	800163e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f040 81bc 	bne.w	800163e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012ce:	d10f      	bne.n	80012f0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fafd 	bl	80008da <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff faa4 	bl	8000836 <LL_ADC_SetSamplingTimeCommonConfig>
 80012ee:	e00e      	b.n	800130e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	6819      	ldr	r1, [r3, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	461a      	mov	r2, r3
 80012fe:	f7ff faec 	bl	80008da <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fa94 	bl	8000836 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	695a      	ldr	r2, [r3, #20]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	08db      	lsrs	r3, r3, #3
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	2b04      	cmp	r3, #4
 800132e:	d00a      	beq.n	8001346 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	6919      	ldr	r1, [r3, #16]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001340:	f7ff fa24 	bl	800078c <LL_ADC_SetOffset>
 8001344:	e17b      	b.n	800163e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fa41 	bl	80007d4 <LL_ADC_GetOffsetChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001358:	2b00      	cmp	r3, #0
 800135a:	d10a      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x17e>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fa36 	bl	80007d4 <LL_ADC_GetOffsetChannel>
 8001368:	4603      	mov	r3, r0
 800136a:	0e9b      	lsrs	r3, r3, #26
 800136c:	f003 021f 	and.w	r2, r3, #31
 8001370:	e01e      	b.n	80013b0 <HAL_ADC_ConfigChannel+0x1bc>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fa2b 	bl	80007d4 <LL_ADC_GetOffsetChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001384:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001388:	fa93 f3a3 	rbit	r3, r3
 800138c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001390:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001394:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001398:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80013a0:	2320      	movs	r3, #32
 80013a2:	e004      	b.n	80013ae <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80013a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80013a8:	fab3 f383 	clz	r3, r3
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d105      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x1d4>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	0e9b      	lsrs	r3, r3, #26
 80013c2:	f003 031f 	and.w	r3, r3, #31
 80013c6:	e018      	b.n	80013fa <HAL_ADC_ConfigChannel+0x206>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80013d4:	fa93 f3a3 	rbit	r3, r3
 80013d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80013dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80013e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80013ec:	2320      	movs	r3, #32
 80013ee:	e004      	b.n	80013fa <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80013f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80013f4:	fab3 f383 	clz	r3, r3
 80013f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d106      	bne.n	800140c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f9fa 	bl	8000800 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2101      	movs	r1, #1
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f9de 	bl	80007d4 <LL_ADC_GetOffsetChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10a      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x244>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2101      	movs	r1, #1
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f9d3 	bl	80007d4 <LL_ADC_GetOffsetChannel>
 800142e:	4603      	mov	r3, r0
 8001430:	0e9b      	lsrs	r3, r3, #26
 8001432:	f003 021f 	and.w	r2, r3, #31
 8001436:	e01e      	b.n	8001476 <HAL_ADC_ConfigChannel+0x282>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2101      	movs	r1, #1
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f9c8 	bl	80007d4 <LL_ADC_GetOffsetChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800144e:	fa93 f3a3 	rbit	r3, r3
 8001452:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001456:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800145a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800145e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001466:	2320      	movs	r3, #32
 8001468:	e004      	b.n	8001474 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800146a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800146e:	fab3 f383 	clz	r3, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800147e:	2b00      	cmp	r3, #0
 8001480:	d105      	bne.n	800148e <HAL_ADC_ConfigChannel+0x29a>
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	0e9b      	lsrs	r3, r3, #26
 8001488:	f003 031f 	and.w	r3, r3, #31
 800148c:	e018      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x2cc>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001496:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800149a:	fa93 f3a3 	rbit	r3, r3
 800149e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80014a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80014a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80014aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80014b2:	2320      	movs	r3, #32
 80014b4:	e004      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80014b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014ba:	fab3 f383 	clz	r3, r3
 80014be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d106      	bne.n	80014d2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2200      	movs	r2, #0
 80014ca:	2101      	movs	r1, #1
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f997 	bl	8000800 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2102      	movs	r1, #2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f97b 	bl	80007d4 <LL_ADC_GetOffsetChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d10a      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x30a>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2102      	movs	r1, #2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f970 	bl	80007d4 <LL_ADC_GetOffsetChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	0e9b      	lsrs	r3, r3, #26
 80014f8:	f003 021f 	and.w	r2, r3, #31
 80014fc:	e01e      	b.n	800153c <HAL_ADC_ConfigChannel+0x348>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2102      	movs	r1, #2
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f965 	bl	80007d4 <LL_ADC_GetOffsetChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001514:	fa93 f3a3 	rbit	r3, r3
 8001518:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800151c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001520:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001524:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800152c:	2320      	movs	r3, #32
 800152e:	e004      	b.n	800153a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001530:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001534:	fab3 f383 	clz	r3, r3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001544:	2b00      	cmp	r3, #0
 8001546:	d105      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x360>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	0e9b      	lsrs	r3, r3, #26
 800154e:	f003 031f 	and.w	r3, r3, #31
 8001552:	e016      	b.n	8001582 <HAL_ADC_ConfigChannel+0x38e>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001560:	fa93 f3a3 	rbit	r3, r3
 8001564:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001566:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800156c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001574:	2320      	movs	r3, #32
 8001576:	e004      	b.n	8001582 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001578:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800157c:	fab3 f383 	clz	r3, r3
 8001580:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001582:	429a      	cmp	r2, r3
 8001584:	d106      	bne.n	8001594 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2200      	movs	r2, #0
 800158c:	2102      	movs	r1, #2
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff f936 	bl	8000800 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2103      	movs	r1, #3
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff f91a 	bl	80007d4 <LL_ADC_GetOffsetChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10a      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x3cc>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2103      	movs	r1, #3
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff f90f 	bl	80007d4 <LL_ADC_GetOffsetChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	0e9b      	lsrs	r3, r3, #26
 80015ba:	f003 021f 	and.w	r2, r3, #31
 80015be:	e017      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x3fc>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2103      	movs	r1, #3
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff f904 	bl	80007d4 <LL_ADC_GetOffsetChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015d2:	fa93 f3a3 	rbit	r3, r3
 80015d6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80015d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015da:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80015dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80015e2:	2320      	movs	r3, #32
 80015e4:	e003      	b.n	80015ee <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80015e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015e8:	fab3 f383 	clz	r3, r3
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d105      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x414>
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	0e9b      	lsrs	r3, r3, #26
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	e011      	b.n	800162c <HAL_ADC_ConfigChannel+0x438>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001610:	fa93 f3a3 	rbit	r3, r3
 8001614:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001616:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001618:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800161a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001620:	2320      	movs	r3, #32
 8001622:	e003      	b.n	800162c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001626:	fab3 f383 	clz	r3, r3
 800162a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800162c:	429a      	cmp	r2, r3
 800162e:	d106      	bne.n	800163e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2200      	movs	r2, #0
 8001636:	2103      	movs	r1, #3
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff f8e1 	bl	8000800 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fa2a 	bl	8000a9c <LL_ADC_IsEnabled>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	f040 8140 	bne.w	80018d0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	6819      	ldr	r1, [r3, #0]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	461a      	mov	r2, r3
 800165e:	f7ff f967 	bl	8000930 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	4a8f      	ldr	r2, [pc, #572]	; (80018a4 <HAL_ADC_ConfigChannel+0x6b0>)
 8001668:	4293      	cmp	r3, r2
 800166a:	f040 8131 	bne.w	80018d0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10b      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x4a2>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	0e9b      	lsrs	r3, r3, #26
 8001684:	3301      	adds	r3, #1
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	2b09      	cmp	r3, #9
 800168c:	bf94      	ite	ls
 800168e:	2301      	movls	r3, #1
 8001690:	2300      	movhi	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	e019      	b.n	80016ca <HAL_ADC_ConfigChannel+0x4d6>
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800169e:	fa93 f3a3 	rbit	r3, r3
 80016a2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80016a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016a6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80016a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80016ae:	2320      	movs	r3, #32
 80016b0:	e003      	b.n	80016ba <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80016b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016b4:	fab3 f383 	clz	r3, r3
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	3301      	adds	r3, #1
 80016bc:	f003 031f 	and.w	r3, r3, #31
 80016c0:	2b09      	cmp	r3, #9
 80016c2:	bf94      	ite	ls
 80016c4:	2301      	movls	r3, #1
 80016c6:	2300      	movhi	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d079      	beq.n	80017c2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d107      	bne.n	80016ea <HAL_ADC_ConfigChannel+0x4f6>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	0e9b      	lsrs	r3, r3, #26
 80016e0:	3301      	adds	r3, #1
 80016e2:	069b      	lsls	r3, r3, #26
 80016e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016e8:	e015      	b.n	8001716 <HAL_ADC_ConfigChannel+0x522>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016f2:	fa93 f3a3 	rbit	r3, r3
 80016f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80016f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80016fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001702:	2320      	movs	r3, #32
 8001704:	e003      	b.n	800170e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001708:	fab3 f383 	clz	r3, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	3301      	adds	r3, #1
 8001710:	069b      	lsls	r3, r3, #26
 8001712:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800171e:	2b00      	cmp	r3, #0
 8001720:	d109      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x542>
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	0e9b      	lsrs	r3, r3, #26
 8001728:	3301      	adds	r3, #1
 800172a:	f003 031f 	and.w	r3, r3, #31
 800172e:	2101      	movs	r1, #1
 8001730:	fa01 f303 	lsl.w	r3, r1, r3
 8001734:	e017      	b.n	8001766 <HAL_ADC_ConfigChannel+0x572>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800173e:	fa93 f3a3 	rbit	r3, r3
 8001742:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001746:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800174e:	2320      	movs	r3, #32
 8001750:	e003      	b.n	800175a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001754:	fab3 f383 	clz	r3, r3
 8001758:	b2db      	uxtb	r3, r3
 800175a:	3301      	adds	r3, #1
 800175c:	f003 031f 	and.w	r3, r3, #31
 8001760:	2101      	movs	r1, #1
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	ea42 0103 	orr.w	r1, r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10a      	bne.n	800178c <HAL_ADC_ConfigChannel+0x598>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	0e9b      	lsrs	r3, r3, #26
 800177c:	3301      	adds	r3, #1
 800177e:	f003 021f 	and.w	r2, r3, #31
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	051b      	lsls	r3, r3, #20
 800178a:	e018      	b.n	80017be <HAL_ADC_ConfigChannel+0x5ca>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001794:	fa93 f3a3 	rbit	r3, r3
 8001798:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800179a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800179c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800179e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80017a4:	2320      	movs	r3, #32
 80017a6:	e003      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80017a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017aa:	fab3 f383 	clz	r3, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	3301      	adds	r3, #1
 80017b2:	f003 021f 	and.w	r2, r3, #31
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017be:	430b      	orrs	r3, r1
 80017c0:	e081      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d107      	bne.n	80017de <HAL_ADC_ConfigChannel+0x5ea>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	0e9b      	lsrs	r3, r3, #26
 80017d4:	3301      	adds	r3, #1
 80017d6:	069b      	lsls	r3, r3, #26
 80017d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017dc:	e015      	b.n	800180a <HAL_ADC_ConfigChannel+0x616>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e6:	fa93 f3a3 	rbit	r3, r3
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80017ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ee:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80017f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80017f6:	2320      	movs	r3, #32
 80017f8:	e003      	b.n	8001802 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80017fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fc:	fab3 f383 	clz	r3, r3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	3301      	adds	r3, #1
 8001804:	069b      	lsls	r3, r3, #26
 8001806:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <HAL_ADC_ConfigChannel+0x636>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	0e9b      	lsrs	r3, r3, #26
 800181c:	3301      	adds	r3, #1
 800181e:	f003 031f 	and.w	r3, r3, #31
 8001822:	2101      	movs	r1, #1
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	e017      	b.n	800185a <HAL_ADC_ConfigChannel+0x666>
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	fa93 f3a3 	rbit	r3, r3
 8001836:	61fb      	str	r3, [r7, #28]
  return result;
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001842:	2320      	movs	r3, #32
 8001844:	e003      	b.n	800184e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	fab3 f383 	clz	r3, r3
 800184c:	b2db      	uxtb	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	f003 031f 	and.w	r3, r3, #31
 8001854:	2101      	movs	r1, #1
 8001856:	fa01 f303 	lsl.w	r3, r1, r3
 800185a:	ea42 0103 	orr.w	r1, r2, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10d      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x692>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	0e9b      	lsrs	r3, r3, #26
 8001870:	3301      	adds	r3, #1
 8001872:	f003 021f 	and.w	r2, r3, #31
 8001876:	4613      	mov	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	3b1e      	subs	r3, #30
 800187e:	051b      	lsls	r3, r3, #20
 8001880:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001884:	e01e      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x6d0>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa93 f3a3 	rbit	r3, r3
 8001892:	613b      	str	r3, [r7, #16]
  return result;
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d104      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800189e:	2320      	movs	r3, #32
 80018a0:	e006      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x6bc>
 80018a2:	bf00      	nop
 80018a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	fab3 f383 	clz	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	3301      	adds	r3, #1
 80018b2:	f003 021f 	and.w	r2, r3, #31
 80018b6:	4613      	mov	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4413      	add	r3, r2
 80018bc:	3b1e      	subs	r3, #30
 80018be:	051b      	lsls	r3, r3, #20
 80018c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018c4:	430b      	orrs	r3, r1
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	6892      	ldr	r2, [r2, #8]
 80018ca:	4619      	mov	r1, r3
 80018cc:	f7ff f805 	bl	80008da <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b3d      	ldr	r3, [pc, #244]	; (80019cc <HAL_ADC_ConfigChannel+0x7d8>)
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d06c      	beq.n	80019b6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018dc:	483c      	ldr	r0, [pc, #240]	; (80019d0 <HAL_ADC_ConfigChannel+0x7dc>)
 80018de:	f7fe ff47 	bl	8000770 <LL_ADC_GetCommonPathInternalCh>
 80018e2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a3a      	ldr	r2, [pc, #232]	; (80019d4 <HAL_ADC_ConfigChannel+0x7e0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d127      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80018f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d121      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a35      	ldr	r2, [pc, #212]	; (80019d8 <HAL_ADC_ConfigChannel+0x7e4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d157      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001906:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800190a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800190e:	4619      	mov	r1, r3
 8001910:	482f      	ldr	r0, [pc, #188]	; (80019d0 <HAL_ADC_ConfigChannel+0x7dc>)
 8001912:	f7fe ff1a 	bl	800074a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001916:	4b31      	ldr	r3, [pc, #196]	; (80019dc <HAL_ADC_ConfigChannel+0x7e8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	099b      	lsrs	r3, r3, #6
 800191c:	4a30      	ldr	r2, [pc, #192]	; (80019e0 <HAL_ADC_ConfigChannel+0x7ec>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	099b      	lsrs	r3, r3, #6
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	4613      	mov	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001930:	e002      	b.n	8001938 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3b01      	subs	r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f9      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800193e:	e03a      	b.n	80019b6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a27      	ldr	r2, [pc, #156]	; (80019e4 <HAL_ADC_ConfigChannel+0x7f0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d113      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x77e>
 800194a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800194e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10d      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a1f      	ldr	r2, [pc, #124]	; (80019d8 <HAL_ADC_ConfigChannel+0x7e4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d12a      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001960:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001964:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001968:	4619      	mov	r1, r3
 800196a:	4819      	ldr	r0, [pc, #100]	; (80019d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800196c:	f7fe feed 	bl	800074a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001970:	e021      	b.n	80019b6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a1c      	ldr	r2, [pc, #112]	; (80019e8 <HAL_ADC_ConfigChannel+0x7f4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d11c      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800197c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d116      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <HAL_ADC_ConfigChannel+0x7e4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d111      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001992:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001996:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800199a:	4619      	mov	r1, r3
 800199c:	480c      	ldr	r0, [pc, #48]	; (80019d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800199e:	f7fe fed4 	bl	800074a <LL_ADC_SetCommonPathInternalCh>
 80019a2:	e008      	b.n	80019b6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a8:	f043 0220 	orr.w	r2, r3, #32
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80019be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	37d8      	adds	r7, #216	; 0xd8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	80080000 	.word	0x80080000
 80019d0:	50040300 	.word	0x50040300
 80019d4:	c7520000 	.word	0xc7520000
 80019d8:	50040000 	.word	0x50040000
 80019dc:	20000000 	.word	0x20000000
 80019e0:	053e2d63 	.word	0x053e2d63
 80019e4:	cb840000 	.word	0xcb840000
 80019e8:	80000001 	.word	0x80000001

080019ec <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff f898 	bl	8000b38 <LL_ADC_REG_IsConversionOngoing>
 8001a08:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff f8b9 	bl	8000b86 <LL_ADC_INJ_IsConversionOngoing>
 8001a14:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d103      	bne.n	8001a24 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 8098 	beq.w	8001b54 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d02a      	beq.n	8001a88 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	7e5b      	ldrb	r3, [r3, #25]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d126      	bne.n	8001a88 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	7e1b      	ldrb	r3, [r3, #24]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d122      	bne.n	8001a88 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001a46:	e014      	b.n	8001a72 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	4a45      	ldr	r2, [pc, #276]	; (8001b60 <ADC_ConversionStop+0x174>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d90d      	bls.n	8001a6c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a54:	f043 0210 	orr.w	r2, r3, #16
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a60:	f043 0201 	orr.w	r2, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e074      	b.n	8001b56 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7c:	2b40      	cmp	r3, #64	; 0x40
 8001a7e:	d1e3      	bne.n	8001a48 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2240      	movs	r2, #64	; 0x40
 8001a86:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d014      	beq.n	8001ab8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff f850 	bl	8000b38 <LL_ADC_REG_IsConversionOngoing>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00c      	beq.n	8001ab8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f80d 	bl	8000ac2 <LL_ADC_IsDisableOngoing>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d104      	bne.n	8001ab8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f82c 	bl	8000b10 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d014      	beq.n	8001ae8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f85f 	bl	8000b86 <LL_ADC_INJ_IsConversionOngoing>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00c      	beq.n	8001ae8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fff5 	bl	8000ac2 <LL_ADC_IsDisableOngoing>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d104      	bne.n	8001ae8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f83b 	bl	8000b5e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d005      	beq.n	8001afa <ADC_ConversionStop+0x10e>
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d105      	bne.n	8001b00 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001af4:	230c      	movs	r3, #12
 8001af6:	617b      	str	r3, [r7, #20]
        break;
 8001af8:	e005      	b.n	8001b06 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001afa:	2308      	movs	r3, #8
 8001afc:	617b      	str	r3, [r7, #20]
        break;
 8001afe:	e002      	b.n	8001b06 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001b00:	2304      	movs	r3, #4
 8001b02:	617b      	str	r3, [r7, #20]
        break;
 8001b04:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001b06:	f7fe fe01 	bl	800070c <HAL_GetTick>
 8001b0a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001b0c:	e01b      	b.n	8001b46 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001b0e:	f7fe fdfd 	bl	800070c <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b05      	cmp	r3, #5
 8001b1a:	d914      	bls.n	8001b46 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	4013      	ands	r3, r2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00d      	beq.n	8001b46 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2e:	f043 0210 	orr.w	r2, r3, #16
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	f043 0201 	orr.w	r2, r3, #1
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e007      	b.n	8001b56 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1dc      	bne.n	8001b0e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3720      	adds	r7, #32
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	a33fffff 	.word	0xa33fffff

08001b64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe ff91 	bl	8000a9c <LL_ADC_IsEnabled>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d169      	bne.n	8001c54 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	4b36      	ldr	r3, [pc, #216]	; (8001c60 <ADC_Enable+0xfc>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00d      	beq.n	8001baa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b92:	f043 0210 	orr.w	r2, r3, #16
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	f043 0201 	orr.w	r2, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e055      	b.n	8001c56 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe ff4c 	bl	8000a4c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001bb4:	482b      	ldr	r0, [pc, #172]	; (8001c64 <ADC_Enable+0x100>)
 8001bb6:	f7fe fddb 	bl	8000770 <LL_ADC_GetCommonPathInternalCh>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d013      	beq.n	8001bec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bc4:	4b28      	ldr	r3, [pc, #160]	; (8001c68 <ADC_Enable+0x104>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	099b      	lsrs	r3, r3, #6
 8001bca:	4a28      	ldr	r2, [pc, #160]	; (8001c6c <ADC_Enable+0x108>)
 8001bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd0:	099b      	lsrs	r3, r3, #6
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001bde:	e002      	b.n	8001be6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f9      	bne.n	8001be0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001bec:	f7fe fd8e 	bl	800070c <HAL_GetTick>
 8001bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bf2:	e028      	b.n	8001c46 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe ff4f 	bl	8000a9c <LL_ADC_IsEnabled>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d104      	bne.n	8001c0e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe ff1f 	bl	8000a4c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c0e:	f7fe fd7d 	bl	800070c <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d914      	bls.n	8001c46 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d00d      	beq.n	8001c46 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2e:	f043 0210 	orr.w	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	f043 0201 	orr.w	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e007      	b.n	8001c56 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d1cf      	bne.n	8001bf4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	8000003f 	.word	0x8000003f
 8001c64:	50040300 	.word	0x50040300
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	053e2d63 	.word	0x053e2d63

08001c70 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe ff20 	bl	8000ac2 <LL_ADC_IsDisableOngoing>
 8001c82:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe ff07 	bl	8000a9c <LL_ADC_IsEnabled>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d047      	beq.n	8001d24 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d144      	bne.n	8001d24 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 030d 	and.w	r3, r3, #13
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d10c      	bne.n	8001cc2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fee1 	bl	8000a74 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cba:	f7fe fd27 	bl	800070c <HAL_GetTick>
 8001cbe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001cc0:	e029      	b.n	8001d16 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc6:	f043 0210 	orr.w	r2, r3, #16
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd2:	f043 0201 	orr.w	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e023      	b.n	8001d26 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cde:	f7fe fd15 	bl	800070c <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d914      	bls.n	8001d16 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00d      	beq.n	8001d16 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfe:	f043 0210 	orr.w	r2, r3, #16
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	f043 0201 	orr.w	r2, r3, #1
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e007      	b.n	8001d26 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1dc      	bne.n	8001cde <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <LL_ADC_IsEnabled>:
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <LL_ADC_IsEnabled+0x18>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <LL_ADC_IsEnabled+0x1a>
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_REG_IsConversionOngoing>:
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d101      	bne.n	8001d6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e000      	b.n	8001d6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b09f      	sub	sp, #124	; 0x7c
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e089      	b.n	8001eae <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001da2:	2300      	movs	r3, #0
 8001da4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001da6:	2300      	movs	r3, #0
 8001da8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a42      	ldr	r2, [pc, #264]	; (8001eb8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d102      	bne.n	8001dba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001db4:	4b41      	ldr	r3, [pc, #260]	; (8001ebc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	e001      	b.n	8001dbe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10b      	bne.n	8001ddc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc8:	f043 0220 	orr.w	r2, r3, #32
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e068      	b.n	8001eae <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ffb8 	bl	8001d54 <LL_ADC_REG_IsConversionOngoing>
 8001de4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ffb2 	bl	8001d54 <LL_ADC_REG_IsConversionOngoing>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d14a      	bne.n	8001e8c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001df6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d147      	bne.n	8001e8c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001dfc:	4b30      	ldr	r3, [pc, #192]	; (8001ec0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8001dfe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d027      	beq.n	8001e58 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	6859      	ldr	r1, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e1a:	035b      	lsls	r3, r3, #13
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e22:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e24:	4824      	ldr	r0, [pc, #144]	; (8001eb8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001e26:	f7ff ff82 	bl	8001d2e <LL_ADC_IsEnabled>
 8001e2a:	4604      	mov	r4, r0
 8001e2c:	4823      	ldr	r0, [pc, #140]	; (8001ebc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001e2e:	f7ff ff7e 	bl	8001d2e <LL_ADC_IsEnabled>
 8001e32:	4603      	mov	r3, r0
 8001e34:	4323      	orrs	r3, r4
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d132      	bne.n	8001ea0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e42:	f023 030f 	bic.w	r3, r3, #15
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	6811      	ldr	r1, [r2, #0]
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	6892      	ldr	r2, [r2, #8]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	431a      	orrs	r2, r3
 8001e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e54:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e56:	e023      	b.n	8001ea0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e62:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e64:	4814      	ldr	r0, [pc, #80]	; (8001eb8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001e66:	f7ff ff62 	bl	8001d2e <LL_ADC_IsEnabled>
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	4813      	ldr	r0, [pc, #76]	; (8001ebc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001e6e:	f7ff ff5e 	bl	8001d2e <LL_ADC_IsEnabled>
 8001e72:	4603      	mov	r3, r0
 8001e74:	4323      	orrs	r3, r4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d112      	bne.n	8001ea0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e82:	f023 030f 	bic.w	r3, r3, #15
 8001e86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001e88:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e8a:	e009      	b.n	8001ea0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e90:	f043 0220 	orr.w	r2, r3, #32
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001e9e:	e000      	b.n	8001ea2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ea0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001eaa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	377c      	adds	r7, #124	; 0x7c
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd90      	pop	{r4, r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	50040000 	.word	0x50040000
 8001ebc:	50040100 	.word	0x50040100
 8001ec0:	50040300 	.word	0x50040300

08001ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef6:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	60d3      	str	r3, [r2, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <__NVIC_GetPriorityGrouping+0x18>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	f003 0307 	and.w	r3, r3, #7
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	6039      	str	r1, [r7, #0]
 8001f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	db0a      	blt.n	8001f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	490c      	ldr	r1, [pc, #48]	; (8001f74 <__NVIC_SetPriority+0x4c>)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	0112      	lsls	r2, r2, #4
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f50:	e00a      	b.n	8001f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4908      	ldr	r1, [pc, #32]	; (8001f78 <__NVIC_SetPriority+0x50>)
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	3b04      	subs	r3, #4
 8001f60:	0112      	lsls	r2, r2, #4
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	440b      	add	r3, r1
 8001f66:	761a      	strb	r2, [r3, #24]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000e100 	.word	0xe000e100
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	; 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f1c3 0307 	rsb	r3, r3, #7
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	bf28      	it	cs
 8001f9a:	2304      	movcs	r3, #4
 8001f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	2b06      	cmp	r3, #6
 8001fa4:	d902      	bls.n	8001fac <NVIC_EncodePriority+0x30>
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3b03      	subs	r3, #3
 8001faa:	e000      	b.n	8001fae <NVIC_EncodePriority+0x32>
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	fa01 f303 	lsl.w	r3, r1, r3
 8001fce:	43d9      	mvns	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	4313      	orrs	r3, r2
         );
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3724      	adds	r7, #36	; 0x24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff4:	d301      	bcc.n	8001ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00f      	b.n	800201a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <SysTick_Config+0x40>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002002:	210f      	movs	r1, #15
 8002004:	f04f 30ff 	mov.w	r0, #4294967295
 8002008:	f7ff ff8e 	bl	8001f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <SysTick_Config+0x40>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002012:	4b04      	ldr	r3, [pc, #16]	; (8002024 <SysTick_Config+0x40>)
 8002014:	2207      	movs	r2, #7
 8002016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	e000e010 	.word	0xe000e010

08002028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff47 	bl	8001ec4 <__NVIC_SetPriorityGrouping>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002050:	f7ff ff5c 	bl	8001f0c <__NVIC_GetPriorityGrouping>
 8002054:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	6978      	ldr	r0, [r7, #20]
 800205c:	f7ff ff8e 	bl	8001f7c <NVIC_EncodePriority>
 8002060:	4602      	mov	r2, r0
 8002062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff5d 	bl	8001f28 <__NVIC_SetPriority>
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffb0 	bl	8001fe4 <SysTick_Config>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209e:	e14e      	b.n	800233e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	2101      	movs	r1, #1
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	4013      	ands	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 8140 	beq.w	8002338 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d005      	beq.n	80020d0 <HAL_GPIO_Init+0x40>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d130      	bne.n	8002132 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	2203      	movs	r2, #3
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002106:	2201      	movs	r2, #1
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4013      	ands	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	091b      	lsrs	r3, r3, #4
 800211c:	f003 0201 	and.w	r2, r3, #1
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	2b03      	cmp	r3, #3
 800213c:	d017      	beq.n	800216e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	2203      	movs	r2, #3
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d123      	bne.n	80021c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	08da      	lsrs	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3208      	adds	r2, #8
 8002182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002186:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	220f      	movs	r2, #15
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4013      	ands	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	691a      	ldr	r2, [r3, #16]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	08da      	lsrs	r2, r3, #3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3208      	adds	r2, #8
 80021bc:	6939      	ldr	r1, [r7, #16]
 80021be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	2203      	movs	r2, #3
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0203 	and.w	r2, r3, #3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 809a 	beq.w	8002338 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002204:	4b55      	ldr	r3, [pc, #340]	; (800235c <HAL_GPIO_Init+0x2cc>)
 8002206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002208:	4a54      	ldr	r2, [pc, #336]	; (800235c <HAL_GPIO_Init+0x2cc>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6613      	str	r3, [r2, #96]	; 0x60
 8002210:	4b52      	ldr	r3, [pc, #328]	; (800235c <HAL_GPIO_Init+0x2cc>)
 8002212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800221c:	4a50      	ldr	r2, [pc, #320]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	089b      	lsrs	r3, r3, #2
 8002222:	3302      	adds	r3, #2
 8002224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	220f      	movs	r2, #15
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002246:	d013      	beq.n	8002270 <HAL_GPIO_Init+0x1e0>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a46      	ldr	r2, [pc, #280]	; (8002364 <HAL_GPIO_Init+0x2d4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d00d      	beq.n	800226c <HAL_GPIO_Init+0x1dc>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a45      	ldr	r2, [pc, #276]	; (8002368 <HAL_GPIO_Init+0x2d8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d007      	beq.n	8002268 <HAL_GPIO_Init+0x1d8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a44      	ldr	r2, [pc, #272]	; (800236c <HAL_GPIO_Init+0x2dc>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d101      	bne.n	8002264 <HAL_GPIO_Init+0x1d4>
 8002260:	2303      	movs	r3, #3
 8002262:	e006      	b.n	8002272 <HAL_GPIO_Init+0x1e2>
 8002264:	2307      	movs	r3, #7
 8002266:	e004      	b.n	8002272 <HAL_GPIO_Init+0x1e2>
 8002268:	2302      	movs	r3, #2
 800226a:	e002      	b.n	8002272 <HAL_GPIO_Init+0x1e2>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <HAL_GPIO_Init+0x1e2>
 8002270:	2300      	movs	r3, #0
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	f002 0203 	and.w	r2, r2, #3
 8002278:	0092      	lsls	r2, r2, #2
 800227a:	4093      	lsls	r3, r2
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002282:	4937      	ldr	r1, [pc, #220]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	3302      	adds	r3, #2
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002290:	4b37      	ldr	r3, [pc, #220]	; (8002370 <HAL_GPIO_Init+0x2e0>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	43db      	mvns	r3, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022b4:	4a2e      	ldr	r2, [pc, #184]	; (8002370 <HAL_GPIO_Init+0x2e0>)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022ba:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <HAL_GPIO_Init+0x2e0>)
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4013      	ands	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022de:	4a24      	ldr	r2, [pc, #144]	; (8002370 <HAL_GPIO_Init+0x2e0>)
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022e4:	4b22      	ldr	r3, [pc, #136]	; (8002370 <HAL_GPIO_Init+0x2e0>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002308:	4a19      	ldr	r2, [pc, #100]	; (8002370 <HAL_GPIO_Init+0x2e0>)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800230e:	4b18      	ldr	r3, [pc, #96]	; (8002370 <HAL_GPIO_Init+0x2e0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002332:	4a0f      	ldr	r2, [pc, #60]	; (8002370 <HAL_GPIO_Init+0x2e0>)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3301      	adds	r3, #1
 800233c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	f47f aea9 	bne.w	80020a0 <HAL_GPIO_Init+0x10>
  }
}
 800234e:	bf00      	nop
 8002350:	bf00      	nop
 8002352:	371c      	adds	r7, #28
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	40021000 	.word	0x40021000
 8002360:	40010000 	.word	0x40010000
 8002364:	48000400 	.word	0x48000400
 8002368:	48000800 	.word	0x48000800
 800236c:	48000c00 	.word	0x48000c00
 8002370:	40010400 	.word	0x40010400

08002374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
 8002380:	4613      	mov	r3, r2
 8002382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002384:	787b      	ldrb	r3, [r7, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002390:	e002      	b.n	8002398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <HAL_PWREx_GetVoltageRange+0x18>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40007000 	.word	0x40007000

080023c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ce:	d130      	bne.n	8002432 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023d0:	4b23      	ldr	r3, [pc, #140]	; (8002460 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023dc:	d038      	beq.n	8002450 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023de:	4b20      	ldr	r3, [pc, #128]	; (8002460 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023e6:	4a1e      	ldr	r2, [pc, #120]	; (8002460 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023ee:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2232      	movs	r2, #50	; 0x32
 80023f4:	fb02 f303 	mul.w	r3, r2, r3
 80023f8:	4a1b      	ldr	r2, [pc, #108]	; (8002468 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	0c9b      	lsrs	r3, r3, #18
 8002400:	3301      	adds	r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002404:	e002      	b.n	800240c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	3b01      	subs	r3, #1
 800240a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800240c:	4b14      	ldr	r3, [pc, #80]	; (8002460 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002418:	d102      	bne.n	8002420 <HAL_PWREx_ControlVoltageScaling+0x60>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f2      	bne.n	8002406 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002420:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800242c:	d110      	bne.n	8002450 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e00f      	b.n	8002452 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800243a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800243e:	d007      	beq.n	8002450 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002440:	4b07      	ldr	r3, [pc, #28]	; (8002460 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002448:	4a05      	ldr	r2, [pc, #20]	; (8002460 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800244a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800244e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40007000 	.word	0x40007000
 8002464:	20000000 	.word	0x20000000
 8002468:	431bde83 	.word	0x431bde83

0800246c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	; 0x28
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d102      	bne.n	8002480 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	f000 bc4f 	b.w	8002d1e <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002480:	4b97      	ldr	r3, [pc, #604]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 030c 	and.w	r3, r3, #12
 8002488:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800248a:	4b95      	ldr	r3, [pc, #596]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80e6 	beq.w	800266e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <HAL_RCC_OscConfig+0x4c>
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	2b0c      	cmp	r3, #12
 80024ac:	f040 808d 	bne.w	80025ca <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	f040 8089 	bne.w	80025ca <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024b8:	4b89      	ldr	r3, [pc, #548]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <HAL_RCC_OscConfig+0x66>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d102      	bne.n	80024d2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	f000 bc26 	b.w	8002d1e <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024d6:	4b82      	ldr	r3, [pc, #520]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d004      	beq.n	80024ec <HAL_RCC_OscConfig+0x80>
 80024e2:	4b7f      	ldr	r3, [pc, #508]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ea:	e005      	b.n	80024f8 <HAL_RCC_OscConfig+0x8c>
 80024ec:	4b7c      	ldr	r3, [pc, #496]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80024ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d224      	bcs.n	8002546 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fda1 	bl	8003048 <RCC_SetFlashLatencyFromMSIRange>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	f000 bc06 	b.w	8002d1e <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002512:	4b73      	ldr	r3, [pc, #460]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a72      	ldr	r2, [pc, #456]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002518:	f043 0308 	orr.w	r3, r3, #8
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b70      	ldr	r3, [pc, #448]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	496d      	ldr	r1, [pc, #436]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002530:	4b6b      	ldr	r3, [pc, #428]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	4968      	ldr	r1, [pc, #416]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
 8002544:	e025      	b.n	8002592 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002546:	4b66      	ldr	r3, [pc, #408]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a65      	ldr	r2, [pc, #404]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 800254c:	f043 0308 	orr.w	r3, r3, #8
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	4b63      	ldr	r3, [pc, #396]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	4960      	ldr	r1, [pc, #384]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002560:	4313      	orrs	r3, r2
 8002562:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002564:	4b5e      	ldr	r3, [pc, #376]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	021b      	lsls	r3, r3, #8
 8002572:	495b      	ldr	r1, [pc, #364]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	4618      	mov	r0, r3
 8002584:	f000 fd60 	bl	8003048 <RCC_SetFlashLatencyFromMSIRange>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e3c5      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002592:	f000 fccd 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002596:	4602      	mov	r2, r0
 8002598:	4b51      	ldr	r3, [pc, #324]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	4950      	ldr	r1, [pc, #320]	; (80026e4 <HAL_RCC_OscConfig+0x278>)
 80025a4:	5ccb      	ldrb	r3, [r1, r3]
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	fa22 f303 	lsr.w	r3, r2, r3
 80025ae:	4a4e      	ldr	r2, [pc, #312]	; (80026e8 <HAL_RCC_OscConfig+0x27c>)
 80025b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025b2:	4b4e      	ldr	r3, [pc, #312]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe f858 	bl	800066c <HAL_InitTick>
 80025bc:	4603      	mov	r3, r0
 80025be:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80025c0:	7dfb      	ldrb	r3, [r7, #23]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d052      	beq.n	800266c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
 80025c8:	e3a9      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d032      	beq.n	8002638 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025d2:	4b43      	ldr	r3, [pc, #268]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a42      	ldr	r2, [pc, #264]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025de:	f7fe f895 	bl	800070c <HAL_GetTick>
 80025e2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025e6:	f7fe f891 	bl	800070c <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e392      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025f8:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002604:	4b36      	ldr	r3, [pc, #216]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a35      	ldr	r2, [pc, #212]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 800260a:	f043 0308 	orr.w	r3, r3, #8
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	4b33      	ldr	r3, [pc, #204]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	4930      	ldr	r1, [pc, #192]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002622:	4b2f      	ldr	r3, [pc, #188]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	492b      	ldr	r1, [pc, #172]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
 8002636:	e01a      	b.n	800266e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002638:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a28      	ldr	r2, [pc, #160]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 800263e:	f023 0301 	bic.w	r3, r3, #1
 8002642:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002644:	f7fe f862 	bl	800070c <HAL_GetTick>
 8002648:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800264c:	f7fe f85e 	bl	800070c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e35f      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800265e:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x1e0>
 800266a:	e000      	b.n	800266e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800266c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d073      	beq.n	8002762 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	2b08      	cmp	r3, #8
 800267e:	d005      	beq.n	800268c <HAL_RCC_OscConfig+0x220>
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	2b0c      	cmp	r3, #12
 8002684:	d10e      	bne.n	80026a4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d10b      	bne.n	80026a4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268c:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d063      	beq.n	8002760 <HAL_RCC_OscConfig+0x2f4>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d15f      	bne.n	8002760 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e33c      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ac:	d106      	bne.n	80026bc <HAL_RCC_OscConfig+0x250>
 80026ae:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a0b      	ldr	r2, [pc, #44]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80026b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e025      	b.n	8002708 <HAL_RCC_OscConfig+0x29c>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026c4:	d114      	bne.n	80026f0 <HAL_RCC_OscConfig+0x284>
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80026cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a02      	ldr	r2, [pc, #8]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e013      	b.n	8002708 <HAL_RCC_OscConfig+0x29c>
 80026e0:	40021000 	.word	0x40021000
 80026e4:	08003178 	.word	0x08003178
 80026e8:	20000000 	.word	0x20000000
 80026ec:	20000004 	.word	0x20000004
 80026f0:	4b8f      	ldr	r3, [pc, #572]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a8e      	ldr	r2, [pc, #568]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b8c      	ldr	r3, [pc, #560]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a8b      	ldr	r2, [pc, #556]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 8002702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d013      	beq.n	8002738 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fd fffc 	bl	800070c <HAL_GetTick>
 8002714:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002718:	f7fd fff8 	bl	800070c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	; 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e2f9      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800272a:	4b81      	ldr	r3, [pc, #516]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x2ac>
 8002736:	e014      	b.n	8002762 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fd ffe8 	bl	800070c <HAL_GetTick>
 800273c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002740:	f7fd ffe4 	bl	800070c <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e2e5      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002752:	4b77      	ldr	r3, [pc, #476]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x2d4>
 800275e:	e000      	b.n	8002762 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d060      	beq.n	8002830 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	2b04      	cmp	r3, #4
 8002772:	d005      	beq.n	8002780 <HAL_RCC_OscConfig+0x314>
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	2b0c      	cmp	r3, #12
 8002778:	d119      	bne.n	80027ae <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d116      	bne.n	80027ae <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002780:	4b6b      	ldr	r3, [pc, #428]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_RCC_OscConfig+0x32c>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e2c2      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002798:	4b65      	ldr	r3, [pc, #404]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	061b      	lsls	r3, r3, #24
 80027a6:	4962      	ldr	r1, [pc, #392]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ac:	e040      	b.n	8002830 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d023      	beq.n	80027fe <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b6:	4b5e      	ldr	r3, [pc, #376]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a5d      	ldr	r2, [pc, #372]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 80027bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7fd ffa3 	bl	800070c <HAL_GetTick>
 80027c6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ca:	f7fd ff9f 	bl	800070c <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e2a0      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027dc:	4b54      	ldr	r3, [pc, #336]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e8:	4b51      	ldr	r3, [pc, #324]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	061b      	lsls	r3, r3, #24
 80027f6:	494e      	ldr	r1, [pc, #312]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
 80027fc:	e018      	b.n	8002830 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fe:	4b4c      	ldr	r3, [pc, #304]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a4b      	ldr	r2, [pc, #300]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280a:	f7fd ff7f 	bl	800070c <HAL_GetTick>
 800280e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002812:	f7fd ff7b 	bl	800070c <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e27c      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002824:	4b42      	ldr	r3, [pc, #264]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f0      	bne.n	8002812 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 8082 	beq.w	8002942 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d05f      	beq.n	8002906 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002846:	4b3a      	ldr	r3, [pc, #232]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800284c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	429a      	cmp	r2, r3
 800285a:	d037      	beq.n	80028cc <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d006      	beq.n	8002874 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e254      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d01b      	beq.n	80028b6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800287e:	4b2c      	ldr	r3, [pc, #176]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 8002880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002884:	4a2a      	ldr	r2, [pc, #168]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	f023 0301 	bic.w	r3, r3, #1
 800288a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800288e:	f7fd ff3d 	bl	800070c <HAL_GetTick>
 8002892:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002896:	f7fd ff39 	bl	800070c <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b11      	cmp	r3, #17
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e23a      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028a8:	4b21      	ldr	r3, [pc, #132]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 80028aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1ef      	bne.n	8002896 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80028b6:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028bc:	f023 0210 	bic.w	r2, r3, #16
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	491a      	ldr	r1, [pc, #104]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028cc:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d2:	4a17      	ldr	r2, [pc, #92]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028dc:	f7fd ff16 	bl	800070c <HAL_GetTick>
 80028e0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e4:	f7fd ff12 	bl	800070c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b11      	cmp	r3, #17
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e213      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0ef      	beq.n	80028e4 <HAL_RCC_OscConfig+0x478>
 8002904:	e01d      	b.n	8002942 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002906:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 8002908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290c:	4a08      	ldr	r2, [pc, #32]	; (8002930 <HAL_RCC_OscConfig+0x4c4>)
 800290e:	f023 0301 	bic.w	r3, r3, #1
 8002912:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002916:	f7fd fef9 	bl	800070c <HAL_GetTick>
 800291a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800291c:	e00a      	b.n	8002934 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291e:	f7fd fef5 	bl	800070c <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b11      	cmp	r3, #17
 800292a:	d903      	bls.n	8002934 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e1f6      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
 8002930:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002934:	4ba9      	ldr	r3, [pc, #676]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1ed      	bne.n	800291e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80bd 	beq.w	8002aca <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002950:	2300      	movs	r3, #0
 8002952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002956:	4ba1      	ldr	r3, [pc, #644]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10e      	bne.n	8002980 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	4b9e      	ldr	r3, [pc, #632]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	4a9d      	ldr	r2, [pc, #628]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296c:	6593      	str	r3, [r2, #88]	; 0x58
 800296e:	4b9b      	ldr	r3, [pc, #620]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800297a:	2301      	movs	r3, #1
 800297c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002980:	4b97      	ldr	r3, [pc, #604]	; (8002be0 <HAL_RCC_OscConfig+0x774>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d118      	bne.n	80029be <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800298c:	4b94      	ldr	r3, [pc, #592]	; (8002be0 <HAL_RCC_OscConfig+0x774>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a93      	ldr	r2, [pc, #588]	; (8002be0 <HAL_RCC_OscConfig+0x774>)
 8002992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002996:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002998:	f7fd feb8 	bl	800070c <HAL_GetTick>
 800299c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a0:	f7fd feb4 	bl	800070c <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e1b5      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b2:	4b8b      	ldr	r3, [pc, #556]	; (8002be0 <HAL_RCC_OscConfig+0x774>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d02c      	beq.n	8002a24 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80029ca:	4b84      	ldr	r3, [pc, #528]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029dc:	497f      	ldr	r1, [pc, #508]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d010      	beq.n	8002a12 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80029f0:	4b7a      	ldr	r3, [pc, #488]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f6:	4a79      	ldr	r2, [pc, #484]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 80029f8:	f043 0304 	orr.w	r3, r3, #4
 80029fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a00:	4b76      	ldr	r3, [pc, #472]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a06:	4a75      	ldr	r2, [pc, #468]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a10:	e018      	b.n	8002a44 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a12:	4b72      	ldr	r3, [pc, #456]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a18:	4a70      	ldr	r2, [pc, #448]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a22:	e00f      	b.n	8002a44 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a24:	4b6d      	ldr	r3, [pc, #436]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	4a6c      	ldr	r2, [pc, #432]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002a2c:	f023 0301 	bic.w	r3, r3, #1
 8002a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a34:	4b69      	ldr	r3, [pc, #420]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3a:	4a68      	ldr	r2, [pc, #416]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002a3c:	f023 0304 	bic.w	r3, r3, #4
 8002a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d016      	beq.n	8002a7a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4c:	f7fd fe5e 	bl	800070c <HAL_GetTick>
 8002a50:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a54:	f7fd fe5a 	bl	800070c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e159      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a6a:	4b5c      	ldr	r3, [pc, #368]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0ed      	beq.n	8002a54 <HAL_RCC_OscConfig+0x5e8>
 8002a78:	e01d      	b.n	8002ab6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7a:	f7fd fe47 	bl	800070c <HAL_GetTick>
 8002a7e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a80:	e00a      	b.n	8002a98 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a82:	f7fd fe43 	bl	800070c <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e142      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a98:	4b50      	ldr	r3, [pc, #320]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1ed      	bne.n	8002a82 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002aa6:	4b4d      	ldr	r3, [pc, #308]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aac:	4a4b      	ldr	r2, [pc, #300]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d105      	bne.n	8002aca <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002abe:	4b47      	ldr	r3, [pc, #284]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	4a46      	ldr	r2, [pc, #280]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d03c      	beq.n	8002b50 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d01c      	beq.n	8002b18 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ade:	4b3f      	ldr	r3, [pc, #252]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002ae0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ae4:	4a3d      	ldr	r2, [pc, #244]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aee:	f7fd fe0d 	bl	800070c <HAL_GetTick>
 8002af2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002af6:	f7fd fe09 	bl	800070c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e10a      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b08:	4b34      	ldr	r3, [pc, #208]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002b0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0ef      	beq.n	8002af6 <HAL_RCC_OscConfig+0x68a>
 8002b16:	e01b      	b.n	8002b50 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b18:	4b30      	ldr	r3, [pc, #192]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b1e:	4a2f      	ldr	r2, [pc, #188]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b28:	f7fd fdf0 	bl	800070c <HAL_GetTick>
 8002b2c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b30:	f7fd fdec 	bl	800070c <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e0ed      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b42:	4b26      	ldr	r3, [pc, #152]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ef      	bne.n	8002b30 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80e1 	beq.w	8002d1c <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	f040 80b5 	bne.w	8002cce <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b64:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	f003 0203 	and.w	r2, r3, #3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d124      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b82:	3b01      	subs	r3, #1
 8002b84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d11b      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d113      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba4:	085b      	lsrs	r3, r3, #1
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d109      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	085b      	lsrs	r3, r3, #1
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d05f      	beq.n	8002c82 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	2b0c      	cmp	r3, #12
 8002bc6:	d05a      	beq.n	8002c7e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a03      	ldr	r2, [pc, #12]	; (8002bdc <HAL_RCC_OscConfig+0x770>)
 8002bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bd2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bd4:	f7fd fd9a 	bl	800070c <HAL_GetTick>
 8002bd8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bda:	e00c      	b.n	8002bf6 <HAL_RCC_OscConfig+0x78a>
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be4:	f7fd fd92 	bl	800070c <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e093      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf6:	4b4c      	ldr	r3, [pc, #304]	; (8002d28 <HAL_RCC_OscConfig+0x8bc>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c02:	4b49      	ldr	r3, [pc, #292]	; (8002d28 <HAL_RCC_OscConfig+0x8bc>)
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	4b49      	ldr	r3, [pc, #292]	; (8002d2c <HAL_RCC_OscConfig+0x8c0>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c12:	3a01      	subs	r2, #1
 8002c14:	0112      	lsls	r2, r2, #4
 8002c16:	4311      	orrs	r1, r2
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c1c:	0212      	lsls	r2, r2, #8
 8002c1e:	4311      	orrs	r1, r2
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c24:	0852      	lsrs	r2, r2, #1
 8002c26:	3a01      	subs	r2, #1
 8002c28:	0552      	lsls	r2, r2, #21
 8002c2a:	4311      	orrs	r1, r2
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c30:	0852      	lsrs	r2, r2, #1
 8002c32:	3a01      	subs	r2, #1
 8002c34:	0652      	lsls	r2, r2, #25
 8002c36:	430a      	orrs	r2, r1
 8002c38:	493b      	ldr	r1, [pc, #236]	; (8002d28 <HAL_RCC_OscConfig+0x8bc>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c3e:	4b3a      	ldr	r3, [pc, #232]	; (8002d28 <HAL_RCC_OscConfig+0x8bc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a39      	ldr	r2, [pc, #228]	; (8002d28 <HAL_RCC_OscConfig+0x8bc>)
 8002c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c48:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c4a:	4b37      	ldr	r3, [pc, #220]	; (8002d28 <HAL_RCC_OscConfig+0x8bc>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	4a36      	ldr	r2, [pc, #216]	; (8002d28 <HAL_RCC_OscConfig+0x8bc>)
 8002c50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c54:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c56:	f7fd fd59 	bl	800070c <HAL_GetTick>
 8002c5a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5e:	f7fd fd55 	bl	800070c <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e056      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c70:	4b2d      	ldr	r3, [pc, #180]	; (8002d28 <HAL_RCC_OscConfig+0x8bc>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c7c:	e04e      	b.n	8002d1c <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e04d      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c82:	4b29      	ldr	r3, [pc, #164]	; (8002d28 <HAL_RCC_OscConfig+0x8bc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d146      	bne.n	8002d1c <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c8e:	4b26      	ldr	r3, [pc, #152]	; (8002d28 <HAL_RCC_OscConfig+0x8bc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a25      	ldr	r2, [pc, #148]	; (8002d28 <HAL_RCC_OscConfig+0x8bc>)
 8002c94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c98:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c9a:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <HAL_RCC_OscConfig+0x8bc>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	4a22      	ldr	r2, [pc, #136]	; (8002d28 <HAL_RCC_OscConfig+0x8bc>)
 8002ca0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ca4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ca6:	f7fd fd31 	bl	800070c <HAL_GetTick>
 8002caa:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cae:	f7fd fd2d 	bl	800070c <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e02e      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc0:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <HAL_RCC_OscConfig+0x8bc>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x842>
 8002ccc:	e026      	b.n	8002d1c <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	d021      	beq.n	8002d18 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd4:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <HAL_RCC_OscConfig+0x8bc>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a13      	ldr	r2, [pc, #76]	; (8002d28 <HAL_RCC_OscConfig+0x8bc>)
 8002cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fd fd14 	bl	800070c <HAL_GetTick>
 8002ce4:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7fd fd10 	bl	800070c <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e011      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <HAL_RCC_OscConfig+0x8bc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002d06:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <HAL_RCC_OscConfig+0x8bc>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	4a07      	ldr	r2, [pc, #28]	; (8002d28 <HAL_RCC_OscConfig+0x8bc>)
 8002d0c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d10:	f023 0303 	bic.w	r3, r3, #3
 8002d14:	60d3      	str	r3, [r2, #12]
 8002d16:	e001      	b.n	8002d1c <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3728      	adds	r7, #40	; 0x28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	f99f808c 	.word	0xf99f808c

08002d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0e7      	b.n	8002f14 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d44:	4b75      	ldr	r3, [pc, #468]	; (8002f1c <HAL_RCC_ClockConfig+0x1ec>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d910      	bls.n	8002d74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b72      	ldr	r3, [pc, #456]	; (8002f1c <HAL_RCC_ClockConfig+0x1ec>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 0207 	bic.w	r2, r3, #7
 8002d5a:	4970      	ldr	r1, [pc, #448]	; (8002f1c <HAL_RCC_ClockConfig+0x1ec>)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d62:	4b6e      	ldr	r3, [pc, #440]	; (8002f1c <HAL_RCC_ClockConfig+0x1ec>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0cf      	b.n	8002f14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d010      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	4b66      	ldr	r3, [pc, #408]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d908      	bls.n	8002da2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d90:	4b63      	ldr	r3, [pc, #396]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4960      	ldr	r1, [pc, #384]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d04c      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db6:	4b5a      	ldr	r3, [pc, #360]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d121      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e0a6      	b.n	8002f14 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d107      	bne.n	8002dde <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dce:	4b54      	ldr	r3, [pc, #336]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d115      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e09a      	b.n	8002f14 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d107      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002de6:	4b4e      	ldr	r3, [pc, #312]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e08e      	b.n	8002f14 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df6:	4b4a      	ldr	r3, [pc, #296]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e086      	b.n	8002f14 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e06:	4b46      	ldr	r3, [pc, #280]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f023 0203 	bic.w	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4943      	ldr	r1, [pc, #268]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e18:	f7fd fc78 	bl	800070c <HAL_GetTick>
 8002e1c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e20:	f7fd fc74 	bl	800070c <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e06e      	b.n	8002f14 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e36:	4b3a      	ldr	r3, [pc, #232]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 020c 	and.w	r2, r3, #12
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d1eb      	bne.n	8002e20 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d010      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d208      	bcs.n	8002e76 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e64:	4b2e      	ldr	r3, [pc, #184]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	492b      	ldr	r1, [pc, #172]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e76:	4b29      	ldr	r3, [pc, #164]	; (8002f1c <HAL_RCC_ClockConfig+0x1ec>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d210      	bcs.n	8002ea6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e84:	4b25      	ldr	r3, [pc, #148]	; (8002f1c <HAL_RCC_ClockConfig+0x1ec>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f023 0207 	bic.w	r2, r3, #7
 8002e8c:	4923      	ldr	r1, [pc, #140]	; (8002f1c <HAL_RCC_ClockConfig+0x1ec>)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e94:	4b21      	ldr	r3, [pc, #132]	; (8002f1c <HAL_RCC_ClockConfig+0x1ec>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d001      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e036      	b.n	8002f14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb2:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4918      	ldr	r1, [pc, #96]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d009      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed0:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4910      	ldr	r1, [pc, #64]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ee4:	f000 f824 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	490b      	ldr	r1, [pc, #44]	; (8002f24 <HAL_RCC_ClockConfig+0x1f4>)
 8002ef6:	5ccb      	ldrb	r3, [r1, r3]
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
 8002f00:	4a09      	ldr	r2, [pc, #36]	; (8002f28 <HAL_RCC_ClockConfig+0x1f8>)
 8002f02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f04:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <HAL_RCC_ClockConfig+0x1fc>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fd fbaf 	bl	800066c <HAL_InitTick>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f12:	7afb      	ldrb	r3, [r7, #11]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40022000 	.word	0x40022000
 8002f20:	40021000 	.word	0x40021000
 8002f24:	08003178 	.word	0x08003178
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	20000004 	.word	0x20000004

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b089      	sub	sp, #36	; 0x24
 8002f34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f3e:	4b3e      	ldr	r3, [pc, #248]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f48:	4b3b      	ldr	r3, [pc, #236]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x34>
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	2b0c      	cmp	r3, #12
 8002f5c:	d121      	bne.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d11e      	bne.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f64:	4b34      	ldr	r3, [pc, #208]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d107      	bne.n	8002f80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f70:	4b31      	ldr	r3, [pc, #196]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	e005      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f80:	4b2d      	ldr	r3, [pc, #180]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	091b      	lsrs	r3, r3, #4
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f8c:	4a2b      	ldr	r2, [pc, #172]	; (800303c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10d      	bne.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fa0:	e00a      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d102      	bne.n	8002fae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fa8:	4b25      	ldr	r3, [pc, #148]	; (8003040 <HAL_RCC_GetSysClockFreq+0x110>)
 8002faa:	61bb      	str	r3, [r7, #24]
 8002fac:	e004      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fb4:	4b23      	ldr	r3, [pc, #140]	; (8003044 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b0c      	cmp	r3, #12
 8002fbc:	d134      	bne.n	8003028 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fbe:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d003      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0xac>
 8002fd4:	e005      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fd6:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fd8:	617b      	str	r3, [r7, #20]
      break;
 8002fda:	e005      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fdc:	4b19      	ldr	r3, [pc, #100]	; (8003044 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fde:	617b      	str	r3, [r7, #20]
      break;
 8002fe0:	e002      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	617b      	str	r3, [r7, #20]
      break;
 8002fe6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	fb03 f202 	mul.w	r2, r3, r2
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	0e5b      	lsrs	r3, r3, #25
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	3301      	adds	r3, #1
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	fbb2 f3f3 	udiv	r3, r2, r3
 8003026:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003028:	69bb      	ldr	r3, [r7, #24]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3724      	adds	r7, #36	; 0x24
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	08003188 	.word	0x08003188
 8003040:	00f42400 	.word	0x00f42400
 8003044:	007a1200 	.word	0x007a1200

08003048 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003050:	2300      	movs	r3, #0
 8003052:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003054:	4b2a      	ldr	r3, [pc, #168]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003060:	f7ff f9a0 	bl	80023a4 <HAL_PWREx_GetVoltageRange>
 8003064:	6178      	str	r0, [r7, #20]
 8003066:	e014      	b.n	8003092 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003068:	4b25      	ldr	r3, [pc, #148]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	4a24      	ldr	r2, [pc, #144]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800306e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003072:	6593      	str	r3, [r2, #88]	; 0x58
 8003074:	4b22      	ldr	r3, [pc, #136]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003080:	f7ff f990 	bl	80023a4 <HAL_PWREx_GetVoltageRange>
 8003084:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003086:	4b1e      	ldr	r3, [pc, #120]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308a:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800308c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003090:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003098:	d10b      	bne.n	80030b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b80      	cmp	r3, #128	; 0x80
 800309e:	d919      	bls.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2ba0      	cmp	r3, #160	; 0xa0
 80030a4:	d902      	bls.n	80030ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030a6:	2302      	movs	r3, #2
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	e013      	b.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030ac:	2301      	movs	r3, #1
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	e010      	b.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b80      	cmp	r3, #128	; 0x80
 80030b6:	d902      	bls.n	80030be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030b8:	2303      	movs	r3, #3
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	e00a      	b.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b80      	cmp	r3, #128	; 0x80
 80030c2:	d102      	bne.n	80030ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030c4:	2302      	movs	r3, #2
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	e004      	b.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b70      	cmp	r3, #112	; 0x70
 80030ce:	d101      	bne.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030d0:	2301      	movs	r3, #1
 80030d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f023 0207 	bic.w	r2, r3, #7
 80030dc:	4909      	ldr	r1, [pc, #36]	; (8003104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030e4:	4b07      	ldr	r3, [pc, #28]	; (8003104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d001      	beq.n	80030f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40021000 	.word	0x40021000
 8003104:	40022000 	.word	0x40022000

08003108 <__libc_init_array>:
 8003108:	b570      	push	{r4, r5, r6, lr}
 800310a:	4d0d      	ldr	r5, [pc, #52]	; (8003140 <__libc_init_array+0x38>)
 800310c:	4c0d      	ldr	r4, [pc, #52]	; (8003144 <__libc_init_array+0x3c>)
 800310e:	1b64      	subs	r4, r4, r5
 8003110:	10a4      	asrs	r4, r4, #2
 8003112:	2600      	movs	r6, #0
 8003114:	42a6      	cmp	r6, r4
 8003116:	d109      	bne.n	800312c <__libc_init_array+0x24>
 8003118:	4d0b      	ldr	r5, [pc, #44]	; (8003148 <__libc_init_array+0x40>)
 800311a:	4c0c      	ldr	r4, [pc, #48]	; (800314c <__libc_init_array+0x44>)
 800311c:	f000 f820 	bl	8003160 <_init>
 8003120:	1b64      	subs	r4, r4, r5
 8003122:	10a4      	asrs	r4, r4, #2
 8003124:	2600      	movs	r6, #0
 8003126:	42a6      	cmp	r6, r4
 8003128:	d105      	bne.n	8003136 <__libc_init_array+0x2e>
 800312a:	bd70      	pop	{r4, r5, r6, pc}
 800312c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003130:	4798      	blx	r3
 8003132:	3601      	adds	r6, #1
 8003134:	e7ee      	b.n	8003114 <__libc_init_array+0xc>
 8003136:	f855 3b04 	ldr.w	r3, [r5], #4
 800313a:	4798      	blx	r3
 800313c:	3601      	adds	r6, #1
 800313e:	e7f2      	b.n	8003126 <__libc_init_array+0x1e>
 8003140:	080031b8 	.word	0x080031b8
 8003144:	080031b8 	.word	0x080031b8
 8003148:	080031b8 	.word	0x080031b8
 800314c:	080031bc 	.word	0x080031bc

08003150 <memset>:
 8003150:	4402      	add	r2, r0
 8003152:	4603      	mov	r3, r0
 8003154:	4293      	cmp	r3, r2
 8003156:	d100      	bne.n	800315a <memset+0xa>
 8003158:	4770      	bx	lr
 800315a:	f803 1b01 	strb.w	r1, [r3], #1
 800315e:	e7f9      	b.n	8003154 <memset+0x4>

08003160 <_init>:
 8003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003162:	bf00      	nop
 8003164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003166:	bc08      	pop	{r3}
 8003168:	469e      	mov	lr, r3
 800316a:	4770      	bx	lr

0800316c <_fini>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	bf00      	nop
 8003170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003172:	bc08      	pop	{r3}
 8003174:	469e      	mov	lr, r3
 8003176:	4770      	bx	lr
