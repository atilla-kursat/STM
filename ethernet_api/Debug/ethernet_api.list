
ethernet_api.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c54  0800fe20  0800fe20  0001fe20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012a74  08012a74  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08012a74  08012a74  00022a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012a7c  08012a7c  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012a7c  08012a7c  00022a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012a80  08012a80  00022a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08012a84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          000083f8  20000090  20000090  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008488  20008488  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dcb1  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e85  00000000  00000000  0004dd71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  00052bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001610  00000000  00000000  000542b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d1e0  00000000  00000000  000558c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024200  00000000  00000000  00082aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e156c  00000000  00000000  000a6ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00188214  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006820  00000000  00000000  00188264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fe08 	.word	0x0800fe08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800fe08 	.word	0x0800fe08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <udpClient_connect>:
uint8_t counter=0;
struct udp_pcb* upcb;
char buffer[100];
char incoming_ip[15];

void udpClient_connect(){
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
	err_t err;
	upcb = udp_new();
 800057a:	f00b fe2b 	bl	800c1d4 <udp_new>
 800057e:	4603      	mov	r3, r0
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <udpClient_connect+0x5c>)
 8000582:	6013      	str	r3, [r2, #0]
	ip_addr_t  myIP,destIP;
	IP_ADDR4(&myIP,192,168,1,111);
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <udpClient_connect+0x60>)
 8000586:	60bb      	str	r3, [r7, #8]
	IP_ADDR4(&destIP,192,168,1,50);
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <udpClient_connect+0x64>)
 800058a:	607b      	str	r3, [r7, #4]
	udp_bind(upcb, &myIP, 8);
 800058c:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <udpClient_connect+0x5c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f107 0108 	add.w	r1, r7, #8
 8000594:	2208      	movs	r2, #8
 8000596:	4618      	mov	r0, r3
 8000598:	f00b fd06 	bl	800bfa8 <udp_bind>
	err = udp_connect(upcb, &destIP,7);
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <udpClient_connect+0x5c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	1d39      	adds	r1, r7, #4
 80005a2:	2207      	movs	r2, #7
 80005a4:	4618      	mov	r0, r3
 80005a6:	f00b fd87 	bl	800c0b8 <udp_connect>
 80005aa:	4603      	mov	r3, r0
 80005ac:	73fb      	strb	r3, [r7, #15]
	if(err == ERR_OK){
 80005ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d108      	bne.n	80005c8 <udpClient_connect+0x54>
		udpClient_send();
 80005b6:	f000 f813 	bl	80005e0 <udpClient_send>
		udp_recv(upcb, udp_receive_callback, NULL);
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <udpClient_connect+0x5c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2200      	movs	r2, #0
 80005c0:	4906      	ldr	r1, [pc, #24]	; (80005dc <udpClient_connect+0x68>)
 80005c2:	4618      	mov	r0, r3
 80005c4:	f00b fde6 	bl	800c194 <udp_recv>
	}

}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200000f8 	.word	0x200000f8
 80005d4:	6f01a8c0 	.word	0x6f01a8c0
 80005d8:	3201a8c0 	.word	0x3201a8c0
 80005dc:	08000645 	.word	0x08000645

080005e0 <udpClient_send>:

void udpClient_send(){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b09c      	sub	sp, #112	; 0x70
 80005e4:	af00      	add	r7, sp, #0
	struct pbuf *txBuf;
	char data[100];
	int len = sprintf(data,"hello, received message count is %d \n",counter);
 80005e6:	4b14      	ldr	r3, [pc, #80]	; (8000638 <udpClient_send+0x58>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	4913      	ldr	r1, [pc, #76]	; (800063c <udpClient_send+0x5c>)
 80005f0:	4618      	mov	r0, r3
 80005f2:	f00e fa47 	bl	800ea84 <siprintf>
 80005f6:	66f8      	str	r0, [r7, #108]	; 0x6c
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 80005f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000600:	4619      	mov	r1, r3
 8000602:	2036      	movs	r0, #54	; 0x36
 8000604:	f005 f86a 	bl	80056dc <pbuf_alloc>
 8000608:	66b8      	str	r0, [r7, #104]	; 0x68

	if(txBuf != NULL){
 800060a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800060c:	2b00      	cmp	r3, #0
 800060e:	d00f      	beq.n	8000630 <udpClient_send+0x50>
		pbuf_take(txBuf,data,len);
 8000610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000612:	b29a      	uxth	r2, r3
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	4619      	mov	r1, r3
 8000618:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800061a:	f005 fdaf 	bl	800617c <pbuf_take>
		udp_send(upcb,txBuf);
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <udpClient_send+0x60>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000624:	4618      	mov	r0, r3
 8000626:	f00b fad5 	bl	800bbd4 <udp_send>
		pbuf_free(txBuf);
 800062a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800062c:	f005 fb3a 	bl	8005ca4 <pbuf_free>
	}


}
 8000630:	bf00      	nop
 8000632:	3770      	adds	r7, #112	; 0x70
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000f4 	.word	0x200000f4
 800063c:	0800fe20 	.word	0x0800fe20
 8000640:	200000f8 	.word	0x200000f8

08000644 <udp_receive_callback>:

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port){
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	603b      	str	r3, [r7, #0]

	sprintf(incoming_ip,"%s",ipaddr_ntoa(((const ip_addr_t *)&addr->addr)));
 8000652:	6838      	ldr	r0, [r7, #0]
 8000654:	f00d f9b8 	bl	800d9c8 <ip4addr_ntoa>
 8000658:	4603      	mov	r3, r0
 800065a:	461a      	mov	r2, r3
 800065c:	490c      	ldr	r1, [pc, #48]	; (8000690 <udp_receive_callback+0x4c>)
 800065e:	480d      	ldr	r0, [pc, #52]	; (8000694 <udp_receive_callback+0x50>)
 8000660:	f00e fa10 	bl	800ea84 <siprintf>
	strncpy (buffer, (char *)p->payload, p->len);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6859      	ldr	r1, [r3, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	895b      	ldrh	r3, [r3, #10]
 800066c:	461a      	mov	r2, r3
 800066e:	480a      	ldr	r0, [pc, #40]	; (8000698 <udp_receive_callback+0x54>)
 8000670:	f00e fa28 	bl	800eac4 <strncpy>
	counter++;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <udp_receive_callback+0x58>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	b2da      	uxtb	r2, r3
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <udp_receive_callback+0x58>)
 800067e:	701a      	strb	r2, [r3, #0]
	pbuf_free(p);
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f005 fb0f 	bl	8005ca4 <pbuf_free>
}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	0800fe48 	.word	0x0800fe48
 8000694:	20000160 	.word	0x20000160
 8000698:	200000fc 	.word	0x200000fc
 800069c:	200000f4 	.word	0x200000f4

080006a0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	udpClient_send();
 80006a8:	f7ff ff9a 	bl	80005e0 <udpClient_send>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fc42 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f81c 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 f8d6 	bl	8000870 <MX_GPIO_Init>
  MX_LWIP_Init();
 80006c4:	f003 fa90 	bl	8003be8 <MX_LWIP_Init>
  MX_TIM1_Init();
 80006c8:	f000 f880 	bl	80007cc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80006cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d0:	4807      	ldr	r0, [pc, #28]	; (80006f0 <main+0x3c>)
 80006d2:	f002 f97c 	bl	80029ce <HAL_GPIO_TogglePin>

  udpClient_connect();
 80006d6:	f7ff ff4d 	bl	8000574 <udpClient_connect>

  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80006da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006de:	4804      	ldr	r0, [pc, #16]	; (80006f0 <main+0x3c>)
 80006e0:	f002 f975 	bl	80029ce <HAL_GPIO_TogglePin>
  HAL_TIM_Base_Start_IT(&htim1);
 80006e4:	4803      	ldr	r0, [pc, #12]	; (80006f4 <main+0x40>)
 80006e6:	f002 fe4d 	bl	8003384 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 80006ea:	f003 fbc9 	bl	8003e80 <MX_LWIP_Process>
 80006ee:	e7fc      	b.n	80006ea <main+0x36>
 80006f0:	40020c00 	.word	0x40020c00
 80006f4:	200000ac 	.word	0x200000ac

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	2230      	movs	r2, #48	; 0x30
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f00e f95e 	bl	800e9c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <SystemClock_Config+0xcc>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	4a27      	ldr	r2, [pc, #156]	; (80007c4 <SystemClock_Config+0xcc>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	; 0x40
 800072c:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <SystemClock_Config+0xcc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <SystemClock_Config+0xd0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <SystemClock_Config+0xd0>)
 8000742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <SystemClock_Config+0xd0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000754:	2301      	movs	r3, #1
 8000756:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	2302      	movs	r3, #2
 8000760:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000768:	2308      	movs	r3, #8
 800076a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800076c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000770:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000772:	2302      	movs	r3, #2
 8000774:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000776:	2307      	movs	r3, #7
 8000778:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077a:	f107 0320 	add.w	r3, r7, #32
 800077e:	4618      	mov	r0, r3
 8000780:	f002 f940 	bl	8002a04 <HAL_RCC_OscConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800078a:	f000 f8df 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	230f      	movs	r3, #15
 8000790:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	2302      	movs	r3, #2
 8000794:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800079a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800079e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	2105      	movs	r1, #5
 80007ac:	4618      	mov	r0, r3
 80007ae:	f002 fba1 	bl	8002ef4 <HAL_RCC_ClockConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007b8:	f000 f8c8 	bl	800094c <Error_Handler>
  }
}
 80007bc:	bf00      	nop
 80007be:	3750      	adds	r7, #80	; 0x50
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40007000 	.word	0x40007000

080007cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e0:	463b      	mov	r3, r7
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_TIM1_Init+0x9c>)
 80007ea:	4a20      	ldr	r2, [pc, #128]	; (800086c <MX_TIM1_Init+0xa0>)
 80007ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_TIM1_Init+0x9c>)
 80007f0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80007f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_TIM1_Init+0x9c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_TIM1_Init+0x9c>)
 80007fe:	f242 720f 	movw	r2, #9999	; 0x270f
 8000802:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_TIM1_Init+0x9c>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_TIM1_Init+0x9c>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_TIM1_Init+0x9c>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000816:	4814      	ldr	r0, [pc, #80]	; (8000868 <MX_TIM1_Init+0x9c>)
 8000818:	f002 fd64 	bl	80032e4 <HAL_TIM_Base_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000822:	f000 f893 	bl	800094c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800082c:	f107 0308 	add.w	r3, r7, #8
 8000830:	4619      	mov	r1, r3
 8000832:	480d      	ldr	r0, [pc, #52]	; (8000868 <MX_TIM1_Init+0x9c>)
 8000834:	f002 ff1e 	bl	8003674 <HAL_TIM_ConfigClockSource>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800083e:	f000 f885 	bl	800094c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_TIM1_Init+0x9c>)
 8000850:	f003 f93a 	bl	8003ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800085a:	f000 f877 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000ac 	.word	0x200000ac
 800086c:	40010000 	.word	0x40010000

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <MX_GPIO_Init+0xd4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a2d      	ldr	r2, [pc, #180]	; (8000944 <MX_GPIO_Init+0xd4>)
 8000890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <MX_GPIO_Init+0xd4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b27      	ldr	r3, [pc, #156]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a26      	ldr	r2, [pc, #152]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b24      	ldr	r3, [pc, #144]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a1f      	ldr	r2, [pc, #124]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a18      	ldr	r2, [pc, #96]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a11      	ldr	r2, [pc, #68]	; (8000944 <MX_GPIO_Init+0xd4>)
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_GPIO_Init+0xd4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <MX_GPIO_Init+0xd8>)
 800091a:	f002 f83f 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800091e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_GPIO_Init+0xd8>)
 8000938:	f001 fe94 	bl	8002664 <HAL_GPIO_Init>

}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	; 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	40020c00 	.word	0x40020c00

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	e7fe      	b.n	8000954 <Error_Handler+0x8>
	...

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <HAL_MspInit+0x4c>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096c:	6453      	str	r3, [r2, #68]	; 0x44
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x4c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000996:	2007      	movs	r0, #7
 8000998:	f000 fc38 	bl	800120c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <HAL_TIM_Base_MspInit+0x48>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d115      	bne.n	80009e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <HAL_TIM_Base_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a0c      	ldr	r2, [pc, #48]	; (80009f4 <HAL_TIM_Base_MspInit+0x4c>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <HAL_TIM_Base_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	2019      	movs	r0, #25
 80009dc:	f000 fc21 	bl	8001222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009e0:	2019      	movs	r0, #25
 80009e2:	f000 fc3a 	bl	800125a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40010000 	.word	0x40010000
 80009f4:	40023800 	.word	0x40023800

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <NMI_Handler+0x4>

080009fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a44:	f000 face 	bl	8000fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a52:	f002 fd07 	bl	8003464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000ac 	.word	0x200000ac

08000a60 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a64:	4802      	ldr	r0, [pc, #8]	; (8000a70 <ETH_IRQHandler+0x10>)
 8000a66:	f000 ff15 	bl	8001894 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20004c94 	.word	0x20004c94

08000a74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
	return 1;
 8000a78:	2301      	movs	r3, #1
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <_kill>:

int _kill(int pid, int sig)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a8e:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <_kill+0x20>)
 8000a90:	2216      	movs	r2, #22
 8000a92:	601a      	str	r2, [r3, #0]
	return -1;
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	20008478 	.word	0x20008478

08000aa8 <_exit>:

void _exit (int status)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff ffe5 	bl	8000a84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000aba:	e7fe      	b.n	8000aba <_exit+0x12>

08000abc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	e00a      	b.n	8000ae4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ace:	f3af 8000 	nop.w
 8000ad2:	4601      	mov	r1, r0
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	60ba      	str	r2, [r7, #8]
 8000ada:	b2ca      	uxtb	r2, r1
 8000adc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	697a      	ldr	r2, [r7, #20]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	dbf0      	blt.n	8000ace <_read+0x12>
	}

return len;
 8000aec:	687b      	ldr	r3, [r7, #4]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	e009      	b.n	8000b1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	60ba      	str	r2, [r7, #8]
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbf1      	blt.n	8000b08 <_write+0x12>
	}
	return len;
 8000b24:	687b      	ldr	r3, [r7, #4]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <_close>:

int _close(int file)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
	return -1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b56:	605a      	str	r2, [r3, #4]
	return 0;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <_isatty>:

int _isatty(int file)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
	return 1;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
	return 0;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba0:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <_sbrk+0x5c>)
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <_sbrk+0x60>)
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <_sbrk+0x64>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <_sbrk+0x68>)
 8000bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d205      	bcs.n	8000bd4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <_sbrk+0x6c>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	e009      	b.n	8000be8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <_sbrk+0x64>)
 8000be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be6:	68fb      	ldr	r3, [r7, #12]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	371c      	adds	r7, #28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	20020000 	.word	0x20020000
 8000bf8:	00000400 	.word	0x00000400
 8000bfc:	20000170 	.word	0x20000170
 8000c00:	20008488 	.word	0x20008488
 8000c04:	20008478 	.word	0x20008478

08000c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <SystemInit+0x20>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <SystemInit+0x20>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c30:	480d      	ldr	r0, [pc, #52]	; (8000c68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c32:	490e      	ldr	r1, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c34:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c48:	4c0b      	ldr	r4, [pc, #44]	; (8000c78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c56:	f7ff ffd7 	bl	8000c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f00d fe59 	bl	800e910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5e:	f7ff fd29 	bl	80006b4 <main>
  bx  lr    
 8000c62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000c70:	08012a84 	.word	0x08012a84
  ldr r2, =_sbss
 8000c74:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000c78:	20008488 	.word	0x20008488

08000c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC_IRQHandler>

08000c7e <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d00b      	beq.n	8000ca6 <DP83848_RegisterBusIO+0x28>
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d007      	beq.n	8000ca6 <DP83848_RegisterBusIO+0x28>
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <DP83848_RegisterBusIO+0x28>
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d102      	bne.n	8000cac <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	e014      	b.n	8000cd6 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	68da      	ldr	r2, [r3, #12]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	691a      	ldr	r2, [r3, #16]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d17c      	bne.n	8000dfc <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d002      	beq.n	8000d10 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2220      	movs	r2, #32
 8000d14:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	e01c      	b.n	8000d56 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	f107 0208 	add.w	r2, r7, #8
 8000d24:	2119      	movs	r1, #25
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	4798      	blx	r3
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	da03      	bge.n	8000d38 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8000d30:	f06f 0304 	mvn.w	r3, #4
 8000d34:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000d36:	e00b      	b.n	8000d50 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	f003 031f 	and.w	r3, r3, #31
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d105      	bne.n	8000d50 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
         break;
 8000d4e:	e005      	b.n	8000d5c <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	3301      	adds	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	2b1f      	cmp	r3, #31
 8000d5a:	d9df      	bls.n	8000d1c <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b1f      	cmp	r3, #31
 8000d62:	d902      	bls.n	8000d6a <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8000d64:	f06f 0302 	mvn.w	r3, #2
 8000d68:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d145      	bne.n	8000dfc <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	691b      	ldr	r3, [r3, #16]
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	6810      	ldr	r0, [r2, #0]
 8000d78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4798      	blx	r3
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	db37      	blt.n	8000df6 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	6810      	ldr	r0, [r2, #0]
 8000d8e:	f107 0208 	add.w	r2, r7, #8
 8000d92:	2100      	movs	r1, #0
 8000d94:	4798      	blx	r3
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db28      	blt.n	8000dee <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4798      	blx	r3
 8000da2:	4603      	mov	r3, r0
 8000da4:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000da6:	e01c      	b.n	8000de2 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4798      	blx	r3
 8000dae:	4603      	mov	r3, r0
 8000db0:	461a      	mov	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000dba:	d80e      	bhi.n	8000dda <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	6810      	ldr	r0, [r2, #0]
 8000dc4:	f107 0208 	add.w	r2, r7, #8
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4798      	blx	r3
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	da07      	bge.n	8000de2 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8000dd2:	f06f 0304 	mvn.w	r3, #4
 8000dd6:	613b      	str	r3, [r7, #16]
                 break;
 8000dd8:	e010      	b.n	8000dfc <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8000dda:	f06f 0301 	mvn.w	r3, #1
 8000dde:	613b      	str	r3, [r7, #16]
               break;
 8000de0:	e00c      	b.n	8000dfc <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1dd      	bne.n	8000da8 <DP83848_Init+0xc6>
 8000dec:	e006      	b.n	8000dfc <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8000dee:	f06f 0304 	mvn.w	r3, #4
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	e002      	b.n	8000dfc <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8000df6:	f06f 0303 	mvn.w	r3, #3
 8000dfa:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d112      	bne.n	8000e28 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	4798      	blx	r3
 8000e08:	4603      	mov	r3, r0
 8000e0a:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8000e0c:	bf00      	nop
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4798      	blx	r3
 8000e14:	4603      	mov	r3, r0
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e20:	d9f5      	bls.n	8000e0e <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2201      	movs	r2, #1
 8000e26:	605a      	str	r2, [r3, #4]
   }

   return status;
 8000e28:	693b      	ldr	r3, [r7, #16]
 }
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b084      	sub	sp, #16
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	6810      	ldr	r0, [r2, #0]
 8000e46:	f107 020c 	add.w	r2, r7, #12
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	4798      	blx	r3
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	da02      	bge.n	8000e5a <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8000e54:	f06f 0304 	mvn.w	r3, #4
 8000e58:	e06e      	b.n	8000f38 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	6810      	ldr	r0, [r2, #0]
 8000e62:	f107 020c 	add.w	r2, r7, #12
 8000e66:	2101      	movs	r1, #1
 8000e68:	4798      	blx	r3
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	da02      	bge.n	8000e76 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8000e70:	f06f 0304 	mvn.w	r3, #4
 8000e74:	e060      	b.n	8000f38 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d101      	bne.n	8000e84 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e059      	b.n	8000f38 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	695b      	ldr	r3, [r3, #20]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	6810      	ldr	r0, [r2, #0]
 8000e8c:	f107 020c 	add.w	r2, r7, #12
 8000e90:	2100      	movs	r1, #0
 8000e92:	4798      	blx	r3
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	da02      	bge.n	8000ea0 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8000e9a:	f06f 0304 	mvn.w	r3, #4
 8000e9e:	e04b      	b.n	8000f38 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d11b      	bne.n	8000ee2 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d006      	beq.n	8000ec2 <DP83848_GetLinkState+0x90>
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e03a      	b.n	8000f38 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e033      	b.n	8000f38 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8000eda:	2304      	movs	r3, #4
 8000edc:	e02c      	b.n	8000f38 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8000ede:	2305      	movs	r3, #5
 8000ee0:	e02a      	b.n	8000f38 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	6810      	ldr	r0, [r2, #0]
 8000eea:	f107 020c 	add.w	r2, r7, #12
 8000eee:	2110      	movs	r1, #16
 8000ef0:	4798      	blx	r3
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	da02      	bge.n	8000efe <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8000ef8:	f06f 0304 	mvn.w	r3, #4
 8000efc:	e01c      	b.n	8000f38 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8000f08:	2306      	movs	r3, #6
 8000f0a:	e015      	b.n	8000f38 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0306 	and.w	r3, r3, #6
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	d101      	bne.n	8000f1a <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8000f16:	2302      	movs	r3, #2
 8000f18:	e00e      	b.n	8000f38 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f003 0306 	and.w	r3, r3, #6
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e007      	b.n	8000f38 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0306 	and.w	r3, r3, #6
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	d101      	bne.n	8000f36 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8000f32:	2304      	movs	r3, #4
 8000f34:	e000      	b.n	8000f38 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8000f36:	2305      	movs	r3, #5
    }
  }
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <HAL_Init+0x40>)
 8000f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <HAL_Init+0x40>)
 8000f56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <HAL_Init+0x40>)
 8000f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f000 f94f 	bl	800120c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f000 f808 	bl	8000f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f74:	f7ff fcf0 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023c00 	.word	0x40023c00

08000f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_InitTick+0x54>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x58>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f967 	bl	8001276 <HAL_SYSTICK_Config>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00e      	b.n	8000fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b0f      	cmp	r3, #15
 8000fb6:	d80a      	bhi.n	8000fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f000 f92f 	bl	8001222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc4:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <HAL_InitTick+0x5c>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e000      	b.n	8000fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000004 	.word	0x20000004

08000fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x20>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x24>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <HAL_IncTick+0x24>)
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000008 	.word	0x20000008
 8001008:	20000174 	.word	0x20000174

0800100c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return uwTick;
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <HAL_GetTick+0x14>)
 8001012:	681b      	ldr	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000174 	.word	0x20000174

08001024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800102c:	f7ff ffee 	bl	800100c <HAL_GetTick>
 8001030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103c:	d005      	beq.n	800104a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_Delay+0x44>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800104a:	bf00      	nop
 800104c:	f7ff ffde 	bl	800100c <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	d8f7      	bhi.n	800104c <HAL_Delay+0x28>
  {
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db0b      	blt.n	80010fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4907      	ldr	r1, [pc, #28]	; (8001108 <__NVIC_EnableIRQ+0x38>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	2001      	movs	r0, #1
 80010f2:	fa00 f202 	lsl.w	r2, r0, r2
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e100 	.word	0xe000e100

0800110c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	db0a      	blt.n	8001136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	490c      	ldr	r1, [pc, #48]	; (8001158 <__NVIC_SetPriority+0x4c>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	0112      	lsls	r2, r2, #4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	440b      	add	r3, r1
 8001130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001134:	e00a      	b.n	800114c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4908      	ldr	r1, [pc, #32]	; (800115c <__NVIC_SetPriority+0x50>)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	3b04      	subs	r3, #4
 8001144:	0112      	lsls	r2, r2, #4
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	440b      	add	r3, r1
 800114a:	761a      	strb	r2, [r3, #24]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f1c3 0307 	rsb	r3, r3, #7
 800117a:	2b04      	cmp	r3, #4
 800117c:	bf28      	it	cs
 800117e:	2304      	movcs	r3, #4
 8001180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3304      	adds	r3, #4
 8001186:	2b06      	cmp	r3, #6
 8001188:	d902      	bls.n	8001190 <NVIC_EncodePriority+0x30>
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3b03      	subs	r3, #3
 800118e:	e000      	b.n	8001192 <NVIC_EncodePriority+0x32>
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	f04f 32ff 	mov.w	r2, #4294967295
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43da      	mvns	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	401a      	ands	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	43d9      	mvns	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	4313      	orrs	r3, r2
         );
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3724      	adds	r7, #36	; 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d8:	d301      	bcc.n	80011de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011da:	2301      	movs	r3, #1
 80011dc:	e00f      	b.n	80011fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <SysTick_Config+0x40>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e6:	210f      	movs	r1, #15
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f7ff ff8e 	bl	800110c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <SysTick_Config+0x40>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <SysTick_Config+0x40>)
 80011f8:	2207      	movs	r2, #7
 80011fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	e000e010 	.word	0xe000e010

0800120c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ff29 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001234:	f7ff ff3e 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 8001238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f7ff ff8e 	bl	8001160 <NVIC_EncodePriority>
 8001244:	4602      	mov	r2, r0
 8001246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff5d 	bl	800110c <__NVIC_SetPriority>
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff31 	bl	80010d0 <__NVIC_EnableIRQ>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ffa2 	bl	80011c8 <SysTick_Config>
 8001284:	4603      	mov	r3, r0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e06c      	b.n	800137c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d106      	bne.n	80012ba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2223      	movs	r2, #35	; 0x23
 80012b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f002 ff9f 	bl	80041f8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	4b31      	ldr	r3, [pc, #196]	; (8001384 <HAL_ETH_Init+0xf4>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	4a30      	ldr	r2, [pc, #192]	; (8001384 <HAL_ETH_Init+0xf4>)
 80012c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ca:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <HAL_ETH_Init+0xf4>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012d6:	4b2c      	ldr	r3, [pc, #176]	; (8001388 <HAL_ETH_Init+0xf8>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4a2b      	ldr	r2, [pc, #172]	; (8001388 <HAL_ETH_Init+0xf8>)
 80012dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012e0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012e2:	4b29      	ldr	r3, [pc, #164]	; (8001388 <HAL_ETH_Init+0xf8>)
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	4927      	ldr	r1, [pc, #156]	; (8001388 <HAL_ETH_Init+0xf8>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012f0:	4b25      	ldr	r3, [pc, #148]	; (8001388 <HAL_ETH_Init+0xf8>)
 80012f2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	6812      	ldr	r2, [r2, #0]
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800130a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800130c:	f7ff fe7e 	bl	800100c <HAL_GetTick>
 8001310:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001312:	e011      	b.n	8001338 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001314:	f7ff fe7a 	bl	800100c <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001322:	d909      	bls.n	8001338 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2204      	movs	r2, #4
 8001328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	22e0      	movs	r2, #224	; 0xe0
 8001330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e021      	b.n	800137c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1e4      	bne.n	8001314 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 fee4 	bl	8002118 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 ff8b 	bl	800226c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 ffe1 	bl	800231e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	461a      	mov	r2, r3
 8001362:	2100      	movs	r1, #0
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 ff49 	bl	80021fc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2210      	movs	r2, #16
 8001376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40023800 	.word	0x40023800
 8001388:	40013800 	.word	0x40013800

0800138c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800139a:	2b10      	cmp	r3, #16
 800139c:	d150      	bne.n	8001440 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2223      	movs	r2, #35	; 0x23
 80013a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2204      	movs	r2, #4
 80013aa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f9fd 	bl	80017ac <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f042 0208 	orr.w	r2, r2, #8
 80013c0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013ca:	2001      	movs	r0, #1
 80013cc:	f7ff fe2a 	bl	8001024 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0204 	orr.w	r2, r2, #4
 80013e6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff fe17 	bl	8001024 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 fd2a 	bl	8001e58 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001416:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800141a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	f043 0302 	orr.w	r3, r3, #2
 800142e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001432:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2223      	movs	r2, #35	; 0x23
 8001438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	e000      	b.n	8001442 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
  }
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b084      	sub	sp, #16
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001458:	2b23      	cmp	r3, #35	; 0x23
 800145a:	d14a      	bne.n	80014f2 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2223      	movs	r2, #35	; 0x23
 8001460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6812      	ldr	r2, [r2, #0]
 8001472:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001476:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800147a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	f023 0302 	bic.w	r3, r3, #2
 800148e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001492:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0204 	bic.w	r2, r2, #4
 80014a2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014ac:	2001      	movs	r0, #1
 80014ae:	f7ff fdb9 	bl	8001024 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 fccc 	bl	8001e58 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0208 	bic.w	r2, r2, #8
 80014ce:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014d8:	2001      	movs	r0, #1
 80014da:	f7ff fda3 	bl	8001024 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2210      	movs	r2, #16
 80014ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
  }
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d109      	bne.n	8001522 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001514:	f043 0201 	orr.w	r2, r3, #1
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e07c      	b.n	800161c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001528:	2b23      	cmp	r3, #35	; 0x23
 800152a:	d176      	bne.n	800161a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800152c:	2200      	movs	r2, #0
 800152e:	68b9      	ldr	r1, [r7, #8]
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f000 ff61 	bl	80023f8 <ETH_Prepare_Tx_Descriptors>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d009      	beq.n	8001550 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001542:	f043 0202 	orr.w	r2, r3, #2
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e065      	b.n	800161c <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001550:	f3bf 8f4f 	dsb	sy
}
 8001554:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3206      	adds	r2, #6
 800155e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001562:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	629a      	str	r2, [r3, #40]	; 0x28
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001572:	2b03      	cmp	r3, #3
 8001574:	d904      	bls.n	8001580 <HAL_ETH_Transmit+0x84>
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157a:	1f1a      	subs	r2, r3, #4
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	3106      	adds	r1, #6
 800158c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001590:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001594:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001596:	f7ff fd39 	bl	800100c <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800159c:	e037      	b.n	800160e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d011      	beq.n	80015d4 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b6:	f043 0208 	orr.w	r2, r3, #8
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c8:	695a      	ldr	r2, [r3, #20]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e023      	b.n	800161c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015da:	d018      	beq.n	800160e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015dc:	f7ff fd16 	bl	800100c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d302      	bcc.n	80015f2 <HAL_ETH_Transmit+0xf6>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10d      	bne.n	800160e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f8:	f043 0204 	orr.w	r2, r3, #4
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001608:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e006      	b.n	800161c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	dbc3      	blt.n	800159e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	e000      	b.n	800161c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
  }
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d109      	bne.n	8001650 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	f043 0201 	orr.w	r2, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0a8      	b.n	80017a2 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001656:	2b23      	cmp	r3, #35	; 0x23
 8001658:	d001      	beq.n	800165e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e0a1      	b.n	80017a2 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001662:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	3212      	adds	r2, #18
 800166a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001674:	f1c3 0304 	rsb	r3, r3, #4
 8001678:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800167a:	e06a      	b.n	8001752 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d007      	beq.n	8001698 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	699a      	ldr	r2, [r3, #24]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	69da      	ldr	r2, [r3, #28]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d103      	bne.n	80016ac <HAL_ETH_ReadData+0x88>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d040      	beq.n	800172e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00c      	beq.n	80016f0 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	0c1b      	lsrs	r3, r3, #16
 80016dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016e0:	3b04      	subs	r3, #4
 80016e2:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001708:	461a      	mov	r2, r3
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	b29b      	uxth	r3, r3
 800170e:	f002 ff2b 	bl	8004568 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	441a      	add	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	2200      	movs	r2, #0
 800172c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3301      	adds	r3, #1
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	2b03      	cmp	r3, #3
 8001738:	d902      	bls.n	8001740 <HAL_ETH_ReadData+0x11c>
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3b04      	subs	r3, #4
 800173e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	3212      	adds	r2, #18
 8001746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800174a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3301      	adds	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db06      	blt.n	8001768 <HAL_ETH_ReadData+0x144>
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	429a      	cmp	r2, r3
 8001760:	d202      	bcs.n	8001768 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d089      	beq.n	800167c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	441a      	add	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 f815 	bl	80017ac <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d108      	bne.n	80017a0 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	e000      	b.n	80017a2 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3720      	adds	r7, #32
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80017b8:	2301      	movs	r3, #1
 80017ba:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017c0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	3212      	adds	r2, #18
 80017c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017cc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017d2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80017d4:	e040      	b.n	8001858 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d112      	bne.n	8001804 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 fe90 	bl	8004508 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	74fb      	strb	r3, [r7, #19]
 80017f2:	e007      	b.n	8001804 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	461a      	mov	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	461a      	mov	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001804:	7cfb      	ldrb	r3, [r7, #19]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d026      	beq.n	8001858 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	2b00      	cmp	r3, #0
 8001810:	d103      	bne.n	800181a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	4a1e      	ldr	r2, [pc, #120]	; (8001890 <ETH_UpdateDescriptor+0xe4>)
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	e003      	b.n	8001822 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001820:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001822:	f3bf 8f5f 	dmb	sy
}
 8001826:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	3301      	adds	r3, #1
 8001838:	61fb      	str	r3, [r7, #28]
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	2b03      	cmp	r3, #3
 800183e:	d902      	bls.n	8001846 <ETH_UpdateDescriptor+0x9a>
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	3b04      	subs	r3, #4
 8001844:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69fa      	ldr	r2, [r7, #28]
 800184a:	3212      	adds	r2, #18
 800184c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001850:	617b      	str	r3, [r7, #20]
      desccount--;
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	3b01      	subs	r3, #1
 8001856:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <ETH_UpdateDescriptor+0xb8>
 800185e:	7cfb      	ldrb	r3, [r7, #19]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1b8      	bne.n	80017d6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	429a      	cmp	r2, r3
 800186c:	d00c      	beq.n	8001888 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001876:	461a      	mov	r2, r3
 8001878:	2300      	movs	r3, #0
 800187a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001888:	bf00      	nop
 800188a:	3720      	adds	r7, #32
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	800045f8 	.word	0x800045f8

08001894 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018aa:	2b40      	cmp	r3, #64	; 0x40
 80018ac:	d112      	bne.n	80018d4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018bc:	2b40      	cmp	r3, #64	; 0x40
 80018be:	d109      	bne.n	80018d4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b50      	ldr	r3, [pc, #320]	; (8001a0c <HAL_ETH_IRQHandler+0x178>)
 80018cc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f8ac 	bl	8001a2c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d113      	bne.n	800190e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d10a      	bne.n	800190e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001900:	461a      	mov	r2, r3
 8001902:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001906:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f885 	bl	8001a18 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800191c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001920:	d14c      	bne.n	80019bc <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001934:	d142      	bne.n	80019bc <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800193c:	f043 0208 	orr.w	r2, r3, #8
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001958:	d11a      	bne.n	8001990 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_ETH_IRQHandler+0x17c>)
 8001966:	4013      	ands	r3, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001980:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001984:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	22e0      	movs	r2, #224	; 0xe0
 800198a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800198e:	e012      	b.n	80019b6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001998:	695a      	ldr	r2, [r3, #20]
 800199a:	f248 6380 	movw	r3, #34432	; 0x8680
 800199e:	4013      	ands	r3, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ae:	461a      	mov	r2, r3
 80019b0:	f248 6380 	movw	r3, #34432	; 0x8680
 80019b4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f842 	bl	8001a40 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d10e      	bne.n	80019e8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f83a 	bl	8001a54 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80019e8:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_ETH_IRQHandler+0x180>)
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d006      	beq.n	8001a02 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <HAL_ETH_IRQHandler+0x180>)
 80019f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019fa:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f833 	bl	8001a68 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	00010040 	.word	0x00010040
 8001a10:	007e2000 	.word	0x007e2000
 8001a14:	40013c00 	.word	0x40013c00

08001a18 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 031c 	and.w	r3, r3, #28
 8001a98:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	02db      	lsls	r3, r3, #11
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	019b      	lsls	r3, r3, #6
 8001aaa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f023 0302 	bic.w	r3, r3, #2
 8001aba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001acc:	f7ff fa9e 	bl	800100c <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ad2:	e00d      	b.n	8001af0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001ad4:	f7ff fa9a 	bl	800100c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae2:	d301      	bcc.n	8001ae8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e010      	b.n	8001b0a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1ec      	bne.n	8001ad4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	461a      	mov	r2, r3
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 031c 	and.w	r3, r3, #28
 8001b2e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	02db      	lsls	r3, r3, #11
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	019b      	lsls	r3, r3, #6
 8001b40:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b6c:	f7ff fa4e 	bl	800100c <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b72:	e00d      	b.n	8001b90 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001b74:	f7ff fa4a 	bl	800100c <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b82:	d301      	bcc.n	8001b88 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e009      	b.n	8001b9c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1ec      	bne.n	8001b74 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0d9      	b.n	8001d6c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bf14      	ite	ne
 8001bc6:	2301      	movne	r3, #1
 8001bc8:	2300      	moveq	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bf0c      	ite	eq
 8001bf0:	2301      	moveq	r3, #1
 8001bf2:	2300      	movne	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf14      	ite	ne
 8001c0c:	2301      	movne	r3, #1
 8001c0e:	2300      	moveq	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf0c      	ite	eq
 8001c26:	2301      	moveq	r3, #1
 8001c28:	2300      	movne	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bf14      	ite	ne
 8001c40:	2301      	movne	r3, #1
 8001c42:	2300      	moveq	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	bf0c      	ite	eq
 8001c76:	2301      	moveq	r3, #1
 8001c78:	2300      	movne	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf0c      	ite	eq
 8001c90:	2301      	moveq	r3, #1
 8001c92:	2300      	movne	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	bf14      	ite	ne
 8001caa:	2301      	movne	r3, #1
 8001cac:	2300      	moveq	r3, #0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	bf14      	ite	ne
 8001cd2:	2301      	movne	r3, #1
 8001cd4:	2300      	moveq	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf14      	ite	ne
 8001cec:	2301      	movne	r3, #1
 8001cee:	2300      	moveq	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf0c      	ite	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	2300      	movne	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	0c1b      	lsrs	r3, r3, #16
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf14      	ite	ne
 8001d40:	2301      	movne	r3, #1
 8001d42:	2300      	moveq	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	bf14      	ite	ne
 8001d5c:	2301      	movne	r3, #1
 8001d5e:	2300      	moveq	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e00b      	b.n	8001da4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d92:	2b10      	cmp	r3, #16
 8001d94:	d105      	bne.n	8001da2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001d96:	6839      	ldr	r1, [r7, #0]
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f883 	bl	8001ea4 <ETH_SetMACConfig>

    return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
  }
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f023 031c 	bic.w	r3, r3, #28
 8001dc2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001dc4:	f001 fa82 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 8001dc8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	4a1d      	ldr	r2, [pc, #116]	; (8001e44 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d908      	bls.n	8001de4 <HAL_ETH_SetMDIOClockRange+0x38>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	4a1c      	ldr	r2, [pc, #112]	; (8001e48 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d804      	bhi.n	8001de4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f043 0308 	orr.w	r3, r3, #8
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	e027      	b.n	8001e34 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	4a18      	ldr	r2, [pc, #96]	; (8001e48 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d908      	bls.n	8001dfe <HAL_ETH_SetMDIOClockRange+0x52>
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d204      	bcs.n	8001dfe <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f043 030c 	orr.w	r3, r3, #12
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	e01a      	b.n	8001e34 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d303      	bcc.n	8001e0e <HAL_ETH_SetMDIOClockRange+0x62>
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	4a11      	ldr	r2, [pc, #68]	; (8001e50 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d911      	bls.n	8001e32 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d908      	bls.n	8001e28 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	4a0e      	ldr	r2, [pc, #56]	; (8001e54 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d804      	bhi.n	8001e28 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f043 0304 	orr.w	r3, r3, #4
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	e005      	b.n	8001e34 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f043 0310 	orr.w	r3, r3, #16
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	e000      	b.n	8001e34 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001e32:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
}
 8001e3c:	bf00      	nop
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	01312cff 	.word	0x01312cff
 8001e48:	02160ebf 	.word	0x02160ebf
 8001e4c:	03938700 	.word	0x03938700
 8001e50:	05f5e0ff 	.word	0x05f5e0ff
 8001e54:	08f0d17f 	.word	0x08f0d17f

08001e58 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e7a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e88:	2001      	movs	r0, #1
 8001e8a:	f7ff f8cb 	bl	8001024 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e98:	6193      	str	r3, [r2, #24]
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4b51      	ldr	r3, [pc, #324]	; (8002000 <ETH_SetMACConfig+0x15c>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	7c1b      	ldrb	r3, [r3, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d102      	bne.n	8001ecc <ETH_SetMACConfig+0x28>
 8001ec6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001eca:	e000      	b.n	8001ece <ETH_SetMACConfig+0x2a>
 8001ecc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	7c5b      	ldrb	r3, [r3, #17]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d102      	bne.n	8001edc <ETH_SetMACConfig+0x38>
 8001ed6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001eda:	e000      	b.n	8001ede <ETH_SetMACConfig+0x3a>
 8001edc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ede:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ee4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	7fdb      	ldrb	r3, [r3, #31]
 8001eea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001eec:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ef2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	7f92      	ldrb	r2, [r2, #30]
 8001ef8:	2a00      	cmp	r2, #0
 8001efa:	d102      	bne.n	8001f02 <ETH_SetMACConfig+0x5e>
 8001efc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f00:	e000      	b.n	8001f04 <ETH_SetMACConfig+0x60>
 8001f02:	2200      	movs	r2, #0
                        macconf->Speed |
 8001f04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	7f1b      	ldrb	r3, [r3, #28]
 8001f0a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f0c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f12:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	791b      	ldrb	r3, [r3, #4]
 8001f18:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001f1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f22:	2a00      	cmp	r2, #0
 8001f24:	d102      	bne.n	8001f2c <ETH_SetMACConfig+0x88>
 8001f26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f2a:	e000      	b.n	8001f2e <ETH_SetMACConfig+0x8a>
 8001f2c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f2e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	7bdb      	ldrb	r3, [r3, #15]
 8001f34:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f36:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f3c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f44:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f46:	4313      	orrs	r3, r2
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f7ff f860 	bl	8001024 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f82:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001f8a:	2a00      	cmp	r2, #0
 8001f8c:	d101      	bne.n	8001f92 <ETH_SetMACConfig+0xee>
 8001f8e:	2280      	movs	r2, #128	; 0x80
 8001f90:	e000      	b.n	8001f94 <ETH_SetMACConfig+0xf0>
 8001f92:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f94:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001fa2:	2a01      	cmp	r2, #1
 8001fa4:	d101      	bne.n	8001faa <ETH_SetMACConfig+0x106>
 8001fa6:	2208      	movs	r2, #8
 8001fa8:	e000      	b.n	8001fac <ETH_SetMACConfig+0x108>
 8001faa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001fac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001fb4:	2a01      	cmp	r2, #1
 8001fb6:	d101      	bne.n	8001fbc <ETH_SetMACConfig+0x118>
 8001fb8:	2204      	movs	r2, #4
 8001fba:	e000      	b.n	8001fbe <ETH_SetMACConfig+0x11a>
 8001fbc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001fbe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001fc6:	2a01      	cmp	r2, #1
 8001fc8:	d101      	bne.n	8001fce <ETH_SetMACConfig+0x12a>
 8001fca:	2202      	movs	r2, #2
 8001fcc:	e000      	b.n	8001fd0 <ETH_SetMACConfig+0x12c>
 8001fce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f7ff f81b 	bl	8001024 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	619a      	str	r2, [r3, #24]
}
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	ff20810f 	.word	0xff20810f

08002004 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <ETH_SetDMAConfig+0x110>)
 800201e:	4013      	ands	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	7b1b      	ldrb	r3, [r3, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <ETH_SetDMAConfig+0x2c>
 800202a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800202e:	e000      	b.n	8002032 <ETH_SetDMAConfig+0x2e>
 8002030:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	7b5b      	ldrb	r3, [r3, #13]
 8002036:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002038:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	7f52      	ldrb	r2, [r2, #29]
 800203e:	2a00      	cmp	r2, #0
 8002040:	d102      	bne.n	8002048 <ETH_SetDMAConfig+0x44>
 8002042:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002046:	e000      	b.n	800204a <ETH_SetDMAConfig+0x46>
 8002048:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800204a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	7b9b      	ldrb	r3, [r3, #14]
 8002050:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002052:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002058:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	7f1b      	ldrb	r3, [r3, #28]
 800205e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002060:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	7f9b      	ldrb	r3, [r3, #30]
 8002066:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002068:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800206e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002076:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002078:	4313      	orrs	r3, r2
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4313      	orrs	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002088:	461a      	mov	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800209a:	2001      	movs	r0, #1
 800209c:	f7fe ffc2 	bl	8001024 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a8:	461a      	mov	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	791b      	ldrb	r3, [r3, #4]
 80020b2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020b8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80020be:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020c4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020cc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80020ce:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020d6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020dc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020ea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020f8:	2001      	movs	r0, #1
 80020fa:	f7fe ff93 	bl	8001024 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002106:	461a      	mov	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6013      	str	r3, [r2, #0]
}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	f8de3f23 	.word	0xf8de3f23

08002118 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b0a6      	sub	sp, #152	; 0x98
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002120:	2301      	movs	r3, #1
 8002122:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002126:	2301      	movs	r3, #1
 8002128:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800212c:	2300      	movs	r3, #0
 800212e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002136:	2301      	movs	r3, #1
 8002138:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002142:	2301      	movs	r3, #1
 8002144:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002154:	2300      	movs	r3, #0
 8002156:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800215e:	2300      	movs	r3, #0
 8002160:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800216e:	2300      	movs	r3, #0
 8002170:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800217a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800217e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002180:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002184:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800218c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002190:	4619      	mov	r1, r3
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fe86 	bl	8001ea4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002198:	2301      	movs	r3, #1
 800219a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800219c:	2301      	movs	r3, #1
 800219e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80021a0:	2301      	movs	r3, #1
 80021a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80021a6:	2301      	movs	r3, #1
 80021a8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80021ba:	2300      	movs	r3, #0
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80021be:	2301      	movs	r3, #1
 80021c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021c4:	2301      	movs	r3, #1
 80021c6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80021c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021cc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021d2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021d8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80021da:	2301      	movs	r3, #1
 80021dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021e8:	f107 0308 	add.w	r3, r7, #8
 80021ec:	4619      	mov	r1, r3
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ff08 	bl	8002004 <ETH_SetDMAConfig>
}
 80021f4:	bf00      	nop
 80021f6:	3798      	adds	r7, #152	; 0x98
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3305      	adds	r3, #5
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	3204      	adds	r2, #4
 8002214:	7812      	ldrb	r2, [r2, #0]
 8002216:	4313      	orrs	r3, r2
 8002218:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <ETH_MACAddressConfig+0x68>)
 800221e:	4413      	add	r3, r2
 8002220:	461a      	mov	r2, r3
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3303      	adds	r3, #3
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	061a      	lsls	r2, r3, #24
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3302      	adds	r3, #2
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	041b      	lsls	r3, r3, #16
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3301      	adds	r3, #1
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	4313      	orrs	r3, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	7812      	ldrb	r2, [r2, #0]
 8002246:	4313      	orrs	r3, r2
 8002248:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <ETH_MACAddressConfig+0x6c>)
 800224e:	4413      	add	r3, r2
 8002250:	461a      	mov	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	6013      	str	r3, [r2, #0]
}
 8002256:	bf00      	nop
 8002258:	371c      	adds	r7, #28
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40028040 	.word	0x40028040
 8002268:	40028044 	.word	0x40028044

0800226c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e03e      	b.n	80022f8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68d9      	ldr	r1, [r3, #12]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2200      	movs	r2, #0
 8002296:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2200      	movs	r2, #0
 80022a2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	3206      	adds	r2, #6
 80022ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d80c      	bhi.n	80022dc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68d9      	ldr	r1, [r3, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	440b      	add	r3, r1
 80022d4:	461a      	mov	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	e004      	b.n	80022e6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	461a      	mov	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3301      	adds	r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d9bd      	bls.n	800227a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002310:	611a      	str	r2, [r3, #16]
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	e046      	b.n	80023ba <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6919      	ldr	r1, [r3, #16]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	440b      	add	r3, r1
 800233c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2200      	movs	r2, #0
 8002348:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2200      	movs	r2, #0
 8002360:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002368:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002370:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800237e:	68b9      	ldr	r1, [r7, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	3212      	adds	r2, #18
 8002386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d80c      	bhi.n	80023aa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6919      	ldr	r1, [r3, #16]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	461a      	mov	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	60da      	str	r2, [r3, #12]
 80023a8:	e004      	b.n	80023b4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	461a      	mov	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	3301      	adds	r3, #1
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d9b5      	bls.n	800232c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ea:	60da      	str	r2, [r3, #12]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b08d      	sub	sp, #52	; 0x34
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3318      	adds	r3, #24
 8002408:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800241e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002422:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800243a:	d007      	beq.n	800244c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	3304      	adds	r3, #4
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800244c:	2302      	movs	r3, #2
 800244e:	e103      	b.n	8002658 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	3301      	adds	r3, #1
 8002454:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002468:	f023 031f 	bic.w	r3, r3, #31
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	6852      	ldr	r2, [r2, #4]
 8002470:	431a      	orrs	r2, r3
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d008      	beq.n	8002494 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	431a      	orrs	r2, r3
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80024d6:	f3bf 8f5f 	dmb	sy
}
 80024da:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80024e8:	e084      	b.n	80025f4 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d006      	beq.n	800250a <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	e005      	b.n	8002516 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002518:	3301      	adds	r3, #1
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800251c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251e:	2b03      	cmp	r3, #3
 8002520:	d902      	bls.n	8002528 <ETH_Prepare_Tx_Descriptors+0x130>
 8002522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002524:	3b04      	subs	r3, #4
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800252c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002530:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800254a:	d007      	beq.n	800255c <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002550:	3304      	adds	r3, #4
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d029      	beq.n	80025b0 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002568:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800256a:	2300      	movs	r3, #0
 800256c:	62bb      	str	r3, [r7, #40]	; 0x28
 800256e:	e019      	b.n	80025a4 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002570:	f3bf 8f5f 	dmb	sy
}
 8002574:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002584:	3301      	adds	r3, #1
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258a:	2b03      	cmp	r3, #3
 800258c:	d902      	bls.n	8002594 <ETH_Prepare_Tx_Descriptors+0x19c>
 800258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002590:	3b04      	subs	r3, #4
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800259e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a0:	3301      	adds	r3, #1
 80025a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80025a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d3e1      	bcc.n	8002570 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80025ac:	2302      	movs	r3, #2
 80025ae:	e053      	b.n	8002658 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	3301      	adds	r3, #1
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	6a3b      	ldr	r3, [r7, #32]
 80025c4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80025ce:	f023 031f 	bic.w	r3, r3, #31
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	6852      	ldr	r2, [r2, #4]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	3301      	adds	r3, #1
 80025e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80025e2:	f3bf 8f5f 	dmb	sy
}
 80025e6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f47f af76 	bne.w	80024ea <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d006      	beq.n	8002612 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	e005      	b.n	800261e <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800262e:	6979      	ldr	r1, [r7, #20]
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002632:	3304      	adds	r3, #4
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800263e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002640:	b672      	cpsid	i
}
 8002642:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	4413      	add	r3, r2
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002652:	b662      	cpsie	i
}
 8002654:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3734      	adds	r7, #52	; 0x34
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	e16b      	b.n	8002958 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002680:	2201      	movs	r2, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	429a      	cmp	r2, r3
 800269a:	f040 815a 	bne.w	8002952 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d005      	beq.n	80026b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d130      	bne.n	8002718 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	2203      	movs	r2, #3
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026ec:	2201      	movs	r2, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 0201 	and.w	r2, r3, #1
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b03      	cmp	r3, #3
 8002722:	d017      	beq.n	8002754 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d123      	bne.n	80027a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	08da      	lsrs	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3208      	adds	r2, #8
 8002768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	220f      	movs	r2, #15
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	08da      	lsrs	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3208      	adds	r2, #8
 80027a2:	69b9      	ldr	r1, [r7, #24]
 80027a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2203      	movs	r2, #3
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0203 	and.w	r2, r3, #3
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80b4 	beq.w	8002952 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	4b60      	ldr	r3, [pc, #384]	; (8002970 <HAL_GPIO_Init+0x30c>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	4a5f      	ldr	r2, [pc, #380]	; (8002970 <HAL_GPIO_Init+0x30c>)
 80027f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f8:	6453      	str	r3, [r2, #68]	; 0x44
 80027fa:	4b5d      	ldr	r3, [pc, #372]	; (8002970 <HAL_GPIO_Init+0x30c>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002806:	4a5b      	ldr	r2, [pc, #364]	; (8002974 <HAL_GPIO_Init+0x310>)
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	3302      	adds	r3, #2
 800280e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	220f      	movs	r2, #15
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a52      	ldr	r2, [pc, #328]	; (8002978 <HAL_GPIO_Init+0x314>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d02b      	beq.n	800288a <HAL_GPIO_Init+0x226>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a51      	ldr	r2, [pc, #324]	; (800297c <HAL_GPIO_Init+0x318>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d025      	beq.n	8002886 <HAL_GPIO_Init+0x222>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a50      	ldr	r2, [pc, #320]	; (8002980 <HAL_GPIO_Init+0x31c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d01f      	beq.n	8002882 <HAL_GPIO_Init+0x21e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4f      	ldr	r2, [pc, #316]	; (8002984 <HAL_GPIO_Init+0x320>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d019      	beq.n	800287e <HAL_GPIO_Init+0x21a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a4e      	ldr	r2, [pc, #312]	; (8002988 <HAL_GPIO_Init+0x324>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d013      	beq.n	800287a <HAL_GPIO_Init+0x216>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4d      	ldr	r2, [pc, #308]	; (800298c <HAL_GPIO_Init+0x328>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00d      	beq.n	8002876 <HAL_GPIO_Init+0x212>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a4c      	ldr	r2, [pc, #304]	; (8002990 <HAL_GPIO_Init+0x32c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d007      	beq.n	8002872 <HAL_GPIO_Init+0x20e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4b      	ldr	r2, [pc, #300]	; (8002994 <HAL_GPIO_Init+0x330>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d101      	bne.n	800286e <HAL_GPIO_Init+0x20a>
 800286a:	2307      	movs	r3, #7
 800286c:	e00e      	b.n	800288c <HAL_GPIO_Init+0x228>
 800286e:	2308      	movs	r3, #8
 8002870:	e00c      	b.n	800288c <HAL_GPIO_Init+0x228>
 8002872:	2306      	movs	r3, #6
 8002874:	e00a      	b.n	800288c <HAL_GPIO_Init+0x228>
 8002876:	2305      	movs	r3, #5
 8002878:	e008      	b.n	800288c <HAL_GPIO_Init+0x228>
 800287a:	2304      	movs	r3, #4
 800287c:	e006      	b.n	800288c <HAL_GPIO_Init+0x228>
 800287e:	2303      	movs	r3, #3
 8002880:	e004      	b.n	800288c <HAL_GPIO_Init+0x228>
 8002882:	2302      	movs	r3, #2
 8002884:	e002      	b.n	800288c <HAL_GPIO_Init+0x228>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <HAL_GPIO_Init+0x228>
 800288a:	2300      	movs	r3, #0
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	f002 0203 	and.w	r2, r2, #3
 8002892:	0092      	lsls	r2, r2, #2
 8002894:	4093      	lsls	r3, r2
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800289c:	4935      	ldr	r1, [pc, #212]	; (8002974 <HAL_GPIO_Init+0x310>)
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	3302      	adds	r3, #2
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028aa:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <HAL_GPIO_Init+0x334>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ce:	4a32      	ldr	r2, [pc, #200]	; (8002998 <HAL_GPIO_Init+0x334>)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028d4:	4b30      	ldr	r3, [pc, #192]	; (8002998 <HAL_GPIO_Init+0x334>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028f8:	4a27      	ldr	r2, [pc, #156]	; (8002998 <HAL_GPIO_Init+0x334>)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028fe:	4b26      	ldr	r3, [pc, #152]	; (8002998 <HAL_GPIO_Init+0x334>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002922:	4a1d      	ldr	r2, [pc, #116]	; (8002998 <HAL_GPIO_Init+0x334>)
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002928:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <HAL_GPIO_Init+0x334>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800294c:	4a12      	ldr	r2, [pc, #72]	; (8002998 <HAL_GPIO_Init+0x334>)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3301      	adds	r3, #1
 8002956:	61fb      	str	r3, [r7, #28]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	2b0f      	cmp	r3, #15
 800295c:	f67f ae90 	bls.w	8002680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	3724      	adds	r7, #36	; 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800
 8002974:	40013800 	.word	0x40013800
 8002978:	40020000 	.word	0x40020000
 800297c:	40020400 	.word	0x40020400
 8002980:	40020800 	.word	0x40020800
 8002984:	40020c00 	.word	0x40020c00
 8002988:	40021000 	.word	0x40021000
 800298c:	40021400 	.word	0x40021400
 8002990:	40021800 	.word	0x40021800
 8002994:	40021c00 	.word	0x40021c00
 8002998:	40013c00 	.word	0x40013c00

0800299c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	807b      	strh	r3, [r7, #2]
 80029a8:	4613      	mov	r3, r2
 80029aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029ac:	787b      	ldrb	r3, [r7, #1]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029b2:	887a      	ldrh	r2, [r7, #2]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029b8:	e003      	b.n	80029c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ba:	887b      	ldrh	r3, [r7, #2]
 80029bc:	041a      	lsls	r2, r3, #16
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	619a      	str	r2, [r3, #24]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	460b      	mov	r3, r1
 80029d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029e0:	887a      	ldrh	r2, [r7, #2]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4013      	ands	r3, r2
 80029e6:	041a      	lsls	r2, r3, #16
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	43d9      	mvns	r1, r3
 80029ec:	887b      	ldrh	r3, [r7, #2]
 80029ee:	400b      	ands	r3, r1
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	619a      	str	r2, [r3, #24]
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e267      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d075      	beq.n	8002b0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a22:	4b88      	ldr	r3, [pc, #544]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d00c      	beq.n	8002a48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a2e:	4b85      	ldr	r3, [pc, #532]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d112      	bne.n	8002a60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a3a:	4b82      	ldr	r3, [pc, #520]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a46:	d10b      	bne.n	8002a60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	4b7e      	ldr	r3, [pc, #504]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d05b      	beq.n	8002b0c <HAL_RCC_OscConfig+0x108>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d157      	bne.n	8002b0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e242      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a68:	d106      	bne.n	8002a78 <HAL_RCC_OscConfig+0x74>
 8002a6a:	4b76      	ldr	r3, [pc, #472]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a75      	ldr	r2, [pc, #468]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e01d      	b.n	8002ab4 <HAL_RCC_OscConfig+0xb0>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x98>
 8002a82:	4b70      	ldr	r3, [pc, #448]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a6f      	ldr	r2, [pc, #444]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b6d      	ldr	r3, [pc, #436]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a6c      	ldr	r2, [pc, #432]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e00b      	b.n	8002ab4 <HAL_RCC_OscConfig+0xb0>
 8002a9c:	4b69      	ldr	r3, [pc, #420]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a68      	ldr	r2, [pc, #416]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	4b66      	ldr	r3, [pc, #408]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a65      	ldr	r2, [pc, #404]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d013      	beq.n	8002ae4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7fe faa6 	bl	800100c <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac4:	f7fe faa2 	bl	800100c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	; 0x64
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e207      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	4b5b      	ldr	r3, [pc, #364]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0xc0>
 8002ae2:	e014      	b.n	8002b0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fa92 	bl	800100c <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aec:	f7fe fa8e 	bl	800100c <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e1f3      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afe:	4b51      	ldr	r3, [pc, #324]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0xe8>
 8002b0a:	e000      	b.n	8002b0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d063      	beq.n	8002be2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b1a:	4b4a      	ldr	r3, [pc, #296]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00b      	beq.n	8002b3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b26:	4b47      	ldr	r3, [pc, #284]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d11c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b32:	4b44      	ldr	r3, [pc, #272]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d116      	bne.n	8002b6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3e:	4b41      	ldr	r3, [pc, #260]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_RCC_OscConfig+0x152>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e1c7      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b56:	4b3b      	ldr	r3, [pc, #236]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4937      	ldr	r1, [pc, #220]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6a:	e03a      	b.n	8002be2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d020      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b74:	4b34      	ldr	r3, [pc, #208]	; (8002c48 <HAL_RCC_OscConfig+0x244>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7a:	f7fe fa47 	bl	800100c <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b82:	f7fe fa43 	bl	800100c <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e1a8      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b94:	4b2b      	ldr	r3, [pc, #172]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba0:	4b28      	ldr	r3, [pc, #160]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4925      	ldr	r1, [pc, #148]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	600b      	str	r3, [r1, #0]
 8002bb4:	e015      	b.n	8002be2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb6:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <HAL_RCC_OscConfig+0x244>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fa26 	bl	800100c <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bc4:	f7fe fa22 	bl	800100c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e187      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd6:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d036      	beq.n	8002c5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d016      	beq.n	8002c24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <HAL_RCC_OscConfig+0x248>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfc:	f7fe fa06 	bl	800100c <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c04:	f7fe fa02 	bl	800100c <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e167      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0x200>
 8002c22:	e01b      	b.n	8002c5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <HAL_RCC_OscConfig+0x248>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2a:	f7fe f9ef 	bl	800100c <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c30:	e00e      	b.n	8002c50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c32:	f7fe f9eb 	bl	800100c <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d907      	bls.n	8002c50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e150      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
 8002c44:	40023800 	.word	0x40023800
 8002c48:	42470000 	.word	0x42470000
 8002c4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c50:	4b88      	ldr	r3, [pc, #544]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1ea      	bne.n	8002c32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 8097 	beq.w	8002d98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c6e:	4b81      	ldr	r3, [pc, #516]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10f      	bne.n	8002c9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	4b7d      	ldr	r3, [pc, #500]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	4a7c      	ldr	r2, [pc, #496]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c88:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8a:	4b7a      	ldr	r3, [pc, #488]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c96:	2301      	movs	r3, #1
 8002c98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9a:	4b77      	ldr	r3, [pc, #476]	; (8002e78 <HAL_RCC_OscConfig+0x474>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d118      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca6:	4b74      	ldr	r3, [pc, #464]	; (8002e78 <HAL_RCC_OscConfig+0x474>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a73      	ldr	r2, [pc, #460]	; (8002e78 <HAL_RCC_OscConfig+0x474>)
 8002cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb2:	f7fe f9ab 	bl	800100c <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cba:	f7fe f9a7 	bl	800100c <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e10c      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ccc:	4b6a      	ldr	r3, [pc, #424]	; (8002e78 <HAL_RCC_OscConfig+0x474>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f0      	beq.n	8002cba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d106      	bne.n	8002cee <HAL_RCC_OscConfig+0x2ea>
 8002ce0:	4b64      	ldr	r3, [pc, #400]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	4a63      	ldr	r2, [pc, #396]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6713      	str	r3, [r2, #112]	; 0x70
 8002cec:	e01c      	b.n	8002d28 <HAL_RCC_OscConfig+0x324>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2b05      	cmp	r3, #5
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x30c>
 8002cf6:	4b5f      	ldr	r3, [pc, #380]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	4a5e      	ldr	r2, [pc, #376]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002cfc:	f043 0304 	orr.w	r3, r3, #4
 8002d00:	6713      	str	r3, [r2, #112]	; 0x70
 8002d02:	4b5c      	ldr	r3, [pc, #368]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	4a5b      	ldr	r2, [pc, #364]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0e:	e00b      	b.n	8002d28 <HAL_RCC_OscConfig+0x324>
 8002d10:	4b58      	ldr	r3, [pc, #352]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d14:	4a57      	ldr	r2, [pc, #348]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d16:	f023 0301 	bic.w	r3, r3, #1
 8002d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1c:	4b55      	ldr	r3, [pc, #340]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d20:	4a54      	ldr	r2, [pc, #336]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d22:	f023 0304 	bic.w	r3, r3, #4
 8002d26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d015      	beq.n	8002d5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7fe f96c 	bl	800100c <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d36:	e00a      	b.n	8002d4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d38:	f7fe f968 	bl	800100c <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e0cb      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4e:	4b49      	ldr	r3, [pc, #292]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0ee      	beq.n	8002d38 <HAL_RCC_OscConfig+0x334>
 8002d5a:	e014      	b.n	8002d86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5c:	f7fe f956 	bl	800100c <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d64:	f7fe f952 	bl	800100c <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e0b5      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7a:	4b3e      	ldr	r3, [pc, #248]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1ee      	bne.n	8002d64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d86:	7dfb      	ldrb	r3, [r7, #23]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d105      	bne.n	8002d98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d8c:	4b39      	ldr	r3, [pc, #228]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	4a38      	ldr	r2, [pc, #224]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 80a1 	beq.w	8002ee4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002da2:	4b34      	ldr	r3, [pc, #208]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d05c      	beq.n	8002e68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d141      	bne.n	8002e3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db6:	4b31      	ldr	r3, [pc, #196]	; (8002e7c <HAL_RCC_OscConfig+0x478>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fe f926 	bl	800100c <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fe f922 	bl	800100c <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e087      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd6:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69da      	ldr	r2, [r3, #28]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	019b      	lsls	r3, r3, #6
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df8:	085b      	lsrs	r3, r3, #1
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	061b      	lsls	r3, r3, #24
 8002e06:	491b      	ldr	r1, [pc, #108]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <HAL_RCC_OscConfig+0x478>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e12:	f7fe f8fb 	bl	800100c <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7fe f8f7 	bl	800100c <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e05c      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2c:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x416>
 8002e38:	e054      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <HAL_RCC_OscConfig+0x478>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7fe f8e4 	bl	800100c <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe f8e0 	bl	800100c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e045      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5a:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x444>
 8002e66:	e03d      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e038      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e80:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <HAL_RCC_OscConfig+0x4ec>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d028      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d121      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d11a      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d111      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	085b      	lsrs	r3, r3, #1
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d107      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40023800 	.word	0x40023800

08002ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0cc      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f08:	4b68      	ldr	r3, [pc, #416]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d90c      	bls.n	8002f30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b65      	ldr	r3, [pc, #404]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	4b63      	ldr	r3, [pc, #396]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0b8      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d020      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f48:	4b59      	ldr	r3, [pc, #356]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	4a58      	ldr	r2, [pc, #352]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f60:	4b53      	ldr	r3, [pc, #332]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	4a52      	ldr	r2, [pc, #328]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f6c:	4b50      	ldr	r3, [pc, #320]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	494d      	ldr	r1, [pc, #308]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d044      	beq.n	8003014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	4b47      	ldr	r3, [pc, #284]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d119      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e07f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d003      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb2:	4b3f      	ldr	r3, [pc, #252]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e06f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e067      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd2:	4b37      	ldr	r3, [pc, #220]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f023 0203 	bic.w	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4934      	ldr	r1, [pc, #208]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe4:	f7fe f812 	bl	800100c <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fec:	f7fe f80e 	bl	800100c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e04f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 020c 	and.w	r2, r3, #12
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	429a      	cmp	r2, r3
 8003012:	d1eb      	bne.n	8002fec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003014:	4b25      	ldr	r3, [pc, #148]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d20c      	bcs.n	800303c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b22      	ldr	r3, [pc, #136]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b20      	ldr	r3, [pc, #128]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e032      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003048:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4916      	ldr	r1, [pc, #88]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003066:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	490e      	ldr	r1, [pc, #56]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	4313      	orrs	r3, r2
 8003078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800307a:	f000 f821 	bl	80030c0 <HAL_RCC_GetSysClockFreq>
 800307e:	4602      	mov	r2, r0
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	490a      	ldr	r1, [pc, #40]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 800308c:	5ccb      	ldrb	r3, [r1, r3]
 800308e:	fa22 f303 	lsr.w	r3, r2, r3
 8003092:	4a09      	ldr	r2, [pc, #36]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003096:	4b09      	ldr	r3, [pc, #36]	; (80030bc <HAL_RCC_ClockConfig+0x1c8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd ff72 	bl	8000f84 <HAL_InitTick>

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40023c00 	.word	0x40023c00
 80030b0:	40023800 	.word	0x40023800
 80030b4:	0801282c 	.word	0x0801282c
 80030b8:	20000000 	.word	0x20000000
 80030bc:	20000004 	.word	0x20000004

080030c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c4:	b094      	sub	sp, #80	; 0x50
 80030c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	647b      	str	r3, [r7, #68]	; 0x44
 80030cc:	2300      	movs	r3, #0
 80030ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030d0:	2300      	movs	r3, #0
 80030d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030d8:	4b79      	ldr	r3, [pc, #484]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d00d      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0x40>
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	f200 80e1 	bhi.w	80032ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x34>
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d003      	beq.n	80030fa <HAL_RCC_GetSysClockFreq+0x3a>
 80030f2:	e0db      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030f4:	4b73      	ldr	r3, [pc, #460]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80030f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80030f8:	e0db      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030fa:	4b73      	ldr	r3, [pc, #460]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80030fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030fe:	e0d8      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003100:	4b6f      	ldr	r3, [pc, #444]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003108:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800310a:	4b6d      	ldr	r3, [pc, #436]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d063      	beq.n	80031de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003116:	4b6a      	ldr	r3, [pc, #424]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	099b      	lsrs	r3, r3, #6
 800311c:	2200      	movs	r2, #0
 800311e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003120:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003128:	633b      	str	r3, [r7, #48]	; 0x30
 800312a:	2300      	movs	r3, #0
 800312c:	637b      	str	r3, [r7, #52]	; 0x34
 800312e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003132:	4622      	mov	r2, r4
 8003134:	462b      	mov	r3, r5
 8003136:	f04f 0000 	mov.w	r0, #0
 800313a:	f04f 0100 	mov.w	r1, #0
 800313e:	0159      	lsls	r1, r3, #5
 8003140:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003144:	0150      	lsls	r0, r2, #5
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4621      	mov	r1, r4
 800314c:	1a51      	subs	r1, r2, r1
 800314e:	6139      	str	r1, [r7, #16]
 8003150:	4629      	mov	r1, r5
 8003152:	eb63 0301 	sbc.w	r3, r3, r1
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003164:	4659      	mov	r1, fp
 8003166:	018b      	lsls	r3, r1, #6
 8003168:	4651      	mov	r1, sl
 800316a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800316e:	4651      	mov	r1, sl
 8003170:	018a      	lsls	r2, r1, #6
 8003172:	4651      	mov	r1, sl
 8003174:	ebb2 0801 	subs.w	r8, r2, r1
 8003178:	4659      	mov	r1, fp
 800317a:	eb63 0901 	sbc.w	r9, r3, r1
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	f04f 0300 	mov.w	r3, #0
 8003186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800318a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800318e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003192:	4690      	mov	r8, r2
 8003194:	4699      	mov	r9, r3
 8003196:	4623      	mov	r3, r4
 8003198:	eb18 0303 	adds.w	r3, r8, r3
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	462b      	mov	r3, r5
 80031a0:	eb49 0303 	adc.w	r3, r9, r3
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031b2:	4629      	mov	r1, r5
 80031b4:	024b      	lsls	r3, r1, #9
 80031b6:	4621      	mov	r1, r4
 80031b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031bc:	4621      	mov	r1, r4
 80031be:	024a      	lsls	r2, r1, #9
 80031c0:	4610      	mov	r0, r2
 80031c2:	4619      	mov	r1, r3
 80031c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031c6:	2200      	movs	r2, #0
 80031c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031d0:	f7fd f84e 	bl	8000270 <__aeabi_uldivmod>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4613      	mov	r3, r2
 80031da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031dc:	e058      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031de:	4b38      	ldr	r3, [pc, #224]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	099b      	lsrs	r3, r3, #6
 80031e4:	2200      	movs	r2, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	4611      	mov	r1, r2
 80031ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031ee:	623b      	str	r3, [r7, #32]
 80031f0:	2300      	movs	r3, #0
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
 80031f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031f8:	4642      	mov	r2, r8
 80031fa:	464b      	mov	r3, r9
 80031fc:	f04f 0000 	mov.w	r0, #0
 8003200:	f04f 0100 	mov.w	r1, #0
 8003204:	0159      	lsls	r1, r3, #5
 8003206:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800320a:	0150      	lsls	r0, r2, #5
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4641      	mov	r1, r8
 8003212:	ebb2 0a01 	subs.w	sl, r2, r1
 8003216:	4649      	mov	r1, r9
 8003218:	eb63 0b01 	sbc.w	fp, r3, r1
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003228:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800322c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003230:	ebb2 040a 	subs.w	r4, r2, sl
 8003234:	eb63 050b 	sbc.w	r5, r3, fp
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	00eb      	lsls	r3, r5, #3
 8003242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003246:	00e2      	lsls	r2, r4, #3
 8003248:	4614      	mov	r4, r2
 800324a:	461d      	mov	r5, r3
 800324c:	4643      	mov	r3, r8
 800324e:	18e3      	adds	r3, r4, r3
 8003250:	603b      	str	r3, [r7, #0]
 8003252:	464b      	mov	r3, r9
 8003254:	eb45 0303 	adc.w	r3, r5, r3
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003266:	4629      	mov	r1, r5
 8003268:	028b      	lsls	r3, r1, #10
 800326a:	4621      	mov	r1, r4
 800326c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003270:	4621      	mov	r1, r4
 8003272:	028a      	lsls	r2, r1, #10
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800327a:	2200      	movs	r2, #0
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	61fa      	str	r2, [r7, #28]
 8003280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003284:	f7fc fff4 	bl	8000270 <__aeabi_uldivmod>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4613      	mov	r3, r2
 800328e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	0c1b      	lsrs	r3, r3, #16
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	3301      	adds	r3, #1
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80032a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032aa:	e002      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032ac:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80032ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3750      	adds	r7, #80	; 0x50
 80032b8:	46bd      	mov	sp, r7
 80032ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800
 80032c4:	00f42400 	.word	0x00f42400
 80032c8:	007a1200 	.word	0x007a1200

080032cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032d2:	681b      	ldr	r3, [r3, #0]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000000 	.word	0x20000000

080032e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e041      	b.n	800337a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fd fb4c 	bl	80009a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3304      	adds	r3, #4
 8003320:	4619      	mov	r1, r3
 8003322:	4610      	mov	r0, r2
 8003324:	f000 fa96 	bl	8003854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d001      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e04e      	b.n	800343a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0201 	orr.w	r2, r2, #1
 80033b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a23      	ldr	r2, [pc, #140]	; (8003448 <HAL_TIM_Base_Start_IT+0xc4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d022      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x80>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c6:	d01d      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x80>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1f      	ldr	r2, [pc, #124]	; (800344c <HAL_TIM_Base_Start_IT+0xc8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d018      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x80>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a1e      	ldr	r2, [pc, #120]	; (8003450 <HAL_TIM_Base_Start_IT+0xcc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d013      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x80>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1c      	ldr	r2, [pc, #112]	; (8003454 <HAL_TIM_Base_Start_IT+0xd0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00e      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x80>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1b      	ldr	r2, [pc, #108]	; (8003458 <HAL_TIM_Base_Start_IT+0xd4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d009      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x80>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a19      	ldr	r2, [pc, #100]	; (800345c <HAL_TIM_Base_Start_IT+0xd8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d004      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x80>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a18      	ldr	r2, [pc, #96]	; (8003460 <HAL_TIM_Base_Start_IT+0xdc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d111      	bne.n	8003428 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b06      	cmp	r3, #6
 8003414:	d010      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0201 	orr.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003426:	e007      	b.n	8003438 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40010000 	.word	0x40010000
 800344c:	40000400 	.word	0x40000400
 8003450:	40000800 	.word	0x40000800
 8003454:	40000c00 	.word	0x40000c00
 8003458:	40010400 	.word	0x40010400
 800345c:	40014000 	.word	0x40014000
 8003460:	40001800 	.word	0x40001800

08003464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b02      	cmp	r3, #2
 8003478:	d122      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b02      	cmp	r3, #2
 8003486:	d11b      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0202 	mvn.w	r2, #2
 8003490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f9b5 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 80034ac:	e005      	b.n	80034ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f9a7 	bl	8003802 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f9b8 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d122      	bne.n	8003514 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d11b      	bne.n	8003514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0204 	mvn.w	r2, #4
 80034e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2202      	movs	r2, #2
 80034ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f98b 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 8003500:	e005      	b.n	800350e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f97d 	bl	8003802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f98e 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b08      	cmp	r3, #8
 8003520:	d122      	bne.n	8003568 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b08      	cmp	r3, #8
 800352e:	d11b      	bne.n	8003568 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0208 	mvn.w	r2, #8
 8003538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2204      	movs	r2, #4
 800353e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f961 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 8003554:	e005      	b.n	8003562 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f953 	bl	8003802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f964 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	2b10      	cmp	r3, #16
 8003574:	d122      	bne.n	80035bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b10      	cmp	r3, #16
 8003582:	d11b      	bne.n	80035bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0210 	mvn.w	r2, #16
 800358c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2208      	movs	r2, #8
 8003592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f937 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 80035a8:	e005      	b.n	80035b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f929 	bl	8003802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f93a 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d10e      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d107      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0201 	mvn.w	r2, #1
 80035e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd f85c 	bl	80006a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f2:	2b80      	cmp	r3, #128	; 0x80
 80035f4:	d10e      	bne.n	8003614 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003600:	2b80      	cmp	r3, #128	; 0x80
 8003602:	d107      	bne.n	8003614 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800360c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fae0 	bl	8003bd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b40      	cmp	r3, #64	; 0x40
 8003620:	d10e      	bne.n	8003640 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362c:	2b40      	cmp	r3, #64	; 0x40
 800362e:	d107      	bne.n	8003640 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f8ff 	bl	800383e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b20      	cmp	r3, #32
 800364c:	d10e      	bne.n	800366c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b20      	cmp	r3, #32
 800365a:	d107      	bne.n	800366c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0220 	mvn.w	r2, #32
 8003664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 faaa 	bl	8003bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800366c:	bf00      	nop
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_TIM_ConfigClockSource+0x1c>
 800368c:	2302      	movs	r3, #2
 800368e:	e0b4      	b.n	80037fa <HAL_TIM_ConfigClockSource+0x186>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c8:	d03e      	beq.n	8003748 <HAL_TIM_ConfigClockSource+0xd4>
 80036ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ce:	f200 8087 	bhi.w	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d6:	f000 8086 	beq.w	80037e6 <HAL_TIM_ConfigClockSource+0x172>
 80036da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036de:	d87f      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036e0:	2b70      	cmp	r3, #112	; 0x70
 80036e2:	d01a      	beq.n	800371a <HAL_TIM_ConfigClockSource+0xa6>
 80036e4:	2b70      	cmp	r3, #112	; 0x70
 80036e6:	d87b      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036e8:	2b60      	cmp	r3, #96	; 0x60
 80036ea:	d050      	beq.n	800378e <HAL_TIM_ConfigClockSource+0x11a>
 80036ec:	2b60      	cmp	r3, #96	; 0x60
 80036ee:	d877      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036f0:	2b50      	cmp	r3, #80	; 0x50
 80036f2:	d03c      	beq.n	800376e <HAL_TIM_ConfigClockSource+0xfa>
 80036f4:	2b50      	cmp	r3, #80	; 0x50
 80036f6:	d873      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036f8:	2b40      	cmp	r3, #64	; 0x40
 80036fa:	d058      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0x13a>
 80036fc:	2b40      	cmp	r3, #64	; 0x40
 80036fe:	d86f      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003700:	2b30      	cmp	r3, #48	; 0x30
 8003702:	d064      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 8003704:	2b30      	cmp	r3, #48	; 0x30
 8003706:	d86b      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003708:	2b20      	cmp	r3, #32
 800370a:	d060      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 800370c:	2b20      	cmp	r3, #32
 800370e:	d867      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003710:	2b00      	cmp	r3, #0
 8003712:	d05c      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 8003714:	2b10      	cmp	r3, #16
 8003716:	d05a      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 8003718:	e062      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6899      	ldr	r1, [r3, #8]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f000 f9ad 	bl	8003a88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800373c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	609a      	str	r2, [r3, #8]
      break;
 8003746:	e04f      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	6899      	ldr	r1, [r3, #8]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f000 f996 	bl	8003a88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800376a:	609a      	str	r2, [r3, #8]
      break;
 800376c:	e03c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6859      	ldr	r1, [r3, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	461a      	mov	r2, r3
 800377c:	f000 f90a 	bl	8003994 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2150      	movs	r1, #80	; 0x50
 8003786:	4618      	mov	r0, r3
 8003788:	f000 f963 	bl	8003a52 <TIM_ITRx_SetConfig>
      break;
 800378c:	e02c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6859      	ldr	r1, [r3, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	461a      	mov	r2, r3
 800379c:	f000 f929 	bl	80039f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2160      	movs	r1, #96	; 0x60
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 f953 	bl	8003a52 <TIM_ITRx_SetConfig>
      break;
 80037ac:	e01c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6859      	ldr	r1, [r3, #4]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	461a      	mov	r2, r3
 80037bc:	f000 f8ea 	bl	8003994 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2140      	movs	r1, #64	; 0x40
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 f943 	bl	8003a52 <TIM_ITRx_SetConfig>
      break;
 80037cc:	e00c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4619      	mov	r1, r3
 80037d8:	4610      	mov	r0, r2
 80037da:	f000 f93a 	bl	8003a52 <TIM_ITRx_SetConfig>
      break;
 80037de:	e003      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
      break;
 80037e4:	e000      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a40      	ldr	r2, [pc, #256]	; (8003968 <TIM_Base_SetConfig+0x114>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d013      	beq.n	8003894 <TIM_Base_SetConfig+0x40>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003872:	d00f      	beq.n	8003894 <TIM_Base_SetConfig+0x40>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a3d      	ldr	r2, [pc, #244]	; (800396c <TIM_Base_SetConfig+0x118>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00b      	beq.n	8003894 <TIM_Base_SetConfig+0x40>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a3c      	ldr	r2, [pc, #240]	; (8003970 <TIM_Base_SetConfig+0x11c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d007      	beq.n	8003894 <TIM_Base_SetConfig+0x40>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a3b      	ldr	r2, [pc, #236]	; (8003974 <TIM_Base_SetConfig+0x120>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d003      	beq.n	8003894 <TIM_Base_SetConfig+0x40>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a3a      	ldr	r2, [pc, #232]	; (8003978 <TIM_Base_SetConfig+0x124>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d108      	bne.n	80038a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a2f      	ldr	r2, [pc, #188]	; (8003968 <TIM_Base_SetConfig+0x114>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d02b      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b4:	d027      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a2c      	ldr	r2, [pc, #176]	; (800396c <TIM_Base_SetConfig+0x118>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d023      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a2b      	ldr	r2, [pc, #172]	; (8003970 <TIM_Base_SetConfig+0x11c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d01f      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a2a      	ldr	r2, [pc, #168]	; (8003974 <TIM_Base_SetConfig+0x120>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d01b      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a29      	ldr	r2, [pc, #164]	; (8003978 <TIM_Base_SetConfig+0x124>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d017      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a28      	ldr	r2, [pc, #160]	; (800397c <TIM_Base_SetConfig+0x128>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a27      	ldr	r2, [pc, #156]	; (8003980 <TIM_Base_SetConfig+0x12c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00f      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a26      	ldr	r2, [pc, #152]	; (8003984 <TIM_Base_SetConfig+0x130>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00b      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a25      	ldr	r2, [pc, #148]	; (8003988 <TIM_Base_SetConfig+0x134>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d007      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a24      	ldr	r2, [pc, #144]	; (800398c <TIM_Base_SetConfig+0x138>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d003      	beq.n	8003906 <TIM_Base_SetConfig+0xb2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a23      	ldr	r2, [pc, #140]	; (8003990 <TIM_Base_SetConfig+0x13c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d108      	bne.n	8003918 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800390c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <TIM_Base_SetConfig+0x114>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d003      	beq.n	800394c <TIM_Base_SetConfig+0xf8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a0c      	ldr	r2, [pc, #48]	; (8003978 <TIM_Base_SetConfig+0x124>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d103      	bne.n	8003954 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	615a      	str	r2, [r3, #20]
}
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40010000 	.word	0x40010000
 800396c:	40000400 	.word	0x40000400
 8003970:	40000800 	.word	0x40000800
 8003974:	40000c00 	.word	0x40000c00
 8003978:	40010400 	.word	0x40010400
 800397c:	40014000 	.word	0x40014000
 8003980:	40014400 	.word	0x40014400
 8003984:	40014800 	.word	0x40014800
 8003988:	40001800 	.word	0x40001800
 800398c:	40001c00 	.word	0x40001c00
 8003990:	40002000 	.word	0x40002000

08003994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	f023 0201 	bic.w	r2, r3, #1
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f023 030a 	bic.w	r3, r3, #10
 80039d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	621a      	str	r2, [r3, #32]
}
 80039e6:	bf00      	nop
 80039e8:	371c      	adds	r7, #28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b087      	sub	sp, #28
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	f023 0210 	bic.w	r2, r3, #16
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	031b      	lsls	r3, r3, #12
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	621a      	str	r2, [r3, #32]
}
 8003a46:	bf00      	nop
 8003a48:	371c      	adds	r7, #28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b085      	sub	sp, #20
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f043 0307 	orr.w	r3, r3, #7
 8003a74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	609a      	str	r2, [r3, #8]
}
 8003a7c:	bf00      	nop
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	021a      	lsls	r2, r3, #8
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	609a      	str	r2, [r3, #8]
}
 8003abc:	bf00      	nop
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e05a      	b.n	8003b96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a21      	ldr	r2, [pc, #132]	; (8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d022      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2c:	d01d      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1d      	ldr	r2, [pc, #116]	; (8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d018      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1b      	ldr	r2, [pc, #108]	; (8003bac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a1a      	ldr	r2, [pc, #104]	; (8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00e      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a18      	ldr	r2, [pc, #96]	; (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d009      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a17      	ldr	r2, [pc, #92]	; (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d004      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a15      	ldr	r2, [pc, #84]	; (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d10c      	bne.n	8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40010000 	.word	0x40010000
 8003ba8:	40000400 	.word	0x40000400
 8003bac:	40000800 	.word	0x40000800
 8003bb0:	40000c00 	.word	0x40000c00
 8003bb4:	40010400 	.word	0x40010400
 8003bb8:	40014000 	.word	0x40014000
 8003bbc:	40001800 	.word	0x40001800

08003bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003bee:	4b8d      	ldr	r3, [pc, #564]	; (8003e24 <MX_LWIP_Init+0x23c>)
 8003bf0:	22c0      	movs	r2, #192	; 0xc0
 8003bf2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003bf4:	4b8b      	ldr	r3, [pc, #556]	; (8003e24 <MX_LWIP_Init+0x23c>)
 8003bf6:	22a8      	movs	r2, #168	; 0xa8
 8003bf8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8003bfa:	4b8a      	ldr	r3, [pc, #552]	; (8003e24 <MX_LWIP_Init+0x23c>)
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8003c00:	4b88      	ldr	r3, [pc, #544]	; (8003e24 <MX_LWIP_Init+0x23c>)
 8003c02:	226f      	movs	r2, #111	; 0x6f
 8003c04:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003c06:	4b88      	ldr	r3, [pc, #544]	; (8003e28 <MX_LWIP_Init+0x240>)
 8003c08:	22ff      	movs	r2, #255	; 0xff
 8003c0a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003c0c:	4b86      	ldr	r3, [pc, #536]	; (8003e28 <MX_LWIP_Init+0x240>)
 8003c0e:	22ff      	movs	r2, #255	; 0xff
 8003c10:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003c12:	4b85      	ldr	r3, [pc, #532]	; (8003e28 <MX_LWIP_Init+0x240>)
 8003c14:	22ff      	movs	r2, #255	; 0xff
 8003c16:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003c18:	4b83      	ldr	r3, [pc, #524]	; (8003e28 <MX_LWIP_Init+0x240>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003c1e:	4b83      	ldr	r3, [pc, #524]	; (8003e2c <MX_LWIP_Init+0x244>)
 8003c20:	22c0      	movs	r2, #192	; 0xc0
 8003c22:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003c24:	4b81      	ldr	r3, [pc, #516]	; (8003e2c <MX_LWIP_Init+0x244>)
 8003c26:	22a8      	movs	r2, #168	; 0xa8
 8003c28:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8003c2a:	4b80      	ldr	r3, [pc, #512]	; (8003e2c <MX_LWIP_Init+0x244>)
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 111;
 8003c30:	4b7e      	ldr	r3, [pc, #504]	; (8003e2c <MX_LWIP_Init+0x244>)
 8003c32:	226f      	movs	r2, #111	; 0x6f
 8003c34:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003c36:	f000 fd05 	bl	8004644 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003c3a:	4b7a      	ldr	r3, [pc, #488]	; (8003e24 <MX_LWIP_Init+0x23c>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	061a      	lsls	r2, r3, #24
 8003c40:	4b78      	ldr	r3, [pc, #480]	; (8003e24 <MX_LWIP_Init+0x23c>)
 8003c42:	785b      	ldrb	r3, [r3, #1]
 8003c44:	041b      	lsls	r3, r3, #16
 8003c46:	431a      	orrs	r2, r3
 8003c48:	4b76      	ldr	r3, [pc, #472]	; (8003e24 <MX_LWIP_Init+0x23c>)
 8003c4a:	789b      	ldrb	r3, [r3, #2]
 8003c4c:	021b      	lsls	r3, r3, #8
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	4a74      	ldr	r2, [pc, #464]	; (8003e24 <MX_LWIP_Init+0x23c>)
 8003c52:	78d2      	ldrb	r2, [r2, #3]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	061a      	lsls	r2, r3, #24
 8003c58:	4b72      	ldr	r3, [pc, #456]	; (8003e24 <MX_LWIP_Init+0x23c>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	0619      	lsls	r1, r3, #24
 8003c5e:	4b71      	ldr	r3, [pc, #452]	; (8003e24 <MX_LWIP_Init+0x23c>)
 8003c60:	785b      	ldrb	r3, [r3, #1]
 8003c62:	041b      	lsls	r3, r3, #16
 8003c64:	4319      	orrs	r1, r3
 8003c66:	4b6f      	ldr	r3, [pc, #444]	; (8003e24 <MX_LWIP_Init+0x23c>)
 8003c68:	789b      	ldrb	r3, [r3, #2]
 8003c6a:	021b      	lsls	r3, r3, #8
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	496d      	ldr	r1, [pc, #436]	; (8003e24 <MX_LWIP_Init+0x23c>)
 8003c70:	78c9      	ldrb	r1, [r1, #3]
 8003c72:	430b      	orrs	r3, r1
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	4b69      	ldr	r3, [pc, #420]	; (8003e24 <MX_LWIP_Init+0x23c>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	0619      	lsls	r1, r3, #24
 8003c82:	4b68      	ldr	r3, [pc, #416]	; (8003e24 <MX_LWIP_Init+0x23c>)
 8003c84:	785b      	ldrb	r3, [r3, #1]
 8003c86:	041b      	lsls	r3, r3, #16
 8003c88:	4319      	orrs	r1, r3
 8003c8a:	4b66      	ldr	r3, [pc, #408]	; (8003e24 <MX_LWIP_Init+0x23c>)
 8003c8c:	789b      	ldrb	r3, [r3, #2]
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	430b      	orrs	r3, r1
 8003c92:	4964      	ldr	r1, [pc, #400]	; (8003e24 <MX_LWIP_Init+0x23c>)
 8003c94:	78c9      	ldrb	r1, [r1, #3]
 8003c96:	430b      	orrs	r3, r1
 8003c98:	0a1b      	lsrs	r3, r3, #8
 8003c9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	4b60      	ldr	r3, [pc, #384]	; (8003e24 <MX_LWIP_Init+0x23c>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	0619      	lsls	r1, r3, #24
 8003ca6:	4b5f      	ldr	r3, [pc, #380]	; (8003e24 <MX_LWIP_Init+0x23c>)
 8003ca8:	785b      	ldrb	r3, [r3, #1]
 8003caa:	041b      	lsls	r3, r3, #16
 8003cac:	4319      	orrs	r1, r3
 8003cae:	4b5d      	ldr	r3, [pc, #372]	; (8003e24 <MX_LWIP_Init+0x23c>)
 8003cb0:	789b      	ldrb	r3, [r3, #2]
 8003cb2:	021b      	lsls	r3, r3, #8
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	495b      	ldr	r1, [pc, #364]	; (8003e24 <MX_LWIP_Init+0x23c>)
 8003cb8:	78c9      	ldrb	r1, [r1, #3]
 8003cba:	430b      	orrs	r3, r1
 8003cbc:	0e1b      	lsrs	r3, r3, #24
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	4a5b      	ldr	r2, [pc, #364]	; (8003e30 <MX_LWIP_Init+0x248>)
 8003cc2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003cc4:	4b58      	ldr	r3, [pc, #352]	; (8003e28 <MX_LWIP_Init+0x240>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	061a      	lsls	r2, r3, #24
 8003cca:	4b57      	ldr	r3, [pc, #348]	; (8003e28 <MX_LWIP_Init+0x240>)
 8003ccc:	785b      	ldrb	r3, [r3, #1]
 8003cce:	041b      	lsls	r3, r3, #16
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	4b55      	ldr	r3, [pc, #340]	; (8003e28 <MX_LWIP_Init+0x240>)
 8003cd4:	789b      	ldrb	r3, [r3, #2]
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	4a53      	ldr	r2, [pc, #332]	; (8003e28 <MX_LWIP_Init+0x240>)
 8003cdc:	78d2      	ldrb	r2, [r2, #3]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	061a      	lsls	r2, r3, #24
 8003ce2:	4b51      	ldr	r3, [pc, #324]	; (8003e28 <MX_LWIP_Init+0x240>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	0619      	lsls	r1, r3, #24
 8003ce8:	4b4f      	ldr	r3, [pc, #316]	; (8003e28 <MX_LWIP_Init+0x240>)
 8003cea:	785b      	ldrb	r3, [r3, #1]
 8003cec:	041b      	lsls	r3, r3, #16
 8003cee:	4319      	orrs	r1, r3
 8003cf0:	4b4d      	ldr	r3, [pc, #308]	; (8003e28 <MX_LWIP_Init+0x240>)
 8003cf2:	789b      	ldrb	r3, [r3, #2]
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	430b      	orrs	r3, r1
 8003cf8:	494b      	ldr	r1, [pc, #300]	; (8003e28 <MX_LWIP_Init+0x240>)
 8003cfa:	78c9      	ldrb	r1, [r1, #3]
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d04:	431a      	orrs	r2, r3
 8003d06:	4b48      	ldr	r3, [pc, #288]	; (8003e28 <MX_LWIP_Init+0x240>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	0619      	lsls	r1, r3, #24
 8003d0c:	4b46      	ldr	r3, [pc, #280]	; (8003e28 <MX_LWIP_Init+0x240>)
 8003d0e:	785b      	ldrb	r3, [r3, #1]
 8003d10:	041b      	lsls	r3, r3, #16
 8003d12:	4319      	orrs	r1, r3
 8003d14:	4b44      	ldr	r3, [pc, #272]	; (8003e28 <MX_LWIP_Init+0x240>)
 8003d16:	789b      	ldrb	r3, [r3, #2]
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	430b      	orrs	r3, r1
 8003d1c:	4942      	ldr	r1, [pc, #264]	; (8003e28 <MX_LWIP_Init+0x240>)
 8003d1e:	78c9      	ldrb	r1, [r1, #3]
 8003d20:	430b      	orrs	r3, r1
 8003d22:	0a1b      	lsrs	r3, r3, #8
 8003d24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	4b3f      	ldr	r3, [pc, #252]	; (8003e28 <MX_LWIP_Init+0x240>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	0619      	lsls	r1, r3, #24
 8003d30:	4b3d      	ldr	r3, [pc, #244]	; (8003e28 <MX_LWIP_Init+0x240>)
 8003d32:	785b      	ldrb	r3, [r3, #1]
 8003d34:	041b      	lsls	r3, r3, #16
 8003d36:	4319      	orrs	r1, r3
 8003d38:	4b3b      	ldr	r3, [pc, #236]	; (8003e28 <MX_LWIP_Init+0x240>)
 8003d3a:	789b      	ldrb	r3, [r3, #2]
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	430b      	orrs	r3, r1
 8003d40:	4939      	ldr	r1, [pc, #228]	; (8003e28 <MX_LWIP_Init+0x240>)
 8003d42:	78c9      	ldrb	r1, [r1, #3]
 8003d44:	430b      	orrs	r3, r1
 8003d46:	0e1b      	lsrs	r3, r3, #24
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	4a3a      	ldr	r2, [pc, #232]	; (8003e34 <MX_LWIP_Init+0x24c>)
 8003d4c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003d4e:	4b37      	ldr	r3, [pc, #220]	; (8003e2c <MX_LWIP_Init+0x244>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	061a      	lsls	r2, r3, #24
 8003d54:	4b35      	ldr	r3, [pc, #212]	; (8003e2c <MX_LWIP_Init+0x244>)
 8003d56:	785b      	ldrb	r3, [r3, #1]
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	4b33      	ldr	r3, [pc, #204]	; (8003e2c <MX_LWIP_Init+0x244>)
 8003d5e:	789b      	ldrb	r3, [r3, #2]
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	4313      	orrs	r3, r2
 8003d64:	4a31      	ldr	r2, [pc, #196]	; (8003e2c <MX_LWIP_Init+0x244>)
 8003d66:	78d2      	ldrb	r2, [r2, #3]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	061a      	lsls	r2, r3, #24
 8003d6c:	4b2f      	ldr	r3, [pc, #188]	; (8003e2c <MX_LWIP_Init+0x244>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	0619      	lsls	r1, r3, #24
 8003d72:	4b2e      	ldr	r3, [pc, #184]	; (8003e2c <MX_LWIP_Init+0x244>)
 8003d74:	785b      	ldrb	r3, [r3, #1]
 8003d76:	041b      	lsls	r3, r3, #16
 8003d78:	4319      	orrs	r1, r3
 8003d7a:	4b2c      	ldr	r3, [pc, #176]	; (8003e2c <MX_LWIP_Init+0x244>)
 8003d7c:	789b      	ldrb	r3, [r3, #2]
 8003d7e:	021b      	lsls	r3, r3, #8
 8003d80:	430b      	orrs	r3, r1
 8003d82:	492a      	ldr	r1, [pc, #168]	; (8003e2c <MX_LWIP_Init+0x244>)
 8003d84:	78c9      	ldrb	r1, [r1, #3]
 8003d86:	430b      	orrs	r3, r1
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	4b26      	ldr	r3, [pc, #152]	; (8003e2c <MX_LWIP_Init+0x244>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	0619      	lsls	r1, r3, #24
 8003d96:	4b25      	ldr	r3, [pc, #148]	; (8003e2c <MX_LWIP_Init+0x244>)
 8003d98:	785b      	ldrb	r3, [r3, #1]
 8003d9a:	041b      	lsls	r3, r3, #16
 8003d9c:	4319      	orrs	r1, r3
 8003d9e:	4b23      	ldr	r3, [pc, #140]	; (8003e2c <MX_LWIP_Init+0x244>)
 8003da0:	789b      	ldrb	r3, [r3, #2]
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	430b      	orrs	r3, r1
 8003da6:	4921      	ldr	r1, [pc, #132]	; (8003e2c <MX_LWIP_Init+0x244>)
 8003da8:	78c9      	ldrb	r1, [r1, #3]
 8003daa:	430b      	orrs	r3, r1
 8003dac:	0a1b      	lsrs	r3, r3, #8
 8003dae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003db2:	431a      	orrs	r2, r3
 8003db4:	4b1d      	ldr	r3, [pc, #116]	; (8003e2c <MX_LWIP_Init+0x244>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	0619      	lsls	r1, r3, #24
 8003dba:	4b1c      	ldr	r3, [pc, #112]	; (8003e2c <MX_LWIP_Init+0x244>)
 8003dbc:	785b      	ldrb	r3, [r3, #1]
 8003dbe:	041b      	lsls	r3, r3, #16
 8003dc0:	4319      	orrs	r1, r3
 8003dc2:	4b1a      	ldr	r3, [pc, #104]	; (8003e2c <MX_LWIP_Init+0x244>)
 8003dc4:	789b      	ldrb	r3, [r3, #2]
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	4918      	ldr	r1, [pc, #96]	; (8003e2c <MX_LWIP_Init+0x244>)
 8003dcc:	78c9      	ldrb	r1, [r1, #3]
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	0e1b      	lsrs	r3, r3, #24
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	4a18      	ldr	r2, [pc, #96]	; (8003e38 <MX_LWIP_Init+0x250>)
 8003dd6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003dd8:	4b18      	ldr	r3, [pc, #96]	; (8003e3c <MX_LWIP_Init+0x254>)
 8003dda:	9302      	str	r3, [sp, #8]
 8003ddc:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <MX_LWIP_Init+0x258>)
 8003dde:	9301      	str	r3, [sp, #4]
 8003de0:	2300      	movs	r3, #0
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	4b14      	ldr	r3, [pc, #80]	; (8003e38 <MX_LWIP_Init+0x250>)
 8003de6:	4a13      	ldr	r2, [pc, #76]	; (8003e34 <MX_LWIP_Init+0x24c>)
 8003de8:	4911      	ldr	r1, [pc, #68]	; (8003e30 <MX_LWIP_Init+0x248>)
 8003dea:	4816      	ldr	r0, [pc, #88]	; (8003e44 <MX_LWIP_Init+0x25c>)
 8003dec:	f001 f916 	bl	800501c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003df0:	4814      	ldr	r0, [pc, #80]	; (8003e44 <MX_LWIP_Init+0x25c>)
 8003df2:	f001 fac5 	bl	8005380 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003df6:	4b13      	ldr	r3, [pc, #76]	; (8003e44 <MX_LWIP_Init+0x25c>)
 8003df8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003dfc:	089b      	lsrs	r3, r3, #2
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003e08:	480e      	ldr	r0, [pc, #56]	; (8003e44 <MX_LWIP_Init+0x25c>)
 8003e0a:	f001 fac9 	bl	80053a0 <netif_set_up>
 8003e0e:	e002      	b.n	8003e16 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003e10:	480c      	ldr	r0, [pc, #48]	; (8003e44 <MX_LWIP_Init+0x25c>)
 8003e12:	f001 fb31 	bl	8005478 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003e16:	490c      	ldr	r1, [pc, #48]	; (8003e48 <MX_LWIP_Init+0x260>)
 8003e18:	480a      	ldr	r0, [pc, #40]	; (8003e44 <MX_LWIP_Init+0x25c>)
 8003e1a:	f001 fbc3 	bl	80055a4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003e1e:	bf00      	nop
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	200001bc 	.word	0x200001bc
 8003e28:	200001c0 	.word	0x200001c0
 8003e2c:	200001c4 	.word	0x200001c4
 8003e30:	200001b0 	.word	0x200001b0
 8003e34:	200001b4 	.word	0x200001b4
 8003e38:	200001b8 	.word	0x200001b8
 8003e3c:	0800e765 	.word	0x0800e765
 8003e40:	08004159 	.word	0x08004159
 8003e44:	2000017c 	.word	0x2000017c
 8003e48:	08003e9d 	.word	0x08003e9d

08003e4c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8003e54:	f7fd f8da 	bl	800100c <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <Ethernet_Link_Periodic_Handle+0x30>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b63      	cmp	r3, #99	; 0x63
 8003e62:	d907      	bls.n	8003e74 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8003e64:	f7fd f8d2 	bl	800100c <HAL_GetTick>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	4a04      	ldr	r2, [pc, #16]	; (8003e7c <Ethernet_Link_Periodic_Handle+0x30>)
 8003e6c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fabe 	bl	80043f0 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20000178 	.word	0x20000178

08003e80 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003e84:	4804      	ldr	r0, [pc, #16]	; (8003e98 <MX_LWIP_Process+0x18>)
 8003e86:	f000 f947 	bl	8004118 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8003e8a:	f007 fc9f 	bl	800b7cc <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8003e8e:	4802      	ldr	r0, [pc, #8]	; (8003e98 <MX_LWIP_Process+0x18>)
 8003e90:	f7ff ffdc 	bl	8003e4c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003e94:	bf00      	nop
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	2000017c 	.word	0x2000017c

08003e9c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003ebc:	4b40      	ldr	r3, [pc, #256]	; (8003fc0 <low_level_init+0x110>)
 8003ebe:	4a41      	ldr	r2, [pc, #260]	; (8003fc4 <low_level_init+0x114>)
 8003ec0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003ec6:	2380      	movs	r3, #128	; 0x80
 8003ec8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003eca:	23e1      	movs	r3, #225	; 0xe1
 8003ecc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0xDF;
 8003ece:	23df      	movs	r3, #223	; 0xdf
 8003ed0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0xB0;
 8003ed2:	23b0      	movs	r3, #176	; 0xb0
 8003ed4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0xC2;
 8003ed6:	23c2      	movs	r3, #194	; 0xc2
 8003ed8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003eda:	4a39      	ldr	r2, [pc, #228]	; (8003fc0 <low_level_init+0x110>)
 8003edc:	f107 0308 	add.w	r3, r7, #8
 8003ee0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003ee2:	4b37      	ldr	r3, [pc, #220]	; (8003fc0 <low_level_init+0x110>)
 8003ee4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003ee8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003eea:	4b35      	ldr	r3, [pc, #212]	; (8003fc0 <low_level_init+0x110>)
 8003eec:	4a36      	ldr	r2, [pc, #216]	; (8003fc8 <low_level_init+0x118>)
 8003eee:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003ef0:	4b33      	ldr	r3, [pc, #204]	; (8003fc0 <low_level_init+0x110>)
 8003ef2:	4a36      	ldr	r2, [pc, #216]	; (8003fcc <low_level_init+0x11c>)
 8003ef4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8003ef6:	4b32      	ldr	r3, [pc, #200]	; (8003fc0 <low_level_init+0x110>)
 8003ef8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003efc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003efe:	4830      	ldr	r0, [pc, #192]	; (8003fc0 <low_level_init+0x110>)
 8003f00:	f7fd f9c6 	bl	8001290 <HAL_ETH_Init>
 8003f04:	4603      	mov	r3, r0
 8003f06:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003f08:	2238      	movs	r2, #56	; 0x38
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	4830      	ldr	r0, [pc, #192]	; (8003fd0 <low_level_init+0x120>)
 8003f0e:	f00a fd5b 	bl	800e9c8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003f12:	4b2f      	ldr	r3, [pc, #188]	; (8003fd0 <low_level_init+0x120>)
 8003f14:	2221      	movs	r2, #33	; 0x21
 8003f16:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003f18:	4b2d      	ldr	r3, [pc, #180]	; (8003fd0 <low_level_init+0x120>)
 8003f1a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8003f1e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003f20:	4b2b      	ldr	r3, [pc, #172]	; (8003fd0 <low_level_init+0x120>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003f26:	482b      	ldr	r0, [pc, #172]	; (8003fd4 <low_level_init+0x124>)
 8003f28:	f000 ff40 	bl	8004dac <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2206      	movs	r2, #6
 8003f30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003f34:	4b22      	ldr	r3, [pc, #136]	; (8003fc0 <low_level_init+0x110>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	781a      	ldrb	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003f40:	4b1f      	ldr	r3, [pc, #124]	; (8003fc0 <low_level_init+0x110>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	785a      	ldrb	r2, [r3, #1]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003f4c:	4b1c      	ldr	r3, [pc, #112]	; (8003fc0 <low_level_init+0x110>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	789a      	ldrb	r2, [r3, #2]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003f58:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <low_level_init+0x110>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	78da      	ldrb	r2, [r3, #3]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003f64:	4b16      	ldr	r3, [pc, #88]	; (8003fc0 <low_level_init+0x110>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	791a      	ldrb	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003f70:	4b13      	ldr	r3, [pc, #76]	; (8003fc0 <low_level_init+0x110>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	795a      	ldrb	r2, [r3, #5]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003f82:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003f8a:	f043 030a 	orr.w	r3, r3, #10
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8003f96:	4910      	ldr	r1, [pc, #64]	; (8003fd8 <low_level_init+0x128>)
 8003f98:	4810      	ldr	r0, [pc, #64]	; (8003fdc <low_level_init+0x12c>)
 8003f9a:	f7fc fe70 	bl	8000c7e <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 8003f9e:	480f      	ldr	r0, [pc, #60]	; (8003fdc <low_level_init+0x12c>)
 8003fa0:	f7fc fe9f 	bl	8000ce2 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d103      	bne.n	8003fb2 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fa20 	bl	80043f0 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003fb0:	e001      	b.n	8003fb6 <low_level_init+0x106>
    Error_Handler();
 8003fb2:	f7fc fccb 	bl	800094c <Error_Handler>
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20004c94 	.word	0x20004c94
 8003fc4:	40028000 	.word	0x40028000
 8003fc8:	20004bf4 	.word	0x20004bf4
 8003fcc:	20004b54 	.word	0x20004b54
 8003fd0:	20004d44 	.word	0x20004d44
 8003fd4:	0801283c 	.word	0x0801283c
 8003fd8:	2000000c 	.word	0x2000000c
 8003fdc:	20004d7c 	.word	0x20004d7c

08003fe0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b092      	sub	sp, #72	; 0x48
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003ff8:	f107 030c 	add.w	r3, r7, #12
 8003ffc:	2230      	movs	r2, #48	; 0x30
 8003ffe:	2100      	movs	r1, #0
 8004000:	4618      	mov	r0, r3
 8004002:	f00a fce1 	bl	800e9c8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004006:	f107 030c 	add.w	r3, r7, #12
 800400a:	2230      	movs	r2, #48	; 0x30
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f00a fcda 	bl	800e9c8 <memset>

  for(q = p; q != NULL; q = q->next)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	643b      	str	r3, [r7, #64]	; 0x40
 8004018:	e045      	b.n	80040a6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800401a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800401c:	2b03      	cmp	r3, #3
 800401e:	d902      	bls.n	8004026 <low_level_output+0x46>
      return ERR_IF;
 8004020:	f06f 030b 	mvn.w	r3, #11
 8004024:	e055      	b.n	80040d2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8004026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004028:	6859      	ldr	r1, [r3, #4]
 800402a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800402c:	4613      	mov	r3, r2
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	3348      	adds	r3, #72	; 0x48
 8004036:	443b      	add	r3, r7
 8004038:	3b3c      	subs	r3, #60	; 0x3c
 800403a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800403c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800403e:	895b      	ldrh	r3, [r3, #10]
 8004040:	4619      	mov	r1, r3
 8004042:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004044:	4613      	mov	r3, r2
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	3348      	adds	r3, #72	; 0x48
 800404e:	443b      	add	r3, r7
 8004050:	3b38      	subs	r3, #56	; 0x38
 8004052:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004056:	2b00      	cmp	r3, #0
 8004058:	d011      	beq.n	800407e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800405a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800405c:	1e5a      	subs	r2, r3, #1
 800405e:	f107 000c 	add.w	r0, r7, #12
 8004062:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004064:	460b      	mov	r3, r1
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	440b      	add	r3, r1
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	18c1      	adds	r1, r0, r3
 800406e:	4613      	mov	r3, r2
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	4413      	add	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	3348      	adds	r3, #72	; 0x48
 8004078:	443b      	add	r3, r7
 800407a:	3b34      	subs	r3, #52	; 0x34
 800407c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800407e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004088:	4613      	mov	r3, r2
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	3348      	adds	r3, #72	; 0x48
 8004092:	443b      	add	r3, r7
 8004094:	3b34      	subs	r3, #52	; 0x34
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
    }

    i++;
 800409a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800409c:	3301      	adds	r3, #1
 800409e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80040a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	643b      	str	r3, [r7, #64]	; 0x40
 80040a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1b6      	bne.n	800401a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	891b      	ldrh	r3, [r3, #8]
 80040b0:	461a      	mov	r2, r3
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <low_level_output+0xfc>)
 80040b4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80040b6:	4a09      	ldr	r2, [pc, #36]	; (80040dc <low_level_output+0xfc>)
 80040b8:	f107 030c 	add.w	r3, r7, #12
 80040bc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80040be:	4a07      	ldr	r2, [pc, #28]	; (80040dc <low_level_output+0xfc>)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80040c4:	2214      	movs	r2, #20
 80040c6:	4905      	ldr	r1, [pc, #20]	; (80040dc <low_level_output+0xfc>)
 80040c8:	4805      	ldr	r0, [pc, #20]	; (80040e0 <low_level_output+0x100>)
 80040ca:	f7fd fa17 	bl	80014fc <HAL_ETH_Transmit>

  return errval;
 80040ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3748      	adds	r7, #72	; 0x48
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20004d44 	.word	0x20004d44
 80040e0:	20004c94 	.word	0x20004c94

080040e4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80040f0:	4b07      	ldr	r3, [pc, #28]	; (8004110 <low_level_input+0x2c>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d105      	bne.n	8004104 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80040f8:	f107 030c 	add.w	r3, r7, #12
 80040fc:	4619      	mov	r1, r3
 80040fe:	4805      	ldr	r0, [pc, #20]	; (8004114 <low_level_input+0x30>)
 8004100:	f7fd fa90 	bl	8001624 <HAL_ETH_ReadData>
  }

  return p;
 8004104:	68fb      	ldr	r3, [r7, #12]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20004b50 	.word	0x20004b50
 8004114:	20004c94 	.word	0x20004c94

08004118 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff ffdd 	bl	80040e4 <low_level_input>
 800412a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	4798      	blx	r3
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d002      	beq.n	8004148 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f001 fdae 	bl	8005ca4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1ea      	bne.n	8004124 <ethernetif_input+0xc>
}
 800414e:	bf00      	nop
 8004150:	bf00      	nop
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <ethernetif_init+0x1c>
 8004166:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <ethernetif_init+0x48>)
 8004168:	f240 126b 	movw	r2, #363	; 0x16b
 800416c:	490d      	ldr	r1, [pc, #52]	; (80041a4 <ethernetif_init+0x4c>)
 800416e:	480e      	ldr	r0, [pc, #56]	; (80041a8 <ethernetif_init+0x50>)
 8004170:	f00a fc32 	bl	800e9d8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2273      	movs	r2, #115	; 0x73
 8004178:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2274      	movs	r2, #116	; 0x74
 8004180:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a09      	ldr	r2, [pc, #36]	; (80041ac <ethernetif_init+0x54>)
 8004188:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a08      	ldr	r2, [pc, #32]	; (80041b0 <ethernetif_init+0x58>)
 800418e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff fe8d 	bl	8003eb0 <low_level_init>

  return ERR_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	0800fe4c 	.word	0x0800fe4c
 80041a4:	0800fe68 	.word	0x0800fe68
 80041a8:	0800fe78 	.word	0x0800fe78
 80041ac:	0800cafd 	.word	0x0800cafd
 80041b0:	08003fe1 	.word	0x08003fe1

080041b4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80041c0:	68f9      	ldr	r1, [r7, #12]
 80041c2:	4807      	ldr	r0, [pc, #28]	; (80041e0 <pbuf_free_custom+0x2c>)
 80041c4:	f000 fed4 	bl	8004f70 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <pbuf_free_custom+0x30>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d102      	bne.n	80041d6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80041d0:	4b04      	ldr	r3, [pc, #16]	; (80041e4 <pbuf_free_custom+0x30>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	701a      	strb	r2, [r3, #0]
  }
}
 80041d6:	bf00      	nop
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	0801283c 	.word	0x0801283c
 80041e4:	20004b50 	.word	0x20004b50

080041e8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80041ec:	f7fc ff0e 	bl	800100c <HAL_GetTick>
 80041f0:	4603      	mov	r3, r0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08e      	sub	sp, #56	; 0x38
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	609a      	str	r2, [r3, #8]
 800420c:	60da      	str	r2, [r3, #12]
 800420e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a4a      	ldr	r2, [pc, #296]	; (8004340 <HAL_ETH_MspInit+0x148>)
 8004216:	4293      	cmp	r3, r2
 8004218:	f040 808d 	bne.w	8004336 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800421c:	2300      	movs	r3, #0
 800421e:	623b      	str	r3, [r7, #32]
 8004220:	4b48      	ldr	r3, [pc, #288]	; (8004344 <HAL_ETH_MspInit+0x14c>)
 8004222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004224:	4a47      	ldr	r2, [pc, #284]	; (8004344 <HAL_ETH_MspInit+0x14c>)
 8004226:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800422a:	6313      	str	r3, [r2, #48]	; 0x30
 800422c:	4b45      	ldr	r3, [pc, #276]	; (8004344 <HAL_ETH_MspInit+0x14c>)
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004234:	623b      	str	r3, [r7, #32]
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	2300      	movs	r3, #0
 800423a:	61fb      	str	r3, [r7, #28]
 800423c:	4b41      	ldr	r3, [pc, #260]	; (8004344 <HAL_ETH_MspInit+0x14c>)
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	4a40      	ldr	r2, [pc, #256]	; (8004344 <HAL_ETH_MspInit+0x14c>)
 8004242:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004246:	6313      	str	r3, [r2, #48]	; 0x30
 8004248:	4b3e      	ldr	r3, [pc, #248]	; (8004344 <HAL_ETH_MspInit+0x14c>)
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	2300      	movs	r3, #0
 8004256:	61bb      	str	r3, [r7, #24]
 8004258:	4b3a      	ldr	r3, [pc, #232]	; (8004344 <HAL_ETH_MspInit+0x14c>)
 800425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425c:	4a39      	ldr	r2, [pc, #228]	; (8004344 <HAL_ETH_MspInit+0x14c>)
 800425e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004262:	6313      	str	r3, [r2, #48]	; 0x30
 8004264:	4b37      	ldr	r3, [pc, #220]	; (8004344 <HAL_ETH_MspInit+0x14c>)
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	4b33      	ldr	r3, [pc, #204]	; (8004344 <HAL_ETH_MspInit+0x14c>)
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004278:	4a32      	ldr	r2, [pc, #200]	; (8004344 <HAL_ETH_MspInit+0x14c>)
 800427a:	f043 0304 	orr.w	r3, r3, #4
 800427e:	6313      	str	r3, [r2, #48]	; 0x30
 8004280:	4b30      	ldr	r3, [pc, #192]	; (8004344 <HAL_ETH_MspInit+0x14c>)
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800428c:	2300      	movs	r3, #0
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	4b2c      	ldr	r3, [pc, #176]	; (8004344 <HAL_ETH_MspInit+0x14c>)
 8004292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004294:	4a2b      	ldr	r2, [pc, #172]	; (8004344 <HAL_ETH_MspInit+0x14c>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	6313      	str	r3, [r2, #48]	; 0x30
 800429c:	4b29      	ldr	r3, [pc, #164]	; (8004344 <HAL_ETH_MspInit+0x14c>)
 800429e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042a8:	2300      	movs	r3, #0
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	4b25      	ldr	r3, [pc, #148]	; (8004344 <HAL_ETH_MspInit+0x14c>)
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	4a24      	ldr	r2, [pc, #144]	; (8004344 <HAL_ETH_MspInit+0x14c>)
 80042b2:	f043 0302 	orr.w	r3, r3, #2
 80042b6:	6313      	str	r3, [r2, #48]	; 0x30
 80042b8:	4b22      	ldr	r3, [pc, #136]	; (8004344 <HAL_ETH_MspInit+0x14c>)
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80042c4:	2332      	movs	r3, #50	; 0x32
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c8:	2302      	movs	r3, #2
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042d0:	2303      	movs	r3, #3
 80042d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80042d4:	230b      	movs	r3, #11
 80042d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042dc:	4619      	mov	r1, r3
 80042de:	481a      	ldr	r0, [pc, #104]	; (8004348 <HAL_ETH_MspInit+0x150>)
 80042e0:	f7fe f9c0 	bl	8002664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80042e4:	2386      	movs	r3, #134	; 0x86
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e8:	2302      	movs	r3, #2
 80042ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042f0:	2303      	movs	r3, #3
 80042f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80042f4:	230b      	movs	r3, #11
 80042f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042fc:	4619      	mov	r1, r3
 80042fe:	4813      	ldr	r0, [pc, #76]	; (800434c <HAL_ETH_MspInit+0x154>)
 8004300:	f7fe f9b0 	bl	8002664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004304:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430a:	2302      	movs	r3, #2
 800430c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430e:	2300      	movs	r3, #0
 8004310:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004312:	2303      	movs	r3, #3
 8004314:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004316:	230b      	movs	r3, #11
 8004318:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800431a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800431e:	4619      	mov	r1, r3
 8004320:	480b      	ldr	r0, [pc, #44]	; (8004350 <HAL_ETH_MspInit+0x158>)
 8004322:	f7fe f99f 	bl	8002664 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8004326:	2200      	movs	r2, #0
 8004328:	2100      	movs	r1, #0
 800432a:	203d      	movs	r0, #61	; 0x3d
 800432c:	f7fc ff79 	bl	8001222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004330:	203d      	movs	r0, #61	; 0x3d
 8004332:	f7fc ff92 	bl	800125a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004336:	bf00      	nop
 8004338:	3738      	adds	r7, #56	; 0x38
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40028000 	.word	0x40028000
 8004344:	40023800 	.word	0x40023800
 8004348:	40020800 	.word	0x40020800
 800434c:	40020000 	.word	0x40020000
 8004350:	40020400 	.word	0x40020400

08004354 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004358:	4802      	ldr	r0, [pc, #8]	; (8004364 <ETH_PHY_IO_Init+0x10>)
 800435a:	f7fd fd27 	bl	8001dac <HAL_ETH_SetMDIOClockRange>

  return 0;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20004c94 	.word	0x20004c94

08004368 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  return 0;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	68f9      	ldr	r1, [r7, #12]
 800438a:	4807      	ldr	r0, [pc, #28]	; (80043a8 <ETH_PHY_IO_ReadReg+0x30>)
 800438c:	f7fd fb76 	bl	8001a7c <HAL_ETH_ReadPHYRegister>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004396:	f04f 33ff 	mov.w	r3, #4294967295
 800439a:	e000      	b.n	800439e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20004c94 	.word	0x20004c94

080043ac <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	68f9      	ldr	r1, [r7, #12]
 80043be:	4807      	ldr	r0, [pc, #28]	; (80043dc <ETH_PHY_IO_WriteReg+0x30>)
 80043c0:	f7fd fba7 	bl	8001b12 <HAL_ETH_WritePHYRegister>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80043ca:	f04f 33ff 	mov.w	r3, #4294967295
 80043ce:	e000      	b.n	80043d2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20004c94 	.word	0x20004c94

080043e0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80043e4:	f7fc fe12 	bl	800100c <HAL_GetTick>
 80043e8:	4603      	mov	r3, r0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	bd80      	pop	{r7, pc}
	...

080043f0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b0a0      	sub	sp, #128	; 0x80
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80043f8:	f107 030c 	add.w	r3, r7, #12
 80043fc:	2264      	movs	r2, #100	; 0x64
 80043fe:	2100      	movs	r1, #0
 8004400:	4618      	mov	r0, r3
 8004402:	f00a fae1 	bl	800e9c8 <memset>
  int32_t PHYLinkState = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800440e:	2300      	movs	r3, #0
 8004410:	67bb      	str	r3, [r7, #120]	; 0x78
 8004412:	2300      	movs	r3, #0
 8004414:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8004416:	483a      	ldr	r0, [pc, #232]	; (8004500 <ethernet_link_check_state+0x110>)
 8004418:	f7fc fd0b 	bl	8000e32 <DP83848_GetLinkState>
 800441c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004424:	089b      	lsrs	r3, r3, #2
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00c      	beq.n	800444a <ethernet_link_check_state+0x5a>
 8004430:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004432:	2b01      	cmp	r3, #1
 8004434:	dc09      	bgt.n	800444a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8004436:	4833      	ldr	r0, [pc, #204]	; (8004504 <ethernet_link_check_state+0x114>)
 8004438:	f7fd f807 	bl	800144a <HAL_ETH_Stop>
    netif_set_down(netif);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f001 f81b 	bl	8005478 <netif_set_down>
    netif_set_link_down(netif);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f001 f87e 	bl	8005544 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004448:	e055      	b.n	80044f6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	d14e      	bne.n	80044f6 <ethernet_link_check_state+0x106>
 8004458:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800445a:	2b01      	cmp	r3, #1
 800445c:	dd4b      	ble.n	80044f6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800445e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004460:	3b02      	subs	r3, #2
 8004462:	2b03      	cmp	r3, #3
 8004464:	d82a      	bhi.n	80044bc <ethernet_link_check_state+0xcc>
 8004466:	a201      	add	r2, pc, #4	; (adr r2, 800446c <ethernet_link_check_state+0x7c>)
 8004468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446c:	0800447d 	.word	0x0800447d
 8004470:	0800448f 	.word	0x0800448f
 8004474:	0800449f 	.word	0x0800449f
 8004478:	080044af 	.word	0x080044af
      duplex = ETH_FULLDUPLEX_MODE;
 800447c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004480:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004482:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004486:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004488:	2301      	movs	r3, #1
 800448a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800448c:	e017      	b.n	80044be <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800448e:	2300      	movs	r3, #0
 8004490:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004492:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004496:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004498:	2301      	movs	r3, #1
 800449a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800449c:	e00f      	b.n	80044be <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800449e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044a2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80044a4:	2300      	movs	r3, #0
 80044a6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80044a8:	2301      	movs	r3, #1
 80044aa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80044ac:	e007      	b.n	80044be <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80044b2:	2300      	movs	r3, #0
 80044b4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80044b6:	2301      	movs	r3, #1
 80044b8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80044ba:	e000      	b.n	80044be <ethernet_link_check_state+0xce>
      break;
 80044bc:	bf00      	nop
    if(linkchanged)
 80044be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d018      	beq.n	80044f6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80044c4:	f107 030c 	add.w	r3, r7, #12
 80044c8:	4619      	mov	r1, r3
 80044ca:	480e      	ldr	r0, [pc, #56]	; (8004504 <ethernet_link_check_state+0x114>)
 80044cc:	f7fd fb6a 	bl	8001ba4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80044d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80044d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044d6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80044d8:	f107 030c 	add.w	r3, r7, #12
 80044dc:	4619      	mov	r1, r3
 80044de:	4809      	ldr	r0, [pc, #36]	; (8004504 <ethernet_link_check_state+0x114>)
 80044e0:	f7fd fc4a 	bl	8001d78 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80044e4:	4807      	ldr	r0, [pc, #28]	; (8004504 <ethernet_link_check_state+0x114>)
 80044e6:	f7fc ff51 	bl	800138c <HAL_ETH_Start>
      netif_set_up(netif);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 ff58 	bl	80053a0 <netif_set_up>
      netif_set_link_up(netif);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fff3 	bl	80054dc <netif_set_link_up>
}
 80044f6:	bf00      	nop
 80044f8:	3780      	adds	r7, #128	; 0x80
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20004d7c 	.word	0x20004d7c
 8004504:	20004c94 	.word	0x20004c94

08004508 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af02      	add	r7, sp, #8
 800450e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004510:	4812      	ldr	r0, [pc, #72]	; (800455c <HAL_ETH_RxAllocateCallback+0x54>)
 8004512:	f000 fcbf 	bl	8004e94 <memp_malloc_pool>
 8004516:	60f8      	str	r0, [r7, #12]
  if (p)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d014      	beq.n	8004548 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f103 0220 	add.w	r2, r3, #32
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4a0d      	ldr	r2, [pc, #52]	; (8004560 <HAL_ETH_RxAllocateCallback+0x58>)
 800452c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004536:	9201      	str	r2, [sp, #4]
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2241      	movs	r2, #65	; 0x41
 800453e:	2100      	movs	r1, #0
 8004540:	2000      	movs	r0, #0
 8004542:	f001 f9f5 	bl	8005930 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004546:	e005      	b.n	8004554 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004548:	4b06      	ldr	r3, [pc, #24]	; (8004564 <HAL_ETH_RxAllocateCallback+0x5c>)
 800454a:	2201      	movs	r2, #1
 800454c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]
}
 8004554:	bf00      	nop
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	0801283c 	.word	0x0801283c
 8004560:	080041b5 	.word	0x080041b5
 8004564:	20004b50 	.word	0x20004b50

08004568 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004568:	b480      	push	{r7}
 800456a:	b089      	sub	sp, #36	; 0x24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3b20      	subs	r3, #32
 8004586:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	2200      	movs	r2, #0
 8004592:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	887a      	ldrh	r2, [r7, #2]
 8004598:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d103      	bne.n	80045aa <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	69fa      	ldr	r2, [r7, #28]
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	e003      	b.n	80045b2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69fa      	ldr	r2, [r7, #28]
 80045b0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	e009      	b.n	80045d4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	891a      	ldrh	r2, [r3, #8]
 80045c4:	887b      	ldrh	r3, [r7, #2]
 80045c6:	4413      	add	r3, r2
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	61fb      	str	r3, [r7, #28]
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f2      	bne.n	80045c0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80045da:	bf00      	nop
 80045dc:	bf00      	nop
 80045de:	3724      	adds	r7, #36	; 0x24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80045f2:	88fb      	ldrh	r3, [r7, #6]
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	b21a      	sxth	r2, r3
 80045f8:	88fb      	ldrh	r3, [r7, #6]
 80045fa:	0a1b      	lsrs	r3, r3, #8
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	b21b      	sxth	r3, r3
 8004600:	4313      	orrs	r3, r2
 8004602:	b21b      	sxth	r3, r3
 8004604:	b29b      	uxth	r3, r3
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	061a      	lsls	r2, r3, #24
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	021b      	lsls	r3, r3, #8
 8004622:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	0a1b      	lsrs	r3, r3, #8
 800462c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	0e1b      	lsrs	r3, r3, #24
 8004636:	4313      	orrs	r3, r2
}
 8004638:	4618      	mov	r0, r3
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800464a:	2300      	movs	r3, #0
 800464c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800464e:	f000 f8d5 	bl	80047fc <mem_init>
  memp_init();
 8004652:	f000 fbdb 	bl	8004e0c <memp_init>
  pbuf_init();
  netif_init();
 8004656:	f000 fcd9 	bl	800500c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800465a:	f007 f8f9 	bl	800b850 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800465e:	f001 fe51 	bl	8006304 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004662:	f007 f86b 	bl	800b73c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800467a:	4b05      	ldr	r3, [pc, #20]	; (8004690 <ptr_to_mem+0x20>)
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	4413      	add	r3, r2
}
 8004682:	4618      	mov	r0, r3
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	20005408 	.word	0x20005408

08004694 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <mem_to_ptr+0x20>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	b29b      	uxth	r3, r3
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	20005408 	.word	0x20005408

080046b8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80046b8:	b590      	push	{r4, r7, lr}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80046c0:	4b45      	ldr	r3, [pc, #276]	; (80047d8 <plug_holes+0x120>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d206      	bcs.n	80046d8 <plug_holes+0x20>
 80046ca:	4b44      	ldr	r3, [pc, #272]	; (80047dc <plug_holes+0x124>)
 80046cc:	f240 12df 	movw	r2, #479	; 0x1df
 80046d0:	4943      	ldr	r1, [pc, #268]	; (80047e0 <plug_holes+0x128>)
 80046d2:	4844      	ldr	r0, [pc, #272]	; (80047e4 <plug_holes+0x12c>)
 80046d4:	f00a f980 	bl	800e9d8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80046d8:	4b43      	ldr	r3, [pc, #268]	; (80047e8 <plug_holes+0x130>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d306      	bcc.n	80046f0 <plug_holes+0x38>
 80046e2:	4b3e      	ldr	r3, [pc, #248]	; (80047dc <plug_holes+0x124>)
 80046e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80046e8:	4940      	ldr	r1, [pc, #256]	; (80047ec <plug_holes+0x134>)
 80046ea:	483e      	ldr	r0, [pc, #248]	; (80047e4 <plug_holes+0x12c>)
 80046ec:	f00a f974 	bl	800e9d8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	791b      	ldrb	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d006      	beq.n	8004706 <plug_holes+0x4e>
 80046f8:	4b38      	ldr	r3, [pc, #224]	; (80047dc <plug_holes+0x124>)
 80046fa:	f240 12e1 	movw	r2, #481	; 0x1e1
 80046fe:	493c      	ldr	r1, [pc, #240]	; (80047f0 <plug_holes+0x138>)
 8004700:	4838      	ldr	r0, [pc, #224]	; (80047e4 <plug_holes+0x12c>)
 8004702:	f00a f969 	bl	800e9d8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800470e:	d906      	bls.n	800471e <plug_holes+0x66>
 8004710:	4b32      	ldr	r3, [pc, #200]	; (80047dc <plug_holes+0x124>)
 8004712:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004716:	4937      	ldr	r1, [pc, #220]	; (80047f4 <plug_holes+0x13c>)
 8004718:	4832      	ldr	r0, [pc, #200]	; (80047e4 <plug_holes+0x12c>)
 800471a:	f00a f95d 	bl	800e9d8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff ffa4 	bl	8004670 <ptr_to_mem>
 8004728:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	429a      	cmp	r2, r3
 8004730:	d024      	beq.n	800477c <plug_holes+0xc4>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	791b      	ldrb	r3, [r3, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d120      	bne.n	800477c <plug_holes+0xc4>
 800473a:	4b2b      	ldr	r3, [pc, #172]	; (80047e8 <plug_holes+0x130>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	429a      	cmp	r2, r3
 8004742:	d01b      	beq.n	800477c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004744:	4b2c      	ldr	r3, [pc, #176]	; (80047f8 <plug_holes+0x140>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	429a      	cmp	r2, r3
 800474c:	d102      	bne.n	8004754 <plug_holes+0x9c>
      lfree = mem;
 800474e:	4a2a      	ldr	r2, [pc, #168]	; (80047f8 <plug_holes+0x140>)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	881a      	ldrh	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004764:	d00a      	beq.n	800477c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff ff80 	bl	8004670 <ptr_to_mem>
 8004770:	4604      	mov	r4, r0
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff ff8e 	bl	8004694 <mem_to_ptr>
 8004778:	4603      	mov	r3, r0
 800477a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	885b      	ldrh	r3, [r3, #2]
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff ff75 	bl	8004670 <ptr_to_mem>
 8004786:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	429a      	cmp	r2, r3
 800478e:	d01f      	beq.n	80047d0 <plug_holes+0x118>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	791b      	ldrb	r3, [r3, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d11b      	bne.n	80047d0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004798:	4b17      	ldr	r3, [pc, #92]	; (80047f8 <plug_holes+0x140>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d102      	bne.n	80047a8 <plug_holes+0xf0>
      lfree = pmem;
 80047a2:	4a15      	ldr	r2, [pc, #84]	; (80047f8 <plug_holes+0x140>)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	881a      	ldrh	r2, [r3, #0]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80047b8:	d00a      	beq.n	80047d0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff ff56 	bl	8004670 <ptr_to_mem>
 80047c4:	4604      	mov	r4, r0
 80047c6:	68b8      	ldr	r0, [r7, #8]
 80047c8:	f7ff ff64 	bl	8004694 <mem_to_ptr>
 80047cc:	4603      	mov	r3, r0
 80047ce:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80047d0:	bf00      	nop
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd90      	pop	{r4, r7, pc}
 80047d8:	20005408 	.word	0x20005408
 80047dc:	0800fea0 	.word	0x0800fea0
 80047e0:	0800fed0 	.word	0x0800fed0
 80047e4:	0800fee8 	.word	0x0800fee8
 80047e8:	2000540c 	.word	0x2000540c
 80047ec:	0800ff10 	.word	0x0800ff10
 80047f0:	0800ff2c 	.word	0x0800ff2c
 80047f4:	0800ff48 	.word	0x0800ff48
 80047f8:	20005410 	.word	0x20005410

080047fc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004802:	4b18      	ldr	r3, [pc, #96]	; (8004864 <mem_init+0x68>)
 8004804:	3303      	adds	r3, #3
 8004806:	f023 0303 	bic.w	r3, r3, #3
 800480a:	461a      	mov	r2, r3
 800480c:	4b16      	ldr	r3, [pc, #88]	; (8004868 <mem_init+0x6c>)
 800480e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004810:	4b15      	ldr	r3, [pc, #84]	; (8004868 <mem_init+0x6c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800481c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800482a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800482e:	f7ff ff1f 	bl	8004670 <ptr_to_mem>
 8004832:	4603      	mov	r3, r0
 8004834:	4a0d      	ldr	r2, [pc, #52]	; (800486c <mem_init+0x70>)
 8004836:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004838:	4b0c      	ldr	r3, [pc, #48]	; (800486c <mem_init+0x70>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2201      	movs	r2, #1
 800483e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004840:	4b0a      	ldr	r3, [pc, #40]	; (800486c <mem_init+0x70>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004848:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800484a:	4b08      	ldr	r3, [pc, #32]	; (800486c <mem_init+0x70>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004852:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004854:	4b04      	ldr	r3, [pc, #16]	; (8004868 <mem_init+0x6c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a05      	ldr	r2, [pc, #20]	; (8004870 <mem_init+0x74>)
 800485a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800485c:	bf00      	nop
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	20004db4 	.word	0x20004db4
 8004868:	20005408 	.word	0x20005408
 800486c:	2000540c 	.word	0x2000540c
 8004870:	20005410 	.word	0x20005410

08004874 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff ff09 	bl	8004694 <mem_to_ptr>
 8004882:	4603      	mov	r3, r0
 8004884:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff fef0 	bl	8004670 <ptr_to_mem>
 8004890:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	885b      	ldrh	r3, [r3, #2]
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff feea 	bl	8004670 <ptr_to_mem>
 800489c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80048a6:	d818      	bhi.n	80048da <mem_link_valid+0x66>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	885b      	ldrh	r3, [r3, #2]
 80048ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80048b0:	d813      	bhi.n	80048da <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80048b6:	8afa      	ldrh	r2, [r7, #22]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d004      	beq.n	80048c6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	8afa      	ldrh	r2, [r7, #22]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d109      	bne.n	80048da <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80048c6:	4b08      	ldr	r3, [pc, #32]	; (80048e8 <mem_link_valid+0x74>)
 80048c8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d006      	beq.n	80048de <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	885b      	ldrh	r3, [r3, #2]
 80048d4:	8afa      	ldrh	r2, [r7, #22]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d001      	beq.n	80048de <mem_link_valid+0x6a>
    return 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	e000      	b.n	80048e0 <mem_link_valid+0x6c>
  }
  return 1;
 80048de:	2301      	movs	r3, #1
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	2000540c 	.word	0x2000540c

080048ec <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d04c      	beq.n	8004994 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d007      	beq.n	8004914 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004904:	4b25      	ldr	r3, [pc, #148]	; (800499c <mem_free+0xb0>)
 8004906:	f240 2273 	movw	r2, #627	; 0x273
 800490a:	4925      	ldr	r1, [pc, #148]	; (80049a0 <mem_free+0xb4>)
 800490c:	4825      	ldr	r0, [pc, #148]	; (80049a4 <mem_free+0xb8>)
 800490e:	f00a f863 	bl	800e9d8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004912:	e040      	b.n	8004996 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3b08      	subs	r3, #8
 8004918:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800491a:	4b23      	ldr	r3, [pc, #140]	; (80049a8 <mem_free+0xbc>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	429a      	cmp	r2, r3
 8004922:	d306      	bcc.n	8004932 <mem_free+0x46>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f103 020c 	add.w	r2, r3, #12
 800492a:	4b20      	ldr	r3, [pc, #128]	; (80049ac <mem_free+0xc0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d907      	bls.n	8004942 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004932:	4b1a      	ldr	r3, [pc, #104]	; (800499c <mem_free+0xb0>)
 8004934:	f240 227f 	movw	r2, #639	; 0x27f
 8004938:	491d      	ldr	r1, [pc, #116]	; (80049b0 <mem_free+0xc4>)
 800493a:	481a      	ldr	r0, [pc, #104]	; (80049a4 <mem_free+0xb8>)
 800493c:	f00a f84c 	bl	800e9d8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004940:	e029      	b.n	8004996 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	791b      	ldrb	r3, [r3, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d107      	bne.n	800495a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800494a:	4b14      	ldr	r3, [pc, #80]	; (800499c <mem_free+0xb0>)
 800494c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004950:	4918      	ldr	r1, [pc, #96]	; (80049b4 <mem_free+0xc8>)
 8004952:	4814      	ldr	r0, [pc, #80]	; (80049a4 <mem_free+0xb8>)
 8004954:	f00a f840 	bl	800e9d8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004958:	e01d      	b.n	8004996 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f7ff ff8a 	bl	8004874 <mem_link_valid>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d107      	bne.n	8004976 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004966:	4b0d      	ldr	r3, [pc, #52]	; (800499c <mem_free+0xb0>)
 8004968:	f240 2295 	movw	r2, #661	; 0x295
 800496c:	4912      	ldr	r1, [pc, #72]	; (80049b8 <mem_free+0xcc>)
 800496e:	480d      	ldr	r0, [pc, #52]	; (80049a4 <mem_free+0xb8>)
 8004970:	f00a f832 	bl	800e9d8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004974:	e00f      	b.n	8004996 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800497c:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <mem_free+0xd0>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	429a      	cmp	r2, r3
 8004984:	d202      	bcs.n	800498c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004986:	4a0d      	ldr	r2, [pc, #52]	; (80049bc <mem_free+0xd0>)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f7ff fe93 	bl	80046b8 <plug_holes>
 8004992:	e000      	b.n	8004996 <mem_free+0xaa>
    return;
 8004994:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	0800fea0 	.word	0x0800fea0
 80049a0:	0800ff74 	.word	0x0800ff74
 80049a4:	0800fee8 	.word	0x0800fee8
 80049a8:	20005408 	.word	0x20005408
 80049ac:	2000540c 	.word	0x2000540c
 80049b0:	0800ff98 	.word	0x0800ff98
 80049b4:	0800ffb4 	.word	0x0800ffb4
 80049b8:	0800ffdc 	.word	0x0800ffdc
 80049bc:	20005410 	.word	0x20005410

080049c0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80049cc:	887b      	ldrh	r3, [r7, #2]
 80049ce:	3303      	adds	r3, #3
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f023 0303 	bic.w	r3, r3, #3
 80049d6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80049d8:	8bfb      	ldrh	r3, [r7, #30]
 80049da:	2b0b      	cmp	r3, #11
 80049dc:	d801      	bhi.n	80049e2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80049de:	230c      	movs	r3, #12
 80049e0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80049e2:	8bfb      	ldrh	r3, [r7, #30]
 80049e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80049e8:	d803      	bhi.n	80049f2 <mem_trim+0x32>
 80049ea:	8bfa      	ldrh	r2, [r7, #30]
 80049ec:	887b      	ldrh	r3, [r7, #2]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d201      	bcs.n	80049f6 <mem_trim+0x36>
    return NULL;
 80049f2:	2300      	movs	r3, #0
 80049f4:	e0cc      	b.n	8004b90 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80049f6:	4b68      	ldr	r3, [pc, #416]	; (8004b98 <mem_trim+0x1d8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d304      	bcc.n	8004a0a <mem_trim+0x4a>
 8004a00:	4b66      	ldr	r3, [pc, #408]	; (8004b9c <mem_trim+0x1dc>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d306      	bcc.n	8004a18 <mem_trim+0x58>
 8004a0a:	4b65      	ldr	r3, [pc, #404]	; (8004ba0 <mem_trim+0x1e0>)
 8004a0c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004a10:	4964      	ldr	r1, [pc, #400]	; (8004ba4 <mem_trim+0x1e4>)
 8004a12:	4865      	ldr	r0, [pc, #404]	; (8004ba8 <mem_trim+0x1e8>)
 8004a14:	f009 ffe0 	bl	800e9d8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004a18:	4b5f      	ldr	r3, [pc, #380]	; (8004b98 <mem_trim+0x1d8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d304      	bcc.n	8004a2c <mem_trim+0x6c>
 8004a22:	4b5e      	ldr	r3, [pc, #376]	; (8004b9c <mem_trim+0x1dc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d301      	bcc.n	8004a30 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	e0af      	b.n	8004b90 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3b08      	subs	r3, #8
 8004a34:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004a36:	69b8      	ldr	r0, [r7, #24]
 8004a38:	f7ff fe2c 	bl	8004694 <mem_to_ptr>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	881a      	ldrh	r2, [r3, #0]
 8004a44:	8afb      	ldrh	r3, [r7, #22]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	3b08      	subs	r3, #8
 8004a4c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004a4e:	8bfa      	ldrh	r2, [r7, #30]
 8004a50:	8abb      	ldrh	r3, [r7, #20]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d906      	bls.n	8004a64 <mem_trim+0xa4>
 8004a56:	4b52      	ldr	r3, [pc, #328]	; (8004ba0 <mem_trim+0x1e0>)
 8004a58:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004a5c:	4953      	ldr	r1, [pc, #332]	; (8004bac <mem_trim+0x1ec>)
 8004a5e:	4852      	ldr	r0, [pc, #328]	; (8004ba8 <mem_trim+0x1e8>)
 8004a60:	f009 ffba 	bl	800e9d8 <iprintf>
  if (newsize > size) {
 8004a64:	8bfa      	ldrh	r2, [r7, #30]
 8004a66:	8abb      	ldrh	r3, [r7, #20]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d901      	bls.n	8004a70 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	e08f      	b.n	8004b90 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004a70:	8bfa      	ldrh	r2, [r7, #30]
 8004a72:	8abb      	ldrh	r3, [r7, #20]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d101      	bne.n	8004a7c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	e089      	b.n	8004b90 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7ff fdf5 	bl	8004670 <ptr_to_mem>
 8004a86:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	791b      	ldrb	r3, [r3, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d13f      	bne.n	8004b10 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a98:	d106      	bne.n	8004aa8 <mem_trim+0xe8>
 8004a9a:	4b41      	ldr	r3, [pc, #260]	; (8004ba0 <mem_trim+0x1e0>)
 8004a9c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004aa0:	4943      	ldr	r1, [pc, #268]	; (8004bb0 <mem_trim+0x1f0>)
 8004aa2:	4841      	ldr	r0, [pc, #260]	; (8004ba8 <mem_trim+0x1e8>)
 8004aa4:	f009 ff98 	bl	800e9d8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004aae:	8afa      	ldrh	r2, [r7, #22]
 8004ab0:	8bfb      	ldrh	r3, [r7, #30]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004aba:	4b3e      	ldr	r3, [pc, #248]	; (8004bb4 <mem_trim+0x1f4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d106      	bne.n	8004ad2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004ac4:	89fb      	ldrh	r3, [r7, #14]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff fdd2 	bl	8004670 <ptr_to_mem>
 8004acc:	4603      	mov	r3, r0
 8004ace:	4a39      	ldr	r2, [pc, #228]	; (8004bb4 <mem_trim+0x1f4>)
 8004ad0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004ad2:	89fb      	ldrh	r3, [r7, #14]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff fdcb 	bl	8004670 <ptr_to_mem>
 8004ada:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	89ba      	ldrh	r2, [r7, #12]
 8004ae6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	8afa      	ldrh	r2, [r7, #22]
 8004aec:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	89fa      	ldrh	r2, [r7, #14]
 8004af2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004afc:	d047      	beq.n	8004b8e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff fdb4 	bl	8004670 <ptr_to_mem>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	89fb      	ldrh	r3, [r7, #14]
 8004b0c:	8053      	strh	r3, [r2, #2]
 8004b0e:	e03e      	b.n	8004b8e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004b10:	8bfb      	ldrh	r3, [r7, #30]
 8004b12:	f103 0214 	add.w	r2, r3, #20
 8004b16:	8abb      	ldrh	r3, [r7, #20]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d838      	bhi.n	8004b8e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004b1c:	8afa      	ldrh	r2, [r7, #22]
 8004b1e:	8bfb      	ldrh	r3, [r7, #30]
 8004b20:	4413      	add	r3, r2
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3308      	adds	r3, #8
 8004b26:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b30:	d106      	bne.n	8004b40 <mem_trim+0x180>
 8004b32:	4b1b      	ldr	r3, [pc, #108]	; (8004ba0 <mem_trim+0x1e0>)
 8004b34:	f240 3216 	movw	r2, #790	; 0x316
 8004b38:	491d      	ldr	r1, [pc, #116]	; (8004bb0 <mem_trim+0x1f0>)
 8004b3a:	481b      	ldr	r0, [pc, #108]	; (8004ba8 <mem_trim+0x1e8>)
 8004b3c:	f009 ff4c 	bl	800e9d8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004b40:	89fb      	ldrh	r3, [r7, #14]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff fd94 	bl	8004670 <ptr_to_mem>
 8004b48:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004b4a:	4b1a      	ldr	r3, [pc, #104]	; (8004bb4 <mem_trim+0x1f4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d202      	bcs.n	8004b5a <mem_trim+0x19a>
      lfree = mem2;
 8004b54:	4a17      	ldr	r2, [pc, #92]	; (8004bb4 <mem_trim+0x1f4>)
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	881a      	ldrh	r2, [r3, #0]
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	8afa      	ldrh	r2, [r7, #22]
 8004b6c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	89fa      	ldrh	r2, [r7, #14]
 8004b72:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b7c:	d007      	beq.n	8004b8e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff fd74 	bl	8004670 <ptr_to_mem>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	89fb      	ldrh	r3, [r7, #14]
 8004b8c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004b8e:	687b      	ldr	r3, [r7, #4]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3720      	adds	r7, #32
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	20005408 	.word	0x20005408
 8004b9c:	2000540c 	.word	0x2000540c
 8004ba0:	0800fea0 	.word	0x0800fea0
 8004ba4:	08010010 	.word	0x08010010
 8004ba8:	0800fee8 	.word	0x0800fee8
 8004bac:	08010028 	.word	0x08010028
 8004bb0:	08010048 	.word	0x08010048
 8004bb4:	20005410 	.word	0x20005410

08004bb8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b088      	sub	sp, #32
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004bc2:	88fb      	ldrh	r3, [r7, #6]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <mem_malloc+0x14>
    return NULL;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	e0d9      	b.n	8004d80 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004bcc:	88fb      	ldrh	r3, [r7, #6]
 8004bce:	3303      	adds	r3, #3
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	f023 0303 	bic.w	r3, r3, #3
 8004bd6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004bd8:	8bbb      	ldrh	r3, [r7, #28]
 8004bda:	2b0b      	cmp	r3, #11
 8004bdc:	d801      	bhi.n	8004be2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004bde:	230c      	movs	r3, #12
 8004be0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004be2:	8bbb      	ldrh	r3, [r7, #28]
 8004be4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004be8:	d803      	bhi.n	8004bf2 <mem_malloc+0x3a>
 8004bea:	8bba      	ldrh	r2, [r7, #28]
 8004bec:	88fb      	ldrh	r3, [r7, #6]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d201      	bcs.n	8004bf6 <mem_malloc+0x3e>
    return NULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e0c4      	b.n	8004d80 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004bf6:	4b64      	ldr	r3, [pc, #400]	; (8004d88 <mem_malloc+0x1d0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff fd4a 	bl	8004694 <mem_to_ptr>
 8004c00:	4603      	mov	r3, r0
 8004c02:	83fb      	strh	r3, [r7, #30]
 8004c04:	e0b4      	b.n	8004d70 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004c06:	8bfb      	ldrh	r3, [r7, #30]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff fd31 	bl	8004670 <ptr_to_mem>
 8004c0e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	791b      	ldrb	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f040 80a4 	bne.w	8004d62 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	8bfb      	ldrh	r3, [r7, #30]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	f1a3 0208 	sub.w	r2, r3, #8
 8004c28:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	f0c0 8099 	bcc.w	8004d62 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	8bfb      	ldrh	r3, [r7, #30]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	f1a3 0208 	sub.w	r2, r3, #8
 8004c3e:	8bbb      	ldrh	r3, [r7, #28]
 8004c40:	3314      	adds	r3, #20
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d333      	bcc.n	8004cae <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004c46:	8bfa      	ldrh	r2, [r7, #30]
 8004c48:	8bbb      	ldrh	r3, [r7, #28]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3308      	adds	r3, #8
 8004c50:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004c52:	8a7b      	ldrh	r3, [r7, #18]
 8004c54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c58:	d106      	bne.n	8004c68 <mem_malloc+0xb0>
 8004c5a:	4b4c      	ldr	r3, [pc, #304]	; (8004d8c <mem_malloc+0x1d4>)
 8004c5c:	f240 3287 	movw	r2, #903	; 0x387
 8004c60:	494b      	ldr	r1, [pc, #300]	; (8004d90 <mem_malloc+0x1d8>)
 8004c62:	484c      	ldr	r0, [pc, #304]	; (8004d94 <mem_malloc+0x1dc>)
 8004c64:	f009 feb8 	bl	800e9d8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004c68:	8a7b      	ldrh	r3, [r7, #18]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff fd00 	bl	8004670 <ptr_to_mem>
 8004c70:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	881a      	ldrh	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8bfa      	ldrh	r2, [r7, #30]
 8004c84:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	8a7a      	ldrh	r2, [r7, #18]
 8004c8a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c9a:	d00b      	beq.n	8004cb4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff fce5 	bl	8004670 <ptr_to_mem>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	8a7b      	ldrh	r3, [r7, #18]
 8004caa:	8053      	strh	r3, [r2, #2]
 8004cac:	e002      	b.n	8004cb4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004cb4:	4b34      	ldr	r3, [pc, #208]	; (8004d88 <mem_malloc+0x1d0>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d127      	bne.n	8004d0e <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004cbe:	4b32      	ldr	r3, [pc, #200]	; (8004d88 <mem_malloc+0x1d0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004cc4:	e005      	b.n	8004cd2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff fcd0 	bl	8004670 <ptr_to_mem>
 8004cd0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	791b      	ldrb	r3, [r3, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d004      	beq.n	8004ce4 <mem_malloc+0x12c>
 8004cda:	4b2f      	ldr	r3, [pc, #188]	; (8004d98 <mem_malloc+0x1e0>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d1f0      	bne.n	8004cc6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8004ce4:	4a28      	ldr	r2, [pc, #160]	; (8004d88 <mem_malloc+0x1d0>)
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004cea:	4b27      	ldr	r3, [pc, #156]	; (8004d88 <mem_malloc+0x1d0>)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4b2a      	ldr	r3, [pc, #168]	; (8004d98 <mem_malloc+0x1e0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d00b      	beq.n	8004d0e <mem_malloc+0x156>
 8004cf6:	4b24      	ldr	r3, [pc, #144]	; (8004d88 <mem_malloc+0x1d0>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	791b      	ldrb	r3, [r3, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d006      	beq.n	8004d0e <mem_malloc+0x156>
 8004d00:	4b22      	ldr	r3, [pc, #136]	; (8004d8c <mem_malloc+0x1d4>)
 8004d02:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004d06:	4925      	ldr	r1, [pc, #148]	; (8004d9c <mem_malloc+0x1e4>)
 8004d08:	4822      	ldr	r0, [pc, #136]	; (8004d94 <mem_malloc+0x1dc>)
 8004d0a:	f009 fe65 	bl	800e9d8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004d0e:	8bba      	ldrh	r2, [r7, #28]
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	4413      	add	r3, r2
 8004d14:	3308      	adds	r3, #8
 8004d16:	4a20      	ldr	r2, [pc, #128]	; (8004d98 <mem_malloc+0x1e0>)
 8004d18:	6812      	ldr	r2, [r2, #0]
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d906      	bls.n	8004d2c <mem_malloc+0x174>
 8004d1e:	4b1b      	ldr	r3, [pc, #108]	; (8004d8c <mem_malloc+0x1d4>)
 8004d20:	f240 32b9 	movw	r2, #953	; 0x3b9
 8004d24:	491e      	ldr	r1, [pc, #120]	; (8004da0 <mem_malloc+0x1e8>)
 8004d26:	481b      	ldr	r0, [pc, #108]	; (8004d94 <mem_malloc+0x1dc>)
 8004d28:	f009 fe56 	bl	800e9d8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d006      	beq.n	8004d44 <mem_malloc+0x18c>
 8004d36:	4b15      	ldr	r3, [pc, #84]	; (8004d8c <mem_malloc+0x1d4>)
 8004d38:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004d3c:	4919      	ldr	r1, [pc, #100]	; (8004da4 <mem_malloc+0x1ec>)
 8004d3e:	4815      	ldr	r0, [pc, #84]	; (8004d94 <mem_malloc+0x1dc>)
 8004d40:	f009 fe4a 	bl	800e9d8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d006      	beq.n	8004d5c <mem_malloc+0x1a4>
 8004d4e:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <mem_malloc+0x1d4>)
 8004d50:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004d54:	4914      	ldr	r1, [pc, #80]	; (8004da8 <mem_malloc+0x1f0>)
 8004d56:	480f      	ldr	r0, [pc, #60]	; (8004d94 <mem_malloc+0x1dc>)
 8004d58:	f009 fe3e 	bl	800e9d8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	3308      	adds	r3, #8
 8004d60:	e00e      	b.n	8004d80 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004d62:	8bfb      	ldrh	r3, [r7, #30]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff fc83 	bl	8004670 <ptr_to_mem>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004d70:	8bfa      	ldrh	r2, [r7, #30]
 8004d72:	8bbb      	ldrh	r3, [r7, #28]
 8004d74:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	f4ff af44 	bcc.w	8004c06 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3720      	adds	r7, #32
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	20005410 	.word	0x20005410
 8004d8c:	0800fea0 	.word	0x0800fea0
 8004d90:	08010048 	.word	0x08010048
 8004d94:	0800fee8 	.word	0x0800fee8
 8004d98:	2000540c 	.word	0x2000540c
 8004d9c:	0801005c 	.word	0x0801005c
 8004da0:	08010078 	.word	0x08010078
 8004da4:	080100a8 	.word	0x080100a8
 8004da8:	080100d8 	.word	0x080100d8

08004dac <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	3303      	adds	r3, #3
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	e011      	b.n	8004df2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	4413      	add	r3, r2
 8004dea:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3301      	adds	r3, #1
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	885b      	ldrh	r3, [r3, #2]
 8004df6:	461a      	mov	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	dbe7      	blt.n	8004dce <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004dfe:	bf00      	nop
 8004e00:	bf00      	nop
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004e12:	2300      	movs	r3, #0
 8004e14:	80fb      	strh	r3, [r7, #6]
 8004e16:	e009      	b.n	8004e2c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004e18:	88fb      	ldrh	r3, [r7, #6]
 8004e1a:	4a08      	ldr	r2, [pc, #32]	; (8004e3c <memp_init+0x30>)
 8004e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff ffc3 	bl	8004dac <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	80fb      	strh	r3, [r7, #6]
 8004e2c:	88fb      	ldrh	r3, [r7, #6]
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d9f2      	bls.n	8004e18 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004e32:	bf00      	nop
 8004e34:	bf00      	nop
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	080128b4 	.word	0x080128b4

08004e40 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d012      	beq.n	8004e7c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	6812      	ldr	r2, [r2, #0]
 8004e5e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d006      	beq.n	8004e78 <do_memp_malloc_pool+0x38>
 8004e6a:	4b07      	ldr	r3, [pc, #28]	; (8004e88 <do_memp_malloc_pool+0x48>)
 8004e6c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004e70:	4906      	ldr	r1, [pc, #24]	; (8004e8c <do_memp_malloc_pool+0x4c>)
 8004e72:	4807      	ldr	r0, [pc, #28]	; (8004e90 <do_memp_malloc_pool+0x50>)
 8004e74:	f009 fdb0 	bl	800e9d8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	e000      	b.n	8004e7e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	080100fc 	.word	0x080100fc
 8004e8c:	0801012c 	.word	0x0801012c
 8004e90:	08010150 	.word	0x08010150

08004e94 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <memp_malloc_pool+0x1c>
 8004ea2:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <memp_malloc_pool+0x38>)
 8004ea4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8004ea8:	4909      	ldr	r1, [pc, #36]	; (8004ed0 <memp_malloc_pool+0x3c>)
 8004eaa:	480a      	ldr	r0, [pc, #40]	; (8004ed4 <memp_malloc_pool+0x40>)
 8004eac:	f009 fd94 	bl	800e9d8 <iprintf>
  if (desc == NULL) {
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <memp_malloc_pool+0x26>
    return NULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	e003      	b.n	8004ec2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff ffc0 	bl	8004e40 <do_memp_malloc_pool>
 8004ec0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	080100fc 	.word	0x080100fc
 8004ed0:	08010178 	.word	0x08010178
 8004ed4:	08010150 	.word	0x08010150

08004ed8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d908      	bls.n	8004efa <memp_malloc+0x22>
 8004ee8:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <memp_malloc+0x3c>)
 8004eea:	f240 1257 	movw	r2, #343	; 0x157
 8004eee:	490a      	ldr	r1, [pc, #40]	; (8004f18 <memp_malloc+0x40>)
 8004ef0:	480a      	ldr	r0, [pc, #40]	; (8004f1c <memp_malloc+0x44>)
 8004ef2:	f009 fd71 	bl	800e9d8 <iprintf>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e008      	b.n	8004f0c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004efa:	79fb      	ldrb	r3, [r7, #7]
 8004efc:	4a08      	ldr	r2, [pc, #32]	; (8004f20 <memp_malloc+0x48>)
 8004efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff ff9c 	bl	8004e40 <do_memp_malloc_pool>
 8004f08:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	080100fc 	.word	0x080100fc
 8004f18:	0801018c 	.word	0x0801018c
 8004f1c:	08010150 	.word	0x08010150
 8004f20:	080128b4 	.word	0x080128b4

08004f24 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	f003 0303 	and.w	r3, r3, #3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d006      	beq.n	8004f46 <do_memp_free_pool+0x22>
 8004f38:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <do_memp_free_pool+0x40>)
 8004f3a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8004f3e:	490a      	ldr	r1, [pc, #40]	; (8004f68 <do_memp_free_pool+0x44>)
 8004f40:	480a      	ldr	r0, [pc, #40]	; (8004f6c <do_memp_free_pool+0x48>)
 8004f42:	f009 fd49 	bl	800e9d8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004f5c:	bf00      	nop
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	080100fc 	.word	0x080100fc
 8004f68:	080101ac 	.word	0x080101ac
 8004f6c:	08010150 	.word	0x08010150

08004f70 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d106      	bne.n	8004f8e <memp_free_pool+0x1e>
 8004f80:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <memp_free_pool+0x3c>)
 8004f82:	f240 1295 	movw	r2, #405	; 0x195
 8004f86:	490a      	ldr	r1, [pc, #40]	; (8004fb0 <memp_free_pool+0x40>)
 8004f88:	480a      	ldr	r0, [pc, #40]	; (8004fb4 <memp_free_pool+0x44>)
 8004f8a:	f009 fd25 	bl	800e9d8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d007      	beq.n	8004fa4 <memp_free_pool+0x34>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d004      	beq.n	8004fa4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8004f9a:	6839      	ldr	r1, [r7, #0]
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff ffc1 	bl	8004f24 <do_memp_free_pool>
 8004fa2:	e000      	b.n	8004fa6 <memp_free_pool+0x36>
    return;
 8004fa4:	bf00      	nop
}
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	080100fc 	.word	0x080100fc
 8004fb0:	08010178 	.word	0x08010178
 8004fb4:	08010150 	.word	0x08010150

08004fb8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	6039      	str	r1, [r7, #0]
 8004fc2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d907      	bls.n	8004fda <memp_free+0x22>
 8004fca:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <memp_free+0x44>)
 8004fcc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004fd0:	490b      	ldr	r1, [pc, #44]	; (8005000 <memp_free+0x48>)
 8004fd2:	480c      	ldr	r0, [pc, #48]	; (8005004 <memp_free+0x4c>)
 8004fd4:	f009 fd00 	bl	800e9d8 <iprintf>
 8004fd8:	e00c      	b.n	8004ff4 <memp_free+0x3c>

  if (mem == NULL) {
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d008      	beq.n	8004ff2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	4a09      	ldr	r2, [pc, #36]	; (8005008 <memp_free+0x50>)
 8004fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe8:	6839      	ldr	r1, [r7, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff ff9a 	bl	8004f24 <do_memp_free_pool>
 8004ff0:	e000      	b.n	8004ff4 <memp_free+0x3c>
    return;
 8004ff2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	080100fc 	.word	0x080100fc
 8005000:	080101cc 	.word	0x080101cc
 8005004:	08010150 	.word	0x08010150
 8005008:	080128b4 	.word	0x080128b4

0800500c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005010:	bf00      	nop
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
	...

0800501c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d108      	bne.n	8005042 <netif_add+0x26>
 8005030:	4b57      	ldr	r3, [pc, #348]	; (8005190 <netif_add+0x174>)
 8005032:	f240 1227 	movw	r2, #295	; 0x127
 8005036:	4957      	ldr	r1, [pc, #348]	; (8005194 <netif_add+0x178>)
 8005038:	4857      	ldr	r0, [pc, #348]	; (8005198 <netif_add+0x17c>)
 800503a:	f009 fccd 	bl	800e9d8 <iprintf>
 800503e:	2300      	movs	r3, #0
 8005040:	e0a2      	b.n	8005188 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	2b00      	cmp	r3, #0
 8005046:	d108      	bne.n	800505a <netif_add+0x3e>
 8005048:	4b51      	ldr	r3, [pc, #324]	; (8005190 <netif_add+0x174>)
 800504a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800504e:	4953      	ldr	r1, [pc, #332]	; (800519c <netif_add+0x180>)
 8005050:	4851      	ldr	r0, [pc, #324]	; (8005198 <netif_add+0x17c>)
 8005052:	f009 fcc1 	bl	800e9d8 <iprintf>
 8005056:	2300      	movs	r3, #0
 8005058:	e096      	b.n	8005188 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005060:	4b4f      	ldr	r3, [pc, #316]	; (80051a0 <netif_add+0x184>)
 8005062:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800506a:	4b4d      	ldr	r3, [pc, #308]	; (80051a0 <netif_add+0x184>)
 800506c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005074:	4b4a      	ldr	r3, [pc, #296]	; (80051a0 <netif_add+0x184>)
 8005076:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4a45      	ldr	r2, [pc, #276]	; (80051a4 <netif_add+0x188>)
 800508e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a3a      	ldr	r2, [r7, #32]
 80050a8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80050aa:	4b3f      	ldr	r3, [pc, #252]	; (80051a8 <netif_add+0x18c>)
 80050ac:	781a      	ldrb	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050b8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 f913 	bl	80052ec <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	4798      	blx	r3
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <netif_add+0xba>
    return NULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	e058      	b.n	8005188 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050dc:	2bff      	cmp	r3, #255	; 0xff
 80050de:	d103      	bne.n	80050e8 <netif_add+0xcc>
        netif->num = 0;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80050ec:	4b2f      	ldr	r3, [pc, #188]	; (80051ac <netif_add+0x190>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	e02b      	b.n	800514c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d106      	bne.n	800510a <netif_add+0xee>
 80050fc:	4b24      	ldr	r3, [pc, #144]	; (8005190 <netif_add+0x174>)
 80050fe:	f240 128b 	movw	r2, #395	; 0x18b
 8005102:	492b      	ldr	r1, [pc, #172]	; (80051b0 <netif_add+0x194>)
 8005104:	4824      	ldr	r0, [pc, #144]	; (8005198 <netif_add+0x17c>)
 8005106:	f009 fc67 	bl	800e9d8 <iprintf>
        num_netifs++;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	3301      	adds	r3, #1
 800510e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	2bff      	cmp	r3, #255	; 0xff
 8005114:	dd06      	ble.n	8005124 <netif_add+0x108>
 8005116:	4b1e      	ldr	r3, [pc, #120]	; (8005190 <netif_add+0x174>)
 8005118:	f240 128d 	movw	r2, #397	; 0x18d
 800511c:	4925      	ldr	r1, [pc, #148]	; (80051b4 <netif_add+0x198>)
 800511e:	481e      	ldr	r0, [pc, #120]	; (8005198 <netif_add+0x17c>)
 8005120:	f009 fc5a 	bl	800e9d8 <iprintf>
        if (netif2->num == netif->num) {
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005130:	429a      	cmp	r2, r3
 8005132:	d108      	bne.n	8005146 <netif_add+0x12a>
          netif->num++;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800513a:	3301      	adds	r3, #1
 800513c:	b2da      	uxtb	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005144:	e005      	b.n	8005152 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1d0      	bne.n	80050f4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1be      	bne.n	80050d6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800515e:	2bfe      	cmp	r3, #254	; 0xfe
 8005160:	d103      	bne.n	800516a <netif_add+0x14e>
    netif_num = 0;
 8005162:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <netif_add+0x18c>)
 8005164:	2200      	movs	r2, #0
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	e006      	b.n	8005178 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005170:	3301      	adds	r3, #1
 8005172:	b2da      	uxtb	r2, r3
 8005174:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <netif_add+0x18c>)
 8005176:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005178:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <netif_add+0x190>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005180:	4a0a      	ldr	r2, [pc, #40]	; (80051ac <netif_add+0x190>)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005186:	68fb      	ldr	r3, [r7, #12]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	080101e8 	.word	0x080101e8
 8005194:	0801027c 	.word	0x0801027c
 8005198:	08010238 	.word	0x08010238
 800519c:	08010298 	.word	0x08010298
 80051a0:	08012918 	.word	0x08012918
 80051a4:	080055c7 	.word	0x080055c7
 80051a8:	20008308 	.word	0x20008308
 80051ac:	20008300 	.word	0x20008300
 80051b0:	080102bc 	.word	0x080102bc
 80051b4:	080102d0 	.word	0x080102d0

080051b8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80051c2:	6839      	ldr	r1, [r7, #0]
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f002 fbe5 	bl	8007994 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80051ca:	6839      	ldr	r1, [r7, #0]
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f007 f819 	bl	800c204 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80051d2:	bf00      	nop
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
	...

080051dc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <netif_do_set_ipaddr+0x20>
 80051ee:	4b1d      	ldr	r3, [pc, #116]	; (8005264 <netif_do_set_ipaddr+0x88>)
 80051f0:	f240 12cb 	movw	r2, #459	; 0x1cb
 80051f4:	491c      	ldr	r1, [pc, #112]	; (8005268 <netif_do_set_ipaddr+0x8c>)
 80051f6:	481d      	ldr	r0, [pc, #116]	; (800526c <netif_do_set_ipaddr+0x90>)
 80051f8:	f009 fbee 	bl	800e9d8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <netif_do_set_ipaddr+0x34>
 8005202:	4b18      	ldr	r3, [pc, #96]	; (8005264 <netif_do_set_ipaddr+0x88>)
 8005204:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005208:	4917      	ldr	r1, [pc, #92]	; (8005268 <netif_do_set_ipaddr+0x8c>)
 800520a:	4818      	ldr	r0, [pc, #96]	; (800526c <netif_do_set_ipaddr+0x90>)
 800520c:	f009 fbe4 	bl	800e9d8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	3304      	adds	r3, #4
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d01c      	beq.n	8005258 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3304      	adds	r3, #4
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800522e:	f107 0314 	add.w	r3, r7, #20
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7ff ffbf 	bl	80051b8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <netif_do_set_ipaddr+0x6a>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	e000      	b.n	8005248 <netif_do_set_ipaddr+0x6c>
 8005246:	2300      	movs	r3, #0
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800524c:	2101      	movs	r1, #1
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 f8d2 	bl	80053f8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	080101e8 	.word	0x080101e8
 8005268:	08010300 	.word	0x08010300
 800526c:	08010238 	.word	0x08010238

08005270 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3308      	adds	r3, #8
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d00a      	beq.n	80052a0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <netif_do_set_netmask+0x26>
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	e000      	b.n	8005298 <netif_do_set_netmask+0x28>
 8005296:	2300      	movs	r3, #0
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800529c:	2301      	movs	r3, #1
 800529e:	e000      	b.n	80052a2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b085      	sub	sp, #20
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	330c      	adds	r3, #12
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d00a      	beq.n	80052de <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <netif_do_set_gw+0x26>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	e000      	b.n	80052d6 <netif_do_set_gw+0x28>
 80052d4:	2300      	movs	r3, #0
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80052fe:	2300      	movs	r3, #0
 8005300:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005308:	4b1c      	ldr	r3, [pc, #112]	; (800537c <netif_set_addr+0x90>)
 800530a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005312:	4b1a      	ldr	r3, [pc, #104]	; (800537c <netif_set_addr+0x90>)
 8005314:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800531c:	4b17      	ldr	r3, [pc, #92]	; (800537c <netif_set_addr+0x90>)
 800531e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <netif_set_addr+0x42>
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <netif_set_addr+0x46>
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <netif_set_addr+0x48>
 8005332:	2300      	movs	r3, #0
 8005334:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d006      	beq.n	800534a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800533c:	f107 0310 	add.w	r3, r7, #16
 8005340:	461a      	mov	r2, r3
 8005342:	68b9      	ldr	r1, [r7, #8]
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f7ff ff49 	bl	80051dc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f7ff ff8e 	bl	8005270 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	6839      	ldr	r1, [r7, #0]
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f7ff ffa8 	bl	80052ae <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d106      	bne.n	8005372 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005364:	f107 0310 	add.w	r3, r7, #16
 8005368:	461a      	mov	r2, r3
 800536a:	68b9      	ldr	r1, [r7, #8]
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff ff35 	bl	80051dc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005372:	bf00      	nop
 8005374:	3720      	adds	r7, #32
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	08012918 	.word	0x08012918

08005380 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005388:	4a04      	ldr	r2, [pc, #16]	; (800539c <netif_set_default+0x1c>)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	20008304 	.word	0x20008304

080053a0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d107      	bne.n	80053be <netif_set_up+0x1e>
 80053ae:	4b0f      	ldr	r3, [pc, #60]	; (80053ec <netif_set_up+0x4c>)
 80053b0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80053b4:	490e      	ldr	r1, [pc, #56]	; (80053f0 <netif_set_up+0x50>)
 80053b6:	480f      	ldr	r0, [pc, #60]	; (80053f4 <netif_set_up+0x54>)
 80053b8:	f009 fb0e 	bl	800e9d8 <iprintf>
 80053bc:	e013      	b.n	80053e6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10c      	bne.n	80053e6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80053d2:	f043 0301 	orr.w	r3, r3, #1
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80053de:	2103      	movs	r1, #3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f809 	bl	80053f8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	080101e8 	.word	0x080101e8
 80053f0:	08010370 	.word	0x08010370
 80053f4:	08010238 	.word	0x08010238

080053f8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d106      	bne.n	8005418 <netif_issue_reports+0x20>
 800540a:	4b18      	ldr	r3, [pc, #96]	; (800546c <netif_issue_reports+0x74>)
 800540c:	f240 326d 	movw	r2, #877	; 0x36d
 8005410:	4917      	ldr	r1, [pc, #92]	; (8005470 <netif_issue_reports+0x78>)
 8005412:	4818      	ldr	r0, [pc, #96]	; (8005474 <netif_issue_reports+0x7c>)
 8005414:	f009 fae0 	bl	800e9d8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800541e:	f003 0304 	and.w	r3, r3, #4
 8005422:	2b00      	cmp	r3, #0
 8005424:	d01e      	beq.n	8005464 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800542c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005430:	2b00      	cmp	r3, #0
 8005432:	d017      	beq.n	8005464 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d013      	beq.n	8005466 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	3304      	adds	r3, #4
 8005442:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00e      	beq.n	8005466 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d007      	beq.n	8005466 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3304      	adds	r3, #4
 800545a:	4619      	mov	r1, r3
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f007 fe3b 	bl	800d0d8 <etharp_request>
 8005462:	e000      	b.n	8005466 <netif_issue_reports+0x6e>
    return;
 8005464:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	080101e8 	.word	0x080101e8
 8005470:	0801038c 	.word	0x0801038c
 8005474:	08010238 	.word	0x08010238

08005478 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d107      	bne.n	8005496 <netif_set_down+0x1e>
 8005486:	4b12      	ldr	r3, [pc, #72]	; (80054d0 <netif_set_down+0x58>)
 8005488:	f240 329b 	movw	r2, #923	; 0x39b
 800548c:	4911      	ldr	r1, [pc, #68]	; (80054d4 <netif_set_down+0x5c>)
 800548e:	4812      	ldr	r0, [pc, #72]	; (80054d8 <netif_set_down+0x60>)
 8005490:	f009 faa2 	bl	800e9d8 <iprintf>
 8005494:	e019      	b.n	80054ca <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d012      	beq.n	80054ca <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80054aa:	f023 0301 	bic.w	r3, r3, #1
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f007 f9c5 	bl	800c854 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	080101e8 	.word	0x080101e8
 80054d4:	080103b0 	.word	0x080103b0
 80054d8:	08010238 	.word	0x08010238

080054dc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d107      	bne.n	80054fa <netif_set_link_up+0x1e>
 80054ea:	4b13      	ldr	r3, [pc, #76]	; (8005538 <netif_set_link_up+0x5c>)
 80054ec:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80054f0:	4912      	ldr	r1, [pc, #72]	; (800553c <netif_set_link_up+0x60>)
 80054f2:	4813      	ldr	r0, [pc, #76]	; (8005540 <netif_set_link_up+0x64>)
 80054f4:	f009 fa70 	bl	800e9d8 <iprintf>
 80054f8:	e01b      	b.n	8005532 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d114      	bne.n	8005532 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800550e:	f043 0304 	orr.w	r3, r3, #4
 8005512:	b2da      	uxtb	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800551a:	2103      	movs	r1, #3
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7ff ff6b 	bl	80053f8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <netif_set_link_up+0x56>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	080101e8 	.word	0x080101e8
 800553c:	080103d0 	.word	0x080103d0
 8005540:	08010238 	.word	0x08010238

08005544 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d107      	bne.n	8005562 <netif_set_link_down+0x1e>
 8005552:	4b11      	ldr	r3, [pc, #68]	; (8005598 <netif_set_link_down+0x54>)
 8005554:	f240 4206 	movw	r2, #1030	; 0x406
 8005558:	4910      	ldr	r1, [pc, #64]	; (800559c <netif_set_link_down+0x58>)
 800555a:	4811      	ldr	r0, [pc, #68]	; (80055a0 <netif_set_link_down+0x5c>)
 800555c:	f009 fa3c 	bl	800e9d8 <iprintf>
 8005560:	e017      	b.n	8005592 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d010      	beq.n	8005592 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005576:	f023 0304 	bic.w	r3, r3, #4
 800557a:	b2da      	uxtb	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <netif_set_link_down+0x4e>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	080101e8 	.word	0x080101e8
 800559c:	080103f4 	.word	0x080103f4
 80055a0:	08010238 	.word	0x08010238

080055a4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	61da      	str	r2, [r3, #28]
  }
}
 80055ba:	bf00      	nop
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b085      	sub	sp, #20
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80055d2:	f06f 030b 	mvn.w	r3, #11
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
	...

080055e4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d013      	beq.n	800561c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80055f4:	4b0d      	ldr	r3, [pc, #52]	; (800562c <netif_get_by_index+0x48>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	e00c      	b.n	8005616 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005602:	3301      	adds	r3, #1
 8005604:	b2db      	uxtb	r3, r3
 8005606:	79fa      	ldrb	r2, [r7, #7]
 8005608:	429a      	cmp	r2, r3
 800560a:	d101      	bne.n	8005610 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	e006      	b.n	800561e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	60fb      	str	r3, [r7, #12]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1ef      	bne.n	80055fc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	20008300 	.word	0x20008300

08005630 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005636:	4b0c      	ldr	r3, [pc, #48]	; (8005668 <pbuf_free_ooseq+0x38>)
 8005638:	2200      	movs	r2, #0
 800563a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800563c:	4b0b      	ldr	r3, [pc, #44]	; (800566c <pbuf_free_ooseq+0x3c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	607b      	str	r3, [r7, #4]
 8005642:	e00a      	b.n	800565a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f002 f9df 	bl	8007a10 <tcp_free_ooseq>
      return;
 8005652:	e005      	b.n	8005660 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	607b      	str	r3, [r7, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1f1      	bne.n	8005644 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20008309 	.word	0x20008309
 800566c:	20008318 	.word	0x20008318

08005670 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005674:	4b03      	ldr	r3, [pc, #12]	; (8005684 <pbuf_pool_is_empty+0x14>)
 8005676:	2201      	movs	r2, #1
 8005678:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800567a:	bf00      	nop
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	20008309 	.word	0x20008309

08005688 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	4611      	mov	r1, r2
 8005694:	461a      	mov	r2, r3
 8005696:	460b      	mov	r3, r1
 8005698:	80fb      	strh	r3, [r7, #6]
 800569a:	4613      	mov	r3, r2
 800569c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	88fa      	ldrh	r2, [r7, #6]
 80056ae:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	88ba      	ldrh	r2, [r7, #4]
 80056b4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80056b6:	8b3b      	ldrh	r3, [r7, #24]
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	7f3a      	ldrb	r2, [r7, #28]
 80056c2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2201      	movs	r2, #1
 80056c8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	73da      	strb	r2, [r3, #15]
}
 80056d0:	bf00      	nop
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08c      	sub	sp, #48	; 0x30
 80056e0:	af02      	add	r7, sp, #8
 80056e2:	4603      	mov	r3, r0
 80056e4:	71fb      	strb	r3, [r7, #7]
 80056e6:	460b      	mov	r3, r1
 80056e8:	80bb      	strh	r3, [r7, #4]
 80056ea:	4613      	mov	r3, r2
 80056ec:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80056ee:	79fb      	ldrb	r3, [r7, #7]
 80056f0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80056f2:	887b      	ldrh	r3, [r7, #2]
 80056f4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80056f8:	d07f      	beq.n	80057fa <pbuf_alloc+0x11e>
 80056fa:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80056fe:	f300 80c8 	bgt.w	8005892 <pbuf_alloc+0x1b6>
 8005702:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005706:	d010      	beq.n	800572a <pbuf_alloc+0x4e>
 8005708:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800570c:	f300 80c1 	bgt.w	8005892 <pbuf_alloc+0x1b6>
 8005710:	2b01      	cmp	r3, #1
 8005712:	d002      	beq.n	800571a <pbuf_alloc+0x3e>
 8005714:	2b41      	cmp	r3, #65	; 0x41
 8005716:	f040 80bc 	bne.w	8005892 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800571a:	887a      	ldrh	r2, [r7, #2]
 800571c:	88bb      	ldrh	r3, [r7, #4]
 800571e:	4619      	mov	r1, r3
 8005720:	2000      	movs	r0, #0
 8005722:	f000 f8d1 	bl	80058c8 <pbuf_alloc_reference>
 8005726:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005728:	e0bd      	b.n	80058a6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800572a:	2300      	movs	r3, #0
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800572e:	2300      	movs	r3, #0
 8005730:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005732:	88bb      	ldrh	r3, [r7, #4]
 8005734:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005736:	2008      	movs	r0, #8
 8005738:	f7ff fbce 	bl	8004ed8 <memp_malloc>
 800573c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d109      	bne.n	8005758 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005744:	f7ff ff94 	bl	8005670 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <pbuf_alloc+0x78>
            pbuf_free(p);
 800574e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005750:	f000 faa8 	bl	8005ca4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005754:	2300      	movs	r3, #0
 8005756:	e0a7      	b.n	80058a8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005758:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800575a:	3303      	adds	r3, #3
 800575c:	b29b      	uxth	r3, r3
 800575e:	f023 0303 	bic.w	r3, r3, #3
 8005762:	b29b      	uxth	r3, r3
 8005764:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005768:	b29b      	uxth	r3, r3
 800576a:	8b7a      	ldrh	r2, [r7, #26]
 800576c:	4293      	cmp	r3, r2
 800576e:	bf28      	it	cs
 8005770:	4613      	movcs	r3, r2
 8005772:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005774:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005776:	3310      	adds	r3, #16
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4413      	add	r3, r2
 800577c:	3303      	adds	r3, #3
 800577e:	f023 0303 	bic.w	r3, r3, #3
 8005782:	4618      	mov	r0, r3
 8005784:	89f9      	ldrh	r1, [r7, #14]
 8005786:	8b7a      	ldrh	r2, [r7, #26]
 8005788:	2300      	movs	r3, #0
 800578a:	9301      	str	r3, [sp, #4]
 800578c:	887b      	ldrh	r3, [r7, #2]
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	460b      	mov	r3, r1
 8005792:	4601      	mov	r1, r0
 8005794:	6938      	ldr	r0, [r7, #16]
 8005796:	f7ff ff77 	bl	8005688 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d006      	beq.n	80057b4 <pbuf_alloc+0xd8>
 80057a6:	4b42      	ldr	r3, [pc, #264]	; (80058b0 <pbuf_alloc+0x1d4>)
 80057a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057ac:	4941      	ldr	r1, [pc, #260]	; (80058b4 <pbuf_alloc+0x1d8>)
 80057ae:	4842      	ldr	r0, [pc, #264]	; (80058b8 <pbuf_alloc+0x1dc>)
 80057b0:	f009 f912 	bl	800e9d8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80057b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80057b6:	3303      	adds	r3, #3
 80057b8:	f023 0303 	bic.w	r3, r3, #3
 80057bc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80057c0:	d106      	bne.n	80057d0 <pbuf_alloc+0xf4>
 80057c2:	4b3b      	ldr	r3, [pc, #236]	; (80058b0 <pbuf_alloc+0x1d4>)
 80057c4:	f44f 7281 	mov.w	r2, #258	; 0x102
 80057c8:	493c      	ldr	r1, [pc, #240]	; (80058bc <pbuf_alloc+0x1e0>)
 80057ca:	483b      	ldr	r0, [pc, #236]	; (80058b8 <pbuf_alloc+0x1dc>)
 80057cc:	f009 f904 	bl	800e9d8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d102      	bne.n	80057dc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
 80057da:	e002      	b.n	80057e2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80057e6:	8b7a      	ldrh	r2, [r7, #26]
 80057e8:	89fb      	ldrh	r3, [r7, #14]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80057ee:	2300      	movs	r3, #0
 80057f0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80057f2:	8b7b      	ldrh	r3, [r7, #26]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d19e      	bne.n	8005736 <pbuf_alloc+0x5a>
      break;
 80057f8:	e055      	b.n	80058a6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80057fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80057fc:	3303      	adds	r3, #3
 80057fe:	b29b      	uxth	r3, r3
 8005800:	f023 0303 	bic.w	r3, r3, #3
 8005804:	b29a      	uxth	r2, r3
 8005806:	88bb      	ldrh	r3, [r7, #4]
 8005808:	3303      	adds	r3, #3
 800580a:	b29b      	uxth	r3, r3
 800580c:	f023 0303 	bic.w	r3, r3, #3
 8005810:	b29b      	uxth	r3, r3
 8005812:	4413      	add	r3, r2
 8005814:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005816:	8b3b      	ldrh	r3, [r7, #24]
 8005818:	3310      	adds	r3, #16
 800581a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800581c:	8b3a      	ldrh	r2, [r7, #24]
 800581e:	88bb      	ldrh	r3, [r7, #4]
 8005820:	3303      	adds	r3, #3
 8005822:	f023 0303 	bic.w	r3, r3, #3
 8005826:	429a      	cmp	r2, r3
 8005828:	d306      	bcc.n	8005838 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800582a:	8afa      	ldrh	r2, [r7, #22]
 800582c:	88bb      	ldrh	r3, [r7, #4]
 800582e:	3303      	adds	r3, #3
 8005830:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005834:	429a      	cmp	r2, r3
 8005836:	d201      	bcs.n	800583c <pbuf_alloc+0x160>
        return NULL;
 8005838:	2300      	movs	r3, #0
 800583a:	e035      	b.n	80058a8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800583c:	8afb      	ldrh	r3, [r7, #22]
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff f9ba 	bl	8004bb8 <mem_malloc>
 8005844:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <pbuf_alloc+0x174>
        return NULL;
 800584c:	2300      	movs	r3, #0
 800584e:	e02b      	b.n	80058a8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005850:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005852:	3310      	adds	r3, #16
 8005854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005856:	4413      	add	r3, r2
 8005858:	3303      	adds	r3, #3
 800585a:	f023 0303 	bic.w	r3, r3, #3
 800585e:	4618      	mov	r0, r3
 8005860:	88b9      	ldrh	r1, [r7, #4]
 8005862:	88ba      	ldrh	r2, [r7, #4]
 8005864:	2300      	movs	r3, #0
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	887b      	ldrh	r3, [r7, #2]
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	460b      	mov	r3, r1
 800586e:	4601      	mov	r1, r0
 8005870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005872:	f7ff ff09 	bl	8005688 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d010      	beq.n	80058a4 <pbuf_alloc+0x1c8>
 8005882:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <pbuf_alloc+0x1d4>)
 8005884:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005888:	490d      	ldr	r1, [pc, #52]	; (80058c0 <pbuf_alloc+0x1e4>)
 800588a:	480b      	ldr	r0, [pc, #44]	; (80058b8 <pbuf_alloc+0x1dc>)
 800588c:	f009 f8a4 	bl	800e9d8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005890:	e008      	b.n	80058a4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005892:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <pbuf_alloc+0x1d4>)
 8005894:	f240 1227 	movw	r2, #295	; 0x127
 8005898:	490a      	ldr	r1, [pc, #40]	; (80058c4 <pbuf_alloc+0x1e8>)
 800589a:	4807      	ldr	r0, [pc, #28]	; (80058b8 <pbuf_alloc+0x1dc>)
 800589c:	f009 f89c 	bl	800e9d8 <iprintf>
      return NULL;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e001      	b.n	80058a8 <pbuf_alloc+0x1cc>
      break;
 80058a4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3728      	adds	r7, #40	; 0x28
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	08010418 	.word	0x08010418
 80058b4:	08010448 	.word	0x08010448
 80058b8:	08010478 	.word	0x08010478
 80058bc:	080104a0 	.word	0x080104a0
 80058c0:	080104d4 	.word	0x080104d4
 80058c4:	08010500 	.word	0x08010500

080058c8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af02      	add	r7, sp, #8
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	807b      	strh	r3, [r7, #2]
 80058d4:	4613      	mov	r3, r2
 80058d6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80058d8:	883b      	ldrh	r3, [r7, #0]
 80058da:	2b41      	cmp	r3, #65	; 0x41
 80058dc:	d009      	beq.n	80058f2 <pbuf_alloc_reference+0x2a>
 80058de:	883b      	ldrh	r3, [r7, #0]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d006      	beq.n	80058f2 <pbuf_alloc_reference+0x2a>
 80058e4:	4b0f      	ldr	r3, [pc, #60]	; (8005924 <pbuf_alloc_reference+0x5c>)
 80058e6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80058ea:	490f      	ldr	r1, [pc, #60]	; (8005928 <pbuf_alloc_reference+0x60>)
 80058ec:	480f      	ldr	r0, [pc, #60]	; (800592c <pbuf_alloc_reference+0x64>)
 80058ee:	f009 f873 	bl	800e9d8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80058f2:	2007      	movs	r0, #7
 80058f4:	f7ff faf0 	bl	8004ed8 <memp_malloc>
 80058f8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005900:	2300      	movs	r3, #0
 8005902:	e00b      	b.n	800591c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005904:	8879      	ldrh	r1, [r7, #2]
 8005906:	887a      	ldrh	r2, [r7, #2]
 8005908:	2300      	movs	r3, #0
 800590a:	9301      	str	r3, [sp, #4]
 800590c:	883b      	ldrh	r3, [r7, #0]
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	460b      	mov	r3, r1
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f7ff feb7 	bl	8005688 <pbuf_init_alloced_pbuf>
  return p;
 800591a:	68fb      	ldr	r3, [r7, #12]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	08010418 	.word	0x08010418
 8005928:	0801051c 	.word	0x0801051c
 800592c:	08010478 	.word	0x08010478

08005930 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af02      	add	r7, sp, #8
 8005936:	607b      	str	r3, [r7, #4]
 8005938:	4603      	mov	r3, r0
 800593a:	73fb      	strb	r3, [r7, #15]
 800593c:	460b      	mov	r3, r1
 800593e:	81bb      	strh	r3, [r7, #12]
 8005940:	4613      	mov	r3, r2
 8005942:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005944:	7bfb      	ldrb	r3, [r7, #15]
 8005946:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005948:	8a7b      	ldrh	r3, [r7, #18]
 800594a:	3303      	adds	r3, #3
 800594c:	f023 0203 	bic.w	r2, r3, #3
 8005950:	89bb      	ldrh	r3, [r7, #12]
 8005952:	441a      	add	r2, r3
 8005954:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005956:	429a      	cmp	r2, r3
 8005958:	d901      	bls.n	800595e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800595a:	2300      	movs	r3, #0
 800595c:	e018      	b.n	8005990 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d007      	beq.n	8005974 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005964:	8a7b      	ldrh	r3, [r7, #18]
 8005966:	3303      	adds	r3, #3
 8005968:	f023 0303 	bic.w	r3, r3, #3
 800596c:	6a3a      	ldr	r2, [r7, #32]
 800596e:	4413      	add	r3, r2
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	e001      	b.n	8005978 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005974:	2300      	movs	r3, #0
 8005976:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	89b9      	ldrh	r1, [r7, #12]
 800597c:	89ba      	ldrh	r2, [r7, #12]
 800597e:	2302      	movs	r3, #2
 8005980:	9301      	str	r3, [sp, #4]
 8005982:	897b      	ldrh	r3, [r7, #10]
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	460b      	mov	r3, r1
 8005988:	6979      	ldr	r1, [r7, #20]
 800598a:	f7ff fe7d 	bl	8005688 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800598e:	687b      	ldr	r3, [r7, #4]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d106      	bne.n	80059b8 <pbuf_realloc+0x20>
 80059aa:	4b3a      	ldr	r3, [pc, #232]	; (8005a94 <pbuf_realloc+0xfc>)
 80059ac:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80059b0:	4939      	ldr	r1, [pc, #228]	; (8005a98 <pbuf_realloc+0x100>)
 80059b2:	483a      	ldr	r0, [pc, #232]	; (8005a9c <pbuf_realloc+0x104>)
 80059b4:	f009 f810 	bl	800e9d8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	891b      	ldrh	r3, [r3, #8]
 80059bc:	887a      	ldrh	r2, [r7, #2]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d263      	bcs.n	8005a8a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	891a      	ldrh	r2, [r3, #8]
 80059c6:	887b      	ldrh	r3, [r7, #2]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80059cc:	887b      	ldrh	r3, [r7, #2]
 80059ce:	817b      	strh	r3, [r7, #10]
  q = p;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80059d4:	e018      	b.n	8005a08 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	895b      	ldrh	r3, [r3, #10]
 80059da:	897a      	ldrh	r2, [r7, #10]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	891a      	ldrh	r2, [r3, #8]
 80059e4:	893b      	ldrh	r3, [r7, #8]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <pbuf_realloc+0x70>
 80059fa:	4b26      	ldr	r3, [pc, #152]	; (8005a94 <pbuf_realloc+0xfc>)
 80059fc:	f240 12af 	movw	r2, #431	; 0x1af
 8005a00:	4927      	ldr	r1, [pc, #156]	; (8005aa0 <pbuf_realloc+0x108>)
 8005a02:	4826      	ldr	r0, [pc, #152]	; (8005a9c <pbuf_realloc+0x104>)
 8005a04:	f008 ffe8 	bl	800e9d8 <iprintf>
  while (rem_len > q->len) {
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	895b      	ldrh	r3, [r3, #10]
 8005a0c:	897a      	ldrh	r2, [r7, #10]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d8e1      	bhi.n	80059d6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	7b1b      	ldrb	r3, [r3, #12]
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d121      	bne.n	8005a62 <pbuf_realloc+0xca>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	895b      	ldrh	r3, [r3, #10]
 8005a22:	897a      	ldrh	r2, [r7, #10]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d01c      	beq.n	8005a62 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	7b5b      	ldrb	r3, [r3, #13]
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d116      	bne.n	8005a62 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	897b      	ldrh	r3, [r7, #10]
 8005a40:	4413      	add	r3, r2
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	4619      	mov	r1, r3
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f7fe ffba 	bl	80049c0 <mem_trim>
 8005a4c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d106      	bne.n	8005a62 <pbuf_realloc+0xca>
 8005a54:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <pbuf_realloc+0xfc>)
 8005a56:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005a5a:	4912      	ldr	r1, [pc, #72]	; (8005aa4 <pbuf_realloc+0x10c>)
 8005a5c:	480f      	ldr	r0, [pc, #60]	; (8005a9c <pbuf_realloc+0x104>)
 8005a5e:	f008 ffbb 	bl	800e9d8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	897a      	ldrh	r2, [r7, #10]
 8005a66:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	895a      	ldrh	r2, [r3, #10]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d004      	beq.n	8005a82 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 f911 	bl	8005ca4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	e000      	b.n	8005a8c <pbuf_realloc+0xf4>
    return;
 8005a8a:	bf00      	nop

}
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	08010418 	.word	0x08010418
 8005a98:	08010530 	.word	0x08010530
 8005a9c:	08010478 	.word	0x08010478
 8005aa0:	08010548 	.word	0x08010548
 8005aa4:	08010560 	.word	0x08010560

08005aa8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d106      	bne.n	8005aca <pbuf_add_header_impl+0x22>
 8005abc:	4b2b      	ldr	r3, [pc, #172]	; (8005b6c <pbuf_add_header_impl+0xc4>)
 8005abe:	f240 12df 	movw	r2, #479	; 0x1df
 8005ac2:	492b      	ldr	r1, [pc, #172]	; (8005b70 <pbuf_add_header_impl+0xc8>)
 8005ac4:	482b      	ldr	r0, [pc, #172]	; (8005b74 <pbuf_add_header_impl+0xcc>)
 8005ac6:	f008 ff87 	bl	800e9d8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <pbuf_add_header_impl+0x30>
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad6:	d301      	bcc.n	8005adc <pbuf_add_header_impl+0x34>
    return 1;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e043      	b.n	8005b64 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <pbuf_add_header_impl+0x3e>
    return 0;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e03e      	b.n	8005b64 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	891a      	ldrh	r2, [r3, #8]
 8005aee:	8a7b      	ldrh	r3, [r7, #18]
 8005af0:	4413      	add	r3, r2
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	8a7a      	ldrh	r2, [r7, #18]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d901      	bls.n	8005afe <pbuf_add_header_impl+0x56>
    return 1;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e032      	b.n	8005b64 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	7b1b      	ldrb	r3, [r3, #12]
 8005b02:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005b04:	8a3b      	ldrh	r3, [r7, #16]
 8005b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00c      	beq.n	8005b28 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	425b      	negs	r3, r3
 8005b16:	4413      	add	r3, r2
 8005b18:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	3310      	adds	r3, #16
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d20d      	bcs.n	8005b40 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e01d      	b.n	8005b64 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d006      	beq.n	8005b3c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	425b      	negs	r3, r3
 8005b36:	4413      	add	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	e001      	b.n	8005b40 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e011      	b.n	8005b64 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	895a      	ldrh	r2, [r3, #10]
 8005b4a:	8a7b      	ldrh	r3, [r7, #18]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	891a      	ldrh	r2, [r3, #8]
 8005b58:	8a7b      	ldrh	r3, [r7, #18]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	811a      	strh	r2, [r3, #8]


  return 0;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	08010418 	.word	0x08010418
 8005b70:	0801057c 	.word	0x0801057c
 8005b74:	08010478 	.word	0x08010478

08005b78 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005b82:	2200      	movs	r2, #0
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7ff ff8e 	bl	8005aa8 <pbuf_add_header_impl>
 8005b8c:	4603      	mov	r3, r0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d106      	bne.n	8005bb6 <pbuf_remove_header+0x1e>
 8005ba8:	4b20      	ldr	r3, [pc, #128]	; (8005c2c <pbuf_remove_header+0x94>)
 8005baa:	f240 224b 	movw	r2, #587	; 0x24b
 8005bae:	4920      	ldr	r1, [pc, #128]	; (8005c30 <pbuf_remove_header+0x98>)
 8005bb0:	4820      	ldr	r0, [pc, #128]	; (8005c34 <pbuf_remove_header+0x9c>)
 8005bb2:	f008 ff11 	bl	800e9d8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <pbuf_remove_header+0x2c>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bc2:	d301      	bcc.n	8005bc8 <pbuf_remove_header+0x30>
    return 1;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e02c      	b.n	8005c22 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <pbuf_remove_header+0x3a>
    return 0;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	e027      	b.n	8005c22 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	895b      	ldrh	r3, [r3, #10]
 8005bda:	89fa      	ldrh	r2, [r7, #14]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d908      	bls.n	8005bf2 <pbuf_remove_header+0x5a>
 8005be0:	4b12      	ldr	r3, [pc, #72]	; (8005c2c <pbuf_remove_header+0x94>)
 8005be2:	f240 2255 	movw	r2, #597	; 0x255
 8005be6:	4914      	ldr	r1, [pc, #80]	; (8005c38 <pbuf_remove_header+0xa0>)
 8005be8:	4812      	ldr	r0, [pc, #72]	; (8005c34 <pbuf_remove_header+0x9c>)
 8005bea:	f008 fef5 	bl	800e9d8 <iprintf>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e017      	b.n	8005c22 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	441a      	add	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	895a      	ldrh	r2, [r3, #10]
 8005c08:	89fb      	ldrh	r3, [r7, #14]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	891a      	ldrh	r2, [r3, #8]
 8005c16:	89fb      	ldrh	r3, [r7, #14]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	08010418 	.word	0x08010418
 8005c30:	0801057c 	.word	0x0801057c
 8005c34:	08010478 	.word	0x08010478
 8005c38:	08010588 	.word	0x08010588

08005c3c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	807b      	strh	r3, [r7, #2]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005c4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	da08      	bge.n	8005c66 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005c54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c58:	425b      	negs	r3, r3
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff ff9b 	bl	8005b98 <pbuf_remove_header>
 8005c62:	4603      	mov	r3, r0
 8005c64:	e007      	b.n	8005c76 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005c66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c6a:	787a      	ldrb	r2, [r7, #1]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7ff ff1a 	bl	8005aa8 <pbuf_add_header_impl>
 8005c74:	4603      	mov	r3, r0
  }
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b082      	sub	sp, #8
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	460b      	mov	r3, r1
 8005c88:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005c8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff ffd2 	bl	8005c3c <pbuf_header_impl>
 8005c98:	4603      	mov	r3, r0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
	...

08005ca4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10b      	bne.n	8005cca <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d106      	bne.n	8005cc6 <pbuf_free+0x22>
 8005cb8:	4b38      	ldr	r3, [pc, #224]	; (8005d9c <pbuf_free+0xf8>)
 8005cba:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005cbe:	4938      	ldr	r1, [pc, #224]	; (8005da0 <pbuf_free+0xfc>)
 8005cc0:	4838      	ldr	r0, [pc, #224]	; (8005da4 <pbuf_free+0x100>)
 8005cc2:	f008 fe89 	bl	800e9d8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e063      	b.n	8005d92 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005cce:	e05c      	b.n	8005d8a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	7b9b      	ldrb	r3, [r3, #14]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d106      	bne.n	8005ce6 <pbuf_free+0x42>
 8005cd8:	4b30      	ldr	r3, [pc, #192]	; (8005d9c <pbuf_free+0xf8>)
 8005cda:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005cde:	4932      	ldr	r1, [pc, #200]	; (8005da8 <pbuf_free+0x104>)
 8005ce0:	4830      	ldr	r0, [pc, #192]	; (8005da4 <pbuf_free+0x100>)
 8005ce2:	f008 fe79 	bl	800e9d8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	7b9b      	ldrb	r3, [r3, #14]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	739a      	strb	r2, [r3, #14]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	7b9b      	ldrb	r3, [r3, #14]
 8005cf6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005cf8:	7dbb      	ldrb	r3, [r7, #22]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d143      	bne.n	8005d86 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	7b1b      	ldrb	r3, [r3, #12]
 8005d08:	f003 030f 	and.w	r3, r3, #15
 8005d0c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	7b5b      	ldrb	r3, [r3, #13]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d011      	beq.n	8005d3e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <pbuf_free+0x90>
 8005d26:	4b1d      	ldr	r3, [pc, #116]	; (8005d9c <pbuf_free+0xf8>)
 8005d28:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005d2c:	491f      	ldr	r1, [pc, #124]	; (8005dac <pbuf_free+0x108>)
 8005d2e:	481d      	ldr	r0, [pc, #116]	; (8005da4 <pbuf_free+0x100>)
 8005d30:	f008 fe52 	bl	800e9d8 <iprintf>
        pc->custom_free_function(p);
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	4798      	blx	r3
 8005d3c:	e01d      	b.n	8005d7a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d104      	bne.n	8005d4e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005d44:	6879      	ldr	r1, [r7, #4]
 8005d46:	2008      	movs	r0, #8
 8005d48:	f7ff f936 	bl	8004fb8 <memp_free>
 8005d4c:	e015      	b.n	8005d7a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d104      	bne.n	8005d5e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	2007      	movs	r0, #7
 8005d58:	f7ff f92e 	bl	8004fb8 <memp_free>
 8005d5c:	e00d      	b.n	8005d7a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d103      	bne.n	8005d6c <pbuf_free+0xc8>
          mem_free(p);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7fe fdc1 	bl	80048ec <mem_free>
 8005d6a:	e006      	b.n	8005d7a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005d6c:	4b0b      	ldr	r3, [pc, #44]	; (8005d9c <pbuf_free+0xf8>)
 8005d6e:	f240 320f 	movw	r2, #783	; 0x30f
 8005d72:	490f      	ldr	r1, [pc, #60]	; (8005db0 <pbuf_free+0x10c>)
 8005d74:	480b      	ldr	r0, [pc, #44]	; (8005da4 <pbuf_free+0x100>)
 8005d76:	f008 fe2f 	bl	800e9d8 <iprintf>
        }
      }
      count++;
 8005d7a:	7dfb      	ldrb	r3, [r7, #23]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	607b      	str	r3, [r7, #4]
 8005d84:	e001      	b.n	8005d8a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005d86:	2300      	movs	r3, #0
 8005d88:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d19f      	bne.n	8005cd0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	08010418 	.word	0x08010418
 8005da0:	0801057c 	.word	0x0801057c
 8005da4:	08010478 	.word	0x08010478
 8005da8:	080105a8 	.word	0x080105a8
 8005dac:	080105c0 	.word	0x080105c0
 8005db0:	080105e4 	.word	0x080105e4

08005db4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005dc0:	e005      	b.n	8005dce <pbuf_clen+0x1a>
    ++len;
 8005dc2:	89fb      	ldrh	r3, [r7, #14]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1f6      	bne.n	8005dc2 <pbuf_clen+0xe>
  }
  return len;
 8005dd4:	89fb      	ldrh	r3, [r7, #14]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
	...

08005de4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d010      	beq.n	8005e14 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	7b9b      	ldrb	r3, [r3, #14]
 8005df6:	3301      	adds	r3, #1
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	7b9b      	ldrb	r3, [r3, #14]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d106      	bne.n	8005e14 <pbuf_ref+0x30>
 8005e06:	4b05      	ldr	r3, [pc, #20]	; (8005e1c <pbuf_ref+0x38>)
 8005e08:	f240 3242 	movw	r2, #834	; 0x342
 8005e0c:	4904      	ldr	r1, [pc, #16]	; (8005e20 <pbuf_ref+0x3c>)
 8005e0e:	4805      	ldr	r0, [pc, #20]	; (8005e24 <pbuf_ref+0x40>)
 8005e10:	f008 fde2 	bl	800e9d8 <iprintf>
  }
}
 8005e14:	bf00      	nop
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	08010418 	.word	0x08010418
 8005e20:	080105f8 	.word	0x080105f8
 8005e24:	08010478 	.word	0x08010478

08005e28 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d002      	beq.n	8005e3e <pbuf_cat+0x16>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d107      	bne.n	8005e4e <pbuf_cat+0x26>
 8005e3e:	4b20      	ldr	r3, [pc, #128]	; (8005ec0 <pbuf_cat+0x98>)
 8005e40:	f240 3259 	movw	r2, #857	; 0x359
 8005e44:	491f      	ldr	r1, [pc, #124]	; (8005ec4 <pbuf_cat+0x9c>)
 8005e46:	4820      	ldr	r0, [pc, #128]	; (8005ec8 <pbuf_cat+0xa0>)
 8005e48:	f008 fdc6 	bl	800e9d8 <iprintf>
 8005e4c:	e034      	b.n	8005eb8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	e00a      	b.n	8005e6a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	891a      	ldrh	r2, [r3, #8]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	891b      	ldrh	r3, [r3, #8]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1f0      	bne.n	8005e54 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	891a      	ldrh	r2, [r3, #8]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	895b      	ldrh	r3, [r3, #10]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d006      	beq.n	8005e8c <pbuf_cat+0x64>
 8005e7e:	4b10      	ldr	r3, [pc, #64]	; (8005ec0 <pbuf_cat+0x98>)
 8005e80:	f240 3262 	movw	r2, #866	; 0x362
 8005e84:	4911      	ldr	r1, [pc, #68]	; (8005ecc <pbuf_cat+0xa4>)
 8005e86:	4810      	ldr	r0, [pc, #64]	; (8005ec8 <pbuf_cat+0xa0>)
 8005e88:	f008 fda6 	bl	800e9d8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d006      	beq.n	8005ea2 <pbuf_cat+0x7a>
 8005e94:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <pbuf_cat+0x98>)
 8005e96:	f240 3263 	movw	r2, #867	; 0x363
 8005e9a:	490d      	ldr	r1, [pc, #52]	; (8005ed0 <pbuf_cat+0xa8>)
 8005e9c:	480a      	ldr	r0, [pc, #40]	; (8005ec8 <pbuf_cat+0xa0>)
 8005e9e:	f008 fd9b 	bl	800e9d8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	891a      	ldrh	r2, [r3, #8]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	891b      	ldrh	r3, [r3, #8]
 8005eaa:	4413      	add	r3, r2
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	08010418 	.word	0x08010418
 8005ec4:	0801060c 	.word	0x0801060c
 8005ec8:	08010478 	.word	0x08010478
 8005ecc:	08010644 	.word	0x08010644
 8005ed0:	08010674 	.word	0x08010674

08005ed4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8005ede:	6839      	ldr	r1, [r7, #0]
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7ff ffa1 	bl	8005e28 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005ee6:	6838      	ldr	r0, [r7, #0]
 8005ee8:	f7ff ff7c 	bl	8005de4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005eec:	bf00      	nop
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	2300      	movs	r3, #0
 8005f04:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d008      	beq.n	8005f1e <pbuf_copy+0x2a>
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d005      	beq.n	8005f1e <pbuf_copy+0x2a>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	891a      	ldrh	r2, [r3, #8]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	891b      	ldrh	r3, [r3, #8]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d209      	bcs.n	8005f32 <pbuf_copy+0x3e>
 8005f1e:	4b57      	ldr	r3, [pc, #348]	; (800607c <pbuf_copy+0x188>)
 8005f20:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005f24:	4956      	ldr	r1, [pc, #344]	; (8006080 <pbuf_copy+0x18c>)
 8005f26:	4857      	ldr	r0, [pc, #348]	; (8006084 <pbuf_copy+0x190>)
 8005f28:	f008 fd56 	bl	800e9d8 <iprintf>
 8005f2c:	f06f 030f 	mvn.w	r3, #15
 8005f30:	e09f      	b.n	8006072 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	895b      	ldrh	r3, [r3, #10]
 8005f36:	461a      	mov	r2, r3
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	1ad2      	subs	r2, r2, r3
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	895b      	ldrh	r3, [r3, #10]
 8005f40:	4619      	mov	r1, r3
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1acb      	subs	r3, r1, r3
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d306      	bcc.n	8005f58 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	895b      	ldrh	r3, [r3, #10]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	e005      	b.n	8005f64 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	895b      	ldrh	r3, [r3, #10]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	18d0      	adds	r0, r2, r3
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	4413      	add	r3, r2
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4619      	mov	r1, r3
 8005f78:	f008 fcfe 	bl	800e978 <memcpy>
    offset_to += len;
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4413      	add	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4413      	add	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	895b      	ldrh	r3, [r3, #10]
 8005f90:	461a      	mov	r2, r3
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d906      	bls.n	8005fa6 <pbuf_copy+0xb2>
 8005f98:	4b38      	ldr	r3, [pc, #224]	; (800607c <pbuf_copy+0x188>)
 8005f9a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005f9e:	493a      	ldr	r1, [pc, #232]	; (8006088 <pbuf_copy+0x194>)
 8005fa0:	4838      	ldr	r0, [pc, #224]	; (8006084 <pbuf_copy+0x190>)
 8005fa2:	f008 fd19 	bl	800e9d8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	895b      	ldrh	r3, [r3, #10]
 8005faa:	461a      	mov	r2, r3
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d906      	bls.n	8005fc0 <pbuf_copy+0xcc>
 8005fb2:	4b32      	ldr	r3, [pc, #200]	; (800607c <pbuf_copy+0x188>)
 8005fb4:	f240 32da 	movw	r2, #986	; 0x3da
 8005fb8:	4934      	ldr	r1, [pc, #208]	; (800608c <pbuf_copy+0x198>)
 8005fba:	4832      	ldr	r0, [pc, #200]	; (8006084 <pbuf_copy+0x190>)
 8005fbc:	f008 fd0c 	bl	800e9d8 <iprintf>
    if (offset_from >= p_from->len) {
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	895b      	ldrh	r3, [r3, #10]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d304      	bcc.n	8005fd6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	895b      	ldrh	r3, [r3, #10]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d114      	bne.n	800600c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10c      	bne.n	800600c <pbuf_copy+0x118>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d009      	beq.n	800600c <pbuf_copy+0x118>
 8005ff8:	4b20      	ldr	r3, [pc, #128]	; (800607c <pbuf_copy+0x188>)
 8005ffa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8005ffe:	4924      	ldr	r1, [pc, #144]	; (8006090 <pbuf_copy+0x19c>)
 8006000:	4820      	ldr	r0, [pc, #128]	; (8006084 <pbuf_copy+0x190>)
 8006002:	f008 fce9 	bl	800e9d8 <iprintf>
 8006006:	f06f 030f 	mvn.w	r3, #15
 800600a:	e032      	b.n	8006072 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d013      	beq.n	800603a <pbuf_copy+0x146>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	895a      	ldrh	r2, [r3, #10]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	891b      	ldrh	r3, [r3, #8]
 800601a:	429a      	cmp	r2, r3
 800601c:	d10d      	bne.n	800603a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d009      	beq.n	800603a <pbuf_copy+0x146>
 8006026:	4b15      	ldr	r3, [pc, #84]	; (800607c <pbuf_copy+0x188>)
 8006028:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800602c:	4919      	ldr	r1, [pc, #100]	; (8006094 <pbuf_copy+0x1a0>)
 800602e:	4815      	ldr	r0, [pc, #84]	; (8006084 <pbuf_copy+0x190>)
 8006030:	f008 fcd2 	bl	800e9d8 <iprintf>
 8006034:	f06f 0305 	mvn.w	r3, #5
 8006038:	e01b      	b.n	8006072 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d013      	beq.n	8006068 <pbuf_copy+0x174>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	895a      	ldrh	r2, [r3, #10]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	891b      	ldrh	r3, [r3, #8]
 8006048:	429a      	cmp	r2, r3
 800604a:	d10d      	bne.n	8006068 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d009      	beq.n	8006068 <pbuf_copy+0x174>
 8006054:	4b09      	ldr	r3, [pc, #36]	; (800607c <pbuf_copy+0x188>)
 8006056:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800605a:	490e      	ldr	r1, [pc, #56]	; (8006094 <pbuf_copy+0x1a0>)
 800605c:	4809      	ldr	r0, [pc, #36]	; (8006084 <pbuf_copy+0x190>)
 800605e:	f008 fcbb 	bl	800e9d8 <iprintf>
 8006062:	f06f 0305 	mvn.w	r3, #5
 8006066:	e004      	b.n	8006072 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	f47f af61 	bne.w	8005f32 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	08010418 	.word	0x08010418
 8006080:	080106c0 	.word	0x080106c0
 8006084:	08010478 	.word	0x08010478
 8006088:	080106f0 	.word	0x080106f0
 800608c:	08010708 	.word	0x08010708
 8006090:	08010724 	.word	0x08010724
 8006094:	08010734 	.word	0x08010734

08006098 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	4611      	mov	r1, r2
 80060a4:	461a      	mov	r2, r3
 80060a6:	460b      	mov	r3, r1
 80060a8:	80fb      	strh	r3, [r7, #6]
 80060aa:	4613      	mov	r3, r2
 80060ac:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80060ae:	2300      	movs	r3, #0
 80060b0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80060b2:	2300      	movs	r3, #0
 80060b4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d108      	bne.n	80060ce <pbuf_copy_partial+0x36>
 80060bc:	4b2b      	ldr	r3, [pc, #172]	; (800616c <pbuf_copy_partial+0xd4>)
 80060be:	f240 420a 	movw	r2, #1034	; 0x40a
 80060c2:	492b      	ldr	r1, [pc, #172]	; (8006170 <pbuf_copy_partial+0xd8>)
 80060c4:	482b      	ldr	r0, [pc, #172]	; (8006174 <pbuf_copy_partial+0xdc>)
 80060c6:	f008 fc87 	bl	800e9d8 <iprintf>
 80060ca:	2300      	movs	r3, #0
 80060cc:	e04a      	b.n	8006164 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d108      	bne.n	80060e6 <pbuf_copy_partial+0x4e>
 80060d4:	4b25      	ldr	r3, [pc, #148]	; (800616c <pbuf_copy_partial+0xd4>)
 80060d6:	f240 420b 	movw	r2, #1035	; 0x40b
 80060da:	4927      	ldr	r1, [pc, #156]	; (8006178 <pbuf_copy_partial+0xe0>)
 80060dc:	4825      	ldr	r0, [pc, #148]	; (8006174 <pbuf_copy_partial+0xdc>)
 80060de:	f008 fc7b 	bl	800e9d8 <iprintf>
 80060e2:	2300      	movs	r3, #0
 80060e4:	e03e      	b.n	8006164 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	61fb      	str	r3, [r7, #28]
 80060ea:	e034      	b.n	8006156 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80060ec:	88bb      	ldrh	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <pbuf_copy_partial+0x70>
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	895b      	ldrh	r3, [r3, #10]
 80060f6:	88ba      	ldrh	r2, [r7, #4]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d305      	bcc.n	8006108 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	895b      	ldrh	r3, [r3, #10]
 8006100:	88ba      	ldrh	r2, [r7, #4]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	80bb      	strh	r3, [r7, #4]
 8006106:	e023      	b.n	8006150 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	895a      	ldrh	r2, [r3, #10]
 800610c:	88bb      	ldrh	r3, [r7, #4]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006112:	8b3a      	ldrh	r2, [r7, #24]
 8006114:	88fb      	ldrh	r3, [r7, #6]
 8006116:	429a      	cmp	r2, r3
 8006118:	d901      	bls.n	800611e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800611a:	88fb      	ldrh	r3, [r7, #6]
 800611c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800611e:	8b7b      	ldrh	r3, [r7, #26]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	18d0      	adds	r0, r2, r3
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	88bb      	ldrh	r3, [r7, #4]
 800612a:	4413      	add	r3, r2
 800612c:	8b3a      	ldrh	r2, [r7, #24]
 800612e:	4619      	mov	r1, r3
 8006130:	f008 fc22 	bl	800e978 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006134:	8afa      	ldrh	r2, [r7, #22]
 8006136:	8b3b      	ldrh	r3, [r7, #24]
 8006138:	4413      	add	r3, r2
 800613a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800613c:	8b7a      	ldrh	r2, [r7, #26]
 800613e:	8b3b      	ldrh	r3, [r7, #24]
 8006140:	4413      	add	r3, r2
 8006142:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006144:	88fa      	ldrh	r2, [r7, #6]
 8006146:	8b3b      	ldrh	r3, [r7, #24]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800614c:	2300      	movs	r3, #0
 800614e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	61fb      	str	r3, [r7, #28]
 8006156:	88fb      	ldrh	r3, [r7, #6]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <pbuf_copy_partial+0xca>
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1c4      	bne.n	80060ec <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006162:	8afb      	ldrh	r3, [r7, #22]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3720      	adds	r7, #32
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	08010418 	.word	0x08010418
 8006170:	08010760 	.word	0x08010760
 8006174:	08010478 	.word	0x08010478
 8006178:	08010780 	.word	0x08010780

0800617c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	4613      	mov	r3, r2
 8006188:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800618a:	88fb      	ldrh	r3, [r7, #6]
 800618c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d109      	bne.n	80061ac <pbuf_take+0x30>
 8006198:	4b3a      	ldr	r3, [pc, #232]	; (8006284 <pbuf_take+0x108>)
 800619a:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800619e:	493a      	ldr	r1, [pc, #232]	; (8006288 <pbuf_take+0x10c>)
 80061a0:	483a      	ldr	r0, [pc, #232]	; (800628c <pbuf_take+0x110>)
 80061a2:	f008 fc19 	bl	800e9d8 <iprintf>
 80061a6:	f06f 030f 	mvn.w	r3, #15
 80061aa:	e067      	b.n	800627c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d109      	bne.n	80061c6 <pbuf_take+0x4a>
 80061b2:	4b34      	ldr	r3, [pc, #208]	; (8006284 <pbuf_take+0x108>)
 80061b4:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80061b8:	4935      	ldr	r1, [pc, #212]	; (8006290 <pbuf_take+0x114>)
 80061ba:	4834      	ldr	r0, [pc, #208]	; (800628c <pbuf_take+0x110>)
 80061bc:	f008 fc0c 	bl	800e9d8 <iprintf>
 80061c0:	f06f 030f 	mvn.w	r3, #15
 80061c4:	e05a      	b.n	800627c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	891b      	ldrh	r3, [r3, #8]
 80061ca:	88fa      	ldrh	r2, [r7, #6]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d909      	bls.n	80061e4 <pbuf_take+0x68>
 80061d0:	4b2c      	ldr	r3, [pc, #176]	; (8006284 <pbuf_take+0x108>)
 80061d2:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80061d6:	492f      	ldr	r1, [pc, #188]	; (8006294 <pbuf_take+0x118>)
 80061d8:	482c      	ldr	r0, [pc, #176]	; (800628c <pbuf_take+0x110>)
 80061da:	f008 fbfd 	bl	800e9d8 <iprintf>
 80061de:	f04f 33ff 	mov.w	r3, #4294967295
 80061e2:	e04b      	b.n	800627c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d007      	beq.n	80061fa <pbuf_take+0x7e>
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d004      	beq.n	80061fa <pbuf_take+0x7e>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	891b      	ldrh	r3, [r3, #8]
 80061f4:	88fa      	ldrh	r2, [r7, #6]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d902      	bls.n	8006200 <pbuf_take+0x84>
    return ERR_ARG;
 80061fa:	f06f 030f 	mvn.w	r3, #15
 80061fe:	e03d      	b.n	800627c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	61fb      	str	r3, [r7, #28]
 8006204:	e028      	b.n	8006258 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d106      	bne.n	800621a <pbuf_take+0x9e>
 800620c:	4b1d      	ldr	r3, [pc, #116]	; (8006284 <pbuf_take+0x108>)
 800620e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8006212:	4921      	ldr	r1, [pc, #132]	; (8006298 <pbuf_take+0x11c>)
 8006214:	481d      	ldr	r0, [pc, #116]	; (800628c <pbuf_take+0x110>)
 8006216:	f008 fbdf 	bl	800e9d8 <iprintf>
    buf_copy_len = total_copy_len;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	895b      	ldrh	r3, [r3, #10]
 8006222:	461a      	mov	r2, r3
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	4293      	cmp	r3, r2
 8006228:	d902      	bls.n	8006230 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	895b      	ldrh	r3, [r3, #10]
 800622e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	6858      	ldr	r0, [r3, #4]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	4413      	add	r3, r2
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	4619      	mov	r1, r3
 800623e:	f008 fb9b 	bl	800e978 <memcpy>
    total_copy_len -= buf_copy_len;
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	4413      	add	r3, r2
 8006250:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	61fb      	str	r3, [r7, #28]
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1d3      	bne.n	8006206 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d103      	bne.n	800626c <pbuf_take+0xf0>
 8006264:	88fb      	ldrh	r3, [r7, #6]
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	429a      	cmp	r2, r3
 800626a:	d006      	beq.n	800627a <pbuf_take+0xfe>
 800626c:	4b05      	ldr	r3, [pc, #20]	; (8006284 <pbuf_take+0x108>)
 800626e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8006272:	490a      	ldr	r1, [pc, #40]	; (800629c <pbuf_take+0x120>)
 8006274:	4805      	ldr	r0, [pc, #20]	; (800628c <pbuf_take+0x110>)
 8006276:	f008 fbaf 	bl	800e9d8 <iprintf>
  return ERR_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3720      	adds	r7, #32
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	08010418 	.word	0x08010418
 8006288:	080107f0 	.word	0x080107f0
 800628c:	08010478 	.word	0x08010478
 8006290:	08010808 	.word	0x08010808
 8006294:	08010824 	.word	0x08010824
 8006298:	08010844 	.word	0x08010844
 800629c:	0801085c 	.word	0x0801085c

080062a0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	603a      	str	r2, [r7, #0]
 80062aa:	71fb      	strb	r3, [r7, #7]
 80062ac:	460b      	mov	r3, r1
 80062ae:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	8919      	ldrh	r1, [r3, #8]
 80062b4:	88ba      	ldrh	r2, [r7, #4]
 80062b6:	79fb      	ldrb	r3, [r7, #7]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff fa0f 	bl	80056dc <pbuf_alloc>
 80062be:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <pbuf_clone+0x2a>
    return NULL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	e011      	b.n	80062ee <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f7ff fe11 	bl	8005ef4 <pbuf_copy>
 80062d2:	4603      	mov	r3, r0
 80062d4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80062d6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d006      	beq.n	80062ec <pbuf_clone+0x4c>
 80062de:	4b06      	ldr	r3, [pc, #24]	; (80062f8 <pbuf_clone+0x58>)
 80062e0:	f240 5224 	movw	r2, #1316	; 0x524
 80062e4:	4905      	ldr	r1, [pc, #20]	; (80062fc <pbuf_clone+0x5c>)
 80062e6:	4806      	ldr	r0, [pc, #24]	; (8006300 <pbuf_clone+0x60>)
 80062e8:	f008 fb76 	bl	800e9d8 <iprintf>
  return q;
 80062ec:	68fb      	ldr	r3, [r7, #12]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	08010418 	.word	0x08010418
 80062fc:	0801088c 	.word	0x0801088c
 8006300:	08010478 	.word	0x08010478

08006304 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006308:	f008 fb7e 	bl	800ea08 <rand>
 800630c:	4603      	mov	r3, r0
 800630e:	b29b      	uxth	r3, r3
 8006310:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006314:	b29b      	uxth	r3, r3
 8006316:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800631a:	b29a      	uxth	r2, r3
 800631c:	4b01      	ldr	r3, [pc, #4]	; (8006324 <tcp_init+0x20>)
 800631e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006320:	bf00      	nop
 8006322:	bd80      	pop	{r7, pc}
 8006324:	20000020 	.word	0x20000020

08006328 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	7d1b      	ldrb	r3, [r3, #20]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d105      	bne.n	8006344 <tcp_free+0x1c>
 8006338:	4b06      	ldr	r3, [pc, #24]	; (8006354 <tcp_free+0x2c>)
 800633a:	22d4      	movs	r2, #212	; 0xd4
 800633c:	4906      	ldr	r1, [pc, #24]	; (8006358 <tcp_free+0x30>)
 800633e:	4807      	ldr	r0, [pc, #28]	; (800635c <tcp_free+0x34>)
 8006340:	f008 fb4a 	bl	800e9d8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006344:	6879      	ldr	r1, [r7, #4]
 8006346:	2001      	movs	r0, #1
 8006348:	f7fe fe36 	bl	8004fb8 <memp_free>
}
 800634c:	bf00      	nop
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	08010918 	.word	0x08010918
 8006358:	08010948 	.word	0x08010948
 800635c:	0801095c 	.word	0x0801095c

08006360 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	7d1b      	ldrb	r3, [r3, #20]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d105      	bne.n	800637c <tcp_free_listen+0x1c>
 8006370:	4b06      	ldr	r3, [pc, #24]	; (800638c <tcp_free_listen+0x2c>)
 8006372:	22df      	movs	r2, #223	; 0xdf
 8006374:	4906      	ldr	r1, [pc, #24]	; (8006390 <tcp_free_listen+0x30>)
 8006376:	4807      	ldr	r0, [pc, #28]	; (8006394 <tcp_free_listen+0x34>)
 8006378:	f008 fb2e 	bl	800e9d8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	2002      	movs	r0, #2
 8006380:	f7fe fe1a 	bl	8004fb8 <memp_free>
}
 8006384:	bf00      	nop
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	08010918 	.word	0x08010918
 8006390:	08010984 	.word	0x08010984
 8006394:	0801095c 	.word	0x0801095c

08006398 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800639c:	f000 fea2 	bl	80070e4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80063a0:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <tcp_tmr+0x28>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	3301      	adds	r3, #1
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <tcp_tmr+0x28>)
 80063aa:	701a      	strb	r2, [r3, #0]
 80063ac:	4b04      	ldr	r3, [pc, #16]	; (80063c0 <tcp_tmr+0x28>)
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80063b8:	f000 fb54 	bl	8006a64 <tcp_slowtmr>
  }
}
 80063bc:	bf00      	nop
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20008321 	.word	0x20008321

080063c4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d105      	bne.n	80063e0 <tcp_remove_listener+0x1c>
 80063d4:	4b0d      	ldr	r3, [pc, #52]	; (800640c <tcp_remove_listener+0x48>)
 80063d6:	22ff      	movs	r2, #255	; 0xff
 80063d8:	490d      	ldr	r1, [pc, #52]	; (8006410 <tcp_remove_listener+0x4c>)
 80063da:	480e      	ldr	r0, [pc, #56]	; (8006414 <tcp_remove_listener+0x50>)
 80063dc:	f008 fafc 	bl	800e9d8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	e00a      	b.n	80063fc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d102      	bne.n	80063f6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1f1      	bne.n	80063e6 <tcp_remove_listener+0x22>
    }
  }
}
 8006402:	bf00      	nop
 8006404:	bf00      	nop
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	08010918 	.word	0x08010918
 8006410:	080109a0 	.word	0x080109a0
 8006414:	0801095c 	.word	0x0801095c

08006418 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d106      	bne.n	8006434 <tcp_listen_closed+0x1c>
 8006426:	4b14      	ldr	r3, [pc, #80]	; (8006478 <tcp_listen_closed+0x60>)
 8006428:	f240 1211 	movw	r2, #273	; 0x111
 800642c:	4913      	ldr	r1, [pc, #76]	; (800647c <tcp_listen_closed+0x64>)
 800642e:	4814      	ldr	r0, [pc, #80]	; (8006480 <tcp_listen_closed+0x68>)
 8006430:	f008 fad2 	bl	800e9d8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	7d1b      	ldrb	r3, [r3, #20]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d006      	beq.n	800644a <tcp_listen_closed+0x32>
 800643c:	4b0e      	ldr	r3, [pc, #56]	; (8006478 <tcp_listen_closed+0x60>)
 800643e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006442:	4910      	ldr	r1, [pc, #64]	; (8006484 <tcp_listen_closed+0x6c>)
 8006444:	480e      	ldr	r0, [pc, #56]	; (8006480 <tcp_listen_closed+0x68>)
 8006446:	f008 fac7 	bl	800e9d8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800644a:	2301      	movs	r3, #1
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	e00b      	b.n	8006468 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006450:	4a0d      	ldr	r2, [pc, #52]	; (8006488 <tcp_listen_closed+0x70>)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	4618      	mov	r0, r3
 800645e:	f7ff ffb1 	bl	80063c4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3301      	adds	r3, #1
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b03      	cmp	r3, #3
 800646c:	d9f0      	bls.n	8006450 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800646e:	bf00      	nop
 8006470:	bf00      	nop
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	08010918 	.word	0x08010918
 800647c:	080109c8 	.word	0x080109c8
 8006480:	0801095c 	.word	0x0801095c
 8006484:	080109d4 	.word	0x080109d4
 8006488:	080128f0 	.word	0x080128f0

0800648c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800648c:	b5b0      	push	{r4, r5, r7, lr}
 800648e:	b088      	sub	sp, #32
 8006490:	af04      	add	r7, sp, #16
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	460b      	mov	r3, r1
 8006496:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d106      	bne.n	80064ac <tcp_close_shutdown+0x20>
 800649e:	4b63      	ldr	r3, [pc, #396]	; (800662c <tcp_close_shutdown+0x1a0>)
 80064a0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80064a4:	4962      	ldr	r1, [pc, #392]	; (8006630 <tcp_close_shutdown+0x1a4>)
 80064a6:	4863      	ldr	r0, [pc, #396]	; (8006634 <tcp_close_shutdown+0x1a8>)
 80064a8:	f008 fa96 	bl	800e9d8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80064ac:	78fb      	ldrb	r3, [r7, #3]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d066      	beq.n	8006580 <tcp_close_shutdown+0xf4>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	7d1b      	ldrb	r3, [r3, #20]
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	d003      	beq.n	80064c2 <tcp_close_shutdown+0x36>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	7d1b      	ldrb	r3, [r3, #20]
 80064be:	2b07      	cmp	r3, #7
 80064c0:	d15e      	bne.n	8006580 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d104      	bne.n	80064d4 <tcp_close_shutdown+0x48>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ce:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80064d2:	d055      	beq.n	8006580 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	8b5b      	ldrh	r3, [r3, #26]
 80064d8:	f003 0310 	and.w	r3, r3, #16
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d106      	bne.n	80064ee <tcp_close_shutdown+0x62>
 80064e0:	4b52      	ldr	r3, [pc, #328]	; (800662c <tcp_close_shutdown+0x1a0>)
 80064e2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80064e6:	4954      	ldr	r1, [pc, #336]	; (8006638 <tcp_close_shutdown+0x1ac>)
 80064e8:	4852      	ldr	r0, [pc, #328]	; (8006634 <tcp_close_shutdown+0x1a8>)
 80064ea:	f008 fa75 	bl	800e9d8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80064f6:	687d      	ldr	r5, [r7, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	3304      	adds	r3, #4
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	8ad2      	ldrh	r2, [r2, #22]
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	8b09      	ldrh	r1, [r1, #24]
 8006504:	9102      	str	r1, [sp, #8]
 8006506:	9201      	str	r2, [sp, #4]
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	462b      	mov	r3, r5
 800650c:	4622      	mov	r2, r4
 800650e:	4601      	mov	r1, r0
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f004 fe91 	bl	800b238 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f001 f8c6 	bl	80076a8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800651c:	4b47      	ldr	r3, [pc, #284]	; (800663c <tcp_close_shutdown+0x1b0>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	429a      	cmp	r2, r3
 8006524:	d105      	bne.n	8006532 <tcp_close_shutdown+0xa6>
 8006526:	4b45      	ldr	r3, [pc, #276]	; (800663c <tcp_close_shutdown+0x1b0>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	4a43      	ldr	r2, [pc, #268]	; (800663c <tcp_close_shutdown+0x1b0>)
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	e013      	b.n	800655a <tcp_close_shutdown+0xce>
 8006532:	4b42      	ldr	r3, [pc, #264]	; (800663c <tcp_close_shutdown+0x1b0>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	e00c      	b.n	8006554 <tcp_close_shutdown+0xc8>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	429a      	cmp	r2, r3
 8006542:	d104      	bne.n	800654e <tcp_close_shutdown+0xc2>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68da      	ldr	r2, [r3, #12]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	60da      	str	r2, [r3, #12]
 800654c:	e005      	b.n	800655a <tcp_close_shutdown+0xce>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1ef      	bne.n	800653a <tcp_close_shutdown+0xae>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	60da      	str	r2, [r3, #12]
 8006560:	4b37      	ldr	r3, [pc, #220]	; (8006640 <tcp_close_shutdown+0x1b4>)
 8006562:	2201      	movs	r2, #1
 8006564:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006566:	4b37      	ldr	r3, [pc, #220]	; (8006644 <tcp_close_shutdown+0x1b8>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	429a      	cmp	r2, r3
 800656e:	d102      	bne.n	8006576 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006570:	f003 fd5e 	bl	800a030 <tcp_trigger_input_pcb_close>
 8006574:	e002      	b.n	800657c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7ff fed6 	bl	8006328 <tcp_free>
      }
      return ERR_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	e050      	b.n	8006622 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	7d1b      	ldrb	r3, [r3, #20]
 8006584:	2b02      	cmp	r3, #2
 8006586:	d03b      	beq.n	8006600 <tcp_close_shutdown+0x174>
 8006588:	2b02      	cmp	r3, #2
 800658a:	dc44      	bgt.n	8006616 <tcp_close_shutdown+0x18a>
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <tcp_close_shutdown+0x10a>
 8006590:	2b01      	cmp	r3, #1
 8006592:	d02a      	beq.n	80065ea <tcp_close_shutdown+0x15e>
 8006594:	e03f      	b.n	8006616 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	8adb      	ldrh	r3, [r3, #22]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d021      	beq.n	80065e2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800659e:	4b2a      	ldr	r3, [pc, #168]	; (8006648 <tcp_close_shutdown+0x1bc>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d105      	bne.n	80065b4 <tcp_close_shutdown+0x128>
 80065a8:	4b27      	ldr	r3, [pc, #156]	; (8006648 <tcp_close_shutdown+0x1bc>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	4a26      	ldr	r2, [pc, #152]	; (8006648 <tcp_close_shutdown+0x1bc>)
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	e013      	b.n	80065dc <tcp_close_shutdown+0x150>
 80065b4:	4b24      	ldr	r3, [pc, #144]	; (8006648 <tcp_close_shutdown+0x1bc>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	60bb      	str	r3, [r7, #8]
 80065ba:	e00c      	b.n	80065d6 <tcp_close_shutdown+0x14a>
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d104      	bne.n	80065d0 <tcp_close_shutdown+0x144>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68da      	ldr	r2, [r3, #12]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	60da      	str	r2, [r3, #12]
 80065ce:	e005      	b.n	80065dc <tcp_close_shutdown+0x150>
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	60bb      	str	r3, [r7, #8]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1ef      	bne.n	80065bc <tcp_close_shutdown+0x130>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff fea0 	bl	8006328 <tcp_free>
      break;
 80065e8:	e01a      	b.n	8006620 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7ff ff14 	bl	8006418 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	4816      	ldr	r0, [pc, #88]	; (800664c <tcp_close_shutdown+0x1c0>)
 80065f4:	f001 f8a8 	bl	8007748 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff feb1 	bl	8006360 <tcp_free_listen>
      break;
 80065fe:	e00f      	b.n	8006620 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	480e      	ldr	r0, [pc, #56]	; (800663c <tcp_close_shutdown+0x1b0>)
 8006604:	f001 f8a0 	bl	8007748 <tcp_pcb_remove>
 8006608:	4b0d      	ldr	r3, [pc, #52]	; (8006640 <tcp_close_shutdown+0x1b4>)
 800660a:	2201      	movs	r2, #1
 800660c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7ff fe8a 	bl	8006328 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006614:	e004      	b.n	8006620 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f81a 	bl	8006650 <tcp_close_shutdown_fin>
 800661c:	4603      	mov	r3, r0
 800661e:	e000      	b.n	8006622 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bdb0      	pop	{r4, r5, r7, pc}
 800662a:	bf00      	nop
 800662c:	08010918 	.word	0x08010918
 8006630:	080109ec 	.word	0x080109ec
 8006634:	0801095c 	.word	0x0801095c
 8006638:	08010a0c 	.word	0x08010a0c
 800663c:	20008318 	.word	0x20008318
 8006640:	20008320 	.word	0x20008320
 8006644:	20008358 	.word	0x20008358
 8006648:	20008310 	.word	0x20008310
 800664c:	20008314 	.word	0x20008314

08006650 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d106      	bne.n	800666c <tcp_close_shutdown_fin+0x1c>
 800665e:	4b2e      	ldr	r3, [pc, #184]	; (8006718 <tcp_close_shutdown_fin+0xc8>)
 8006660:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006664:	492d      	ldr	r1, [pc, #180]	; (800671c <tcp_close_shutdown_fin+0xcc>)
 8006666:	482e      	ldr	r0, [pc, #184]	; (8006720 <tcp_close_shutdown_fin+0xd0>)
 8006668:	f008 f9b6 	bl	800e9d8 <iprintf>

  switch (pcb->state) {
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	7d1b      	ldrb	r3, [r3, #20]
 8006670:	2b07      	cmp	r3, #7
 8006672:	d020      	beq.n	80066b6 <tcp_close_shutdown_fin+0x66>
 8006674:	2b07      	cmp	r3, #7
 8006676:	dc2b      	bgt.n	80066d0 <tcp_close_shutdown_fin+0x80>
 8006678:	2b03      	cmp	r3, #3
 800667a:	d002      	beq.n	8006682 <tcp_close_shutdown_fin+0x32>
 800667c:	2b04      	cmp	r3, #4
 800667e:	d00d      	beq.n	800669c <tcp_close_shutdown_fin+0x4c>
 8006680:	e026      	b.n	80066d0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f003 fee6 	bl	800a454 <tcp_send_fin>
 8006688:	4603      	mov	r3, r0
 800668a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800668c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d11f      	bne.n	80066d4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2205      	movs	r2, #5
 8006698:	751a      	strb	r2, [r3, #20]
      }
      break;
 800669a:	e01b      	b.n	80066d4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f003 fed9 	bl	800a454 <tcp_send_fin>
 80066a2:	4603      	mov	r3, r0
 80066a4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80066a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d114      	bne.n	80066d8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2205      	movs	r2, #5
 80066b2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80066b4:	e010      	b.n	80066d8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f003 fecc 	bl	800a454 <tcp_send_fin>
 80066bc:	4603      	mov	r3, r0
 80066be:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80066c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d109      	bne.n	80066dc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2209      	movs	r2, #9
 80066cc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80066ce:	e005      	b.n	80066dc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80066d0:	2300      	movs	r3, #0
 80066d2:	e01c      	b.n	800670e <tcp_close_shutdown_fin+0xbe>
      break;
 80066d4:	bf00      	nop
 80066d6:	e002      	b.n	80066de <tcp_close_shutdown_fin+0x8e>
      break;
 80066d8:	bf00      	nop
 80066da:	e000      	b.n	80066de <tcp_close_shutdown_fin+0x8e>
      break;
 80066dc:	bf00      	nop
  }

  if (err == ERR_OK) {
 80066de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d103      	bne.n	80066ee <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f003 fff2 	bl	800a6d0 <tcp_output>
 80066ec:	e00d      	b.n	800670a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80066ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f6:	d108      	bne.n	800670a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	8b5b      	ldrh	r3, [r3, #26]
 80066fc:	f043 0308 	orr.w	r3, r3, #8
 8006700:	b29a      	uxth	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	e001      	b.n	800670e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800670a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	08010918 	.word	0x08010918
 800671c:	080109c8 	.word	0x080109c8
 8006720:	0801095c 	.word	0x0801095c

08006724 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d109      	bne.n	8006746 <tcp_close+0x22>
 8006732:	4b0f      	ldr	r3, [pc, #60]	; (8006770 <tcp_close+0x4c>)
 8006734:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006738:	490e      	ldr	r1, [pc, #56]	; (8006774 <tcp_close+0x50>)
 800673a:	480f      	ldr	r0, [pc, #60]	; (8006778 <tcp_close+0x54>)
 800673c:	f008 f94c 	bl	800e9d8 <iprintf>
 8006740:	f06f 030f 	mvn.w	r3, #15
 8006744:	e00f      	b.n	8006766 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	7d1b      	ldrb	r3, [r3, #20]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d006      	beq.n	800675c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	8b5b      	ldrh	r3, [r3, #26]
 8006752:	f043 0310 	orr.w	r3, r3, #16
 8006756:	b29a      	uxth	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800675c:	2101      	movs	r1, #1
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7ff fe94 	bl	800648c <tcp_close_shutdown>
 8006764:	4603      	mov	r3, r0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	08010918 	.word	0x08010918
 8006774:	08010a28 	.word	0x08010a28
 8006778:	0801095c 	.word	0x0801095c

0800677c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b08e      	sub	sp, #56	; 0x38
 8006780:	af04      	add	r7, sp, #16
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d107      	bne.n	800679c <tcp_abandon+0x20>
 800678c:	4b52      	ldr	r3, [pc, #328]	; (80068d8 <tcp_abandon+0x15c>)
 800678e:	f240 223d 	movw	r2, #573	; 0x23d
 8006792:	4952      	ldr	r1, [pc, #328]	; (80068dc <tcp_abandon+0x160>)
 8006794:	4852      	ldr	r0, [pc, #328]	; (80068e0 <tcp_abandon+0x164>)
 8006796:	f008 f91f 	bl	800e9d8 <iprintf>
 800679a:	e099      	b.n	80068d0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	7d1b      	ldrb	r3, [r3, #20]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d106      	bne.n	80067b2 <tcp_abandon+0x36>
 80067a4:	4b4c      	ldr	r3, [pc, #304]	; (80068d8 <tcp_abandon+0x15c>)
 80067a6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80067aa:	494e      	ldr	r1, [pc, #312]	; (80068e4 <tcp_abandon+0x168>)
 80067ac:	484c      	ldr	r0, [pc, #304]	; (80068e0 <tcp_abandon+0x164>)
 80067ae:	f008 f913 	bl	800e9d8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	7d1b      	ldrb	r3, [r3, #20]
 80067b6:	2b0a      	cmp	r3, #10
 80067b8:	d107      	bne.n	80067ca <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	484a      	ldr	r0, [pc, #296]	; (80068e8 <tcp_abandon+0x16c>)
 80067be:	f000 ffc3 	bl	8007748 <tcp_pcb_remove>
    tcp_free(pcb);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff fdb0 	bl	8006328 <tcp_free>
 80067c8:	e082      	b.n	80068d0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80067ce:	2300      	movs	r3, #0
 80067d0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	7d1b      	ldrb	r3, [r3, #20]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d126      	bne.n	8006842 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	8adb      	ldrh	r3, [r3, #22]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d02e      	beq.n	800685a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80067fc:	4b3b      	ldr	r3, [pc, #236]	; (80068ec <tcp_abandon+0x170>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	429a      	cmp	r2, r3
 8006804:	d105      	bne.n	8006812 <tcp_abandon+0x96>
 8006806:	4b39      	ldr	r3, [pc, #228]	; (80068ec <tcp_abandon+0x170>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	4a37      	ldr	r2, [pc, #220]	; (80068ec <tcp_abandon+0x170>)
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	e013      	b.n	800683a <tcp_abandon+0xbe>
 8006812:	4b36      	ldr	r3, [pc, #216]	; (80068ec <tcp_abandon+0x170>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	61fb      	str	r3, [r7, #28]
 8006818:	e00c      	b.n	8006834 <tcp_abandon+0xb8>
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	429a      	cmp	r2, r3
 8006822:	d104      	bne.n	800682e <tcp_abandon+0xb2>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68da      	ldr	r2, [r3, #12]
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	60da      	str	r2, [r3, #12]
 800682c:	e005      	b.n	800683a <tcp_abandon+0xbe>
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	61fb      	str	r3, [r7, #28]
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1ef      	bne.n	800681a <tcp_abandon+0x9e>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	60da      	str	r2, [r3, #12]
 8006840:	e00b      	b.n	800685a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	8adb      	ldrh	r3, [r3, #22]
 800684a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800684c:	6879      	ldr	r1, [r7, #4]
 800684e:	4828      	ldr	r0, [pc, #160]	; (80068f0 <tcp_abandon+0x174>)
 8006850:	f000 ff7a 	bl	8007748 <tcp_pcb_remove>
 8006854:	4b27      	ldr	r3, [pc, #156]	; (80068f4 <tcp_abandon+0x178>)
 8006856:	2201      	movs	r2, #1
 8006858:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685e:	2b00      	cmp	r3, #0
 8006860:	d004      	beq.n	800686c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fd1c 	bl	80072a4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006870:	2b00      	cmp	r3, #0
 8006872:	d004      	beq.n	800687e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006878:	4618      	mov	r0, r3
 800687a:	f000 fd13 	bl	80072a4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006882:	2b00      	cmp	r3, #0
 8006884:	d004      	beq.n	8006890 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fd0a 	bl	80072a4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00e      	beq.n	80068b4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3304      	adds	r3, #4
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	8b12      	ldrh	r2, [r2, #24]
 80068a0:	9202      	str	r2, [sp, #8]
 80068a2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80068a4:	9201      	str	r2, [sp, #4]
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	460b      	mov	r3, r1
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	69b9      	ldr	r1, [r7, #24]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f004 fcc2 	bl	800b238 <tcp_rst>
    }
    last_state = pcb->state;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	7d1b      	ldrb	r3, [r3, #20]
 80068b8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff fd34 	bl	8006328 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d004      	beq.n	80068d0 <tcp_abandon+0x154>
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f06f 010c 	mvn.w	r1, #12
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	4798      	blx	r3
  }
}
 80068d0:	3728      	adds	r7, #40	; 0x28
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	08010918 	.word	0x08010918
 80068dc:	08010a5c 	.word	0x08010a5c
 80068e0:	0801095c 	.word	0x0801095c
 80068e4:	08010a78 	.word	0x08010a78
 80068e8:	2000831c 	.word	0x2000831c
 80068ec:	20008310 	.word	0x20008310
 80068f0:	20008318 	.word	0x20008318
 80068f4:	20008320 	.word	0x20008320

080068f8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006900:	2101      	movs	r1, #1
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7ff ff3a 	bl	800677c <tcp_abandon>
}
 8006908:	bf00      	nop
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <tcp_update_rcv_ann_wnd+0x1c>
 800691e:	4b25      	ldr	r3, [pc, #148]	; (80069b4 <tcp_update_rcv_ann_wnd+0xa4>)
 8006920:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006924:	4924      	ldr	r1, [pc, #144]	; (80069b8 <tcp_update_rcv_ann_wnd+0xa8>)
 8006926:	4825      	ldr	r0, [pc, #148]	; (80069bc <tcp_update_rcv_ann_wnd+0xac>)
 8006928:	f008 f856 	bl	800e9d8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006934:	4413      	add	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006940:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006944:	bf28      	it	cs
 8006946:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800694a:	b292      	uxth	r2, r2
 800694c:	4413      	add	r3, r2
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	db08      	blt.n	8006968 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	e020      	b.n	80069aa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	dd03      	ble.n	800697e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800697c:	e014      	b.n	80069a8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006990:	d306      	bcc.n	80069a0 <tcp_update_rcv_ann_wnd+0x90>
 8006992:	4b08      	ldr	r3, [pc, #32]	; (80069b4 <tcp_update_rcv_ann_wnd+0xa4>)
 8006994:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006998:	4909      	ldr	r1, [pc, #36]	; (80069c0 <tcp_update_rcv_ann_wnd+0xb0>)
 800699a:	4808      	ldr	r0, [pc, #32]	; (80069bc <tcp_update_rcv_ann_wnd+0xac>)
 800699c:	f008 f81c 	bl	800e9d8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80069a8:	2300      	movs	r3, #0
  }
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	08010918 	.word	0x08010918
 80069b8:	08010b74 	.word	0x08010b74
 80069bc:	0801095c 	.word	0x0801095c
 80069c0:	08010b98 	.word	0x08010b98

080069c4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	460b      	mov	r3, r1
 80069ce:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d107      	bne.n	80069e6 <tcp_recved+0x22>
 80069d6:	4b1f      	ldr	r3, [pc, #124]	; (8006a54 <tcp_recved+0x90>)
 80069d8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80069dc:	491e      	ldr	r1, [pc, #120]	; (8006a58 <tcp_recved+0x94>)
 80069de:	481f      	ldr	r0, [pc, #124]	; (8006a5c <tcp_recved+0x98>)
 80069e0:	f007 fffa 	bl	800e9d8 <iprintf>
 80069e4:	e032      	b.n	8006a4c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	7d1b      	ldrb	r3, [r3, #20]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d106      	bne.n	80069fc <tcp_recved+0x38>
 80069ee:	4b19      	ldr	r3, [pc, #100]	; (8006a54 <tcp_recved+0x90>)
 80069f0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80069f4:	491a      	ldr	r1, [pc, #104]	; (8006a60 <tcp_recved+0x9c>)
 80069f6:	4819      	ldr	r0, [pc, #100]	; (8006a5c <tcp_recved+0x98>)
 80069f8:	f007 ffee 	bl	800e9d8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006a00:	887b      	ldrh	r3, [r7, #2]
 8006a02:	4413      	add	r3, r2
 8006a04:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006a06:	89fb      	ldrh	r3, [r7, #14]
 8006a08:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006a0c:	d804      	bhi.n	8006a18 <tcp_recved+0x54>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a12:	89fa      	ldrh	r2, [r7, #14]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d204      	bcs.n	8006a22 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006a1e:	851a      	strh	r2, [r3, #40]	; 0x28
 8006a20:	e002      	b.n	8006a28 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	89fa      	ldrh	r2, [r7, #14]
 8006a26:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff ff71 	bl	8006910 <tcp_update_rcv_ann_wnd>
 8006a2e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006a36:	d309      	bcc.n	8006a4c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	8b5b      	ldrh	r3, [r3, #26]
 8006a3c:	f043 0302 	orr.w	r3, r3, #2
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f003 fe42 	bl	800a6d0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	08010918 	.word	0x08010918
 8006a58:	08010bb4 	.word	0x08010bb4
 8006a5c:	0801095c 	.word	0x0801095c
 8006a60:	08010bcc 	.word	0x08010bcc

08006a64 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006a64:	b5b0      	push	{r4, r5, r7, lr}
 8006a66:	b090      	sub	sp, #64	; 0x40
 8006a68:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006a70:	4b94      	ldr	r3, [pc, #592]	; (8006cc4 <tcp_slowtmr+0x260>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3301      	adds	r3, #1
 8006a76:	4a93      	ldr	r2, [pc, #588]	; (8006cc4 <tcp_slowtmr+0x260>)
 8006a78:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006a7a:	4b93      	ldr	r3, [pc, #588]	; (8006cc8 <tcp_slowtmr+0x264>)
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	4b91      	ldr	r3, [pc, #580]	; (8006cc8 <tcp_slowtmr+0x264>)
 8006a84:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006a86:	2300      	movs	r3, #0
 8006a88:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006a8a:	4b90      	ldr	r3, [pc, #576]	; (8006ccc <tcp_slowtmr+0x268>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006a90:	e29f      	b.n	8006fd2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a94:	7d1b      	ldrb	r3, [r3, #20]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d106      	bne.n	8006aa8 <tcp_slowtmr+0x44>
 8006a9a:	4b8d      	ldr	r3, [pc, #564]	; (8006cd0 <tcp_slowtmr+0x26c>)
 8006a9c:	f240 42be 	movw	r2, #1214	; 0x4be
 8006aa0:	498c      	ldr	r1, [pc, #560]	; (8006cd4 <tcp_slowtmr+0x270>)
 8006aa2:	488d      	ldr	r0, [pc, #564]	; (8006cd8 <tcp_slowtmr+0x274>)
 8006aa4:	f007 ff98 	bl	800e9d8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aaa:	7d1b      	ldrb	r3, [r3, #20]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d106      	bne.n	8006abe <tcp_slowtmr+0x5a>
 8006ab0:	4b87      	ldr	r3, [pc, #540]	; (8006cd0 <tcp_slowtmr+0x26c>)
 8006ab2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006ab6:	4989      	ldr	r1, [pc, #548]	; (8006cdc <tcp_slowtmr+0x278>)
 8006ab8:	4887      	ldr	r0, [pc, #540]	; (8006cd8 <tcp_slowtmr+0x274>)
 8006aba:	f007 ff8d 	bl	800e9d8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac0:	7d1b      	ldrb	r3, [r3, #20]
 8006ac2:	2b0a      	cmp	r3, #10
 8006ac4:	d106      	bne.n	8006ad4 <tcp_slowtmr+0x70>
 8006ac6:	4b82      	ldr	r3, [pc, #520]	; (8006cd0 <tcp_slowtmr+0x26c>)
 8006ac8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006acc:	4984      	ldr	r1, [pc, #528]	; (8006ce0 <tcp_slowtmr+0x27c>)
 8006ace:	4882      	ldr	r0, [pc, #520]	; (8006cd8 <tcp_slowtmr+0x274>)
 8006ad0:	f007 ff82 	bl	800e9d8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad6:	7f9a      	ldrb	r2, [r3, #30]
 8006ad8:	4b7b      	ldr	r3, [pc, #492]	; (8006cc8 <tcp_slowtmr+0x264>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d105      	bne.n	8006aec <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006aea:	e272      	b.n	8006fd2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006aec:	4b76      	ldr	r3, [pc, #472]	; (8006cc8 <tcp_slowtmr+0x264>)
 8006aee:	781a      	ldrb	r2, [r3, #0]
 8006af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b02:	7d1b      	ldrb	r3, [r3, #20]
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d10a      	bne.n	8006b1e <tcp_slowtmr+0xba>
 8006b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b0e:	2b05      	cmp	r3, #5
 8006b10:	d905      	bls.n	8006b1e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b16:	3301      	adds	r3, #1
 8006b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b1c:	e11e      	b.n	8006d5c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b24:	2b0b      	cmp	r3, #11
 8006b26:	d905      	bls.n	8006b34 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b32:	e113      	b.n	8006d5c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b36:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d075      	beq.n	8006c2a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d006      	beq.n	8006b54 <tcp_slowtmr+0xf0>
 8006b46:	4b62      	ldr	r3, [pc, #392]	; (8006cd0 <tcp_slowtmr+0x26c>)
 8006b48:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006b4c:	4965      	ldr	r1, [pc, #404]	; (8006ce4 <tcp_slowtmr+0x280>)
 8006b4e:	4862      	ldr	r0, [pc, #392]	; (8006cd8 <tcp_slowtmr+0x274>)
 8006b50:	f007 ff42 	bl	800e9d8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d106      	bne.n	8006b6a <tcp_slowtmr+0x106>
 8006b5c:	4b5c      	ldr	r3, [pc, #368]	; (8006cd0 <tcp_slowtmr+0x26c>)
 8006b5e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006b62:	4961      	ldr	r1, [pc, #388]	; (8006ce8 <tcp_slowtmr+0x284>)
 8006b64:	485c      	ldr	r0, [pc, #368]	; (8006cd8 <tcp_slowtmr+0x274>)
 8006b66:	f007 ff37 	bl	800e9d8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006b70:	2b0b      	cmp	r3, #11
 8006b72:	d905      	bls.n	8006b80 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b78:	3301      	adds	r3, #1
 8006b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b7e:	e0ed      	b.n	8006d5c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b82:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006b86:	3b01      	subs	r3, #1
 8006b88:	4a58      	ldr	r2, [pc, #352]	; (8006cec <tcp_slowtmr+0x288>)
 8006b8a:	5cd3      	ldrb	r3, [r2, r3]
 8006b8c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b90:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006b94:	7c7a      	ldrb	r2, [r7, #17]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d907      	bls.n	8006baa <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006bb0:	7c7a      	ldrb	r2, [r7, #17]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	f200 80d2 	bhi.w	8006d5c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006bb8:	2301      	movs	r3, #1
 8006bba:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d108      	bne.n	8006bd8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006bc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bc8:	f004 fc2a 	bl	800b420 <tcp_zero_window_probe>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d014      	beq.n	8006bfc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	623b      	str	r3, [r7, #32]
 8006bd6:	e011      	b.n	8006bfc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006bde:	4619      	mov	r1, r3
 8006be0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006be2:	f003 faef 	bl	800a1c4 <tcp_split_unsent_seg>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d107      	bne.n	8006bfc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006bec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bee:	f003 fd6f 	bl	800a6d0 <tcp_output>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 80ac 	beq.w	8006d5c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006c12:	2b06      	cmp	r3, #6
 8006c14:	f200 80a2 	bhi.w	8006d5c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006c1e:	3301      	adds	r3, #1
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c24:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006c28:	e098      	b.n	8006d5c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	db0f      	blt.n	8006c54 <tcp_slowtmr+0x1f0>
 8006c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c36:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006c3a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d008      	beq.n	8006c54 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c44:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	b21a      	sxth	r2, r3
 8006c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c52:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c56:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006c60:	429a      	cmp	r2, r3
 8006c62:	db7b      	blt.n	8006d5c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006c64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c66:	f004 f825 	bl	800acb4 <tcp_rexmit_rto_prepare>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d007      	beq.n	8006c80 <tcp_slowtmr+0x21c>
 8006c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d171      	bne.n	8006d5c <tcp_slowtmr+0x2f8>
 8006c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d06d      	beq.n	8006d5c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c82:	7d1b      	ldrb	r3, [r3, #20]
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d03a      	beq.n	8006cfe <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c8e:	2b0c      	cmp	r3, #12
 8006c90:	bf28      	it	cs
 8006c92:	230c      	movcs	r3, #12
 8006c94:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c98:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006c9c:	10db      	asrs	r3, r3, #3
 8006c9e:	b21b      	sxth	r3, r3
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006ca8:	4413      	add	r3, r2
 8006caa:	7efa      	ldrb	r2, [r7, #27]
 8006cac:	4910      	ldr	r1, [pc, #64]	; (8006cf0 <tcp_slowtmr+0x28c>)
 8006cae:	5c8a      	ldrb	r2, [r1, r2]
 8006cb0:	4093      	lsls	r3, r2
 8006cb2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	dc1a      	bgt.n	8006cf4 <tcp_slowtmr+0x290>
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	b21a      	sxth	r2, r3
 8006cc2:	e019      	b.n	8006cf8 <tcp_slowtmr+0x294>
 8006cc4:	2000830c 	.word	0x2000830c
 8006cc8:	20008322 	.word	0x20008322
 8006ccc:	20008318 	.word	0x20008318
 8006cd0:	08010918 	.word	0x08010918
 8006cd4:	08010c5c 	.word	0x08010c5c
 8006cd8:	0801095c 	.word	0x0801095c
 8006cdc:	08010c88 	.word	0x08010c88
 8006ce0:	08010cb4 	.word	0x08010cb4
 8006ce4:	08010ce4 	.word	0x08010ce4
 8006ce8:	08010d18 	.word	0x08010d18
 8006cec:	080128e8 	.word	0x080128e8
 8006cf0:	080128d8 	.word	0x080128d8
 8006cf4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d00:	2200      	movs	r2, #0
 8006d02:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006d10:	4293      	cmp	r3, r2
 8006d12:	bf28      	it	cs
 8006d14:	4613      	movcs	r3, r2
 8006d16:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006d18:	8a7b      	ldrh	r3, [r7, #18]
 8006d1a:	085b      	lsrs	r3, r3, #1
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d20:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d2e:	005b      	lsls	r3, r3, #1
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d206      	bcs.n	8006d44 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d40:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d46:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d50:	2200      	movs	r2, #0
 8006d52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8006d56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d58:	f004 f81c 	bl	800ad94 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5e:	7d1b      	ldrb	r3, [r3, #20]
 8006d60:	2b06      	cmp	r3, #6
 8006d62:	d111      	bne.n	8006d88 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d66:	8b5b      	ldrh	r3, [r3, #26]
 8006d68:	f003 0310 	and.w	r3, r3, #16
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00b      	beq.n	8006d88 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006d70:	4b9d      	ldr	r3, [pc, #628]	; (8006fe8 <tcp_slowtmr+0x584>)
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b28      	cmp	r3, #40	; 0x28
 8006d7c:	d904      	bls.n	8006d88 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d82:	3301      	adds	r3, #1
 8006d84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8a:	7a5b      	ldrb	r3, [r3, #9]
 8006d8c:	f003 0308 	and.w	r3, r3, #8
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d04c      	beq.n	8006e2e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8006d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d96:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d003      	beq.n	8006da4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006da0:	2b07      	cmp	r3, #7
 8006da2:	d144      	bne.n	8006e2e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006da4:	4b90      	ldr	r3, [pc, #576]	; (8006fe8 <tcp_slowtmr+0x584>)
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006db4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006db8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006dbc:	498b      	ldr	r1, [pc, #556]	; (8006fec <tcp_slowtmr+0x588>)
 8006dbe:	fba1 1303 	umull	r1, r3, r1, r3
 8006dc2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d90a      	bls.n	8006dde <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dcc:	3301      	adds	r3, #1
 8006dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8006dd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006ddc:	e027      	b.n	8006e2e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006dde:	4b82      	ldr	r3, [pc, #520]	; (8006fe8 <tcp_slowtmr+0x584>)
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006df4:	4618      	mov	r0, r3
 8006df6:	4b7e      	ldr	r3, [pc, #504]	; (8006ff0 <tcp_slowtmr+0x58c>)
 8006df8:	fb00 f303 	mul.w	r3, r0, r3
 8006dfc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006dfe:	497b      	ldr	r1, [pc, #492]	; (8006fec <tcp_slowtmr+0x588>)
 8006e00:	fba1 1303 	umull	r1, r3, r1, r3
 8006e04:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d911      	bls.n	8006e2e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8006e0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e0c:	f004 fac8 	bl	800b3a0 <tcp_keepalive>
 8006e10:	4603      	mov	r3, r0
 8006e12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8006e16:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d107      	bne.n	8006e2e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8006e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e20:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006e24:	3301      	adds	r3, #1
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d011      	beq.n	8006e5a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006e36:	4b6c      	ldr	r3, [pc, #432]	; (8006fe8 <tcp_slowtmr+0x584>)
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	1ad2      	subs	r2, r2, r3
 8006e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e42:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006e46:	4619      	mov	r1, r3
 8006e48:	460b      	mov	r3, r1
 8006e4a:	005b      	lsls	r3, r3, #1
 8006e4c:	440b      	add	r3, r1
 8006e4e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d302      	bcc.n	8006e5a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006e54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e56:	f000 fddb 	bl	8007a10 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5c:	7d1b      	ldrb	r3, [r3, #20]
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d10b      	bne.n	8006e7a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006e62:	4b61      	ldr	r3, [pc, #388]	; (8006fe8 <tcp_slowtmr+0x584>)
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	2b28      	cmp	r3, #40	; 0x28
 8006e6e:	d904      	bls.n	8006e7a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e74:	3301      	adds	r3, #1
 8006e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7c:	7d1b      	ldrb	r3, [r3, #20]
 8006e7e:	2b09      	cmp	r3, #9
 8006e80:	d10b      	bne.n	8006e9a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006e82:	4b59      	ldr	r3, [pc, #356]	; (8006fe8 <tcp_slowtmr+0x584>)
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	2bf0      	cmp	r3, #240	; 0xf0
 8006e8e:	d904      	bls.n	8006e9a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8006e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e94:	3301      	adds	r3, #1
 8006e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006e9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d060      	beq.n	8006f64 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006eaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006eac:	f000 fbfc 	bl	80076a8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d010      	beq.n	8006ed8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006eb6:	4b4f      	ldr	r3, [pc, #316]	; (8006ff4 <tcp_slowtmr+0x590>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d106      	bne.n	8006ece <tcp_slowtmr+0x46a>
 8006ec0:	4b4d      	ldr	r3, [pc, #308]	; (8006ff8 <tcp_slowtmr+0x594>)
 8006ec2:	f240 526d 	movw	r2, #1389	; 0x56d
 8006ec6:	494d      	ldr	r1, [pc, #308]	; (8006ffc <tcp_slowtmr+0x598>)
 8006ec8:	484d      	ldr	r0, [pc, #308]	; (8007000 <tcp_slowtmr+0x59c>)
 8006eca:	f007 fd85 	bl	800e9d8 <iprintf>
        prev->next = pcb->next;
 8006ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed0:	68da      	ldr	r2, [r3, #12]
 8006ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed4:	60da      	str	r2, [r3, #12]
 8006ed6:	e00f      	b.n	8006ef8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006ed8:	4b46      	ldr	r3, [pc, #280]	; (8006ff4 <tcp_slowtmr+0x590>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d006      	beq.n	8006ef0 <tcp_slowtmr+0x48c>
 8006ee2:	4b45      	ldr	r3, [pc, #276]	; (8006ff8 <tcp_slowtmr+0x594>)
 8006ee4:	f240 5271 	movw	r2, #1393	; 0x571
 8006ee8:	4946      	ldr	r1, [pc, #280]	; (8007004 <tcp_slowtmr+0x5a0>)
 8006eea:	4845      	ldr	r0, [pc, #276]	; (8007000 <tcp_slowtmr+0x59c>)
 8006eec:	f007 fd74 	bl	800e9d8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	4a3f      	ldr	r2, [pc, #252]	; (8006ff4 <tcp_slowtmr+0x590>)
 8006ef6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006ef8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d013      	beq.n	8006f28 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f02:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f06:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006f08:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8006f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f10:	8ad2      	ldrh	r2, [r2, #22]
 8006f12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f14:	8b09      	ldrh	r1, [r1, #24]
 8006f16:	9102      	str	r1, [sp, #8]
 8006f18:	9201      	str	r2, [sp, #4]
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	462b      	mov	r3, r5
 8006f1e:	4622      	mov	r2, r4
 8006f20:	4601      	mov	r1, r0
 8006f22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f24:	f004 f988 	bl	800b238 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f30:	7d1b      	ldrb	r3, [r3, #20]
 8006f32:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f36:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006f3e:	6838      	ldr	r0, [r7, #0]
 8006f40:	f7ff f9f2 	bl	8006328 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006f44:	4b30      	ldr	r3, [pc, #192]	; (8007008 <tcp_slowtmr+0x5a4>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d004      	beq.n	8006f5a <tcp_slowtmr+0x4f6>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f06f 010c 	mvn.w	r1, #12
 8006f56:	68b8      	ldr	r0, [r7, #8]
 8006f58:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006f5a:	4b2b      	ldr	r3, [pc, #172]	; (8007008 <tcp_slowtmr+0x5a4>)
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d037      	beq.n	8006fd2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8006f62:	e590      	b.n	8006a86 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f66:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f70:	7f1b      	ldrb	r3, [r3, #28]
 8006f72:	3301      	adds	r3, #1
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f78:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7c:	7f1a      	ldrb	r2, [r3, #28]
 8006f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f80:	7f5b      	ldrb	r3, [r3, #29]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d325      	bcc.n	8006fd2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8006f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f88:	2200      	movs	r2, #0
 8006f8a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006f8c:	4b1e      	ldr	r3, [pc, #120]	; (8007008 <tcp_slowtmr+0x5a4>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00b      	beq.n	8006fb4 <tcp_slowtmr+0x550>
 8006f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fa4:	6912      	ldr	r2, [r2, #16]
 8006fa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fa8:	4610      	mov	r0, r2
 8006faa:	4798      	blx	r3
 8006fac:	4603      	mov	r3, r0
 8006fae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006fb2:	e002      	b.n	8006fba <tcp_slowtmr+0x556>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006fba:	4b13      	ldr	r3, [pc, #76]	; (8007008 <tcp_slowtmr+0x5a4>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d000      	beq.n	8006fc4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8006fc2:	e560      	b.n	8006a86 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006fc4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d102      	bne.n	8006fd2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8006fcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fce:	f003 fb7f 	bl	800a6d0 <tcp_output>
  while (pcb != NULL) {
 8006fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f47f ad5c 	bne.w	8006a92 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8006fde:	4b0b      	ldr	r3, [pc, #44]	; (800700c <tcp_slowtmr+0x5a8>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006fe4:	e067      	b.n	80070b6 <tcp_slowtmr+0x652>
 8006fe6:	bf00      	nop
 8006fe8:	2000830c 	.word	0x2000830c
 8006fec:	10624dd3 	.word	0x10624dd3
 8006ff0:	000124f8 	.word	0x000124f8
 8006ff4:	20008318 	.word	0x20008318
 8006ff8:	08010918 	.word	0x08010918
 8006ffc:	08010d50 	.word	0x08010d50
 8007000:	0801095c 	.word	0x0801095c
 8007004:	08010d7c 	.word	0x08010d7c
 8007008:	20008320 	.word	0x20008320
 800700c:	2000831c 	.word	0x2000831c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007012:	7d1b      	ldrb	r3, [r3, #20]
 8007014:	2b0a      	cmp	r3, #10
 8007016:	d006      	beq.n	8007026 <tcp_slowtmr+0x5c2>
 8007018:	4b2b      	ldr	r3, [pc, #172]	; (80070c8 <tcp_slowtmr+0x664>)
 800701a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800701e:	492b      	ldr	r1, [pc, #172]	; (80070cc <tcp_slowtmr+0x668>)
 8007020:	482b      	ldr	r0, [pc, #172]	; (80070d0 <tcp_slowtmr+0x66c>)
 8007022:	f007 fcd9 	bl	800e9d8 <iprintf>
    pcb_remove = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800702c:	4b29      	ldr	r3, [pc, #164]	; (80070d4 <tcp_slowtmr+0x670>)
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2bf0      	cmp	r3, #240	; 0xf0
 8007038:	d904      	bls.n	8007044 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800703a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800703e:	3301      	adds	r3, #1
 8007040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007048:	2b00      	cmp	r3, #0
 800704a:	d02f      	beq.n	80070ac <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800704c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800704e:	f000 fb2b 	bl	80076a8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007054:	2b00      	cmp	r3, #0
 8007056:	d010      	beq.n	800707a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007058:	4b1f      	ldr	r3, [pc, #124]	; (80070d8 <tcp_slowtmr+0x674>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800705e:	429a      	cmp	r2, r3
 8007060:	d106      	bne.n	8007070 <tcp_slowtmr+0x60c>
 8007062:	4b19      	ldr	r3, [pc, #100]	; (80070c8 <tcp_slowtmr+0x664>)
 8007064:	f240 52af 	movw	r2, #1455	; 0x5af
 8007068:	491c      	ldr	r1, [pc, #112]	; (80070dc <tcp_slowtmr+0x678>)
 800706a:	4819      	ldr	r0, [pc, #100]	; (80070d0 <tcp_slowtmr+0x66c>)
 800706c:	f007 fcb4 	bl	800e9d8 <iprintf>
        prev->next = pcb->next;
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	60da      	str	r2, [r3, #12]
 8007078:	e00f      	b.n	800709a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800707a:	4b17      	ldr	r3, [pc, #92]	; (80070d8 <tcp_slowtmr+0x674>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007080:	429a      	cmp	r2, r3
 8007082:	d006      	beq.n	8007092 <tcp_slowtmr+0x62e>
 8007084:	4b10      	ldr	r3, [pc, #64]	; (80070c8 <tcp_slowtmr+0x664>)
 8007086:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800708a:	4915      	ldr	r1, [pc, #84]	; (80070e0 <tcp_slowtmr+0x67c>)
 800708c:	4810      	ldr	r0, [pc, #64]	; (80070d0 <tcp_slowtmr+0x66c>)
 800708e:	f007 fca3 	bl	800e9d8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	4a10      	ldr	r2, [pc, #64]	; (80070d8 <tcp_slowtmr+0x674>)
 8007098:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800709a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800709e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80070a4:	69f8      	ldr	r0, [r7, #28]
 80070a6:	f7ff f93f 	bl	8006328 <tcp_free>
 80070aa:	e004      	b.n	80070b6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80070ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80070b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80070b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1a9      	bne.n	8007010 <tcp_slowtmr+0x5ac>
    }
  }
}
 80070bc:	bf00      	nop
 80070be:	bf00      	nop
 80070c0:	3730      	adds	r7, #48	; 0x30
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bdb0      	pop	{r4, r5, r7, pc}
 80070c6:	bf00      	nop
 80070c8:	08010918 	.word	0x08010918
 80070cc:	08010da8 	.word	0x08010da8
 80070d0:	0801095c 	.word	0x0801095c
 80070d4:	2000830c 	.word	0x2000830c
 80070d8:	2000831c 	.word	0x2000831c
 80070dc:	08010dd8 	.word	0x08010dd8
 80070e0:	08010e00 	.word	0x08010e00

080070e4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80070ea:	4b2d      	ldr	r3, [pc, #180]	; (80071a0 <tcp_fasttmr+0xbc>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	3301      	adds	r3, #1
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	4b2b      	ldr	r3, [pc, #172]	; (80071a0 <tcp_fasttmr+0xbc>)
 80070f4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80070f6:	4b2b      	ldr	r3, [pc, #172]	; (80071a4 <tcp_fasttmr+0xc0>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80070fc:	e048      	b.n	8007190 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	7f9a      	ldrb	r2, [r3, #30]
 8007102:	4b27      	ldr	r3, [pc, #156]	; (80071a0 <tcp_fasttmr+0xbc>)
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d03f      	beq.n	800718a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800710a:	4b25      	ldr	r3, [pc, #148]	; (80071a0 <tcp_fasttmr+0xbc>)
 800710c:	781a      	ldrb	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	8b5b      	ldrh	r3, [r3, #26]
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d010      	beq.n	8007140 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	8b5b      	ldrh	r3, [r3, #26]
 8007122:	f043 0302 	orr.w	r3, r3, #2
 8007126:	b29a      	uxth	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f003 facf 	bl	800a6d0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	8b5b      	ldrh	r3, [r3, #26]
 8007136:	f023 0303 	bic.w	r3, r3, #3
 800713a:	b29a      	uxth	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	8b5b      	ldrh	r3, [r3, #26]
 8007144:	f003 0308 	and.w	r3, r3, #8
 8007148:	2b00      	cmp	r3, #0
 800714a:	d009      	beq.n	8007160 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8b5b      	ldrh	r3, [r3, #26]
 8007150:	f023 0308 	bic.w	r3, r3, #8
 8007154:	b29a      	uxth	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7ff fa78 	bl	8006650 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800716e:	4b0e      	ldr	r3, [pc, #56]	; (80071a8 <tcp_fasttmr+0xc4>)
 8007170:	2200      	movs	r2, #0
 8007172:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f819 	bl	80071ac <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800717a:	4b0b      	ldr	r3, [pc, #44]	; (80071a8 <tcp_fasttmr+0xc4>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d000      	beq.n	8007184 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007182:	e7b8      	b.n	80070f6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	607b      	str	r3, [r7, #4]
 8007188:	e002      	b.n	8007190 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1b3      	bne.n	80070fe <tcp_fasttmr+0x1a>
    }
  }
}
 8007196:	bf00      	nop
 8007198:	bf00      	nop
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	20008322 	.word	0x20008322
 80071a4:	20008318 	.word	0x20008318
 80071a8:	20008320 	.word	0x20008320

080071ac <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80071ac:	b590      	push	{r4, r7, lr}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d109      	bne.n	80071ce <tcp_process_refused_data+0x22>
 80071ba:	4b37      	ldr	r3, [pc, #220]	; (8007298 <tcp_process_refused_data+0xec>)
 80071bc:	f240 6209 	movw	r2, #1545	; 0x609
 80071c0:	4936      	ldr	r1, [pc, #216]	; (800729c <tcp_process_refused_data+0xf0>)
 80071c2:	4837      	ldr	r0, [pc, #220]	; (80072a0 <tcp_process_refused_data+0xf4>)
 80071c4:	f007 fc08 	bl	800e9d8 <iprintf>
 80071c8:	f06f 030f 	mvn.w	r3, #15
 80071cc:	e060      	b.n	8007290 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071d2:	7b5b      	ldrb	r3, [r3, #13]
 80071d4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071da:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00b      	beq.n	8007204 <tcp_process_refused_data+0x58>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6918      	ldr	r0, [r3, #16]
 80071f6:	2300      	movs	r3, #0
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	47a0      	blx	r4
 80071fe:	4603      	mov	r3, r0
 8007200:	73fb      	strb	r3, [r7, #15]
 8007202:	e007      	b.n	8007214 <tcp_process_refused_data+0x68>
 8007204:	2300      	movs	r3, #0
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	6879      	ldr	r1, [r7, #4]
 800720a:	2000      	movs	r0, #0
 800720c:	f000 f8a4 	bl	8007358 <tcp_recv_null>
 8007210:	4603      	mov	r3, r0
 8007212:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d12a      	bne.n	8007272 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800721c:	7bbb      	ldrb	r3, [r7, #14]
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b00      	cmp	r3, #0
 8007224:	d033      	beq.n	800728e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800722a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800722e:	d005      	beq.n	800723c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007234:	3301      	adds	r3, #1
 8007236:	b29a      	uxth	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00b      	beq.n	800725e <tcp_process_refused_data+0xb2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6918      	ldr	r0, [r3, #16]
 8007250:	2300      	movs	r3, #0
 8007252:	2200      	movs	r2, #0
 8007254:	6879      	ldr	r1, [r7, #4]
 8007256:	47a0      	blx	r4
 8007258:	4603      	mov	r3, r0
 800725a:	73fb      	strb	r3, [r7, #15]
 800725c:	e001      	b.n	8007262 <tcp_process_refused_data+0xb6>
 800725e:	2300      	movs	r3, #0
 8007260:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007266:	f113 0f0d 	cmn.w	r3, #13
 800726a:	d110      	bne.n	800728e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800726c:	f06f 030c 	mvn.w	r3, #12
 8007270:	e00e      	b.n	8007290 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007276:	f113 0f0d 	cmn.w	r3, #13
 800727a:	d102      	bne.n	8007282 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800727c:	f06f 030c 	mvn.w	r3, #12
 8007280:	e006      	b.n	8007290 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007288:	f06f 0304 	mvn.w	r3, #4
 800728c:	e000      	b.n	8007290 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	bd90      	pop	{r4, r7, pc}
 8007298:	08010918 	.word	0x08010918
 800729c:	08010e28 	.word	0x08010e28
 80072a0:	0801095c 	.word	0x0801095c

080072a4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80072ac:	e007      	b.n	80072be <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f80a 	bl	80072ce <tcp_seg_free>
    seg = next;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1f4      	bne.n	80072ae <tcp_segs_free+0xa>
  }
}
 80072c4:	bf00      	nop
 80072c6:	bf00      	nop
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b082      	sub	sp, #8
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00c      	beq.n	80072f6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d004      	beq.n	80072ee <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fe fcdb 	bl	8005ca4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	2003      	movs	r0, #3
 80072f2:	f7fd fe61 	bl	8004fb8 <memp_free>
  }
}
 80072f6:	bf00      	nop
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
	...

08007300 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d106      	bne.n	800731c <tcp_seg_copy+0x1c>
 800730e:	4b0f      	ldr	r3, [pc, #60]	; (800734c <tcp_seg_copy+0x4c>)
 8007310:	f240 6282 	movw	r2, #1666	; 0x682
 8007314:	490e      	ldr	r1, [pc, #56]	; (8007350 <tcp_seg_copy+0x50>)
 8007316:	480f      	ldr	r0, [pc, #60]	; (8007354 <tcp_seg_copy+0x54>)
 8007318:	f007 fb5e 	bl	800e9d8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800731c:	2003      	movs	r0, #3
 800731e:	f7fd fddb 	bl	8004ed8 <memp_malloc>
 8007322:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <tcp_seg_copy+0x2e>
    return NULL;
 800732a:	2300      	movs	r3, #0
 800732c:	e00a      	b.n	8007344 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800732e:	2210      	movs	r2, #16
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f007 fb20 	bl	800e978 <memcpy>
  pbuf_ref(cseg->p);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	4618      	mov	r0, r3
 800733e:	f7fe fd51 	bl	8005de4 <pbuf_ref>
  return cseg;
 8007342:	68fb      	ldr	r3, [r7, #12]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	08010918 	.word	0x08010918
 8007350:	08010e6c 	.word	0x08010e6c
 8007354:	0801095c 	.word	0x0801095c

08007358 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d109      	bne.n	8007380 <tcp_recv_null+0x28>
 800736c:	4b12      	ldr	r3, [pc, #72]	; (80073b8 <tcp_recv_null+0x60>)
 800736e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007372:	4912      	ldr	r1, [pc, #72]	; (80073bc <tcp_recv_null+0x64>)
 8007374:	4812      	ldr	r0, [pc, #72]	; (80073c0 <tcp_recv_null+0x68>)
 8007376:	f007 fb2f 	bl	800e9d8 <iprintf>
 800737a:	f06f 030f 	mvn.w	r3, #15
 800737e:	e016      	b.n	80073ae <tcp_recv_null+0x56>

  if (p != NULL) {
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d009      	beq.n	800739a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	891b      	ldrh	r3, [r3, #8]
 800738a:	4619      	mov	r1, r3
 800738c:	68b8      	ldr	r0, [r7, #8]
 800738e:	f7ff fb19 	bl	80069c4 <tcp_recved>
    pbuf_free(p);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7fe fc86 	bl	8005ca4 <pbuf_free>
 8007398:	e008      	b.n	80073ac <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800739a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d104      	bne.n	80073ac <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80073a2:	68b8      	ldr	r0, [r7, #8]
 80073a4:	f7ff f9be 	bl	8006724 <tcp_close>
 80073a8:	4603      	mov	r3, r0
 80073aa:	e000      	b.n	80073ae <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	08010918 	.word	0x08010918
 80073bc:	08010e88 	.word	0x08010e88
 80073c0:	0801095c 	.word	0x0801095c

080073c4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	4603      	mov	r3, r0
 80073cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80073ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	db01      	blt.n	80073da <tcp_kill_prio+0x16>
 80073d6:	79fb      	ldrb	r3, [r7, #7]
 80073d8:	e000      	b.n	80073dc <tcp_kill_prio+0x18>
 80073da:	237f      	movs	r3, #127	; 0x7f
 80073dc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80073de:	7afb      	ldrb	r3, [r7, #11]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d034      	beq.n	800744e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80073e4:	7afb      	ldrb	r3, [r7, #11]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80073ea:	2300      	movs	r3, #0
 80073ec:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80073ee:	2300      	movs	r3, #0
 80073f0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80073f2:	4b19      	ldr	r3, [pc, #100]	; (8007458 <tcp_kill_prio+0x94>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	617b      	str	r3, [r7, #20]
 80073f8:	e01f      	b.n	800743a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	7d5b      	ldrb	r3, [r3, #21]
 80073fe:	7afa      	ldrb	r2, [r7, #11]
 8007400:	429a      	cmp	r2, r3
 8007402:	d80c      	bhi.n	800741e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007408:	7afa      	ldrb	r2, [r7, #11]
 800740a:	429a      	cmp	r2, r3
 800740c:	d112      	bne.n	8007434 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800740e:	4b13      	ldr	r3, [pc, #76]	; (800745c <tcp_kill_prio+0x98>)
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	429a      	cmp	r2, r3
 800741c:	d80a      	bhi.n	8007434 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800741e:	4b0f      	ldr	r3, [pc, #60]	; (800745c <tcp_kill_prio+0x98>)
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	7d5b      	ldrb	r3, [r3, #21]
 8007432:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	617b      	str	r3, [r7, #20]
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1dc      	bne.n	80073fa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d004      	beq.n	8007450 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007446:	6938      	ldr	r0, [r7, #16]
 8007448:	f7ff fa56 	bl	80068f8 <tcp_abort>
 800744c:	e000      	b.n	8007450 <tcp_kill_prio+0x8c>
    return;
 800744e:	bf00      	nop
  }
}
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20008318 	.word	0x20008318
 800745c:	2000830c 	.word	0x2000830c

08007460 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	4603      	mov	r3, r0
 8007468:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800746a:	79fb      	ldrb	r3, [r7, #7]
 800746c:	2b08      	cmp	r3, #8
 800746e:	d009      	beq.n	8007484 <tcp_kill_state+0x24>
 8007470:	79fb      	ldrb	r3, [r7, #7]
 8007472:	2b09      	cmp	r3, #9
 8007474:	d006      	beq.n	8007484 <tcp_kill_state+0x24>
 8007476:	4b1a      	ldr	r3, [pc, #104]	; (80074e0 <tcp_kill_state+0x80>)
 8007478:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800747c:	4919      	ldr	r1, [pc, #100]	; (80074e4 <tcp_kill_state+0x84>)
 800747e:	481a      	ldr	r0, [pc, #104]	; (80074e8 <tcp_kill_state+0x88>)
 8007480:	f007 faaa 	bl	800e9d8 <iprintf>

  inactivity = 0;
 8007484:	2300      	movs	r3, #0
 8007486:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007488:	2300      	movs	r3, #0
 800748a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800748c:	4b17      	ldr	r3, [pc, #92]	; (80074ec <tcp_kill_state+0x8c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	617b      	str	r3, [r7, #20]
 8007492:	e017      	b.n	80074c4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	7d1b      	ldrb	r3, [r3, #20]
 8007498:	79fa      	ldrb	r2, [r7, #7]
 800749a:	429a      	cmp	r2, r3
 800749c:	d10f      	bne.n	80074be <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800749e:	4b14      	ldr	r3, [pc, #80]	; (80074f0 <tcp_kill_state+0x90>)
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d807      	bhi.n	80074be <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80074ae:	4b10      	ldr	r3, [pc, #64]	; (80074f0 <tcp_kill_state+0x90>)
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	617b      	str	r3, [r7, #20]
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1e4      	bne.n	8007494 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d003      	beq.n	80074d8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80074d0:	2100      	movs	r1, #0
 80074d2:	6938      	ldr	r0, [r7, #16]
 80074d4:	f7ff f952 	bl	800677c <tcp_abandon>
  }
}
 80074d8:	bf00      	nop
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	08010918 	.word	0x08010918
 80074e4:	08010ea4 	.word	0x08010ea4
 80074e8:	0801095c 	.word	0x0801095c
 80074ec:	20008318 	.word	0x20008318
 80074f0:	2000830c 	.word	0x2000830c

080074f4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80074fe:	2300      	movs	r3, #0
 8007500:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007502:	4b12      	ldr	r3, [pc, #72]	; (800754c <tcp_kill_timewait+0x58>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	e012      	b.n	8007530 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800750a:	4b11      	ldr	r3, [pc, #68]	; (8007550 <tcp_kill_timewait+0x5c>)
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	429a      	cmp	r2, r3
 8007518:	d807      	bhi.n	800752a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800751a:	4b0d      	ldr	r3, [pc, #52]	; (8007550 <tcp_kill_timewait+0x5c>)
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	60fb      	str	r3, [r7, #12]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1e9      	bne.n	800750a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d002      	beq.n	8007542 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800753c:	68b8      	ldr	r0, [r7, #8]
 800753e:	f7ff f9db 	bl	80068f8 <tcp_abort>
  }
}
 8007542:	bf00      	nop
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	2000831c 	.word	0x2000831c
 8007550:	2000830c 	.word	0x2000830c

08007554 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800755a:	4b10      	ldr	r3, [pc, #64]	; (800759c <tcp_handle_closepend+0x48>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007560:	e014      	b.n	800758c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	8b5b      	ldrh	r3, [r3, #26]
 800756c:	f003 0308 	and.w	r3, r3, #8
 8007570:	2b00      	cmp	r3, #0
 8007572:	d009      	beq.n	8007588 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	8b5b      	ldrh	r3, [r3, #26]
 8007578:	f023 0308 	bic.w	r3, r3, #8
 800757c:	b29a      	uxth	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7ff f864 	bl	8006650 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1e7      	bne.n	8007562 <tcp_handle_closepend+0xe>
  }
}
 8007592:	bf00      	nop
 8007594:	bf00      	nop
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	20008318 	.word	0x20008318

080075a0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	4603      	mov	r3, r0
 80075a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80075aa:	2001      	movs	r0, #1
 80075ac:	f7fd fc94 	bl	8004ed8 <memp_malloc>
 80075b0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d126      	bne.n	8007606 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80075b8:	f7ff ffcc 	bl	8007554 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80075bc:	f7ff ff9a 	bl	80074f4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80075c0:	2001      	movs	r0, #1
 80075c2:	f7fd fc89 	bl	8004ed8 <memp_malloc>
 80075c6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d11b      	bne.n	8007606 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80075ce:	2009      	movs	r0, #9
 80075d0:	f7ff ff46 	bl	8007460 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80075d4:	2001      	movs	r0, #1
 80075d6:	f7fd fc7f 	bl	8004ed8 <memp_malloc>
 80075da:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d111      	bne.n	8007606 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80075e2:	2008      	movs	r0, #8
 80075e4:	f7ff ff3c 	bl	8007460 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80075e8:	2001      	movs	r0, #1
 80075ea:	f7fd fc75 	bl	8004ed8 <memp_malloc>
 80075ee:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d107      	bne.n	8007606 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80075f6:	79fb      	ldrb	r3, [r7, #7]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7ff fee3 	bl	80073c4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80075fe:	2001      	movs	r0, #1
 8007600:	f7fd fc6a 	bl	8004ed8 <memp_malloc>
 8007604:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d03f      	beq.n	800768c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800760c:	229c      	movs	r2, #156	; 0x9c
 800760e:	2100      	movs	r1, #0
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f007 f9d9 	bl	800e9c8 <memset>
    pcb->prio = prio;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	79fa      	ldrb	r2, [r7, #7]
 800761a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007622:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800762c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	22ff      	movs	r2, #255	; 0xff
 800763a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007642:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2206      	movs	r2, #6
 8007648:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2206      	movs	r2, #6
 8007650:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007658:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2201      	movs	r2, #1
 800765e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007662:	4b0d      	ldr	r3, [pc, #52]	; (8007698 <tcp_alloc+0xf8>)
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800766a:	4b0c      	ldr	r3, [pc, #48]	; (800769c <tcp_alloc+0xfc>)
 800766c:	781a      	ldrb	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007678:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4a08      	ldr	r2, [pc, #32]	; (80076a0 <tcp_alloc+0x100>)
 8007680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4a07      	ldr	r2, [pc, #28]	; (80076a4 <tcp_alloc+0x104>)
 8007688:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800768c:	68fb      	ldr	r3, [r7, #12]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	2000830c 	.word	0x2000830c
 800769c:	20008322 	.word	0x20008322
 80076a0:	08007359 	.word	0x08007359
 80076a4:	006ddd00 	.word	0x006ddd00

080076a8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d107      	bne.n	80076c6 <tcp_pcb_purge+0x1e>
 80076b6:	4b21      	ldr	r3, [pc, #132]	; (800773c <tcp_pcb_purge+0x94>)
 80076b8:	f640 0251 	movw	r2, #2129	; 0x851
 80076bc:	4920      	ldr	r1, [pc, #128]	; (8007740 <tcp_pcb_purge+0x98>)
 80076be:	4821      	ldr	r0, [pc, #132]	; (8007744 <tcp_pcb_purge+0x9c>)
 80076c0:	f007 f98a 	bl	800e9d8 <iprintf>
 80076c4:	e037      	b.n	8007736 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	7d1b      	ldrb	r3, [r3, #20]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d033      	beq.n	8007736 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80076d2:	2b0a      	cmp	r3, #10
 80076d4:	d02f      	beq.n	8007736 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d02b      	beq.n	8007736 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d007      	beq.n	80076f6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fada 	bl	8005ca4 <pbuf_free>
      pcb->refused_data = NULL;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f986 	bl	8007a10 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800770a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007710:	4618      	mov	r0, r3
 8007712:	f7ff fdc7 	bl	80072a4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff fdc2 	bl	80072a4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	66da      	str	r2, [r3, #108]	; 0x6c
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	08010918 	.word	0x08010918
 8007740:	08010f64 	.word	0x08010f64
 8007744:	0801095c 	.word	0x0801095c

08007748 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d106      	bne.n	8007766 <tcp_pcb_remove+0x1e>
 8007758:	4b3e      	ldr	r3, [pc, #248]	; (8007854 <tcp_pcb_remove+0x10c>)
 800775a:	f640 0283 	movw	r2, #2179	; 0x883
 800775e:	493e      	ldr	r1, [pc, #248]	; (8007858 <tcp_pcb_remove+0x110>)
 8007760:	483e      	ldr	r0, [pc, #248]	; (800785c <tcp_pcb_remove+0x114>)
 8007762:	f007 f939 	bl	800e9d8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d106      	bne.n	800777a <tcp_pcb_remove+0x32>
 800776c:	4b39      	ldr	r3, [pc, #228]	; (8007854 <tcp_pcb_remove+0x10c>)
 800776e:	f640 0284 	movw	r2, #2180	; 0x884
 8007772:	493b      	ldr	r1, [pc, #236]	; (8007860 <tcp_pcb_remove+0x118>)
 8007774:	4839      	ldr	r0, [pc, #228]	; (800785c <tcp_pcb_remove+0x114>)
 8007776:	f007 f92f 	bl	800e9d8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	683a      	ldr	r2, [r7, #0]
 8007780:	429a      	cmp	r2, r3
 8007782:	d105      	bne.n	8007790 <tcp_pcb_remove+0x48>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68da      	ldr	r2, [r3, #12]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	e013      	b.n	80077b8 <tcp_pcb_remove+0x70>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	60fb      	str	r3, [r7, #12]
 8007796:	e00c      	b.n	80077b2 <tcp_pcb_remove+0x6a>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d104      	bne.n	80077ac <tcp_pcb_remove+0x64>
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	60da      	str	r2, [r3, #12]
 80077aa:	e005      	b.n	80077b8 <tcp_pcb_remove+0x70>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	60fb      	str	r3, [r7, #12]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1ef      	bne.n	8007798 <tcp_pcb_remove+0x50>
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2200      	movs	r2, #0
 80077bc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80077be:	6838      	ldr	r0, [r7, #0]
 80077c0:	f7ff ff72 	bl	80076a8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	7d1b      	ldrb	r3, [r3, #20]
 80077c8:	2b0a      	cmp	r3, #10
 80077ca:	d013      	beq.n	80077f4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d00f      	beq.n	80077f4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	8b5b      	ldrh	r3, [r3, #26]
 80077d8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d009      	beq.n	80077f4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	8b5b      	ldrh	r3, [r3, #26]
 80077e4:	f043 0302 	orr.w	r3, r3, #2
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80077ee:	6838      	ldr	r0, [r7, #0]
 80077f0:	f002 ff6e 	bl	800a6d0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	7d1b      	ldrb	r3, [r3, #20]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d020      	beq.n	800783e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007800:	2b00      	cmp	r3, #0
 8007802:	d006      	beq.n	8007812 <tcp_pcb_remove+0xca>
 8007804:	4b13      	ldr	r3, [pc, #76]	; (8007854 <tcp_pcb_remove+0x10c>)
 8007806:	f640 0293 	movw	r2, #2195	; 0x893
 800780a:	4916      	ldr	r1, [pc, #88]	; (8007864 <tcp_pcb_remove+0x11c>)
 800780c:	4813      	ldr	r0, [pc, #76]	; (800785c <tcp_pcb_remove+0x114>)
 800780e:	f007 f8e3 	bl	800e9d8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007816:	2b00      	cmp	r3, #0
 8007818:	d006      	beq.n	8007828 <tcp_pcb_remove+0xe0>
 800781a:	4b0e      	ldr	r3, [pc, #56]	; (8007854 <tcp_pcb_remove+0x10c>)
 800781c:	f640 0294 	movw	r2, #2196	; 0x894
 8007820:	4911      	ldr	r1, [pc, #68]	; (8007868 <tcp_pcb_remove+0x120>)
 8007822:	480e      	ldr	r0, [pc, #56]	; (800785c <tcp_pcb_remove+0x114>)
 8007824:	f007 f8d8 	bl	800e9d8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800782c:	2b00      	cmp	r3, #0
 800782e:	d006      	beq.n	800783e <tcp_pcb_remove+0xf6>
 8007830:	4b08      	ldr	r3, [pc, #32]	; (8007854 <tcp_pcb_remove+0x10c>)
 8007832:	f640 0296 	movw	r2, #2198	; 0x896
 8007836:	490d      	ldr	r1, [pc, #52]	; (800786c <tcp_pcb_remove+0x124>)
 8007838:	4808      	ldr	r0, [pc, #32]	; (800785c <tcp_pcb_remove+0x114>)
 800783a:	f007 f8cd 	bl	800e9d8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2200      	movs	r2, #0
 8007842:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	2200      	movs	r2, #0
 8007848:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800784a:	bf00      	nop
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	08010918 	.word	0x08010918
 8007858:	08010f80 	.word	0x08010f80
 800785c:	0801095c 	.word	0x0801095c
 8007860:	08010f9c 	.word	0x08010f9c
 8007864:	08010fbc 	.word	0x08010fbc
 8007868:	08010fd4 	.word	0x08010fd4
 800786c:	08010ff0 	.word	0x08010ff0

08007870 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d106      	bne.n	800788c <tcp_next_iss+0x1c>
 800787e:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <tcp_next_iss+0x38>)
 8007880:	f640 02af 	movw	r2, #2223	; 0x8af
 8007884:	4909      	ldr	r1, [pc, #36]	; (80078ac <tcp_next_iss+0x3c>)
 8007886:	480a      	ldr	r0, [pc, #40]	; (80078b0 <tcp_next_iss+0x40>)
 8007888:	f007 f8a6 	bl	800e9d8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800788c:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <tcp_next_iss+0x44>)
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	4b09      	ldr	r3, [pc, #36]	; (80078b8 <tcp_next_iss+0x48>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4413      	add	r3, r2
 8007896:	4a07      	ldr	r2, [pc, #28]	; (80078b4 <tcp_next_iss+0x44>)
 8007898:	6013      	str	r3, [r2, #0]
  return iss;
 800789a:	4b06      	ldr	r3, [pc, #24]	; (80078b4 <tcp_next_iss+0x44>)
 800789c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	08010918 	.word	0x08010918
 80078ac:	08011008 	.word	0x08011008
 80078b0:	0801095c 	.word	0x0801095c
 80078b4:	20000024 	.word	0x20000024
 80078b8:	2000830c 	.word	0x2000830c

080078bc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	4603      	mov	r3, r0
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d106      	bne.n	80078de <tcp_eff_send_mss_netif+0x22>
 80078d0:	4b14      	ldr	r3, [pc, #80]	; (8007924 <tcp_eff_send_mss_netif+0x68>)
 80078d2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80078d6:	4914      	ldr	r1, [pc, #80]	; (8007928 <tcp_eff_send_mss_netif+0x6c>)
 80078d8:	4814      	ldr	r0, [pc, #80]	; (800792c <tcp_eff_send_mss_netif+0x70>)
 80078da:	f007 f87d 	bl	800e9d8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80078e4:	89fb      	ldrh	r3, [r7, #14]
 80078e6:	e019      	b.n	800791c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80078ec:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80078ee:	8afb      	ldrh	r3, [r7, #22]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d012      	beq.n	800791a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80078f4:	2328      	movs	r3, #40	; 0x28
 80078f6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80078f8:	8afa      	ldrh	r2, [r7, #22]
 80078fa:	8abb      	ldrh	r3, [r7, #20]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d904      	bls.n	800790a <tcp_eff_send_mss_netif+0x4e>
 8007900:	8afa      	ldrh	r2, [r7, #22]
 8007902:	8abb      	ldrh	r3, [r7, #20]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	b29b      	uxth	r3, r3
 8007908:	e000      	b.n	800790c <tcp_eff_send_mss_netif+0x50>
 800790a:	2300      	movs	r3, #0
 800790c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800790e:	8a7a      	ldrh	r2, [r7, #18]
 8007910:	89fb      	ldrh	r3, [r7, #14]
 8007912:	4293      	cmp	r3, r2
 8007914:	bf28      	it	cs
 8007916:	4613      	movcs	r3, r2
 8007918:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800791a:	89fb      	ldrh	r3, [r7, #14]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3718      	adds	r7, #24
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	08010918 	.word	0x08010918
 8007928:	08011024 	.word	0x08011024
 800792c:	0801095c 	.word	0x0801095c

08007930 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d119      	bne.n	8007978 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007944:	4b10      	ldr	r3, [pc, #64]	; (8007988 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007946:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800794a:	4910      	ldr	r1, [pc, #64]	; (800798c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800794c:	4810      	ldr	r0, [pc, #64]	; (8007990 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800794e:	f007 f843 	bl	800e9d8 <iprintf>

  while (pcb != NULL) {
 8007952:	e011      	b.n	8007978 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	429a      	cmp	r2, r3
 800795e:	d108      	bne.n	8007972 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f7fe ffc6 	bl	80068f8 <tcp_abort>
      pcb = next;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	e002      	b.n	8007978 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1ea      	bne.n	8007954 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800797e:	bf00      	nop
 8007980:	bf00      	nop
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	08010918 	.word	0x08010918
 800798c:	0801104c 	.word	0x0801104c
 8007990:	0801095c 	.word	0x0801095c

08007994 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d02a      	beq.n	80079fa <tcp_netif_ip_addr_changed+0x66>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d026      	beq.n	80079fa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80079ac:	4b15      	ldr	r3, [pc, #84]	; (8007a04 <tcp_netif_ip_addr_changed+0x70>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4619      	mov	r1, r3
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7ff ffbc 	bl	8007930 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80079b8:	4b13      	ldr	r3, [pc, #76]	; (8007a08 <tcp_netif_ip_addr_changed+0x74>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4619      	mov	r1, r3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7ff ffb6 	bl	8007930 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d017      	beq.n	80079fa <tcp_netif_ip_addr_changed+0x66>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d013      	beq.n	80079fa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80079d2:	4b0e      	ldr	r3, [pc, #56]	; (8007a0c <tcp_netif_ip_addr_changed+0x78>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	e00c      	b.n	80079f4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d103      	bne.n	80079ee <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	60fb      	str	r3, [r7, #12]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1ef      	bne.n	80079da <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80079fa:	bf00      	nop
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	20008318 	.word	0x20008318
 8007a08:	20008310 	.word	0x20008310
 8007a0c:	20008314 	.word	0x20008314

08007a10 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d007      	beq.n	8007a30 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7ff fc3d 	bl	80072a4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007a30:	bf00      	nop
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007a38:	b590      	push	{r4, r7, lr}
 8007a3a:	b08d      	sub	sp, #52	; 0x34
 8007a3c:	af04      	add	r7, sp, #16
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d105      	bne.n	8007a54 <tcp_input+0x1c>
 8007a48:	4b9b      	ldr	r3, [pc, #620]	; (8007cb8 <tcp_input+0x280>)
 8007a4a:	2283      	movs	r2, #131	; 0x83
 8007a4c:	499b      	ldr	r1, [pc, #620]	; (8007cbc <tcp_input+0x284>)
 8007a4e:	489c      	ldr	r0, [pc, #624]	; (8007cc0 <tcp_input+0x288>)
 8007a50:	f006 ffc2 	bl	800e9d8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	4a9a      	ldr	r2, [pc, #616]	; (8007cc4 <tcp_input+0x28c>)
 8007a5a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	895b      	ldrh	r3, [r3, #10]
 8007a60:	2b13      	cmp	r3, #19
 8007a62:	f240 83d1 	bls.w	8008208 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007a66:	4b98      	ldr	r3, [pc, #608]	; (8007cc8 <tcp_input+0x290>)
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	4a97      	ldr	r2, [pc, #604]	; (8007cc8 <tcp_input+0x290>)
 8007a6c:	6812      	ldr	r2, [r2, #0]
 8007a6e:	4611      	mov	r1, r2
 8007a70:	4618      	mov	r0, r3
 8007a72:	f005 ff67 	bl	800d944 <ip4_addr_isbroadcast_u32>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f040 83c7 	bne.w	800820c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007a7e:	4b92      	ldr	r3, [pc, #584]	; (8007cc8 <tcp_input+0x290>)
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007a86:	2be0      	cmp	r3, #224	; 0xe0
 8007a88:	f000 83c0 	beq.w	800820c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007a8c:	4b8d      	ldr	r3, [pc, #564]	; (8007cc4 <tcp_input+0x28c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	899b      	ldrh	r3, [r3, #12]
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fc fda7 	bl	80045e8 <lwip_htons>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	0b1b      	lsrs	r3, r3, #12
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007aa6:	7cbb      	ldrb	r3, [r7, #18]
 8007aa8:	2b13      	cmp	r3, #19
 8007aaa:	f240 83b1 	bls.w	8008210 <tcp_input+0x7d8>
 8007aae:	7cbb      	ldrb	r3, [r7, #18]
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	891b      	ldrh	r3, [r3, #8]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	f200 83aa 	bhi.w	8008210 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007abc:	7cbb      	ldrb	r3, [r7, #18]
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	3b14      	subs	r3, #20
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	4b81      	ldr	r3, [pc, #516]	; (8007ccc <tcp_input+0x294>)
 8007ac6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007ac8:	4b81      	ldr	r3, [pc, #516]	; (8007cd0 <tcp_input+0x298>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	895a      	ldrh	r2, [r3, #10]
 8007ad2:	7cbb      	ldrb	r3, [r7, #18]
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d309      	bcc.n	8007aee <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007ada:	4b7c      	ldr	r3, [pc, #496]	; (8007ccc <tcp_input+0x294>)
 8007adc:	881a      	ldrh	r2, [r3, #0]
 8007ade:	4b7d      	ldr	r3, [pc, #500]	; (8007cd4 <tcp_input+0x29c>)
 8007ae0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007ae2:	7cbb      	ldrb	r3, [r7, #18]
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7fe f856 	bl	8005b98 <pbuf_remove_header>
 8007aec:	e04e      	b.n	8007b8c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d105      	bne.n	8007b02 <tcp_input+0xca>
 8007af6:	4b70      	ldr	r3, [pc, #448]	; (8007cb8 <tcp_input+0x280>)
 8007af8:	22c2      	movs	r2, #194	; 0xc2
 8007afa:	4977      	ldr	r1, [pc, #476]	; (8007cd8 <tcp_input+0x2a0>)
 8007afc:	4870      	ldr	r0, [pc, #448]	; (8007cc0 <tcp_input+0x288>)
 8007afe:	f006 ff6b 	bl	800e9d8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007b02:	2114      	movs	r1, #20
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7fe f847 	bl	8005b98 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	895a      	ldrh	r2, [r3, #10]
 8007b0e:	4b71      	ldr	r3, [pc, #452]	; (8007cd4 <tcp_input+0x29c>)
 8007b10:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007b12:	4b6e      	ldr	r3, [pc, #440]	; (8007ccc <tcp_input+0x294>)
 8007b14:	881a      	ldrh	r2, [r3, #0]
 8007b16:	4b6f      	ldr	r3, [pc, #444]	; (8007cd4 <tcp_input+0x29c>)
 8007b18:	881b      	ldrh	r3, [r3, #0]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007b1e:	4b6d      	ldr	r3, [pc, #436]	; (8007cd4 <tcp_input+0x29c>)
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	4619      	mov	r1, r3
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7fe f837 	bl	8005b98 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	895b      	ldrh	r3, [r3, #10]
 8007b30:	8a3a      	ldrh	r2, [r7, #16]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	f200 836e 	bhi.w	8008214 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	4a64      	ldr	r2, [pc, #400]	; (8007cd0 <tcp_input+0x298>)
 8007b40:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	8a3a      	ldrh	r2, [r7, #16]
 8007b48:	4611      	mov	r1, r2
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fe f824 	bl	8005b98 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	891a      	ldrh	r2, [r3, #8]
 8007b54:	8a3b      	ldrh	r3, [r7, #16]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	895b      	ldrh	r3, [r3, #10]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d005      	beq.n	8007b72 <tcp_input+0x13a>
 8007b66:	4b54      	ldr	r3, [pc, #336]	; (8007cb8 <tcp_input+0x280>)
 8007b68:	22df      	movs	r2, #223	; 0xdf
 8007b6a:	495c      	ldr	r1, [pc, #368]	; (8007cdc <tcp_input+0x2a4>)
 8007b6c:	4854      	ldr	r0, [pc, #336]	; (8007cc0 <tcp_input+0x288>)
 8007b6e:	f006 ff33 	bl	800e9d8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	891a      	ldrh	r2, [r3, #8]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	891b      	ldrh	r3, [r3, #8]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d005      	beq.n	8007b8c <tcp_input+0x154>
 8007b80:	4b4d      	ldr	r3, [pc, #308]	; (8007cb8 <tcp_input+0x280>)
 8007b82:	22e0      	movs	r2, #224	; 0xe0
 8007b84:	4956      	ldr	r1, [pc, #344]	; (8007ce0 <tcp_input+0x2a8>)
 8007b86:	484e      	ldr	r0, [pc, #312]	; (8007cc0 <tcp_input+0x288>)
 8007b88:	f006 ff26 	bl	800e9d8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007b8c:	4b4d      	ldr	r3, [pc, #308]	; (8007cc4 <tcp_input+0x28c>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	4a4b      	ldr	r2, [pc, #300]	; (8007cc4 <tcp_input+0x28c>)
 8007b96:	6814      	ldr	r4, [r2, #0]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fc fd25 	bl	80045e8 <lwip_htons>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007ba2:	4b48      	ldr	r3, [pc, #288]	; (8007cc4 <tcp_input+0x28c>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	885b      	ldrh	r3, [r3, #2]
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	4a46      	ldr	r2, [pc, #280]	; (8007cc4 <tcp_input+0x28c>)
 8007bac:	6814      	ldr	r4, [r2, #0]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7fc fd1a 	bl	80045e8 <lwip_htons>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007bb8:	4b42      	ldr	r3, [pc, #264]	; (8007cc4 <tcp_input+0x28c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	4a41      	ldr	r2, [pc, #260]	; (8007cc4 <tcp_input+0x28c>)
 8007bc0:	6814      	ldr	r4, [r2, #0]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fc fd25 	bl	8004612 <lwip_htonl>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	6063      	str	r3, [r4, #4]
 8007bcc:	6863      	ldr	r3, [r4, #4]
 8007bce:	4a45      	ldr	r2, [pc, #276]	; (8007ce4 <tcp_input+0x2ac>)
 8007bd0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007bd2:	4b3c      	ldr	r3, [pc, #240]	; (8007cc4 <tcp_input+0x28c>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	4a3a      	ldr	r2, [pc, #232]	; (8007cc4 <tcp_input+0x28c>)
 8007bda:	6814      	ldr	r4, [r2, #0]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fc fd18 	bl	8004612 <lwip_htonl>
 8007be2:	4603      	mov	r3, r0
 8007be4:	60a3      	str	r3, [r4, #8]
 8007be6:	68a3      	ldr	r3, [r4, #8]
 8007be8:	4a3f      	ldr	r2, [pc, #252]	; (8007ce8 <tcp_input+0x2b0>)
 8007bea:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007bec:	4b35      	ldr	r3, [pc, #212]	; (8007cc4 <tcp_input+0x28c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	89db      	ldrh	r3, [r3, #14]
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	4a33      	ldr	r2, [pc, #204]	; (8007cc4 <tcp_input+0x28c>)
 8007bf6:	6814      	ldr	r4, [r2, #0]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fc fcf5 	bl	80045e8 <lwip_htons>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007c02:	4b30      	ldr	r3, [pc, #192]	; (8007cc4 <tcp_input+0x28c>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	899b      	ldrh	r3, [r3, #12]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fc fcec 	bl	80045e8 <lwip_htons>
 8007c10:	4603      	mov	r3, r0
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	4b34      	ldr	r3, [pc, #208]	; (8007cec <tcp_input+0x2b4>)
 8007c1c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	891a      	ldrh	r2, [r3, #8]
 8007c22:	4b33      	ldr	r3, [pc, #204]	; (8007cf0 <tcp_input+0x2b8>)
 8007c24:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007c26:	4b31      	ldr	r3, [pc, #196]	; (8007cec <tcp_input+0x2b4>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	f003 0303 	and.w	r3, r3, #3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00c      	beq.n	8007c4c <tcp_input+0x214>
    tcplen++;
 8007c32:	4b2f      	ldr	r3, [pc, #188]	; (8007cf0 <tcp_input+0x2b8>)
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	3301      	adds	r3, #1
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	4b2d      	ldr	r3, [pc, #180]	; (8007cf0 <tcp_input+0x2b8>)
 8007c3c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	891a      	ldrh	r2, [r3, #8]
 8007c42:	4b2b      	ldr	r3, [pc, #172]	; (8007cf0 <tcp_input+0x2b8>)
 8007c44:	881b      	ldrh	r3, [r3, #0]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	f200 82e6 	bhi.w	8008218 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c50:	4b28      	ldr	r3, [pc, #160]	; (8007cf4 <tcp_input+0x2bc>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	61fb      	str	r3, [r7, #28]
 8007c56:	e09d      	b.n	8007d94 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	7d1b      	ldrb	r3, [r3, #20]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d105      	bne.n	8007c6c <tcp_input+0x234>
 8007c60:	4b15      	ldr	r3, [pc, #84]	; (8007cb8 <tcp_input+0x280>)
 8007c62:	22fb      	movs	r2, #251	; 0xfb
 8007c64:	4924      	ldr	r1, [pc, #144]	; (8007cf8 <tcp_input+0x2c0>)
 8007c66:	4816      	ldr	r0, [pc, #88]	; (8007cc0 <tcp_input+0x288>)
 8007c68:	f006 feb6 	bl	800e9d8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	7d1b      	ldrb	r3, [r3, #20]
 8007c70:	2b0a      	cmp	r3, #10
 8007c72:	d105      	bne.n	8007c80 <tcp_input+0x248>
 8007c74:	4b10      	ldr	r3, [pc, #64]	; (8007cb8 <tcp_input+0x280>)
 8007c76:	22fc      	movs	r2, #252	; 0xfc
 8007c78:	4920      	ldr	r1, [pc, #128]	; (8007cfc <tcp_input+0x2c4>)
 8007c7a:	4811      	ldr	r0, [pc, #68]	; (8007cc0 <tcp_input+0x288>)
 8007c7c:	f006 feac 	bl	800e9d8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	7d1b      	ldrb	r3, [r3, #20]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d105      	bne.n	8007c94 <tcp_input+0x25c>
 8007c88:	4b0b      	ldr	r3, [pc, #44]	; (8007cb8 <tcp_input+0x280>)
 8007c8a:	22fd      	movs	r2, #253	; 0xfd
 8007c8c:	491c      	ldr	r1, [pc, #112]	; (8007d00 <tcp_input+0x2c8>)
 8007c8e:	480c      	ldr	r0, [pc, #48]	; (8007cc0 <tcp_input+0x288>)
 8007c90:	f006 fea2 	bl	800e9d8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	7a1b      	ldrb	r3, [r3, #8]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d033      	beq.n	8007d04 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	7a1a      	ldrb	r2, [r3, #8]
 8007ca0:	4b09      	ldr	r3, [pc, #36]	; (8007cc8 <tcp_input+0x290>)
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ca8:	3301      	adds	r3, #1
 8007caa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d029      	beq.n	8007d04 <tcp_input+0x2cc>
      prev = pcb;
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	61bb      	str	r3, [r7, #24]
      continue;
 8007cb4:	e06b      	b.n	8007d8e <tcp_input+0x356>
 8007cb6:	bf00      	nop
 8007cb8:	08011080 	.word	0x08011080
 8007cbc:	080110b4 	.word	0x080110b4
 8007cc0:	080110cc 	.word	0x080110cc
 8007cc4:	20008334 	.word	0x20008334
 8007cc8:	20004d9c 	.word	0x20004d9c
 8007ccc:	20008338 	.word	0x20008338
 8007cd0:	2000833c 	.word	0x2000833c
 8007cd4:	2000833a 	.word	0x2000833a
 8007cd8:	080110f4 	.word	0x080110f4
 8007cdc:	08011104 	.word	0x08011104
 8007ce0:	08011110 	.word	0x08011110
 8007ce4:	20008344 	.word	0x20008344
 8007ce8:	20008348 	.word	0x20008348
 8007cec:	20008350 	.word	0x20008350
 8007cf0:	2000834e 	.word	0x2000834e
 8007cf4:	20008318 	.word	0x20008318
 8007cf8:	08011130 	.word	0x08011130
 8007cfc:	08011158 	.word	0x08011158
 8007d00:	08011184 	.word	0x08011184
    }

    if (pcb->remote_port == tcphdr->src &&
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	8b1a      	ldrh	r2, [r3, #24]
 8007d08:	4b72      	ldr	r3, [pc, #456]	; (8007ed4 <tcp_input+0x49c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	881b      	ldrh	r3, [r3, #0]
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d13a      	bne.n	8007d8a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	8ada      	ldrh	r2, [r3, #22]
 8007d18:	4b6e      	ldr	r3, [pc, #440]	; (8007ed4 <tcp_input+0x49c>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	885b      	ldrh	r3, [r3, #2]
 8007d1e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d132      	bne.n	8007d8a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	4b6b      	ldr	r3, [pc, #428]	; (8007ed8 <tcp_input+0x4a0>)
 8007d2a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d12c      	bne.n	8007d8a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	4b68      	ldr	r3, [pc, #416]	; (8007ed8 <tcp_input+0x4a0>)
 8007d36:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d126      	bne.n	8007d8a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	69fa      	ldr	r2, [r7, #28]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d106      	bne.n	8007d54 <tcp_input+0x31c>
 8007d46:	4b65      	ldr	r3, [pc, #404]	; (8007edc <tcp_input+0x4a4>)
 8007d48:	f240 120d 	movw	r2, #269	; 0x10d
 8007d4c:	4964      	ldr	r1, [pc, #400]	; (8007ee0 <tcp_input+0x4a8>)
 8007d4e:	4865      	ldr	r0, [pc, #404]	; (8007ee4 <tcp_input+0x4ac>)
 8007d50:	f006 fe42 	bl	800e9d8 <iprintf>
      if (prev != NULL) {
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00a      	beq.n	8007d70 <tcp_input+0x338>
        prev->next = pcb->next;
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	68da      	ldr	r2, [r3, #12]
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007d62:	4b61      	ldr	r3, [pc, #388]	; (8007ee8 <tcp_input+0x4b0>)
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007d6a:	4a5f      	ldr	r2, [pc, #380]	; (8007ee8 <tcp_input+0x4b0>)
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	69fa      	ldr	r2, [r7, #28]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d111      	bne.n	8007d9e <tcp_input+0x366>
 8007d7a:	4b58      	ldr	r3, [pc, #352]	; (8007edc <tcp_input+0x4a4>)
 8007d7c:	f240 1215 	movw	r2, #277	; 0x115
 8007d80:	495a      	ldr	r1, [pc, #360]	; (8007eec <tcp_input+0x4b4>)
 8007d82:	4858      	ldr	r0, [pc, #352]	; (8007ee4 <tcp_input+0x4ac>)
 8007d84:	f006 fe28 	bl	800e9d8 <iprintf>
      break;
 8007d88:	e009      	b.n	8007d9e <tcp_input+0x366>
    }
    prev = pcb;
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	61fb      	str	r3, [r7, #28]
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f47f af5e 	bne.w	8007c58 <tcp_input+0x220>
 8007d9c:	e000      	b.n	8007da0 <tcp_input+0x368>
      break;
 8007d9e:	bf00      	nop
  }

  if (pcb == NULL) {
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f040 80aa 	bne.w	8007efc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007da8:	4b51      	ldr	r3, [pc, #324]	; (8007ef0 <tcp_input+0x4b8>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	61fb      	str	r3, [r7, #28]
 8007dae:	e03f      	b.n	8007e30 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	7d1b      	ldrb	r3, [r3, #20]
 8007db4:	2b0a      	cmp	r3, #10
 8007db6:	d006      	beq.n	8007dc6 <tcp_input+0x38e>
 8007db8:	4b48      	ldr	r3, [pc, #288]	; (8007edc <tcp_input+0x4a4>)
 8007dba:	f240 121f 	movw	r2, #287	; 0x11f
 8007dbe:	494d      	ldr	r1, [pc, #308]	; (8007ef4 <tcp_input+0x4bc>)
 8007dc0:	4848      	ldr	r0, [pc, #288]	; (8007ee4 <tcp_input+0x4ac>)
 8007dc2:	f006 fe09 	bl	800e9d8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	7a1b      	ldrb	r3, [r3, #8]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d009      	beq.n	8007de2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	7a1a      	ldrb	r2, [r3, #8]
 8007dd2:	4b41      	ldr	r3, [pc, #260]	; (8007ed8 <tcp_input+0x4a0>)
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007dda:	3301      	adds	r3, #1
 8007ddc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d122      	bne.n	8007e28 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	8b1a      	ldrh	r2, [r3, #24]
 8007de6:	4b3b      	ldr	r3, [pc, #236]	; (8007ed4 <tcp_input+0x49c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	881b      	ldrh	r3, [r3, #0]
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d11b      	bne.n	8007e2a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	8ada      	ldrh	r2, [r3, #22]
 8007df6:	4b37      	ldr	r3, [pc, #220]	; (8007ed4 <tcp_input+0x49c>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	885b      	ldrh	r3, [r3, #2]
 8007dfc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d113      	bne.n	8007e2a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	685a      	ldr	r2, [r3, #4]
 8007e06:	4b34      	ldr	r3, [pc, #208]	; (8007ed8 <tcp_input+0x4a0>)
 8007e08:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d10d      	bne.n	8007e2a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	4b31      	ldr	r3, [pc, #196]	; (8007ed8 <tcp_input+0x4a0>)
 8007e14:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d107      	bne.n	8007e2a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007e1a:	69f8      	ldr	r0, [r7, #28]
 8007e1c:	f000 fb56 	bl	80084cc <tcp_timewait_input>
        }
        pbuf_free(p);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f7fd ff3f 	bl	8005ca4 <pbuf_free>
        return;
 8007e26:	e1fd      	b.n	8008224 <tcp_input+0x7ec>
        continue;
 8007e28:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	61fb      	str	r3, [r7, #28]
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1bc      	bne.n	8007db0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007e36:	2300      	movs	r3, #0
 8007e38:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007e3a:	4b2f      	ldr	r3, [pc, #188]	; (8007ef8 <tcp_input+0x4c0>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	617b      	str	r3, [r7, #20]
 8007e40:	e02a      	b.n	8007e98 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	7a1b      	ldrb	r3, [r3, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00c      	beq.n	8007e64 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	7a1a      	ldrb	r2, [r3, #8]
 8007e4e:	4b22      	ldr	r3, [pc, #136]	; (8007ed8 <tcp_input+0x4a0>)
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e56:	3301      	adds	r3, #1
 8007e58:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d002      	beq.n	8007e64 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	61bb      	str	r3, [r7, #24]
        continue;
 8007e62:	e016      	b.n	8007e92 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	8ada      	ldrh	r2, [r3, #22]
 8007e68:	4b1a      	ldr	r3, [pc, #104]	; (8007ed4 <tcp_input+0x49c>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	885b      	ldrh	r3, [r3, #2]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d10c      	bne.n	8007e8e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	4b17      	ldr	r3, [pc, #92]	; (8007ed8 <tcp_input+0x4a0>)
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d00f      	beq.n	8007ea0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00d      	beq.n	8007ea2 <tcp_input+0x46a>
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d009      	beq.n	8007ea2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	617b      	str	r3, [r7, #20]
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1d1      	bne.n	8007e42 <tcp_input+0x40a>
 8007e9e:	e000      	b.n	8007ea2 <tcp_input+0x46a>
            break;
 8007ea0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d029      	beq.n	8007efc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00a      	beq.n	8007ec4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	68da      	ldr	r2, [r3, #12]
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007eb6:	4b10      	ldr	r3, [pc, #64]	; (8007ef8 <tcp_input+0x4c0>)
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007ebe:	4a0e      	ldr	r2, [pc, #56]	; (8007ef8 <tcp_input+0x4c0>)
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007ec4:	6978      	ldr	r0, [r7, #20]
 8007ec6:	f000 fa03 	bl	80082d0 <tcp_listen_input>
      }
      pbuf_free(p);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f7fd feea 	bl	8005ca4 <pbuf_free>
      return;
 8007ed0:	e1a8      	b.n	8008224 <tcp_input+0x7ec>
 8007ed2:	bf00      	nop
 8007ed4:	20008334 	.word	0x20008334
 8007ed8:	20004d9c 	.word	0x20004d9c
 8007edc:	08011080 	.word	0x08011080
 8007ee0:	080111ac 	.word	0x080111ac
 8007ee4:	080110cc 	.word	0x080110cc
 8007ee8:	20008318 	.word	0x20008318
 8007eec:	080111d8 	.word	0x080111d8
 8007ef0:	2000831c 	.word	0x2000831c
 8007ef4:	08011204 	.word	0x08011204
 8007ef8:	20008314 	.word	0x20008314
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f000 8158 	beq.w	80081b4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007f04:	4b95      	ldr	r3, [pc, #596]	; (800815c <tcp_input+0x724>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	891a      	ldrh	r2, [r3, #8]
 8007f0e:	4b93      	ldr	r3, [pc, #588]	; (800815c <tcp_input+0x724>)
 8007f10:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007f12:	4a92      	ldr	r2, [pc, #584]	; (800815c <tcp_input+0x724>)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007f18:	4b91      	ldr	r3, [pc, #580]	; (8008160 <tcp_input+0x728>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a8f      	ldr	r2, [pc, #572]	; (800815c <tcp_input+0x724>)
 8007f1e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007f20:	4b90      	ldr	r3, [pc, #576]	; (8008164 <tcp_input+0x72c>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007f26:	4b90      	ldr	r3, [pc, #576]	; (8008168 <tcp_input+0x730>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007f2c:	4b8f      	ldr	r3, [pc, #572]	; (800816c <tcp_input+0x734>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007f32:	4b8f      	ldr	r3, [pc, #572]	; (8008170 <tcp_input+0x738>)
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	f003 0308 	and.w	r3, r3, #8
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d006      	beq.n	8007f4c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	7b5b      	ldrb	r3, [r3, #13]
 8007f42:	f043 0301 	orr.w	r3, r3, #1
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d017      	beq.n	8007f84 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007f54:	69f8      	ldr	r0, [r7, #28]
 8007f56:	f7ff f929 	bl	80071ac <tcp_process_refused_data>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	f113 0f0d 	cmn.w	r3, #13
 8007f60:	d007      	beq.n	8007f72 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00c      	beq.n	8007f84 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007f6a:	4b82      	ldr	r3, [pc, #520]	; (8008174 <tcp_input+0x73c>)
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d008      	beq.n	8007f84 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f040 80e3 	bne.w	8008142 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007f7c:	69f8      	ldr	r0, [r7, #28]
 8007f7e:	f003 f9ad 	bl	800b2dc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007f82:	e0de      	b.n	8008142 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007f84:	4a7c      	ldr	r2, [pc, #496]	; (8008178 <tcp_input+0x740>)
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007f8a:	69f8      	ldr	r0, [r7, #28]
 8007f8c:	f000 fb18 	bl	80085c0 <tcp_process>
 8007f90:	4603      	mov	r3, r0
 8007f92:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007f94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f98:	f113 0f0d 	cmn.w	r3, #13
 8007f9c:	f000 80d3 	beq.w	8008146 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007fa0:	4b71      	ldr	r3, [pc, #452]	; (8008168 <tcp_input+0x730>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	f003 0308 	and.w	r3, r3, #8
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d015      	beq.n	8007fd8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d008      	beq.n	8007fc8 <tcp_input+0x590>
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fbc:	69fa      	ldr	r2, [r7, #28]
 8007fbe:	6912      	ldr	r2, [r2, #16]
 8007fc0:	f06f 010d 	mvn.w	r1, #13
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007fc8:	69f9      	ldr	r1, [r7, #28]
 8007fca:	486c      	ldr	r0, [pc, #432]	; (800817c <tcp_input+0x744>)
 8007fcc:	f7ff fbbc 	bl	8007748 <tcp_pcb_remove>
        tcp_free(pcb);
 8007fd0:	69f8      	ldr	r0, [r7, #28]
 8007fd2:	f7fe f9a9 	bl	8006328 <tcp_free>
 8007fd6:	e0da      	b.n	800818e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007fdc:	4b63      	ldr	r3, [pc, #396]	; (800816c <tcp_input+0x734>)
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d01d      	beq.n	8008020 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007fe4:	4b61      	ldr	r3, [pc, #388]	; (800816c <tcp_input+0x734>)
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00a      	beq.n	800800a <tcp_input+0x5d2>
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ffa:	69fa      	ldr	r2, [r7, #28]
 8007ffc:	6910      	ldr	r0, [r2, #16]
 8007ffe:	89fa      	ldrh	r2, [r7, #14]
 8008000:	69f9      	ldr	r1, [r7, #28]
 8008002:	4798      	blx	r3
 8008004:	4603      	mov	r3, r0
 8008006:	74fb      	strb	r3, [r7, #19]
 8008008:	e001      	b.n	800800e <tcp_input+0x5d6>
 800800a:	2300      	movs	r3, #0
 800800c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800800e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008012:	f113 0f0d 	cmn.w	r3, #13
 8008016:	f000 8098 	beq.w	800814a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800801a:	4b54      	ldr	r3, [pc, #336]	; (800816c <tcp_input+0x734>)
 800801c:	2200      	movs	r2, #0
 800801e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008020:	69f8      	ldr	r0, [r7, #28]
 8008022:	f000 f915 	bl	8008250 <tcp_input_delayed_close>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	f040 8090 	bne.w	800814e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800802e:	4b4d      	ldr	r3, [pc, #308]	; (8008164 <tcp_input+0x72c>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d041      	beq.n	80080ba <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800803a:	2b00      	cmp	r3, #0
 800803c:	d006      	beq.n	800804c <tcp_input+0x614>
 800803e:	4b50      	ldr	r3, [pc, #320]	; (8008180 <tcp_input+0x748>)
 8008040:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008044:	494f      	ldr	r1, [pc, #316]	; (8008184 <tcp_input+0x74c>)
 8008046:	4850      	ldr	r0, [pc, #320]	; (8008188 <tcp_input+0x750>)
 8008048:	f006 fcc6 	bl	800e9d8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	8b5b      	ldrh	r3, [r3, #26]
 8008050:	f003 0310 	and.w	r3, r3, #16
 8008054:	2b00      	cmp	r3, #0
 8008056:	d008      	beq.n	800806a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008058:	4b42      	ldr	r3, [pc, #264]	; (8008164 <tcp_input+0x72c>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4618      	mov	r0, r3
 800805e:	f7fd fe21 	bl	8005ca4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008062:	69f8      	ldr	r0, [r7, #28]
 8008064:	f7fe fc48 	bl	80068f8 <tcp_abort>
            goto aborted;
 8008068:	e091      	b.n	800818e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00c      	beq.n	800808e <tcp_input+0x656>
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	6918      	ldr	r0, [r3, #16]
 800807e:	4b39      	ldr	r3, [pc, #228]	; (8008164 <tcp_input+0x72c>)
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	2300      	movs	r3, #0
 8008084:	69f9      	ldr	r1, [r7, #28]
 8008086:	47a0      	blx	r4
 8008088:	4603      	mov	r3, r0
 800808a:	74fb      	strb	r3, [r7, #19]
 800808c:	e008      	b.n	80080a0 <tcp_input+0x668>
 800808e:	4b35      	ldr	r3, [pc, #212]	; (8008164 <tcp_input+0x72c>)
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	2300      	movs	r3, #0
 8008094:	69f9      	ldr	r1, [r7, #28]
 8008096:	2000      	movs	r0, #0
 8008098:	f7ff f95e 	bl	8007358 <tcp_recv_null>
 800809c:	4603      	mov	r3, r0
 800809e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80080a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80080a4:	f113 0f0d 	cmn.w	r3, #13
 80080a8:	d053      	beq.n	8008152 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80080aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80080b2:	4b2c      	ldr	r3, [pc, #176]	; (8008164 <tcp_input+0x72c>)
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80080ba:	4b2b      	ldr	r3, [pc, #172]	; (8008168 <tcp_input+0x730>)
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	f003 0320 	and.w	r3, r3, #32
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d030      	beq.n	8008128 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d009      	beq.n	80080e2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080d2:	7b5a      	ldrb	r2, [r3, #13]
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080d8:	f042 0220 	orr.w	r2, r2, #32
 80080dc:	b2d2      	uxtb	r2, r2
 80080de:	735a      	strb	r2, [r3, #13]
 80080e0:	e022      	b.n	8008128 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80080ea:	d005      	beq.n	80080f8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080f0:	3301      	adds	r3, #1
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00b      	beq.n	800811a <tcp_input+0x6e2>
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	6918      	ldr	r0, [r3, #16]
 800810c:	2300      	movs	r3, #0
 800810e:	2200      	movs	r2, #0
 8008110:	69f9      	ldr	r1, [r7, #28]
 8008112:	47a0      	blx	r4
 8008114:	4603      	mov	r3, r0
 8008116:	74fb      	strb	r3, [r7, #19]
 8008118:	e001      	b.n	800811e <tcp_input+0x6e6>
 800811a:	2300      	movs	r3, #0
 800811c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800811e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008122:	f113 0f0d 	cmn.w	r3, #13
 8008126:	d016      	beq.n	8008156 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008128:	4b13      	ldr	r3, [pc, #76]	; (8008178 <tcp_input+0x740>)
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800812e:	69f8      	ldr	r0, [r7, #28]
 8008130:	f000 f88e 	bl	8008250 <tcp_input_delayed_close>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d128      	bne.n	800818c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800813a:	69f8      	ldr	r0, [r7, #28]
 800813c:	f002 fac8 	bl	800a6d0 <tcp_output>
 8008140:	e025      	b.n	800818e <tcp_input+0x756>
        goto aborted;
 8008142:	bf00      	nop
 8008144:	e023      	b.n	800818e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008146:	bf00      	nop
 8008148:	e021      	b.n	800818e <tcp_input+0x756>
              goto aborted;
 800814a:	bf00      	nop
 800814c:	e01f      	b.n	800818e <tcp_input+0x756>
          goto aborted;
 800814e:	bf00      	nop
 8008150:	e01d      	b.n	800818e <tcp_input+0x756>
            goto aborted;
 8008152:	bf00      	nop
 8008154:	e01b      	b.n	800818e <tcp_input+0x756>
              goto aborted;
 8008156:	bf00      	nop
 8008158:	e019      	b.n	800818e <tcp_input+0x756>
 800815a:	bf00      	nop
 800815c:	20008324 	.word	0x20008324
 8008160:	20008334 	.word	0x20008334
 8008164:	20008354 	.word	0x20008354
 8008168:	20008351 	.word	0x20008351
 800816c:	2000834c 	.word	0x2000834c
 8008170:	20008350 	.word	0x20008350
 8008174:	2000834e 	.word	0x2000834e
 8008178:	20008358 	.word	0x20008358
 800817c:	20008318 	.word	0x20008318
 8008180:	08011080 	.word	0x08011080
 8008184:	08011234 	.word	0x08011234
 8008188:	080110cc 	.word	0x080110cc
          goto aborted;
 800818c:	bf00      	nop
    tcp_input_pcb = NULL;
 800818e:	4b27      	ldr	r3, [pc, #156]	; (800822c <tcp_input+0x7f4>)
 8008190:	2200      	movs	r2, #0
 8008192:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008194:	4b26      	ldr	r3, [pc, #152]	; (8008230 <tcp_input+0x7f8>)
 8008196:	2200      	movs	r2, #0
 8008198:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800819a:	4b26      	ldr	r3, [pc, #152]	; (8008234 <tcp_input+0x7fc>)
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d03f      	beq.n	8008222 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80081a2:	4b24      	ldr	r3, [pc, #144]	; (8008234 <tcp_input+0x7fc>)
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fd fd7c 	bl	8005ca4 <pbuf_free>
      inseg.p = NULL;
 80081ac:	4b21      	ldr	r3, [pc, #132]	; (8008234 <tcp_input+0x7fc>)
 80081ae:	2200      	movs	r2, #0
 80081b0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80081b2:	e036      	b.n	8008222 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80081b4:	4b20      	ldr	r3, [pc, #128]	; (8008238 <tcp_input+0x800>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	899b      	ldrh	r3, [r3, #12]
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fc fa13 	bl	80045e8 <lwip_htons>
 80081c2:	4603      	mov	r3, r0
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	f003 0304 	and.w	r3, r3, #4
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d118      	bne.n	8008200 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081ce:	4b1b      	ldr	r3, [pc, #108]	; (800823c <tcp_input+0x804>)
 80081d0:	6819      	ldr	r1, [r3, #0]
 80081d2:	4b1b      	ldr	r3, [pc, #108]	; (8008240 <tcp_input+0x808>)
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	461a      	mov	r2, r3
 80081d8:	4b1a      	ldr	r3, [pc, #104]	; (8008244 <tcp_input+0x80c>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081de:	4b16      	ldr	r3, [pc, #88]	; (8008238 <tcp_input+0x800>)
 80081e0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081e2:	885b      	ldrh	r3, [r3, #2]
 80081e4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081e6:	4a14      	ldr	r2, [pc, #80]	; (8008238 <tcp_input+0x800>)
 80081e8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081ea:	8812      	ldrh	r2, [r2, #0]
 80081ec:	b292      	uxth	r2, r2
 80081ee:	9202      	str	r2, [sp, #8]
 80081f0:	9301      	str	r3, [sp, #4]
 80081f2:	4b15      	ldr	r3, [pc, #84]	; (8008248 <tcp_input+0x810>)
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	4b15      	ldr	r3, [pc, #84]	; (800824c <tcp_input+0x814>)
 80081f8:	4602      	mov	r2, r0
 80081fa:	2000      	movs	r0, #0
 80081fc:	f003 f81c 	bl	800b238 <tcp_rst>
    pbuf_free(p);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7fd fd4f 	bl	8005ca4 <pbuf_free>
  return;
 8008206:	e00c      	b.n	8008222 <tcp_input+0x7ea>
    goto dropped;
 8008208:	bf00      	nop
 800820a:	e006      	b.n	800821a <tcp_input+0x7e2>
    goto dropped;
 800820c:	bf00      	nop
 800820e:	e004      	b.n	800821a <tcp_input+0x7e2>
    goto dropped;
 8008210:	bf00      	nop
 8008212:	e002      	b.n	800821a <tcp_input+0x7e2>
      goto dropped;
 8008214:	bf00      	nop
 8008216:	e000      	b.n	800821a <tcp_input+0x7e2>
      goto dropped;
 8008218:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7fd fd42 	bl	8005ca4 <pbuf_free>
 8008220:	e000      	b.n	8008224 <tcp_input+0x7ec>
  return;
 8008222:	bf00      	nop
}
 8008224:	3724      	adds	r7, #36	; 0x24
 8008226:	46bd      	mov	sp, r7
 8008228:	bd90      	pop	{r4, r7, pc}
 800822a:	bf00      	nop
 800822c:	20008358 	.word	0x20008358
 8008230:	20008354 	.word	0x20008354
 8008234:	20008324 	.word	0x20008324
 8008238:	20008334 	.word	0x20008334
 800823c:	20008348 	.word	0x20008348
 8008240:	2000834e 	.word	0x2000834e
 8008244:	20008344 	.word	0x20008344
 8008248:	20004dac 	.word	0x20004dac
 800824c:	20004db0 	.word	0x20004db0

08008250 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d106      	bne.n	800826c <tcp_input_delayed_close+0x1c>
 800825e:	4b17      	ldr	r3, [pc, #92]	; (80082bc <tcp_input_delayed_close+0x6c>)
 8008260:	f240 225a 	movw	r2, #602	; 0x25a
 8008264:	4916      	ldr	r1, [pc, #88]	; (80082c0 <tcp_input_delayed_close+0x70>)
 8008266:	4817      	ldr	r0, [pc, #92]	; (80082c4 <tcp_input_delayed_close+0x74>)
 8008268:	f006 fbb6 	bl	800e9d8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800826c:	4b16      	ldr	r3, [pc, #88]	; (80082c8 <tcp_input_delayed_close+0x78>)
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	f003 0310 	and.w	r3, r3, #16
 8008274:	2b00      	cmp	r3, #0
 8008276:	d01c      	beq.n	80082b2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	8b5b      	ldrh	r3, [r3, #26]
 800827c:	f003 0310 	and.w	r3, r3, #16
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10d      	bne.n	80082a0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800828a:	2b00      	cmp	r3, #0
 800828c:	d008      	beq.n	80082a0 <tcp_input_delayed_close+0x50>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	6912      	ldr	r2, [r2, #16]
 8008298:	f06f 010e 	mvn.w	r1, #14
 800829c:	4610      	mov	r0, r2
 800829e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80082a0:	6879      	ldr	r1, [r7, #4]
 80082a2:	480a      	ldr	r0, [pc, #40]	; (80082cc <tcp_input_delayed_close+0x7c>)
 80082a4:	f7ff fa50 	bl	8007748 <tcp_pcb_remove>
    tcp_free(pcb);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f7fe f83d 	bl	8006328 <tcp_free>
    return 1;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e000      	b.n	80082b4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	08011080 	.word	0x08011080
 80082c0:	08011250 	.word	0x08011250
 80082c4:	080110cc 	.word	0x080110cc
 80082c8:	20008351 	.word	0x20008351
 80082cc:	20008318 	.word	0x20008318

080082d0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80082d0:	b590      	push	{r4, r7, lr}
 80082d2:	b08b      	sub	sp, #44	; 0x2c
 80082d4:	af04      	add	r7, sp, #16
 80082d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80082d8:	4b6f      	ldr	r3, [pc, #444]	; (8008498 <tcp_listen_input+0x1c8>)
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	f003 0304 	and.w	r3, r3, #4
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f040 80d2 	bne.w	800848a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d106      	bne.n	80082fa <tcp_listen_input+0x2a>
 80082ec:	4b6b      	ldr	r3, [pc, #428]	; (800849c <tcp_listen_input+0x1cc>)
 80082ee:	f240 2281 	movw	r2, #641	; 0x281
 80082f2:	496b      	ldr	r1, [pc, #428]	; (80084a0 <tcp_listen_input+0x1d0>)
 80082f4:	486b      	ldr	r0, [pc, #428]	; (80084a4 <tcp_listen_input+0x1d4>)
 80082f6:	f006 fb6f 	bl	800e9d8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80082fa:	4b67      	ldr	r3, [pc, #412]	; (8008498 <tcp_listen_input+0x1c8>)
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	f003 0310 	and.w	r3, r3, #16
 8008302:	2b00      	cmp	r3, #0
 8008304:	d019      	beq.n	800833a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008306:	4b68      	ldr	r3, [pc, #416]	; (80084a8 <tcp_listen_input+0x1d8>)
 8008308:	6819      	ldr	r1, [r3, #0]
 800830a:	4b68      	ldr	r3, [pc, #416]	; (80084ac <tcp_listen_input+0x1dc>)
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	461a      	mov	r2, r3
 8008310:	4b67      	ldr	r3, [pc, #412]	; (80084b0 <tcp_listen_input+0x1e0>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008316:	4b67      	ldr	r3, [pc, #412]	; (80084b4 <tcp_listen_input+0x1e4>)
 8008318:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800831a:	885b      	ldrh	r3, [r3, #2]
 800831c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800831e:	4a65      	ldr	r2, [pc, #404]	; (80084b4 <tcp_listen_input+0x1e4>)
 8008320:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008322:	8812      	ldrh	r2, [r2, #0]
 8008324:	b292      	uxth	r2, r2
 8008326:	9202      	str	r2, [sp, #8]
 8008328:	9301      	str	r3, [sp, #4]
 800832a:	4b63      	ldr	r3, [pc, #396]	; (80084b8 <tcp_listen_input+0x1e8>)
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	4b63      	ldr	r3, [pc, #396]	; (80084bc <tcp_listen_input+0x1ec>)
 8008330:	4602      	mov	r2, r0
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f002 ff80 	bl	800b238 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008338:	e0a9      	b.n	800848e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800833a:	4b57      	ldr	r3, [pc, #348]	; (8008498 <tcp_listen_input+0x1c8>)
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	f003 0302 	and.w	r3, r3, #2
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 80a3 	beq.w	800848e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	7d5b      	ldrb	r3, [r3, #21]
 800834c:	4618      	mov	r0, r3
 800834e:	f7ff f927 	bl	80075a0 <tcp_alloc>
 8008352:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d111      	bne.n	800837e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <tcp_listen_input+0xa8>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	6910      	ldr	r0, [r2, #16]
 800836a:	f04f 32ff 	mov.w	r2, #4294967295
 800836e:	2100      	movs	r1, #0
 8008370:	4798      	blx	r3
 8008372:	4603      	mov	r3, r0
 8008374:	73bb      	strb	r3, [r7, #14]
      return;
 8008376:	e08b      	b.n	8008490 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008378:	23f0      	movs	r3, #240	; 0xf0
 800837a:	73bb      	strb	r3, [r7, #14]
      return;
 800837c:	e088      	b.n	8008490 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800837e:	4b50      	ldr	r3, [pc, #320]	; (80084c0 <tcp_listen_input+0x1f0>)
 8008380:	695a      	ldr	r2, [r3, #20]
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008386:	4b4e      	ldr	r3, [pc, #312]	; (80084c0 <tcp_listen_input+0x1f0>)
 8008388:	691a      	ldr	r2, [r3, #16]
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	8ada      	ldrh	r2, [r3, #22]
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008396:	4b47      	ldr	r3, [pc, #284]	; (80084b4 <tcp_listen_input+0x1e4>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	881b      	ldrh	r3, [r3, #0]
 800839c:	b29a      	uxth	r2, r3
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	2203      	movs	r2, #3
 80083a6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80083a8:	4b41      	ldr	r3, [pc, #260]	; (80084b0 <tcp_listen_input+0x1e0>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	1c5a      	adds	r2, r3, #1
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80083ba:	6978      	ldr	r0, [r7, #20]
 80083bc:	f7ff fa58 	bl	8007870 <tcp_next_iss>
 80083c0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80083da:	4b35      	ldr	r3, [pc, #212]	; (80084b0 <tcp_listen_input+0x1e0>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	1e5a      	subs	r2, r3, #1
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	691a      	ldr	r2, [r3, #16]
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	7a5b      	ldrb	r3, [r3, #9]
 80083f6:	f003 030c 	and.w	r3, r3, #12
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	7a1a      	ldrb	r2, [r3, #8]
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008408:	4b2e      	ldr	r3, [pc, #184]	; (80084c4 <tcp_listen_input+0x1f4>)
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	60da      	str	r2, [r3, #12]
 8008410:	4a2c      	ldr	r2, [pc, #176]	; (80084c4 <tcp_listen_input+0x1f4>)
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	6013      	str	r3, [r2, #0]
 8008416:	f003 f8d1 	bl	800b5bc <tcp_timer_needed>
 800841a:	4b2b      	ldr	r3, [pc, #172]	; (80084c8 <tcp_listen_input+0x1f8>)
 800841c:	2201      	movs	r2, #1
 800841e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008420:	6978      	ldr	r0, [r7, #20]
 8008422:	f001 fd8f 	bl	8009f44 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008426:	4b23      	ldr	r3, [pc, #140]	; (80084b4 <tcp_listen_input+0x1e4>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	89db      	ldrh	r3, [r3, #14]
 800842c:	b29a      	uxth	r2, r3
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	3304      	adds	r3, #4
 8008448:	4618      	mov	r0, r3
 800844a:	f004 ffe5 	bl	800d418 <ip4_route>
 800844e:	4601      	mov	r1, r0
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	3304      	adds	r3, #4
 8008454:	461a      	mov	r2, r3
 8008456:	4620      	mov	r0, r4
 8008458:	f7ff fa30 	bl	80078bc <tcp_eff_send_mss_netif>
 800845c:	4603      	mov	r3, r0
 800845e:	461a      	mov	r2, r3
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008464:	2112      	movs	r1, #18
 8008466:	6978      	ldr	r0, [r7, #20]
 8008468:	f002 f844 	bl	800a4f4 <tcp_enqueue_flags>
 800846c:	4603      	mov	r3, r0
 800846e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d004      	beq.n	8008482 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008478:	2100      	movs	r1, #0
 800847a:	6978      	ldr	r0, [r7, #20]
 800847c:	f7fe f97e 	bl	800677c <tcp_abandon>
      return;
 8008480:	e006      	b.n	8008490 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008482:	6978      	ldr	r0, [r7, #20]
 8008484:	f002 f924 	bl	800a6d0 <tcp_output>
  return;
 8008488:	e001      	b.n	800848e <tcp_listen_input+0x1be>
    return;
 800848a:	bf00      	nop
 800848c:	e000      	b.n	8008490 <tcp_listen_input+0x1c0>
  return;
 800848e:	bf00      	nop
}
 8008490:	371c      	adds	r7, #28
 8008492:	46bd      	mov	sp, r7
 8008494:	bd90      	pop	{r4, r7, pc}
 8008496:	bf00      	nop
 8008498:	20008350 	.word	0x20008350
 800849c:	08011080 	.word	0x08011080
 80084a0:	08011278 	.word	0x08011278
 80084a4:	080110cc 	.word	0x080110cc
 80084a8:	20008348 	.word	0x20008348
 80084ac:	2000834e 	.word	0x2000834e
 80084b0:	20008344 	.word	0x20008344
 80084b4:	20008334 	.word	0x20008334
 80084b8:	20004dac 	.word	0x20004dac
 80084bc:	20004db0 	.word	0x20004db0
 80084c0:	20004d9c 	.word	0x20004d9c
 80084c4:	20008318 	.word	0x20008318
 80084c8:	20008320 	.word	0x20008320

080084cc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af04      	add	r7, sp, #16
 80084d2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80084d4:	4b2f      	ldr	r3, [pc, #188]	; (8008594 <tcp_timewait_input+0xc8>)
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	f003 0304 	and.w	r3, r3, #4
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d153      	bne.n	8008588 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d106      	bne.n	80084f4 <tcp_timewait_input+0x28>
 80084e6:	4b2c      	ldr	r3, [pc, #176]	; (8008598 <tcp_timewait_input+0xcc>)
 80084e8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80084ec:	492b      	ldr	r1, [pc, #172]	; (800859c <tcp_timewait_input+0xd0>)
 80084ee:	482c      	ldr	r0, [pc, #176]	; (80085a0 <tcp_timewait_input+0xd4>)
 80084f0:	f006 fa72 	bl	800e9d8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80084f4:	4b27      	ldr	r3, [pc, #156]	; (8008594 <tcp_timewait_input+0xc8>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	f003 0302 	and.w	r3, r3, #2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d02a      	beq.n	8008556 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008500:	4b28      	ldr	r3, [pc, #160]	; (80085a4 <tcp_timewait_input+0xd8>)
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	db2d      	blt.n	800856a <tcp_timewait_input+0x9e>
 800850e:	4b25      	ldr	r3, [pc, #148]	; (80085a4 <tcp_timewait_input+0xd8>)
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008516:	6879      	ldr	r1, [r7, #4]
 8008518:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800851a:	440b      	add	r3, r1
 800851c:	1ad3      	subs	r3, r2, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	dc23      	bgt.n	800856a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008522:	4b21      	ldr	r3, [pc, #132]	; (80085a8 <tcp_timewait_input+0xdc>)
 8008524:	6819      	ldr	r1, [r3, #0]
 8008526:	4b21      	ldr	r3, [pc, #132]	; (80085ac <tcp_timewait_input+0xe0>)
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	4b1d      	ldr	r3, [pc, #116]	; (80085a4 <tcp_timewait_input+0xd8>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008532:	4b1f      	ldr	r3, [pc, #124]	; (80085b0 <tcp_timewait_input+0xe4>)
 8008534:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008536:	885b      	ldrh	r3, [r3, #2]
 8008538:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800853a:	4a1d      	ldr	r2, [pc, #116]	; (80085b0 <tcp_timewait_input+0xe4>)
 800853c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800853e:	8812      	ldrh	r2, [r2, #0]
 8008540:	b292      	uxth	r2, r2
 8008542:	9202      	str	r2, [sp, #8]
 8008544:	9301      	str	r3, [sp, #4]
 8008546:	4b1b      	ldr	r3, [pc, #108]	; (80085b4 <tcp_timewait_input+0xe8>)
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	4b1b      	ldr	r3, [pc, #108]	; (80085b8 <tcp_timewait_input+0xec>)
 800854c:	4602      	mov	r2, r0
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f002 fe72 	bl	800b238 <tcp_rst>
      return;
 8008554:	e01b      	b.n	800858e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008556:	4b0f      	ldr	r3, [pc, #60]	; (8008594 <tcp_timewait_input+0xc8>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	d003      	beq.n	800856a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008562:	4b16      	ldr	r3, [pc, #88]	; (80085bc <tcp_timewait_input+0xf0>)
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800856a:	4b10      	ldr	r3, [pc, #64]	; (80085ac <tcp_timewait_input+0xe0>)
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00c      	beq.n	800858c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	8b5b      	ldrh	r3, [r3, #26]
 8008576:	f043 0302 	orr.w	r3, r3, #2
 800857a:	b29a      	uxth	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f002 f8a5 	bl	800a6d0 <tcp_output>
  }
  return;
 8008586:	e001      	b.n	800858c <tcp_timewait_input+0xc0>
    return;
 8008588:	bf00      	nop
 800858a:	e000      	b.n	800858e <tcp_timewait_input+0xc2>
  return;
 800858c:	bf00      	nop
}
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	20008350 	.word	0x20008350
 8008598:	08011080 	.word	0x08011080
 800859c:	08011298 	.word	0x08011298
 80085a0:	080110cc 	.word	0x080110cc
 80085a4:	20008344 	.word	0x20008344
 80085a8:	20008348 	.word	0x20008348
 80085ac:	2000834e 	.word	0x2000834e
 80085b0:	20008334 	.word	0x20008334
 80085b4:	20004dac 	.word	0x20004dac
 80085b8:	20004db0 	.word	0x20004db0
 80085bc:	2000830c 	.word	0x2000830c

080085c0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80085c0:	b590      	push	{r4, r7, lr}
 80085c2:	b08d      	sub	sp, #52	; 0x34
 80085c4:	af04      	add	r7, sp, #16
 80085c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80085c8:	2300      	movs	r3, #0
 80085ca:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d106      	bne.n	80085e4 <tcp_process+0x24>
 80085d6:	4b9d      	ldr	r3, [pc, #628]	; (800884c <tcp_process+0x28c>)
 80085d8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80085dc:	499c      	ldr	r1, [pc, #624]	; (8008850 <tcp_process+0x290>)
 80085de:	489d      	ldr	r0, [pc, #628]	; (8008854 <tcp_process+0x294>)
 80085e0:	f006 f9fa 	bl	800e9d8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80085e4:	4b9c      	ldr	r3, [pc, #624]	; (8008858 <tcp_process+0x298>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	f003 0304 	and.w	r3, r3, #4
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d04e      	beq.n	800868e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	7d1b      	ldrb	r3, [r3, #20]
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d108      	bne.n	800860a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085fc:	4b97      	ldr	r3, [pc, #604]	; (800885c <tcp_process+0x29c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	429a      	cmp	r2, r3
 8008602:	d123      	bne.n	800864c <tcp_process+0x8c>
        acceptable = 1;
 8008604:	2301      	movs	r3, #1
 8008606:	76fb      	strb	r3, [r7, #27]
 8008608:	e020      	b.n	800864c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800860e:	4b94      	ldr	r3, [pc, #592]	; (8008860 <tcp_process+0x2a0>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	429a      	cmp	r2, r3
 8008614:	d102      	bne.n	800861c <tcp_process+0x5c>
        acceptable = 1;
 8008616:	2301      	movs	r3, #1
 8008618:	76fb      	strb	r3, [r7, #27]
 800861a:	e017      	b.n	800864c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800861c:	4b90      	ldr	r3, [pc, #576]	; (8008860 <tcp_process+0x2a0>)
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	2b00      	cmp	r3, #0
 8008628:	db10      	blt.n	800864c <tcp_process+0x8c>
 800862a:	4b8d      	ldr	r3, [pc, #564]	; (8008860 <tcp_process+0x2a0>)
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008632:	6879      	ldr	r1, [r7, #4]
 8008634:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008636:	440b      	add	r3, r1
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	dc06      	bgt.n	800864c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	8b5b      	ldrh	r3, [r3, #26]
 8008642:	f043 0302 	orr.w	r3, r3, #2
 8008646:	b29a      	uxth	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800864c:	7efb      	ldrb	r3, [r7, #27]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d01b      	beq.n	800868a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	7d1b      	ldrb	r3, [r3, #20]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d106      	bne.n	8008668 <tcp_process+0xa8>
 800865a:	4b7c      	ldr	r3, [pc, #496]	; (800884c <tcp_process+0x28c>)
 800865c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008660:	4980      	ldr	r1, [pc, #512]	; (8008864 <tcp_process+0x2a4>)
 8008662:	487c      	ldr	r0, [pc, #496]	; (8008854 <tcp_process+0x294>)
 8008664:	f006 f9b8 	bl	800e9d8 <iprintf>
      recv_flags |= TF_RESET;
 8008668:	4b7f      	ldr	r3, [pc, #508]	; (8008868 <tcp_process+0x2a8>)
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	f043 0308 	orr.w	r3, r3, #8
 8008670:	b2da      	uxtb	r2, r3
 8008672:	4b7d      	ldr	r3, [pc, #500]	; (8008868 <tcp_process+0x2a8>)
 8008674:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	8b5b      	ldrh	r3, [r3, #26]
 800867a:	f023 0301 	bic.w	r3, r3, #1
 800867e:	b29a      	uxth	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008684:	f06f 030d 	mvn.w	r3, #13
 8008688:	e37a      	b.n	8008d80 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800868a:	2300      	movs	r3, #0
 800868c:	e378      	b.n	8008d80 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800868e:	4b72      	ldr	r3, [pc, #456]	; (8008858 <tcp_process+0x298>)
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	f003 0302 	and.w	r3, r3, #2
 8008696:	2b00      	cmp	r3, #0
 8008698:	d010      	beq.n	80086bc <tcp_process+0xfc>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	7d1b      	ldrb	r3, [r3, #20]
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d00c      	beq.n	80086bc <tcp_process+0xfc>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	7d1b      	ldrb	r3, [r3, #20]
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	d008      	beq.n	80086bc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	8b5b      	ldrh	r3, [r3, #26]
 80086ae:	f043 0302 	orr.w	r3, r3, #2
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	e361      	b.n	8008d80 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	8b5b      	ldrh	r3, [r3, #26]
 80086c0:	f003 0310 	and.w	r3, r3, #16
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d103      	bne.n	80086d0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80086c8:	4b68      	ldr	r3, [pc, #416]	; (800886c <tcp_process+0x2ac>)
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f001 fc2f 	bl	8009f44 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	7d1b      	ldrb	r3, [r3, #20]
 80086ea:	3b02      	subs	r3, #2
 80086ec:	2b07      	cmp	r3, #7
 80086ee:	f200 8337 	bhi.w	8008d60 <tcp_process+0x7a0>
 80086f2:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <tcp_process+0x138>)
 80086f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f8:	08008719 	.word	0x08008719
 80086fc:	08008949 	.word	0x08008949
 8008700:	08008ac1 	.word	0x08008ac1
 8008704:	08008aeb 	.word	0x08008aeb
 8008708:	08008c0f 	.word	0x08008c0f
 800870c:	08008ac1 	.word	0x08008ac1
 8008710:	08008c9b 	.word	0x08008c9b
 8008714:	08008d2b 	.word	0x08008d2b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008718:	4b4f      	ldr	r3, [pc, #316]	; (8008858 <tcp_process+0x298>)
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	f003 0310 	and.w	r3, r3, #16
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 80e4 	beq.w	80088ee <tcp_process+0x32e>
 8008726:	4b4c      	ldr	r3, [pc, #304]	; (8008858 <tcp_process+0x298>)
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	f003 0302 	and.w	r3, r3, #2
 800872e:	2b00      	cmp	r3, #0
 8008730:	f000 80dd 	beq.w	80088ee <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008738:	1c5a      	adds	r2, r3, #1
 800873a:	4b48      	ldr	r3, [pc, #288]	; (800885c <tcp_process+0x29c>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	429a      	cmp	r2, r3
 8008740:	f040 80d5 	bne.w	80088ee <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008744:	4b46      	ldr	r3, [pc, #280]	; (8008860 <tcp_process+0x2a0>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	1c5a      	adds	r2, r3, #1
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008756:	4b41      	ldr	r3, [pc, #260]	; (800885c <tcp_process+0x29c>)
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800875e:	4b44      	ldr	r3, [pc, #272]	; (8008870 <tcp_process+0x2b0>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	89db      	ldrh	r3, [r3, #14]
 8008764:	b29a      	uxth	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008778:	4b39      	ldr	r3, [pc, #228]	; (8008860 <tcp_process+0x2a0>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	1e5a      	subs	r2, r3, #1
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2204      	movs	r2, #4
 8008786:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3304      	adds	r3, #4
 8008790:	4618      	mov	r0, r3
 8008792:	f004 fe41 	bl	800d418 <ip4_route>
 8008796:	4601      	mov	r1, r0
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	3304      	adds	r3, #4
 800879c:	461a      	mov	r2, r3
 800879e:	4620      	mov	r0, r4
 80087a0:	f7ff f88c 	bl	80078bc <tcp_eff_send_mss_netif>
 80087a4:	4603      	mov	r3, r0
 80087a6:	461a      	mov	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087b0:	009a      	lsls	r2, r3, #2
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087b6:	005b      	lsls	r3, r3, #1
 80087b8:	f241 111c 	movw	r1, #4380	; 0x111c
 80087bc:	428b      	cmp	r3, r1
 80087be:	bf38      	it	cc
 80087c0:	460b      	movcc	r3, r1
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d204      	bcs.n	80087d0 <tcp_process+0x210>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	e00d      	b.n	80087ec <tcp_process+0x22c>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087d4:	005b      	lsls	r3, r3, #1
 80087d6:	f241 121c 	movw	r2, #4380	; 0x111c
 80087da:	4293      	cmp	r3, r2
 80087dc:	d904      	bls.n	80087e8 <tcp_process+0x228>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087e2:	005b      	lsls	r3, r3, #1
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	e001      	b.n	80087ec <tcp_process+0x22c>
 80087e8:	f241 131c 	movw	r3, #4380	; 0x111c
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d106      	bne.n	800880a <tcp_process+0x24a>
 80087fc:	4b13      	ldr	r3, [pc, #76]	; (800884c <tcp_process+0x28c>)
 80087fe:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008802:	491c      	ldr	r1, [pc, #112]	; (8008874 <tcp_process+0x2b4>)
 8008804:	4813      	ldr	r0, [pc, #76]	; (8008854 <tcp_process+0x294>)
 8008806:	f006 f8e7 	bl	800e9d8 <iprintf>
        --pcb->snd_queuelen;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008810:	3b01      	subs	r3, #1
 8008812:	b29a      	uxth	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800881e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d12a      	bne.n	800887c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800882a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d106      	bne.n	8008840 <tcp_process+0x280>
 8008832:	4b06      	ldr	r3, [pc, #24]	; (800884c <tcp_process+0x28c>)
 8008834:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008838:	490f      	ldr	r1, [pc, #60]	; (8008878 <tcp_process+0x2b8>)
 800883a:	4806      	ldr	r0, [pc, #24]	; (8008854 <tcp_process+0x294>)
 800883c:	f006 f8cc 	bl	800e9d8 <iprintf>
          pcb->unsent = rseg->next;
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	66da      	str	r2, [r3, #108]	; 0x6c
 8008848:	e01c      	b.n	8008884 <tcp_process+0x2c4>
 800884a:	bf00      	nop
 800884c:	08011080 	.word	0x08011080
 8008850:	080112b8 	.word	0x080112b8
 8008854:	080110cc 	.word	0x080110cc
 8008858:	20008350 	.word	0x20008350
 800885c:	20008348 	.word	0x20008348
 8008860:	20008344 	.word	0x20008344
 8008864:	080112d4 	.word	0x080112d4
 8008868:	20008351 	.word	0x20008351
 800886c:	2000830c 	.word	0x2000830c
 8008870:	20008334 	.word	0x20008334
 8008874:	080112f4 	.word	0x080112f4
 8008878:	0801130c 	.word	0x0801130c
        } else {
          pcb->unacked = rseg->next;
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008884:	69f8      	ldr	r0, [r7, #28]
 8008886:	f7fe fd22 	bl	80072ce <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800888e:	2b00      	cmp	r3, #0
 8008890:	d104      	bne.n	800889c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008898:	861a      	strh	r2, [r3, #48]	; 0x30
 800889a:	e006      	b.n	80088aa <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00a      	beq.n	80088ca <tcp_process+0x30a>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	6910      	ldr	r0, [r2, #16]
 80088be:	2200      	movs	r2, #0
 80088c0:	6879      	ldr	r1, [r7, #4]
 80088c2:	4798      	blx	r3
 80088c4:	4603      	mov	r3, r0
 80088c6:	76bb      	strb	r3, [r7, #26]
 80088c8:	e001      	b.n	80088ce <tcp_process+0x30e>
 80088ca:	2300      	movs	r3, #0
 80088cc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80088ce:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80088d2:	f113 0f0d 	cmn.w	r3, #13
 80088d6:	d102      	bne.n	80088de <tcp_process+0x31e>
          return ERR_ABRT;
 80088d8:	f06f 030c 	mvn.w	r3, #12
 80088dc:	e250      	b.n	8008d80 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	8b5b      	ldrh	r3, [r3, #26]
 80088e2:	f043 0302 	orr.w	r3, r3, #2
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80088ec:	e23a      	b.n	8008d64 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80088ee:	4b98      	ldr	r3, [pc, #608]	; (8008b50 <tcp_process+0x590>)
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	f003 0310 	and.w	r3, r3, #16
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f000 8234 	beq.w	8008d64 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088fc:	4b95      	ldr	r3, [pc, #596]	; (8008b54 <tcp_process+0x594>)
 80088fe:	6819      	ldr	r1, [r3, #0]
 8008900:	4b95      	ldr	r3, [pc, #596]	; (8008b58 <tcp_process+0x598>)
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	461a      	mov	r2, r3
 8008906:	4b95      	ldr	r3, [pc, #596]	; (8008b5c <tcp_process+0x59c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800890c:	4b94      	ldr	r3, [pc, #592]	; (8008b60 <tcp_process+0x5a0>)
 800890e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008910:	885b      	ldrh	r3, [r3, #2]
 8008912:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008914:	4a92      	ldr	r2, [pc, #584]	; (8008b60 <tcp_process+0x5a0>)
 8008916:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008918:	8812      	ldrh	r2, [r2, #0]
 800891a:	b292      	uxth	r2, r2
 800891c:	9202      	str	r2, [sp, #8]
 800891e:	9301      	str	r3, [sp, #4]
 8008920:	4b90      	ldr	r3, [pc, #576]	; (8008b64 <tcp_process+0x5a4>)
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	4b90      	ldr	r3, [pc, #576]	; (8008b68 <tcp_process+0x5a8>)
 8008926:	4602      	mov	r2, r0
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f002 fc85 	bl	800b238 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008934:	2b05      	cmp	r3, #5
 8008936:	f200 8215 	bhi.w	8008d64 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f002 fa4f 	bl	800ade4 <tcp_rexmit_rto>
      break;
 8008946:	e20d      	b.n	8008d64 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008948:	4b81      	ldr	r3, [pc, #516]	; (8008b50 <tcp_process+0x590>)
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	f003 0310 	and.w	r3, r3, #16
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 80a1 	beq.w	8008a98 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008956:	4b7f      	ldr	r3, [pc, #508]	; (8008b54 <tcp_process+0x594>)
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	3b01      	subs	r3, #1
 8008962:	2b00      	cmp	r3, #0
 8008964:	db7e      	blt.n	8008a64 <tcp_process+0x4a4>
 8008966:	4b7b      	ldr	r3, [pc, #492]	; (8008b54 <tcp_process+0x594>)
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	2b00      	cmp	r3, #0
 8008972:	dc77      	bgt.n	8008a64 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2204      	movs	r2, #4
 8008978:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800897e:	2b00      	cmp	r3, #0
 8008980:	d102      	bne.n	8008988 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008982:	23fa      	movs	r3, #250	; 0xfa
 8008984:	76bb      	strb	r3, [r7, #26]
 8008986:	e01d      	b.n	80089c4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d106      	bne.n	80089a0 <tcp_process+0x3e0>
 8008992:	4b76      	ldr	r3, [pc, #472]	; (8008b6c <tcp_process+0x5ac>)
 8008994:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008998:	4975      	ldr	r1, [pc, #468]	; (8008b70 <tcp_process+0x5b0>)
 800899a:	4876      	ldr	r0, [pc, #472]	; (8008b74 <tcp_process+0x5b4>)
 800899c:	f006 f81c 	bl	800e9d8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00a      	beq.n	80089c0 <tcp_process+0x400>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	6910      	ldr	r0, [r2, #16]
 80089b4:	2200      	movs	r2, #0
 80089b6:	6879      	ldr	r1, [r7, #4]
 80089b8:	4798      	blx	r3
 80089ba:	4603      	mov	r3, r0
 80089bc:	76bb      	strb	r3, [r7, #26]
 80089be:	e001      	b.n	80089c4 <tcp_process+0x404>
 80089c0:	23f0      	movs	r3, #240	; 0xf0
 80089c2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80089c4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00a      	beq.n	80089e2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80089cc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80089d0:	f113 0f0d 	cmn.w	r3, #13
 80089d4:	d002      	beq.n	80089dc <tcp_process+0x41c>
              tcp_abort(pcb);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f7fd ff8e 	bl	80068f8 <tcp_abort>
            }
            return ERR_ABRT;
 80089dc:	f06f 030c 	mvn.w	r3, #12
 80089e0:	e1ce      	b.n	8008d80 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fae0 	bl	8008fa8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80089e8:	4b63      	ldr	r3, [pc, #396]	; (8008b78 <tcp_process+0x5b8>)
 80089ea:	881b      	ldrh	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d005      	beq.n	80089fc <tcp_process+0x43c>
            recv_acked--;
 80089f0:	4b61      	ldr	r3, [pc, #388]	; (8008b78 <tcp_process+0x5b8>)
 80089f2:	881b      	ldrh	r3, [r3, #0]
 80089f4:	3b01      	subs	r3, #1
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	4b5f      	ldr	r3, [pc, #380]	; (8008b78 <tcp_process+0x5b8>)
 80089fa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a00:	009a      	lsls	r2, r3, #2
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a06:	005b      	lsls	r3, r3, #1
 8008a08:	f241 111c 	movw	r1, #4380	; 0x111c
 8008a0c:	428b      	cmp	r3, r1
 8008a0e:	bf38      	it	cc
 8008a10:	460b      	movcc	r3, r1
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d204      	bcs.n	8008a20 <tcp_process+0x460>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	e00d      	b.n	8008a3c <tcp_process+0x47c>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a24:	005b      	lsls	r3, r3, #1
 8008a26:	f241 121c 	movw	r2, #4380	; 0x111c
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d904      	bls.n	8008a38 <tcp_process+0x478>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a32:	005b      	lsls	r3, r3, #1
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	e001      	b.n	8008a3c <tcp_process+0x47c>
 8008a38:	f241 131c 	movw	r3, #4380	; 0x111c
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008a42:	4b4e      	ldr	r3, [pc, #312]	; (8008b7c <tcp_process+0x5bc>)
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	f003 0320 	and.w	r3, r3, #32
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d037      	beq.n	8008abe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	8b5b      	ldrh	r3, [r3, #26]
 8008a52:	f043 0302 	orr.w	r3, r3, #2
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2207      	movs	r2, #7
 8008a60:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008a62:	e02c      	b.n	8008abe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a64:	4b3b      	ldr	r3, [pc, #236]	; (8008b54 <tcp_process+0x594>)
 8008a66:	6819      	ldr	r1, [r3, #0]
 8008a68:	4b3b      	ldr	r3, [pc, #236]	; (8008b58 <tcp_process+0x598>)
 8008a6a:	881b      	ldrh	r3, [r3, #0]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	4b3b      	ldr	r3, [pc, #236]	; (8008b5c <tcp_process+0x59c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a74:	4b3a      	ldr	r3, [pc, #232]	; (8008b60 <tcp_process+0x5a0>)
 8008a76:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a78:	885b      	ldrh	r3, [r3, #2]
 8008a7a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a7c:	4a38      	ldr	r2, [pc, #224]	; (8008b60 <tcp_process+0x5a0>)
 8008a7e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a80:	8812      	ldrh	r2, [r2, #0]
 8008a82:	b292      	uxth	r2, r2
 8008a84:	9202      	str	r2, [sp, #8]
 8008a86:	9301      	str	r3, [sp, #4]
 8008a88:	4b36      	ldr	r3, [pc, #216]	; (8008b64 <tcp_process+0x5a4>)
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	4b36      	ldr	r3, [pc, #216]	; (8008b68 <tcp_process+0x5a8>)
 8008a8e:	4602      	mov	r2, r0
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f002 fbd1 	bl	800b238 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008a96:	e167      	b.n	8008d68 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008a98:	4b2d      	ldr	r3, [pc, #180]	; (8008b50 <tcp_process+0x590>)
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	f003 0302 	and.w	r3, r3, #2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 8161 	beq.w	8008d68 <tcp_process+0x7a8>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aaa:	1e5a      	subs	r2, r3, #1
 8008aac:	4b2b      	ldr	r3, [pc, #172]	; (8008b5c <tcp_process+0x59c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	f040 8159 	bne.w	8008d68 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f002 f9b6 	bl	800ae28 <tcp_rexmit>
      break;
 8008abc:	e154      	b.n	8008d68 <tcp_process+0x7a8>
 8008abe:	e153      	b.n	8008d68 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fa71 	bl	8008fa8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008ac6:	4b2d      	ldr	r3, [pc, #180]	; (8008b7c <tcp_process+0x5bc>)
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	f003 0320 	and.w	r3, r3, #32
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f000 814c 	beq.w	8008d6c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	8b5b      	ldrh	r3, [r3, #26]
 8008ad8:	f043 0302 	orr.w	r3, r3, #2
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2207      	movs	r2, #7
 8008ae6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008ae8:	e140      	b.n	8008d6c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fa5c 	bl	8008fa8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008af0:	4b22      	ldr	r3, [pc, #136]	; (8008b7c <tcp_process+0x5bc>)
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	f003 0320 	and.w	r3, r3, #32
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d071      	beq.n	8008be0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008afc:	4b14      	ldr	r3, [pc, #80]	; (8008b50 <tcp_process+0x590>)
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	f003 0310 	and.w	r3, r3, #16
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d060      	beq.n	8008bca <tcp_process+0x60a>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b0c:	4b11      	ldr	r3, [pc, #68]	; (8008b54 <tcp_process+0x594>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d15a      	bne.n	8008bca <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d156      	bne.n	8008bca <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	8b5b      	ldrh	r3, [r3, #26]
 8008b20:	f043 0302 	orr.w	r3, r3, #2
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7fe fdbc 	bl	80076a8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008b30:	4b13      	ldr	r3, [pc, #76]	; (8008b80 <tcp_process+0x5c0>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d105      	bne.n	8008b46 <tcp_process+0x586>
 8008b3a:	4b11      	ldr	r3, [pc, #68]	; (8008b80 <tcp_process+0x5c0>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	4a0f      	ldr	r2, [pc, #60]	; (8008b80 <tcp_process+0x5c0>)
 8008b42:	6013      	str	r3, [r2, #0]
 8008b44:	e02e      	b.n	8008ba4 <tcp_process+0x5e4>
 8008b46:	4b0e      	ldr	r3, [pc, #56]	; (8008b80 <tcp_process+0x5c0>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	617b      	str	r3, [r7, #20]
 8008b4c:	e027      	b.n	8008b9e <tcp_process+0x5de>
 8008b4e:	bf00      	nop
 8008b50:	20008350 	.word	0x20008350
 8008b54:	20008348 	.word	0x20008348
 8008b58:	2000834e 	.word	0x2000834e
 8008b5c:	20008344 	.word	0x20008344
 8008b60:	20008334 	.word	0x20008334
 8008b64:	20004dac 	.word	0x20004dac
 8008b68:	20004db0 	.word	0x20004db0
 8008b6c:	08011080 	.word	0x08011080
 8008b70:	08011320 	.word	0x08011320
 8008b74:	080110cc 	.word	0x080110cc
 8008b78:	2000834c 	.word	0x2000834c
 8008b7c:	20008351 	.word	0x20008351
 8008b80:	20008318 	.word	0x20008318
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d104      	bne.n	8008b98 <tcp_process+0x5d8>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	68da      	ldr	r2, [r3, #12]
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	60da      	str	r2, [r3, #12]
 8008b96:	e005      	b.n	8008ba4 <tcp_process+0x5e4>
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	617b      	str	r3, [r7, #20]
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1ef      	bne.n	8008b84 <tcp_process+0x5c4>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	60da      	str	r2, [r3, #12]
 8008baa:	4b77      	ldr	r3, [pc, #476]	; (8008d88 <tcp_process+0x7c8>)
 8008bac:	2201      	movs	r2, #1
 8008bae:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	220a      	movs	r2, #10
 8008bb4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008bb6:	4b75      	ldr	r3, [pc, #468]	; (8008d8c <tcp_process+0x7cc>)
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	60da      	str	r2, [r3, #12]
 8008bbe:	4a73      	ldr	r2, [pc, #460]	; (8008d8c <tcp_process+0x7cc>)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6013      	str	r3, [r2, #0]
 8008bc4:	f002 fcfa 	bl	800b5bc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008bc8:	e0d2      	b.n	8008d70 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	8b5b      	ldrh	r3, [r3, #26]
 8008bce:	f043 0302 	orr.w	r3, r3, #2
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2208      	movs	r2, #8
 8008bdc:	751a      	strb	r2, [r3, #20]
      break;
 8008bde:	e0c7      	b.n	8008d70 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008be0:	4b6b      	ldr	r3, [pc, #428]	; (8008d90 <tcp_process+0x7d0>)
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	f003 0310 	and.w	r3, r3, #16
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f000 80c1 	beq.w	8008d70 <tcp_process+0x7b0>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008bf2:	4b68      	ldr	r3, [pc, #416]	; (8008d94 <tcp_process+0x7d4>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	f040 80ba 	bne.w	8008d70 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f040 80b5 	bne.w	8008d70 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2206      	movs	r2, #6
 8008c0a:	751a      	strb	r2, [r3, #20]
      break;
 8008c0c:	e0b0      	b.n	8008d70 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f9ca 	bl	8008fa8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008c14:	4b60      	ldr	r3, [pc, #384]	; (8008d98 <tcp_process+0x7d8>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	f003 0320 	and.w	r3, r3, #32
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f000 80a9 	beq.w	8008d74 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	8b5b      	ldrh	r3, [r3, #26]
 8008c26:	f043 0302 	orr.w	r3, r3, #2
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f7fe fd39 	bl	80076a8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008c36:	4b59      	ldr	r3, [pc, #356]	; (8008d9c <tcp_process+0x7dc>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d105      	bne.n	8008c4c <tcp_process+0x68c>
 8008c40:	4b56      	ldr	r3, [pc, #344]	; (8008d9c <tcp_process+0x7dc>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	4a55      	ldr	r2, [pc, #340]	; (8008d9c <tcp_process+0x7dc>)
 8008c48:	6013      	str	r3, [r2, #0]
 8008c4a:	e013      	b.n	8008c74 <tcp_process+0x6b4>
 8008c4c:	4b53      	ldr	r3, [pc, #332]	; (8008d9c <tcp_process+0x7dc>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	613b      	str	r3, [r7, #16]
 8008c52:	e00c      	b.n	8008c6e <tcp_process+0x6ae>
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d104      	bne.n	8008c68 <tcp_process+0x6a8>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68da      	ldr	r2, [r3, #12]
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	60da      	str	r2, [r3, #12]
 8008c66:	e005      	b.n	8008c74 <tcp_process+0x6b4>
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	613b      	str	r3, [r7, #16]
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1ef      	bne.n	8008c54 <tcp_process+0x694>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	60da      	str	r2, [r3, #12]
 8008c7a:	4b43      	ldr	r3, [pc, #268]	; (8008d88 <tcp_process+0x7c8>)
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	220a      	movs	r2, #10
 8008c84:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008c86:	4b41      	ldr	r3, [pc, #260]	; (8008d8c <tcp_process+0x7cc>)
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	60da      	str	r2, [r3, #12]
 8008c8e:	4a3f      	ldr	r2, [pc, #252]	; (8008d8c <tcp_process+0x7cc>)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	f002 fc92 	bl	800b5bc <tcp_timer_needed>
      }
      break;
 8008c98:	e06c      	b.n	8008d74 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f984 	bl	8008fa8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008ca0:	4b3b      	ldr	r3, [pc, #236]	; (8008d90 <tcp_process+0x7d0>)
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	f003 0310 	and.w	r3, r3, #16
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d065      	beq.n	8008d78 <tcp_process+0x7b8>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cb0:	4b38      	ldr	r3, [pc, #224]	; (8008d94 <tcp_process+0x7d4>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d15f      	bne.n	8008d78 <tcp_process+0x7b8>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d15b      	bne.n	8008d78 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7fe fcf1 	bl	80076a8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008cc6:	4b35      	ldr	r3, [pc, #212]	; (8008d9c <tcp_process+0x7dc>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d105      	bne.n	8008cdc <tcp_process+0x71c>
 8008cd0:	4b32      	ldr	r3, [pc, #200]	; (8008d9c <tcp_process+0x7dc>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	4a31      	ldr	r2, [pc, #196]	; (8008d9c <tcp_process+0x7dc>)
 8008cd8:	6013      	str	r3, [r2, #0]
 8008cda:	e013      	b.n	8008d04 <tcp_process+0x744>
 8008cdc:	4b2f      	ldr	r3, [pc, #188]	; (8008d9c <tcp_process+0x7dc>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	60fb      	str	r3, [r7, #12]
 8008ce2:	e00c      	b.n	8008cfe <tcp_process+0x73e>
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d104      	bne.n	8008cf8 <tcp_process+0x738>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68da      	ldr	r2, [r3, #12]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	60da      	str	r2, [r3, #12]
 8008cf6:	e005      	b.n	8008d04 <tcp_process+0x744>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	60fb      	str	r3, [r7, #12]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1ef      	bne.n	8008ce4 <tcp_process+0x724>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	60da      	str	r2, [r3, #12]
 8008d0a:	4b1f      	ldr	r3, [pc, #124]	; (8008d88 <tcp_process+0x7c8>)
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	220a      	movs	r2, #10
 8008d14:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008d16:	4b1d      	ldr	r3, [pc, #116]	; (8008d8c <tcp_process+0x7cc>)
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	60da      	str	r2, [r3, #12]
 8008d1e:	4a1b      	ldr	r2, [pc, #108]	; (8008d8c <tcp_process+0x7cc>)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6013      	str	r3, [r2, #0]
 8008d24:	f002 fc4a 	bl	800b5bc <tcp_timer_needed>
      }
      break;
 8008d28:	e026      	b.n	8008d78 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f93c 	bl	8008fa8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008d30:	4b17      	ldr	r3, [pc, #92]	; (8008d90 <tcp_process+0x7d0>)
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	f003 0310 	and.w	r3, r3, #16
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d01f      	beq.n	8008d7c <tcp_process+0x7bc>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d40:	4b14      	ldr	r3, [pc, #80]	; (8008d94 <tcp_process+0x7d4>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d119      	bne.n	8008d7c <tcp_process+0x7bc>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d115      	bne.n	8008d7c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008d50:	4b11      	ldr	r3, [pc, #68]	; (8008d98 <tcp_process+0x7d8>)
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	f043 0310 	orr.w	r3, r3, #16
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	4b0f      	ldr	r3, [pc, #60]	; (8008d98 <tcp_process+0x7d8>)
 8008d5c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008d5e:	e00d      	b.n	8008d7c <tcp_process+0x7bc>
    default:
      break;
 8008d60:	bf00      	nop
 8008d62:	e00c      	b.n	8008d7e <tcp_process+0x7be>
      break;
 8008d64:	bf00      	nop
 8008d66:	e00a      	b.n	8008d7e <tcp_process+0x7be>
      break;
 8008d68:	bf00      	nop
 8008d6a:	e008      	b.n	8008d7e <tcp_process+0x7be>
      break;
 8008d6c:	bf00      	nop
 8008d6e:	e006      	b.n	8008d7e <tcp_process+0x7be>
      break;
 8008d70:	bf00      	nop
 8008d72:	e004      	b.n	8008d7e <tcp_process+0x7be>
      break;
 8008d74:	bf00      	nop
 8008d76:	e002      	b.n	8008d7e <tcp_process+0x7be>
      break;
 8008d78:	bf00      	nop
 8008d7a:	e000      	b.n	8008d7e <tcp_process+0x7be>
      break;
 8008d7c:	bf00      	nop
  }
  return ERR_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3724      	adds	r7, #36	; 0x24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd90      	pop	{r4, r7, pc}
 8008d88:	20008320 	.word	0x20008320
 8008d8c:	2000831c 	.word	0x2000831c
 8008d90:	20008350 	.word	0x20008350
 8008d94:	20008348 	.word	0x20008348
 8008d98:	20008351 	.word	0x20008351
 8008d9c:	20008318 	.word	0x20008318

08008da0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008da0:	b590      	push	{r4, r7, lr}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d106      	bne.n	8008dbe <tcp_oos_insert_segment+0x1e>
 8008db0:	4b3b      	ldr	r3, [pc, #236]	; (8008ea0 <tcp_oos_insert_segment+0x100>)
 8008db2:	f240 421f 	movw	r2, #1055	; 0x41f
 8008db6:	493b      	ldr	r1, [pc, #236]	; (8008ea4 <tcp_oos_insert_segment+0x104>)
 8008db8:	483b      	ldr	r0, [pc, #236]	; (8008ea8 <tcp_oos_insert_segment+0x108>)
 8008dba:	f005 fe0d 	bl	800e9d8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	899b      	ldrh	r3, [r3, #12]
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fb fc0e 	bl	80045e8 <lwip_htons>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	f003 0301 	and.w	r3, r3, #1
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d028      	beq.n	8008e2a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008dd8:	6838      	ldr	r0, [r7, #0]
 8008dda:	f7fe fa63 	bl	80072a4 <tcp_segs_free>
    next = NULL;
 8008dde:	2300      	movs	r3, #0
 8008de0:	603b      	str	r3, [r7, #0]
 8008de2:	e056      	b.n	8008e92 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	899b      	ldrh	r3, [r3, #12]
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fb fbfb 	bl	80045e8 <lwip_htons>
 8008df2:	4603      	mov	r3, r0
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00d      	beq.n	8008e1a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	899b      	ldrh	r3, [r3, #12]
 8008e04:	b29c      	uxth	r4, r3
 8008e06:	2001      	movs	r0, #1
 8008e08:	f7fb fbee 	bl	80045e8 <lwip_htons>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	461a      	mov	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	4322      	orrs	r2, r4
 8008e16:	b292      	uxth	r2, r2
 8008e18:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f7fe fa52 	bl	80072ce <tcp_seg_free>
    while (next &&
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00e      	beq.n	8008e4e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	891b      	ldrh	r3, [r3, #8]
 8008e34:	461a      	mov	r2, r3
 8008e36:	4b1d      	ldr	r3, [pc, #116]	; (8008eac <tcp_oos_insert_segment+0x10c>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	441a      	add	r2, r3
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	8909      	ldrh	r1, [r1, #8]
 8008e46:	440b      	add	r3, r1
 8008e48:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	daca      	bge.n	8008de4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d01e      	beq.n	8008e92 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	891b      	ldrh	r3, [r3, #8]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	4b14      	ldr	r3, [pc, #80]	; (8008eac <tcp_oos_insert_segment+0x10c>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	441a      	add	r2, r3
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	dd12      	ble.n	8008e92 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	4b0d      	ldr	r3, [pc, #52]	; (8008eac <tcp_oos_insert_segment+0x10c>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	685a      	ldr	r2, [r3, #4]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	891b      	ldrh	r3, [r3, #8]
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	f7fc fd83 	bl	8005998 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	683a      	ldr	r2, [r7, #0]
 8008e96:	601a      	str	r2, [r3, #0]
}
 8008e98:	bf00      	nop
 8008e9a:	3714      	adds	r7, #20
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd90      	pop	{r4, r7, pc}
 8008ea0:	08011080 	.word	0x08011080
 8008ea4:	08011340 	.word	0x08011340
 8008ea8:	080110cc 	.word	0x080110cc
 8008eac:	20008344 	.word	0x20008344

08008eb0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008eb0:	b5b0      	push	{r4, r5, r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]
 8008ebc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008ebe:	e03e      	b.n	8008f3e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fc ff70 	bl	8005db4 <pbuf_clen>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008ede:	8a7a      	ldrh	r2, [r7, #18]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d906      	bls.n	8008ef2 <tcp_free_acked_segments+0x42>
 8008ee4:	4b2a      	ldr	r3, [pc, #168]	; (8008f90 <tcp_free_acked_segments+0xe0>)
 8008ee6:	f240 4257 	movw	r2, #1111	; 0x457
 8008eea:	492a      	ldr	r1, [pc, #168]	; (8008f94 <tcp_free_acked_segments+0xe4>)
 8008eec:	482a      	ldr	r0, [pc, #168]	; (8008f98 <tcp_free_acked_segments+0xe8>)
 8008eee:	f005 fd73 	bl	800e9d8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8008ef8:	8a7b      	ldrh	r3, [r7, #18]
 8008efa:	1ad3      	subs	r3, r2, r3
 8008efc:	b29a      	uxth	r2, r3
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	891a      	ldrh	r2, [r3, #8]
 8008f08:	4b24      	ldr	r3, [pc, #144]	; (8008f9c <tcp_free_acked_segments+0xec>)
 8008f0a:	881b      	ldrh	r3, [r3, #0]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	4b22      	ldr	r3, [pc, #136]	; (8008f9c <tcp_free_acked_segments+0xec>)
 8008f12:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008f14:	6978      	ldr	r0, [r7, #20]
 8008f16:	f7fe f9da 	bl	80072ce <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00c      	beq.n	8008f3e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d109      	bne.n	8008f3e <tcp_free_acked_segments+0x8e>
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d106      	bne.n	8008f3e <tcp_free_acked_segments+0x8e>
 8008f30:	4b17      	ldr	r3, [pc, #92]	; (8008f90 <tcp_free_acked_segments+0xe0>)
 8008f32:	f240 4261 	movw	r2, #1121	; 0x461
 8008f36:	491a      	ldr	r1, [pc, #104]	; (8008fa0 <tcp_free_acked_segments+0xf0>)
 8008f38:	4817      	ldr	r0, [pc, #92]	; (8008f98 <tcp_free_acked_segments+0xe8>)
 8008f3a:	f005 fd4d 	bl	800e9d8 <iprintf>
  while (seg_list != NULL &&
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d020      	beq.n	8008f86 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fb fb61 	bl	8004612 <lwip_htonl>
 8008f50:	4604      	mov	r4, r0
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	891b      	ldrh	r3, [r3, #8]
 8008f56:	461d      	mov	r5, r3
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	899b      	ldrh	r3, [r3, #12]
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fb fb41 	bl	80045e8 <lwip_htons>
 8008f66:	4603      	mov	r3, r0
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	f003 0303 	and.w	r3, r3, #3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d001      	beq.n	8008f76 <tcp_free_acked_segments+0xc6>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e000      	b.n	8008f78 <tcp_free_acked_segments+0xc8>
 8008f76:	2300      	movs	r3, #0
 8008f78:	442b      	add	r3, r5
 8008f7a:	18e2      	adds	r2, r4, r3
 8008f7c:	4b09      	ldr	r3, [pc, #36]	; (8008fa4 <tcp_free_acked_segments+0xf4>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	dd9c      	ble.n	8008ec0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008f86:	68bb      	ldr	r3, [r7, #8]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3718      	adds	r7, #24
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bdb0      	pop	{r4, r5, r7, pc}
 8008f90:	08011080 	.word	0x08011080
 8008f94:	08011368 	.word	0x08011368
 8008f98:	080110cc 	.word	0x080110cc
 8008f9c:	2000834c 	.word	0x2000834c
 8008fa0:	08011390 	.word	0x08011390
 8008fa4:	20008348 	.word	0x20008348

08008fa8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008fa8:	b5b0      	push	{r4, r5, r7, lr}
 8008faa:	b094      	sub	sp, #80	; 0x50
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d106      	bne.n	8008fc8 <tcp_receive+0x20>
 8008fba:	4b91      	ldr	r3, [pc, #580]	; (8009200 <tcp_receive+0x258>)
 8008fbc:	f240 427b 	movw	r2, #1147	; 0x47b
 8008fc0:	4990      	ldr	r1, [pc, #576]	; (8009204 <tcp_receive+0x25c>)
 8008fc2:	4891      	ldr	r0, [pc, #580]	; (8009208 <tcp_receive+0x260>)
 8008fc4:	f005 fd08 	bl	800e9d8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	7d1b      	ldrb	r3, [r3, #20]
 8008fcc:	2b03      	cmp	r3, #3
 8008fce:	d806      	bhi.n	8008fde <tcp_receive+0x36>
 8008fd0:	4b8b      	ldr	r3, [pc, #556]	; (8009200 <tcp_receive+0x258>)
 8008fd2:	f240 427c 	movw	r2, #1148	; 0x47c
 8008fd6:	498d      	ldr	r1, [pc, #564]	; (800920c <tcp_receive+0x264>)
 8008fd8:	488b      	ldr	r0, [pc, #556]	; (8009208 <tcp_receive+0x260>)
 8008fda:	f005 fcfd 	bl	800e9d8 <iprintf>

  if (flags & TCP_ACK) {
 8008fde:	4b8c      	ldr	r3, [pc, #560]	; (8009210 <tcp_receive+0x268>)
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	f003 0310 	and.w	r3, r3, #16
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f000 8264 	beq.w	80094b4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff8:	4413      	add	r3, r2
 8008ffa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009000:	4b84      	ldr	r3, [pc, #528]	; (8009214 <tcp_receive+0x26c>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	2b00      	cmp	r3, #0
 8009008:	db1b      	blt.n	8009042 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800900e:	4b81      	ldr	r3, [pc, #516]	; (8009214 <tcp_receive+0x26c>)
 8009010:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009012:	429a      	cmp	r2, r3
 8009014:	d106      	bne.n	8009024 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800901a:	4b7f      	ldr	r3, [pc, #508]	; (8009218 <tcp_receive+0x270>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	2b00      	cmp	r3, #0
 8009022:	db0e      	blt.n	8009042 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009028:	4b7b      	ldr	r3, [pc, #492]	; (8009218 <tcp_receive+0x270>)
 800902a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800902c:	429a      	cmp	r2, r3
 800902e:	d125      	bne.n	800907c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009030:	4b7a      	ldr	r3, [pc, #488]	; (800921c <tcp_receive+0x274>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	89db      	ldrh	r3, [r3, #14]
 8009036:	b29a      	uxth	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800903e:	429a      	cmp	r2, r3
 8009040:	d91c      	bls.n	800907c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009042:	4b76      	ldr	r3, [pc, #472]	; (800921c <tcp_receive+0x274>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	89db      	ldrh	r3, [r3, #14]
 8009048:	b29a      	uxth	r2, r3
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800905c:	429a      	cmp	r2, r3
 800905e:	d205      	bcs.n	800906c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800906c:	4b69      	ldr	r3, [pc, #420]	; (8009214 <tcp_receive+0x26c>)
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009074:	4b68      	ldr	r3, [pc, #416]	; (8009218 <tcp_receive+0x270>)
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800907c:	4b66      	ldr	r3, [pc, #408]	; (8009218 <tcp_receive+0x270>)
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	2b00      	cmp	r3, #0
 8009088:	dc58      	bgt.n	800913c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800908a:	4b65      	ldr	r3, [pc, #404]	; (8009220 <tcp_receive+0x278>)
 800908c:	881b      	ldrh	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d14b      	bne.n	800912a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800909c:	4413      	add	r3, r2
 800909e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d142      	bne.n	800912a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	db3d      	blt.n	800912a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090b2:	4b59      	ldr	r3, [pc, #356]	; (8009218 <tcp_receive+0x270>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d137      	bne.n	800912a <tcp_receive+0x182>
              found_dupack = 1;
 80090ba:	2301      	movs	r3, #1
 80090bc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80090c4:	2bff      	cmp	r3, #255	; 0xff
 80090c6:	d007      	beq.n	80090d8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80090ce:	3301      	adds	r3, #1
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80090de:	2b03      	cmp	r3, #3
 80090e0:	d91b      	bls.n	800911a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80090ec:	4413      	add	r3, r2
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d30a      	bcc.n	8009110 <tcp_receive+0x168>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009104:	4413      	add	r3, r2
 8009106:	b29a      	uxth	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800910e:	e004      	b.n	800911a <tcp_receive+0x172>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009116:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009120:	2b02      	cmp	r3, #2
 8009122:	d902      	bls.n	800912a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f001 feeb 	bl	800af00 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800912a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800912c:	2b00      	cmp	r3, #0
 800912e:	f040 8161 	bne.w	80093f4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800913a:	e15b      	b.n	80093f4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800913c:	4b36      	ldr	r3, [pc, #216]	; (8009218 <tcp_receive+0x270>)
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009144:	1ad3      	subs	r3, r2, r3
 8009146:	3b01      	subs	r3, #1
 8009148:	2b00      	cmp	r3, #0
 800914a:	f2c0 814e 	blt.w	80093ea <tcp_receive+0x442>
 800914e:	4b32      	ldr	r3, [pc, #200]	; (8009218 <tcp_receive+0x270>)
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009156:	1ad3      	subs	r3, r2, r3
 8009158:	2b00      	cmp	r3, #0
 800915a:	f300 8146 	bgt.w	80093ea <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	8b5b      	ldrh	r3, [r3, #26]
 8009162:	f003 0304 	and.w	r3, r3, #4
 8009166:	2b00      	cmp	r3, #0
 8009168:	d010      	beq.n	800918c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	8b5b      	ldrh	r3, [r3, #26]
 800916e:	f023 0304 	bic.w	r3, r3, #4
 8009172:	b29a      	uxth	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800919a:	10db      	asrs	r3, r3, #3
 800919c:	b21b      	sxth	r3, r3
 800919e:	b29a      	uxth	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	4413      	add	r3, r2
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	b21a      	sxth	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80091b4:	4b18      	ldr	r3, [pc, #96]	; (8009218 <tcp_receive+0x270>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091be:	b29b      	uxth	r3, r3
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80091cc:	4b12      	ldr	r3, [pc, #72]	; (8009218 <tcp_receive+0x270>)
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	7d1b      	ldrb	r3, [r3, #20]
 80091d8:	2b03      	cmp	r3, #3
 80091da:	f240 8097 	bls.w	800930c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d245      	bcs.n	800927a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	8b5b      	ldrh	r3, [r3, #26]
 80091f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d014      	beq.n	8009224 <tcp_receive+0x27c>
 80091fa:	2301      	movs	r3, #1
 80091fc:	e013      	b.n	8009226 <tcp_receive+0x27e>
 80091fe:	bf00      	nop
 8009200:	08011080 	.word	0x08011080
 8009204:	080113b0 	.word	0x080113b0
 8009208:	080110cc 	.word	0x080110cc
 800920c:	080113cc 	.word	0x080113cc
 8009210:	20008350 	.word	0x20008350
 8009214:	20008344 	.word	0x20008344
 8009218:	20008348 	.word	0x20008348
 800921c:	20008334 	.word	0x20008334
 8009220:	2000834e 	.word	0x2000834e
 8009224:	2302      	movs	r3, #2
 8009226:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800922a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800922e:	b29a      	uxth	r2, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009234:	fb12 f303 	smulbb	r3, r2, r3
 8009238:	b29b      	uxth	r3, r3
 800923a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800923c:	4293      	cmp	r3, r2
 800923e:	bf28      	it	cs
 8009240:	4613      	movcs	r3, r2
 8009242:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800924a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800924c:	4413      	add	r3, r2
 800924e:	b29a      	uxth	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009256:	429a      	cmp	r2, r3
 8009258:	d309      	bcc.n	800926e <tcp_receive+0x2c6>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009260:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009262:	4413      	add	r3, r2
 8009264:	b29a      	uxth	r2, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800926c:	e04e      	b.n	800930c <tcp_receive+0x364>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009274:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009278:	e048      	b.n	800930c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009280:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009282:	4413      	add	r3, r2
 8009284:	b29a      	uxth	r2, r3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800928c:	429a      	cmp	r2, r3
 800928e:	d309      	bcc.n	80092a4 <tcp_receive+0x2fc>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009296:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009298:	4413      	add	r3, r2
 800929a:	b29a      	uxth	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80092a2:	e004      	b.n	80092ae <tcp_receive+0x306>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d326      	bcc.n	800930c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092de:	4413      	add	r3, r2
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d30a      	bcc.n	8009302 <tcp_receive+0x35a>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092f6:	4413      	add	r3, r2
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009300:	e004      	b.n	800930c <tcp_receive+0x364>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009308:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009314:	4a98      	ldr	r2, [pc, #608]	; (8009578 <tcp_receive+0x5d0>)
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7ff fdca 	bl	8008eb0 <tcp_free_acked_segments>
 800931c:	4602      	mov	r2, r0
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800932a:	4a94      	ldr	r2, [pc, #592]	; (800957c <tcp_receive+0x5d4>)
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7ff fdbf 	bl	8008eb0 <tcp_free_acked_segments>
 8009332:	4602      	mov	r2, r0
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800933c:	2b00      	cmp	r3, #0
 800933e:	d104      	bne.n	800934a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009346:	861a      	strh	r2, [r3, #48]	; 0x30
 8009348:	e002      	b.n	8009350 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800935a:	2b00      	cmp	r3, #0
 800935c:	d103      	bne.n	8009366 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800936c:	4b84      	ldr	r3, [pc, #528]	; (8009580 <tcp_receive+0x5d8>)
 800936e:	881b      	ldrh	r3, [r3, #0]
 8009370:	4413      	add	r3, r2
 8009372:	b29a      	uxth	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	8b5b      	ldrh	r3, [r3, #26]
 800937e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009382:	2b00      	cmp	r3, #0
 8009384:	d035      	beq.n	80093f2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800938a:	2b00      	cmp	r3, #0
 800938c:	d118      	bne.n	80093c0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00c      	beq.n	80093b0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fb f935 	bl	8004612 <lwip_htonl>
 80093a8:	4603      	mov	r3, r0
 80093aa:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	dc20      	bgt.n	80093f2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	8b5b      	ldrh	r3, [r3, #26]
 80093b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80093be:	e018      	b.n	80093f2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fb f920 	bl	8004612 <lwip_htonl>
 80093d2:	4603      	mov	r3, r0
 80093d4:	1ae3      	subs	r3, r4, r3
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	dc0b      	bgt.n	80093f2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	8b5b      	ldrh	r3, [r3, #26]
 80093de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80093e8:	e003      	b.n	80093f2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f001 ff76 	bl	800b2dc <tcp_send_empty_ack>
 80093f0:	e000      	b.n	80093f4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80093f2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d05b      	beq.n	80094b4 <tcp_receive+0x50c>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009400:	4b60      	ldr	r3, [pc, #384]	; (8009584 <tcp_receive+0x5dc>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	2b00      	cmp	r3, #0
 8009408:	da54      	bge.n	80094b4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800940a:	4b5f      	ldr	r3, [pc, #380]	; (8009588 <tcp_receive+0x5e0>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	b29a      	uxth	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009414:	b29b      	uxth	r3, r3
 8009416:	1ad3      	subs	r3, r2, r3
 8009418:	b29b      	uxth	r3, r3
 800941a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800941e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009428:	10db      	asrs	r3, r3, #3
 800942a:	b21b      	sxth	r3, r3
 800942c:	b29b      	uxth	r3, r3
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	b29b      	uxth	r3, r3
 8009432:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800943c:	b29a      	uxth	r2, r3
 800943e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009442:	4413      	add	r3, r2
 8009444:	b29b      	uxth	r3, r3
 8009446:	b21a      	sxth	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800944c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009450:	2b00      	cmp	r3, #0
 8009452:	da05      	bge.n	8009460 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009454:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009458:	425b      	negs	r3, r3
 800945a:	b29b      	uxth	r3, r3
 800945c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009460:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800946a:	109b      	asrs	r3, r3, #2
 800946c:	b21b      	sxth	r3, r3
 800946e:	b29b      	uxth	r3, r3
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	b29b      	uxth	r3, r3
 8009474:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800947e:	b29a      	uxth	r2, r3
 8009480:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009484:	4413      	add	r3, r2
 8009486:	b29b      	uxth	r3, r3
 8009488:	b21a      	sxth	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009494:	10db      	asrs	r3, r3, #3
 8009496:	b21b      	sxth	r3, r3
 8009498:	b29a      	uxth	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	4413      	add	r3, r2
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	b21a      	sxth	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80094b4:	4b35      	ldr	r3, [pc, #212]	; (800958c <tcp_receive+0x5e4>)
 80094b6:	881b      	ldrh	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 84e2 	beq.w	8009e82 <tcp_receive+0xeda>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	7d1b      	ldrb	r3, [r3, #20]
 80094c2:	2b06      	cmp	r3, #6
 80094c4:	f200 84dd 	bhi.w	8009e82 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094cc:	4b30      	ldr	r3, [pc, #192]	; (8009590 <tcp_receive+0x5e8>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	3b01      	subs	r3, #1
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f2c0 808f 	blt.w	80095f8 <tcp_receive+0x650>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094de:	4b2b      	ldr	r3, [pc, #172]	; (800958c <tcp_receive+0x5e4>)
 80094e0:	881b      	ldrh	r3, [r3, #0]
 80094e2:	4619      	mov	r1, r3
 80094e4:	4b2a      	ldr	r3, [pc, #168]	; (8009590 <tcp_receive+0x5e8>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	440b      	add	r3, r1
 80094ea:	1ad3      	subs	r3, r2, r3
 80094ec:	3301      	adds	r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f300 8082 	bgt.w	80095f8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80094f4:	4b27      	ldr	r3, [pc, #156]	; (8009594 <tcp_receive+0x5ec>)
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094fe:	4b24      	ldr	r3, [pc, #144]	; (8009590 <tcp_receive+0x5e8>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009506:	4b23      	ldr	r3, [pc, #140]	; (8009594 <tcp_receive+0x5ec>)
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d106      	bne.n	800951c <tcp_receive+0x574>
 800950e:	4b22      	ldr	r3, [pc, #136]	; (8009598 <tcp_receive+0x5f0>)
 8009510:	f240 5294 	movw	r2, #1428	; 0x594
 8009514:	4921      	ldr	r1, [pc, #132]	; (800959c <tcp_receive+0x5f4>)
 8009516:	4822      	ldr	r0, [pc, #136]	; (80095a0 <tcp_receive+0x5f8>)
 8009518:	f005 fa5e 	bl	800e9d8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800951c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009522:	4293      	cmp	r3, r2
 8009524:	d906      	bls.n	8009534 <tcp_receive+0x58c>
 8009526:	4b1c      	ldr	r3, [pc, #112]	; (8009598 <tcp_receive+0x5f0>)
 8009528:	f240 5295 	movw	r2, #1429	; 0x595
 800952c:	491d      	ldr	r1, [pc, #116]	; (80095a4 <tcp_receive+0x5fc>)
 800952e:	481c      	ldr	r0, [pc, #112]	; (80095a0 <tcp_receive+0x5f8>)
 8009530:	f005 fa52 	bl	800e9d8 <iprintf>
      off = (u16_t)off32;
 8009534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009536:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800953a:	4b16      	ldr	r3, [pc, #88]	; (8009594 <tcp_receive+0x5ec>)
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	891b      	ldrh	r3, [r3, #8]
 8009540:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009544:	429a      	cmp	r2, r3
 8009546:	d906      	bls.n	8009556 <tcp_receive+0x5ae>
 8009548:	4b13      	ldr	r3, [pc, #76]	; (8009598 <tcp_receive+0x5f0>)
 800954a:	f240 5297 	movw	r2, #1431	; 0x597
 800954e:	4916      	ldr	r1, [pc, #88]	; (80095a8 <tcp_receive+0x600>)
 8009550:	4813      	ldr	r0, [pc, #76]	; (80095a0 <tcp_receive+0x5f8>)
 8009552:	f005 fa41 	bl	800e9d8 <iprintf>
      inseg.len -= off;
 8009556:	4b0f      	ldr	r3, [pc, #60]	; (8009594 <tcp_receive+0x5ec>)
 8009558:	891a      	ldrh	r2, [r3, #8]
 800955a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800955e:	1ad3      	subs	r3, r2, r3
 8009560:	b29a      	uxth	r2, r3
 8009562:	4b0c      	ldr	r3, [pc, #48]	; (8009594 <tcp_receive+0x5ec>)
 8009564:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009566:	4b0b      	ldr	r3, [pc, #44]	; (8009594 <tcp_receive+0x5ec>)
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	891a      	ldrh	r2, [r3, #8]
 800956c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009574:	e02a      	b.n	80095cc <tcp_receive+0x624>
 8009576:	bf00      	nop
 8009578:	080113e8 	.word	0x080113e8
 800957c:	080113f0 	.word	0x080113f0
 8009580:	2000834c 	.word	0x2000834c
 8009584:	20008348 	.word	0x20008348
 8009588:	2000830c 	.word	0x2000830c
 800958c:	2000834e 	.word	0x2000834e
 8009590:	20008344 	.word	0x20008344
 8009594:	20008324 	.word	0x20008324
 8009598:	08011080 	.word	0x08011080
 800959c:	080113f8 	.word	0x080113f8
 80095a0:	080110cc 	.word	0x080110cc
 80095a4:	08011408 	.word	0x08011408
 80095a8:	08011418 	.word	0x08011418
        off -= p->len;
 80095ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095ae:	895b      	ldrh	r3, [r3, #10]
 80095b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80095b4:	1ad3      	subs	r3, r2, r3
 80095b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80095ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80095be:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80095c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095c2:	2200      	movs	r2, #0
 80095c4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80095c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80095cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095ce:	895b      	ldrh	r3, [r3, #10]
 80095d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d8e9      	bhi.n	80095ac <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80095d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80095dc:	4619      	mov	r1, r3
 80095de:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80095e0:	f7fc fada 	bl	8005b98 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e8:	4a91      	ldr	r2, [pc, #580]	; (8009830 <tcp_receive+0x888>)
 80095ea:	6013      	str	r3, [r2, #0]
 80095ec:	4b91      	ldr	r3, [pc, #580]	; (8009834 <tcp_receive+0x88c>)
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	4a8f      	ldr	r2, [pc, #572]	; (8009830 <tcp_receive+0x888>)
 80095f2:	6812      	ldr	r2, [r2, #0]
 80095f4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80095f6:	e00d      	b.n	8009614 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80095f8:	4b8d      	ldr	r3, [pc, #564]	; (8009830 <tcp_receive+0x888>)
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	da06      	bge.n	8009614 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	8b5b      	ldrh	r3, [r3, #26]
 800960a:	f043 0302 	orr.w	r3, r3, #2
 800960e:	b29a      	uxth	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009614:	4b86      	ldr	r3, [pc, #536]	; (8009830 <tcp_receive+0x888>)
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961c:	1ad3      	subs	r3, r2, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	f2c0 842a 	blt.w	8009e78 <tcp_receive+0xed0>
 8009624:	4b82      	ldr	r3, [pc, #520]	; (8009830 <tcp_receive+0x888>)
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962c:	6879      	ldr	r1, [r7, #4]
 800962e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009630:	440b      	add	r3, r1
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	3301      	adds	r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	f300 841e 	bgt.w	8009e78 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009640:	4b7b      	ldr	r3, [pc, #492]	; (8009830 <tcp_receive+0x888>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	429a      	cmp	r2, r3
 8009646:	f040 829a 	bne.w	8009b7e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800964a:	4b7a      	ldr	r3, [pc, #488]	; (8009834 <tcp_receive+0x88c>)
 800964c:	891c      	ldrh	r4, [r3, #8]
 800964e:	4b79      	ldr	r3, [pc, #484]	; (8009834 <tcp_receive+0x88c>)
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	899b      	ldrh	r3, [r3, #12]
 8009654:	b29b      	uxth	r3, r3
 8009656:	4618      	mov	r0, r3
 8009658:	f7fa ffc6 	bl	80045e8 <lwip_htons>
 800965c:	4603      	mov	r3, r0
 800965e:	b2db      	uxtb	r3, r3
 8009660:	f003 0303 	and.w	r3, r3, #3
 8009664:	2b00      	cmp	r3, #0
 8009666:	d001      	beq.n	800966c <tcp_receive+0x6c4>
 8009668:	2301      	movs	r3, #1
 800966a:	e000      	b.n	800966e <tcp_receive+0x6c6>
 800966c:	2300      	movs	r3, #0
 800966e:	4423      	add	r3, r4
 8009670:	b29a      	uxth	r2, r3
 8009672:	4b71      	ldr	r3, [pc, #452]	; (8009838 <tcp_receive+0x890>)
 8009674:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800967a:	4b6f      	ldr	r3, [pc, #444]	; (8009838 <tcp_receive+0x890>)
 800967c:	881b      	ldrh	r3, [r3, #0]
 800967e:	429a      	cmp	r2, r3
 8009680:	d275      	bcs.n	800976e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009682:	4b6c      	ldr	r3, [pc, #432]	; (8009834 <tcp_receive+0x88c>)
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	899b      	ldrh	r3, [r3, #12]
 8009688:	b29b      	uxth	r3, r3
 800968a:	4618      	mov	r0, r3
 800968c:	f7fa ffac 	bl	80045e8 <lwip_htons>
 8009690:	4603      	mov	r3, r0
 8009692:	b2db      	uxtb	r3, r3
 8009694:	f003 0301 	and.w	r3, r3, #1
 8009698:	2b00      	cmp	r3, #0
 800969a:	d01f      	beq.n	80096dc <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800969c:	4b65      	ldr	r3, [pc, #404]	; (8009834 <tcp_receive+0x88c>)
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	899b      	ldrh	r3, [r3, #12]
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	b21b      	sxth	r3, r3
 80096a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80096aa:	b21c      	sxth	r4, r3
 80096ac:	4b61      	ldr	r3, [pc, #388]	; (8009834 <tcp_receive+0x88c>)
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	899b      	ldrh	r3, [r3, #12]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fa ff97 	bl	80045e8 <lwip_htons>
 80096ba:	4603      	mov	r3, r0
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	b29b      	uxth	r3, r3
 80096c0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fa ff8e 	bl	80045e8 <lwip_htons>
 80096cc:	4603      	mov	r3, r0
 80096ce:	b21b      	sxth	r3, r3
 80096d0:	4323      	orrs	r3, r4
 80096d2:	b21a      	sxth	r2, r3
 80096d4:	4b57      	ldr	r3, [pc, #348]	; (8009834 <tcp_receive+0x88c>)
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	b292      	uxth	r2, r2
 80096da:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80096e0:	4b54      	ldr	r3, [pc, #336]	; (8009834 <tcp_receive+0x88c>)
 80096e2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80096e4:	4b53      	ldr	r3, [pc, #332]	; (8009834 <tcp_receive+0x88c>)
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	899b      	ldrh	r3, [r3, #12]
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fa ff7b 	bl	80045e8 <lwip_htons>
 80096f2:	4603      	mov	r3, r0
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	f003 0302 	and.w	r3, r3, #2
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d005      	beq.n	800970a <tcp_receive+0x762>
            inseg.len -= 1;
 80096fe:	4b4d      	ldr	r3, [pc, #308]	; (8009834 <tcp_receive+0x88c>)
 8009700:	891b      	ldrh	r3, [r3, #8]
 8009702:	3b01      	subs	r3, #1
 8009704:	b29a      	uxth	r2, r3
 8009706:	4b4b      	ldr	r3, [pc, #300]	; (8009834 <tcp_receive+0x88c>)
 8009708:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800970a:	4b4a      	ldr	r3, [pc, #296]	; (8009834 <tcp_receive+0x88c>)
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	4a49      	ldr	r2, [pc, #292]	; (8009834 <tcp_receive+0x88c>)
 8009710:	8912      	ldrh	r2, [r2, #8]
 8009712:	4611      	mov	r1, r2
 8009714:	4618      	mov	r0, r3
 8009716:	f7fc f93f 	bl	8005998 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800971a:	4b46      	ldr	r3, [pc, #280]	; (8009834 <tcp_receive+0x88c>)
 800971c:	891c      	ldrh	r4, [r3, #8]
 800971e:	4b45      	ldr	r3, [pc, #276]	; (8009834 <tcp_receive+0x88c>)
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	899b      	ldrh	r3, [r3, #12]
 8009724:	b29b      	uxth	r3, r3
 8009726:	4618      	mov	r0, r3
 8009728:	f7fa ff5e 	bl	80045e8 <lwip_htons>
 800972c:	4603      	mov	r3, r0
 800972e:	b2db      	uxtb	r3, r3
 8009730:	f003 0303 	and.w	r3, r3, #3
 8009734:	2b00      	cmp	r3, #0
 8009736:	d001      	beq.n	800973c <tcp_receive+0x794>
 8009738:	2301      	movs	r3, #1
 800973a:	e000      	b.n	800973e <tcp_receive+0x796>
 800973c:	2300      	movs	r3, #0
 800973e:	4423      	add	r3, r4
 8009740:	b29a      	uxth	r2, r3
 8009742:	4b3d      	ldr	r3, [pc, #244]	; (8009838 <tcp_receive+0x890>)
 8009744:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009746:	4b3c      	ldr	r3, [pc, #240]	; (8009838 <tcp_receive+0x890>)
 8009748:	881b      	ldrh	r3, [r3, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	4b38      	ldr	r3, [pc, #224]	; (8009830 <tcp_receive+0x888>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	441a      	add	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009756:	6879      	ldr	r1, [r7, #4]
 8009758:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800975a:	440b      	add	r3, r1
 800975c:	429a      	cmp	r2, r3
 800975e:	d006      	beq.n	800976e <tcp_receive+0x7c6>
 8009760:	4b36      	ldr	r3, [pc, #216]	; (800983c <tcp_receive+0x894>)
 8009762:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009766:	4936      	ldr	r1, [pc, #216]	; (8009840 <tcp_receive+0x898>)
 8009768:	4836      	ldr	r0, [pc, #216]	; (8009844 <tcp_receive+0x89c>)
 800976a:	f005 f935 	bl	800e9d8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 80e7 	beq.w	8009946 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009778:	4b2e      	ldr	r3, [pc, #184]	; (8009834 <tcp_receive+0x88c>)
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	899b      	ldrh	r3, [r3, #12]
 800977e:	b29b      	uxth	r3, r3
 8009780:	4618      	mov	r0, r3
 8009782:	f7fa ff31 	bl	80045e8 <lwip_htons>
 8009786:	4603      	mov	r3, r0
 8009788:	b2db      	uxtb	r3, r3
 800978a:	f003 0301 	and.w	r3, r3, #1
 800978e:	2b00      	cmp	r3, #0
 8009790:	d010      	beq.n	80097b4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009792:	e00a      	b.n	80097aa <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009798:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f7fd fd92 	bl	80072ce <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1f0      	bne.n	8009794 <tcp_receive+0x7ec>
 80097b2:	e0c8      	b.n	8009946 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097b8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80097ba:	e052      	b.n	8009862 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80097bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	899b      	ldrh	r3, [r3, #12]
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7fa ff0f 	bl	80045e8 <lwip_htons>
 80097ca:	4603      	mov	r3, r0
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d03d      	beq.n	8009852 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80097d6:	4b17      	ldr	r3, [pc, #92]	; (8009834 <tcp_receive+0x88c>)
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	899b      	ldrh	r3, [r3, #12]
 80097dc:	b29b      	uxth	r3, r3
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fa ff02 	bl	80045e8 <lwip_htons>
 80097e4:	4603      	mov	r3, r0
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d130      	bne.n	8009852 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80097f0:	4b10      	ldr	r3, [pc, #64]	; (8009834 <tcp_receive+0x88c>)
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	899b      	ldrh	r3, [r3, #12]
 80097f6:	b29c      	uxth	r4, r3
 80097f8:	2001      	movs	r0, #1
 80097fa:	f7fa fef5 	bl	80045e8 <lwip_htons>
 80097fe:	4603      	mov	r3, r0
 8009800:	461a      	mov	r2, r3
 8009802:	4b0c      	ldr	r3, [pc, #48]	; (8009834 <tcp_receive+0x88c>)
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	4322      	orrs	r2, r4
 8009808:	b292      	uxth	r2, r2
 800980a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800980c:	4b09      	ldr	r3, [pc, #36]	; (8009834 <tcp_receive+0x88c>)
 800980e:	891c      	ldrh	r4, [r3, #8]
 8009810:	4b08      	ldr	r3, [pc, #32]	; (8009834 <tcp_receive+0x88c>)
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	899b      	ldrh	r3, [r3, #12]
 8009816:	b29b      	uxth	r3, r3
 8009818:	4618      	mov	r0, r3
 800981a:	f7fa fee5 	bl	80045e8 <lwip_htons>
 800981e:	4603      	mov	r3, r0
 8009820:	b2db      	uxtb	r3, r3
 8009822:	f003 0303 	and.w	r3, r3, #3
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00e      	beq.n	8009848 <tcp_receive+0x8a0>
 800982a:	2301      	movs	r3, #1
 800982c:	e00d      	b.n	800984a <tcp_receive+0x8a2>
 800982e:	bf00      	nop
 8009830:	20008344 	.word	0x20008344
 8009834:	20008324 	.word	0x20008324
 8009838:	2000834e 	.word	0x2000834e
 800983c:	08011080 	.word	0x08011080
 8009840:	08011428 	.word	0x08011428
 8009844:	080110cc 	.word	0x080110cc
 8009848:	2300      	movs	r3, #0
 800984a:	4423      	add	r3, r4
 800984c:	b29a      	uxth	r2, r3
 800984e:	4b98      	ldr	r3, [pc, #608]	; (8009ab0 <tcp_receive+0xb08>)
 8009850:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009854:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800985c:	6938      	ldr	r0, [r7, #16]
 800985e:	f7fd fd36 	bl	80072ce <tcp_seg_free>
            while (next &&
 8009862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00e      	beq.n	8009886 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009868:	4b91      	ldr	r3, [pc, #580]	; (8009ab0 <tcp_receive+0xb08>)
 800986a:	881b      	ldrh	r3, [r3, #0]
 800986c:	461a      	mov	r2, r3
 800986e:	4b91      	ldr	r3, [pc, #580]	; (8009ab4 <tcp_receive+0xb0c>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	441a      	add	r2, r3
 8009874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800987c:	8909      	ldrh	r1, [r1, #8]
 800987e:	440b      	add	r3, r1
 8009880:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009882:	2b00      	cmp	r3, #0
 8009884:	da9a      	bge.n	80097bc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009888:	2b00      	cmp	r3, #0
 800988a:	d059      	beq.n	8009940 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800988c:	4b88      	ldr	r3, [pc, #544]	; (8009ab0 <tcp_receive+0xb08>)
 800988e:	881b      	ldrh	r3, [r3, #0]
 8009890:	461a      	mov	r2, r3
 8009892:	4b88      	ldr	r3, [pc, #544]	; (8009ab4 <tcp_receive+0xb0c>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	441a      	add	r2, r3
 8009898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	1ad3      	subs	r3, r2, r3
            if (next &&
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	dd4d      	ble.n	8009940 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80098a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	4b81      	ldr	r3, [pc, #516]	; (8009ab4 <tcp_receive+0xb0c>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	1ad3      	subs	r3, r2, r3
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	4b80      	ldr	r3, [pc, #512]	; (8009ab8 <tcp_receive+0xb10>)
 80098b8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80098ba:	4b7f      	ldr	r3, [pc, #508]	; (8009ab8 <tcp_receive+0xb10>)
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	899b      	ldrh	r3, [r3, #12]
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fa fe90 	bl	80045e8 <lwip_htons>
 80098c8:	4603      	mov	r3, r0
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	f003 0302 	and.w	r3, r3, #2
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d005      	beq.n	80098e0 <tcp_receive+0x938>
                inseg.len -= 1;
 80098d4:	4b78      	ldr	r3, [pc, #480]	; (8009ab8 <tcp_receive+0xb10>)
 80098d6:	891b      	ldrh	r3, [r3, #8]
 80098d8:	3b01      	subs	r3, #1
 80098da:	b29a      	uxth	r2, r3
 80098dc:	4b76      	ldr	r3, [pc, #472]	; (8009ab8 <tcp_receive+0xb10>)
 80098de:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80098e0:	4b75      	ldr	r3, [pc, #468]	; (8009ab8 <tcp_receive+0xb10>)
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	4a74      	ldr	r2, [pc, #464]	; (8009ab8 <tcp_receive+0xb10>)
 80098e6:	8912      	ldrh	r2, [r2, #8]
 80098e8:	4611      	mov	r1, r2
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fc f854 	bl	8005998 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80098f0:	4b71      	ldr	r3, [pc, #452]	; (8009ab8 <tcp_receive+0xb10>)
 80098f2:	891c      	ldrh	r4, [r3, #8]
 80098f4:	4b70      	ldr	r3, [pc, #448]	; (8009ab8 <tcp_receive+0xb10>)
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	899b      	ldrh	r3, [r3, #12]
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7fa fe73 	bl	80045e8 <lwip_htons>
 8009902:	4603      	mov	r3, r0
 8009904:	b2db      	uxtb	r3, r3
 8009906:	f003 0303 	and.w	r3, r3, #3
 800990a:	2b00      	cmp	r3, #0
 800990c:	d001      	beq.n	8009912 <tcp_receive+0x96a>
 800990e:	2301      	movs	r3, #1
 8009910:	e000      	b.n	8009914 <tcp_receive+0x96c>
 8009912:	2300      	movs	r3, #0
 8009914:	4423      	add	r3, r4
 8009916:	b29a      	uxth	r2, r3
 8009918:	4b65      	ldr	r3, [pc, #404]	; (8009ab0 <tcp_receive+0xb08>)
 800991a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800991c:	4b64      	ldr	r3, [pc, #400]	; (8009ab0 <tcp_receive+0xb08>)
 800991e:	881b      	ldrh	r3, [r3, #0]
 8009920:	461a      	mov	r2, r3
 8009922:	4b64      	ldr	r3, [pc, #400]	; (8009ab4 <tcp_receive+0xb0c>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	441a      	add	r2, r3
 8009928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	429a      	cmp	r2, r3
 8009930:	d006      	beq.n	8009940 <tcp_receive+0x998>
 8009932:	4b62      	ldr	r3, [pc, #392]	; (8009abc <tcp_receive+0xb14>)
 8009934:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009938:	4961      	ldr	r1, [pc, #388]	; (8009ac0 <tcp_receive+0xb18>)
 800993a:	4862      	ldr	r0, [pc, #392]	; (8009ac4 <tcp_receive+0xb1c>)
 800993c:	f005 f84c 	bl	800e9d8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009944:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009946:	4b5a      	ldr	r3, [pc, #360]	; (8009ab0 <tcp_receive+0xb08>)
 8009948:	881b      	ldrh	r3, [r3, #0]
 800994a:	461a      	mov	r2, r3
 800994c:	4b59      	ldr	r3, [pc, #356]	; (8009ab4 <tcp_receive+0xb0c>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	441a      	add	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800995a:	4b55      	ldr	r3, [pc, #340]	; (8009ab0 <tcp_receive+0xb08>)
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	429a      	cmp	r2, r3
 8009960:	d206      	bcs.n	8009970 <tcp_receive+0x9c8>
 8009962:	4b56      	ldr	r3, [pc, #344]	; (8009abc <tcp_receive+0xb14>)
 8009964:	f240 6207 	movw	r2, #1543	; 0x607
 8009968:	4957      	ldr	r1, [pc, #348]	; (8009ac8 <tcp_receive+0xb20>)
 800996a:	4856      	ldr	r0, [pc, #344]	; (8009ac4 <tcp_receive+0xb1c>)
 800996c:	f005 f834 	bl	800e9d8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009974:	4b4e      	ldr	r3, [pc, #312]	; (8009ab0 <tcp_receive+0xb08>)
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	1ad3      	subs	r3, r2, r3
 800997a:	b29a      	uxth	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7fc ffc5 	bl	8006910 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009986:	4b4c      	ldr	r3, [pc, #304]	; (8009ab8 <tcp_receive+0xb10>)
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	891b      	ldrh	r3, [r3, #8]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d006      	beq.n	800999e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8009990:	4b49      	ldr	r3, [pc, #292]	; (8009ab8 <tcp_receive+0xb10>)
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	4a4d      	ldr	r2, [pc, #308]	; (8009acc <tcp_receive+0xb24>)
 8009996:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009998:	4b47      	ldr	r3, [pc, #284]	; (8009ab8 <tcp_receive+0xb10>)
 800999a:	2200      	movs	r2, #0
 800999c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800999e:	4b46      	ldr	r3, [pc, #280]	; (8009ab8 <tcp_receive+0xb10>)
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	899b      	ldrh	r3, [r3, #12]
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fa fe1e 	bl	80045e8 <lwip_htons>
 80099ac:	4603      	mov	r3, r0
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	f003 0301 	and.w	r3, r3, #1
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f000 80b8 	beq.w	8009b2a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80099ba:	4b45      	ldr	r3, [pc, #276]	; (8009ad0 <tcp_receive+0xb28>)
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	f043 0320 	orr.w	r3, r3, #32
 80099c2:	b2da      	uxtb	r2, r3
 80099c4:	4b42      	ldr	r3, [pc, #264]	; (8009ad0 <tcp_receive+0xb28>)
 80099c6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80099c8:	e0af      	b.n	8009b2a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099ce:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	4a36      	ldr	r2, [pc, #216]	; (8009ab4 <tcp_receive+0xb0c>)
 80099da:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	891b      	ldrh	r3, [r3, #8]
 80099e0:	461c      	mov	r4, r3
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	899b      	ldrh	r3, [r3, #12]
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fa fdfc 	bl	80045e8 <lwip_htons>
 80099f0:	4603      	mov	r3, r0
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	f003 0303 	and.w	r3, r3, #3
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d001      	beq.n	8009a00 <tcp_receive+0xa58>
 80099fc:	2301      	movs	r3, #1
 80099fe:	e000      	b.n	8009a02 <tcp_receive+0xa5a>
 8009a00:	2300      	movs	r3, #0
 8009a02:	191a      	adds	r2, r3, r4
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a08:	441a      	add	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a12:	461c      	mov	r4, r3
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	891b      	ldrh	r3, [r3, #8]
 8009a18:	461d      	mov	r5, r3
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	899b      	ldrh	r3, [r3, #12]
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7fa fde0 	bl	80045e8 <lwip_htons>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	f003 0303 	and.w	r3, r3, #3
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <tcp_receive+0xa90>
 8009a34:	2301      	movs	r3, #1
 8009a36:	e000      	b.n	8009a3a <tcp_receive+0xa92>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	442b      	add	r3, r5
 8009a3c:	429c      	cmp	r4, r3
 8009a3e:	d206      	bcs.n	8009a4e <tcp_receive+0xaa6>
 8009a40:	4b1e      	ldr	r3, [pc, #120]	; (8009abc <tcp_receive+0xb14>)
 8009a42:	f240 622b 	movw	r2, #1579	; 0x62b
 8009a46:	4923      	ldr	r1, [pc, #140]	; (8009ad4 <tcp_receive+0xb2c>)
 8009a48:	481e      	ldr	r0, [pc, #120]	; (8009ac4 <tcp_receive+0xb1c>)
 8009a4a:	f004 ffc5 	bl	800e9d8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	891b      	ldrh	r3, [r3, #8]
 8009a52:	461c      	mov	r4, r3
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	899b      	ldrh	r3, [r3, #12]
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f7fa fdc3 	bl	80045e8 <lwip_htons>
 8009a62:	4603      	mov	r3, r0
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	f003 0303 	and.w	r3, r3, #3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <tcp_receive+0xaca>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e000      	b.n	8009a74 <tcp_receive+0xacc>
 8009a72:	2300      	movs	r3, #0
 8009a74:	1919      	adds	r1, r3, r4
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009a7a:	b28b      	uxth	r3, r1
 8009a7c:	1ad3      	subs	r3, r2, r3
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f7fc ff43 	bl	8006910 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	891b      	ldrh	r3, [r3, #8]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d028      	beq.n	8009ae6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009a94:	4b0d      	ldr	r3, [pc, #52]	; (8009acc <tcp_receive+0xb24>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d01d      	beq.n	8009ad8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8009a9c:	4b0b      	ldr	r3, [pc, #44]	; (8009acc <tcp_receive+0xb24>)
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	4610      	mov	r0, r2
 8009aa8:	f7fc f9be 	bl	8005e28 <pbuf_cat>
 8009aac:	e018      	b.n	8009ae0 <tcp_receive+0xb38>
 8009aae:	bf00      	nop
 8009ab0:	2000834e 	.word	0x2000834e
 8009ab4:	20008344 	.word	0x20008344
 8009ab8:	20008324 	.word	0x20008324
 8009abc:	08011080 	.word	0x08011080
 8009ac0:	08011460 	.word	0x08011460
 8009ac4:	080110cc 	.word	0x080110cc
 8009ac8:	0801149c 	.word	0x0801149c
 8009acc:	20008354 	.word	0x20008354
 8009ad0:	20008351 	.word	0x20008351
 8009ad4:	080114bc 	.word	0x080114bc
            } else {
              recv_data = cseg->p;
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	4a70      	ldr	r2, [pc, #448]	; (8009ca0 <tcp_receive+0xcf8>)
 8009ade:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	899b      	ldrh	r3, [r3, #12]
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fa fd7a 	bl	80045e8 <lwip_htons>
 8009af4:	4603      	mov	r3, r0
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	f003 0301 	and.w	r3, r3, #1
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00d      	beq.n	8009b1c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009b00:	4b68      	ldr	r3, [pc, #416]	; (8009ca4 <tcp_receive+0xcfc>)
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	f043 0320 	orr.w	r3, r3, #32
 8009b08:	b2da      	uxtb	r2, r3
 8009b0a:	4b66      	ldr	r3, [pc, #408]	; (8009ca4 <tcp_receive+0xcfc>)
 8009b0c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	7d1b      	ldrb	r3, [r3, #20]
 8009b12:	2b04      	cmp	r3, #4
 8009b14:	d102      	bne.n	8009b1c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2207      	movs	r2, #7
 8009b1a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009b24:	68b8      	ldr	r0, [r7, #8]
 8009b26:	f7fd fbd2 	bl	80072ce <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d008      	beq.n	8009b44 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	685a      	ldr	r2, [r3, #4]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	f43f af43 	beq.w	80099ca <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	8b5b      	ldrh	r3, [r3, #26]
 8009b48:	f003 0301 	and.w	r3, r3, #1
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00e      	beq.n	8009b6e <tcp_receive+0xbc6>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	8b5b      	ldrh	r3, [r3, #26]
 8009b54:	f023 0301 	bic.w	r3, r3, #1
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	835a      	strh	r2, [r3, #26]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	8b5b      	ldrh	r3, [r3, #26]
 8009b62:	f043 0302 	orr.w	r3, r3, #2
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009b6c:	e188      	b.n	8009e80 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	8b5b      	ldrh	r3, [r3, #26]
 8009b72:	f043 0301 	orr.w	r3, r3, #1
 8009b76:	b29a      	uxth	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009b7c:	e180      	b.n	8009e80 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d106      	bne.n	8009b94 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009b86:	4848      	ldr	r0, [pc, #288]	; (8009ca8 <tcp_receive+0xd00>)
 8009b88:	f7fd fbba 	bl	8007300 <tcp_seg_copy>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	675a      	str	r2, [r3, #116]	; 0x74
 8009b92:	e16d      	b.n	8009e70 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009b94:	2300      	movs	r3, #0
 8009b96:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b9e:	e157      	b.n	8009e50 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8009ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	685a      	ldr	r2, [r3, #4]
 8009ba6:	4b41      	ldr	r3, [pc, #260]	; (8009cac <tcp_receive+0xd04>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d11d      	bne.n	8009bea <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009bae:	4b3e      	ldr	r3, [pc, #248]	; (8009ca8 <tcp_receive+0xd00>)
 8009bb0:	891a      	ldrh	r2, [r3, #8]
 8009bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb4:	891b      	ldrh	r3, [r3, #8]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	f240 814f 	bls.w	8009e5a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009bbc:	483a      	ldr	r0, [pc, #232]	; (8009ca8 <tcp_receive+0xd00>)
 8009bbe:	f7fd fb9f 	bl	8007300 <tcp_seg_copy>
 8009bc2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f000 8149 	beq.w	8009e5e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8009bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d003      	beq.n	8009bda <tcp_receive+0xc32>
                    prev->next = cseg;
 8009bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	601a      	str	r2, [r3, #0]
 8009bd8:	e002      	b.n	8009be0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	697a      	ldr	r2, [r7, #20]
 8009bde:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009be0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009be2:	6978      	ldr	r0, [r7, #20]
 8009be4:	f7ff f8dc 	bl	8008da0 <tcp_oos_insert_segment>
                }
                break;
 8009be8:	e139      	b.n	8009e5e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d117      	bne.n	8009c20 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009bf0:	4b2e      	ldr	r3, [pc, #184]	; (8009cac <tcp_receive+0xd04>)
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	da57      	bge.n	8009cb0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009c00:	4829      	ldr	r0, [pc, #164]	; (8009ca8 <tcp_receive+0xd00>)
 8009c02:	f7fd fb7d 	bl	8007300 <tcp_seg_copy>
 8009c06:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f000 8129 	beq.w	8009e62 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	69ba      	ldr	r2, [r7, #24]
 8009c14:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009c16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c18:	69b8      	ldr	r0, [r7, #24]
 8009c1a:	f7ff f8c1 	bl	8008da0 <tcp_oos_insert_segment>
                  }
                  break;
 8009c1e:	e120      	b.n	8009e62 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009c20:	4b22      	ldr	r3, [pc, #136]	; (8009cac <tcp_receive+0xd04>)
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	db3e      	blt.n	8009cb0 <tcp_receive+0xd08>
 8009c32:	4b1e      	ldr	r3, [pc, #120]	; (8009cac <tcp_receive+0xd04>)
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	3301      	adds	r3, #1
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	dc35      	bgt.n	8009cb0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009c44:	4818      	ldr	r0, [pc, #96]	; (8009ca8 <tcp_receive+0xd00>)
 8009c46:	f7fd fb5b 	bl	8007300 <tcp_seg_copy>
 8009c4a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	f000 8109 	beq.w	8009e66 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c5c:	8912      	ldrh	r2, [r2, #8]
 8009c5e:	441a      	add	r2, r3
 8009c60:	4b12      	ldr	r3, [pc, #72]	; (8009cac <tcp_receive+0xd04>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	dd12      	ble.n	8009c90 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009c6a:	4b10      	ldr	r3, [pc, #64]	; (8009cac <tcp_receive+0xd04>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	1ad3      	subs	r3, r2, r3
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c7e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c82:	685a      	ldr	r2, [r3, #4]
 8009c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c86:	891b      	ldrh	r3, [r3, #8]
 8009c88:	4619      	mov	r1, r3
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	f7fb fe84 	bl	8005998 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c92:	69fa      	ldr	r2, [r7, #28]
 8009c94:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009c96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c98:	69f8      	ldr	r0, [r7, #28]
 8009c9a:	f7ff f881 	bl	8008da0 <tcp_oos_insert_segment>
                  }
                  break;
 8009c9e:	e0e2      	b.n	8009e66 <tcp_receive+0xebe>
 8009ca0:	20008354 	.word	0x20008354
 8009ca4:	20008351 	.word	0x20008351
 8009ca8:	20008324 	.word	0x20008324
 8009cac:	20008344 	.word	0x20008344
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f040 80c6 	bne.w	8009e4a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009cbe:	4b80      	ldr	r3, [pc, #512]	; (8009ec0 <tcp_receive+0xf18>)
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f340 80bd 	ble.w	8009e4a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	899b      	ldrh	r3, [r3, #12]
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7fa fc85 	bl	80045e8 <lwip_htons>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	f003 0301 	and.w	r3, r3, #1
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f040 80bf 	bne.w	8009e6a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009cec:	4875      	ldr	r0, [pc, #468]	; (8009ec4 <tcp_receive+0xf1c>)
 8009cee:	f7fd fb07 	bl	8007300 <tcp_seg_copy>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f000 80b6 	beq.w	8009e6e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d0a:	8912      	ldrh	r2, [r2, #8]
 8009d0c:	441a      	add	r2, r3
 8009d0e:	4b6c      	ldr	r3, [pc, #432]	; (8009ec0 <tcp_receive+0xf18>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	dd12      	ble.n	8009d3e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009d18:	4b69      	ldr	r3, [pc, #420]	; (8009ec0 <tcp_receive+0xf18>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	b29a      	uxth	r2, r3
 8009d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d30:	685a      	ldr	r2, [r3, #4]
 8009d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d34:	891b      	ldrh	r3, [r3, #8]
 8009d36:	4619      	mov	r1, r3
 8009d38:	4610      	mov	r0, r2
 8009d3a:	f7fb fe2d 	bl	8005998 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009d3e:	4b62      	ldr	r3, [pc, #392]	; (8009ec8 <tcp_receive+0xf20>)
 8009d40:	881b      	ldrh	r3, [r3, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	4b5e      	ldr	r3, [pc, #376]	; (8009ec0 <tcp_receive+0xf18>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	441a      	add	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4e:	6879      	ldr	r1, [r7, #4]
 8009d50:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009d52:	440b      	add	r3, r1
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f340 8089 	ble.w	8009e6e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	899b      	ldrh	r3, [r3, #12]
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7fa fc3e 	bl	80045e8 <lwip_htons>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	f003 0301 	and.w	r3, r3, #1
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d022      	beq.n	8009dbe <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	899b      	ldrh	r3, [r3, #12]
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	b21b      	sxth	r3, r3
 8009d84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009d88:	b21c      	sxth	r4, r3
 8009d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	899b      	ldrh	r3, [r3, #12]
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fa fc27 	bl	80045e8 <lwip_htons>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fa fc1e 	bl	80045e8 <lwip_htons>
 8009dac:	4603      	mov	r3, r0
 8009dae:	b21b      	sxth	r3, r3
 8009db0:	4323      	orrs	r3, r4
 8009db2:	b21a      	sxth	r2, r3
 8009db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	b292      	uxth	r2, r2
 8009dbc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dc8:	4413      	add	r3, r2
 8009dca:	b299      	uxth	r1, r3
 8009dcc:	4b3c      	ldr	r3, [pc, #240]	; (8009ec0 <tcp_receive+0xf18>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	1a8a      	subs	r2, r1, r2
 8009dd8:	b292      	uxth	r2, r2
 8009dda:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	685a      	ldr	r2, [r3, #4]
 8009de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	891b      	ldrh	r3, [r3, #8]
 8009de8:	4619      	mov	r1, r3
 8009dea:	4610      	mov	r0, r2
 8009dec:	f7fb fdd4 	bl	8005998 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	891c      	ldrh	r4, [r3, #8]
 8009df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	899b      	ldrh	r3, [r3, #12]
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7fa fbf1 	bl	80045e8 <lwip_htons>
 8009e06:	4603      	mov	r3, r0
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	f003 0303 	and.w	r3, r3, #3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d001      	beq.n	8009e16 <tcp_receive+0xe6e>
 8009e12:	2301      	movs	r3, #1
 8009e14:	e000      	b.n	8009e18 <tcp_receive+0xe70>
 8009e16:	2300      	movs	r3, #0
 8009e18:	4423      	add	r3, r4
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	4b2a      	ldr	r3, [pc, #168]	; (8009ec8 <tcp_receive+0xf20>)
 8009e1e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009e20:	4b29      	ldr	r3, [pc, #164]	; (8009ec8 <tcp_receive+0xf20>)
 8009e22:	881b      	ldrh	r3, [r3, #0]
 8009e24:	461a      	mov	r2, r3
 8009e26:	4b26      	ldr	r3, [pc, #152]	; (8009ec0 <tcp_receive+0xf18>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	441a      	add	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e30:	6879      	ldr	r1, [r7, #4]
 8009e32:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009e34:	440b      	add	r3, r1
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d019      	beq.n	8009e6e <tcp_receive+0xec6>
 8009e3a:	4b24      	ldr	r3, [pc, #144]	; (8009ecc <tcp_receive+0xf24>)
 8009e3c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009e40:	4923      	ldr	r1, [pc, #140]	; (8009ed0 <tcp_receive+0xf28>)
 8009e42:	4824      	ldr	r0, [pc, #144]	; (8009ed4 <tcp_receive+0xf2c>)
 8009e44:	f004 fdc8 	bl	800e9d8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009e48:	e011      	b.n	8009e6e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	f47f aea4 	bne.w	8009ba0 <tcp_receive+0xbf8>
 8009e58:	e00a      	b.n	8009e70 <tcp_receive+0xec8>
                break;
 8009e5a:	bf00      	nop
 8009e5c:	e008      	b.n	8009e70 <tcp_receive+0xec8>
                break;
 8009e5e:	bf00      	nop
 8009e60:	e006      	b.n	8009e70 <tcp_receive+0xec8>
                  break;
 8009e62:	bf00      	nop
 8009e64:	e004      	b.n	8009e70 <tcp_receive+0xec8>
                  break;
 8009e66:	bf00      	nop
 8009e68:	e002      	b.n	8009e70 <tcp_receive+0xec8>
                  break;
 8009e6a:	bf00      	nop
 8009e6c:	e000      	b.n	8009e70 <tcp_receive+0xec8>
                break;
 8009e6e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f001 fa33 	bl	800b2dc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009e76:	e003      	b.n	8009e80 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f001 fa2f 	bl	800b2dc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009e7e:	e01a      	b.n	8009eb6 <tcp_receive+0xf0e>
 8009e80:	e019      	b.n	8009eb6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009e82:	4b0f      	ldr	r3, [pc, #60]	; (8009ec0 <tcp_receive+0xf18>)
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	db0a      	blt.n	8009ea6 <tcp_receive+0xefe>
 8009e90:	4b0b      	ldr	r3, [pc, #44]	; (8009ec0 <tcp_receive+0xf18>)
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e98:	6879      	ldr	r1, [r7, #4]
 8009e9a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009e9c:	440b      	add	r3, r1
 8009e9e:	1ad3      	subs	r3, r2, r3
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	dd07      	ble.n	8009eb6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	8b5b      	ldrh	r3, [r3, #26]
 8009eaa:	f043 0302 	orr.w	r3, r3, #2
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009eb4:	e7ff      	b.n	8009eb6 <tcp_receive+0xf0e>
 8009eb6:	bf00      	nop
 8009eb8:	3750      	adds	r7, #80	; 0x50
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20008344 	.word	0x20008344
 8009ec4:	20008324 	.word	0x20008324
 8009ec8:	2000834e 	.word	0x2000834e
 8009ecc:	08011080 	.word	0x08011080
 8009ed0:	08011428 	.word	0x08011428
 8009ed4:	080110cc 	.word	0x080110cc

08009ed8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009ede:	4b15      	ldr	r3, [pc, #84]	; (8009f34 <tcp_get_next_optbyte+0x5c>)
 8009ee0:	881b      	ldrh	r3, [r3, #0]
 8009ee2:	1c5a      	adds	r2, r3, #1
 8009ee4:	b291      	uxth	r1, r2
 8009ee6:	4a13      	ldr	r2, [pc, #76]	; (8009f34 <tcp_get_next_optbyte+0x5c>)
 8009ee8:	8011      	strh	r1, [r2, #0]
 8009eea:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009eec:	4b12      	ldr	r3, [pc, #72]	; (8009f38 <tcp_get_next_optbyte+0x60>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d004      	beq.n	8009efe <tcp_get_next_optbyte+0x26>
 8009ef4:	4b11      	ldr	r3, [pc, #68]	; (8009f3c <tcp_get_next_optbyte+0x64>)
 8009ef6:	881b      	ldrh	r3, [r3, #0]
 8009ef8:	88fa      	ldrh	r2, [r7, #6]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d208      	bcs.n	8009f10 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009efe:	4b10      	ldr	r3, [pc, #64]	; (8009f40 <tcp_get_next_optbyte+0x68>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	3314      	adds	r3, #20
 8009f04:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8009f06:	88fb      	ldrh	r3, [r7, #6]
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	e00b      	b.n	8009f28 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009f10:	88fb      	ldrh	r3, [r7, #6]
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	4b09      	ldr	r3, [pc, #36]	; (8009f3c <tcp_get_next_optbyte+0x64>)
 8009f16:	881b      	ldrh	r3, [r3, #0]
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009f1e:	4b06      	ldr	r3, [pc, #24]	; (8009f38 <tcp_get_next_optbyte+0x60>)
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	797b      	ldrb	r3, [r7, #5]
 8009f24:	4413      	add	r3, r2
 8009f26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr
 8009f34:	20008340 	.word	0x20008340
 8009f38:	2000833c 	.word	0x2000833c
 8009f3c:	2000833a 	.word	0x2000833a
 8009f40:	20008334 	.word	0x20008334

08009f44 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d106      	bne.n	8009f60 <tcp_parseopt+0x1c>
 8009f52:	4b32      	ldr	r3, [pc, #200]	; (800a01c <tcp_parseopt+0xd8>)
 8009f54:	f240 727d 	movw	r2, #1917	; 0x77d
 8009f58:	4931      	ldr	r1, [pc, #196]	; (800a020 <tcp_parseopt+0xdc>)
 8009f5a:	4832      	ldr	r0, [pc, #200]	; (800a024 <tcp_parseopt+0xe0>)
 8009f5c:	f004 fd3c 	bl	800e9d8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009f60:	4b31      	ldr	r3, [pc, #196]	; (800a028 <tcp_parseopt+0xe4>)
 8009f62:	881b      	ldrh	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d055      	beq.n	800a014 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009f68:	4b30      	ldr	r3, [pc, #192]	; (800a02c <tcp_parseopt+0xe8>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	801a      	strh	r2, [r3, #0]
 8009f6e:	e045      	b.n	8009ffc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009f70:	f7ff ffb2 	bl	8009ed8 <tcp_get_next_optbyte>
 8009f74:	4603      	mov	r3, r0
 8009f76:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	d006      	beq.n	8009f8c <tcp_parseopt+0x48>
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	dc2b      	bgt.n	8009fda <tcp_parseopt+0x96>
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d041      	beq.n	800a00a <tcp_parseopt+0xc6>
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d127      	bne.n	8009fda <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8009f8a:	e037      	b.n	8009ffc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009f8c:	f7ff ffa4 	bl	8009ed8 <tcp_get_next_optbyte>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b04      	cmp	r3, #4
 8009f94:	d13b      	bne.n	800a00e <tcp_parseopt+0xca>
 8009f96:	4b25      	ldr	r3, [pc, #148]	; (800a02c <tcp_parseopt+0xe8>)
 8009f98:	881b      	ldrh	r3, [r3, #0]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	4a22      	ldr	r2, [pc, #136]	; (800a028 <tcp_parseopt+0xe4>)
 8009f9e:	8812      	ldrh	r2, [r2, #0]
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	da34      	bge.n	800a00e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009fa4:	f7ff ff98 	bl	8009ed8 <tcp_get_next_optbyte>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	021b      	lsls	r3, r3, #8
 8009fae:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009fb0:	f7ff ff92 	bl	8009ed8 <tcp_get_next_optbyte>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	89bb      	ldrh	r3, [r7, #12]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009fbe:	89bb      	ldrh	r3, [r7, #12]
 8009fc0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009fc4:	d804      	bhi.n	8009fd0 <tcp_parseopt+0x8c>
 8009fc6:	89bb      	ldrh	r3, [r7, #12]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d001      	beq.n	8009fd0 <tcp_parseopt+0x8c>
 8009fcc:	89ba      	ldrh	r2, [r7, #12]
 8009fce:	e001      	b.n	8009fd4 <tcp_parseopt+0x90>
 8009fd0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009fd8:	e010      	b.n	8009ffc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009fda:	f7ff ff7d 	bl	8009ed8 <tcp_get_next_optbyte>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009fe2:	7afb      	ldrb	r3, [r7, #11]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d914      	bls.n	800a012 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009fe8:	7afb      	ldrb	r3, [r7, #11]
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	4b0f      	ldr	r3, [pc, #60]	; (800a02c <tcp_parseopt+0xe8>)
 8009fee:	881b      	ldrh	r3, [r3, #0]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	3b02      	subs	r3, #2
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	4b0c      	ldr	r3, [pc, #48]	; (800a02c <tcp_parseopt+0xe8>)
 8009ffa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009ffc:	4b0b      	ldr	r3, [pc, #44]	; (800a02c <tcp_parseopt+0xe8>)
 8009ffe:	881a      	ldrh	r2, [r3, #0]
 800a000:	4b09      	ldr	r3, [pc, #36]	; (800a028 <tcp_parseopt+0xe4>)
 800a002:	881b      	ldrh	r3, [r3, #0]
 800a004:	429a      	cmp	r2, r3
 800a006:	d3b3      	bcc.n	8009f70 <tcp_parseopt+0x2c>
 800a008:	e004      	b.n	800a014 <tcp_parseopt+0xd0>
          return;
 800a00a:	bf00      	nop
 800a00c:	e002      	b.n	800a014 <tcp_parseopt+0xd0>
            return;
 800a00e:	bf00      	nop
 800a010:	e000      	b.n	800a014 <tcp_parseopt+0xd0>
            return;
 800a012:	bf00      	nop
      }
    }
  }
}
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	08011080 	.word	0x08011080
 800a020:	080114e4 	.word	0x080114e4
 800a024:	080110cc 	.word	0x080110cc
 800a028:	20008338 	.word	0x20008338
 800a02c:	20008340 	.word	0x20008340

0800a030 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a030:	b480      	push	{r7}
 800a032:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a034:	4b05      	ldr	r3, [pc, #20]	; (800a04c <tcp_trigger_input_pcb_close+0x1c>)
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	f043 0310 	orr.w	r3, r3, #16
 800a03c:	b2da      	uxtb	r2, r3
 800a03e:	4b03      	ldr	r3, [pc, #12]	; (800a04c <tcp_trigger_input_pcb_close+0x1c>)
 800a040:	701a      	strb	r2, [r3, #0]
}
 800a042:	bf00      	nop
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr
 800a04c:	20008351 	.word	0x20008351

0800a050 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00a      	beq.n	800a078 <tcp_route+0x28>
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	7a1b      	ldrb	r3, [r3, #8]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d006      	beq.n	800a078 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	7a1b      	ldrb	r3, [r3, #8]
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fb fab8 	bl	80055e4 <netif_get_by_index>
 800a074:	4603      	mov	r3, r0
 800a076:	e003      	b.n	800a080 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f003 f9cd 	bl	800d418 <ip4_route>
 800a07e:	4603      	mov	r3, r0
  }
}
 800a080:	4618      	mov	r0, r3
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a088:	b590      	push	{r4, r7, lr}
 800a08a:	b087      	sub	sp, #28
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	603b      	str	r3, [r7, #0]
 800a094:	4613      	mov	r3, r2
 800a096:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d105      	bne.n	800a0aa <tcp_create_segment+0x22>
 800a09e:	4b44      	ldr	r3, [pc, #272]	; (800a1b0 <tcp_create_segment+0x128>)
 800a0a0:	22a3      	movs	r2, #163	; 0xa3
 800a0a2:	4944      	ldr	r1, [pc, #272]	; (800a1b4 <tcp_create_segment+0x12c>)
 800a0a4:	4844      	ldr	r0, [pc, #272]	; (800a1b8 <tcp_create_segment+0x130>)
 800a0a6:	f004 fc97 	bl	800e9d8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d105      	bne.n	800a0bc <tcp_create_segment+0x34>
 800a0b0:	4b3f      	ldr	r3, [pc, #252]	; (800a1b0 <tcp_create_segment+0x128>)
 800a0b2:	22a4      	movs	r2, #164	; 0xa4
 800a0b4:	4941      	ldr	r1, [pc, #260]	; (800a1bc <tcp_create_segment+0x134>)
 800a0b6:	4840      	ldr	r0, [pc, #256]	; (800a1b8 <tcp_create_segment+0x130>)
 800a0b8:	f004 fc8e 	bl	800e9d8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a0bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	f003 0304 	and.w	r3, r3, #4
 800a0c8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a0ca:	2003      	movs	r0, #3
 800a0cc:	f7fa ff04 	bl	8004ed8 <memp_malloc>
 800a0d0:	6138      	str	r0, [r7, #16]
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d104      	bne.n	800a0e2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a0d8:	68b8      	ldr	r0, [r7, #8]
 800a0da:	f7fb fde3 	bl	8005ca4 <pbuf_free>
    return NULL;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	e061      	b.n	800a1a6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a0e8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	891a      	ldrh	r2, [r3, #8]
 800a0fa:	7dfb      	ldrb	r3, [r7, #23]
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d205      	bcs.n	800a10e <tcp_create_segment+0x86>
 800a102:	4b2b      	ldr	r3, [pc, #172]	; (800a1b0 <tcp_create_segment+0x128>)
 800a104:	22b0      	movs	r2, #176	; 0xb0
 800a106:	492e      	ldr	r1, [pc, #184]	; (800a1c0 <tcp_create_segment+0x138>)
 800a108:	482b      	ldr	r0, [pc, #172]	; (800a1b8 <tcp_create_segment+0x130>)
 800a10a:	f004 fc65 	bl	800e9d8 <iprintf>
  seg->len = p->tot_len - optlen;
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	891a      	ldrh	r2, [r3, #8]
 800a112:	7dfb      	ldrb	r3, [r7, #23]
 800a114:	b29b      	uxth	r3, r3
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	b29a      	uxth	r2, r3
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a11e:	2114      	movs	r1, #20
 800a120:	68b8      	ldr	r0, [r7, #8]
 800a122:	f7fb fd29 	bl	8005b78 <pbuf_add_header>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d004      	beq.n	800a136 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a12c:	6938      	ldr	r0, [r7, #16]
 800a12e:	f7fd f8ce 	bl	80072ce <tcp_seg_free>
    return NULL;
 800a132:	2300      	movs	r3, #0
 800a134:	e037      	b.n	800a1a6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	685a      	ldr	r2, [r3, #4]
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	8ada      	ldrh	r2, [r3, #22]
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	68dc      	ldr	r4, [r3, #12]
 800a148:	4610      	mov	r0, r2
 800a14a:	f7fa fa4d 	bl	80045e8 <lwip_htons>
 800a14e:	4603      	mov	r3, r0
 800a150:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	8b1a      	ldrh	r2, [r3, #24]
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	68dc      	ldr	r4, [r3, #12]
 800a15a:	4610      	mov	r0, r2
 800a15c:	f7fa fa44 	bl	80045e8 <lwip_htons>
 800a160:	4603      	mov	r3, r0
 800a162:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	68dc      	ldr	r4, [r3, #12]
 800a168:	6838      	ldr	r0, [r7, #0]
 800a16a:	f7fa fa52 	bl	8004612 <lwip_htonl>
 800a16e:	4603      	mov	r3, r0
 800a170:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a172:	7dfb      	ldrb	r3, [r7, #23]
 800a174:	089b      	lsrs	r3, r3, #2
 800a176:	b2db      	uxtb	r3, r3
 800a178:	b29b      	uxth	r3, r3
 800a17a:	3305      	adds	r3, #5
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	031b      	lsls	r3, r3, #12
 800a180:	b29a      	uxth	r2, r3
 800a182:	79fb      	ldrb	r3, [r7, #7]
 800a184:	b29b      	uxth	r3, r3
 800a186:	4313      	orrs	r3, r2
 800a188:	b29a      	uxth	r2, r3
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	68dc      	ldr	r4, [r3, #12]
 800a18e:	4610      	mov	r0, r2
 800a190:	f7fa fa2a 	bl	80045e8 <lwip_htons>
 800a194:	4603      	mov	r3, r0
 800a196:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	749a      	strb	r2, [r3, #18]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	74da      	strb	r2, [r3, #19]
  return seg;
 800a1a4:	693b      	ldr	r3, [r7, #16]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	371c      	adds	r7, #28
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd90      	pop	{r4, r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	08011500 	.word	0x08011500
 800a1b4:	08011534 	.word	0x08011534
 800a1b8:	08011554 	.word	0x08011554
 800a1bc:	0801157c 	.word	0x0801157c
 800a1c0:	080115a0 	.word	0x080115a0

0800a1c4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a1c4:	b590      	push	{r4, r7, lr}
 800a1c6:	b08b      	sub	sp, #44	; 0x2c
 800a1c8:	af02      	add	r7, sp, #8
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	61fb      	str	r3, [r7, #28]
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d106      	bne.n	800a1f0 <tcp_split_unsent_seg+0x2c>
 800a1e2:	4b95      	ldr	r3, [pc, #596]	; (800a438 <tcp_split_unsent_seg+0x274>)
 800a1e4:	f240 324b 	movw	r2, #843	; 0x34b
 800a1e8:	4994      	ldr	r1, [pc, #592]	; (800a43c <tcp_split_unsent_seg+0x278>)
 800a1ea:	4895      	ldr	r0, [pc, #596]	; (800a440 <tcp_split_unsent_seg+0x27c>)
 800a1ec:	f004 fbf4 	bl	800e9d8 <iprintf>

  useg = pcb->unsent;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1f4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d102      	bne.n	800a202 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a1fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a200:	e116      	b.n	800a430 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a202:	887b      	ldrh	r3, [r7, #2]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d109      	bne.n	800a21c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a208:	4b8b      	ldr	r3, [pc, #556]	; (800a438 <tcp_split_unsent_seg+0x274>)
 800a20a:	f240 3253 	movw	r2, #851	; 0x353
 800a20e:	498d      	ldr	r1, [pc, #564]	; (800a444 <tcp_split_unsent_seg+0x280>)
 800a210:	488b      	ldr	r0, [pc, #556]	; (800a440 <tcp_split_unsent_seg+0x27c>)
 800a212:	f004 fbe1 	bl	800e9d8 <iprintf>
    return ERR_VAL;
 800a216:	f06f 0305 	mvn.w	r3, #5
 800a21a:	e109      	b.n	800a430 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	891b      	ldrh	r3, [r3, #8]
 800a220:	887a      	ldrh	r2, [r7, #2]
 800a222:	429a      	cmp	r2, r3
 800a224:	d301      	bcc.n	800a22a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	e102      	b.n	800a430 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a22e:	887a      	ldrh	r2, [r7, #2]
 800a230:	429a      	cmp	r2, r3
 800a232:	d906      	bls.n	800a242 <tcp_split_unsent_seg+0x7e>
 800a234:	4b80      	ldr	r3, [pc, #512]	; (800a438 <tcp_split_unsent_seg+0x274>)
 800a236:	f240 325b 	movw	r2, #859	; 0x35b
 800a23a:	4983      	ldr	r1, [pc, #524]	; (800a448 <tcp_split_unsent_seg+0x284>)
 800a23c:	4880      	ldr	r0, [pc, #512]	; (800a440 <tcp_split_unsent_seg+0x27c>)
 800a23e:	f004 fbcb 	bl	800e9d8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	891b      	ldrh	r3, [r3, #8]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d106      	bne.n	800a258 <tcp_split_unsent_seg+0x94>
 800a24a:	4b7b      	ldr	r3, [pc, #492]	; (800a438 <tcp_split_unsent_seg+0x274>)
 800a24c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a250:	497e      	ldr	r1, [pc, #504]	; (800a44c <tcp_split_unsent_seg+0x288>)
 800a252:	487b      	ldr	r0, [pc, #492]	; (800a440 <tcp_split_unsent_seg+0x27c>)
 800a254:	f004 fbc0 	bl	800e9d8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	7a9b      	ldrb	r3, [r3, #10]
 800a25c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a25e:	7bfb      	ldrb	r3, [r7, #15]
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	b2db      	uxtb	r3, r3
 800a264:	f003 0304 	and.w	r3, r3, #4
 800a268:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	891a      	ldrh	r2, [r3, #8]
 800a26e:	887b      	ldrh	r3, [r7, #2]
 800a270:	1ad3      	subs	r3, r2, r3
 800a272:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a274:	7bbb      	ldrb	r3, [r7, #14]
 800a276:	b29a      	uxth	r2, r3
 800a278:	89bb      	ldrh	r3, [r7, #12]
 800a27a:	4413      	add	r3, r2
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a282:	4619      	mov	r1, r3
 800a284:	2036      	movs	r0, #54	; 0x36
 800a286:	f7fb fa29 	bl	80056dc <pbuf_alloc>
 800a28a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	f000 80b7 	beq.w	800a402 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	891a      	ldrh	r2, [r3, #8]
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	891b      	ldrh	r3, [r3, #8]
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	887b      	ldrh	r3, [r7, #2]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	6858      	ldr	r0, [r3, #4]
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	685a      	ldr	r2, [r3, #4]
 800a2b0:	7bbb      	ldrb	r3, [r7, #14]
 800a2b2:	18d1      	adds	r1, r2, r3
 800a2b4:	897b      	ldrh	r3, [r7, #10]
 800a2b6:	89ba      	ldrh	r2, [r7, #12]
 800a2b8:	f7fb feee 	bl	8006098 <pbuf_copy_partial>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	461a      	mov	r2, r3
 800a2c0:	89bb      	ldrh	r3, [r7, #12]
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	f040 809f 	bne.w	800a406 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	899b      	ldrh	r3, [r3, #12]
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7fa f989 	bl	80045e8 <lwip_htons>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2de:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a2e4:	7efb      	ldrb	r3, [r7, #27]
 800a2e6:	f003 0308 	and.w	r3, r3, #8
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d007      	beq.n	800a2fe <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a2ee:	7efb      	ldrb	r3, [r7, #27]
 800a2f0:	f023 0308 	bic.w	r3, r3, #8
 800a2f4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a2f6:	7ebb      	ldrb	r3, [r7, #26]
 800a2f8:	f043 0308 	orr.w	r3, r3, #8
 800a2fc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a2fe:	7efb      	ldrb	r3, [r7, #27]
 800a300:	f003 0301 	and.w	r3, r3, #1
 800a304:	2b00      	cmp	r3, #0
 800a306:	d007      	beq.n	800a318 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a308:	7efb      	ldrb	r3, [r7, #27]
 800a30a:	f023 0301 	bic.w	r3, r3, #1
 800a30e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a310:	7ebb      	ldrb	r3, [r7, #26]
 800a312:	f043 0301 	orr.w	r3, r3, #1
 800a316:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fa f977 	bl	8004612 <lwip_htonl>
 800a324:	4602      	mov	r2, r0
 800a326:	887b      	ldrh	r3, [r7, #2]
 800a328:	18d1      	adds	r1, r2, r3
 800a32a:	7eba      	ldrb	r2, [r7, #26]
 800a32c:	7bfb      	ldrb	r3, [r7, #15]
 800a32e:	9300      	str	r3, [sp, #0]
 800a330:	460b      	mov	r3, r1
 800a332:	6939      	ldr	r1, [r7, #16]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f7ff fea7 	bl	800a088 <tcp_create_segment>
 800a33a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d063      	beq.n	800a40a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	4618      	mov	r0, r3
 800a348:	f7fb fd34 	bl	8005db4 <pbuf_clen>
 800a34c:	4603      	mov	r3, r0
 800a34e:	461a      	mov	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a356:	1a9b      	subs	r3, r3, r2
 800a358:	b29a      	uxth	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	6858      	ldr	r0, [r3, #4]
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	891a      	ldrh	r2, [r3, #8]
 800a36a:	89bb      	ldrh	r3, [r7, #12]
 800a36c:	1ad3      	subs	r3, r2, r3
 800a36e:	b29b      	uxth	r3, r3
 800a370:	4619      	mov	r1, r3
 800a372:	f7fb fb11 	bl	8005998 <pbuf_realloc>
  useg->len -= remainder;
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	891a      	ldrh	r2, [r3, #8]
 800a37a:	89bb      	ldrh	r3, [r7, #12]
 800a37c:	1ad3      	subs	r3, r2, r3
 800a37e:	b29a      	uxth	r2, r3
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	899b      	ldrh	r3, [r3, #12]
 800a38a:	b29c      	uxth	r4, r3
 800a38c:	7efb      	ldrb	r3, [r7, #27]
 800a38e:	b29b      	uxth	r3, r3
 800a390:	4618      	mov	r0, r3
 800a392:	f7fa f929 	bl	80045e8 <lwip_htons>
 800a396:	4603      	mov	r3, r0
 800a398:	461a      	mov	r2, r3
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	4322      	orrs	r2, r4
 800a3a0:	b292      	uxth	r2, r2
 800a3a2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fb fd03 	bl	8005db4 <pbuf_clen>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a3b8:	4413      	add	r3, r2
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7fb fcf4 	bl	8005db4 <pbuf_clen>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a3d6:	4413      	add	r3, r2
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	69fa      	ldr	r2, [r7, #28]
 800a3ec:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d103      	bne.n	800a3fe <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a3fe:	2300      	movs	r3, #0
 800a400:	e016      	b.n	800a430 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a402:	bf00      	nop
 800a404:	e002      	b.n	800a40c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a406:	bf00      	nop
 800a408:	e000      	b.n	800a40c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a40a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d006      	beq.n	800a420 <tcp_split_unsent_seg+0x25c>
 800a412:	4b09      	ldr	r3, [pc, #36]	; (800a438 <tcp_split_unsent_seg+0x274>)
 800a414:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a418:	490d      	ldr	r1, [pc, #52]	; (800a450 <tcp_split_unsent_seg+0x28c>)
 800a41a:	4809      	ldr	r0, [pc, #36]	; (800a440 <tcp_split_unsent_seg+0x27c>)
 800a41c:	f004 fadc 	bl	800e9d8 <iprintf>
  if (p != NULL) {
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d002      	beq.n	800a42c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a426:	6938      	ldr	r0, [r7, #16]
 800a428:	f7fb fc3c 	bl	8005ca4 <pbuf_free>
  }

  return ERR_MEM;
 800a42c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a430:	4618      	mov	r0, r3
 800a432:	3724      	adds	r7, #36	; 0x24
 800a434:	46bd      	mov	sp, r7
 800a436:	bd90      	pop	{r4, r7, pc}
 800a438:	08011500 	.word	0x08011500
 800a43c:	08011894 	.word	0x08011894
 800a440:	08011554 	.word	0x08011554
 800a444:	080118b8 	.word	0x080118b8
 800a448:	080118dc 	.word	0x080118dc
 800a44c:	080118ec 	.word	0x080118ec
 800a450:	080118fc 	.word	0x080118fc

0800a454 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a454:	b590      	push	{r4, r7, lr}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d106      	bne.n	800a470 <tcp_send_fin+0x1c>
 800a462:	4b21      	ldr	r3, [pc, #132]	; (800a4e8 <tcp_send_fin+0x94>)
 800a464:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a468:	4920      	ldr	r1, [pc, #128]	; (800a4ec <tcp_send_fin+0x98>)
 800a46a:	4821      	ldr	r0, [pc, #132]	; (800a4f0 <tcp_send_fin+0x9c>)
 800a46c:	f004 fab4 	bl	800e9d8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a474:	2b00      	cmp	r3, #0
 800a476:	d02e      	beq.n	800a4d6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a47c:	60fb      	str	r3, [r7, #12]
 800a47e:	e002      	b.n	800a486 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d1f8      	bne.n	800a480 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	899b      	ldrh	r3, [r3, #12]
 800a494:	b29b      	uxth	r3, r3
 800a496:	4618      	mov	r0, r3
 800a498:	f7fa f8a6 	bl	80045e8 <lwip_htons>
 800a49c:	4603      	mov	r3, r0
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	f003 0307 	and.w	r3, r3, #7
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d116      	bne.n	800a4d6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	899b      	ldrh	r3, [r3, #12]
 800a4ae:	b29c      	uxth	r4, r3
 800a4b0:	2001      	movs	r0, #1
 800a4b2:	f7fa f899 	bl	80045e8 <lwip_htons>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	4322      	orrs	r2, r4
 800a4c0:	b292      	uxth	r2, r2
 800a4c2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	8b5b      	ldrh	r3, [r3, #26]
 800a4c8:	f043 0320 	orr.w	r3, r3, #32
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	e004      	b.n	800a4e0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a4d6:	2101      	movs	r1, #1
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 f80b 	bl	800a4f4 <tcp_enqueue_flags>
 800a4de:	4603      	mov	r3, r0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3714      	adds	r7, #20
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd90      	pop	{r4, r7, pc}
 800a4e8:	08011500 	.word	0x08011500
 800a4ec:	08011908 	.word	0x08011908
 800a4f0:	08011554 	.word	0x08011554

0800a4f4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b08a      	sub	sp, #40	; 0x28
 800a4f8:	af02      	add	r7, sp, #8
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a500:	2300      	movs	r3, #0
 800a502:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a504:	2300      	movs	r3, #0
 800a506:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a508:	78fb      	ldrb	r3, [r7, #3]
 800a50a:	f003 0303 	and.w	r3, r3, #3
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d106      	bne.n	800a520 <tcp_enqueue_flags+0x2c>
 800a512:	4b67      	ldr	r3, [pc, #412]	; (800a6b0 <tcp_enqueue_flags+0x1bc>)
 800a514:	f240 4211 	movw	r2, #1041	; 0x411
 800a518:	4966      	ldr	r1, [pc, #408]	; (800a6b4 <tcp_enqueue_flags+0x1c0>)
 800a51a:	4867      	ldr	r0, [pc, #412]	; (800a6b8 <tcp_enqueue_flags+0x1c4>)
 800a51c:	f004 fa5c 	bl	800e9d8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d106      	bne.n	800a534 <tcp_enqueue_flags+0x40>
 800a526:	4b62      	ldr	r3, [pc, #392]	; (800a6b0 <tcp_enqueue_flags+0x1bc>)
 800a528:	f240 4213 	movw	r2, #1043	; 0x413
 800a52c:	4963      	ldr	r1, [pc, #396]	; (800a6bc <tcp_enqueue_flags+0x1c8>)
 800a52e:	4862      	ldr	r0, [pc, #392]	; (800a6b8 <tcp_enqueue_flags+0x1c4>)
 800a530:	f004 fa52 	bl	800e9d8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a534:	78fb      	ldrb	r3, [r7, #3]
 800a536:	f003 0302 	and.w	r3, r3, #2
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d001      	beq.n	800a542 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a53e:	2301      	movs	r3, #1
 800a540:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a542:	7ffb      	ldrb	r3, [r7, #31]
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	b2db      	uxtb	r3, r3
 800a548:	f003 0304 	and.w	r3, r3, #4
 800a54c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a54e:	7dfb      	ldrb	r3, [r7, #23]
 800a550:	b29b      	uxth	r3, r3
 800a552:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a556:	4619      	mov	r1, r3
 800a558:	2036      	movs	r0, #54	; 0x36
 800a55a:	f7fb f8bf 	bl	80056dc <pbuf_alloc>
 800a55e:	6138      	str	r0, [r7, #16]
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d109      	bne.n	800a57a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	8b5b      	ldrh	r3, [r3, #26]
 800a56a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a56e:	b29a      	uxth	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a574:	f04f 33ff 	mov.w	r3, #4294967295
 800a578:	e095      	b.n	800a6a6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	895a      	ldrh	r2, [r3, #10]
 800a57e:	7dfb      	ldrb	r3, [r7, #23]
 800a580:	b29b      	uxth	r3, r3
 800a582:	429a      	cmp	r2, r3
 800a584:	d206      	bcs.n	800a594 <tcp_enqueue_flags+0xa0>
 800a586:	4b4a      	ldr	r3, [pc, #296]	; (800a6b0 <tcp_enqueue_flags+0x1bc>)
 800a588:	f240 4239 	movw	r2, #1081	; 0x439
 800a58c:	494c      	ldr	r1, [pc, #304]	; (800a6c0 <tcp_enqueue_flags+0x1cc>)
 800a58e:	484a      	ldr	r0, [pc, #296]	; (800a6b8 <tcp_enqueue_flags+0x1c4>)
 800a590:	f004 fa22 	bl	800e9d8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a598:	78fa      	ldrb	r2, [r7, #3]
 800a59a:	7ffb      	ldrb	r3, [r7, #31]
 800a59c:	9300      	str	r3, [sp, #0]
 800a59e:	460b      	mov	r3, r1
 800a5a0:	6939      	ldr	r1, [r7, #16]
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f7ff fd70 	bl	800a088 <tcp_create_segment>
 800a5a8:	60f8      	str	r0, [r7, #12]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d109      	bne.n	800a5c4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	8b5b      	ldrh	r3, [r3, #26]
 800a5b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5b8:	b29a      	uxth	r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a5be:	f04f 33ff 	mov.w	r3, #4294967295
 800a5c2:	e070      	b.n	800a6a6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	f003 0303 	and.w	r3, r3, #3
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d006      	beq.n	800a5de <tcp_enqueue_flags+0xea>
 800a5d0:	4b37      	ldr	r3, [pc, #220]	; (800a6b0 <tcp_enqueue_flags+0x1bc>)
 800a5d2:	f240 4242 	movw	r2, #1090	; 0x442
 800a5d6:	493b      	ldr	r1, [pc, #236]	; (800a6c4 <tcp_enqueue_flags+0x1d0>)
 800a5d8:	4837      	ldr	r0, [pc, #220]	; (800a6b8 <tcp_enqueue_flags+0x1c4>)
 800a5da:	f004 f9fd 	bl	800e9d8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	891b      	ldrh	r3, [r3, #8]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d006      	beq.n	800a5f4 <tcp_enqueue_flags+0x100>
 800a5e6:	4b32      	ldr	r3, [pc, #200]	; (800a6b0 <tcp_enqueue_flags+0x1bc>)
 800a5e8:	f240 4243 	movw	r2, #1091	; 0x443
 800a5ec:	4936      	ldr	r1, [pc, #216]	; (800a6c8 <tcp_enqueue_flags+0x1d4>)
 800a5ee:	4832      	ldr	r0, [pc, #200]	; (800a6b8 <tcp_enqueue_flags+0x1c4>)
 800a5f0:	f004 f9f2 	bl	800e9d8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d103      	bne.n	800a604 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	68fa      	ldr	r2, [r7, #12]
 800a600:	66da      	str	r2, [r3, #108]	; 0x6c
 800a602:	e00d      	b.n	800a620 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a608:	61bb      	str	r3, [r7, #24]
 800a60a:	e002      	b.n	800a612 <tcp_enqueue_flags+0x11e>
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	61bb      	str	r3, [r7, #24]
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1f8      	bne.n	800a60c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a628:	78fb      	ldrb	r3, [r7, #3]
 800a62a:	f003 0302 	and.w	r3, r3, #2
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d104      	bne.n	800a63c <tcp_enqueue_flags+0x148>
 800a632:	78fb      	ldrb	r3, [r7, #3]
 800a634:	f003 0301 	and.w	r3, r3, #1
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d004      	beq.n	800a646 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a640:	1c5a      	adds	r2, r3, #1
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a646:	78fb      	ldrb	r3, [r7, #3]
 800a648:	f003 0301 	and.w	r3, r3, #1
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d006      	beq.n	800a65e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	8b5b      	ldrh	r3, [r3, #26]
 800a654:	f043 0320 	orr.w	r3, r3, #32
 800a658:	b29a      	uxth	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	4618      	mov	r0, r3
 800a664:	f7fb fba6 	bl	8005db4 <pbuf_clen>
 800a668:	4603      	mov	r3, r0
 800a66a:	461a      	mov	r2, r3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a672:	4413      	add	r3, r2
 800a674:	b29a      	uxth	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00e      	beq.n	800a6a4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d10a      	bne.n	800a6a4 <tcp_enqueue_flags+0x1b0>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a692:	2b00      	cmp	r3, #0
 800a694:	d106      	bne.n	800a6a4 <tcp_enqueue_flags+0x1b0>
 800a696:	4b06      	ldr	r3, [pc, #24]	; (800a6b0 <tcp_enqueue_flags+0x1bc>)
 800a698:	f240 4265 	movw	r2, #1125	; 0x465
 800a69c:	490b      	ldr	r1, [pc, #44]	; (800a6cc <tcp_enqueue_flags+0x1d8>)
 800a69e:	4806      	ldr	r0, [pc, #24]	; (800a6b8 <tcp_enqueue_flags+0x1c4>)
 800a6a0:	f004 f99a 	bl	800e9d8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3720      	adds	r7, #32
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	08011500 	.word	0x08011500
 800a6b4:	08011924 	.word	0x08011924
 800a6b8:	08011554 	.word	0x08011554
 800a6bc:	0801197c 	.word	0x0801197c
 800a6c0:	0801199c 	.word	0x0801199c
 800a6c4:	080119d8 	.word	0x080119d8
 800a6c8:	080119f0 	.word	0x080119f0
 800a6cc:	08011a1c 	.word	0x08011a1c

0800a6d0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a6d0:	b5b0      	push	{r4, r5, r7, lr}
 800a6d2:	b08a      	sub	sp, #40	; 0x28
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d106      	bne.n	800a6ec <tcp_output+0x1c>
 800a6de:	4b8a      	ldr	r3, [pc, #552]	; (800a908 <tcp_output+0x238>)
 800a6e0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a6e4:	4989      	ldr	r1, [pc, #548]	; (800a90c <tcp_output+0x23c>)
 800a6e6:	488a      	ldr	r0, [pc, #552]	; (800a910 <tcp_output+0x240>)
 800a6e8:	f004 f976 	bl	800e9d8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	7d1b      	ldrb	r3, [r3, #20]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d106      	bne.n	800a702 <tcp_output+0x32>
 800a6f4:	4b84      	ldr	r3, [pc, #528]	; (800a908 <tcp_output+0x238>)
 800a6f6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800a6fa:	4986      	ldr	r1, [pc, #536]	; (800a914 <tcp_output+0x244>)
 800a6fc:	4884      	ldr	r0, [pc, #528]	; (800a910 <tcp_output+0x240>)
 800a6fe:	f004 f96b 	bl	800e9d8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a702:	4b85      	ldr	r3, [pc, #532]	; (800a918 <tcp_output+0x248>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d101      	bne.n	800a710 <tcp_output+0x40>
    return ERR_OK;
 800a70c:	2300      	movs	r3, #0
 800a70e:	e1ce      	b.n	800aaae <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a71c:	4293      	cmp	r3, r2
 800a71e:	bf28      	it	cs
 800a720:	4613      	movcs	r3, r2
 800a722:	b29b      	uxth	r3, r3
 800a724:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a72a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800a72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10b      	bne.n	800a74a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	8b5b      	ldrh	r3, [r3, #26]
 800a736:	f003 0302 	and.w	r3, r3, #2
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f000 81aa 	beq.w	800aa94 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 fdcb 	bl	800b2dc <tcp_send_empty_ack>
 800a746:	4603      	mov	r3, r0
 800a748:	e1b1      	b.n	800aaae <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a74a:	6879      	ldr	r1, [r7, #4]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	3304      	adds	r3, #4
 800a750:	461a      	mov	r2, r3
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f7ff fc7c 	bl	800a050 <tcp_route>
 800a758:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d102      	bne.n	800a766 <tcp_output+0x96>
    return ERR_RTE;
 800a760:	f06f 0303 	mvn.w	r3, #3
 800a764:	e1a3      	b.n	800aaae <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d003      	beq.n	800a774 <tcp_output+0xa4>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d111      	bne.n	800a798 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d002      	beq.n	800a780 <tcp_output+0xb0>
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	3304      	adds	r3, #4
 800a77e:	e000      	b.n	800a782 <tcp_output+0xb2>
 800a780:	2300      	movs	r3, #0
 800a782:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d102      	bne.n	800a790 <tcp_output+0xc0>
      return ERR_RTE;
 800a78a:	f06f 0303 	mvn.w	r3, #3
 800a78e:	e18e      	b.n	800aaae <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7f9 ff37 	bl	8004612 <lwip_htonl>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7aa:	1ad3      	subs	r3, r2, r3
 800a7ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ae:	8912      	ldrh	r2, [r2, #8]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	69ba      	ldr	r2, [r7, #24]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d227      	bcs.n	800a808 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a7be:	461a      	mov	r2, r3
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d114      	bne.n	800a7f0 <tcp_output+0x120>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d110      	bne.n	800a7f0 <tcp_output+0x120>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10b      	bne.n	800a7f0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	8b5b      	ldrh	r3, [r3, #26]
 800a7f4:	f003 0302 	and.w	r3, r3, #2
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f000 814d 	beq.w	800aa98 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 fd6c 	bl	800b2dc <tcp_send_empty_ack>
 800a804:	4603      	mov	r3, r0
 800a806:	e152      	b.n	800aaae <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a814:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a816:	6a3b      	ldr	r3, [r7, #32]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f000 811c 	beq.w	800aa56 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800a81e:	e002      	b.n	800a826 <tcp_output+0x156>
 800a820:	6a3b      	ldr	r3, [r7, #32]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	623b      	str	r3, [r7, #32]
 800a826:	6a3b      	ldr	r3, [r7, #32]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1f8      	bne.n	800a820 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a82e:	e112      	b.n	800aa56 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	899b      	ldrh	r3, [r3, #12]
 800a836:	b29b      	uxth	r3, r3
 800a838:	4618      	mov	r0, r3
 800a83a:	f7f9 fed5 	bl	80045e8 <lwip_htons>
 800a83e:	4603      	mov	r3, r0
 800a840:	b2db      	uxtb	r3, r3
 800a842:	f003 0304 	and.w	r3, r3, #4
 800a846:	2b00      	cmp	r3, #0
 800a848:	d006      	beq.n	800a858 <tcp_output+0x188>
 800a84a:	4b2f      	ldr	r3, [pc, #188]	; (800a908 <tcp_output+0x238>)
 800a84c:	f240 5236 	movw	r2, #1334	; 0x536
 800a850:	4932      	ldr	r1, [pc, #200]	; (800a91c <tcp_output+0x24c>)
 800a852:	482f      	ldr	r0, [pc, #188]	; (800a910 <tcp_output+0x240>)
 800a854:	f004 f8c0 	bl	800e9d8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d01f      	beq.n	800a8a0 <tcp_output+0x1d0>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	8b5b      	ldrh	r3, [r3, #26]
 800a864:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d119      	bne.n	800a8a0 <tcp_output+0x1d0>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a870:	2b00      	cmp	r3, #0
 800a872:	d00b      	beq.n	800a88c <tcp_output+0x1bc>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d110      	bne.n	800a8a0 <tcp_output+0x1d0>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a882:	891a      	ldrh	r2, [r3, #8]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a888:	429a      	cmp	r2, r3
 800a88a:	d209      	bcs.n	800a8a0 <tcp_output+0x1d0>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a892:	2b00      	cmp	r3, #0
 800a894:	d004      	beq.n	800a8a0 <tcp_output+0x1d0>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a89c:	2b08      	cmp	r3, #8
 800a89e:	d901      	bls.n	800a8a4 <tcp_output+0x1d4>
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e000      	b.n	800a8a6 <tcp_output+0x1d6>
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d106      	bne.n	800a8b8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	8b5b      	ldrh	r3, [r3, #26]
 800a8ae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f000 80e4 	beq.w	800aa80 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	7d1b      	ldrb	r3, [r3, #20]
 800a8bc:	2b02      	cmp	r3, #2
 800a8be:	d00d      	beq.n	800a8dc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	899b      	ldrh	r3, [r3, #12]
 800a8c6:	b29c      	uxth	r4, r3
 800a8c8:	2010      	movs	r0, #16
 800a8ca:	f7f9 fe8d 	bl	80045e8 <lwip_htons>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	4322      	orrs	r2, r4
 800a8d8:	b292      	uxth	r2, r2
 800a8da:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a8dc:	697a      	ldr	r2, [r7, #20]
 800a8de:	6879      	ldr	r1, [r7, #4]
 800a8e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8e2:	f000 f909 	bl	800aaf8 <tcp_output_segment>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a8ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d016      	beq.n	800a920 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	8b5b      	ldrh	r3, [r3, #26]
 800a8f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	835a      	strh	r2, [r3, #26]
      return err;
 800a900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a904:	e0d3      	b.n	800aaae <tcp_output+0x3de>
 800a906:	bf00      	nop
 800a908:	08011500 	.word	0x08011500
 800a90c:	08011a44 	.word	0x08011a44
 800a910:	08011554 	.word	0x08011554
 800a914:	08011a5c 	.word	0x08011a5c
 800a918:	20008358 	.word	0x20008358
 800a91c:	08011a84 	.word	0x08011a84
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	7d1b      	ldrb	r3, [r3, #20]
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	d006      	beq.n	800a93e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	8b5b      	ldrh	r3, [r3, #26]
 800a934:	f023 0303 	bic.w	r3, r3, #3
 800a938:	b29a      	uxth	r2, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	4618      	mov	r0, r3
 800a946:	f7f9 fe64 	bl	8004612 <lwip_htonl>
 800a94a:	4604      	mov	r4, r0
 800a94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94e:	891b      	ldrh	r3, [r3, #8]
 800a950:	461d      	mov	r5, r3
 800a952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	899b      	ldrh	r3, [r3, #12]
 800a958:	b29b      	uxth	r3, r3
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7f9 fe44 	bl	80045e8 <lwip_htons>
 800a960:	4603      	mov	r3, r0
 800a962:	b2db      	uxtb	r3, r3
 800a964:	f003 0303 	and.w	r3, r3, #3
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d001      	beq.n	800a970 <tcp_output+0x2a0>
 800a96c:	2301      	movs	r3, #1
 800a96e:	e000      	b.n	800a972 <tcp_output+0x2a2>
 800a970:	2300      	movs	r3, #0
 800a972:	442b      	add	r3, r5
 800a974:	4423      	add	r3, r4
 800a976:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	1ad3      	subs	r3, r2, r3
 800a980:	2b00      	cmp	r3, #0
 800a982:	da02      	bge.n	800a98a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	68ba      	ldr	r2, [r7, #8]
 800a988:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98c:	891b      	ldrh	r3, [r3, #8]
 800a98e:	461c      	mov	r4, r3
 800a990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	899b      	ldrh	r3, [r3, #12]
 800a996:	b29b      	uxth	r3, r3
 800a998:	4618      	mov	r0, r3
 800a99a:	f7f9 fe25 	bl	80045e8 <lwip_htons>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	f003 0303 	and.w	r3, r3, #3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <tcp_output+0x2de>
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e000      	b.n	800a9b0 <tcp_output+0x2e0>
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	4423      	add	r3, r4
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d049      	beq.n	800aa4a <tcp_output+0x37a>
      seg->next = NULL;
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d105      	bne.n	800a9d0 <tcp_output+0x300>
        pcb->unacked = seg;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9c8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9cc:	623b      	str	r3, [r7, #32]
 800a9ce:	e03f      	b.n	800aa50 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7f9 fe1b 	bl	8004612 <lwip_htonl>
 800a9dc:	4604      	mov	r4, r0
 800a9de:	6a3b      	ldr	r3, [r7, #32]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7f9 fe14 	bl	8004612 <lwip_htonl>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	1ae3      	subs	r3, r4, r3
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	da24      	bge.n	800aa3c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	3370      	adds	r3, #112	; 0x70
 800a9f6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a9f8:	e002      	b.n	800aa00 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d011      	beq.n	800aa2c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800aa08:	69fb      	ldr	r3, [r7, #28]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7f9 fdfe 	bl	8004612 <lwip_htonl>
 800aa16:	4604      	mov	r4, r0
 800aa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7f9 fdf7 	bl	8004612 <lwip_htonl>
 800aa24:	4603      	mov	r3, r0
 800aa26:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	dbe6      	blt.n	800a9fa <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa32:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa38:	601a      	str	r2, [r3, #0]
 800aa3a:	e009      	b.n	800aa50 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800aa3c:	6a3b      	ldr	r3, [r7, #32]
 800aa3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa40:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800aa42:	6a3b      	ldr	r3, [r7, #32]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	623b      	str	r3, [r7, #32]
 800aa48:	e002      	b.n	800aa50 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800aa4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa4c:	f7fc fc3f 	bl	80072ce <tcp_seg_free>
    }
    seg = pcb->unsent;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa54:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800aa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d012      	beq.n	800aa82 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7f9 fdd5 	bl	8004612 <lwip_htonl>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa6e:	1ad3      	subs	r3, r2, r3
 800aa70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa72:	8912      	ldrh	r2, [r2, #8]
 800aa74:	4413      	add	r3, r2
  while (seg != NULL &&
 800aa76:	69ba      	ldr	r2, [r7, #24]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	f4bf aed9 	bcs.w	800a830 <tcp_output+0x160>
 800aa7e:	e000      	b.n	800aa82 <tcp_output+0x3b2>
      break;
 800aa80:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d108      	bne.n	800aa9c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800aa92:	e004      	b.n	800aa9e <tcp_output+0x3ce>
    goto output_done;
 800aa94:	bf00      	nop
 800aa96:	e002      	b.n	800aa9e <tcp_output+0x3ce>
    goto output_done;
 800aa98:	bf00      	nop
 800aa9a:	e000      	b.n	800aa9e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800aa9c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	8b5b      	ldrh	r3, [r3, #26]
 800aaa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaa6:	b29a      	uxth	r2, r3
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3728      	adds	r7, #40	; 0x28
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bdb0      	pop	{r4, r5, r7, pc}
 800aab6:	bf00      	nop

0800aab8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d106      	bne.n	800aad4 <tcp_output_segment_busy+0x1c>
 800aac6:	4b09      	ldr	r3, [pc, #36]	; (800aaec <tcp_output_segment_busy+0x34>)
 800aac8:	f240 529a 	movw	r2, #1434	; 0x59a
 800aacc:	4908      	ldr	r1, [pc, #32]	; (800aaf0 <tcp_output_segment_busy+0x38>)
 800aace:	4809      	ldr	r0, [pc, #36]	; (800aaf4 <tcp_output_segment_busy+0x3c>)
 800aad0:	f003 ff82 	bl	800e9d8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	7b9b      	ldrb	r3, [r3, #14]
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d001      	beq.n	800aae2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800aade:	2301      	movs	r3, #1
 800aae0:	e000      	b.n	800aae4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3708      	adds	r7, #8
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	08011500 	.word	0x08011500
 800aaf0:	08011a9c 	.word	0x08011a9c
 800aaf4:	08011554 	.word	0x08011554

0800aaf8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800aaf8:	b5b0      	push	{r4, r5, r7, lr}
 800aafa:	b08c      	sub	sp, #48	; 0x30
 800aafc:	af04      	add	r7, sp, #16
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d106      	bne.n	800ab18 <tcp_output_segment+0x20>
 800ab0a:	4b63      	ldr	r3, [pc, #396]	; (800ac98 <tcp_output_segment+0x1a0>)
 800ab0c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ab10:	4962      	ldr	r1, [pc, #392]	; (800ac9c <tcp_output_segment+0x1a4>)
 800ab12:	4863      	ldr	r0, [pc, #396]	; (800aca0 <tcp_output_segment+0x1a8>)
 800ab14:	f003 ff60 	bl	800e9d8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d106      	bne.n	800ab2c <tcp_output_segment+0x34>
 800ab1e:	4b5e      	ldr	r3, [pc, #376]	; (800ac98 <tcp_output_segment+0x1a0>)
 800ab20:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ab24:	495f      	ldr	r1, [pc, #380]	; (800aca4 <tcp_output_segment+0x1ac>)
 800ab26:	485e      	ldr	r0, [pc, #376]	; (800aca0 <tcp_output_segment+0x1a8>)
 800ab28:	f003 ff56 	bl	800e9d8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d106      	bne.n	800ab40 <tcp_output_segment+0x48>
 800ab32:	4b59      	ldr	r3, [pc, #356]	; (800ac98 <tcp_output_segment+0x1a0>)
 800ab34:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ab38:	495b      	ldr	r1, [pc, #364]	; (800aca8 <tcp_output_segment+0x1b0>)
 800ab3a:	4859      	ldr	r0, [pc, #356]	; (800aca0 <tcp_output_segment+0x1a8>)
 800ab3c:	f003 ff4c 	bl	800e9d8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	f7ff ffb9 	bl	800aab8 <tcp_output_segment_busy>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d001      	beq.n	800ab50 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	e09f      	b.n	800ac90 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	68dc      	ldr	r4, [r3, #12]
 800ab58:	4610      	mov	r0, r2
 800ab5a:	f7f9 fd5a 	bl	8004612 <lwip_htonl>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	68dc      	ldr	r4, [r3, #12]
 800ab6a:	4610      	mov	r0, r2
 800ab6c:	f7f9 fd3c 	bl	80045e8 <lwip_htons>
 800ab70:	4603      	mov	r3, r0
 800ab72:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ab7c:	441a      	add	r2, r3
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	3314      	adds	r3, #20
 800ab88:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	7a9b      	ldrb	r3, [r3, #10]
 800ab8e:	f003 0301 	and.w	r3, r3, #1
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d015      	beq.n	800abc2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	3304      	adds	r3, #4
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	6879      	ldr	r1, [r7, #4]
 800ab9e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800aba2:	f7fc fe8b 	bl	80078bc <tcp_eff_send_mss_netif>
 800aba6:	4603      	mov	r3, r0
 800aba8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800abaa:	8b7b      	ldrh	r3, [r7, #26]
 800abac:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7f9 fd2e 	bl	8004612 <lwip_htonl>
 800abb6:	4602      	mov	r2, r0
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	601a      	str	r2, [r3, #0]
    opts += 1;
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	3304      	adds	r3, #4
 800abc0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800abc8:	2b00      	cmp	r3, #0
 800abca:	da02      	bge.n	800abd2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	2200      	movs	r2, #0
 800abd0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10c      	bne.n	800abf4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800abda:	4b34      	ldr	r3, [pc, #208]	; (800acac <tcp_output_segment+0x1b4>)
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	4618      	mov	r0, r3
 800abea:	f7f9 fd12 	bl	8004612 <lwip_htonl>
 800abee:	4602      	mov	r2, r0
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	68da      	ldr	r2, [r3, #12]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	1ad3      	subs	r3, r2, r3
 800ac00:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	8959      	ldrh	r1, [r3, #10]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	8b3a      	ldrh	r2, [r7, #24]
 800ac0e:	1a8a      	subs	r2, r1, r2
 800ac10:	b292      	uxth	r2, r2
 800ac12:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	8919      	ldrh	r1, [r3, #8]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	8b3a      	ldrh	r2, [r7, #24]
 800ac20:	1a8a      	subs	r2, r1, r2
 800ac22:	b292      	uxth	r2, r2
 800ac24:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	68d2      	ldr	r2, [r2, #12]
 800ac2e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	741a      	strb	r2, [r3, #16]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	f103 0214 	add.w	r2, r3, #20
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	7a9b      	ldrb	r3, [r3, #10]
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	f003 0304 	and.w	r3, r3, #4
 800ac4e:	4413      	add	r3, r2
 800ac50:	69fa      	ldr	r2, [r7, #28]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d006      	beq.n	800ac64 <tcp_output_segment+0x16c>
 800ac56:	4b10      	ldr	r3, [pc, #64]	; (800ac98 <tcp_output_segment+0x1a0>)
 800ac58:	f240 621c 	movw	r2, #1564	; 0x61c
 800ac5c:	4914      	ldr	r1, [pc, #80]	; (800acb0 <tcp_output_segment+0x1b8>)
 800ac5e:	4810      	ldr	r0, [pc, #64]	; (800aca0 <tcp_output_segment+0x1a8>)
 800ac60:	f003 feba 	bl	800e9d8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6858      	ldr	r0, [r3, #4]
 800ac68:	68b9      	ldr	r1, [r7, #8]
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	1d1c      	adds	r4, r3, #4
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	7add      	ldrb	r5, [r3, #11]
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	7a9b      	ldrb	r3, [r3, #10]
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	9202      	str	r2, [sp, #8]
 800ac7a:	2206      	movs	r2, #6
 800ac7c:	9201      	str	r2, [sp, #4]
 800ac7e:	9300      	str	r3, [sp, #0]
 800ac80:	462b      	mov	r3, r5
 800ac82:	4622      	mov	r2, r4
 800ac84:	f002 fd86 	bl	800d794 <ip4_output_if>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ac8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3720      	adds	r7, #32
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bdb0      	pop	{r4, r5, r7, pc}
 800ac98:	08011500 	.word	0x08011500
 800ac9c:	08011ac4 	.word	0x08011ac4
 800aca0:	08011554 	.word	0x08011554
 800aca4:	08011ae4 	.word	0x08011ae4
 800aca8:	08011b04 	.word	0x08011b04
 800acac:	2000830c 	.word	0x2000830c
 800acb0:	08011b28 	.word	0x08011b28

0800acb4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800acb4:	b5b0      	push	{r4, r5, r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d106      	bne.n	800acd0 <tcp_rexmit_rto_prepare+0x1c>
 800acc2:	4b31      	ldr	r3, [pc, #196]	; (800ad88 <tcp_rexmit_rto_prepare+0xd4>)
 800acc4:	f240 6263 	movw	r2, #1635	; 0x663
 800acc8:	4930      	ldr	r1, [pc, #192]	; (800ad8c <tcp_rexmit_rto_prepare+0xd8>)
 800acca:	4831      	ldr	r0, [pc, #196]	; (800ad90 <tcp_rexmit_rto_prepare+0xdc>)
 800accc:	f003 fe84 	bl	800e9d8 <iprintf>

  if (pcb->unacked == NULL) {
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d102      	bne.n	800acde <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800acd8:	f06f 0305 	mvn.w	r3, #5
 800acdc:	e050      	b.n	800ad80 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ace2:	60fb      	str	r3, [r7, #12]
 800ace4:	e00b      	b.n	800acfe <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f7ff fee6 	bl	800aab8 <tcp_output_segment_busy>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d002      	beq.n	800acf8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800acf2:	f06f 0305 	mvn.w	r3, #5
 800acf6:	e043      	b.n	800ad80 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	60fb      	str	r3, [r7, #12]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1ef      	bne.n	800ace6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f7ff fed6 	bl	800aab8 <tcp_output_segment_busy>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d002      	beq.n	800ad18 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ad12:	f06f 0305 	mvn.w	r3, #5
 800ad16:	e033      	b.n	800ad80 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	8b5b      	ldrh	r3, [r3, #26]
 800ad32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ad36:	b29a      	uxth	r2, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7f9 fc65 	bl	8004612 <lwip_htonl>
 800ad48:	4604      	mov	r4, r0
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	891b      	ldrh	r3, [r3, #8]
 800ad4e:	461d      	mov	r5, r3
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	68db      	ldr	r3, [r3, #12]
 800ad54:	899b      	ldrh	r3, [r3, #12]
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7f9 fc45 	bl	80045e8 <lwip_htons>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	f003 0303 	and.w	r3, r3, #3
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d001      	beq.n	800ad6e <tcp_rexmit_rto_prepare+0xba>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e000      	b.n	800ad70 <tcp_rexmit_rto_prepare+0xbc>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	442b      	add	r3, r5
 800ad72:	18e2      	adds	r2, r4, r3
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bdb0      	pop	{r4, r5, r7, pc}
 800ad88:	08011500 	.word	0x08011500
 800ad8c:	08011b3c 	.word	0x08011b3c
 800ad90:	08011554 	.word	0x08011554

0800ad94 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d106      	bne.n	800adb0 <tcp_rexmit_rto_commit+0x1c>
 800ada2:	4b0d      	ldr	r3, [pc, #52]	; (800add8 <tcp_rexmit_rto_commit+0x44>)
 800ada4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ada8:	490c      	ldr	r1, [pc, #48]	; (800addc <tcp_rexmit_rto_commit+0x48>)
 800adaa:	480d      	ldr	r0, [pc, #52]	; (800ade0 <tcp_rexmit_rto_commit+0x4c>)
 800adac:	f003 fe14 	bl	800e9d8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800adb6:	2bff      	cmp	r3, #255	; 0xff
 800adb8:	d007      	beq.n	800adca <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800adc0:	3301      	adds	r3, #1
 800adc2:	b2da      	uxtb	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f7ff fc80 	bl	800a6d0 <tcp_output>
}
 800add0:	bf00      	nop
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	08011500 	.word	0x08011500
 800addc:	08011b60 	.word	0x08011b60
 800ade0:	08011554 	.word	0x08011554

0800ade4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d106      	bne.n	800ae00 <tcp_rexmit_rto+0x1c>
 800adf2:	4b0a      	ldr	r3, [pc, #40]	; (800ae1c <tcp_rexmit_rto+0x38>)
 800adf4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800adf8:	4909      	ldr	r1, [pc, #36]	; (800ae20 <tcp_rexmit_rto+0x3c>)
 800adfa:	480a      	ldr	r0, [pc, #40]	; (800ae24 <tcp_rexmit_rto+0x40>)
 800adfc:	f003 fdec 	bl	800e9d8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7ff ff57 	bl	800acb4 <tcp_rexmit_rto_prepare>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d102      	bne.n	800ae12 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f7ff ffc1 	bl	800ad94 <tcp_rexmit_rto_commit>
  }
}
 800ae12:	bf00      	nop
 800ae14:	3708      	adds	r7, #8
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	08011500 	.word	0x08011500
 800ae20:	08011b84 	.word	0x08011b84
 800ae24:	08011554 	.word	0x08011554

0800ae28 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ae28:	b590      	push	{r4, r7, lr}
 800ae2a:	b085      	sub	sp, #20
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d106      	bne.n	800ae44 <tcp_rexmit+0x1c>
 800ae36:	4b2f      	ldr	r3, [pc, #188]	; (800aef4 <tcp_rexmit+0xcc>)
 800ae38:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ae3c:	492e      	ldr	r1, [pc, #184]	; (800aef8 <tcp_rexmit+0xd0>)
 800ae3e:	482f      	ldr	r0, [pc, #188]	; (800aefc <tcp_rexmit+0xd4>)
 800ae40:	f003 fdca 	bl	800e9d8 <iprintf>

  if (pcb->unacked == NULL) {
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d102      	bne.n	800ae52 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ae4c:	f06f 0305 	mvn.w	r3, #5
 800ae50:	e04c      	b.n	800aeec <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae56:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ae58:	68b8      	ldr	r0, [r7, #8]
 800ae5a:	f7ff fe2d 	bl	800aab8 <tcp_output_segment_busy>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d002      	beq.n	800ae6a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ae64:	f06f 0305 	mvn.w	r3, #5
 800ae68:	e040      	b.n	800aeec <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	336c      	adds	r3, #108	; 0x6c
 800ae76:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ae78:	e002      	b.n	800ae80 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d011      	beq.n	800aeac <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7f9 fbbe 	bl	8004612 <lwip_htonl>
 800ae96:	4604      	mov	r4, r0
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7f9 fbb7 	bl	8004612 <lwip_htonl>
 800aea4:	4603      	mov	r3, r0
 800aea6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	dbe6      	blt.n	800ae7a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	68ba      	ldr	r2, [r7, #8]
 800aeb8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d103      	bne.n	800aeca <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aed0:	2bff      	cmp	r3, #255	; 0xff
 800aed2:	d007      	beq.n	800aee4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aeda:	3301      	adds	r3, #1
 800aedc:	b2da      	uxtb	r2, r3
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3714      	adds	r7, #20
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd90      	pop	{r4, r7, pc}
 800aef4:	08011500 	.word	0x08011500
 800aef8:	08011ba0 	.word	0x08011ba0
 800aefc:	08011554 	.word	0x08011554

0800af00 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d106      	bne.n	800af1c <tcp_rexmit_fast+0x1c>
 800af0e:	4b2a      	ldr	r3, [pc, #168]	; (800afb8 <tcp_rexmit_fast+0xb8>)
 800af10:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800af14:	4929      	ldr	r1, [pc, #164]	; (800afbc <tcp_rexmit_fast+0xbc>)
 800af16:	482a      	ldr	r0, [pc, #168]	; (800afc0 <tcp_rexmit_fast+0xc0>)
 800af18:	f003 fd5e 	bl	800e9d8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af20:	2b00      	cmp	r3, #0
 800af22:	d044      	beq.n	800afae <tcp_rexmit_fast+0xae>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	8b5b      	ldrh	r3, [r3, #26]
 800af28:	f003 0304 	and.w	r3, r3, #4
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d13e      	bne.n	800afae <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f7ff ff79 	bl	800ae28 <tcp_rexmit>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d138      	bne.n	800afae <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800af48:	4293      	cmp	r3, r2
 800af4a:	bf28      	it	cs
 800af4c:	4613      	movcs	r3, r2
 800af4e:	b29b      	uxth	r3, r3
 800af50:	0fda      	lsrs	r2, r3, #31
 800af52:	4413      	add	r3, r2
 800af54:	105b      	asrs	r3, r3, #1
 800af56:	b29a      	uxth	r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800af64:	461a      	mov	r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800af6a:	005b      	lsls	r3, r3, #1
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d206      	bcs.n	800af7e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800af74:	005b      	lsls	r3, r3, #1
 800af76:	b29a      	uxth	r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800af88:	4619      	mov	r1, r3
 800af8a:	0049      	lsls	r1, r1, #1
 800af8c:	440b      	add	r3, r1
 800af8e:	b29b      	uxth	r3, r3
 800af90:	4413      	add	r3, r2
 800af92:	b29a      	uxth	r2, r3
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	8b5b      	ldrh	r3, [r3, #26]
 800af9e:	f043 0304 	orr.w	r3, r3, #4
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2200      	movs	r2, #0
 800afac:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800afae:	bf00      	nop
 800afb0:	3708      	adds	r7, #8
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	08011500 	.word	0x08011500
 800afbc:	08011bb8 	.word	0x08011bb8
 800afc0:	08011554 	.word	0x08011554

0800afc4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b086      	sub	sp, #24
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	607b      	str	r3, [r7, #4]
 800afce:	460b      	mov	r3, r1
 800afd0:	817b      	strh	r3, [r7, #10]
 800afd2:	4613      	mov	r3, r2
 800afd4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800afd6:	897a      	ldrh	r2, [r7, #10]
 800afd8:	893b      	ldrh	r3, [r7, #8]
 800afda:	4413      	add	r3, r2
 800afdc:	b29b      	uxth	r3, r3
 800afde:	3314      	adds	r3, #20
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800afe6:	4619      	mov	r1, r3
 800afe8:	2022      	movs	r0, #34	; 0x22
 800afea:	f7fa fb77 	bl	80056dc <pbuf_alloc>
 800afee:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d04d      	beq.n	800b092 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800aff6:	897b      	ldrh	r3, [r7, #10]
 800aff8:	3313      	adds	r3, #19
 800affa:	697a      	ldr	r2, [r7, #20]
 800affc:	8952      	ldrh	r2, [r2, #10]
 800affe:	4293      	cmp	r3, r2
 800b000:	db06      	blt.n	800b010 <tcp_output_alloc_header_common+0x4c>
 800b002:	4b26      	ldr	r3, [pc, #152]	; (800b09c <tcp_output_alloc_header_common+0xd8>)
 800b004:	f240 7223 	movw	r2, #1827	; 0x723
 800b008:	4925      	ldr	r1, [pc, #148]	; (800b0a0 <tcp_output_alloc_header_common+0xdc>)
 800b00a:	4826      	ldr	r0, [pc, #152]	; (800b0a4 <tcp_output_alloc_header_common+0xe0>)
 800b00c:	f003 fce4 	bl	800e9d8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b016:	8c3b      	ldrh	r3, [r7, #32]
 800b018:	4618      	mov	r0, r3
 800b01a:	f7f9 fae5 	bl	80045e8 <lwip_htons>
 800b01e:	4603      	mov	r3, r0
 800b020:	461a      	mov	r2, r3
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b026:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b028:	4618      	mov	r0, r3
 800b02a:	f7f9 fadd 	bl	80045e8 <lwip_htons>
 800b02e:	4603      	mov	r3, r0
 800b030:	461a      	mov	r2, r3
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f7f9 fae8 	bl	8004612 <lwip_htonl>
 800b042:	4602      	mov	r2, r0
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b048:	897b      	ldrh	r3, [r7, #10]
 800b04a:	089b      	lsrs	r3, r3, #2
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	3305      	adds	r3, #5
 800b050:	b29b      	uxth	r3, r3
 800b052:	031b      	lsls	r3, r3, #12
 800b054:	b29a      	uxth	r2, r3
 800b056:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	4313      	orrs	r3, r2
 800b05e:	b29b      	uxth	r3, r3
 800b060:	4618      	mov	r0, r3
 800b062:	f7f9 fac1 	bl	80045e8 <lwip_htons>
 800b066:	4603      	mov	r3, r0
 800b068:	461a      	mov	r2, r3
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b06e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b070:	4618      	mov	r0, r3
 800b072:	f7f9 fab9 	bl	80045e8 <lwip_htons>
 800b076:	4603      	mov	r3, r0
 800b078:	461a      	mov	r2, r3
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	2200      	movs	r2, #0
 800b082:	741a      	strb	r2, [r3, #16]
 800b084:	2200      	movs	r2, #0
 800b086:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	2200      	movs	r2, #0
 800b08c:	749a      	strb	r2, [r3, #18]
 800b08e:	2200      	movs	r2, #0
 800b090:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b092:	697b      	ldr	r3, [r7, #20]
}
 800b094:	4618      	mov	r0, r3
 800b096:	3718      	adds	r7, #24
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	08011500 	.word	0x08011500
 800b0a0:	08011bd8 	.word	0x08011bd8
 800b0a4:	08011554 	.word	0x08011554

0800b0a8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b0a8:	b5b0      	push	{r4, r5, r7, lr}
 800b0aa:	b08a      	sub	sp, #40	; 0x28
 800b0ac:	af04      	add	r7, sp, #16
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	607b      	str	r3, [r7, #4]
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	817b      	strh	r3, [r7, #10]
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d106      	bne.n	800b0ce <tcp_output_alloc_header+0x26>
 800b0c0:	4b15      	ldr	r3, [pc, #84]	; (800b118 <tcp_output_alloc_header+0x70>)
 800b0c2:	f240 7242 	movw	r2, #1858	; 0x742
 800b0c6:	4915      	ldr	r1, [pc, #84]	; (800b11c <tcp_output_alloc_header+0x74>)
 800b0c8:	4815      	ldr	r0, [pc, #84]	; (800b120 <tcp_output_alloc_header+0x78>)
 800b0ca:	f003 fc85 	bl	800e9d8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	8adb      	ldrh	r3, [r3, #22]
 800b0d6:	68fa      	ldr	r2, [r7, #12]
 800b0d8:	8b12      	ldrh	r2, [r2, #24]
 800b0da:	68f9      	ldr	r1, [r7, #12]
 800b0dc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b0de:	893d      	ldrh	r5, [r7, #8]
 800b0e0:	897c      	ldrh	r4, [r7, #10]
 800b0e2:	9103      	str	r1, [sp, #12]
 800b0e4:	2110      	movs	r1, #16
 800b0e6:	9102      	str	r1, [sp, #8]
 800b0e8:	9201      	str	r2, [sp, #4]
 800b0ea:	9300      	str	r3, [sp, #0]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	462a      	mov	r2, r5
 800b0f0:	4621      	mov	r1, r4
 800b0f2:	f7ff ff67 	bl	800afc4 <tcp_output_alloc_header_common>
 800b0f6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d006      	beq.n	800b10c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b102:	68fa      	ldr	r2, [r7, #12]
 800b104:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b106:	441a      	add	r2, r3
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b10c:	697b      	ldr	r3, [r7, #20]
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3718      	adds	r7, #24
 800b112:	46bd      	mov	sp, r7
 800b114:	bdb0      	pop	{r4, r5, r7, pc}
 800b116:	bf00      	nop
 800b118:	08011500 	.word	0x08011500
 800b11c:	08011c08 	.word	0x08011c08
 800b120:	08011554 	.word	0x08011554

0800b124 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b088      	sub	sp, #32
 800b128:	af00      	add	r7, sp, #0
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	4611      	mov	r1, r2
 800b130:	461a      	mov	r2, r3
 800b132:	460b      	mov	r3, r1
 800b134:	71fb      	strb	r3, [r7, #7]
 800b136:	4613      	mov	r3, r2
 800b138:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b13a:	2300      	movs	r3, #0
 800b13c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d106      	bne.n	800b152 <tcp_output_fill_options+0x2e>
 800b144:	4b13      	ldr	r3, [pc, #76]	; (800b194 <tcp_output_fill_options+0x70>)
 800b146:	f240 7256 	movw	r2, #1878	; 0x756
 800b14a:	4913      	ldr	r1, [pc, #76]	; (800b198 <tcp_output_fill_options+0x74>)
 800b14c:	4813      	ldr	r0, [pc, #76]	; (800b19c <tcp_output_fill_options+0x78>)
 800b14e:	f003 fc43 	bl	800e9d8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	3314      	adds	r3, #20
 800b15c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	f103 0214 	add.w	r2, r3, #20
 800b164:	8bfb      	ldrh	r3, [r7, #30]
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	4619      	mov	r1, r3
 800b16a:	79fb      	ldrb	r3, [r7, #7]
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	f003 0304 	and.w	r3, r3, #4
 800b172:	440b      	add	r3, r1
 800b174:	4413      	add	r3, r2
 800b176:	697a      	ldr	r2, [r7, #20]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d006      	beq.n	800b18a <tcp_output_fill_options+0x66>
 800b17c:	4b05      	ldr	r3, [pc, #20]	; (800b194 <tcp_output_fill_options+0x70>)
 800b17e:	f240 7275 	movw	r2, #1909	; 0x775
 800b182:	4907      	ldr	r1, [pc, #28]	; (800b1a0 <tcp_output_fill_options+0x7c>)
 800b184:	4805      	ldr	r0, [pc, #20]	; (800b19c <tcp_output_fill_options+0x78>)
 800b186:	f003 fc27 	bl	800e9d8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b18a:	bf00      	nop
 800b18c:	3720      	adds	r7, #32
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	08011500 	.word	0x08011500
 800b198:	08011c30 	.word	0x08011c30
 800b19c:	08011554 	.word	0x08011554
 800b1a0:	08011b28 	.word	0x08011b28

0800b1a4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b08a      	sub	sp, #40	; 0x28
 800b1a8:	af04      	add	r7, sp, #16
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	607a      	str	r2, [r7, #4]
 800b1b0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d106      	bne.n	800b1c6 <tcp_output_control_segment+0x22>
 800b1b8:	4b1c      	ldr	r3, [pc, #112]	; (800b22c <tcp_output_control_segment+0x88>)
 800b1ba:	f240 7287 	movw	r2, #1927	; 0x787
 800b1be:	491c      	ldr	r1, [pc, #112]	; (800b230 <tcp_output_control_segment+0x8c>)
 800b1c0:	481c      	ldr	r0, [pc, #112]	; (800b234 <tcp_output_control_segment+0x90>)
 800b1c2:	f003 fc09 	bl	800e9d8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	6879      	ldr	r1, [r7, #4]
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f7fe ff40 	bl	800a050 <tcp_route>
 800b1d0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d102      	bne.n	800b1de <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b1d8:	23fc      	movs	r3, #252	; 0xfc
 800b1da:	75fb      	strb	r3, [r7, #23]
 800b1dc:	e01c      	b.n	800b218 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d006      	beq.n	800b1f2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	7adb      	ldrb	r3, [r3, #11]
 800b1e8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	7a9b      	ldrb	r3, [r3, #10]
 800b1ee:	757b      	strb	r3, [r7, #21]
 800b1f0:	e003      	b.n	800b1fa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b1f2:	23ff      	movs	r3, #255	; 0xff
 800b1f4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b1fa:	7dba      	ldrb	r2, [r7, #22]
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	9302      	str	r3, [sp, #8]
 800b200:	2306      	movs	r3, #6
 800b202:	9301      	str	r3, [sp, #4]
 800b204:	7d7b      	ldrb	r3, [r7, #21]
 800b206:	9300      	str	r3, [sp, #0]
 800b208:	4613      	mov	r3, r2
 800b20a:	683a      	ldr	r2, [r7, #0]
 800b20c:	6879      	ldr	r1, [r7, #4]
 800b20e:	68b8      	ldr	r0, [r7, #8]
 800b210:	f002 fac0 	bl	800d794 <ip4_output_if>
 800b214:	4603      	mov	r3, r0
 800b216:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b218:	68b8      	ldr	r0, [r7, #8]
 800b21a:	f7fa fd43 	bl	8005ca4 <pbuf_free>
  return err;
 800b21e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b222:	4618      	mov	r0, r3
 800b224:	3718      	adds	r7, #24
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	08011500 	.word	0x08011500
 800b230:	08011c58 	.word	0x08011c58
 800b234:	08011554 	.word	0x08011554

0800b238 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b238:	b590      	push	{r4, r7, lr}
 800b23a:	b08b      	sub	sp, #44	; 0x2c
 800b23c:	af04      	add	r7, sp, #16
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	607a      	str	r2, [r7, #4]
 800b244:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d106      	bne.n	800b25a <tcp_rst+0x22>
 800b24c:	4b1f      	ldr	r3, [pc, #124]	; (800b2cc <tcp_rst+0x94>)
 800b24e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b252:	491f      	ldr	r1, [pc, #124]	; (800b2d0 <tcp_rst+0x98>)
 800b254:	481f      	ldr	r0, [pc, #124]	; (800b2d4 <tcp_rst+0x9c>)
 800b256:	f003 fbbf 	bl	800e9d8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d106      	bne.n	800b26e <tcp_rst+0x36>
 800b260:	4b1a      	ldr	r3, [pc, #104]	; (800b2cc <tcp_rst+0x94>)
 800b262:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b266:	491c      	ldr	r1, [pc, #112]	; (800b2d8 <tcp_rst+0xa0>)
 800b268:	481a      	ldr	r0, [pc, #104]	; (800b2d4 <tcp_rst+0x9c>)
 800b26a:	f003 fbb5 	bl	800e9d8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b26e:	2300      	movs	r3, #0
 800b270:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b272:	f246 0308 	movw	r3, #24584	; 0x6008
 800b276:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b278:	7dfb      	ldrb	r3, [r7, #23]
 800b27a:	b29c      	uxth	r4, r3
 800b27c:	68b8      	ldr	r0, [r7, #8]
 800b27e:	f7f9 f9c8 	bl	8004612 <lwip_htonl>
 800b282:	4602      	mov	r2, r0
 800b284:	8abb      	ldrh	r3, [r7, #20]
 800b286:	9303      	str	r3, [sp, #12]
 800b288:	2314      	movs	r3, #20
 800b28a:	9302      	str	r3, [sp, #8]
 800b28c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b28e:	9301      	str	r3, [sp, #4]
 800b290:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b292:	9300      	str	r3, [sp, #0]
 800b294:	4613      	mov	r3, r2
 800b296:	2200      	movs	r2, #0
 800b298:	4621      	mov	r1, r4
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f7ff fe92 	bl	800afc4 <tcp_output_alloc_header_common>
 800b2a0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00c      	beq.n	800b2c2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b2a8:	7dfb      	ldrb	r3, [r7, #23]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	6939      	ldr	r1, [r7, #16]
 800b2ae:	68f8      	ldr	r0, [r7, #12]
 800b2b0:	f7ff ff38 	bl	800b124 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b6:	683a      	ldr	r2, [r7, #0]
 800b2b8:	6939      	ldr	r1, [r7, #16]
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f7ff ff72 	bl	800b1a4 <tcp_output_control_segment>
 800b2c0:	e000      	b.n	800b2c4 <tcp_rst+0x8c>
    return;
 800b2c2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b2c4:	371c      	adds	r7, #28
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd90      	pop	{r4, r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	08011500 	.word	0x08011500
 800b2d0:	08011c84 	.word	0x08011c84
 800b2d4:	08011554 	.word	0x08011554
 800b2d8:	08011ca0 	.word	0x08011ca0

0800b2dc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b2dc:	b590      	push	{r4, r7, lr}
 800b2de:	b087      	sub	sp, #28
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d106      	bne.n	800b300 <tcp_send_empty_ack+0x24>
 800b2f2:	4b28      	ldr	r3, [pc, #160]	; (800b394 <tcp_send_empty_ack+0xb8>)
 800b2f4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b2f8:	4927      	ldr	r1, [pc, #156]	; (800b398 <tcp_send_empty_ack+0xbc>)
 800b2fa:	4828      	ldr	r0, [pc, #160]	; (800b39c <tcp_send_empty_ack+0xc0>)
 800b2fc:	f003 fb6c 	bl	800e9d8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b300:	7dfb      	ldrb	r3, [r7, #23]
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	b2db      	uxtb	r3, r3
 800b306:	f003 0304 	and.w	r3, r3, #4
 800b30a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b30c:	7d7b      	ldrb	r3, [r7, #21]
 800b30e:	b29c      	uxth	r4, r3
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b314:	4618      	mov	r0, r3
 800b316:	f7f9 f97c 	bl	8004612 <lwip_htonl>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2200      	movs	r2, #0
 800b31e:	4621      	mov	r1, r4
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f7ff fec1 	bl	800b0a8 <tcp_output_alloc_header>
 800b326:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d109      	bne.n	800b342 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	8b5b      	ldrh	r3, [r3, #26]
 800b332:	f043 0303 	orr.w	r3, r3, #3
 800b336:	b29a      	uxth	r2, r3
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b33c:	f06f 0301 	mvn.w	r3, #1
 800b340:	e023      	b.n	800b38a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b342:	7dbb      	ldrb	r3, [r7, #22]
 800b344:	7dfa      	ldrb	r2, [r7, #23]
 800b346:	6939      	ldr	r1, [r7, #16]
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f7ff feeb 	bl	800b124 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	3304      	adds	r3, #4
 800b354:	6939      	ldr	r1, [r7, #16]
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f7ff ff24 	bl	800b1a4 <tcp_output_control_segment>
 800b35c:	4603      	mov	r3, r0
 800b35e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d007      	beq.n	800b378 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	8b5b      	ldrh	r3, [r3, #26]
 800b36c:	f043 0303 	orr.w	r3, r3, #3
 800b370:	b29a      	uxth	r2, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	835a      	strh	r2, [r3, #26]
 800b376:	e006      	b.n	800b386 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	8b5b      	ldrh	r3, [r3, #26]
 800b37c:	f023 0303 	bic.w	r3, r3, #3
 800b380:	b29a      	uxth	r2, r3
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b386:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	371c      	adds	r7, #28
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd90      	pop	{r4, r7, pc}
 800b392:	bf00      	nop
 800b394:	08011500 	.word	0x08011500
 800b398:	08011cbc 	.word	0x08011cbc
 800b39c:	08011554 	.word	0x08011554

0800b3a0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b3a0:	b590      	push	{r4, r7, lr}
 800b3a2:	b087      	sub	sp, #28
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d106      	bne.n	800b3c0 <tcp_keepalive+0x20>
 800b3b2:	4b18      	ldr	r3, [pc, #96]	; (800b414 <tcp_keepalive+0x74>)
 800b3b4:	f640 0224 	movw	r2, #2084	; 0x824
 800b3b8:	4917      	ldr	r1, [pc, #92]	; (800b418 <tcp_keepalive+0x78>)
 800b3ba:	4818      	ldr	r0, [pc, #96]	; (800b41c <tcp_keepalive+0x7c>)
 800b3bc:	f003 fb0c 	bl	800e9d8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b3c0:	7dfb      	ldrb	r3, [r7, #23]
 800b3c2:	b29c      	uxth	r4, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7f9 f921 	bl	8004612 <lwip_htonl>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	4621      	mov	r1, r4
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f7ff fe66 	bl	800b0a8 <tcp_output_alloc_header>
 800b3dc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d102      	bne.n	800b3ea <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b3e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b3e8:	e010      	b.n	800b40c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b3ea:	7dfb      	ldrb	r3, [r7, #23]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	6939      	ldr	r1, [r7, #16]
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f7ff fe97 	bl	800b124 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	3304      	adds	r3, #4
 800b3fc:	6939      	ldr	r1, [r7, #16]
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f7ff fed0 	bl	800b1a4 <tcp_output_control_segment>
 800b404:	4603      	mov	r3, r0
 800b406:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b408:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	371c      	adds	r7, #28
 800b410:	46bd      	mov	sp, r7
 800b412:	bd90      	pop	{r4, r7, pc}
 800b414:	08011500 	.word	0x08011500
 800b418:	08011cdc 	.word	0x08011cdc
 800b41c:	08011554 	.word	0x08011554

0800b420 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b420:	b590      	push	{r4, r7, lr}
 800b422:	b08b      	sub	sp, #44	; 0x2c
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b428:	2300      	movs	r3, #0
 800b42a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d106      	bne.n	800b442 <tcp_zero_window_probe+0x22>
 800b434:	4b4c      	ldr	r3, [pc, #304]	; (800b568 <tcp_zero_window_probe+0x148>)
 800b436:	f640 024f 	movw	r2, #2127	; 0x84f
 800b43a:	494c      	ldr	r1, [pc, #304]	; (800b56c <tcp_zero_window_probe+0x14c>)
 800b43c:	484c      	ldr	r0, [pc, #304]	; (800b570 <tcp_zero_window_probe+0x150>)
 800b43e:	f003 facb 	bl	800e9d8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b446:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b448:	6a3b      	ldr	r3, [r7, #32]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d101      	bne.n	800b452 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b44e:	2300      	movs	r3, #0
 800b450:	e086      	b.n	800b560 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b458:	2bff      	cmp	r3, #255	; 0xff
 800b45a:	d007      	beq.n	800b46c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b462:	3301      	adds	r3, #1
 800b464:	b2da      	uxtb	r2, r3
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b46c:	6a3b      	ldr	r3, [r7, #32]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	899b      	ldrh	r3, [r3, #12]
 800b472:	b29b      	uxth	r3, r3
 800b474:	4618      	mov	r0, r3
 800b476:	f7f9 f8b7 	bl	80045e8 <lwip_htons>
 800b47a:	4603      	mov	r3, r0
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	f003 0301 	and.w	r3, r3, #1
 800b482:	2b00      	cmp	r3, #0
 800b484:	d005      	beq.n	800b492 <tcp_zero_window_probe+0x72>
 800b486:	6a3b      	ldr	r3, [r7, #32]
 800b488:	891b      	ldrh	r3, [r3, #8]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d101      	bne.n	800b492 <tcp_zero_window_probe+0x72>
 800b48e:	2301      	movs	r3, #1
 800b490:	e000      	b.n	800b494 <tcp_zero_window_probe+0x74>
 800b492:	2300      	movs	r3, #0
 800b494:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b496:	7ffb      	ldrb	r3, [r7, #31]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	bf0c      	ite	eq
 800b49c:	2301      	moveq	r3, #1
 800b49e:	2300      	movne	r3, #0
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b4a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4a8:	b299      	uxth	r1, r3
 800b4aa:	6a3b      	ldr	r3, [r7, #32]
 800b4ac:	68db      	ldr	r3, [r3, #12]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	8bba      	ldrh	r2, [r7, #28]
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f7ff fdf8 	bl	800b0a8 <tcp_output_alloc_header>
 800b4b8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d102      	bne.n	800b4c6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b4c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b4c4:	e04c      	b.n	800b560 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b4cc:	7ffb      	ldrb	r3, [r7, #31]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d011      	beq.n	800b4f6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	899b      	ldrh	r3, [r3, #12]
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	b21b      	sxth	r3, r3
 800b4da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b4de:	b21c      	sxth	r4, r3
 800b4e0:	2011      	movs	r0, #17
 800b4e2:	f7f9 f881 	bl	80045e8 <lwip_htons>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	b21b      	sxth	r3, r3
 800b4ea:	4323      	orrs	r3, r4
 800b4ec:	b21b      	sxth	r3, r3
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	819a      	strh	r2, [r3, #12]
 800b4f4:	e010      	b.n	800b518 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b4f6:	69bb      	ldr	r3, [r7, #24]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	3314      	adds	r3, #20
 800b4fc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b4fe:	6a3b      	ldr	r3, [r7, #32]
 800b500:	6858      	ldr	r0, [r3, #4]
 800b502:	6a3b      	ldr	r3, [r7, #32]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	891a      	ldrh	r2, [r3, #8]
 800b508:	6a3b      	ldr	r3, [r7, #32]
 800b50a:	891b      	ldrh	r3, [r3, #8]
 800b50c:	1ad3      	subs	r3, r2, r3
 800b50e:	b29b      	uxth	r3, r3
 800b510:	2201      	movs	r2, #1
 800b512:	6939      	ldr	r1, [r7, #16]
 800b514:	f7fa fdc0 	bl	8006098 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b518:	6a3b      	ldr	r3, [r7, #32]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	4618      	mov	r0, r3
 800b520:	f7f9 f877 	bl	8004612 <lwip_htonl>
 800b524:	4603      	mov	r3, r0
 800b526:	3301      	adds	r3, #1
 800b528:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	1ad3      	subs	r3, r2, r3
 800b532:	2b00      	cmp	r3, #0
 800b534:	da02      	bge.n	800b53c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	68fa      	ldr	r2, [r7, #12]
 800b53a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b53c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b540:	2200      	movs	r2, #0
 800b542:	69b9      	ldr	r1, [r7, #24]
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f7ff fded 	bl	800b124 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	3304      	adds	r3, #4
 800b550:	69b9      	ldr	r1, [r7, #24]
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f7ff fe26 	bl	800b1a4 <tcp_output_control_segment>
 800b558:	4603      	mov	r3, r0
 800b55a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b55c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b560:	4618      	mov	r0, r3
 800b562:	372c      	adds	r7, #44	; 0x2c
 800b564:	46bd      	mov	sp, r7
 800b566:	bd90      	pop	{r4, r7, pc}
 800b568:	08011500 	.word	0x08011500
 800b56c:	08011cf8 	.word	0x08011cf8
 800b570:	08011554 	.word	0x08011554

0800b574 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b57c:	f7fa ff0c 	bl	8006398 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b580:	4b0a      	ldr	r3, [pc, #40]	; (800b5ac <tcpip_tcp_timer+0x38>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d103      	bne.n	800b590 <tcpip_tcp_timer+0x1c>
 800b588:	4b09      	ldr	r3, [pc, #36]	; (800b5b0 <tcpip_tcp_timer+0x3c>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d005      	beq.n	800b59c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b590:	2200      	movs	r2, #0
 800b592:	4908      	ldr	r1, [pc, #32]	; (800b5b4 <tcpip_tcp_timer+0x40>)
 800b594:	20fa      	movs	r0, #250	; 0xfa
 800b596:	f000 f8f3 	bl	800b780 <sys_timeout>
 800b59a:	e003      	b.n	800b5a4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b59c:	4b06      	ldr	r3, [pc, #24]	; (800b5b8 <tcpip_tcp_timer+0x44>)
 800b59e:	2200      	movs	r2, #0
 800b5a0:	601a      	str	r2, [r3, #0]
  }
}
 800b5a2:	bf00      	nop
 800b5a4:	bf00      	nop
 800b5a6:	3708      	adds	r7, #8
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	20008318 	.word	0x20008318
 800b5b0:	2000831c 	.word	0x2000831c
 800b5b4:	0800b575 	.word	0x0800b575
 800b5b8:	20008364 	.word	0x20008364

0800b5bc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b5c0:	4b0a      	ldr	r3, [pc, #40]	; (800b5ec <tcp_timer_needed+0x30>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d10f      	bne.n	800b5e8 <tcp_timer_needed+0x2c>
 800b5c8:	4b09      	ldr	r3, [pc, #36]	; (800b5f0 <tcp_timer_needed+0x34>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d103      	bne.n	800b5d8 <tcp_timer_needed+0x1c>
 800b5d0:	4b08      	ldr	r3, [pc, #32]	; (800b5f4 <tcp_timer_needed+0x38>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d007      	beq.n	800b5e8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b5d8:	4b04      	ldr	r3, [pc, #16]	; (800b5ec <tcp_timer_needed+0x30>)
 800b5da:	2201      	movs	r2, #1
 800b5dc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b5de:	2200      	movs	r2, #0
 800b5e0:	4905      	ldr	r1, [pc, #20]	; (800b5f8 <tcp_timer_needed+0x3c>)
 800b5e2:	20fa      	movs	r0, #250	; 0xfa
 800b5e4:	f000 f8cc 	bl	800b780 <sys_timeout>
  }
}
 800b5e8:	bf00      	nop
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	20008364 	.word	0x20008364
 800b5f0:	20008318 	.word	0x20008318
 800b5f4:	2000831c 	.word	0x2000831c
 800b5f8:	0800b575 	.word	0x0800b575

0800b5fc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b086      	sub	sp, #24
 800b600:	af00      	add	r7, sp, #0
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b608:	2006      	movs	r0, #6
 800b60a:	f7f9 fc65 	bl	8004ed8 <memp_malloc>
 800b60e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d109      	bne.n	800b62a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d151      	bne.n	800b6c0 <sys_timeout_abs+0xc4>
 800b61c:	4b2a      	ldr	r3, [pc, #168]	; (800b6c8 <sys_timeout_abs+0xcc>)
 800b61e:	22be      	movs	r2, #190	; 0xbe
 800b620:	492a      	ldr	r1, [pc, #168]	; (800b6cc <sys_timeout_abs+0xd0>)
 800b622:	482b      	ldr	r0, [pc, #172]	; (800b6d0 <sys_timeout_abs+0xd4>)
 800b624:	f003 f9d8 	bl	800e9d8 <iprintf>
    return;
 800b628:	e04a      	b.n	800b6c0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	2200      	movs	r2, #0
 800b62e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	68ba      	ldr	r2, [r7, #8]
 800b634:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	68fa      	ldr	r2, [r7, #12]
 800b640:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b642:	4b24      	ldr	r3, [pc, #144]	; (800b6d4 <sys_timeout_abs+0xd8>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d103      	bne.n	800b652 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b64a:	4a22      	ldr	r2, [pc, #136]	; (800b6d4 <sys_timeout_abs+0xd8>)
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	6013      	str	r3, [r2, #0]
    return;
 800b650:	e037      	b.n	800b6c2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	685a      	ldr	r2, [r3, #4]
 800b656:	4b1f      	ldr	r3, [pc, #124]	; (800b6d4 <sys_timeout_abs+0xd8>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	1ad3      	subs	r3, r2, r3
 800b65e:	0fdb      	lsrs	r3, r3, #31
 800b660:	f003 0301 	and.w	r3, r3, #1
 800b664:	b2db      	uxtb	r3, r3
 800b666:	2b00      	cmp	r3, #0
 800b668:	d007      	beq.n	800b67a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b66a:	4b1a      	ldr	r3, [pc, #104]	; (800b6d4 <sys_timeout_abs+0xd8>)
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b672:	4a18      	ldr	r2, [pc, #96]	; (800b6d4 <sys_timeout_abs+0xd8>)
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	6013      	str	r3, [r2, #0]
 800b678:	e023      	b.n	800b6c2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b67a:	4b16      	ldr	r3, [pc, #88]	; (800b6d4 <sys_timeout_abs+0xd8>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	617b      	str	r3, [r7, #20]
 800b680:	e01a      	b.n	800b6b8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00b      	beq.n	800b6a2 <sys_timeout_abs+0xa6>
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	685a      	ldr	r2, [r3, #4]
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	1ad3      	subs	r3, r2, r3
 800b696:	0fdb      	lsrs	r3, r3, #31
 800b698:	f003 0301 	and.w	r3, r3, #1
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d007      	beq.n	800b6b2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	693a      	ldr	r2, [r7, #16]
 800b6ae:	601a      	str	r2, [r3, #0]
        break;
 800b6b0:	e007      	b.n	800b6c2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	617b      	str	r3, [r7, #20]
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d1e1      	bne.n	800b682 <sys_timeout_abs+0x86>
 800b6be:	e000      	b.n	800b6c2 <sys_timeout_abs+0xc6>
    return;
 800b6c0:	bf00      	nop
      }
    }
  }
}
 800b6c2:	3718      	adds	r7, #24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	08011d1c 	.word	0x08011d1c
 800b6cc:	08011d50 	.word	0x08011d50
 800b6d0:	08011d90 	.word	0x08011d90
 800b6d4:	2000835c 	.word	0x2000835c

0800b6d8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b086      	sub	sp, #24
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	4798      	blx	r3

  now = sys_now();
 800b6ea:	f7f8 fd7d 	bl	80041e8 <sys_now>
 800b6ee:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	4b0f      	ldr	r3, [pc, #60]	; (800b734 <lwip_cyclic_timer+0x5c>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b6fc:	68fa      	ldr	r2, [r7, #12]
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	1ad3      	subs	r3, r2, r3
 800b702:	0fdb      	lsrs	r3, r3, #31
 800b704:	f003 0301 	and.w	r3, r3, #1
 800b708:	b2db      	uxtb	r3, r3
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d009      	beq.n	800b722 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	4413      	add	r3, r2
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	4907      	ldr	r1, [pc, #28]	; (800b738 <lwip_cyclic_timer+0x60>)
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7ff ff6e 	bl	800b5fc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b720:	e004      	b.n	800b72c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	4904      	ldr	r1, [pc, #16]	; (800b738 <lwip_cyclic_timer+0x60>)
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f7ff ff68 	bl	800b5fc <sys_timeout_abs>
}
 800b72c:	bf00      	nop
 800b72e:	3718      	adds	r7, #24
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	20008360 	.word	0x20008360
 800b738:	0800b6d9 	.word	0x0800b6d9

0800b73c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b742:	2301      	movs	r3, #1
 800b744:	607b      	str	r3, [r7, #4]
 800b746:	e00e      	b.n	800b766 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b748:	4a0b      	ldr	r2, [pc, #44]	; (800b778 <sys_timeouts_init+0x3c>)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	00db      	lsls	r3, r3, #3
 800b754:	4a08      	ldr	r2, [pc, #32]	; (800b778 <sys_timeouts_init+0x3c>)
 800b756:	4413      	add	r3, r2
 800b758:	461a      	mov	r2, r3
 800b75a:	4908      	ldr	r1, [pc, #32]	; (800b77c <sys_timeouts_init+0x40>)
 800b75c:	f000 f810 	bl	800b780 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	3301      	adds	r3, #1
 800b764:	607b      	str	r3, [r7, #4]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2b02      	cmp	r3, #2
 800b76a:	d9ed      	bls.n	800b748 <sys_timeouts_init+0xc>
  }
}
 800b76c:	bf00      	nop
 800b76e:	bf00      	nop
 800b770:	3708      	adds	r7, #8
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	08012900 	.word	0x08012900
 800b77c:	0800b6d9 	.word	0x0800b6d9

0800b780 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b086      	sub	sp, #24
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b792:	d306      	bcc.n	800b7a2 <sys_timeout+0x22>
 800b794:	4b0a      	ldr	r3, [pc, #40]	; (800b7c0 <sys_timeout+0x40>)
 800b796:	f240 1229 	movw	r2, #297	; 0x129
 800b79a:	490a      	ldr	r1, [pc, #40]	; (800b7c4 <sys_timeout+0x44>)
 800b79c:	480a      	ldr	r0, [pc, #40]	; (800b7c8 <sys_timeout+0x48>)
 800b79e:	f003 f91b 	bl	800e9d8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b7a2:	f7f8 fd21 	bl	80041e8 <sys_now>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	68b9      	ldr	r1, [r7, #8]
 800b7b2:	6978      	ldr	r0, [r7, #20]
 800b7b4:	f7ff ff22 	bl	800b5fc <sys_timeout_abs>
#endif
}
 800b7b8:	bf00      	nop
 800b7ba:	3718      	adds	r7, #24
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	08011d1c 	.word	0x08011d1c
 800b7c4:	08011db8 	.word	0x08011db8
 800b7c8:	08011d90 	.word	0x08011d90

0800b7cc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b7d2:	f7f8 fd09 	bl	80041e8 <sys_now>
 800b7d6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800b7d8:	4b1a      	ldr	r3, [pc, #104]	; (800b844 <sys_check_timeouts+0x78>)
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d001      	beq.n	800b7e6 <sys_check_timeouts+0x1a>
 800b7e2:	f7f9 ff25 	bl	8005630 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800b7e6:	4b18      	ldr	r3, [pc, #96]	; (800b848 <sys_check_timeouts+0x7c>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d022      	beq.n	800b838 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	1ad3      	subs	r3, r2, r3
 800b7fa:	0fdb      	lsrs	r3, r3, #31
 800b7fc:	f003 0301 	and.w	r3, r3, #1
 800b800:	b2db      	uxtb	r3, r3
 800b802:	2b00      	cmp	r3, #0
 800b804:	d11a      	bne.n	800b83c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a0f      	ldr	r2, [pc, #60]	; (800b848 <sys_check_timeouts+0x7c>)
 800b80c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	4a0b      	ldr	r2, [pc, #44]	; (800b84c <sys_check_timeouts+0x80>)
 800b820:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b822:	68b9      	ldr	r1, [r7, #8]
 800b824:	2006      	movs	r0, #6
 800b826:	f7f9 fbc7 	bl	8004fb8 <memp_free>
    if (handler != NULL) {
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d0d3      	beq.n	800b7d8 <sys_check_timeouts+0xc>
      handler(arg);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6838      	ldr	r0, [r7, #0]
 800b834:	4798      	blx	r3
  do {
 800b836:	e7cf      	b.n	800b7d8 <sys_check_timeouts+0xc>
      return;
 800b838:	bf00      	nop
 800b83a:	e000      	b.n	800b83e <sys_check_timeouts+0x72>
      return;
 800b83c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800b83e:	3710      	adds	r7, #16
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	20008309 	.word	0x20008309
 800b848:	2000835c 	.word	0x2000835c
 800b84c:	20008360 	.word	0x20008360

0800b850 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b854:	f003 f8d8 	bl	800ea08 <rand>
 800b858:	4603      	mov	r3, r0
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b860:	b29b      	uxth	r3, r3
 800b862:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b866:	b29a      	uxth	r2, r3
 800b868:	4b01      	ldr	r3, [pc, #4]	; (800b870 <udp_init+0x20>)
 800b86a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b86c:	bf00      	nop
 800b86e:	bd80      	pop	{r7, pc}
 800b870:	20000028 	.word	0x20000028

0800b874 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800b87a:	2300      	movs	r3, #0
 800b87c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b87e:	4b17      	ldr	r3, [pc, #92]	; (800b8dc <udp_new_port+0x68>)
 800b880:	881b      	ldrh	r3, [r3, #0]
 800b882:	1c5a      	adds	r2, r3, #1
 800b884:	b291      	uxth	r1, r2
 800b886:	4a15      	ldr	r2, [pc, #84]	; (800b8dc <udp_new_port+0x68>)
 800b888:	8011      	strh	r1, [r2, #0]
 800b88a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b88e:	4293      	cmp	r3, r2
 800b890:	d103      	bne.n	800b89a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b892:	4b12      	ldr	r3, [pc, #72]	; (800b8dc <udp_new_port+0x68>)
 800b894:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b898:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b89a:	4b11      	ldr	r3, [pc, #68]	; (800b8e0 <udp_new_port+0x6c>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	603b      	str	r3, [r7, #0]
 800b8a0:	e011      	b.n	800b8c6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	8a5a      	ldrh	r2, [r3, #18]
 800b8a6:	4b0d      	ldr	r3, [pc, #52]	; (800b8dc <udp_new_port+0x68>)
 800b8a8:	881b      	ldrh	r3, [r3, #0]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d108      	bne.n	800b8c0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b8ae:	88fb      	ldrh	r3, [r7, #6]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	80fb      	strh	r3, [r7, #6]
 800b8b4:	88fb      	ldrh	r3, [r7, #6]
 800b8b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8ba:	d3e0      	bcc.n	800b87e <udp_new_port+0xa>
        return 0;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	e007      	b.n	800b8d0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	603b      	str	r3, [r7, #0]
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1ea      	bne.n	800b8a2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800b8cc:	4b03      	ldr	r3, [pc, #12]	; (800b8dc <udp_new_port+0x68>)
 800b8ce:	881b      	ldrh	r3, [r3, #0]
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	370c      	adds	r7, #12
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr
 800b8dc:	20000028 	.word	0x20000028
 800b8e0:	20008368 	.word	0x20008368

0800b8e4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d105      	bne.n	800b904 <udp_input_local_match+0x20>
 800b8f8:	4b27      	ldr	r3, [pc, #156]	; (800b998 <udp_input_local_match+0xb4>)
 800b8fa:	2287      	movs	r2, #135	; 0x87
 800b8fc:	4927      	ldr	r1, [pc, #156]	; (800b99c <udp_input_local_match+0xb8>)
 800b8fe:	4828      	ldr	r0, [pc, #160]	; (800b9a0 <udp_input_local_match+0xbc>)
 800b900:	f003 f86a 	bl	800e9d8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d105      	bne.n	800b916 <udp_input_local_match+0x32>
 800b90a:	4b23      	ldr	r3, [pc, #140]	; (800b998 <udp_input_local_match+0xb4>)
 800b90c:	2288      	movs	r2, #136	; 0x88
 800b90e:	4925      	ldr	r1, [pc, #148]	; (800b9a4 <udp_input_local_match+0xc0>)
 800b910:	4823      	ldr	r0, [pc, #140]	; (800b9a0 <udp_input_local_match+0xbc>)
 800b912:	f003 f861 	bl	800e9d8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	7a1b      	ldrb	r3, [r3, #8]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00b      	beq.n	800b936 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	7a1a      	ldrb	r2, [r3, #8]
 800b922:	4b21      	ldr	r3, [pc, #132]	; (800b9a8 <udp_input_local_match+0xc4>)
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b92a:	3301      	adds	r3, #1
 800b92c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b92e:	429a      	cmp	r2, r3
 800b930:	d001      	beq.n	800b936 <udp_input_local_match+0x52>
    return 0;
 800b932:	2300      	movs	r3, #0
 800b934:	e02b      	b.n	800b98e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b936:	79fb      	ldrb	r3, [r7, #7]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d018      	beq.n	800b96e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d013      	beq.n	800b96a <udp_input_local_match+0x86>
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00f      	beq.n	800b96a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b94a:	4b17      	ldr	r3, [pc, #92]	; (800b9a8 <udp_input_local_match+0xc4>)
 800b94c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b952:	d00a      	beq.n	800b96a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	4b13      	ldr	r3, [pc, #76]	; (800b9a8 <udp_input_local_match+0xc4>)
 800b95a:	695b      	ldr	r3, [r3, #20]
 800b95c:	405a      	eors	r2, r3
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	3308      	adds	r3, #8
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b966:	2b00      	cmp	r3, #0
 800b968:	d110      	bne.n	800b98c <udp_input_local_match+0xa8>
          return 1;
 800b96a:	2301      	movs	r3, #1
 800b96c:	e00f      	b.n	800b98e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d009      	beq.n	800b988 <udp_input_local_match+0xa4>
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d005      	beq.n	800b988 <udp_input_local_match+0xa4>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681a      	ldr	r2, [r3, #0]
 800b980:	4b09      	ldr	r3, [pc, #36]	; (800b9a8 <udp_input_local_match+0xc4>)
 800b982:	695b      	ldr	r3, [r3, #20]
 800b984:	429a      	cmp	r2, r3
 800b986:	d101      	bne.n	800b98c <udp_input_local_match+0xa8>
        return 1;
 800b988:	2301      	movs	r3, #1
 800b98a:	e000      	b.n	800b98e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3710      	adds	r7, #16
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	08011e04 	.word	0x08011e04
 800b99c:	08011e34 	.word	0x08011e34
 800b9a0:	08011e58 	.word	0x08011e58
 800b9a4:	08011e80 	.word	0x08011e80
 800b9a8:	20004d9c 	.word	0x20004d9c

0800b9ac <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b9ac:	b590      	push	{r4, r7, lr}
 800b9ae:	b08d      	sub	sp, #52	; 0x34
 800b9b0:	af02      	add	r7, sp, #8
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d105      	bne.n	800b9cc <udp_input+0x20>
 800b9c0:	4b7c      	ldr	r3, [pc, #496]	; (800bbb4 <udp_input+0x208>)
 800b9c2:	22cf      	movs	r2, #207	; 0xcf
 800b9c4:	497c      	ldr	r1, [pc, #496]	; (800bbb8 <udp_input+0x20c>)
 800b9c6:	487d      	ldr	r0, [pc, #500]	; (800bbbc <udp_input+0x210>)
 800b9c8:	f003 f806 	bl	800e9d8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d105      	bne.n	800b9de <udp_input+0x32>
 800b9d2:	4b78      	ldr	r3, [pc, #480]	; (800bbb4 <udp_input+0x208>)
 800b9d4:	22d0      	movs	r2, #208	; 0xd0
 800b9d6:	497a      	ldr	r1, [pc, #488]	; (800bbc0 <udp_input+0x214>)
 800b9d8:	4878      	ldr	r0, [pc, #480]	; (800bbbc <udp_input+0x210>)
 800b9da:	f002 fffd 	bl	800e9d8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	895b      	ldrh	r3, [r3, #10]
 800b9e2:	2b07      	cmp	r3, #7
 800b9e4:	d803      	bhi.n	800b9ee <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7fa f95c 	bl	8005ca4 <pbuf_free>
    goto end;
 800b9ec:	e0de      	b.n	800bbac <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b9f4:	4b73      	ldr	r3, [pc, #460]	; (800bbc4 <udp_input+0x218>)
 800b9f6:	695b      	ldr	r3, [r3, #20]
 800b9f8:	4a72      	ldr	r2, [pc, #456]	; (800bbc4 <udp_input+0x218>)
 800b9fa:	6812      	ldr	r2, [r2, #0]
 800b9fc:	4611      	mov	r1, r2
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f001 ffa0 	bl	800d944 <ip4_addr_isbroadcast_u32>
 800ba04:	4603      	mov	r3, r0
 800ba06:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	881b      	ldrh	r3, [r3, #0]
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7f8 fdea 	bl	80045e8 <lwip_htons>
 800ba14:	4603      	mov	r3, r0
 800ba16:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	885b      	ldrh	r3, [r3, #2]
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7f8 fde2 	bl	80045e8 <lwip_htons>
 800ba24:	4603      	mov	r3, r0
 800ba26:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ba30:	2300      	movs	r3, #0
 800ba32:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba34:	4b64      	ldr	r3, [pc, #400]	; (800bbc8 <udp_input+0x21c>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	627b      	str	r3, [r7, #36]	; 0x24
 800ba3a:	e054      	b.n	800bae6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3e:	8a5b      	ldrh	r3, [r3, #18]
 800ba40:	89fa      	ldrh	r2, [r7, #14]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d14a      	bne.n	800badc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ba46:	7cfb      	ldrb	r3, [r7, #19]
 800ba48:	461a      	mov	r2, r3
 800ba4a:	6839      	ldr	r1, [r7, #0]
 800ba4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba4e:	f7ff ff49 	bl	800b8e4 <udp_input_local_match>
 800ba52:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d041      	beq.n	800badc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ba58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5a:	7c1b      	ldrb	r3, [r3, #16]
 800ba5c:	f003 0304 	and.w	r3, r3, #4
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d11d      	bne.n	800baa0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800ba64:	69fb      	ldr	r3, [r7, #28]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d102      	bne.n	800ba70 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800ba6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6c:	61fb      	str	r3, [r7, #28]
 800ba6e:	e017      	b.n	800baa0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ba70:	7cfb      	ldrb	r3, [r7, #19]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d014      	beq.n	800baa0 <udp_input+0xf4>
 800ba76:	4b53      	ldr	r3, [pc, #332]	; (800bbc4 <udp_input+0x218>)
 800ba78:	695b      	ldr	r3, [r3, #20]
 800ba7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba7e:	d10f      	bne.n	800baa0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ba80:	69fb      	ldr	r3, [r7, #28]
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	3304      	adds	r3, #4
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d008      	beq.n	800baa0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ba8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	3304      	adds	r3, #4
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d101      	bne.n	800baa0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800ba9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800baa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa2:	8a9b      	ldrh	r3, [r3, #20]
 800baa4:	8a3a      	ldrh	r2, [r7, #16]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d118      	bne.n	800badc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baac:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d005      	beq.n	800babe <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800bab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab4:	685a      	ldr	r2, [r3, #4]
 800bab6:	4b43      	ldr	r3, [pc, #268]	; (800bbc4 <udp_input+0x218>)
 800bab8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800baba:	429a      	cmp	r2, r3
 800babc:	d10e      	bne.n	800badc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800babe:	6a3b      	ldr	r3, [r7, #32]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d014      	beq.n	800baee <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800bac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac6:	68da      	ldr	r2, [r3, #12]
 800bac8:	6a3b      	ldr	r3, [r7, #32]
 800baca:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800bacc:	4b3e      	ldr	r3, [pc, #248]	; (800bbc8 <udp_input+0x21c>)
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800bad4:	4a3c      	ldr	r2, [pc, #240]	; (800bbc8 <udp_input+0x21c>)
 800bad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800bada:	e008      	b.n	800baee <udp_input+0x142>
      }
    }

    prev = pcb;
 800badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bade:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	627b      	str	r3, [r7, #36]	; 0x24
 800bae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1a7      	bne.n	800ba3c <udp_input+0x90>
 800baec:	e000      	b.n	800baf0 <udp_input+0x144>
        break;
 800baee:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800baf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d101      	bne.n	800bafa <udp_input+0x14e>
    pcb = uncon_pcb;
 800baf6:	69fb      	ldr	r3, [r7, #28]
 800baf8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800bafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d002      	beq.n	800bb06 <udp_input+0x15a>
    for_us = 1;
 800bb00:	2301      	movs	r3, #1
 800bb02:	76fb      	strb	r3, [r7, #27]
 800bb04:	e00a      	b.n	800bb1c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	3304      	adds	r3, #4
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	4b2d      	ldr	r3, [pc, #180]	; (800bbc4 <udp_input+0x218>)
 800bb0e:	695b      	ldr	r3, [r3, #20]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	bf0c      	ite	eq
 800bb14:	2301      	moveq	r3, #1
 800bb16:	2300      	movne	r3, #0
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800bb1c:	7efb      	ldrb	r3, [r7, #27]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d041      	beq.n	800bba6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800bb22:	2108      	movs	r1, #8
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f7fa f837 	bl	8005b98 <pbuf_remove_header>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d00a      	beq.n	800bb46 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800bb30:	4b20      	ldr	r3, [pc, #128]	; (800bbb4 <udp_input+0x208>)
 800bb32:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800bb36:	4925      	ldr	r1, [pc, #148]	; (800bbcc <udp_input+0x220>)
 800bb38:	4820      	ldr	r0, [pc, #128]	; (800bbbc <udp_input+0x210>)
 800bb3a:	f002 ff4d 	bl	800e9d8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f7fa f8b0 	bl	8005ca4 <pbuf_free>
      goto end;
 800bb44:	e032      	b.n	800bbac <udp_input+0x200>
    }

    if (pcb != NULL) {
 800bb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d012      	beq.n	800bb72 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4e:	699b      	ldr	r3, [r3, #24]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d00a      	beq.n	800bb6a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800bb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb56:	699c      	ldr	r4, [r3, #24]
 800bb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5a:	69d8      	ldr	r0, [r3, #28]
 800bb5c:	8a3b      	ldrh	r3, [r7, #16]
 800bb5e:	9300      	str	r3, [sp, #0]
 800bb60:	4b1b      	ldr	r3, [pc, #108]	; (800bbd0 <udp_input+0x224>)
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb66:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800bb68:	e021      	b.n	800bbae <udp_input+0x202>
        pbuf_free(p);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f7fa f89a 	bl	8005ca4 <pbuf_free>
        goto end;
 800bb70:	e01c      	b.n	800bbac <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800bb72:	7cfb      	ldrb	r3, [r7, #19]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d112      	bne.n	800bb9e <udp_input+0x1f2>
 800bb78:	4b12      	ldr	r3, [pc, #72]	; (800bbc4 <udp_input+0x218>)
 800bb7a:	695b      	ldr	r3, [r3, #20]
 800bb7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb80:	2be0      	cmp	r3, #224	; 0xe0
 800bb82:	d00c      	beq.n	800bb9e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800bb84:	4b0f      	ldr	r3, [pc, #60]	; (800bbc4 <udp_input+0x218>)
 800bb86:	899b      	ldrh	r3, [r3, #12]
 800bb88:	3308      	adds	r3, #8
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	b21b      	sxth	r3, r3
 800bb8e:	4619      	mov	r1, r3
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f7fa f874 	bl	8005c7e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800bb96:	2103      	movs	r1, #3
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f001 fbb3 	bl	800d304 <icmp_dest_unreach>
      pbuf_free(p);
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f7fa f880 	bl	8005ca4 <pbuf_free>
  return;
 800bba4:	e003      	b.n	800bbae <udp_input+0x202>
    pbuf_free(p);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f7fa f87c 	bl	8005ca4 <pbuf_free>
  return;
 800bbac:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800bbae:	372c      	adds	r7, #44	; 0x2c
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd90      	pop	{r4, r7, pc}
 800bbb4:	08011e04 	.word	0x08011e04
 800bbb8:	08011ea8 	.word	0x08011ea8
 800bbbc:	08011e58 	.word	0x08011e58
 800bbc0:	08011ec0 	.word	0x08011ec0
 800bbc4:	20004d9c 	.word	0x20004d9c
 800bbc8:	20008368 	.word	0x20008368
 800bbcc:	08011edc 	.word	0x08011edc
 800bbd0:	20004dac 	.word	0x20004dac

0800bbd4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d109      	bne.n	800bbf8 <udp_send+0x24>
 800bbe4:	4b11      	ldr	r3, [pc, #68]	; (800bc2c <udp_send+0x58>)
 800bbe6:	f240 12d5 	movw	r2, #469	; 0x1d5
 800bbea:	4911      	ldr	r1, [pc, #68]	; (800bc30 <udp_send+0x5c>)
 800bbec:	4811      	ldr	r0, [pc, #68]	; (800bc34 <udp_send+0x60>)
 800bbee:	f002 fef3 	bl	800e9d8 <iprintf>
 800bbf2:	f06f 030f 	mvn.w	r3, #15
 800bbf6:	e015      	b.n	800bc24 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d109      	bne.n	800bc12 <udp_send+0x3e>
 800bbfe:	4b0b      	ldr	r3, [pc, #44]	; (800bc2c <udp_send+0x58>)
 800bc00:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800bc04:	490c      	ldr	r1, [pc, #48]	; (800bc38 <udp_send+0x64>)
 800bc06:	480b      	ldr	r0, [pc, #44]	; (800bc34 <udp_send+0x60>)
 800bc08:	f002 fee6 	bl	800e9d8 <iprintf>
 800bc0c:	f06f 030f 	mvn.w	r3, #15
 800bc10:	e008      	b.n	800bc24 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	1d1a      	adds	r2, r3, #4
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	8a9b      	ldrh	r3, [r3, #20]
 800bc1a:	6839      	ldr	r1, [r7, #0]
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 f80d 	bl	800bc3c <udp_sendto>
 800bc22:	4603      	mov	r3, r0
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3708      	adds	r7, #8
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	08011e04 	.word	0x08011e04
 800bc30:	08011ef8 	.word	0x08011ef8
 800bc34:	08011e58 	.word	0x08011e58
 800bc38:	08011f10 	.word	0x08011f10

0800bc3c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b088      	sub	sp, #32
 800bc40:	af02      	add	r7, sp, #8
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	607a      	str	r2, [r7, #4]
 800bc48:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d109      	bne.n	800bc64 <udp_sendto+0x28>
 800bc50:	4b23      	ldr	r3, [pc, #140]	; (800bce0 <udp_sendto+0xa4>)
 800bc52:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bc56:	4923      	ldr	r1, [pc, #140]	; (800bce4 <udp_sendto+0xa8>)
 800bc58:	4823      	ldr	r0, [pc, #140]	; (800bce8 <udp_sendto+0xac>)
 800bc5a:	f002 febd 	bl	800e9d8 <iprintf>
 800bc5e:	f06f 030f 	mvn.w	r3, #15
 800bc62:	e038      	b.n	800bcd6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d109      	bne.n	800bc7e <udp_sendto+0x42>
 800bc6a:	4b1d      	ldr	r3, [pc, #116]	; (800bce0 <udp_sendto+0xa4>)
 800bc6c:	f240 2219 	movw	r2, #537	; 0x219
 800bc70:	491e      	ldr	r1, [pc, #120]	; (800bcec <udp_sendto+0xb0>)
 800bc72:	481d      	ldr	r0, [pc, #116]	; (800bce8 <udp_sendto+0xac>)
 800bc74:	f002 feb0 	bl	800e9d8 <iprintf>
 800bc78:	f06f 030f 	mvn.w	r3, #15
 800bc7c:	e02b      	b.n	800bcd6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d109      	bne.n	800bc98 <udp_sendto+0x5c>
 800bc84:	4b16      	ldr	r3, [pc, #88]	; (800bce0 <udp_sendto+0xa4>)
 800bc86:	f240 221a 	movw	r2, #538	; 0x21a
 800bc8a:	4919      	ldr	r1, [pc, #100]	; (800bcf0 <udp_sendto+0xb4>)
 800bc8c:	4816      	ldr	r0, [pc, #88]	; (800bce8 <udp_sendto+0xac>)
 800bc8e:	f002 fea3 	bl	800e9d8 <iprintf>
 800bc92:	f06f 030f 	mvn.w	r3, #15
 800bc96:	e01e      	b.n	800bcd6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	7a1b      	ldrb	r3, [r3, #8]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d006      	beq.n	800bcae <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	7a1b      	ldrb	r3, [r3, #8]
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7f9 fc9d 	bl	80055e4 <netif_get_by_index>
 800bcaa:	6178      	str	r0, [r7, #20]
 800bcac:	e003      	b.n	800bcb6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f001 fbb2 	bl	800d418 <ip4_route>
 800bcb4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d102      	bne.n	800bcc2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800bcbc:	f06f 0303 	mvn.w	r3, #3
 800bcc0:	e009      	b.n	800bcd6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800bcc2:	887a      	ldrh	r2, [r7, #2]
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	9300      	str	r3, [sp, #0]
 800bcc8:	4613      	mov	r3, r2
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	68b9      	ldr	r1, [r7, #8]
 800bcce:	68f8      	ldr	r0, [r7, #12]
 800bcd0:	f000 f810 	bl	800bcf4 <udp_sendto_if>
 800bcd4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3718      	adds	r7, #24
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	08011e04 	.word	0x08011e04
 800bce4:	08011f28 	.word	0x08011f28
 800bce8:	08011e58 	.word	0x08011e58
 800bcec:	08011f40 	.word	0x08011f40
 800bcf0:	08011f5c 	.word	0x08011f5c

0800bcf4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b088      	sub	sp, #32
 800bcf8:	af02      	add	r7, sp, #8
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	607a      	str	r2, [r7, #4]
 800bd00:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d109      	bne.n	800bd1c <udp_sendto_if+0x28>
 800bd08:	4b2e      	ldr	r3, [pc, #184]	; (800bdc4 <udp_sendto_if+0xd0>)
 800bd0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bd0e:	492e      	ldr	r1, [pc, #184]	; (800bdc8 <udp_sendto_if+0xd4>)
 800bd10:	482e      	ldr	r0, [pc, #184]	; (800bdcc <udp_sendto_if+0xd8>)
 800bd12:	f002 fe61 	bl	800e9d8 <iprintf>
 800bd16:	f06f 030f 	mvn.w	r3, #15
 800bd1a:	e04f      	b.n	800bdbc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d109      	bne.n	800bd36 <udp_sendto_if+0x42>
 800bd22:	4b28      	ldr	r3, [pc, #160]	; (800bdc4 <udp_sendto_if+0xd0>)
 800bd24:	f240 2281 	movw	r2, #641	; 0x281
 800bd28:	4929      	ldr	r1, [pc, #164]	; (800bdd0 <udp_sendto_if+0xdc>)
 800bd2a:	4828      	ldr	r0, [pc, #160]	; (800bdcc <udp_sendto_if+0xd8>)
 800bd2c:	f002 fe54 	bl	800e9d8 <iprintf>
 800bd30:	f06f 030f 	mvn.w	r3, #15
 800bd34:	e042      	b.n	800bdbc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d109      	bne.n	800bd50 <udp_sendto_if+0x5c>
 800bd3c:	4b21      	ldr	r3, [pc, #132]	; (800bdc4 <udp_sendto_if+0xd0>)
 800bd3e:	f240 2282 	movw	r2, #642	; 0x282
 800bd42:	4924      	ldr	r1, [pc, #144]	; (800bdd4 <udp_sendto_if+0xe0>)
 800bd44:	4821      	ldr	r0, [pc, #132]	; (800bdcc <udp_sendto_if+0xd8>)
 800bd46:	f002 fe47 	bl	800e9d8 <iprintf>
 800bd4a:	f06f 030f 	mvn.w	r3, #15
 800bd4e:	e035      	b.n	800bdbc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800bd50:	6a3b      	ldr	r3, [r7, #32]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d109      	bne.n	800bd6a <udp_sendto_if+0x76>
 800bd56:	4b1b      	ldr	r3, [pc, #108]	; (800bdc4 <udp_sendto_if+0xd0>)
 800bd58:	f240 2283 	movw	r2, #643	; 0x283
 800bd5c:	491e      	ldr	r1, [pc, #120]	; (800bdd8 <udp_sendto_if+0xe4>)
 800bd5e:	481b      	ldr	r0, [pc, #108]	; (800bdcc <udp_sendto_if+0xd8>)
 800bd60:	f002 fe3a 	bl	800e9d8 <iprintf>
 800bd64:	f06f 030f 	mvn.w	r3, #15
 800bd68:	e028      	b.n	800bdbc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d009      	beq.n	800bd84 <udp_sendto_if+0x90>
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d005      	beq.n	800bd84 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bd80:	2be0      	cmp	r3, #224	; 0xe0
 800bd82:	d103      	bne.n	800bd8c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800bd84:	6a3b      	ldr	r3, [r7, #32]
 800bd86:	3304      	adds	r3, #4
 800bd88:	617b      	str	r3, [r7, #20]
 800bd8a:	e00b      	b.n	800bda4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	6a3b      	ldr	r3, [r7, #32]
 800bd92:	3304      	adds	r3, #4
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d002      	beq.n	800bda0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800bd9a:	f06f 0303 	mvn.w	r3, #3
 800bd9e:	e00d      	b.n	800bdbc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800bda4:	887a      	ldrh	r2, [r7, #2]
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	9301      	str	r3, [sp, #4]
 800bdaa:	6a3b      	ldr	r3, [r7, #32]
 800bdac:	9300      	str	r3, [sp, #0]
 800bdae:	4613      	mov	r3, r2
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	68b9      	ldr	r1, [r7, #8]
 800bdb4:	68f8      	ldr	r0, [r7, #12]
 800bdb6:	f000 f811 	bl	800bddc <udp_sendto_if_src>
 800bdba:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3718      	adds	r7, #24
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	08011e04 	.word	0x08011e04
 800bdc8:	08011f78 	.word	0x08011f78
 800bdcc:	08011e58 	.word	0x08011e58
 800bdd0:	08011f94 	.word	0x08011f94
 800bdd4:	08011fb0 	.word	0x08011fb0
 800bdd8:	08011fd0 	.word	0x08011fd0

0800bddc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b08c      	sub	sp, #48	; 0x30
 800bde0:	af04      	add	r7, sp, #16
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
 800bde8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d109      	bne.n	800be04 <udp_sendto_if_src+0x28>
 800bdf0:	4b65      	ldr	r3, [pc, #404]	; (800bf88 <udp_sendto_if_src+0x1ac>)
 800bdf2:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bdf6:	4965      	ldr	r1, [pc, #404]	; (800bf8c <udp_sendto_if_src+0x1b0>)
 800bdf8:	4865      	ldr	r0, [pc, #404]	; (800bf90 <udp_sendto_if_src+0x1b4>)
 800bdfa:	f002 fded 	bl	800e9d8 <iprintf>
 800bdfe:	f06f 030f 	mvn.w	r3, #15
 800be02:	e0bc      	b.n	800bf7e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d109      	bne.n	800be1e <udp_sendto_if_src+0x42>
 800be0a:	4b5f      	ldr	r3, [pc, #380]	; (800bf88 <udp_sendto_if_src+0x1ac>)
 800be0c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800be10:	4960      	ldr	r1, [pc, #384]	; (800bf94 <udp_sendto_if_src+0x1b8>)
 800be12:	485f      	ldr	r0, [pc, #380]	; (800bf90 <udp_sendto_if_src+0x1b4>)
 800be14:	f002 fde0 	bl	800e9d8 <iprintf>
 800be18:	f06f 030f 	mvn.w	r3, #15
 800be1c:	e0af      	b.n	800bf7e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d109      	bne.n	800be38 <udp_sendto_if_src+0x5c>
 800be24:	4b58      	ldr	r3, [pc, #352]	; (800bf88 <udp_sendto_if_src+0x1ac>)
 800be26:	f240 22d3 	movw	r2, #723	; 0x2d3
 800be2a:	495b      	ldr	r1, [pc, #364]	; (800bf98 <udp_sendto_if_src+0x1bc>)
 800be2c:	4858      	ldr	r0, [pc, #352]	; (800bf90 <udp_sendto_if_src+0x1b4>)
 800be2e:	f002 fdd3 	bl	800e9d8 <iprintf>
 800be32:	f06f 030f 	mvn.w	r3, #15
 800be36:	e0a2      	b.n	800bf7e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800be38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d109      	bne.n	800be52 <udp_sendto_if_src+0x76>
 800be3e:	4b52      	ldr	r3, [pc, #328]	; (800bf88 <udp_sendto_if_src+0x1ac>)
 800be40:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800be44:	4955      	ldr	r1, [pc, #340]	; (800bf9c <udp_sendto_if_src+0x1c0>)
 800be46:	4852      	ldr	r0, [pc, #328]	; (800bf90 <udp_sendto_if_src+0x1b4>)
 800be48:	f002 fdc6 	bl	800e9d8 <iprintf>
 800be4c:	f06f 030f 	mvn.w	r3, #15
 800be50:	e095      	b.n	800bf7e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800be52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be54:	2b00      	cmp	r3, #0
 800be56:	d109      	bne.n	800be6c <udp_sendto_if_src+0x90>
 800be58:	4b4b      	ldr	r3, [pc, #300]	; (800bf88 <udp_sendto_if_src+0x1ac>)
 800be5a:	f240 22d5 	movw	r2, #725	; 0x2d5
 800be5e:	4950      	ldr	r1, [pc, #320]	; (800bfa0 <udp_sendto_if_src+0x1c4>)
 800be60:	484b      	ldr	r0, [pc, #300]	; (800bf90 <udp_sendto_if_src+0x1b4>)
 800be62:	f002 fdb9 	bl	800e9d8 <iprintf>
 800be66:	f06f 030f 	mvn.w	r3, #15
 800be6a:	e088      	b.n	800bf7e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	8a5b      	ldrh	r3, [r3, #18]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d10f      	bne.n	800be94 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800be74:	68f9      	ldr	r1, [r7, #12]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	8a5b      	ldrh	r3, [r3, #18]
 800be7a:	461a      	mov	r2, r3
 800be7c:	68f8      	ldr	r0, [r7, #12]
 800be7e:	f000 f893 	bl	800bfa8 <udp_bind>
 800be82:	4603      	mov	r3, r0
 800be84:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800be86:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d002      	beq.n	800be94 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800be8e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800be92:	e074      	b.n	800bf7e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	891b      	ldrh	r3, [r3, #8]
 800be98:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d902      	bls.n	800bea6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800bea0:	f04f 33ff 	mov.w	r3, #4294967295
 800bea4:	e06b      	b.n	800bf7e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800bea6:	2108      	movs	r1, #8
 800bea8:	68b8      	ldr	r0, [r7, #8]
 800beaa:	f7f9 fe65 	bl	8005b78 <pbuf_add_header>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d015      	beq.n	800bee0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800beb4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800beb8:	2108      	movs	r1, #8
 800beba:	2022      	movs	r0, #34	; 0x22
 800bebc:	f7f9 fc0e 	bl	80056dc <pbuf_alloc>
 800bec0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d102      	bne.n	800bece <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800bec8:	f04f 33ff 	mov.w	r3, #4294967295
 800becc:	e057      	b.n	800bf7e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	891b      	ldrh	r3, [r3, #8]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d006      	beq.n	800bee4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800bed6:	68b9      	ldr	r1, [r7, #8]
 800bed8:	69f8      	ldr	r0, [r7, #28]
 800beda:	f7f9 fffb 	bl	8005ed4 <pbuf_chain>
 800bede:	e001      	b.n	800bee4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	895b      	ldrh	r3, [r3, #10]
 800bee8:	2b07      	cmp	r3, #7
 800beea:	d806      	bhi.n	800befa <udp_sendto_if_src+0x11e>
 800beec:	4b26      	ldr	r3, [pc, #152]	; (800bf88 <udp_sendto_if_src+0x1ac>)
 800beee:	f240 320d 	movw	r2, #781	; 0x30d
 800bef2:	492c      	ldr	r1, [pc, #176]	; (800bfa4 <udp_sendto_if_src+0x1c8>)
 800bef4:	4826      	ldr	r0, [pc, #152]	; (800bf90 <udp_sendto_if_src+0x1b4>)
 800bef6:	f002 fd6f 	bl	800e9d8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	8a5b      	ldrh	r3, [r3, #18]
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7f8 fb6f 	bl	80045e8 <lwip_htons>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800bf12:	887b      	ldrh	r3, [r7, #2]
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7f8 fb67 	bl	80045e8 <lwip_htons>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	2200      	movs	r2, #0
 800bf26:	719a      	strb	r2, [r3, #6]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	891b      	ldrh	r3, [r3, #8]
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7f8 fb59 	bl	80045e8 <lwip_htons>
 800bf36:	4603      	mov	r3, r0
 800bf38:	461a      	mov	r2, r3
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800bf3e:	2311      	movs	r3, #17
 800bf40:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	7adb      	ldrb	r3, [r3, #11]
 800bf46:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	7a9b      	ldrb	r3, [r3, #10]
 800bf4c:	7cb9      	ldrb	r1, [r7, #18]
 800bf4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf50:	9202      	str	r2, [sp, #8]
 800bf52:	7cfa      	ldrb	r2, [r7, #19]
 800bf54:	9201      	str	r2, [sp, #4]
 800bf56:	9300      	str	r3, [sp, #0]
 800bf58:	460b      	mov	r3, r1
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf5e:	69f8      	ldr	r0, [r7, #28]
 800bf60:	f001 fc42 	bl	800d7e8 <ip4_output_if_src>
 800bf64:	4603      	mov	r3, r0
 800bf66:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800bf68:	69fa      	ldr	r2, [r7, #28]
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d004      	beq.n	800bf7a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800bf70:	69f8      	ldr	r0, [r7, #28]
 800bf72:	f7f9 fe97 	bl	8005ca4 <pbuf_free>
    q = NULL;
 800bf76:	2300      	movs	r3, #0
 800bf78:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800bf7a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3720      	adds	r7, #32
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	08011e04 	.word	0x08011e04
 800bf8c:	08011ff0 	.word	0x08011ff0
 800bf90:	08011e58 	.word	0x08011e58
 800bf94:	08012010 	.word	0x08012010
 800bf98:	08012030 	.word	0x08012030
 800bf9c:	08012054 	.word	0x08012054
 800bfa0:	08012078 	.word	0x08012078
 800bfa4:	0801209c 	.word	0x0801209c

0800bfa8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b086      	sub	sp, #24
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	4613      	mov	r3, r2
 800bfb4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d101      	bne.n	800bfc0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800bfbc:	4b39      	ldr	r3, [pc, #228]	; (800c0a4 <udp_bind+0xfc>)
 800bfbe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d109      	bne.n	800bfda <udp_bind+0x32>
 800bfc6:	4b38      	ldr	r3, [pc, #224]	; (800c0a8 <udp_bind+0x100>)
 800bfc8:	f240 32b7 	movw	r2, #951	; 0x3b7
 800bfcc:	4937      	ldr	r1, [pc, #220]	; (800c0ac <udp_bind+0x104>)
 800bfce:	4838      	ldr	r0, [pc, #224]	; (800c0b0 <udp_bind+0x108>)
 800bfd0:	f002 fd02 	bl	800e9d8 <iprintf>
 800bfd4:	f06f 030f 	mvn.w	r3, #15
 800bfd8:	e060      	b.n	800c09c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bfde:	4b35      	ldr	r3, [pc, #212]	; (800c0b4 <udp_bind+0x10c>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	617b      	str	r3, [r7, #20]
 800bfe4:	e009      	b.n	800bffa <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800bfe6:	68fa      	ldr	r2, [r7, #12]
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d102      	bne.n	800bff4 <udp_bind+0x4c>
      rebind = 1;
 800bfee:	2301      	movs	r3, #1
 800bff0:	74fb      	strb	r3, [r7, #19]
      break;
 800bff2:	e005      	b.n	800c000 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	617b      	str	r3, [r7, #20]
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d1f2      	bne.n	800bfe6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c000:	88fb      	ldrh	r3, [r7, #6]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d109      	bne.n	800c01a <udp_bind+0x72>
    port = udp_new_port();
 800c006:	f7ff fc35 	bl	800b874 <udp_new_port>
 800c00a:	4603      	mov	r3, r0
 800c00c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c00e:	88fb      	ldrh	r3, [r7, #6]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d12c      	bne.n	800c06e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c014:	f06f 0307 	mvn.w	r3, #7
 800c018:	e040      	b.n	800c09c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c01a:	4b26      	ldr	r3, [pc, #152]	; (800c0b4 <udp_bind+0x10c>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	617b      	str	r3, [r7, #20]
 800c020:	e022      	b.n	800c068 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c022:	68fa      	ldr	r2, [r7, #12]
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	429a      	cmp	r2, r3
 800c028:	d01b      	beq.n	800c062 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	8a5b      	ldrh	r3, [r3, #18]
 800c02e:	88fa      	ldrh	r2, [r7, #6]
 800c030:	429a      	cmp	r2, r3
 800c032:	d116      	bne.n	800c062 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	681a      	ldr	r2, [r3, #0]
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d00d      	beq.n	800c05c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d00a      	beq.n	800c05c <udp_bind+0xb4>
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d006      	beq.n	800c05c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c04e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c050:	2b00      	cmp	r3, #0
 800c052:	d003      	beq.n	800c05c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d102      	bne.n	800c062 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c05c:	f06f 0307 	mvn.w	r3, #7
 800c060:	e01c      	b.n	800c09c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	617b      	str	r3, [r7, #20]
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d1d9      	bne.n	800c022 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d002      	beq.n	800c07a <udp_bind+0xd2>
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	e000      	b.n	800c07c <udp_bind+0xd4>
 800c07a:	2300      	movs	r3, #0
 800c07c:	68fa      	ldr	r2, [r7, #12]
 800c07e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	88fa      	ldrh	r2, [r7, #6]
 800c084:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c086:	7cfb      	ldrb	r3, [r7, #19]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d106      	bne.n	800c09a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c08c:	4b09      	ldr	r3, [pc, #36]	; (800c0b4 <udp_bind+0x10c>)
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c094:	4a07      	ldr	r2, [pc, #28]	; (800c0b4 <udp_bind+0x10c>)
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3718      	adds	r7, #24
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	08012918 	.word	0x08012918
 800c0a8:	08011e04 	.word	0x08011e04
 800c0ac:	080120cc 	.word	0x080120cc
 800c0b0:	08011e58 	.word	0x08011e58
 800c0b4:	20008368 	.word	0x20008368

0800c0b8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b086      	sub	sp, #24
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d109      	bne.n	800c0e0 <udp_connect+0x28>
 800c0cc:	4b2c      	ldr	r3, [pc, #176]	; (800c180 <udp_connect+0xc8>)
 800c0ce:	f240 4235 	movw	r2, #1077	; 0x435
 800c0d2:	492c      	ldr	r1, [pc, #176]	; (800c184 <udp_connect+0xcc>)
 800c0d4:	482c      	ldr	r0, [pc, #176]	; (800c188 <udp_connect+0xd0>)
 800c0d6:	f002 fc7f 	bl	800e9d8 <iprintf>
 800c0da:	f06f 030f 	mvn.w	r3, #15
 800c0de:	e04b      	b.n	800c178 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d109      	bne.n	800c0fa <udp_connect+0x42>
 800c0e6:	4b26      	ldr	r3, [pc, #152]	; (800c180 <udp_connect+0xc8>)
 800c0e8:	f240 4236 	movw	r2, #1078	; 0x436
 800c0ec:	4927      	ldr	r1, [pc, #156]	; (800c18c <udp_connect+0xd4>)
 800c0ee:	4826      	ldr	r0, [pc, #152]	; (800c188 <udp_connect+0xd0>)
 800c0f0:	f002 fc72 	bl	800e9d8 <iprintf>
 800c0f4:	f06f 030f 	mvn.w	r3, #15
 800c0f8:	e03e      	b.n	800c178 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	8a5b      	ldrh	r3, [r3, #18]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d10f      	bne.n	800c122 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c102:	68f9      	ldr	r1, [r7, #12]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	8a5b      	ldrh	r3, [r3, #18]
 800c108:	461a      	mov	r2, r3
 800c10a:	68f8      	ldr	r0, [r7, #12]
 800c10c:	f7ff ff4c 	bl	800bfa8 <udp_bind>
 800c110:	4603      	mov	r3, r0
 800c112:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c114:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d002      	beq.n	800c122 <udp_connect+0x6a>
      return err;
 800c11c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c120:	e02a      	b.n	800c178 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d002      	beq.n	800c12e <udp_connect+0x76>
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	e000      	b.n	800c130 <udp_connect+0x78>
 800c12e:	2300      	movs	r3, #0
 800c130:	68fa      	ldr	r2, [r7, #12]
 800c132:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	88fa      	ldrh	r2, [r7, #6]
 800c138:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	7c1b      	ldrb	r3, [r3, #16]
 800c13e:	f043 0304 	orr.w	r3, r3, #4
 800c142:	b2da      	uxtb	r2, r3
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c148:	4b11      	ldr	r3, [pc, #68]	; (800c190 <udp_connect+0xd8>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	617b      	str	r3, [r7, #20]
 800c14e:	e008      	b.n	800c162 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800c150:	68fa      	ldr	r2, [r7, #12]
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	429a      	cmp	r2, r3
 800c156:	d101      	bne.n	800c15c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800c158:	2300      	movs	r3, #0
 800c15a:	e00d      	b.n	800c178 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	617b      	str	r3, [r7, #20]
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1f3      	bne.n	800c150 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800c168:	4b09      	ldr	r3, [pc, #36]	; (800c190 <udp_connect+0xd8>)
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800c170:	4a07      	ldr	r2, [pc, #28]	; (800c190 <udp_connect+0xd8>)
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3718      	adds	r7, #24
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}
 800c180:	08011e04 	.word	0x08011e04
 800c184:	080120e4 	.word	0x080120e4
 800c188:	08011e58 	.word	0x08011e58
 800c18c:	08012100 	.word	0x08012100
 800c190:	20008368 	.word	0x20008368

0800c194 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d107      	bne.n	800c1b6 <udp_recv+0x22>
 800c1a6:	4b08      	ldr	r3, [pc, #32]	; (800c1c8 <udp_recv+0x34>)
 800c1a8:	f240 428a 	movw	r2, #1162	; 0x48a
 800c1ac:	4907      	ldr	r1, [pc, #28]	; (800c1cc <udp_recv+0x38>)
 800c1ae:	4808      	ldr	r0, [pc, #32]	; (800c1d0 <udp_recv+0x3c>)
 800c1b0:	f002 fc12 	bl	800e9d8 <iprintf>
 800c1b4:	e005      	b.n	800c1c2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	68ba      	ldr	r2, [r7, #8]
 800c1ba:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	61da      	str	r2, [r3, #28]
}
 800c1c2:	3710      	adds	r7, #16
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}
 800c1c8:	08011e04 	.word	0x08011e04
 800c1cc:	08012138 	.word	0x08012138
 800c1d0:	08011e58 	.word	0x08011e58

0800c1d4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c1da:	2000      	movs	r0, #0
 800c1dc:	f7f8 fe7c 	bl	8004ed8 <memp_malloc>
 800c1e0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d007      	beq.n	800c1f8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c1e8:	2220      	movs	r2, #32
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f002 fbeb 	bl	800e9c8 <memset>
    pcb->ttl = UDP_TTL;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	22ff      	movs	r2, #255	; 0xff
 800c1f6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c1f8:	687b      	ldr	r3, [r7, #4]
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
	...

0800c204 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c204:	b480      	push	{r7}
 800c206:	b085      	sub	sp, #20
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d01e      	beq.n	800c252 <udp_netif_ip_addr_changed+0x4e>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d01a      	beq.n	800c252 <udp_netif_ip_addr_changed+0x4e>
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d017      	beq.n	800c252 <udp_netif_ip_addr_changed+0x4e>
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d013      	beq.n	800c252 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c22a:	4b0d      	ldr	r3, [pc, #52]	; (800c260 <udp_netif_ip_addr_changed+0x5c>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	60fb      	str	r3, [r7, #12]
 800c230:	e00c      	b.n	800c24c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d103      	bne.n	800c246 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	60fb      	str	r3, [r7, #12]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d1ef      	bne.n	800c232 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c252:	bf00      	nop
 800c254:	3714      	adds	r7, #20
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr
 800c25e:	bf00      	nop
 800c260:	20008368 	.word	0x20008368

0800c264 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c26c:	4915      	ldr	r1, [pc, #84]	; (800c2c4 <etharp_free_entry+0x60>)
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	4613      	mov	r3, r2
 800c272:	005b      	lsls	r3, r3, #1
 800c274:	4413      	add	r3, r2
 800c276:	00db      	lsls	r3, r3, #3
 800c278:	440b      	add	r3, r1
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d013      	beq.n	800c2a8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c280:	4910      	ldr	r1, [pc, #64]	; (800c2c4 <etharp_free_entry+0x60>)
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	4613      	mov	r3, r2
 800c286:	005b      	lsls	r3, r3, #1
 800c288:	4413      	add	r3, r2
 800c28a:	00db      	lsls	r3, r3, #3
 800c28c:	440b      	add	r3, r1
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4618      	mov	r0, r3
 800c292:	f7f9 fd07 	bl	8005ca4 <pbuf_free>
    arp_table[i].q = NULL;
 800c296:	490b      	ldr	r1, [pc, #44]	; (800c2c4 <etharp_free_entry+0x60>)
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	4613      	mov	r3, r2
 800c29c:	005b      	lsls	r3, r3, #1
 800c29e:	4413      	add	r3, r2
 800c2a0:	00db      	lsls	r3, r3, #3
 800c2a2:	440b      	add	r3, r1
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c2a8:	4906      	ldr	r1, [pc, #24]	; (800c2c4 <etharp_free_entry+0x60>)
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	4613      	mov	r3, r2
 800c2ae:	005b      	lsls	r3, r3, #1
 800c2b0:	4413      	add	r3, r2
 800c2b2:	00db      	lsls	r3, r3, #3
 800c2b4:	440b      	add	r3, r1
 800c2b6:	3314      	adds	r3, #20
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c2bc:	bf00      	nop
 800c2be:	3708      	adds	r7, #8
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}
 800c2c4:	2000836c 	.word	0x2000836c

0800c2c8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	607b      	str	r3, [r7, #4]
 800c2d2:	e096      	b.n	800c402 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c2d4:	494f      	ldr	r1, [pc, #316]	; (800c414 <etharp_tmr+0x14c>)
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	4613      	mov	r3, r2
 800c2da:	005b      	lsls	r3, r3, #1
 800c2dc:	4413      	add	r3, r2
 800c2de:	00db      	lsls	r3, r3, #3
 800c2e0:	440b      	add	r3, r1
 800c2e2:	3314      	adds	r3, #20
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c2e8:	78fb      	ldrb	r3, [r7, #3]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	f000 8086 	beq.w	800c3fc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c2f0:	4948      	ldr	r1, [pc, #288]	; (800c414 <etharp_tmr+0x14c>)
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	4613      	mov	r3, r2
 800c2f6:	005b      	lsls	r3, r3, #1
 800c2f8:	4413      	add	r3, r2
 800c2fa:	00db      	lsls	r3, r3, #3
 800c2fc:	440b      	add	r3, r1
 800c2fe:	3312      	adds	r3, #18
 800c300:	881b      	ldrh	r3, [r3, #0]
 800c302:	3301      	adds	r3, #1
 800c304:	b298      	uxth	r0, r3
 800c306:	4943      	ldr	r1, [pc, #268]	; (800c414 <etharp_tmr+0x14c>)
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	4613      	mov	r3, r2
 800c30c:	005b      	lsls	r3, r3, #1
 800c30e:	4413      	add	r3, r2
 800c310:	00db      	lsls	r3, r3, #3
 800c312:	440b      	add	r3, r1
 800c314:	3312      	adds	r3, #18
 800c316:	4602      	mov	r2, r0
 800c318:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c31a:	493e      	ldr	r1, [pc, #248]	; (800c414 <etharp_tmr+0x14c>)
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	4613      	mov	r3, r2
 800c320:	005b      	lsls	r3, r3, #1
 800c322:	4413      	add	r3, r2
 800c324:	00db      	lsls	r3, r3, #3
 800c326:	440b      	add	r3, r1
 800c328:	3312      	adds	r3, #18
 800c32a:	881b      	ldrh	r3, [r3, #0]
 800c32c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c330:	d215      	bcs.n	800c35e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c332:	4938      	ldr	r1, [pc, #224]	; (800c414 <etharp_tmr+0x14c>)
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	4613      	mov	r3, r2
 800c338:	005b      	lsls	r3, r3, #1
 800c33a:	4413      	add	r3, r2
 800c33c:	00db      	lsls	r3, r3, #3
 800c33e:	440b      	add	r3, r1
 800c340:	3314      	adds	r3, #20
 800c342:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c344:	2b01      	cmp	r3, #1
 800c346:	d10e      	bne.n	800c366 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c348:	4932      	ldr	r1, [pc, #200]	; (800c414 <etharp_tmr+0x14c>)
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	4613      	mov	r3, r2
 800c34e:	005b      	lsls	r3, r3, #1
 800c350:	4413      	add	r3, r2
 800c352:	00db      	lsls	r3, r3, #3
 800c354:	440b      	add	r3, r1
 800c356:	3312      	adds	r3, #18
 800c358:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c35a:	2b04      	cmp	r3, #4
 800c35c:	d903      	bls.n	800c366 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f7ff ff80 	bl	800c264 <etharp_free_entry>
 800c364:	e04a      	b.n	800c3fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c366:	492b      	ldr	r1, [pc, #172]	; (800c414 <etharp_tmr+0x14c>)
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	4613      	mov	r3, r2
 800c36c:	005b      	lsls	r3, r3, #1
 800c36e:	4413      	add	r3, r2
 800c370:	00db      	lsls	r3, r3, #3
 800c372:	440b      	add	r3, r1
 800c374:	3314      	adds	r3, #20
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	2b03      	cmp	r3, #3
 800c37a:	d10a      	bne.n	800c392 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c37c:	4925      	ldr	r1, [pc, #148]	; (800c414 <etharp_tmr+0x14c>)
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	4613      	mov	r3, r2
 800c382:	005b      	lsls	r3, r3, #1
 800c384:	4413      	add	r3, r2
 800c386:	00db      	lsls	r3, r3, #3
 800c388:	440b      	add	r3, r1
 800c38a:	3314      	adds	r3, #20
 800c38c:	2204      	movs	r2, #4
 800c38e:	701a      	strb	r2, [r3, #0]
 800c390:	e034      	b.n	800c3fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c392:	4920      	ldr	r1, [pc, #128]	; (800c414 <etharp_tmr+0x14c>)
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	4613      	mov	r3, r2
 800c398:	005b      	lsls	r3, r3, #1
 800c39a:	4413      	add	r3, r2
 800c39c:	00db      	lsls	r3, r3, #3
 800c39e:	440b      	add	r3, r1
 800c3a0:	3314      	adds	r3, #20
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	2b04      	cmp	r3, #4
 800c3a6:	d10a      	bne.n	800c3be <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c3a8:	491a      	ldr	r1, [pc, #104]	; (800c414 <etharp_tmr+0x14c>)
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	4613      	mov	r3, r2
 800c3ae:	005b      	lsls	r3, r3, #1
 800c3b0:	4413      	add	r3, r2
 800c3b2:	00db      	lsls	r3, r3, #3
 800c3b4:	440b      	add	r3, r1
 800c3b6:	3314      	adds	r3, #20
 800c3b8:	2202      	movs	r2, #2
 800c3ba:	701a      	strb	r2, [r3, #0]
 800c3bc:	e01e      	b.n	800c3fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c3be:	4915      	ldr	r1, [pc, #84]	; (800c414 <etharp_tmr+0x14c>)
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	4613      	mov	r3, r2
 800c3c4:	005b      	lsls	r3, r3, #1
 800c3c6:	4413      	add	r3, r2
 800c3c8:	00db      	lsls	r3, r3, #3
 800c3ca:	440b      	add	r3, r1
 800c3cc:	3314      	adds	r3, #20
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d113      	bne.n	800c3fc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c3d4:	490f      	ldr	r1, [pc, #60]	; (800c414 <etharp_tmr+0x14c>)
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	4613      	mov	r3, r2
 800c3da:	005b      	lsls	r3, r3, #1
 800c3dc:	4413      	add	r3, r2
 800c3de:	00db      	lsls	r3, r3, #3
 800c3e0:	440b      	add	r3, r1
 800c3e2:	3308      	adds	r3, #8
 800c3e4:	6818      	ldr	r0, [r3, #0]
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	4613      	mov	r3, r2
 800c3ea:	005b      	lsls	r3, r3, #1
 800c3ec:	4413      	add	r3, r2
 800c3ee:	00db      	lsls	r3, r3, #3
 800c3f0:	4a08      	ldr	r2, [pc, #32]	; (800c414 <etharp_tmr+0x14c>)
 800c3f2:	4413      	add	r3, r2
 800c3f4:	3304      	adds	r3, #4
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	f000 fe6e 	bl	800d0d8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	3301      	adds	r3, #1
 800c400:	607b      	str	r3, [r7, #4]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2b09      	cmp	r3, #9
 800c406:	f77f af65 	ble.w	800c2d4 <etharp_tmr+0xc>
      }
    }
  }
}
 800c40a:	bf00      	nop
 800c40c:	bf00      	nop
 800c40e:	3708      	adds	r7, #8
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	2000836c 	.word	0x2000836c

0800c418 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b08a      	sub	sp, #40	; 0x28
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	460b      	mov	r3, r1
 800c422:	607a      	str	r2, [r7, #4]
 800c424:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c426:	230a      	movs	r3, #10
 800c428:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c42a:	230a      	movs	r3, #10
 800c42c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c42e:	230a      	movs	r3, #10
 800c430:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c432:	2300      	movs	r3, #0
 800c434:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c436:	230a      	movs	r3, #10
 800c438:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c43a:	2300      	movs	r3, #0
 800c43c:	83bb      	strh	r3, [r7, #28]
 800c43e:	2300      	movs	r3, #0
 800c440:	837b      	strh	r3, [r7, #26]
 800c442:	2300      	movs	r3, #0
 800c444:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c446:	2300      	movs	r3, #0
 800c448:	843b      	strh	r3, [r7, #32]
 800c44a:	e0ae      	b.n	800c5aa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c44c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c450:	49a6      	ldr	r1, [pc, #664]	; (800c6ec <etharp_find_entry+0x2d4>)
 800c452:	4613      	mov	r3, r2
 800c454:	005b      	lsls	r3, r3, #1
 800c456:	4413      	add	r3, r2
 800c458:	00db      	lsls	r3, r3, #3
 800c45a:	440b      	add	r3, r1
 800c45c:	3314      	adds	r3, #20
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c462:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c466:	2b0a      	cmp	r3, #10
 800c468:	d105      	bne.n	800c476 <etharp_find_entry+0x5e>
 800c46a:	7dfb      	ldrb	r3, [r7, #23]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d102      	bne.n	800c476 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c470:	8c3b      	ldrh	r3, [r7, #32]
 800c472:	847b      	strh	r3, [r7, #34]	; 0x22
 800c474:	e095      	b.n	800c5a2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c476:	7dfb      	ldrb	r3, [r7, #23]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	f000 8092 	beq.w	800c5a2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c47e:	7dfb      	ldrb	r3, [r7, #23]
 800c480:	2b01      	cmp	r3, #1
 800c482:	d009      	beq.n	800c498 <etharp_find_entry+0x80>
 800c484:	7dfb      	ldrb	r3, [r7, #23]
 800c486:	2b01      	cmp	r3, #1
 800c488:	d806      	bhi.n	800c498 <etharp_find_entry+0x80>
 800c48a:	4b99      	ldr	r3, [pc, #612]	; (800c6f0 <etharp_find_entry+0x2d8>)
 800c48c:	f240 1223 	movw	r2, #291	; 0x123
 800c490:	4998      	ldr	r1, [pc, #608]	; (800c6f4 <etharp_find_entry+0x2dc>)
 800c492:	4899      	ldr	r0, [pc, #612]	; (800c6f8 <etharp_find_entry+0x2e0>)
 800c494:	f002 faa0 	bl	800e9d8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d020      	beq.n	800c4e0 <etharp_find_entry+0xc8>
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	6819      	ldr	r1, [r3, #0]
 800c4a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c4a6:	4891      	ldr	r0, [pc, #580]	; (800c6ec <etharp_find_entry+0x2d4>)
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	005b      	lsls	r3, r3, #1
 800c4ac:	4413      	add	r3, r2
 800c4ae:	00db      	lsls	r3, r3, #3
 800c4b0:	4403      	add	r3, r0
 800c4b2:	3304      	adds	r3, #4
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4299      	cmp	r1, r3
 800c4b8:	d112      	bne.n	800c4e0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00c      	beq.n	800c4da <etharp_find_entry+0xc2>
 800c4c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c4c4:	4989      	ldr	r1, [pc, #548]	; (800c6ec <etharp_find_entry+0x2d4>)
 800c4c6:	4613      	mov	r3, r2
 800c4c8:	005b      	lsls	r3, r3, #1
 800c4ca:	4413      	add	r3, r2
 800c4cc:	00db      	lsls	r3, r3, #3
 800c4ce:	440b      	add	r3, r1
 800c4d0:	3308      	adds	r3, #8
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d102      	bne.n	800c4e0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c4da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c4de:	e100      	b.n	800c6e2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c4e0:	7dfb      	ldrb	r3, [r7, #23]
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	d140      	bne.n	800c568 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c4e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c4ea:	4980      	ldr	r1, [pc, #512]	; (800c6ec <etharp_find_entry+0x2d4>)
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	005b      	lsls	r3, r3, #1
 800c4f0:	4413      	add	r3, r2
 800c4f2:	00db      	lsls	r3, r3, #3
 800c4f4:	440b      	add	r3, r1
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d01a      	beq.n	800c532 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c4fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c500:	497a      	ldr	r1, [pc, #488]	; (800c6ec <etharp_find_entry+0x2d4>)
 800c502:	4613      	mov	r3, r2
 800c504:	005b      	lsls	r3, r3, #1
 800c506:	4413      	add	r3, r2
 800c508:	00db      	lsls	r3, r3, #3
 800c50a:	440b      	add	r3, r1
 800c50c:	3312      	adds	r3, #18
 800c50e:	881b      	ldrh	r3, [r3, #0]
 800c510:	8bba      	ldrh	r2, [r7, #28]
 800c512:	429a      	cmp	r2, r3
 800c514:	d845      	bhi.n	800c5a2 <etharp_find_entry+0x18a>
            old_queue = i;
 800c516:	8c3b      	ldrh	r3, [r7, #32]
 800c518:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c51a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c51e:	4973      	ldr	r1, [pc, #460]	; (800c6ec <etharp_find_entry+0x2d4>)
 800c520:	4613      	mov	r3, r2
 800c522:	005b      	lsls	r3, r3, #1
 800c524:	4413      	add	r3, r2
 800c526:	00db      	lsls	r3, r3, #3
 800c528:	440b      	add	r3, r1
 800c52a:	3312      	adds	r3, #18
 800c52c:	881b      	ldrh	r3, [r3, #0]
 800c52e:	83bb      	strh	r3, [r7, #28]
 800c530:	e037      	b.n	800c5a2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c532:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c536:	496d      	ldr	r1, [pc, #436]	; (800c6ec <etharp_find_entry+0x2d4>)
 800c538:	4613      	mov	r3, r2
 800c53a:	005b      	lsls	r3, r3, #1
 800c53c:	4413      	add	r3, r2
 800c53e:	00db      	lsls	r3, r3, #3
 800c540:	440b      	add	r3, r1
 800c542:	3312      	adds	r3, #18
 800c544:	881b      	ldrh	r3, [r3, #0]
 800c546:	8b7a      	ldrh	r2, [r7, #26]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d82a      	bhi.n	800c5a2 <etharp_find_entry+0x18a>
            old_pending = i;
 800c54c:	8c3b      	ldrh	r3, [r7, #32]
 800c54e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c550:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c554:	4965      	ldr	r1, [pc, #404]	; (800c6ec <etharp_find_entry+0x2d4>)
 800c556:	4613      	mov	r3, r2
 800c558:	005b      	lsls	r3, r3, #1
 800c55a:	4413      	add	r3, r2
 800c55c:	00db      	lsls	r3, r3, #3
 800c55e:	440b      	add	r3, r1
 800c560:	3312      	adds	r3, #18
 800c562:	881b      	ldrh	r3, [r3, #0]
 800c564:	837b      	strh	r3, [r7, #26]
 800c566:	e01c      	b.n	800c5a2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c568:	7dfb      	ldrb	r3, [r7, #23]
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d919      	bls.n	800c5a2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c56e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c572:	495e      	ldr	r1, [pc, #376]	; (800c6ec <etharp_find_entry+0x2d4>)
 800c574:	4613      	mov	r3, r2
 800c576:	005b      	lsls	r3, r3, #1
 800c578:	4413      	add	r3, r2
 800c57a:	00db      	lsls	r3, r3, #3
 800c57c:	440b      	add	r3, r1
 800c57e:	3312      	adds	r3, #18
 800c580:	881b      	ldrh	r3, [r3, #0]
 800c582:	8b3a      	ldrh	r2, [r7, #24]
 800c584:	429a      	cmp	r2, r3
 800c586:	d80c      	bhi.n	800c5a2 <etharp_find_entry+0x18a>
            old_stable = i;
 800c588:	8c3b      	ldrh	r3, [r7, #32]
 800c58a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c58c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c590:	4956      	ldr	r1, [pc, #344]	; (800c6ec <etharp_find_entry+0x2d4>)
 800c592:	4613      	mov	r3, r2
 800c594:	005b      	lsls	r3, r3, #1
 800c596:	4413      	add	r3, r2
 800c598:	00db      	lsls	r3, r3, #3
 800c59a:	440b      	add	r3, r1
 800c59c:	3312      	adds	r3, #18
 800c59e:	881b      	ldrh	r3, [r3, #0]
 800c5a0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c5a2:	8c3b      	ldrh	r3, [r7, #32]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	843b      	strh	r3, [r7, #32]
 800c5aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c5ae:	2b09      	cmp	r3, #9
 800c5b0:	f77f af4c 	ble.w	800c44c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c5b4:	7afb      	ldrb	r3, [r7, #11]
 800c5b6:	f003 0302 	and.w	r3, r3, #2
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d108      	bne.n	800c5d0 <etharp_find_entry+0x1b8>
 800c5be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c5c2:	2b0a      	cmp	r3, #10
 800c5c4:	d107      	bne.n	800c5d6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c5c6:	7afb      	ldrb	r3, [r7, #11]
 800c5c8:	f003 0301 	and.w	r3, r3, #1
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d102      	bne.n	800c5d6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c5d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c5d4:	e085      	b.n	800c6e2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c5d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c5da:	2b09      	cmp	r3, #9
 800c5dc:	dc02      	bgt.n	800c5e4 <etharp_find_entry+0x1cc>
    i = empty;
 800c5de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c5e0:	843b      	strh	r3, [r7, #32]
 800c5e2:	e039      	b.n	800c658 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c5e4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c5e8:	2b09      	cmp	r3, #9
 800c5ea:	dc14      	bgt.n	800c616 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c5ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5ee:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c5f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5f4:	493d      	ldr	r1, [pc, #244]	; (800c6ec <etharp_find_entry+0x2d4>)
 800c5f6:	4613      	mov	r3, r2
 800c5f8:	005b      	lsls	r3, r3, #1
 800c5fa:	4413      	add	r3, r2
 800c5fc:	00db      	lsls	r3, r3, #3
 800c5fe:	440b      	add	r3, r1
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d018      	beq.n	800c638 <etharp_find_entry+0x220>
 800c606:	4b3a      	ldr	r3, [pc, #232]	; (800c6f0 <etharp_find_entry+0x2d8>)
 800c608:	f240 126d 	movw	r2, #365	; 0x16d
 800c60c:	493b      	ldr	r1, [pc, #236]	; (800c6fc <etharp_find_entry+0x2e4>)
 800c60e:	483a      	ldr	r0, [pc, #232]	; (800c6f8 <etharp_find_entry+0x2e0>)
 800c610:	f002 f9e2 	bl	800e9d8 <iprintf>
 800c614:	e010      	b.n	800c638 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c616:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c61a:	2b09      	cmp	r3, #9
 800c61c:	dc02      	bgt.n	800c624 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c61e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c620:	843b      	strh	r3, [r7, #32]
 800c622:	e009      	b.n	800c638 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c624:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c628:	2b09      	cmp	r3, #9
 800c62a:	dc02      	bgt.n	800c632 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c62c:	8bfb      	ldrh	r3, [r7, #30]
 800c62e:	843b      	strh	r3, [r7, #32]
 800c630:	e002      	b.n	800c638 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c632:	f04f 33ff 	mov.w	r3, #4294967295
 800c636:	e054      	b.n	800c6e2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c638:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c63c:	2b09      	cmp	r3, #9
 800c63e:	dd06      	ble.n	800c64e <etharp_find_entry+0x236>
 800c640:	4b2b      	ldr	r3, [pc, #172]	; (800c6f0 <etharp_find_entry+0x2d8>)
 800c642:	f240 127f 	movw	r2, #383	; 0x17f
 800c646:	492e      	ldr	r1, [pc, #184]	; (800c700 <etharp_find_entry+0x2e8>)
 800c648:	482b      	ldr	r0, [pc, #172]	; (800c6f8 <etharp_find_entry+0x2e0>)
 800c64a:	f002 f9c5 	bl	800e9d8 <iprintf>
    etharp_free_entry(i);
 800c64e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c652:	4618      	mov	r0, r3
 800c654:	f7ff fe06 	bl	800c264 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c658:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c65c:	2b09      	cmp	r3, #9
 800c65e:	dd06      	ble.n	800c66e <etharp_find_entry+0x256>
 800c660:	4b23      	ldr	r3, [pc, #140]	; (800c6f0 <etharp_find_entry+0x2d8>)
 800c662:	f240 1283 	movw	r2, #387	; 0x183
 800c666:	4926      	ldr	r1, [pc, #152]	; (800c700 <etharp_find_entry+0x2e8>)
 800c668:	4823      	ldr	r0, [pc, #140]	; (800c6f8 <etharp_find_entry+0x2e0>)
 800c66a:	f002 f9b5 	bl	800e9d8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c66e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c672:	491e      	ldr	r1, [pc, #120]	; (800c6ec <etharp_find_entry+0x2d4>)
 800c674:	4613      	mov	r3, r2
 800c676:	005b      	lsls	r3, r3, #1
 800c678:	4413      	add	r3, r2
 800c67a:	00db      	lsls	r3, r3, #3
 800c67c:	440b      	add	r3, r1
 800c67e:	3314      	adds	r3, #20
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d006      	beq.n	800c694 <etharp_find_entry+0x27c>
 800c686:	4b1a      	ldr	r3, [pc, #104]	; (800c6f0 <etharp_find_entry+0x2d8>)
 800c688:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c68c:	491d      	ldr	r1, [pc, #116]	; (800c704 <etharp_find_entry+0x2ec>)
 800c68e:	481a      	ldr	r0, [pc, #104]	; (800c6f8 <etharp_find_entry+0x2e0>)
 800c690:	f002 f9a2 	bl	800e9d8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d00b      	beq.n	800c6b2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c69a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	6819      	ldr	r1, [r3, #0]
 800c6a2:	4812      	ldr	r0, [pc, #72]	; (800c6ec <etharp_find_entry+0x2d4>)
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	005b      	lsls	r3, r3, #1
 800c6a8:	4413      	add	r3, r2
 800c6aa:	00db      	lsls	r3, r3, #3
 800c6ac:	4403      	add	r3, r0
 800c6ae:	3304      	adds	r3, #4
 800c6b0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c6b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c6b6:	490d      	ldr	r1, [pc, #52]	; (800c6ec <etharp_find_entry+0x2d4>)
 800c6b8:	4613      	mov	r3, r2
 800c6ba:	005b      	lsls	r3, r3, #1
 800c6bc:	4413      	add	r3, r2
 800c6be:	00db      	lsls	r3, r3, #3
 800c6c0:	440b      	add	r3, r1
 800c6c2:	3312      	adds	r3, #18
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c6c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c6cc:	4907      	ldr	r1, [pc, #28]	; (800c6ec <etharp_find_entry+0x2d4>)
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	005b      	lsls	r3, r3, #1
 800c6d2:	4413      	add	r3, r2
 800c6d4:	00db      	lsls	r3, r3, #3
 800c6d6:	440b      	add	r3, r1
 800c6d8:	3308      	adds	r3, #8
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c6de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3728      	adds	r7, #40	; 0x28
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	2000836c 	.word	0x2000836c
 800c6f0:	08012168 	.word	0x08012168
 800c6f4:	080121a0 	.word	0x080121a0
 800c6f8:	080121e0 	.word	0x080121e0
 800c6fc:	08012208 	.word	0x08012208
 800c700:	08012220 	.word	0x08012220
 800c704:	08012234 	.word	0x08012234

0800c708 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b088      	sub	sp, #32
 800c70c:	af02      	add	r7, sp, #8
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
 800c714:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c71c:	2b06      	cmp	r3, #6
 800c71e:	d006      	beq.n	800c72e <etharp_update_arp_entry+0x26>
 800c720:	4b48      	ldr	r3, [pc, #288]	; (800c844 <etharp_update_arp_entry+0x13c>)
 800c722:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c726:	4948      	ldr	r1, [pc, #288]	; (800c848 <etharp_update_arp_entry+0x140>)
 800c728:	4848      	ldr	r0, [pc, #288]	; (800c84c <etharp_update_arp_entry+0x144>)
 800c72a:	f002 f955 	bl	800e9d8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d012      	beq.n	800c75a <etharp_update_arp_entry+0x52>
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d00e      	beq.n	800c75a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	68f9      	ldr	r1, [r7, #12]
 800c742:	4618      	mov	r0, r3
 800c744:	f001 f8fe 	bl	800d944 <ip4_addr_isbroadcast_u32>
 800c748:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d105      	bne.n	800c75a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c756:	2be0      	cmp	r3, #224	; 0xe0
 800c758:	d102      	bne.n	800c760 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c75a:	f06f 030f 	mvn.w	r3, #15
 800c75e:	e06c      	b.n	800c83a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c760:	78fb      	ldrb	r3, [r7, #3]
 800c762:	68fa      	ldr	r2, [r7, #12]
 800c764:	4619      	mov	r1, r3
 800c766:	68b8      	ldr	r0, [r7, #8]
 800c768:	f7ff fe56 	bl	800c418 <etharp_find_entry>
 800c76c:	4603      	mov	r3, r0
 800c76e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c770:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c774:	2b00      	cmp	r3, #0
 800c776:	da02      	bge.n	800c77e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c778:	8afb      	ldrh	r3, [r7, #22]
 800c77a:	b25b      	sxtb	r3, r3
 800c77c:	e05d      	b.n	800c83a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c77e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c782:	4933      	ldr	r1, [pc, #204]	; (800c850 <etharp_update_arp_entry+0x148>)
 800c784:	4613      	mov	r3, r2
 800c786:	005b      	lsls	r3, r3, #1
 800c788:	4413      	add	r3, r2
 800c78a:	00db      	lsls	r3, r3, #3
 800c78c:	440b      	add	r3, r1
 800c78e:	3314      	adds	r3, #20
 800c790:	2202      	movs	r2, #2
 800c792:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c794:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c798:	492d      	ldr	r1, [pc, #180]	; (800c850 <etharp_update_arp_entry+0x148>)
 800c79a:	4613      	mov	r3, r2
 800c79c:	005b      	lsls	r3, r3, #1
 800c79e:	4413      	add	r3, r2
 800c7a0:	00db      	lsls	r3, r3, #3
 800c7a2:	440b      	add	r3, r1
 800c7a4:	3308      	adds	r3, #8
 800c7a6:	68fa      	ldr	r2, [r7, #12]
 800c7a8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c7aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c7ae:	4613      	mov	r3, r2
 800c7b0:	005b      	lsls	r3, r3, #1
 800c7b2:	4413      	add	r3, r2
 800c7b4:	00db      	lsls	r3, r3, #3
 800c7b6:	3308      	adds	r3, #8
 800c7b8:	4a25      	ldr	r2, [pc, #148]	; (800c850 <etharp_update_arp_entry+0x148>)
 800c7ba:	4413      	add	r3, r2
 800c7bc:	3304      	adds	r3, #4
 800c7be:	2206      	movs	r2, #6
 800c7c0:	6879      	ldr	r1, [r7, #4]
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f002 f8d8 	bl	800e978 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c7c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c7cc:	4920      	ldr	r1, [pc, #128]	; (800c850 <etharp_update_arp_entry+0x148>)
 800c7ce:	4613      	mov	r3, r2
 800c7d0:	005b      	lsls	r3, r3, #1
 800c7d2:	4413      	add	r3, r2
 800c7d4:	00db      	lsls	r3, r3, #3
 800c7d6:	440b      	add	r3, r1
 800c7d8:	3312      	adds	r3, #18
 800c7da:	2200      	movs	r2, #0
 800c7dc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c7de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c7e2:	491b      	ldr	r1, [pc, #108]	; (800c850 <etharp_update_arp_entry+0x148>)
 800c7e4:	4613      	mov	r3, r2
 800c7e6:	005b      	lsls	r3, r3, #1
 800c7e8:	4413      	add	r3, r2
 800c7ea:	00db      	lsls	r3, r3, #3
 800c7ec:	440b      	add	r3, r1
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d021      	beq.n	800c838 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c7f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c7f8:	4915      	ldr	r1, [pc, #84]	; (800c850 <etharp_update_arp_entry+0x148>)
 800c7fa:	4613      	mov	r3, r2
 800c7fc:	005b      	lsls	r3, r3, #1
 800c7fe:	4413      	add	r3, r2
 800c800:	00db      	lsls	r3, r3, #3
 800c802:	440b      	add	r3, r1
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c808:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c80c:	4910      	ldr	r1, [pc, #64]	; (800c850 <etharp_update_arp_entry+0x148>)
 800c80e:	4613      	mov	r3, r2
 800c810:	005b      	lsls	r3, r3, #1
 800c812:	4413      	add	r3, r2
 800c814:	00db      	lsls	r3, r3, #3
 800c816:	440b      	add	r3, r1
 800c818:	2200      	movs	r2, #0
 800c81a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c822:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c826:	9300      	str	r3, [sp, #0]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6939      	ldr	r1, [r7, #16]
 800c82c:	68f8      	ldr	r0, [r7, #12]
 800c82e:	f002 f827 	bl	800e880 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c832:	6938      	ldr	r0, [r7, #16]
 800c834:	f7f9 fa36 	bl	8005ca4 <pbuf_free>
  }
  return ERR_OK;
 800c838:	2300      	movs	r3, #0
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3718      	adds	r7, #24
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	08012168 	.word	0x08012168
 800c848:	08012260 	.word	0x08012260
 800c84c:	080121e0 	.word	0x080121e0
 800c850:	2000836c 	.word	0x2000836c

0800c854 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c85c:	2300      	movs	r3, #0
 800c85e:	60fb      	str	r3, [r7, #12]
 800c860:	e01e      	b.n	800c8a0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c862:	4913      	ldr	r1, [pc, #76]	; (800c8b0 <etharp_cleanup_netif+0x5c>)
 800c864:	68fa      	ldr	r2, [r7, #12]
 800c866:	4613      	mov	r3, r2
 800c868:	005b      	lsls	r3, r3, #1
 800c86a:	4413      	add	r3, r2
 800c86c:	00db      	lsls	r3, r3, #3
 800c86e:	440b      	add	r3, r1
 800c870:	3314      	adds	r3, #20
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c876:	7afb      	ldrb	r3, [r7, #11]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d00e      	beq.n	800c89a <etharp_cleanup_netif+0x46>
 800c87c:	490c      	ldr	r1, [pc, #48]	; (800c8b0 <etharp_cleanup_netif+0x5c>)
 800c87e:	68fa      	ldr	r2, [r7, #12]
 800c880:	4613      	mov	r3, r2
 800c882:	005b      	lsls	r3, r3, #1
 800c884:	4413      	add	r3, r2
 800c886:	00db      	lsls	r3, r3, #3
 800c888:	440b      	add	r3, r1
 800c88a:	3308      	adds	r3, #8
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	429a      	cmp	r2, r3
 800c892:	d102      	bne.n	800c89a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c894:	68f8      	ldr	r0, [r7, #12]
 800c896:	f7ff fce5 	bl	800c264 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	3301      	adds	r3, #1
 800c89e:	60fb      	str	r3, [r7, #12]
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2b09      	cmp	r3, #9
 800c8a4:	dddd      	ble.n	800c862 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c8a6:	bf00      	nop
 800c8a8:	bf00      	nop
 800c8aa:	3710      	adds	r7, #16
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	2000836c 	.word	0x2000836c

0800c8b4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c8b4:	b5b0      	push	{r4, r5, r7, lr}
 800c8b6:	b08a      	sub	sp, #40	; 0x28
 800c8b8:	af04      	add	r7, sp, #16
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d107      	bne.n	800c8d4 <etharp_input+0x20>
 800c8c4:	4b3d      	ldr	r3, [pc, #244]	; (800c9bc <etharp_input+0x108>)
 800c8c6:	f240 228a 	movw	r2, #650	; 0x28a
 800c8ca:	493d      	ldr	r1, [pc, #244]	; (800c9c0 <etharp_input+0x10c>)
 800c8cc:	483d      	ldr	r0, [pc, #244]	; (800c9c4 <etharp_input+0x110>)
 800c8ce:	f002 f883 	bl	800e9d8 <iprintf>
 800c8d2:	e06f      	b.n	800c9b4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	881b      	ldrh	r3, [r3, #0]
 800c8de:	b29b      	uxth	r3, r3
 800c8e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8e4:	d10c      	bne.n	800c900 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c8ea:	2b06      	cmp	r3, #6
 800c8ec:	d108      	bne.n	800c900 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c8f2:	2b04      	cmp	r3, #4
 800c8f4:	d104      	bne.n	800c900 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	885b      	ldrh	r3, [r3, #2]
 800c8fa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c8fc:	2b08      	cmp	r3, #8
 800c8fe:	d003      	beq.n	800c908 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f7f9 f9cf 	bl	8005ca4 <pbuf_free>
    return;
 800c906:	e055      	b.n	800c9b4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	330e      	adds	r3, #14
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	3318      	adds	r3, #24
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	3304      	adds	r3, #4
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d102      	bne.n	800c928 <etharp_input+0x74>
    for_us = 0;
 800c922:	2300      	movs	r3, #0
 800c924:	75fb      	strb	r3, [r7, #23]
 800c926:	e009      	b.n	800c93c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c928:	68ba      	ldr	r2, [r7, #8]
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	3304      	adds	r3, #4
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	429a      	cmp	r2, r3
 800c932:	bf0c      	ite	eq
 800c934:	2301      	moveq	r3, #1
 800c936:	2300      	movne	r3, #0
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	f103 0208 	add.w	r2, r3, #8
 800c942:	7dfb      	ldrb	r3, [r7, #23]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d001      	beq.n	800c94c <etharp_input+0x98>
 800c948:	2301      	movs	r3, #1
 800c94a:	e000      	b.n	800c94e <etharp_input+0x9a>
 800c94c:	2302      	movs	r3, #2
 800c94e:	f107 010c 	add.w	r1, r7, #12
 800c952:	6838      	ldr	r0, [r7, #0]
 800c954:	f7ff fed8 	bl	800c708 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	88db      	ldrh	r3, [r3, #6]
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c962:	d003      	beq.n	800c96c <etharp_input+0xb8>
 800c964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c968:	d01e      	beq.n	800c9a8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c96a:	e020      	b.n	800c9ae <etharp_input+0xfa>
      if (for_us) {
 800c96c:	7dfb      	ldrb	r3, [r7, #23]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d01c      	beq.n	800c9ac <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c988:	693a      	ldr	r2, [r7, #16]
 800c98a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c98c:	2102      	movs	r1, #2
 800c98e:	9103      	str	r1, [sp, #12]
 800c990:	f107 010c 	add.w	r1, r7, #12
 800c994:	9102      	str	r1, [sp, #8]
 800c996:	9201      	str	r2, [sp, #4]
 800c998:	9300      	str	r3, [sp, #0]
 800c99a:	462b      	mov	r3, r5
 800c99c:	4622      	mov	r2, r4
 800c99e:	4601      	mov	r1, r0
 800c9a0:	6838      	ldr	r0, [r7, #0]
 800c9a2:	f000 faeb 	bl	800cf7c <etharp_raw>
      break;
 800c9a6:	e001      	b.n	800c9ac <etharp_input+0xf8>
      break;
 800c9a8:	bf00      	nop
 800c9aa:	e000      	b.n	800c9ae <etharp_input+0xfa>
      break;
 800c9ac:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f7f9 f978 	bl	8005ca4 <pbuf_free>
}
 800c9b4:	3718      	adds	r7, #24
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bdb0      	pop	{r4, r5, r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	08012168 	.word	0x08012168
 800c9c0:	080122b8 	.word	0x080122b8
 800c9c4:	080121e0 	.word	0x080121e0

0800c9c8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b086      	sub	sp, #24
 800c9cc:	af02      	add	r7, sp, #8
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	4613      	mov	r3, r2
 800c9d4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c9d6:	79fa      	ldrb	r2, [r7, #7]
 800c9d8:	4944      	ldr	r1, [pc, #272]	; (800caec <etharp_output_to_arp_index+0x124>)
 800c9da:	4613      	mov	r3, r2
 800c9dc:	005b      	lsls	r3, r3, #1
 800c9de:	4413      	add	r3, r2
 800c9e0:	00db      	lsls	r3, r3, #3
 800c9e2:	440b      	add	r3, r1
 800c9e4:	3314      	adds	r3, #20
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d806      	bhi.n	800c9fa <etharp_output_to_arp_index+0x32>
 800c9ec:	4b40      	ldr	r3, [pc, #256]	; (800caf0 <etharp_output_to_arp_index+0x128>)
 800c9ee:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c9f2:	4940      	ldr	r1, [pc, #256]	; (800caf4 <etharp_output_to_arp_index+0x12c>)
 800c9f4:	4840      	ldr	r0, [pc, #256]	; (800caf8 <etharp_output_to_arp_index+0x130>)
 800c9f6:	f001 ffef 	bl	800e9d8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c9fa:	79fa      	ldrb	r2, [r7, #7]
 800c9fc:	493b      	ldr	r1, [pc, #236]	; (800caec <etharp_output_to_arp_index+0x124>)
 800c9fe:	4613      	mov	r3, r2
 800ca00:	005b      	lsls	r3, r3, #1
 800ca02:	4413      	add	r3, r2
 800ca04:	00db      	lsls	r3, r3, #3
 800ca06:	440b      	add	r3, r1
 800ca08:	3314      	adds	r3, #20
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	2b02      	cmp	r3, #2
 800ca0e:	d153      	bne.n	800cab8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ca10:	79fa      	ldrb	r2, [r7, #7]
 800ca12:	4936      	ldr	r1, [pc, #216]	; (800caec <etharp_output_to_arp_index+0x124>)
 800ca14:	4613      	mov	r3, r2
 800ca16:	005b      	lsls	r3, r3, #1
 800ca18:	4413      	add	r3, r2
 800ca1a:	00db      	lsls	r3, r3, #3
 800ca1c:	440b      	add	r3, r1
 800ca1e:	3312      	adds	r3, #18
 800ca20:	881b      	ldrh	r3, [r3, #0]
 800ca22:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800ca26:	d919      	bls.n	800ca5c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800ca28:	79fa      	ldrb	r2, [r7, #7]
 800ca2a:	4613      	mov	r3, r2
 800ca2c:	005b      	lsls	r3, r3, #1
 800ca2e:	4413      	add	r3, r2
 800ca30:	00db      	lsls	r3, r3, #3
 800ca32:	4a2e      	ldr	r2, [pc, #184]	; (800caec <etharp_output_to_arp_index+0x124>)
 800ca34:	4413      	add	r3, r2
 800ca36:	3304      	adds	r3, #4
 800ca38:	4619      	mov	r1, r3
 800ca3a:	68f8      	ldr	r0, [r7, #12]
 800ca3c:	f000 fb4c 	bl	800d0d8 <etharp_request>
 800ca40:	4603      	mov	r3, r0
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d138      	bne.n	800cab8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ca46:	79fa      	ldrb	r2, [r7, #7]
 800ca48:	4928      	ldr	r1, [pc, #160]	; (800caec <etharp_output_to_arp_index+0x124>)
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	005b      	lsls	r3, r3, #1
 800ca4e:	4413      	add	r3, r2
 800ca50:	00db      	lsls	r3, r3, #3
 800ca52:	440b      	add	r3, r1
 800ca54:	3314      	adds	r3, #20
 800ca56:	2203      	movs	r2, #3
 800ca58:	701a      	strb	r2, [r3, #0]
 800ca5a:	e02d      	b.n	800cab8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ca5c:	79fa      	ldrb	r2, [r7, #7]
 800ca5e:	4923      	ldr	r1, [pc, #140]	; (800caec <etharp_output_to_arp_index+0x124>)
 800ca60:	4613      	mov	r3, r2
 800ca62:	005b      	lsls	r3, r3, #1
 800ca64:	4413      	add	r3, r2
 800ca66:	00db      	lsls	r3, r3, #3
 800ca68:	440b      	add	r3, r1
 800ca6a:	3312      	adds	r3, #18
 800ca6c:	881b      	ldrh	r3, [r3, #0]
 800ca6e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ca72:	d321      	bcc.n	800cab8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ca74:	79fa      	ldrb	r2, [r7, #7]
 800ca76:	4613      	mov	r3, r2
 800ca78:	005b      	lsls	r3, r3, #1
 800ca7a:	4413      	add	r3, r2
 800ca7c:	00db      	lsls	r3, r3, #3
 800ca7e:	4a1b      	ldr	r2, [pc, #108]	; (800caec <etharp_output_to_arp_index+0x124>)
 800ca80:	4413      	add	r3, r2
 800ca82:	1d19      	adds	r1, r3, #4
 800ca84:	79fa      	ldrb	r2, [r7, #7]
 800ca86:	4613      	mov	r3, r2
 800ca88:	005b      	lsls	r3, r3, #1
 800ca8a:	4413      	add	r3, r2
 800ca8c:	00db      	lsls	r3, r3, #3
 800ca8e:	3308      	adds	r3, #8
 800ca90:	4a16      	ldr	r2, [pc, #88]	; (800caec <etharp_output_to_arp_index+0x124>)
 800ca92:	4413      	add	r3, r2
 800ca94:	3304      	adds	r3, #4
 800ca96:	461a      	mov	r2, r3
 800ca98:	68f8      	ldr	r0, [r7, #12]
 800ca9a:	f000 fafb 	bl	800d094 <etharp_request_dst>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d109      	bne.n	800cab8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800caa4:	79fa      	ldrb	r2, [r7, #7]
 800caa6:	4911      	ldr	r1, [pc, #68]	; (800caec <etharp_output_to_arp_index+0x124>)
 800caa8:	4613      	mov	r3, r2
 800caaa:	005b      	lsls	r3, r3, #1
 800caac:	4413      	add	r3, r2
 800caae:	00db      	lsls	r3, r3, #3
 800cab0:	440b      	add	r3, r1
 800cab2:	3314      	adds	r3, #20
 800cab4:	2203      	movs	r2, #3
 800cab6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800cabe:	79fa      	ldrb	r2, [r7, #7]
 800cac0:	4613      	mov	r3, r2
 800cac2:	005b      	lsls	r3, r3, #1
 800cac4:	4413      	add	r3, r2
 800cac6:	00db      	lsls	r3, r3, #3
 800cac8:	3308      	adds	r3, #8
 800caca:	4a08      	ldr	r2, [pc, #32]	; (800caec <etharp_output_to_arp_index+0x124>)
 800cacc:	4413      	add	r3, r2
 800cace:	3304      	adds	r3, #4
 800cad0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cad4:	9200      	str	r2, [sp, #0]
 800cad6:	460a      	mov	r2, r1
 800cad8:	68b9      	ldr	r1, [r7, #8]
 800cada:	68f8      	ldr	r0, [r7, #12]
 800cadc:	f001 fed0 	bl	800e880 <ethernet_output>
 800cae0:	4603      	mov	r3, r0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3710      	adds	r7, #16
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	2000836c 	.word	0x2000836c
 800caf0:	08012168 	.word	0x08012168
 800caf4:	080122d8 	.word	0x080122d8
 800caf8:	080121e0 	.word	0x080121e0

0800cafc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b08a      	sub	sp, #40	; 0x28
 800cb00:	af02      	add	r7, sp, #8
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d106      	bne.n	800cb20 <etharp_output+0x24>
 800cb12:	4b73      	ldr	r3, [pc, #460]	; (800cce0 <etharp_output+0x1e4>)
 800cb14:	f240 321e 	movw	r2, #798	; 0x31e
 800cb18:	4972      	ldr	r1, [pc, #456]	; (800cce4 <etharp_output+0x1e8>)
 800cb1a:	4873      	ldr	r0, [pc, #460]	; (800cce8 <etharp_output+0x1ec>)
 800cb1c:	f001 ff5c 	bl	800e9d8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d106      	bne.n	800cb34 <etharp_output+0x38>
 800cb26:	4b6e      	ldr	r3, [pc, #440]	; (800cce0 <etharp_output+0x1e4>)
 800cb28:	f240 321f 	movw	r2, #799	; 0x31f
 800cb2c:	496f      	ldr	r1, [pc, #444]	; (800ccec <etharp_output+0x1f0>)
 800cb2e:	486e      	ldr	r0, [pc, #440]	; (800cce8 <etharp_output+0x1ec>)
 800cb30:	f001 ff52 	bl	800e9d8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d106      	bne.n	800cb48 <etharp_output+0x4c>
 800cb3a:	4b69      	ldr	r3, [pc, #420]	; (800cce0 <etharp_output+0x1e4>)
 800cb3c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cb40:	496b      	ldr	r1, [pc, #428]	; (800ccf0 <etharp_output+0x1f4>)
 800cb42:	4869      	ldr	r0, [pc, #420]	; (800cce8 <etharp_output+0x1ec>)
 800cb44:	f001 ff48 	bl	800e9d8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	68f9      	ldr	r1, [r7, #12]
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f000 fef8 	bl	800d944 <ip4_addr_isbroadcast_u32>
 800cb54:	4603      	mov	r3, r0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d002      	beq.n	800cb60 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800cb5a:	4b66      	ldr	r3, [pc, #408]	; (800ccf4 <etharp_output+0x1f8>)
 800cb5c:	61fb      	str	r3, [r7, #28]
 800cb5e:	e0af      	b.n	800ccc0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb68:	2be0      	cmp	r3, #224	; 0xe0
 800cb6a:	d118      	bne.n	800cb9e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cb70:	2300      	movs	r3, #0
 800cb72:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cb74:	235e      	movs	r3, #94	; 0x5e
 800cb76:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	3302      	adds	r3, #2
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	3303      	adds	r3, #3
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800cb96:	f107 0310 	add.w	r3, r7, #16
 800cb9a:	61fb      	str	r3, [r7, #28]
 800cb9c:	e090      	b.n	800ccc0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681a      	ldr	r2, [r3, #0]
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	3304      	adds	r3, #4
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	405a      	eors	r2, r3
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	3308      	adds	r3, #8
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4013      	ands	r3, r2
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d012      	beq.n	800cbdc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cbbc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d00b      	beq.n	800cbdc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	330c      	adds	r3, #12
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d003      	beq.n	800cbd6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	330c      	adds	r3, #12
 800cbd2:	61bb      	str	r3, [r7, #24]
 800cbd4:	e002      	b.n	800cbdc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800cbd6:	f06f 0303 	mvn.w	r3, #3
 800cbda:	e07d      	b.n	800ccd8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cbdc:	4b46      	ldr	r3, [pc, #280]	; (800ccf8 <etharp_output+0x1fc>)
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	4a46      	ldr	r2, [pc, #280]	; (800ccfc <etharp_output+0x200>)
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	005b      	lsls	r3, r3, #1
 800cbe8:	440b      	add	r3, r1
 800cbea:	00db      	lsls	r3, r3, #3
 800cbec:	4413      	add	r3, r2
 800cbee:	3314      	adds	r3, #20
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d925      	bls.n	800cc42 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cbf6:	4b40      	ldr	r3, [pc, #256]	; (800ccf8 <etharp_output+0x1fc>)
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	4a3f      	ldr	r2, [pc, #252]	; (800ccfc <etharp_output+0x200>)
 800cbfe:	460b      	mov	r3, r1
 800cc00:	005b      	lsls	r3, r3, #1
 800cc02:	440b      	add	r3, r1
 800cc04:	00db      	lsls	r3, r3, #3
 800cc06:	4413      	add	r3, r2
 800cc08:	3308      	adds	r3, #8
 800cc0a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cc0c:	68fa      	ldr	r2, [r7, #12]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d117      	bne.n	800cc42 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cc12:	69bb      	ldr	r3, [r7, #24]
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	4b38      	ldr	r3, [pc, #224]	; (800ccf8 <etharp_output+0x1fc>)
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	4937      	ldr	r1, [pc, #220]	; (800ccfc <etharp_output+0x200>)
 800cc1e:	4603      	mov	r3, r0
 800cc20:	005b      	lsls	r3, r3, #1
 800cc22:	4403      	add	r3, r0
 800cc24:	00db      	lsls	r3, r3, #3
 800cc26:	440b      	add	r3, r1
 800cc28:	3304      	adds	r3, #4
 800cc2a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d108      	bne.n	800cc42 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cc30:	4b31      	ldr	r3, [pc, #196]	; (800ccf8 <etharp_output+0x1fc>)
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	461a      	mov	r2, r3
 800cc36:	68b9      	ldr	r1, [r7, #8]
 800cc38:	68f8      	ldr	r0, [r7, #12]
 800cc3a:	f7ff fec5 	bl	800c9c8 <etharp_output_to_arp_index>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	e04a      	b.n	800ccd8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cc42:	2300      	movs	r3, #0
 800cc44:	75fb      	strb	r3, [r7, #23]
 800cc46:	e031      	b.n	800ccac <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cc48:	7dfa      	ldrb	r2, [r7, #23]
 800cc4a:	492c      	ldr	r1, [pc, #176]	; (800ccfc <etharp_output+0x200>)
 800cc4c:	4613      	mov	r3, r2
 800cc4e:	005b      	lsls	r3, r3, #1
 800cc50:	4413      	add	r3, r2
 800cc52:	00db      	lsls	r3, r3, #3
 800cc54:	440b      	add	r3, r1
 800cc56:	3314      	adds	r3, #20
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d923      	bls.n	800cca6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800cc5e:	7dfa      	ldrb	r2, [r7, #23]
 800cc60:	4926      	ldr	r1, [pc, #152]	; (800ccfc <etharp_output+0x200>)
 800cc62:	4613      	mov	r3, r2
 800cc64:	005b      	lsls	r3, r3, #1
 800cc66:	4413      	add	r3, r2
 800cc68:	00db      	lsls	r3, r3, #3
 800cc6a:	440b      	add	r3, r1
 800cc6c:	3308      	adds	r3, #8
 800cc6e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cc70:	68fa      	ldr	r2, [r7, #12]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d117      	bne.n	800cca6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cc76:	69bb      	ldr	r3, [r7, #24]
 800cc78:	6819      	ldr	r1, [r3, #0]
 800cc7a:	7dfa      	ldrb	r2, [r7, #23]
 800cc7c:	481f      	ldr	r0, [pc, #124]	; (800ccfc <etharp_output+0x200>)
 800cc7e:	4613      	mov	r3, r2
 800cc80:	005b      	lsls	r3, r3, #1
 800cc82:	4413      	add	r3, r2
 800cc84:	00db      	lsls	r3, r3, #3
 800cc86:	4403      	add	r3, r0
 800cc88:	3304      	adds	r3, #4
 800cc8a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800cc8c:	4299      	cmp	r1, r3
 800cc8e:	d10a      	bne.n	800cca6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800cc90:	4a19      	ldr	r2, [pc, #100]	; (800ccf8 <etharp_output+0x1fc>)
 800cc92:	7dfb      	ldrb	r3, [r7, #23]
 800cc94:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800cc96:	7dfb      	ldrb	r3, [r7, #23]
 800cc98:	461a      	mov	r2, r3
 800cc9a:	68b9      	ldr	r1, [r7, #8]
 800cc9c:	68f8      	ldr	r0, [r7, #12]
 800cc9e:	f7ff fe93 	bl	800c9c8 <etharp_output_to_arp_index>
 800cca2:	4603      	mov	r3, r0
 800cca4:	e018      	b.n	800ccd8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cca6:	7dfb      	ldrb	r3, [r7, #23]
 800cca8:	3301      	adds	r3, #1
 800ccaa:	75fb      	strb	r3, [r7, #23]
 800ccac:	7dfb      	ldrb	r3, [r7, #23]
 800ccae:	2b09      	cmp	r3, #9
 800ccb0:	d9ca      	bls.n	800cc48 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ccb2:	68ba      	ldr	r2, [r7, #8]
 800ccb4:	69b9      	ldr	r1, [r7, #24]
 800ccb6:	68f8      	ldr	r0, [r7, #12]
 800ccb8:	f000 f822 	bl	800cd00 <etharp_query>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	e00b      	b.n	800ccd8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ccc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	68b9      	ldr	r1, [r7, #8]
 800ccd0:	68f8      	ldr	r0, [r7, #12]
 800ccd2:	f001 fdd5 	bl	800e880 <ethernet_output>
 800ccd6:	4603      	mov	r3, r0
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3720      	adds	r7, #32
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	08012168 	.word	0x08012168
 800cce4:	080122b8 	.word	0x080122b8
 800cce8:	080121e0 	.word	0x080121e0
 800ccec:	08012308 	.word	0x08012308
 800ccf0:	080122a8 	.word	0x080122a8
 800ccf4:	0801291c 	.word	0x0801291c
 800ccf8:	2000845c 	.word	0x2000845c
 800ccfc:	2000836c 	.word	0x2000836c

0800cd00 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b08c      	sub	sp, #48	; 0x30
 800cd04:	af02      	add	r7, sp, #8
 800cd06:	60f8      	str	r0, [r7, #12]
 800cd08:	60b9      	str	r1, [r7, #8]
 800cd0a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	3326      	adds	r3, #38	; 0x26
 800cd10:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800cd12:	23ff      	movs	r3, #255	; 0xff
 800cd14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	68f9      	ldr	r1, [r7, #12]
 800cd22:	4618      	mov	r0, r3
 800cd24:	f000 fe0e 	bl	800d944 <ip4_addr_isbroadcast_u32>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d10c      	bne.n	800cd48 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cd36:	2be0      	cmp	r3, #224	; 0xe0
 800cd38:	d006      	beq.n	800cd48 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d003      	beq.n	800cd48 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d102      	bne.n	800cd4e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cd48:	f06f 030f 	mvn.w	r3, #15
 800cd4c:	e101      	b.n	800cf52 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800cd4e:	68fa      	ldr	r2, [r7, #12]
 800cd50:	2101      	movs	r1, #1
 800cd52:	68b8      	ldr	r0, [r7, #8]
 800cd54:	f7ff fb60 	bl	800c418 <etharp_find_entry>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800cd5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	da02      	bge.n	800cd6a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800cd64:	8a7b      	ldrh	r3, [r7, #18]
 800cd66:	b25b      	sxtb	r3, r3
 800cd68:	e0f3      	b.n	800cf52 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800cd6a:	8a7b      	ldrh	r3, [r7, #18]
 800cd6c:	2b7e      	cmp	r3, #126	; 0x7e
 800cd6e:	d906      	bls.n	800cd7e <etharp_query+0x7e>
 800cd70:	4b7a      	ldr	r3, [pc, #488]	; (800cf5c <etharp_query+0x25c>)
 800cd72:	f240 32c1 	movw	r2, #961	; 0x3c1
 800cd76:	497a      	ldr	r1, [pc, #488]	; (800cf60 <etharp_query+0x260>)
 800cd78:	487a      	ldr	r0, [pc, #488]	; (800cf64 <etharp_query+0x264>)
 800cd7a:	f001 fe2d 	bl	800e9d8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800cd7e:	8a7b      	ldrh	r3, [r7, #18]
 800cd80:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800cd82:	7c7a      	ldrb	r2, [r7, #17]
 800cd84:	4978      	ldr	r1, [pc, #480]	; (800cf68 <etharp_query+0x268>)
 800cd86:	4613      	mov	r3, r2
 800cd88:	005b      	lsls	r3, r3, #1
 800cd8a:	4413      	add	r3, r2
 800cd8c:	00db      	lsls	r3, r3, #3
 800cd8e:	440b      	add	r3, r1
 800cd90:	3314      	adds	r3, #20
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d115      	bne.n	800cdc4 <etharp_query+0xc4>
    is_new_entry = 1;
 800cd98:	2301      	movs	r3, #1
 800cd9a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800cd9c:	7c7a      	ldrb	r2, [r7, #17]
 800cd9e:	4972      	ldr	r1, [pc, #456]	; (800cf68 <etharp_query+0x268>)
 800cda0:	4613      	mov	r3, r2
 800cda2:	005b      	lsls	r3, r3, #1
 800cda4:	4413      	add	r3, r2
 800cda6:	00db      	lsls	r3, r3, #3
 800cda8:	440b      	add	r3, r1
 800cdaa:	3314      	adds	r3, #20
 800cdac:	2201      	movs	r2, #1
 800cdae:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800cdb0:	7c7a      	ldrb	r2, [r7, #17]
 800cdb2:	496d      	ldr	r1, [pc, #436]	; (800cf68 <etharp_query+0x268>)
 800cdb4:	4613      	mov	r3, r2
 800cdb6:	005b      	lsls	r3, r3, #1
 800cdb8:	4413      	add	r3, r2
 800cdba:	00db      	lsls	r3, r3, #3
 800cdbc:	440b      	add	r3, r1
 800cdbe:	3308      	adds	r3, #8
 800cdc0:	68fa      	ldr	r2, [r7, #12]
 800cdc2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800cdc4:	7c7a      	ldrb	r2, [r7, #17]
 800cdc6:	4968      	ldr	r1, [pc, #416]	; (800cf68 <etharp_query+0x268>)
 800cdc8:	4613      	mov	r3, r2
 800cdca:	005b      	lsls	r3, r3, #1
 800cdcc:	4413      	add	r3, r2
 800cdce:	00db      	lsls	r3, r3, #3
 800cdd0:	440b      	add	r3, r1
 800cdd2:	3314      	adds	r3, #20
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	2b01      	cmp	r3, #1
 800cdd8:	d011      	beq.n	800cdfe <etharp_query+0xfe>
 800cdda:	7c7a      	ldrb	r2, [r7, #17]
 800cddc:	4962      	ldr	r1, [pc, #392]	; (800cf68 <etharp_query+0x268>)
 800cdde:	4613      	mov	r3, r2
 800cde0:	005b      	lsls	r3, r3, #1
 800cde2:	4413      	add	r3, r2
 800cde4:	00db      	lsls	r3, r3, #3
 800cde6:	440b      	add	r3, r1
 800cde8:	3314      	adds	r3, #20
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d806      	bhi.n	800cdfe <etharp_query+0xfe>
 800cdf0:	4b5a      	ldr	r3, [pc, #360]	; (800cf5c <etharp_query+0x25c>)
 800cdf2:	f240 32cd 	movw	r2, #973	; 0x3cd
 800cdf6:	495d      	ldr	r1, [pc, #372]	; (800cf6c <etharp_query+0x26c>)
 800cdf8:	485a      	ldr	r0, [pc, #360]	; (800cf64 <etharp_query+0x264>)
 800cdfa:	f001 fded 	bl	800e9d8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800cdfe:	6a3b      	ldr	r3, [r7, #32]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d102      	bne.n	800ce0a <etharp_query+0x10a>
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d10c      	bne.n	800ce24 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ce0a:	68b9      	ldr	r1, [r7, #8]
 800ce0c:	68f8      	ldr	r0, [r7, #12]
 800ce0e:	f000 f963 	bl	800d0d8 <etharp_request>
 800ce12:	4603      	mov	r3, r0
 800ce14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d102      	bne.n	800ce24 <etharp_query+0x124>
      return result;
 800ce1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce22:	e096      	b.n	800cf52 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d106      	bne.n	800ce38 <etharp_query+0x138>
 800ce2a:	4b4c      	ldr	r3, [pc, #304]	; (800cf5c <etharp_query+0x25c>)
 800ce2c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800ce30:	494f      	ldr	r1, [pc, #316]	; (800cf70 <etharp_query+0x270>)
 800ce32:	484c      	ldr	r0, [pc, #304]	; (800cf64 <etharp_query+0x264>)
 800ce34:	f001 fdd0 	bl	800e9d8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ce38:	7c7a      	ldrb	r2, [r7, #17]
 800ce3a:	494b      	ldr	r1, [pc, #300]	; (800cf68 <etharp_query+0x268>)
 800ce3c:	4613      	mov	r3, r2
 800ce3e:	005b      	lsls	r3, r3, #1
 800ce40:	4413      	add	r3, r2
 800ce42:	00db      	lsls	r3, r3, #3
 800ce44:	440b      	add	r3, r1
 800ce46:	3314      	adds	r3, #20
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	2b01      	cmp	r3, #1
 800ce4c:	d917      	bls.n	800ce7e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ce4e:	4a49      	ldr	r2, [pc, #292]	; (800cf74 <etharp_query+0x274>)
 800ce50:	7c7b      	ldrb	r3, [r7, #17]
 800ce52:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ce54:	7c7a      	ldrb	r2, [r7, #17]
 800ce56:	4613      	mov	r3, r2
 800ce58:	005b      	lsls	r3, r3, #1
 800ce5a:	4413      	add	r3, r2
 800ce5c:	00db      	lsls	r3, r3, #3
 800ce5e:	3308      	adds	r3, #8
 800ce60:	4a41      	ldr	r2, [pc, #260]	; (800cf68 <etharp_query+0x268>)
 800ce62:	4413      	add	r3, r2
 800ce64:	3304      	adds	r3, #4
 800ce66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce6a:	9200      	str	r2, [sp, #0]
 800ce6c:	697a      	ldr	r2, [r7, #20]
 800ce6e:	6879      	ldr	r1, [r7, #4]
 800ce70:	68f8      	ldr	r0, [r7, #12]
 800ce72:	f001 fd05 	bl	800e880 <ethernet_output>
 800ce76:	4603      	mov	r3, r0
 800ce78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce7c:	e067      	b.n	800cf4e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ce7e:	7c7a      	ldrb	r2, [r7, #17]
 800ce80:	4939      	ldr	r1, [pc, #228]	; (800cf68 <etharp_query+0x268>)
 800ce82:	4613      	mov	r3, r2
 800ce84:	005b      	lsls	r3, r3, #1
 800ce86:	4413      	add	r3, r2
 800ce88:	00db      	lsls	r3, r3, #3
 800ce8a:	440b      	add	r3, r1
 800ce8c:	3314      	adds	r3, #20
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d15c      	bne.n	800cf4e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ce94:	2300      	movs	r3, #0
 800ce96:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ce9c:	e01c      	b.n	800ced8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ce9e:	69fb      	ldr	r3, [r7, #28]
 800cea0:	895a      	ldrh	r2, [r3, #10]
 800cea2:	69fb      	ldr	r3, [r7, #28]
 800cea4:	891b      	ldrh	r3, [r3, #8]
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d10a      	bne.n	800cec0 <etharp_query+0x1c0>
 800ceaa:	69fb      	ldr	r3, [r7, #28]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d006      	beq.n	800cec0 <etharp_query+0x1c0>
 800ceb2:	4b2a      	ldr	r3, [pc, #168]	; (800cf5c <etharp_query+0x25c>)
 800ceb4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ceb8:	492f      	ldr	r1, [pc, #188]	; (800cf78 <etharp_query+0x278>)
 800ceba:	482a      	ldr	r0, [pc, #168]	; (800cf64 <etharp_query+0x264>)
 800cebc:	f001 fd8c 	bl	800e9d8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	7b1b      	ldrb	r3, [r3, #12]
 800cec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d002      	beq.n	800ced2 <etharp_query+0x1d2>
        copy_needed = 1;
 800cecc:	2301      	movs	r3, #1
 800cece:	61bb      	str	r3, [r7, #24]
        break;
 800ced0:	e005      	b.n	800cede <etharp_query+0x1de>
      }
      p = p->next;
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ced8:	69fb      	ldr	r3, [r7, #28]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d1df      	bne.n	800ce9e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800cede:	69bb      	ldr	r3, [r7, #24]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d007      	beq.n	800cef4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800cee4:	687a      	ldr	r2, [r7, #4]
 800cee6:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ceea:	200e      	movs	r0, #14
 800ceec:	f7f9 f9d8 	bl	80062a0 <pbuf_clone>
 800cef0:	61f8      	str	r0, [r7, #28]
 800cef2:	e004      	b.n	800cefe <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800cef8:	69f8      	ldr	r0, [r7, #28]
 800cefa:	f7f8 ff73 	bl	8005de4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800cefe:	69fb      	ldr	r3, [r7, #28]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d021      	beq.n	800cf48 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800cf04:	7c7a      	ldrb	r2, [r7, #17]
 800cf06:	4918      	ldr	r1, [pc, #96]	; (800cf68 <etharp_query+0x268>)
 800cf08:	4613      	mov	r3, r2
 800cf0a:	005b      	lsls	r3, r3, #1
 800cf0c:	4413      	add	r3, r2
 800cf0e:	00db      	lsls	r3, r3, #3
 800cf10:	440b      	add	r3, r1
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d00a      	beq.n	800cf2e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800cf18:	7c7a      	ldrb	r2, [r7, #17]
 800cf1a:	4913      	ldr	r1, [pc, #76]	; (800cf68 <etharp_query+0x268>)
 800cf1c:	4613      	mov	r3, r2
 800cf1e:	005b      	lsls	r3, r3, #1
 800cf20:	4413      	add	r3, r2
 800cf22:	00db      	lsls	r3, r3, #3
 800cf24:	440b      	add	r3, r1
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f7f8 febb 	bl	8005ca4 <pbuf_free>
      }
      arp_table[i].q = p;
 800cf2e:	7c7a      	ldrb	r2, [r7, #17]
 800cf30:	490d      	ldr	r1, [pc, #52]	; (800cf68 <etharp_query+0x268>)
 800cf32:	4613      	mov	r3, r2
 800cf34:	005b      	lsls	r3, r3, #1
 800cf36:	4413      	add	r3, r2
 800cf38:	00db      	lsls	r3, r3, #3
 800cf3a:	440b      	add	r3, r1
 800cf3c:	69fa      	ldr	r2, [r7, #28]
 800cf3e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800cf40:	2300      	movs	r3, #0
 800cf42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf46:	e002      	b.n	800cf4e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800cf48:	23ff      	movs	r3, #255	; 0xff
 800cf4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800cf4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3728      	adds	r7, #40	; 0x28
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	08012168 	.word	0x08012168
 800cf60:	08012314 	.word	0x08012314
 800cf64:	080121e0 	.word	0x080121e0
 800cf68:	2000836c 	.word	0x2000836c
 800cf6c:	08012324 	.word	0x08012324
 800cf70:	08012308 	.word	0x08012308
 800cf74:	2000845c 	.word	0x2000845c
 800cf78:	0801234c 	.word	0x0801234c

0800cf7c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b08a      	sub	sp, #40	; 0x28
 800cf80:	af02      	add	r7, sp, #8
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	60b9      	str	r1, [r7, #8]
 800cf86:	607a      	str	r2, [r7, #4]
 800cf88:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d106      	bne.n	800cfa2 <etharp_raw+0x26>
 800cf94:	4b3a      	ldr	r3, [pc, #232]	; (800d080 <etharp_raw+0x104>)
 800cf96:	f240 4257 	movw	r2, #1111	; 0x457
 800cf9a:	493a      	ldr	r1, [pc, #232]	; (800d084 <etharp_raw+0x108>)
 800cf9c:	483a      	ldr	r0, [pc, #232]	; (800d088 <etharp_raw+0x10c>)
 800cf9e:	f001 fd1b 	bl	800e9d8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800cfa2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cfa6:	211c      	movs	r1, #28
 800cfa8:	200e      	movs	r0, #14
 800cfaa:	f7f8 fb97 	bl	80056dc <pbuf_alloc>
 800cfae:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800cfb0:	69bb      	ldr	r3, [r7, #24]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d102      	bne.n	800cfbc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800cfb6:	f04f 33ff 	mov.w	r3, #4294967295
 800cfba:	e05d      	b.n	800d078 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800cfbc:	69bb      	ldr	r3, [r7, #24]
 800cfbe:	895b      	ldrh	r3, [r3, #10]
 800cfc0:	2b1b      	cmp	r3, #27
 800cfc2:	d806      	bhi.n	800cfd2 <etharp_raw+0x56>
 800cfc4:	4b2e      	ldr	r3, [pc, #184]	; (800d080 <etharp_raw+0x104>)
 800cfc6:	f240 4262 	movw	r2, #1122	; 0x462
 800cfca:	4930      	ldr	r1, [pc, #192]	; (800d08c <etharp_raw+0x110>)
 800cfcc:	482e      	ldr	r0, [pc, #184]	; (800d088 <etharp_raw+0x10c>)
 800cfce:	f001 fd03 	bl	800e9d8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800cfd8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7f7 fb04 	bl	80045e8 <lwip_htons>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cfee:	2b06      	cmp	r3, #6
 800cff0:	d006      	beq.n	800d000 <etharp_raw+0x84>
 800cff2:	4b23      	ldr	r3, [pc, #140]	; (800d080 <etharp_raw+0x104>)
 800cff4:	f240 4269 	movw	r2, #1129	; 0x469
 800cff8:	4925      	ldr	r1, [pc, #148]	; (800d090 <etharp_raw+0x114>)
 800cffa:	4823      	ldr	r0, [pc, #140]	; (800d088 <etharp_raw+0x10c>)
 800cffc:	f001 fcec 	bl	800e9d8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	3308      	adds	r3, #8
 800d004:	2206      	movs	r2, #6
 800d006:	6839      	ldr	r1, [r7, #0]
 800d008:	4618      	mov	r0, r3
 800d00a:	f001 fcb5 	bl	800e978 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	3312      	adds	r3, #18
 800d012:	2206      	movs	r2, #6
 800d014:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d016:	4618      	mov	r0, r3
 800d018:	f001 fcae 	bl	800e978 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	330e      	adds	r3, #14
 800d020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d022:	6812      	ldr	r2, [r2, #0]
 800d024:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	3318      	adds	r3, #24
 800d02a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d02c:	6812      	ldr	r2, [r2, #0]
 800d02e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	2200      	movs	r2, #0
 800d034:	701a      	strb	r2, [r3, #0]
 800d036:	2200      	movs	r2, #0
 800d038:	f042 0201 	orr.w	r2, r2, #1
 800d03c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	2200      	movs	r2, #0
 800d042:	f042 0208 	orr.w	r2, r2, #8
 800d046:	709a      	strb	r2, [r3, #2]
 800d048:	2200      	movs	r2, #0
 800d04a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	2206      	movs	r2, #6
 800d050:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	2204      	movs	r2, #4
 800d056:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d058:	f640 0306 	movw	r3, #2054	; 0x806
 800d05c:	9300      	str	r3, [sp, #0]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	68ba      	ldr	r2, [r7, #8]
 800d062:	69b9      	ldr	r1, [r7, #24]
 800d064:	68f8      	ldr	r0, [r7, #12]
 800d066:	f001 fc0b 	bl	800e880 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d06a:	69b8      	ldr	r0, [r7, #24]
 800d06c:	f7f8 fe1a 	bl	8005ca4 <pbuf_free>
  p = NULL;
 800d070:	2300      	movs	r3, #0
 800d072:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d074:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3720      	adds	r7, #32
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}
 800d080:	08012168 	.word	0x08012168
 800d084:	080122b8 	.word	0x080122b8
 800d088:	080121e0 	.word	0x080121e0
 800d08c:	08012368 	.word	0x08012368
 800d090:	0801239c 	.word	0x0801239c

0800d094 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b088      	sub	sp, #32
 800d098:	af04      	add	r7, sp, #16
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	9203      	str	r2, [sp, #12]
 800d0b4:	68ba      	ldr	r2, [r7, #8]
 800d0b6:	9202      	str	r2, [sp, #8]
 800d0b8:	4a06      	ldr	r2, [pc, #24]	; (800d0d4 <etharp_request_dst+0x40>)
 800d0ba:	9201      	str	r2, [sp, #4]
 800d0bc:	9300      	str	r3, [sp, #0]
 800d0be:	4603      	mov	r3, r0
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	68f8      	ldr	r0, [r7, #12]
 800d0c4:	f7ff ff5a 	bl	800cf7c <etharp_raw>
 800d0c8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3710      	adds	r7, #16
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	08012924 	.word	0x08012924

0800d0d8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d0e2:	4a05      	ldr	r2, [pc, #20]	; (800d0f8 <etharp_request+0x20>)
 800d0e4:	6839      	ldr	r1, [r7, #0]
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f7ff ffd4 	bl	800d094 <etharp_request_dst>
 800d0ec:	4603      	mov	r3, r0
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3708      	adds	r7, #8
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	0801291c 	.word	0x0801291c

0800d0fc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b08e      	sub	sp, #56	; 0x38
 800d100:	af04      	add	r7, sp, #16
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d106:	4b79      	ldr	r3, [pc, #484]	; (800d2ec <icmp_input+0x1f0>)
 800d108:	689b      	ldr	r3, [r3, #8]
 800d10a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	f003 030f 	and.w	r3, r3, #15
 800d114:	b2db      	uxtb	r3, r3
 800d116:	009b      	lsls	r3, r3, #2
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d11c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d11e:	2b13      	cmp	r3, #19
 800d120:	f240 80cd 	bls.w	800d2be <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	895b      	ldrh	r3, [r3, #10]
 800d128:	2b03      	cmp	r3, #3
 800d12a:	f240 80ca 	bls.w	800d2c2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	781b      	ldrb	r3, [r3, #0]
 800d134:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d138:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	f000 80b7 	beq.w	800d2b0 <icmp_input+0x1b4>
 800d142:	2b08      	cmp	r3, #8
 800d144:	f040 80b7 	bne.w	800d2b6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d148:	4b69      	ldr	r3, [pc, #420]	; (800d2f0 <icmp_input+0x1f4>)
 800d14a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d14c:	4b67      	ldr	r3, [pc, #412]	; (800d2ec <icmp_input+0x1f0>)
 800d14e:	695b      	ldr	r3, [r3, #20]
 800d150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d154:	2be0      	cmp	r3, #224	; 0xe0
 800d156:	f000 80bb 	beq.w	800d2d0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d15a:	4b64      	ldr	r3, [pc, #400]	; (800d2ec <icmp_input+0x1f0>)
 800d15c:	695b      	ldr	r3, [r3, #20]
 800d15e:	4a63      	ldr	r2, [pc, #396]	; (800d2ec <icmp_input+0x1f0>)
 800d160:	6812      	ldr	r2, [r2, #0]
 800d162:	4611      	mov	r1, r2
 800d164:	4618      	mov	r0, r3
 800d166:	f000 fbed 	bl	800d944 <ip4_addr_isbroadcast_u32>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	f040 80b1 	bne.w	800d2d4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	891b      	ldrh	r3, [r3, #8]
 800d176:	2b07      	cmp	r3, #7
 800d178:	f240 80a5 	bls.w	800d2c6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d17c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d17e:	330e      	adds	r3, #14
 800d180:	4619      	mov	r1, r3
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f7f8 fcf8 	bl	8005b78 <pbuf_add_header>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d04b      	beq.n	800d226 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	891a      	ldrh	r2, [r3, #8]
 800d192:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d194:	4413      	add	r3, r2
 800d196:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	891b      	ldrh	r3, [r3, #8]
 800d19c:	8b7a      	ldrh	r2, [r7, #26]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	f0c0 809a 	bcc.w	800d2d8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d1a4:	8b7b      	ldrh	r3, [r7, #26]
 800d1a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	200e      	movs	r0, #14
 800d1ae:	f7f8 fa95 	bl	80056dc <pbuf_alloc>
 800d1b2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	f000 8090 	beq.w	800d2dc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	895b      	ldrh	r3, [r3, #10]
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1c4:	3308      	adds	r3, #8
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d203      	bcs.n	800d1d2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d1ca:	6978      	ldr	r0, [r7, #20]
 800d1cc:	f7f8 fd6a 	bl	8005ca4 <pbuf_free>
          goto icmperr;
 800d1d0:	e085      	b.n	800d2de <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d1d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f001 fbcc 	bl	800e978 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d1e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	6978      	ldr	r0, [r7, #20]
 800d1e6:	f7f8 fcd7 	bl	8005b98 <pbuf_remove_header>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d009      	beq.n	800d204 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d1f0:	4b40      	ldr	r3, [pc, #256]	; (800d2f4 <icmp_input+0x1f8>)
 800d1f2:	22b6      	movs	r2, #182	; 0xb6
 800d1f4:	4940      	ldr	r1, [pc, #256]	; (800d2f8 <icmp_input+0x1fc>)
 800d1f6:	4841      	ldr	r0, [pc, #260]	; (800d2fc <icmp_input+0x200>)
 800d1f8:	f001 fbee 	bl	800e9d8 <iprintf>
          pbuf_free(r);
 800d1fc:	6978      	ldr	r0, [r7, #20]
 800d1fe:	f7f8 fd51 	bl	8005ca4 <pbuf_free>
          goto icmperr;
 800d202:	e06c      	b.n	800d2de <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d204:	6879      	ldr	r1, [r7, #4]
 800d206:	6978      	ldr	r0, [r7, #20]
 800d208:	f7f8 fe74 	bl	8005ef4 <pbuf_copy>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d003      	beq.n	800d21a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d212:	6978      	ldr	r0, [r7, #20]
 800d214:	f7f8 fd46 	bl	8005ca4 <pbuf_free>
          goto icmperr;
 800d218:	e061      	b.n	800d2de <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f7f8 fd42 	bl	8005ca4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	607b      	str	r3, [r7, #4]
 800d224:	e00f      	b.n	800d246 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d226:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d228:	330e      	adds	r3, #14
 800d22a:	4619      	mov	r1, r3
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f7f8 fcb3 	bl	8005b98 <pbuf_remove_header>
 800d232:	4603      	mov	r3, r0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d006      	beq.n	800d246 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d238:	4b2e      	ldr	r3, [pc, #184]	; (800d2f4 <icmp_input+0x1f8>)
 800d23a:	22c7      	movs	r2, #199	; 0xc7
 800d23c:	4930      	ldr	r1, [pc, #192]	; (800d300 <icmp_input+0x204>)
 800d23e:	482f      	ldr	r0, [pc, #188]	; (800d2fc <icmp_input+0x200>)
 800d240:	f001 fbca 	bl	800e9d8 <iprintf>
          goto icmperr;
 800d244:	e04b      	b.n	800d2de <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d24c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d24e:	4619      	mov	r1, r3
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f7f8 fc91 	bl	8005b78 <pbuf_add_header>
 800d256:	4603      	mov	r3, r0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d12b      	bne.n	800d2b4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d262:	69fb      	ldr	r3, [r7, #28]
 800d264:	681a      	ldr	r2, [r3, #0]
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d26a:	4b20      	ldr	r3, [pc, #128]	; (800d2ec <icmp_input+0x1f0>)
 800d26c:	691a      	ldr	r2, [r3, #16]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	2200      	movs	r2, #0
 800d276:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	2200      	movs	r2, #0
 800d27c:	709a      	strb	r2, [r3, #2]
 800d27e:	2200      	movs	r2, #0
 800d280:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	22ff      	movs	r2, #255	; 0xff
 800d286:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2200      	movs	r2, #0
 800d28c:	729a      	strb	r2, [r3, #10]
 800d28e:	2200      	movs	r2, #0
 800d290:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	9302      	str	r3, [sp, #8]
 800d296:	2301      	movs	r3, #1
 800d298:	9301      	str	r3, [sp, #4]
 800d29a:	2300      	movs	r3, #0
 800d29c:	9300      	str	r3, [sp, #0]
 800d29e:	23ff      	movs	r3, #255	; 0xff
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	69f9      	ldr	r1, [r7, #28]
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f000 fa75 	bl	800d794 <ip4_output_if>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d2ae:	e001      	b.n	800d2b4 <icmp_input+0x1b8>
      break;
 800d2b0:	bf00      	nop
 800d2b2:	e000      	b.n	800d2b6 <icmp_input+0x1ba>
      break;
 800d2b4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f7f8 fcf4 	bl	8005ca4 <pbuf_free>
  return;
 800d2bc:	e013      	b.n	800d2e6 <icmp_input+0x1ea>
    goto lenerr;
 800d2be:	bf00      	nop
 800d2c0:	e002      	b.n	800d2c8 <icmp_input+0x1cc>
    goto lenerr;
 800d2c2:	bf00      	nop
 800d2c4:	e000      	b.n	800d2c8 <icmp_input+0x1cc>
        goto lenerr;
 800d2c6:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f7f8 fceb 	bl	8005ca4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d2ce:	e00a      	b.n	800d2e6 <icmp_input+0x1ea>
        goto icmperr;
 800d2d0:	bf00      	nop
 800d2d2:	e004      	b.n	800d2de <icmp_input+0x1e2>
        goto icmperr;
 800d2d4:	bf00      	nop
 800d2d6:	e002      	b.n	800d2de <icmp_input+0x1e2>
          goto icmperr;
 800d2d8:	bf00      	nop
 800d2da:	e000      	b.n	800d2de <icmp_input+0x1e2>
          goto icmperr;
 800d2dc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f7f8 fce0 	bl	8005ca4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d2e4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d2e6:	3728      	adds	r7, #40	; 0x28
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	20004d9c 	.word	0x20004d9c
 800d2f0:	20004db0 	.word	0x20004db0
 800d2f4:	080123e0 	.word	0x080123e0
 800d2f8:	08012418 	.word	0x08012418
 800d2fc:	08012450 	.word	0x08012450
 800d300:	08012478 	.word	0x08012478

0800d304 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	460b      	mov	r3, r1
 800d30e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d310:	78fb      	ldrb	r3, [r7, #3]
 800d312:	461a      	mov	r2, r3
 800d314:	2103      	movs	r1, #3
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 f814 	bl	800d344 <icmp_send_response>
}
 800d31c:	bf00      	nop
 800d31e:	3708      	adds	r7, #8
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	460b      	mov	r3, r1
 800d32e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d330:	78fb      	ldrb	r3, [r7, #3]
 800d332:	461a      	mov	r2, r3
 800d334:	210b      	movs	r1, #11
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f000 f804 	bl	800d344 <icmp_send_response>
}
 800d33c:	bf00      	nop
 800d33e:	3708      	adds	r7, #8
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b08c      	sub	sp, #48	; 0x30
 800d348:	af04      	add	r7, sp, #16
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	460b      	mov	r3, r1
 800d34e:	70fb      	strb	r3, [r7, #3]
 800d350:	4613      	mov	r3, r2
 800d352:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d354:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d358:	2124      	movs	r1, #36	; 0x24
 800d35a:	2022      	movs	r0, #34	; 0x22
 800d35c:	f7f8 f9be 	bl	80056dc <pbuf_alloc>
 800d360:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d362:	69fb      	ldr	r3, [r7, #28]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d04c      	beq.n	800d402 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	895b      	ldrh	r3, [r3, #10]
 800d36c:	2b23      	cmp	r3, #35	; 0x23
 800d36e:	d806      	bhi.n	800d37e <icmp_send_response+0x3a>
 800d370:	4b26      	ldr	r3, [pc, #152]	; (800d40c <icmp_send_response+0xc8>)
 800d372:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d376:	4926      	ldr	r1, [pc, #152]	; (800d410 <icmp_send_response+0xcc>)
 800d378:	4826      	ldr	r0, [pc, #152]	; (800d414 <icmp_send_response+0xd0>)
 800d37a:	f001 fb2d 	bl	800e9d8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d384:	69fb      	ldr	r3, [r7, #28]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	78fa      	ldrb	r2, [r7, #3]
 800d38e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	78ba      	ldrb	r2, [r7, #2]
 800d394:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	2200      	movs	r2, #0
 800d39a:	711a      	strb	r2, [r3, #4]
 800d39c:	2200      	movs	r2, #0
 800d39e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	719a      	strb	r2, [r3, #6]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d3aa:	69fb      	ldr	r3, [r7, #28]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	f103 0008 	add.w	r0, r3, #8
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	685b      	ldr	r3, [r3, #4]
 800d3b6:	221c      	movs	r2, #28
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	f001 fadd 	bl	800e978 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d3be:	69bb      	ldr	r3, [r7, #24]
 800d3c0:	68db      	ldr	r3, [r3, #12]
 800d3c2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d3c4:	f107 030c 	add.w	r3, r7, #12
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f000 f825 	bl	800d418 <ip4_route>
 800d3ce:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d011      	beq.n	800d3fa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	709a      	strb	r2, [r3, #2]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d3e0:	f107 020c 	add.w	r2, r7, #12
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	9302      	str	r3, [sp, #8]
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	9301      	str	r3, [sp, #4]
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	9300      	str	r3, [sp, #0]
 800d3f0:	23ff      	movs	r3, #255	; 0xff
 800d3f2:	2100      	movs	r1, #0
 800d3f4:	69f8      	ldr	r0, [r7, #28]
 800d3f6:	f000 f9cd 	bl	800d794 <ip4_output_if>
  }
  pbuf_free(q);
 800d3fa:	69f8      	ldr	r0, [r7, #28]
 800d3fc:	f7f8 fc52 	bl	8005ca4 <pbuf_free>
 800d400:	e000      	b.n	800d404 <icmp_send_response+0xc0>
    return;
 800d402:	bf00      	nop
}
 800d404:	3720      	adds	r7, #32
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	080123e0 	.word	0x080123e0
 800d410:	080124ac 	.word	0x080124ac
 800d414:	08012450 	.word	0x08012450

0800d418 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d418:	b480      	push	{r7}
 800d41a:	b085      	sub	sp, #20
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d420:	4b33      	ldr	r3, [pc, #204]	; (800d4f0 <ip4_route+0xd8>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	60fb      	str	r3, [r7, #12]
 800d426:	e036      	b.n	800d496 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d42e:	f003 0301 	and.w	r3, r3, #1
 800d432:	b2db      	uxtb	r3, r3
 800d434:	2b00      	cmp	r3, #0
 800d436:	d02b      	beq.n	800d490 <ip4_route+0x78>
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d43e:	089b      	lsrs	r3, r3, #2
 800d440:	f003 0301 	and.w	r3, r3, #1
 800d444:	b2db      	uxtb	r3, r3
 800d446:	2b00      	cmp	r3, #0
 800d448:	d022      	beq.n	800d490 <ip4_route+0x78>
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	3304      	adds	r3, #4
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d01d      	beq.n	800d490 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	3304      	adds	r3, #4
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	405a      	eors	r2, r3
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	3308      	adds	r3, #8
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	4013      	ands	r3, r2
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d101      	bne.n	800d470 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	e038      	b.n	800d4e2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d476:	f003 0302 	and.w	r3, r3, #2
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d108      	bne.n	800d490 <ip4_route+0x78>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	330c      	adds	r3, #12
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	429a      	cmp	r2, r3
 800d48a:	d101      	bne.n	800d490 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	e028      	b.n	800d4e2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	60fb      	str	r3, [r7, #12]
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d1c5      	bne.n	800d428 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d49c:	4b15      	ldr	r3, [pc, #84]	; (800d4f4 <ip4_route+0xdc>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d01a      	beq.n	800d4da <ip4_route+0xc2>
 800d4a4:	4b13      	ldr	r3, [pc, #76]	; (800d4f4 <ip4_route+0xdc>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4ac:	f003 0301 	and.w	r3, r3, #1
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d012      	beq.n	800d4da <ip4_route+0xc2>
 800d4b4:	4b0f      	ldr	r3, [pc, #60]	; (800d4f4 <ip4_route+0xdc>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4bc:	f003 0304 	and.w	r3, r3, #4
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d00a      	beq.n	800d4da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d4c4:	4b0b      	ldr	r3, [pc, #44]	; (800d4f4 <ip4_route+0xdc>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	3304      	adds	r3, #4
 800d4ca:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d004      	beq.n	800d4da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	b2db      	uxtb	r3, r3
 800d4d6:	2b7f      	cmp	r3, #127	; 0x7f
 800d4d8:	d101      	bne.n	800d4de <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	e001      	b.n	800d4e2 <ip4_route+0xca>
  }

  return netif_default;
 800d4de:	4b05      	ldr	r3, [pc, #20]	; (800d4f4 <ip4_route+0xdc>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3714      	adds	r7, #20
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop
 800d4f0:	20008300 	.word	0x20008300
 800d4f4:	20008304 	.word	0x20008304

0800d4f8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d506:	f003 0301 	and.w	r3, r3, #1
 800d50a:	b2db      	uxtb	r3, r3
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d016      	beq.n	800d53e <ip4_input_accept+0x46>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	3304      	adds	r3, #4
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d011      	beq.n	800d53e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d51a:	4b0b      	ldr	r3, [pc, #44]	; (800d548 <ip4_input_accept+0x50>)
 800d51c:	695a      	ldr	r2, [r3, #20]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	3304      	adds	r3, #4
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	429a      	cmp	r2, r3
 800d526:	d008      	beq.n	800d53a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d528:	4b07      	ldr	r3, [pc, #28]	; (800d548 <ip4_input_accept+0x50>)
 800d52a:	695b      	ldr	r3, [r3, #20]
 800d52c:	6879      	ldr	r1, [r7, #4]
 800d52e:	4618      	mov	r0, r3
 800d530:	f000 fa08 	bl	800d944 <ip4_addr_isbroadcast_u32>
 800d534:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d536:	2b00      	cmp	r3, #0
 800d538:	d001      	beq.n	800d53e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d53a:	2301      	movs	r3, #1
 800d53c:	e000      	b.n	800d540 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d53e:	2300      	movs	r3, #0
}
 800d540:	4618      	mov	r0, r3
 800d542:	3708      	adds	r7, #8
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	20004d9c 	.word	0x20004d9c

0800d54c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b086      	sub	sp, #24
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	091b      	lsrs	r3, r3, #4
 800d562:	b2db      	uxtb	r3, r3
 800d564:	2b04      	cmp	r3, #4
 800d566:	d004      	beq.n	800d572 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f7f8 fb9b 	bl	8005ca4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d56e:	2300      	movs	r3, #0
 800d570:	e107      	b.n	800d782 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	f003 030f 	and.w	r3, r3, #15
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	009b      	lsls	r3, r3, #2
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	885b      	ldrh	r3, [r3, #2]
 800d586:	b29b      	uxth	r3, r3
 800d588:	4618      	mov	r0, r3
 800d58a:	f7f7 f82d 	bl	80045e8 <lwip_htons>
 800d58e:	4603      	mov	r3, r0
 800d590:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	891b      	ldrh	r3, [r3, #8]
 800d596:	89ba      	ldrh	r2, [r7, #12]
 800d598:	429a      	cmp	r2, r3
 800d59a:	d204      	bcs.n	800d5a6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d59c:	89bb      	ldrh	r3, [r7, #12]
 800d59e:	4619      	mov	r1, r3
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f7f8 f9f9 	bl	8005998 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	895b      	ldrh	r3, [r3, #10]
 800d5aa:	89fa      	ldrh	r2, [r7, #14]
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d807      	bhi.n	800d5c0 <ip4_input+0x74>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	891b      	ldrh	r3, [r3, #8]
 800d5b4:	89ba      	ldrh	r2, [r7, #12]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d802      	bhi.n	800d5c0 <ip4_input+0x74>
 800d5ba:	89fb      	ldrh	r3, [r7, #14]
 800d5bc:	2b13      	cmp	r3, #19
 800d5be:	d804      	bhi.n	800d5ca <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f7f8 fb6f 	bl	8005ca4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	e0db      	b.n	800d782 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	691b      	ldr	r3, [r3, #16]
 800d5ce:	4a6f      	ldr	r2, [pc, #444]	; (800d78c <ip4_input+0x240>)
 800d5d0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	68db      	ldr	r3, [r3, #12]
 800d5d6:	4a6d      	ldr	r2, [pc, #436]	; (800d78c <ip4_input+0x240>)
 800d5d8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d5da:	4b6c      	ldr	r3, [pc, #432]	; (800d78c <ip4_input+0x240>)
 800d5dc:	695b      	ldr	r3, [r3, #20]
 800d5de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d5e2:	2be0      	cmp	r3, #224	; 0xe0
 800d5e4:	d112      	bne.n	800d60c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5ec:	f003 0301 	and.w	r3, r3, #1
 800d5f0:	b2db      	uxtb	r3, r3
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d007      	beq.n	800d606 <ip4_input+0xba>
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	3304      	adds	r3, #4
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d002      	beq.n	800d606 <ip4_input+0xba>
      netif = inp;
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	613b      	str	r3, [r7, #16]
 800d604:	e02a      	b.n	800d65c <ip4_input+0x110>
    } else {
      netif = NULL;
 800d606:	2300      	movs	r3, #0
 800d608:	613b      	str	r3, [r7, #16]
 800d60a:	e027      	b.n	800d65c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d60c:	6838      	ldr	r0, [r7, #0]
 800d60e:	f7ff ff73 	bl	800d4f8 <ip4_input_accept>
 800d612:	4603      	mov	r3, r0
 800d614:	2b00      	cmp	r3, #0
 800d616:	d002      	beq.n	800d61e <ip4_input+0xd2>
      netif = inp;
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	613b      	str	r3, [r7, #16]
 800d61c:	e01e      	b.n	800d65c <ip4_input+0x110>
    } else {
      netif = NULL;
 800d61e:	2300      	movs	r3, #0
 800d620:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d622:	4b5a      	ldr	r3, [pc, #360]	; (800d78c <ip4_input+0x240>)
 800d624:	695b      	ldr	r3, [r3, #20]
 800d626:	b2db      	uxtb	r3, r3
 800d628:	2b7f      	cmp	r3, #127	; 0x7f
 800d62a:	d017      	beq.n	800d65c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d62c:	4b58      	ldr	r3, [pc, #352]	; (800d790 <ip4_input+0x244>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	613b      	str	r3, [r7, #16]
 800d632:	e00e      	b.n	800d652 <ip4_input+0x106>
          if (netif == inp) {
 800d634:	693a      	ldr	r2, [r7, #16]
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	429a      	cmp	r2, r3
 800d63a:	d006      	beq.n	800d64a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d63c:	6938      	ldr	r0, [r7, #16]
 800d63e:	f7ff ff5b 	bl	800d4f8 <ip4_input_accept>
 800d642:	4603      	mov	r3, r0
 800d644:	2b00      	cmp	r3, #0
 800d646:	d108      	bne.n	800d65a <ip4_input+0x10e>
 800d648:	e000      	b.n	800d64c <ip4_input+0x100>
            continue;
 800d64a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	613b      	str	r3, [r7, #16]
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d1ed      	bne.n	800d634 <ip4_input+0xe8>
 800d658:	e000      	b.n	800d65c <ip4_input+0x110>
            break;
 800d65a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d65c:	4b4b      	ldr	r3, [pc, #300]	; (800d78c <ip4_input+0x240>)
 800d65e:	691b      	ldr	r3, [r3, #16]
 800d660:	6839      	ldr	r1, [r7, #0]
 800d662:	4618      	mov	r0, r3
 800d664:	f000 f96e 	bl	800d944 <ip4_addr_isbroadcast_u32>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d105      	bne.n	800d67a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d66e:	4b47      	ldr	r3, [pc, #284]	; (800d78c <ip4_input+0x240>)
 800d670:	691b      	ldr	r3, [r3, #16]
 800d672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d676:	2be0      	cmp	r3, #224	; 0xe0
 800d678:	d104      	bne.n	800d684 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f7f8 fb12 	bl	8005ca4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d680:	2300      	movs	r3, #0
 800d682:	e07e      	b.n	800d782 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d104      	bne.n	800d694 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f7f8 fb0a 	bl	8005ca4 <pbuf_free>
    return ERR_OK;
 800d690:	2300      	movs	r3, #0
 800d692:	e076      	b.n	800d782 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	88db      	ldrh	r3, [r3, #6]
 800d698:	b29b      	uxth	r3, r3
 800d69a:	461a      	mov	r2, r3
 800d69c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d6a0:	4013      	ands	r3, r2
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d00b      	beq.n	800d6be <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 fd22 	bl	800e0f0 <ip4_reass>
 800d6ac:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d101      	bne.n	800d6b8 <ip4_input+0x16c>
      return ERR_OK;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	e064      	b.n	800d782 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d6be:	4a33      	ldr	r2, [pc, #204]	; (800d78c <ip4_input+0x240>)
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d6c4:	4a31      	ldr	r2, [pc, #196]	; (800d78c <ip4_input+0x240>)
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d6ca:	4a30      	ldr	r2, [pc, #192]	; (800d78c <ip4_input+0x240>)
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	f003 030f 	and.w	r3, r3, #15
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	009b      	lsls	r3, r3, #2
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	4b2a      	ldr	r3, [pc, #168]	; (800d78c <ip4_input+0x240>)
 800d6e2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d6e4:	89fb      	ldrh	r3, [r7, #14]
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f7f8 fa55 	bl	8005b98 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	7a5b      	ldrb	r3, [r3, #9]
 800d6f2:	2b11      	cmp	r3, #17
 800d6f4:	d006      	beq.n	800d704 <ip4_input+0x1b8>
 800d6f6:	2b11      	cmp	r3, #17
 800d6f8:	dc13      	bgt.n	800d722 <ip4_input+0x1d6>
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d00c      	beq.n	800d718 <ip4_input+0x1cc>
 800d6fe:	2b06      	cmp	r3, #6
 800d700:	d005      	beq.n	800d70e <ip4_input+0x1c2>
 800d702:	e00e      	b.n	800d722 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d704:	6839      	ldr	r1, [r7, #0]
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f7fe f950 	bl	800b9ac <udp_input>
        break;
 800d70c:	e026      	b.n	800d75c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d70e:	6839      	ldr	r1, [r7, #0]
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f7fa f991 	bl	8007a38 <tcp_input>
        break;
 800d716:	e021      	b.n	800d75c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d718:	6839      	ldr	r1, [r7, #0]
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7ff fcee 	bl	800d0fc <icmp_input>
        break;
 800d720:	e01c      	b.n	800d75c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d722:	4b1a      	ldr	r3, [pc, #104]	; (800d78c <ip4_input+0x240>)
 800d724:	695b      	ldr	r3, [r3, #20]
 800d726:	6939      	ldr	r1, [r7, #16]
 800d728:	4618      	mov	r0, r3
 800d72a:	f000 f90b 	bl	800d944 <ip4_addr_isbroadcast_u32>
 800d72e:	4603      	mov	r3, r0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d10f      	bne.n	800d754 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d734:	4b15      	ldr	r3, [pc, #84]	; (800d78c <ip4_input+0x240>)
 800d736:	695b      	ldr	r3, [r3, #20]
 800d738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d73c:	2be0      	cmp	r3, #224	; 0xe0
 800d73e:	d009      	beq.n	800d754 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d740:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d744:	4619      	mov	r1, r3
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7f8 fa99 	bl	8005c7e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d74c:	2102      	movs	r1, #2
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f7ff fdd8 	bl	800d304 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f7f8 faa5 	bl	8005ca4 <pbuf_free>
        break;
 800d75a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d75c:	4b0b      	ldr	r3, [pc, #44]	; (800d78c <ip4_input+0x240>)
 800d75e:	2200      	movs	r2, #0
 800d760:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d762:	4b0a      	ldr	r3, [pc, #40]	; (800d78c <ip4_input+0x240>)
 800d764:	2200      	movs	r2, #0
 800d766:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d768:	4b08      	ldr	r3, [pc, #32]	; (800d78c <ip4_input+0x240>)
 800d76a:	2200      	movs	r2, #0
 800d76c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d76e:	4b07      	ldr	r3, [pc, #28]	; (800d78c <ip4_input+0x240>)
 800d770:	2200      	movs	r2, #0
 800d772:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d774:	4b05      	ldr	r3, [pc, #20]	; (800d78c <ip4_input+0x240>)
 800d776:	2200      	movs	r2, #0
 800d778:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d77a:	4b04      	ldr	r3, [pc, #16]	; (800d78c <ip4_input+0x240>)
 800d77c:	2200      	movs	r2, #0
 800d77e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d780:	2300      	movs	r3, #0
}
 800d782:	4618      	mov	r0, r3
 800d784:	3718      	adds	r7, #24
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	20004d9c 	.word	0x20004d9c
 800d790:	20008300 	.word	0x20008300

0800d794 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b08a      	sub	sp, #40	; 0x28
 800d798:	af04      	add	r7, sp, #16
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
 800d7a0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d009      	beq.n	800d7c0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d003      	beq.n	800d7ba <ip4_output_if+0x26>
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d102      	bne.n	800d7c0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7bc:	3304      	adds	r3, #4
 800d7be:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d7c0:	78fa      	ldrb	r2, [r7, #3]
 800d7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c4:	9302      	str	r3, [sp, #8]
 800d7c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d7ca:	9301      	str	r3, [sp, #4]
 800d7cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d7d0:	9300      	str	r3, [sp, #0]
 800d7d2:	4613      	mov	r3, r2
 800d7d4:	687a      	ldr	r2, [r7, #4]
 800d7d6:	6979      	ldr	r1, [r7, #20]
 800d7d8:	68f8      	ldr	r0, [r7, #12]
 800d7da:	f000 f805 	bl	800d7e8 <ip4_output_if_src>
 800d7de:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3718      	adds	r7, #24
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b088      	sub	sp, #32
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	60f8      	str	r0, [r7, #12]
 800d7f0:	60b9      	str	r1, [r7, #8]
 800d7f2:	607a      	str	r2, [r7, #4]
 800d7f4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	7b9b      	ldrb	r3, [r3, #14]
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d006      	beq.n	800d80c <ip4_output_if_src+0x24>
 800d7fe:	4b4b      	ldr	r3, [pc, #300]	; (800d92c <ip4_output_if_src+0x144>)
 800d800:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d804:	494a      	ldr	r1, [pc, #296]	; (800d930 <ip4_output_if_src+0x148>)
 800d806:	484b      	ldr	r0, [pc, #300]	; (800d934 <ip4_output_if_src+0x14c>)
 800d808:	f001 f8e6 	bl	800e9d8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d060      	beq.n	800d8d4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d812:	2314      	movs	r3, #20
 800d814:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d816:	2114      	movs	r1, #20
 800d818:	68f8      	ldr	r0, [r7, #12]
 800d81a:	f7f8 f9ad 	bl	8005b78 <pbuf_add_header>
 800d81e:	4603      	mov	r3, r0
 800d820:	2b00      	cmp	r3, #0
 800d822:	d002      	beq.n	800d82a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d824:	f06f 0301 	mvn.w	r3, #1
 800d828:	e07c      	b.n	800d924 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	895b      	ldrh	r3, [r3, #10]
 800d834:	2b13      	cmp	r3, #19
 800d836:	d806      	bhi.n	800d846 <ip4_output_if_src+0x5e>
 800d838:	4b3c      	ldr	r3, [pc, #240]	; (800d92c <ip4_output_if_src+0x144>)
 800d83a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d83e:	493e      	ldr	r1, [pc, #248]	; (800d938 <ip4_output_if_src+0x150>)
 800d840:	483c      	ldr	r0, [pc, #240]	; (800d934 <ip4_output_if_src+0x14c>)
 800d842:	f001 f8c9 	bl	800e9d8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d846:	69fb      	ldr	r3, [r7, #28]
 800d848:	78fa      	ldrb	r2, [r7, #3]
 800d84a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d84c:	69fb      	ldr	r3, [r7, #28]
 800d84e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d852:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681a      	ldr	r2, [r3, #0]
 800d858:	69fb      	ldr	r3, [r7, #28]
 800d85a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d85c:	8b7b      	ldrh	r3, [r7, #26]
 800d85e:	089b      	lsrs	r3, r3, #2
 800d860:	b29b      	uxth	r3, r3
 800d862:	b2db      	uxtb	r3, r3
 800d864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d868:	b2da      	uxtb	r2, r3
 800d86a:	69fb      	ldr	r3, [r7, #28]
 800d86c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d874:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	891b      	ldrh	r3, [r3, #8]
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7f6 feb4 	bl	80045e8 <lwip_htons>
 800d880:	4603      	mov	r3, r0
 800d882:	461a      	mov	r2, r3
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d888:	69fb      	ldr	r3, [r7, #28]
 800d88a:	2200      	movs	r2, #0
 800d88c:	719a      	strb	r2, [r3, #6]
 800d88e:	2200      	movs	r2, #0
 800d890:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d892:	4b2a      	ldr	r3, [pc, #168]	; (800d93c <ip4_output_if_src+0x154>)
 800d894:	881b      	ldrh	r3, [r3, #0]
 800d896:	4618      	mov	r0, r3
 800d898:	f7f6 fea6 	bl	80045e8 <lwip_htons>
 800d89c:	4603      	mov	r3, r0
 800d89e:	461a      	mov	r2, r3
 800d8a0:	69fb      	ldr	r3, [r7, #28]
 800d8a2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d8a4:	4b25      	ldr	r3, [pc, #148]	; (800d93c <ip4_output_if_src+0x154>)
 800d8a6:	881b      	ldrh	r3, [r3, #0]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	b29a      	uxth	r2, r3
 800d8ac:	4b23      	ldr	r3, [pc, #140]	; (800d93c <ip4_output_if_src+0x154>)
 800d8ae:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d104      	bne.n	800d8c0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d8b6:	4b22      	ldr	r3, [pc, #136]	; (800d940 <ip4_output_if_src+0x158>)
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	69fb      	ldr	r3, [r7, #28]
 800d8bc:	60da      	str	r2, [r3, #12]
 800d8be:	e003      	b.n	800d8c8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d8c8:	69fb      	ldr	r3, [r7, #28]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	729a      	strb	r2, [r3, #10]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	72da      	strb	r2, [r3, #11]
 800d8d2:	e00f      	b.n	800d8f4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	895b      	ldrh	r3, [r3, #10]
 800d8d8:	2b13      	cmp	r3, #19
 800d8da:	d802      	bhi.n	800d8e2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d8dc:	f06f 0301 	mvn.w	r3, #1
 800d8e0:	e020      	b.n	800d924 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	685b      	ldr	r3, [r3, #4]
 800d8e6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	691b      	ldr	r3, [r3, #16]
 800d8ec:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d8ee:	f107 0314 	add.w	r3, r7, #20
 800d8f2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00c      	beq.n	800d916 <ip4_output_if_src+0x12e>
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	891a      	ldrh	r2, [r3, #8]
 800d900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d902:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d904:	429a      	cmp	r2, r3
 800d906:	d906      	bls.n	800d916 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d908:	687a      	ldr	r2, [r7, #4]
 800d90a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d90c:	68f8      	ldr	r0, [r7, #12]
 800d90e:	f000 fde3 	bl	800e4d8 <ip4_frag>
 800d912:	4603      	mov	r3, r0
 800d914:	e006      	b.n	800d924 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d918:	695b      	ldr	r3, [r3, #20]
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	68f9      	ldr	r1, [r7, #12]
 800d91e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d920:	4798      	blx	r3
 800d922:	4603      	mov	r3, r0
}
 800d924:	4618      	mov	r0, r3
 800d926:	3720      	adds	r7, #32
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	080124d8 	.word	0x080124d8
 800d930:	0801250c 	.word	0x0801250c
 800d934:	08012518 	.word	0x08012518
 800d938:	08012540 	.word	0x08012540
 800d93c:	2000845e 	.word	0x2000845e
 800d940:	08012918 	.word	0x08012918

0800d944 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d944:	b480      	push	{r7}
 800d946:	b085      	sub	sp, #20
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d958:	d002      	beq.n	800d960 <ip4_addr_isbroadcast_u32+0x1c>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d101      	bne.n	800d964 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d960:	2301      	movs	r3, #1
 800d962:	e02a      	b.n	800d9ba <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d96a:	f003 0302 	and.w	r3, r3, #2
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d101      	bne.n	800d976 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d972:	2300      	movs	r3, #0
 800d974:	e021      	b.n	800d9ba <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	3304      	adds	r3, #4
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	687a      	ldr	r2, [r7, #4]
 800d97e:	429a      	cmp	r2, r3
 800d980:	d101      	bne.n	800d986 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d982:	2300      	movs	r3, #0
 800d984:	e019      	b.n	800d9ba <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d986:	68fa      	ldr	r2, [r7, #12]
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	3304      	adds	r3, #4
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	405a      	eors	r2, r3
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	3308      	adds	r3, #8
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4013      	ands	r3, r2
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d10d      	bne.n	800d9b8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	3308      	adds	r3, #8
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	43da      	mvns	r2, r3
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	3308      	adds	r3, #8
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d101      	bne.n	800d9b8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	e000      	b.n	800d9ba <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d9b8:	2300      	movs	r3, #0
  }
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3714      	adds	r7, #20
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr
	...

0800d9c8 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800d9d0:	2210      	movs	r2, #16
 800d9d2:	4904      	ldr	r1, [pc, #16]	; (800d9e4 <ip4addr_ntoa+0x1c>)
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 f807 	bl	800d9e8 <ip4addr_ntoa_r>
 800d9da:	4603      	mov	r3, r0
}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3708      	adds	r7, #8
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	20008460 	.word	0x20008460

0800d9e8 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b08d      	sub	sp, #52	; 0x34
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	60b9      	str	r1, [r7, #8]
 800d9f2:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800da02:	f107 0318 	add.w	r3, r7, #24
 800da06:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800da08:	2300      	movs	r3, #0
 800da0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da0e:	e058      	b.n	800dac2 <ip4addr_ntoa_r+0xda>
    i = 0;
 800da10:	2300      	movs	r3, #0
 800da12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800da16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da18:	781a      	ldrb	r2, [r3, #0]
 800da1a:	4b32      	ldr	r3, [pc, #200]	; (800dae4 <ip4addr_ntoa_r+0xfc>)
 800da1c:	fba3 1302 	umull	r1, r3, r3, r2
 800da20:	08d9      	lsrs	r1, r3, #3
 800da22:	460b      	mov	r3, r1
 800da24:	009b      	lsls	r3, r3, #2
 800da26:	440b      	add	r3, r1
 800da28:	005b      	lsls	r3, r3, #1
 800da2a:	1ad3      	subs	r3, r2, r3
 800da2c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800da2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	4a2c      	ldr	r2, [pc, #176]	; (800dae4 <ip4addr_ntoa_r+0xfc>)
 800da34:	fba2 2303 	umull	r2, r3, r2, r3
 800da38:	08db      	lsrs	r3, r3, #3
 800da3a:	b2da      	uxtb	r2, r3
 800da3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800da40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da44:	1c5a      	adds	r2, r3, #1
 800da46:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800da4a:	4619      	mov	r1, r3
 800da4c:	7ffb      	ldrb	r3, [r7, #31]
 800da4e:	3330      	adds	r3, #48	; 0x30
 800da50:	b2da      	uxtb	r2, r3
 800da52:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800da56:	443b      	add	r3, r7
 800da58:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800da5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d1d8      	bne.n	800da16 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800da64:	e011      	b.n	800da8a <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800da66:	6a3b      	ldr	r3, [r7, #32]
 800da68:	1c5a      	adds	r2, r3, #1
 800da6a:	623a      	str	r2, [r7, #32]
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	429a      	cmp	r2, r3
 800da70:	dc01      	bgt.n	800da76 <ip4addr_ntoa_r+0x8e>
        return NULL;
 800da72:	2300      	movs	r3, #0
 800da74:	e030      	b.n	800dad8 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800da76:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800da7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da7c:	1c59      	adds	r1, r3, #1
 800da7e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800da80:	3230      	adds	r2, #48	; 0x30
 800da82:	443a      	add	r2, r7
 800da84:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800da88:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800da8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da8e:	1e5a      	subs	r2, r3, #1
 800da90:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800da94:	2b00      	cmp	r3, #0
 800da96:	d1e6      	bne.n	800da66 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800da98:	6a3b      	ldr	r3, [r7, #32]
 800da9a:	1c5a      	adds	r2, r3, #1
 800da9c:	623a      	str	r2, [r7, #32]
 800da9e:	687a      	ldr	r2, [r7, #4]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	dc01      	bgt.n	800daa8 <ip4addr_ntoa_r+0xc0>
      return NULL;
 800daa4:	2300      	movs	r3, #0
 800daa6:	e017      	b.n	800dad8 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800daa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daaa:	1c5a      	adds	r2, r3, #1
 800daac:	62fa      	str	r2, [r7, #44]	; 0x2c
 800daae:	222e      	movs	r2, #46	; 0x2e
 800dab0:	701a      	strb	r2, [r3, #0]
    ap++;
 800dab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab4:	3301      	adds	r3, #1
 800dab6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800dab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dabc:	3301      	adds	r3, #1
 800dabe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dac2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dac6:	2b03      	cmp	r3, #3
 800dac8:	d9a2      	bls.n	800da10 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800daca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dacc:	3b01      	subs	r3, #1
 800dace:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad2:	2200      	movs	r2, #0
 800dad4:	701a      	strb	r2, [r3, #0]
  return buf;
 800dad6:	68bb      	ldr	r3, [r7, #8]
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3734      	adds	r7, #52	; 0x34
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr
 800dae4:	cccccccd 	.word	0xcccccccd

0800dae8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b084      	sub	sp, #16
 800daec:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800daee:	2300      	movs	r3, #0
 800daf0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800daf2:	4b12      	ldr	r3, [pc, #72]	; (800db3c <ip_reass_tmr+0x54>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800daf8:	e018      	b.n	800db2c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	7fdb      	ldrb	r3, [r3, #31]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d00b      	beq.n	800db1a <ip_reass_tmr+0x32>
      r->timer--;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	7fdb      	ldrb	r3, [r3, #31]
 800db06:	3b01      	subs	r3, #1
 800db08:	b2da      	uxtb	r2, r3
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	60fb      	str	r3, [r7, #12]
 800db18:	e008      	b.n	800db2c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800db24:	68b9      	ldr	r1, [r7, #8]
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 f80a 	bl	800db40 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d1e3      	bne.n	800dafa <ip_reass_tmr+0x12>
    }
  }
}
 800db32:	bf00      	nop
 800db34:	bf00      	nop
 800db36:	3710      	adds	r7, #16
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	20008470 	.word	0x20008470

0800db40 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b088      	sub	sp, #32
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800db4a:	2300      	movs	r3, #0
 800db4c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800db4e:	683a      	ldr	r2, [r7, #0]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	429a      	cmp	r2, r3
 800db54:	d105      	bne.n	800db62 <ip_reass_free_complete_datagram+0x22>
 800db56:	4b45      	ldr	r3, [pc, #276]	; (800dc6c <ip_reass_free_complete_datagram+0x12c>)
 800db58:	22ab      	movs	r2, #171	; 0xab
 800db5a:	4945      	ldr	r1, [pc, #276]	; (800dc70 <ip_reass_free_complete_datagram+0x130>)
 800db5c:	4845      	ldr	r0, [pc, #276]	; (800dc74 <ip_reass_free_complete_datagram+0x134>)
 800db5e:	f000 ff3b 	bl	800e9d8 <iprintf>
  if (prev != NULL) {
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d00a      	beq.n	800db7e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	687a      	ldr	r2, [r7, #4]
 800db6e:	429a      	cmp	r2, r3
 800db70:	d005      	beq.n	800db7e <ip_reass_free_complete_datagram+0x3e>
 800db72:	4b3e      	ldr	r3, [pc, #248]	; (800dc6c <ip_reass_free_complete_datagram+0x12c>)
 800db74:	22ad      	movs	r2, #173	; 0xad
 800db76:	4940      	ldr	r1, [pc, #256]	; (800dc78 <ip_reass_free_complete_datagram+0x138>)
 800db78:	483e      	ldr	r0, [pc, #248]	; (800dc74 <ip_reass_free_complete_datagram+0x134>)
 800db7a:	f000 ff2d 	bl	800e9d8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	685b      	ldr	r3, [r3, #4]
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	889b      	ldrh	r3, [r3, #4]
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d12a      	bne.n	800dbe6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800db9e:	69bb      	ldr	r3, [r7, #24]
 800dba0:	6858      	ldr	r0, [r3, #4]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	3308      	adds	r3, #8
 800dba6:	2214      	movs	r2, #20
 800dba8:	4619      	mov	r1, r3
 800dbaa:	f000 fee5 	bl	800e978 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800dbae:	2101      	movs	r1, #1
 800dbb0:	69b8      	ldr	r0, [r7, #24]
 800dbb2:	f7ff fbb7 	bl	800d324 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800dbb6:	69b8      	ldr	r0, [r7, #24]
 800dbb8:	f7f8 f8fc 	bl	8005db4 <pbuf_clen>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dbc0:	8bfa      	ldrh	r2, [r7, #30]
 800dbc2:	8a7b      	ldrh	r3, [r7, #18]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbca:	db05      	blt.n	800dbd8 <ip_reass_free_complete_datagram+0x98>
 800dbcc:	4b27      	ldr	r3, [pc, #156]	; (800dc6c <ip_reass_free_complete_datagram+0x12c>)
 800dbce:	22bc      	movs	r2, #188	; 0xbc
 800dbd0:	492a      	ldr	r1, [pc, #168]	; (800dc7c <ip_reass_free_complete_datagram+0x13c>)
 800dbd2:	4828      	ldr	r0, [pc, #160]	; (800dc74 <ip_reass_free_complete_datagram+0x134>)
 800dbd4:	f000 ff00 	bl	800e9d8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800dbd8:	8bfa      	ldrh	r2, [r7, #30]
 800dbda:	8a7b      	ldrh	r3, [r7, #18]
 800dbdc:	4413      	add	r3, r2
 800dbde:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800dbe0:	69b8      	ldr	r0, [r7, #24]
 800dbe2:	f7f8 f85f 	bl	8005ca4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800dbec:	e01f      	b.n	800dc2e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	617b      	str	r3, [r7, #20]
    pcur = p;
 800dbf4:	69bb      	ldr	r3, [r7, #24]
 800dbf6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800dbfe:	68f8      	ldr	r0, [r7, #12]
 800dc00:	f7f8 f8d8 	bl	8005db4 <pbuf_clen>
 800dc04:	4603      	mov	r3, r0
 800dc06:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dc08:	8bfa      	ldrh	r2, [r7, #30]
 800dc0a:	8a7b      	ldrh	r3, [r7, #18]
 800dc0c:	4413      	add	r3, r2
 800dc0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc12:	db05      	blt.n	800dc20 <ip_reass_free_complete_datagram+0xe0>
 800dc14:	4b15      	ldr	r3, [pc, #84]	; (800dc6c <ip_reass_free_complete_datagram+0x12c>)
 800dc16:	22cc      	movs	r2, #204	; 0xcc
 800dc18:	4918      	ldr	r1, [pc, #96]	; (800dc7c <ip_reass_free_complete_datagram+0x13c>)
 800dc1a:	4816      	ldr	r0, [pc, #88]	; (800dc74 <ip_reass_free_complete_datagram+0x134>)
 800dc1c:	f000 fedc 	bl	800e9d8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800dc20:	8bfa      	ldrh	r2, [r7, #30]
 800dc22:	8a7b      	ldrh	r3, [r7, #18]
 800dc24:	4413      	add	r3, r2
 800dc26:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800dc28:	68f8      	ldr	r0, [r7, #12]
 800dc2a:	f7f8 f83b 	bl	8005ca4 <pbuf_free>
  while (p != NULL) {
 800dc2e:	69bb      	ldr	r3, [r7, #24]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d1dc      	bne.n	800dbee <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800dc34:	6839      	ldr	r1, [r7, #0]
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f000 f8c2 	bl	800ddc0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800dc3c:	4b10      	ldr	r3, [pc, #64]	; (800dc80 <ip_reass_free_complete_datagram+0x140>)
 800dc3e:	881b      	ldrh	r3, [r3, #0]
 800dc40:	8bfa      	ldrh	r2, [r7, #30]
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d905      	bls.n	800dc52 <ip_reass_free_complete_datagram+0x112>
 800dc46:	4b09      	ldr	r3, [pc, #36]	; (800dc6c <ip_reass_free_complete_datagram+0x12c>)
 800dc48:	22d2      	movs	r2, #210	; 0xd2
 800dc4a:	490e      	ldr	r1, [pc, #56]	; (800dc84 <ip_reass_free_complete_datagram+0x144>)
 800dc4c:	4809      	ldr	r0, [pc, #36]	; (800dc74 <ip_reass_free_complete_datagram+0x134>)
 800dc4e:	f000 fec3 	bl	800e9d8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800dc52:	4b0b      	ldr	r3, [pc, #44]	; (800dc80 <ip_reass_free_complete_datagram+0x140>)
 800dc54:	881a      	ldrh	r2, [r3, #0]
 800dc56:	8bfb      	ldrh	r3, [r7, #30]
 800dc58:	1ad3      	subs	r3, r2, r3
 800dc5a:	b29a      	uxth	r2, r3
 800dc5c:	4b08      	ldr	r3, [pc, #32]	; (800dc80 <ip_reass_free_complete_datagram+0x140>)
 800dc5e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800dc60:	8bfb      	ldrh	r3, [r7, #30]
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3720      	adds	r7, #32
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
 800dc6a:	bf00      	nop
 800dc6c:	08012570 	.word	0x08012570
 800dc70:	080125ac 	.word	0x080125ac
 800dc74:	080125b8 	.word	0x080125b8
 800dc78:	080125e0 	.word	0x080125e0
 800dc7c:	080125f4 	.word	0x080125f4
 800dc80:	20008474 	.word	0x20008474
 800dc84:	08012614 	.word	0x08012614

0800dc88 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b08a      	sub	sp, #40	; 0x28
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800dc92:	2300      	movs	r3, #0
 800dc94:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800dc96:	2300      	movs	r3, #0
 800dc98:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800dca2:	2300      	movs	r3, #0
 800dca4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800dca6:	4b28      	ldr	r3, [pc, #160]	; (800dd48 <ip_reass_remove_oldest_datagram+0xc0>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dcac:	e030      	b.n	800dd10 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800dcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb0:	695a      	ldr	r2, [r3, #20]
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	68db      	ldr	r3, [r3, #12]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d10c      	bne.n	800dcd4 <ip_reass_remove_oldest_datagram+0x4c>
 800dcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbc:	699a      	ldr	r2, [r3, #24]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	691b      	ldr	r3, [r3, #16]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d106      	bne.n	800dcd4 <ip_reass_remove_oldest_datagram+0x4c>
 800dcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc8:	899a      	ldrh	r2, [r3, #12]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	889b      	ldrh	r3, [r3, #4]
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d014      	beq.n	800dcfe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800dcda:	6a3b      	ldr	r3, [r7, #32]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d104      	bne.n	800dcea <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800dce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	61bb      	str	r3, [r7, #24]
 800dce8:	e009      	b.n	800dcfe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800dcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcec:	7fda      	ldrb	r2, [r3, #31]
 800dcee:	6a3b      	ldr	r3, [r7, #32]
 800dcf0:	7fdb      	ldrb	r3, [r3, #31]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d803      	bhi.n	800dcfe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800dcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800dcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d001      	beq.n	800dd0a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800dd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd08:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800dd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d1cb      	bne.n	800dcae <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800dd16:	6a3b      	ldr	r3, [r7, #32]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d008      	beq.n	800dd2e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800dd1c:	69b9      	ldr	r1, [r7, #24]
 800dd1e:	6a38      	ldr	r0, [r7, #32]
 800dd20:	f7ff ff0e 	bl	800db40 <ip_reass_free_complete_datagram>
 800dd24:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800dd26:	697a      	ldr	r2, [r7, #20]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	4413      	add	r3, r2
 800dd2c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800dd2e:	697a      	ldr	r2, [r7, #20]
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	da02      	bge.n	800dd3c <ip_reass_remove_oldest_datagram+0xb4>
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	dcac      	bgt.n	800dc96 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800dd3c:	697b      	ldr	r3, [r7, #20]
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3728      	adds	r7, #40	; 0x28
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	20008470 	.word	0x20008470

0800dd4c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b084      	sub	sp, #16
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dd56:	2004      	movs	r0, #4
 800dd58:	f7f7 f8be 	bl	8004ed8 <memp_malloc>
 800dd5c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d110      	bne.n	800dd86 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800dd64:	6839      	ldr	r1, [r7, #0]
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f7ff ff8e 	bl	800dc88 <ip_reass_remove_oldest_datagram>
 800dd6c:	4602      	mov	r2, r0
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	4293      	cmp	r3, r2
 800dd72:	dc03      	bgt.n	800dd7c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dd74:	2004      	movs	r0, #4
 800dd76:	f7f7 f8af 	bl	8004ed8 <memp_malloc>
 800dd7a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d101      	bne.n	800dd86 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800dd82:	2300      	movs	r3, #0
 800dd84:	e016      	b.n	800ddb4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800dd86:	2220      	movs	r2, #32
 800dd88:	2100      	movs	r1, #0
 800dd8a:	68f8      	ldr	r0, [r7, #12]
 800dd8c:	f000 fe1c 	bl	800e9c8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	220f      	movs	r2, #15
 800dd94:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800dd96:	4b09      	ldr	r3, [pc, #36]	; (800ddbc <ip_reass_enqueue_new_datagram+0x70>)
 800dd98:	681a      	ldr	r2, [r3, #0]
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800dd9e:	4a07      	ldr	r2, [pc, #28]	; (800ddbc <ip_reass_enqueue_new_datagram+0x70>)
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	3308      	adds	r3, #8
 800dda8:	2214      	movs	r2, #20
 800ddaa:	6879      	ldr	r1, [r7, #4]
 800ddac:	4618      	mov	r0, r3
 800ddae:	f000 fde3 	bl	800e978 <memcpy>
  return ipr;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3710      	adds	r7, #16
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	20008470 	.word	0x20008470

0800ddc0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800ddca:	4b10      	ldr	r3, [pc, #64]	; (800de0c <ip_reass_dequeue_datagram+0x4c>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	687a      	ldr	r2, [r7, #4]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d104      	bne.n	800ddde <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4a0c      	ldr	r2, [pc, #48]	; (800de0c <ip_reass_dequeue_datagram+0x4c>)
 800ddda:	6013      	str	r3, [r2, #0]
 800dddc:	e00d      	b.n	800ddfa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d106      	bne.n	800ddf2 <ip_reass_dequeue_datagram+0x32>
 800dde4:	4b0a      	ldr	r3, [pc, #40]	; (800de10 <ip_reass_dequeue_datagram+0x50>)
 800dde6:	f240 1245 	movw	r2, #325	; 0x145
 800ddea:	490a      	ldr	r1, [pc, #40]	; (800de14 <ip_reass_dequeue_datagram+0x54>)
 800ddec:	480a      	ldr	r0, [pc, #40]	; (800de18 <ip_reass_dequeue_datagram+0x58>)
 800ddee:	f000 fdf3 	bl	800e9d8 <iprintf>
    prev->next = ipr->next;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681a      	ldr	r2, [r3, #0]
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800ddfa:	6879      	ldr	r1, [r7, #4]
 800ddfc:	2004      	movs	r0, #4
 800ddfe:	f7f7 f8db 	bl	8004fb8 <memp_free>
}
 800de02:	bf00      	nop
 800de04:	3708      	adds	r7, #8
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	20008470 	.word	0x20008470
 800de10:	08012570 	.word	0x08012570
 800de14:	08012638 	.word	0x08012638
 800de18:	080125b8 	.word	0x080125b8

0800de1c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b08c      	sub	sp, #48	; 0x30
 800de20:	af00      	add	r7, sp, #0
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	60b9      	str	r1, [r7, #8]
 800de26:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800de28:	2300      	movs	r3, #0
 800de2a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800de2c:	2301      	movs	r3, #1
 800de2e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800de36:	69fb      	ldr	r3, [r7, #28]
 800de38:	885b      	ldrh	r3, [r3, #2]
 800de3a:	b29b      	uxth	r3, r3
 800de3c:	4618      	mov	r0, r3
 800de3e:	f7f6 fbd3 	bl	80045e8 <lwip_htons>
 800de42:	4603      	mov	r3, r0
 800de44:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800de46:	69fb      	ldr	r3, [r7, #28]
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	f003 030f 	and.w	r3, r3, #15
 800de4e:	b2db      	uxtb	r3, r3
 800de50:	009b      	lsls	r3, r3, #2
 800de52:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800de54:	7e7b      	ldrb	r3, [r7, #25]
 800de56:	b29b      	uxth	r3, r3
 800de58:	8b7a      	ldrh	r2, [r7, #26]
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d202      	bcs.n	800de64 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de5e:	f04f 33ff 	mov.w	r3, #4294967295
 800de62:	e135      	b.n	800e0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800de64:	7e7b      	ldrb	r3, [r7, #25]
 800de66:	b29b      	uxth	r3, r3
 800de68:	8b7a      	ldrh	r2, [r7, #26]
 800de6a:	1ad3      	subs	r3, r2, r3
 800de6c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800de6e:	69fb      	ldr	r3, [r7, #28]
 800de70:	88db      	ldrh	r3, [r3, #6]
 800de72:	b29b      	uxth	r3, r3
 800de74:	4618      	mov	r0, r3
 800de76:	f7f6 fbb7 	bl	80045e8 <lwip_htons>
 800de7a:	4603      	mov	r3, r0
 800de7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de80:	b29b      	uxth	r3, r3
 800de82:	00db      	lsls	r3, r3, #3
 800de84:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	685b      	ldr	r3, [r3, #4]
 800de8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800de8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8e:	2200      	movs	r2, #0
 800de90:	701a      	strb	r2, [r3, #0]
 800de92:	2200      	movs	r2, #0
 800de94:	705a      	strb	r2, [r3, #1]
 800de96:	2200      	movs	r2, #0
 800de98:	709a      	strb	r2, [r3, #2]
 800de9a:	2200      	movs	r2, #0
 800de9c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800de9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea0:	8afa      	ldrh	r2, [r7, #22]
 800dea2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800dea4:	8afa      	ldrh	r2, [r7, #22]
 800dea6:	8b7b      	ldrh	r3, [r7, #26]
 800dea8:	4413      	add	r3, r2
 800deaa:	b29a      	uxth	r2, r3
 800deac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deae:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800deb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb2:	88db      	ldrh	r3, [r3, #6]
 800deb4:	b29b      	uxth	r3, r3
 800deb6:	8afa      	ldrh	r2, [r7, #22]
 800deb8:	429a      	cmp	r2, r3
 800deba:	d902      	bls.n	800dec2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800debc:	f04f 33ff 	mov.w	r3, #4294967295
 800dec0:	e106      	b.n	800e0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	685b      	ldr	r3, [r3, #4]
 800dec6:	627b      	str	r3, [r7, #36]	; 0x24
 800dec8:	e068      	b.n	800df9c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800deca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800ded0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded2:	889b      	ldrh	r3, [r3, #4]
 800ded4:	b29a      	uxth	r2, r3
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	889b      	ldrh	r3, [r3, #4]
 800deda:	b29b      	uxth	r3, r3
 800dedc:	429a      	cmp	r2, r3
 800dede:	d235      	bcs.n	800df4c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800dee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dee4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800dee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d020      	beq.n	800df2e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800deec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deee:	889b      	ldrh	r3, [r3, #4]
 800def0:	b29a      	uxth	r2, r3
 800def2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def4:	88db      	ldrh	r3, [r3, #6]
 800def6:	b29b      	uxth	r3, r3
 800def8:	429a      	cmp	r2, r3
 800defa:	d307      	bcc.n	800df0c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800defc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defe:	88db      	ldrh	r3, [r3, #6]
 800df00:	b29a      	uxth	r2, r3
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	889b      	ldrh	r3, [r3, #4]
 800df06:	b29b      	uxth	r3, r3
 800df08:	429a      	cmp	r2, r3
 800df0a:	d902      	bls.n	800df12 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800df0c:	f04f 33ff 	mov.w	r3, #4294967295
 800df10:	e0de      	b.n	800e0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800df12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df14:	68ba      	ldr	r2, [r7, #8]
 800df16:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800df18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1a:	88db      	ldrh	r3, [r3, #6]
 800df1c:	b29a      	uxth	r2, r3
 800df1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df20:	889b      	ldrh	r3, [r3, #4]
 800df22:	b29b      	uxth	r3, r3
 800df24:	429a      	cmp	r2, r3
 800df26:	d03d      	beq.n	800dfa4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800df28:	2300      	movs	r3, #0
 800df2a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800df2c:	e03a      	b.n	800dfa4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800df2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df30:	88db      	ldrh	r3, [r3, #6]
 800df32:	b29a      	uxth	r2, r3
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	889b      	ldrh	r3, [r3, #4]
 800df38:	b29b      	uxth	r3, r3
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d902      	bls.n	800df44 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800df3e:	f04f 33ff 	mov.w	r3, #4294967295
 800df42:	e0c5      	b.n	800e0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	68ba      	ldr	r2, [r7, #8]
 800df48:	605a      	str	r2, [r3, #4]
      break;
 800df4a:	e02b      	b.n	800dfa4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800df4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4e:	889b      	ldrh	r3, [r3, #4]
 800df50:	b29a      	uxth	r2, r3
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	889b      	ldrh	r3, [r3, #4]
 800df56:	b29b      	uxth	r3, r3
 800df58:	429a      	cmp	r2, r3
 800df5a:	d102      	bne.n	800df62 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800df5c:	f04f 33ff 	mov.w	r3, #4294967295
 800df60:	e0b6      	b.n	800e0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800df62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df64:	889b      	ldrh	r3, [r3, #4]
 800df66:	b29a      	uxth	r2, r3
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	88db      	ldrh	r3, [r3, #6]
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	429a      	cmp	r2, r3
 800df70:	d202      	bcs.n	800df78 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800df72:	f04f 33ff 	mov.w	r3, #4294967295
 800df76:	e0ab      	b.n	800e0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800df78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d009      	beq.n	800df92 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800df7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df80:	88db      	ldrh	r3, [r3, #6]
 800df82:	b29a      	uxth	r2, r3
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	889b      	ldrh	r3, [r3, #4]
 800df88:	b29b      	uxth	r3, r3
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d001      	beq.n	800df92 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800df8e:	2300      	movs	r3, #0
 800df90:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800df9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d193      	bne.n	800deca <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800dfa2:	e000      	b.n	800dfa6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800dfa4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800dfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d12d      	bne.n	800e008 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800dfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d01c      	beq.n	800dfec <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800dfb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb4:	88db      	ldrh	r3, [r3, #6]
 800dfb6:	b29a      	uxth	r2, r3
 800dfb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfba:	889b      	ldrh	r3, [r3, #4]
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d906      	bls.n	800dfd0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800dfc2:	4b45      	ldr	r3, [pc, #276]	; (800e0d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dfc4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800dfc8:	4944      	ldr	r1, [pc, #272]	; (800e0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800dfca:	4845      	ldr	r0, [pc, #276]	; (800e0e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dfcc:	f000 fd04 	bl	800e9d8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800dfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd2:	68ba      	ldr	r2, [r7, #8]
 800dfd4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800dfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd8:	88db      	ldrh	r3, [r3, #6]
 800dfda:	b29a      	uxth	r2, r3
 800dfdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfde:	889b      	ldrh	r3, [r3, #4]
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d010      	beq.n	800e008 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	623b      	str	r3, [r7, #32]
 800dfea:	e00d      	b.n	800e008 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	685b      	ldr	r3, [r3, #4]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d006      	beq.n	800e002 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800dff4:	4b38      	ldr	r3, [pc, #224]	; (800e0d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dff6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800dffa:	493a      	ldr	r1, [pc, #232]	; (800e0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800dffc:	4838      	ldr	r0, [pc, #224]	; (800e0e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dffe:	f000 fceb 	bl	800e9d8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	68ba      	ldr	r2, [r7, #8]
 800e006:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d105      	bne.n	800e01a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	7f9b      	ldrb	r3, [r3, #30]
 800e012:	f003 0301 	and.w	r3, r3, #1
 800e016:	2b00      	cmp	r3, #0
 800e018:	d059      	beq.n	800e0ce <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e01a:	6a3b      	ldr	r3, [r7, #32]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d04f      	beq.n	800e0c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d006      	beq.n	800e036 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	889b      	ldrh	r3, [r3, #4]
 800e030:	b29b      	uxth	r3, r3
 800e032:	2b00      	cmp	r3, #0
 800e034:	d002      	beq.n	800e03c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e036:	2300      	movs	r3, #0
 800e038:	623b      	str	r3, [r7, #32]
 800e03a:	e041      	b.n	800e0c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e03e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e046:	e012      	b.n	800e06e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e050:	88db      	ldrh	r3, [r3, #6]
 800e052:	b29a      	uxth	r2, r3
 800e054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e056:	889b      	ldrh	r3, [r3, #4]
 800e058:	b29b      	uxth	r3, r3
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d002      	beq.n	800e064 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e05e:	2300      	movs	r3, #0
 800e060:	623b      	str	r3, [r7, #32]
            break;
 800e062:	e007      	b.n	800e074 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e066:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e070:	2b00      	cmp	r3, #0
 800e072:	d1e9      	bne.n	800e048 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e074:	6a3b      	ldr	r3, [r7, #32]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d022      	beq.n	800e0c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	685b      	ldr	r3, [r3, #4]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d106      	bne.n	800e090 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e082:	4b15      	ldr	r3, [pc, #84]	; (800e0d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e084:	f240 12df 	movw	r2, #479	; 0x1df
 800e088:	4917      	ldr	r1, [pc, #92]	; (800e0e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e08a:	4815      	ldr	r0, [pc, #84]	; (800e0e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e08c:	f000 fca4 	bl	800e9d8 <iprintf>
          LWIP_ASSERT("sanity check",
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	685b      	ldr	r3, [r3, #4]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e098:	429a      	cmp	r2, r3
 800e09a:	d106      	bne.n	800e0aa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e09c:	4b0e      	ldr	r3, [pc, #56]	; (800e0d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e09e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e0a2:	4911      	ldr	r1, [pc, #68]	; (800e0e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e0a4:	480e      	ldr	r0, [pc, #56]	; (800e0e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e0a6:	f000 fc97 	bl	800e9d8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d006      	beq.n	800e0c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e0b2:	4b09      	ldr	r3, [pc, #36]	; (800e0d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e0b4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e0b8:	490c      	ldr	r1, [pc, #48]	; (800e0ec <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e0ba:	4809      	ldr	r0, [pc, #36]	; (800e0e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e0bc:	f000 fc8c 	bl	800e9d8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e0c0:	6a3b      	ldr	r3, [r7, #32]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	bf14      	ite	ne
 800e0c6:	2301      	movne	r3, #1
 800e0c8:	2300      	moveq	r3, #0
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	e000      	b.n	800e0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e0ce:	2300      	movs	r3, #0
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3730      	adds	r7, #48	; 0x30
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	08012570 	.word	0x08012570
 800e0dc:	08012654 	.word	0x08012654
 800e0e0:	080125b8 	.word	0x080125b8
 800e0e4:	08012674 	.word	0x08012674
 800e0e8:	080126ac 	.word	0x080126ac
 800e0ec:	080126bc 	.word	0x080126bc

0800e0f0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b08e      	sub	sp, #56	; 0x38
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	f003 030f 	and.w	r3, r3, #15
 800e106:	b2db      	uxtb	r3, r3
 800e108:	009b      	lsls	r3, r3, #2
 800e10a:	b2db      	uxtb	r3, r3
 800e10c:	2b14      	cmp	r3, #20
 800e10e:	f040 8171 	bne.w	800e3f4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e114:	88db      	ldrh	r3, [r3, #6]
 800e116:	b29b      	uxth	r3, r3
 800e118:	4618      	mov	r0, r3
 800e11a:	f7f6 fa65 	bl	80045e8 <lwip_htons>
 800e11e:	4603      	mov	r3, r0
 800e120:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e124:	b29b      	uxth	r3, r3
 800e126:	00db      	lsls	r3, r3, #3
 800e128:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12c:	885b      	ldrh	r3, [r3, #2]
 800e12e:	b29b      	uxth	r3, r3
 800e130:	4618      	mov	r0, r3
 800e132:	f7f6 fa59 	bl	80045e8 <lwip_htons>
 800e136:	4603      	mov	r3, r0
 800e138:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	f003 030f 	and.w	r3, r3, #15
 800e142:	b2db      	uxtb	r3, r3
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e14a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e14e:	b29b      	uxth	r3, r3
 800e150:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e152:	429a      	cmp	r2, r3
 800e154:	f0c0 8150 	bcc.w	800e3f8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e158:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e160:	1ad3      	subs	r3, r2, r3
 800e162:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f7f7 fe25 	bl	8005db4 <pbuf_clen>
 800e16a:	4603      	mov	r3, r0
 800e16c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e16e:	4b8c      	ldr	r3, [pc, #560]	; (800e3a0 <ip4_reass+0x2b0>)
 800e170:	881b      	ldrh	r3, [r3, #0]
 800e172:	461a      	mov	r2, r3
 800e174:	8c3b      	ldrh	r3, [r7, #32]
 800e176:	4413      	add	r3, r2
 800e178:	2b0a      	cmp	r3, #10
 800e17a:	dd10      	ble.n	800e19e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e17c:	8c3b      	ldrh	r3, [r7, #32]
 800e17e:	4619      	mov	r1, r3
 800e180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e182:	f7ff fd81 	bl	800dc88 <ip_reass_remove_oldest_datagram>
 800e186:	4603      	mov	r3, r0
 800e188:	2b00      	cmp	r3, #0
 800e18a:	f000 8137 	beq.w	800e3fc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e18e:	4b84      	ldr	r3, [pc, #528]	; (800e3a0 <ip4_reass+0x2b0>)
 800e190:	881b      	ldrh	r3, [r3, #0]
 800e192:	461a      	mov	r2, r3
 800e194:	8c3b      	ldrh	r3, [r7, #32]
 800e196:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e198:	2b0a      	cmp	r3, #10
 800e19a:	f300 812f 	bgt.w	800e3fc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e19e:	4b81      	ldr	r3, [pc, #516]	; (800e3a4 <ip4_reass+0x2b4>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	633b      	str	r3, [r7, #48]	; 0x30
 800e1a4:	e015      	b.n	800e1d2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a8:	695a      	ldr	r2, [r3, #20]
 800e1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ac:	68db      	ldr	r3, [r3, #12]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d10c      	bne.n	800e1cc <ip4_reass+0xdc>
 800e1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b4:	699a      	ldr	r2, [r3, #24]
 800e1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b8:	691b      	ldr	r3, [r3, #16]
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d106      	bne.n	800e1cc <ip4_reass+0xdc>
 800e1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c0:	899a      	ldrh	r2, [r3, #12]
 800e1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c4:	889b      	ldrh	r3, [r3, #4]
 800e1c6:	b29b      	uxth	r3, r3
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d006      	beq.n	800e1da <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	633b      	str	r3, [r7, #48]	; 0x30
 800e1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d1e6      	bne.n	800e1a6 <ip4_reass+0xb6>
 800e1d8:	e000      	b.n	800e1dc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e1da:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d109      	bne.n	800e1f6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e1e2:	8c3b      	ldrh	r3, [r7, #32]
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1e8:	f7ff fdb0 	bl	800dd4c <ip_reass_enqueue_new_datagram>
 800e1ec:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d11c      	bne.n	800e22e <ip4_reass+0x13e>
      goto nullreturn;
 800e1f4:	e105      	b.n	800e402 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f8:	88db      	ldrh	r3, [r3, #6]
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f7f6 f9f3 	bl	80045e8 <lwip_htons>
 800e202:	4603      	mov	r3, r0
 800e204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d110      	bne.n	800e22e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e20e:	89db      	ldrh	r3, [r3, #14]
 800e210:	4618      	mov	r0, r3
 800e212:	f7f6 f9e9 	bl	80045e8 <lwip_htons>
 800e216:	4603      	mov	r3, r0
 800e218:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d006      	beq.n	800e22e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e222:	3308      	adds	r3, #8
 800e224:	2214      	movs	r2, #20
 800e226:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e228:	4618      	mov	r0, r3
 800e22a:	f000 fba5 	bl	800e978 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e230:	88db      	ldrh	r3, [r3, #6]
 800e232:	b29b      	uxth	r3, r3
 800e234:	f003 0320 	and.w	r3, r3, #32
 800e238:	2b00      	cmp	r3, #0
 800e23a:	bf0c      	ite	eq
 800e23c:	2301      	moveq	r3, #1
 800e23e:	2300      	movne	r3, #0
 800e240:	b2db      	uxtb	r3, r3
 800e242:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e244:	69fb      	ldr	r3, [r7, #28]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d00e      	beq.n	800e268 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e24a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e24c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e24e:	4413      	add	r3, r2
 800e250:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e252:	8b7a      	ldrh	r2, [r7, #26]
 800e254:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e256:	429a      	cmp	r2, r3
 800e258:	f0c0 80a0 	bcc.w	800e39c <ip4_reass+0x2ac>
 800e25c:	8b7b      	ldrh	r3, [r7, #26]
 800e25e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e262:	4293      	cmp	r3, r2
 800e264:	f200 809a 	bhi.w	800e39c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e268:	69fa      	ldr	r2, [r7, #28]
 800e26a:	6879      	ldr	r1, [r7, #4]
 800e26c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e26e:	f7ff fdd5 	bl	800de1c <ip_reass_chain_frag_into_datagram_and_validate>
 800e272:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e27a:	f000 809b 	beq.w	800e3b4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e27e:	4b48      	ldr	r3, [pc, #288]	; (800e3a0 <ip4_reass+0x2b0>)
 800e280:	881a      	ldrh	r2, [r3, #0]
 800e282:	8c3b      	ldrh	r3, [r7, #32]
 800e284:	4413      	add	r3, r2
 800e286:	b29a      	uxth	r2, r3
 800e288:	4b45      	ldr	r3, [pc, #276]	; (800e3a0 <ip4_reass+0x2b0>)
 800e28a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d00d      	beq.n	800e2ae <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e292:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e294:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e296:	4413      	add	r3, r2
 800e298:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e29c:	8a7a      	ldrh	r2, [r7, #18]
 800e29e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a2:	7f9b      	ldrb	r3, [r3, #30]
 800e2a4:	f043 0301 	orr.w	r3, r3, #1
 800e2a8:	b2da      	uxtb	r2, r3
 800e2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ac:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	d171      	bne.n	800e398 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b6:	8b9b      	ldrh	r3, [r3, #28]
 800e2b8:	3314      	adds	r3, #20
 800e2ba:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2be:	685b      	ldr	r3, [r3, #4]
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d0:	3308      	adds	r3, #8
 800e2d2:	2214      	movs	r2, #20
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2d8:	f000 fb4e 	bl	800e978 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e2dc:	8a3b      	ldrh	r3, [r7, #16]
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7f6 f982 	bl	80045e8 <lwip_htons>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ea:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	719a      	strb	r2, [r3, #6]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	729a      	strb	r2, [r3, #10]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e306:	e00d      	b.n	800e324 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e30a:	685b      	ldr	r3, [r3, #4]
 800e30c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e30e:	2114      	movs	r1, #20
 800e310:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e312:	f7f7 fc41 	bl	8005b98 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e316:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f7f7 fd85 	bl	8005e28 <pbuf_cat>
      r = iprh->next_pbuf;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e326:	2b00      	cmp	r3, #0
 800e328:	d1ee      	bne.n	800e308 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e32a:	4b1e      	ldr	r3, [pc, #120]	; (800e3a4 <ip4_reass+0x2b4>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e330:	429a      	cmp	r2, r3
 800e332:	d102      	bne.n	800e33a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e334:	2300      	movs	r3, #0
 800e336:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e338:	e010      	b.n	800e35c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e33a:	4b1a      	ldr	r3, [pc, #104]	; (800e3a4 <ip4_reass+0x2b4>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e340:	e007      	b.n	800e352 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e348:	429a      	cmp	r2, r3
 800e34a:	d006      	beq.n	800e35a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e354:	2b00      	cmp	r3, #0
 800e356:	d1f4      	bne.n	800e342 <ip4_reass+0x252>
 800e358:	e000      	b.n	800e35c <ip4_reass+0x26c>
          break;
 800e35a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e35c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e35e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e360:	f7ff fd2e 	bl	800ddc0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f7f7 fd25 	bl	8005db4 <pbuf_clen>
 800e36a:	4603      	mov	r3, r0
 800e36c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e36e:	4b0c      	ldr	r3, [pc, #48]	; (800e3a0 <ip4_reass+0x2b0>)
 800e370:	881b      	ldrh	r3, [r3, #0]
 800e372:	8c3a      	ldrh	r2, [r7, #32]
 800e374:	429a      	cmp	r2, r3
 800e376:	d906      	bls.n	800e386 <ip4_reass+0x296>
 800e378:	4b0b      	ldr	r3, [pc, #44]	; (800e3a8 <ip4_reass+0x2b8>)
 800e37a:	f240 229b 	movw	r2, #667	; 0x29b
 800e37e:	490b      	ldr	r1, [pc, #44]	; (800e3ac <ip4_reass+0x2bc>)
 800e380:	480b      	ldr	r0, [pc, #44]	; (800e3b0 <ip4_reass+0x2c0>)
 800e382:	f000 fb29 	bl	800e9d8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e386:	4b06      	ldr	r3, [pc, #24]	; (800e3a0 <ip4_reass+0x2b0>)
 800e388:	881a      	ldrh	r2, [r3, #0]
 800e38a:	8c3b      	ldrh	r3, [r7, #32]
 800e38c:	1ad3      	subs	r3, r2, r3
 800e38e:	b29a      	uxth	r2, r3
 800e390:	4b03      	ldr	r3, [pc, #12]	; (800e3a0 <ip4_reass+0x2b0>)
 800e392:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	e038      	b.n	800e40a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e398:	2300      	movs	r3, #0
 800e39a:	e036      	b.n	800e40a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e39c:	bf00      	nop
 800e39e:	e00a      	b.n	800e3b6 <ip4_reass+0x2c6>
 800e3a0:	20008474 	.word	0x20008474
 800e3a4:	20008470 	.word	0x20008470
 800e3a8:	08012570 	.word	0x08012570
 800e3ac:	080126e0 	.word	0x080126e0
 800e3b0:	080125b8 	.word	0x080125b8
    goto nullreturn_ipr;
 800e3b4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d106      	bne.n	800e3ca <ip4_reass+0x2da>
 800e3bc:	4b15      	ldr	r3, [pc, #84]	; (800e414 <ip4_reass+0x324>)
 800e3be:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e3c2:	4915      	ldr	r1, [pc, #84]	; (800e418 <ip4_reass+0x328>)
 800e3c4:	4815      	ldr	r0, [pc, #84]	; (800e41c <ip4_reass+0x32c>)
 800e3c6:	f000 fb07 	bl	800e9d8 <iprintf>
  if (ipr->p == NULL) {
 800e3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3cc:	685b      	ldr	r3, [r3, #4]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d116      	bne.n	800e400 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e3d2:	4b13      	ldr	r3, [pc, #76]	; (800e420 <ip4_reass+0x330>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d006      	beq.n	800e3ea <ip4_reass+0x2fa>
 800e3dc:	4b0d      	ldr	r3, [pc, #52]	; (800e414 <ip4_reass+0x324>)
 800e3de:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e3e2:	4910      	ldr	r1, [pc, #64]	; (800e424 <ip4_reass+0x334>)
 800e3e4:	480d      	ldr	r0, [pc, #52]	; (800e41c <ip4_reass+0x32c>)
 800e3e6:	f000 faf7 	bl	800e9d8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e3ea:	2100      	movs	r1, #0
 800e3ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3ee:	f7ff fce7 	bl	800ddc0 <ip_reass_dequeue_datagram>
 800e3f2:	e006      	b.n	800e402 <ip4_reass+0x312>
    goto nullreturn;
 800e3f4:	bf00      	nop
 800e3f6:	e004      	b.n	800e402 <ip4_reass+0x312>
    goto nullreturn;
 800e3f8:	bf00      	nop
 800e3fa:	e002      	b.n	800e402 <ip4_reass+0x312>
      goto nullreturn;
 800e3fc:	bf00      	nop
 800e3fe:	e000      	b.n	800e402 <ip4_reass+0x312>
  }

nullreturn:
 800e400:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f7f7 fc4e 	bl	8005ca4 <pbuf_free>
  return NULL;
 800e408:	2300      	movs	r3, #0
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3738      	adds	r7, #56	; 0x38
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	08012570 	.word	0x08012570
 800e418:	080126fc 	.word	0x080126fc
 800e41c:	080125b8 	.word	0x080125b8
 800e420:	20008470 	.word	0x20008470
 800e424:	08012708 	.word	0x08012708

0800e428 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e42c:	2005      	movs	r0, #5
 800e42e:	f7f6 fd53 	bl	8004ed8 <memp_malloc>
 800e432:	4603      	mov	r3, r0
}
 800e434:	4618      	mov	r0, r3
 800e436:	bd80      	pop	{r7, pc}

0800e438 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d106      	bne.n	800e454 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e446:	4b07      	ldr	r3, [pc, #28]	; (800e464 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e448:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e44c:	4906      	ldr	r1, [pc, #24]	; (800e468 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e44e:	4807      	ldr	r0, [pc, #28]	; (800e46c <ip_frag_free_pbuf_custom_ref+0x34>)
 800e450:	f000 fac2 	bl	800e9d8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e454:	6879      	ldr	r1, [r7, #4]
 800e456:	2005      	movs	r0, #5
 800e458:	f7f6 fdae 	bl	8004fb8 <memp_free>
}
 800e45c:	bf00      	nop
 800e45e:	3708      	adds	r7, #8
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}
 800e464:	08012570 	.word	0x08012570
 800e468:	08012728 	.word	0x08012728
 800e46c:	080125b8 	.word	0x080125b8

0800e470 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b084      	sub	sp, #16
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d106      	bne.n	800e490 <ipfrag_free_pbuf_custom+0x20>
 800e482:	4b11      	ldr	r3, [pc, #68]	; (800e4c8 <ipfrag_free_pbuf_custom+0x58>)
 800e484:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e488:	4910      	ldr	r1, [pc, #64]	; (800e4cc <ipfrag_free_pbuf_custom+0x5c>)
 800e48a:	4811      	ldr	r0, [pc, #68]	; (800e4d0 <ipfrag_free_pbuf_custom+0x60>)
 800e48c:	f000 faa4 	bl	800e9d8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e490:	68fa      	ldr	r2, [r7, #12]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	429a      	cmp	r2, r3
 800e496:	d006      	beq.n	800e4a6 <ipfrag_free_pbuf_custom+0x36>
 800e498:	4b0b      	ldr	r3, [pc, #44]	; (800e4c8 <ipfrag_free_pbuf_custom+0x58>)
 800e49a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e49e:	490d      	ldr	r1, [pc, #52]	; (800e4d4 <ipfrag_free_pbuf_custom+0x64>)
 800e4a0:	480b      	ldr	r0, [pc, #44]	; (800e4d0 <ipfrag_free_pbuf_custom+0x60>)
 800e4a2:	f000 fa99 	bl	800e9d8 <iprintf>
  if (pcr->original != NULL) {
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	695b      	ldr	r3, [r3, #20]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d004      	beq.n	800e4b8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	695b      	ldr	r3, [r3, #20]
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7f7 fbf6 	bl	8005ca4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e4b8:	68f8      	ldr	r0, [r7, #12]
 800e4ba:	f7ff ffbd 	bl	800e438 <ip_frag_free_pbuf_custom_ref>
}
 800e4be:	bf00      	nop
 800e4c0:	3710      	adds	r7, #16
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
 800e4c6:	bf00      	nop
 800e4c8:	08012570 	.word	0x08012570
 800e4cc:	08012734 	.word	0x08012734
 800e4d0:	080125b8 	.word	0x080125b8
 800e4d4:	08012740 	.word	0x08012740

0800e4d8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b094      	sub	sp, #80	; 0x50
 800e4dc:	af02      	add	r7, sp, #8
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	60b9      	str	r1, [r7, #8]
 800e4e2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e4ee:	3b14      	subs	r3, #20
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	da00      	bge.n	800e4f6 <ip4_frag+0x1e>
 800e4f4:	3307      	adds	r3, #7
 800e4f6:	10db      	asrs	r3, r3, #3
 800e4f8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e4fa:	2314      	movs	r3, #20
 800e4fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e506:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e50a:	781b      	ldrb	r3, [r3, #0]
 800e50c:	f003 030f 	and.w	r3, r3, #15
 800e510:	b2db      	uxtb	r3, r3
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	b2db      	uxtb	r3, r3
 800e516:	2b14      	cmp	r3, #20
 800e518:	d002      	beq.n	800e520 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e51a:	f06f 0305 	mvn.w	r3, #5
 800e51e:	e110      	b.n	800e742 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	895b      	ldrh	r3, [r3, #10]
 800e524:	2b13      	cmp	r3, #19
 800e526:	d809      	bhi.n	800e53c <ip4_frag+0x64>
 800e528:	4b88      	ldr	r3, [pc, #544]	; (800e74c <ip4_frag+0x274>)
 800e52a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e52e:	4988      	ldr	r1, [pc, #544]	; (800e750 <ip4_frag+0x278>)
 800e530:	4888      	ldr	r0, [pc, #544]	; (800e754 <ip4_frag+0x27c>)
 800e532:	f000 fa51 	bl	800e9d8 <iprintf>
 800e536:	f06f 0305 	mvn.w	r3, #5
 800e53a:	e102      	b.n	800e742 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53e:	88db      	ldrh	r3, [r3, #6]
 800e540:	b29b      	uxth	r3, r3
 800e542:	4618      	mov	r0, r3
 800e544:	f7f6 f850 	bl	80045e8 <lwip_htons>
 800e548:	4603      	mov	r3, r0
 800e54a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e54c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e54e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e552:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e556:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e55c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	891b      	ldrh	r3, [r3, #8]
 800e562:	3b14      	subs	r3, #20
 800e564:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e568:	e0e1      	b.n	800e72e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e56a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e56c:	00db      	lsls	r3, r3, #3
 800e56e:	b29b      	uxth	r3, r3
 800e570:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e574:	4293      	cmp	r3, r2
 800e576:	bf28      	it	cs
 800e578:	4613      	movcs	r3, r2
 800e57a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e57c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e580:	2114      	movs	r1, #20
 800e582:	200e      	movs	r0, #14
 800e584:	f7f7 f8aa 	bl	80056dc <pbuf_alloc>
 800e588:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	f000 80d5 	beq.w	800e73c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e594:	895b      	ldrh	r3, [r3, #10]
 800e596:	2b13      	cmp	r3, #19
 800e598:	d806      	bhi.n	800e5a8 <ip4_frag+0xd0>
 800e59a:	4b6c      	ldr	r3, [pc, #432]	; (800e74c <ip4_frag+0x274>)
 800e59c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e5a0:	496d      	ldr	r1, [pc, #436]	; (800e758 <ip4_frag+0x280>)
 800e5a2:	486c      	ldr	r0, [pc, #432]	; (800e754 <ip4_frag+0x27c>)
 800e5a4:	f000 fa18 	bl	800e9d8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	2214      	movs	r2, #20
 800e5ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f000 f9e1 	bl	800e978 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e5bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e5be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e5c2:	e064      	b.n	800e68e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	895a      	ldrh	r2, [r3, #10]
 800e5c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e5ca:	1ad3      	subs	r3, r2, r3
 800e5cc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	895b      	ldrh	r3, [r3, #10]
 800e5d2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d906      	bls.n	800e5e6 <ip4_frag+0x10e>
 800e5d8:	4b5c      	ldr	r3, [pc, #368]	; (800e74c <ip4_frag+0x274>)
 800e5da:	f240 322d 	movw	r2, #813	; 0x32d
 800e5de:	495f      	ldr	r1, [pc, #380]	; (800e75c <ip4_frag+0x284>)
 800e5e0:	485c      	ldr	r0, [pc, #368]	; (800e754 <ip4_frag+0x27c>)
 800e5e2:	f000 f9f9 	bl	800e9d8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e5e6:	8bfa      	ldrh	r2, [r7, #30]
 800e5e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	bf28      	it	cs
 800e5f0:	4613      	movcs	r3, r2
 800e5f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e5f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d105      	bne.n	800e60a <ip4_frag+0x132>
        poff = 0;
 800e5fe:	2300      	movs	r3, #0
 800e600:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	60fb      	str	r3, [r7, #12]
        continue;
 800e608:	e041      	b.n	800e68e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e60a:	f7ff ff0d 	bl	800e428 <ip_frag_alloc_pbuf_custom_ref>
 800e60e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e610:	69bb      	ldr	r3, [r7, #24]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d103      	bne.n	800e61e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e616:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e618:	f7f7 fb44 	bl	8005ca4 <pbuf_free>
        goto memerr;
 800e61c:	e08f      	b.n	800e73e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e61e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e624:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e626:	4413      	add	r3, r2
 800e628:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e62c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e630:	9201      	str	r2, [sp, #4]
 800e632:	9300      	str	r3, [sp, #0]
 800e634:	4603      	mov	r3, r0
 800e636:	2241      	movs	r2, #65	; 0x41
 800e638:	2000      	movs	r0, #0
 800e63a:	f7f7 f979 	bl	8005930 <pbuf_alloced_custom>
 800e63e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d106      	bne.n	800e654 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e646:	69b8      	ldr	r0, [r7, #24]
 800e648:	f7ff fef6 	bl	800e438 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e64c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e64e:	f7f7 fb29 	bl	8005ca4 <pbuf_free>
        goto memerr;
 800e652:	e074      	b.n	800e73e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e654:	68f8      	ldr	r0, [r7, #12]
 800e656:	f7f7 fbc5 	bl	8005de4 <pbuf_ref>
      pcr->original = p;
 800e65a:	69bb      	ldr	r3, [r7, #24]
 800e65c:	68fa      	ldr	r2, [r7, #12]
 800e65e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e660:	69bb      	ldr	r3, [r7, #24]
 800e662:	4a3f      	ldr	r2, [pc, #252]	; (800e760 <ip4_frag+0x288>)
 800e664:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e666:	6979      	ldr	r1, [r7, #20]
 800e668:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e66a:	f7f7 fbdd 	bl	8005e28 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e66e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e672:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e676:	1ad3      	subs	r3, r2, r3
 800e678:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e67c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e680:	2b00      	cmp	r3, #0
 800e682:	d004      	beq.n	800e68e <ip4_frag+0x1b6>
        poff = 0;
 800e684:	2300      	movs	r3, #0
 800e686:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e68e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e692:	2b00      	cmp	r3, #0
 800e694:	d196      	bne.n	800e5c4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e696:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e698:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e69c:	4413      	add	r3, r2
 800e69e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e6a4:	f1a3 0213 	sub.w	r2, r3, #19
 800e6a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	bfcc      	ite	gt
 800e6b0:	2301      	movgt	r3, #1
 800e6b2:	2300      	movle	r3, #0
 800e6b4:	b2db      	uxtb	r3, r3
 800e6b6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e6b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e6bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e6c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e6c2:	6a3b      	ldr	r3, [r7, #32]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d002      	beq.n	800e6ce <ip4_frag+0x1f6>
 800e6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d003      	beq.n	800e6d6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e6ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e6d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e6d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e6d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7f5 ff85 	bl	80045e8 <lwip_htons>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	461a      	mov	r2, r3
 800e6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e6e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e6e8:	3314      	adds	r3, #20
 800e6ea:	b29b      	uxth	r3, r3
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f7f5 ff7b 	bl	80045e8 <lwip_htons>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	729a      	strb	r2, [r3, #10]
 800e700:	2200      	movs	r2, #0
 800e702:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	695b      	ldr	r3, [r3, #20]
 800e708:	687a      	ldr	r2, [r7, #4]
 800e70a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e70c:	68b8      	ldr	r0, [r7, #8]
 800e70e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e710:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e712:	f7f7 fac7 	bl	8005ca4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e716:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e71a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e71c:	1ad3      	subs	r3, r2, r3
 800e71e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e722:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e726:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e728:	4413      	add	r3, r2
 800e72a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e72e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e732:	2b00      	cmp	r3, #0
 800e734:	f47f af19 	bne.w	800e56a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e738:	2300      	movs	r3, #0
 800e73a:	e002      	b.n	800e742 <ip4_frag+0x26a>
      goto memerr;
 800e73c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e73e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e742:	4618      	mov	r0, r3
 800e744:	3748      	adds	r7, #72	; 0x48
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
 800e74a:	bf00      	nop
 800e74c:	08012570 	.word	0x08012570
 800e750:	0801274c 	.word	0x0801274c
 800e754:	080125b8 	.word	0x080125b8
 800e758:	08012768 	.word	0x08012768
 800e75c:	08012788 	.word	0x08012788
 800e760:	0800e471 	.word	0x0800e471

0800e764 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b086      	sub	sp, #24
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e76e:	230e      	movs	r3, #14
 800e770:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	895b      	ldrh	r3, [r3, #10]
 800e776:	2b0e      	cmp	r3, #14
 800e778:	d96e      	bls.n	800e858 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	7bdb      	ldrb	r3, [r3, #15]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d106      	bne.n	800e790 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e788:	3301      	adds	r3, #1
 800e78a:	b2da      	uxtb	r2, r3
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	7b1a      	ldrb	r2, [r3, #12]
 800e79a:	7b5b      	ldrb	r3, [r3, #13]
 800e79c:	021b      	lsls	r3, r3, #8
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	f003 0301 	and.w	r3, r3, #1
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d023      	beq.n	800e7f6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	2b01      	cmp	r3, #1
 800e7b4:	d10f      	bne.n	800e7d6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	785b      	ldrb	r3, [r3, #1]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d11b      	bne.n	800e7f6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e7c2:	2b5e      	cmp	r3, #94	; 0x5e
 800e7c4:	d117      	bne.n	800e7f6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	7b5b      	ldrb	r3, [r3, #13]
 800e7ca:	f043 0310 	orr.w	r3, r3, #16
 800e7ce:	b2da      	uxtb	r2, r3
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	735a      	strb	r2, [r3, #13]
 800e7d4:	e00f      	b.n	800e7f6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e7d6:	693b      	ldr	r3, [r7, #16]
 800e7d8:	2206      	movs	r2, #6
 800e7da:	4928      	ldr	r1, [pc, #160]	; (800e87c <ethernet_input+0x118>)
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f000 f8bb 	bl	800e958 <memcmp>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d106      	bne.n	800e7f6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	7b5b      	ldrb	r3, [r3, #13]
 800e7ec:	f043 0308 	orr.w	r3, r3, #8
 800e7f0:	b2da      	uxtb	r2, r3
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e7f6:	89fb      	ldrh	r3, [r7, #14]
 800e7f8:	2b08      	cmp	r3, #8
 800e7fa:	d003      	beq.n	800e804 <ethernet_input+0xa0>
 800e7fc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e800:	d014      	beq.n	800e82c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e802:	e032      	b.n	800e86a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e80a:	f003 0308 	and.w	r3, r3, #8
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d024      	beq.n	800e85c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e812:	8afb      	ldrh	r3, [r7, #22]
 800e814:	4619      	mov	r1, r3
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f7f7 f9be 	bl	8005b98 <pbuf_remove_header>
 800e81c:	4603      	mov	r3, r0
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d11e      	bne.n	800e860 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e822:	6839      	ldr	r1, [r7, #0]
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f7fe fe91 	bl	800d54c <ip4_input>
      break;
 800e82a:	e013      	b.n	800e854 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e832:	f003 0308 	and.w	r3, r3, #8
 800e836:	2b00      	cmp	r3, #0
 800e838:	d014      	beq.n	800e864 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e83a:	8afb      	ldrh	r3, [r7, #22]
 800e83c:	4619      	mov	r1, r3
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f7f7 f9aa 	bl	8005b98 <pbuf_remove_header>
 800e844:	4603      	mov	r3, r0
 800e846:	2b00      	cmp	r3, #0
 800e848:	d10e      	bne.n	800e868 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e84a:	6839      	ldr	r1, [r7, #0]
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f7fe f831 	bl	800c8b4 <etharp_input>
      break;
 800e852:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e854:	2300      	movs	r3, #0
 800e856:	e00c      	b.n	800e872 <ethernet_input+0x10e>
    goto free_and_return;
 800e858:	bf00      	nop
 800e85a:	e006      	b.n	800e86a <ethernet_input+0x106>
        goto free_and_return;
 800e85c:	bf00      	nop
 800e85e:	e004      	b.n	800e86a <ethernet_input+0x106>
        goto free_and_return;
 800e860:	bf00      	nop
 800e862:	e002      	b.n	800e86a <ethernet_input+0x106>
        goto free_and_return;
 800e864:	bf00      	nop
 800e866:	e000      	b.n	800e86a <ethernet_input+0x106>
        goto free_and_return;
 800e868:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f7f7 fa1a 	bl	8005ca4 <pbuf_free>
  return ERR_OK;
 800e870:	2300      	movs	r3, #0
}
 800e872:	4618      	mov	r0, r3
 800e874:	3718      	adds	r7, #24
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	0801291c 	.word	0x0801291c

0800e880 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e880:	b580      	push	{r7, lr}
 800e882:	b086      	sub	sp, #24
 800e884:	af00      	add	r7, sp, #0
 800e886:	60f8      	str	r0, [r7, #12]
 800e888:	60b9      	str	r1, [r7, #8]
 800e88a:	607a      	str	r2, [r7, #4]
 800e88c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e88e:	8c3b      	ldrh	r3, [r7, #32]
 800e890:	4618      	mov	r0, r3
 800e892:	f7f5 fea9 	bl	80045e8 <lwip_htons>
 800e896:	4603      	mov	r3, r0
 800e898:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e89a:	210e      	movs	r1, #14
 800e89c:	68b8      	ldr	r0, [r7, #8]
 800e89e:	f7f7 f96b 	bl	8005b78 <pbuf_add_header>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d125      	bne.n	800e8f4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	8afa      	ldrh	r2, [r7, #22]
 800e8b2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	2206      	movs	r2, #6
 800e8b8:	6839      	ldr	r1, [r7, #0]
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f000 f85c 	bl	800e978 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e8c0:	693b      	ldr	r3, [r7, #16]
 800e8c2:	3306      	adds	r3, #6
 800e8c4:	2206      	movs	r2, #6
 800e8c6:	6879      	ldr	r1, [r7, #4]
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f000 f855 	bl	800e978 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e8d4:	2b06      	cmp	r3, #6
 800e8d6:	d006      	beq.n	800e8e6 <ethernet_output+0x66>
 800e8d8:	4b0a      	ldr	r3, [pc, #40]	; (800e904 <ethernet_output+0x84>)
 800e8da:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e8de:	490a      	ldr	r1, [pc, #40]	; (800e908 <ethernet_output+0x88>)
 800e8e0:	480a      	ldr	r0, [pc, #40]	; (800e90c <ethernet_output+0x8c>)
 800e8e2:	f000 f879 	bl	800e9d8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	699b      	ldr	r3, [r3, #24]
 800e8ea:	68b9      	ldr	r1, [r7, #8]
 800e8ec:	68f8      	ldr	r0, [r7, #12]
 800e8ee:	4798      	blx	r3
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	e002      	b.n	800e8fa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e8f4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e8f6:	f06f 0301 	mvn.w	r3, #1
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3718      	adds	r7, #24
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
 800e902:	bf00      	nop
 800e904:	08012798 	.word	0x08012798
 800e908:	080127d0 	.word	0x080127d0
 800e90c:	08012804 	.word	0x08012804

0800e910 <__libc_init_array>:
 800e910:	b570      	push	{r4, r5, r6, lr}
 800e912:	4d0d      	ldr	r5, [pc, #52]	; (800e948 <__libc_init_array+0x38>)
 800e914:	4c0d      	ldr	r4, [pc, #52]	; (800e94c <__libc_init_array+0x3c>)
 800e916:	1b64      	subs	r4, r4, r5
 800e918:	10a4      	asrs	r4, r4, #2
 800e91a:	2600      	movs	r6, #0
 800e91c:	42a6      	cmp	r6, r4
 800e91e:	d109      	bne.n	800e934 <__libc_init_array+0x24>
 800e920:	4d0b      	ldr	r5, [pc, #44]	; (800e950 <__libc_init_array+0x40>)
 800e922:	4c0c      	ldr	r4, [pc, #48]	; (800e954 <__libc_init_array+0x44>)
 800e924:	f001 fa70 	bl	800fe08 <_init>
 800e928:	1b64      	subs	r4, r4, r5
 800e92a:	10a4      	asrs	r4, r4, #2
 800e92c:	2600      	movs	r6, #0
 800e92e:	42a6      	cmp	r6, r4
 800e930:	d105      	bne.n	800e93e <__libc_init_array+0x2e>
 800e932:	bd70      	pop	{r4, r5, r6, pc}
 800e934:	f855 3b04 	ldr.w	r3, [r5], #4
 800e938:	4798      	blx	r3
 800e93a:	3601      	adds	r6, #1
 800e93c:	e7ee      	b.n	800e91c <__libc_init_array+0xc>
 800e93e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e942:	4798      	blx	r3
 800e944:	3601      	adds	r6, #1
 800e946:	e7f2      	b.n	800e92e <__libc_init_array+0x1e>
 800e948:	08012a7c 	.word	0x08012a7c
 800e94c:	08012a7c 	.word	0x08012a7c
 800e950:	08012a7c 	.word	0x08012a7c
 800e954:	08012a80 	.word	0x08012a80

0800e958 <memcmp>:
 800e958:	b510      	push	{r4, lr}
 800e95a:	3901      	subs	r1, #1
 800e95c:	4402      	add	r2, r0
 800e95e:	4290      	cmp	r0, r2
 800e960:	d101      	bne.n	800e966 <memcmp+0xe>
 800e962:	2000      	movs	r0, #0
 800e964:	e005      	b.n	800e972 <memcmp+0x1a>
 800e966:	7803      	ldrb	r3, [r0, #0]
 800e968:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e96c:	42a3      	cmp	r3, r4
 800e96e:	d001      	beq.n	800e974 <memcmp+0x1c>
 800e970:	1b18      	subs	r0, r3, r4
 800e972:	bd10      	pop	{r4, pc}
 800e974:	3001      	adds	r0, #1
 800e976:	e7f2      	b.n	800e95e <memcmp+0x6>

0800e978 <memcpy>:
 800e978:	440a      	add	r2, r1
 800e97a:	4291      	cmp	r1, r2
 800e97c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e980:	d100      	bne.n	800e984 <memcpy+0xc>
 800e982:	4770      	bx	lr
 800e984:	b510      	push	{r4, lr}
 800e986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e98a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e98e:	4291      	cmp	r1, r2
 800e990:	d1f9      	bne.n	800e986 <memcpy+0xe>
 800e992:	bd10      	pop	{r4, pc}

0800e994 <memmove>:
 800e994:	4288      	cmp	r0, r1
 800e996:	b510      	push	{r4, lr}
 800e998:	eb01 0402 	add.w	r4, r1, r2
 800e99c:	d902      	bls.n	800e9a4 <memmove+0x10>
 800e99e:	4284      	cmp	r4, r0
 800e9a0:	4623      	mov	r3, r4
 800e9a2:	d807      	bhi.n	800e9b4 <memmove+0x20>
 800e9a4:	1e43      	subs	r3, r0, #1
 800e9a6:	42a1      	cmp	r1, r4
 800e9a8:	d008      	beq.n	800e9bc <memmove+0x28>
 800e9aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e9ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e9b2:	e7f8      	b.n	800e9a6 <memmove+0x12>
 800e9b4:	4402      	add	r2, r0
 800e9b6:	4601      	mov	r1, r0
 800e9b8:	428a      	cmp	r2, r1
 800e9ba:	d100      	bne.n	800e9be <memmove+0x2a>
 800e9bc:	bd10      	pop	{r4, pc}
 800e9be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e9c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e9c6:	e7f7      	b.n	800e9b8 <memmove+0x24>

0800e9c8 <memset>:
 800e9c8:	4402      	add	r2, r0
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d100      	bne.n	800e9d2 <memset+0xa>
 800e9d0:	4770      	bx	lr
 800e9d2:	f803 1b01 	strb.w	r1, [r3], #1
 800e9d6:	e7f9      	b.n	800e9cc <memset+0x4>

0800e9d8 <iprintf>:
 800e9d8:	b40f      	push	{r0, r1, r2, r3}
 800e9da:	4b0a      	ldr	r3, [pc, #40]	; (800ea04 <iprintf+0x2c>)
 800e9dc:	b513      	push	{r0, r1, r4, lr}
 800e9de:	681c      	ldr	r4, [r3, #0]
 800e9e0:	b124      	cbz	r4, 800e9ec <iprintf+0x14>
 800e9e2:	69a3      	ldr	r3, [r4, #24]
 800e9e4:	b913      	cbnz	r3, 800e9ec <iprintf+0x14>
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	f000 f8f6 	bl	800ebd8 <__sinit>
 800e9ec:	ab05      	add	r3, sp, #20
 800e9ee:	9a04      	ldr	r2, [sp, #16]
 800e9f0:	68a1      	ldr	r1, [r4, #8]
 800e9f2:	9301      	str	r3, [sp, #4]
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	f000 fc0f 	bl	800f218 <_vfiprintf_r>
 800e9fa:	b002      	add	sp, #8
 800e9fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea00:	b004      	add	sp, #16
 800ea02:	4770      	bx	lr
 800ea04:	2000002c 	.word	0x2000002c

0800ea08 <rand>:
 800ea08:	4b16      	ldr	r3, [pc, #88]	; (800ea64 <rand+0x5c>)
 800ea0a:	b510      	push	{r4, lr}
 800ea0c:	681c      	ldr	r4, [r3, #0]
 800ea0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ea10:	b9b3      	cbnz	r3, 800ea40 <rand+0x38>
 800ea12:	2018      	movs	r0, #24
 800ea14:	f000 f992 	bl	800ed3c <malloc>
 800ea18:	63a0      	str	r0, [r4, #56]	; 0x38
 800ea1a:	b928      	cbnz	r0, 800ea28 <rand+0x20>
 800ea1c:	4602      	mov	r2, r0
 800ea1e:	4b12      	ldr	r3, [pc, #72]	; (800ea68 <rand+0x60>)
 800ea20:	4812      	ldr	r0, [pc, #72]	; (800ea6c <rand+0x64>)
 800ea22:	214e      	movs	r1, #78	; 0x4e
 800ea24:	f000 f862 	bl	800eaec <__assert_func>
 800ea28:	4a11      	ldr	r2, [pc, #68]	; (800ea70 <rand+0x68>)
 800ea2a:	4b12      	ldr	r3, [pc, #72]	; (800ea74 <rand+0x6c>)
 800ea2c:	e9c0 2300 	strd	r2, r3, [r0]
 800ea30:	4b11      	ldr	r3, [pc, #68]	; (800ea78 <rand+0x70>)
 800ea32:	6083      	str	r3, [r0, #8]
 800ea34:	230b      	movs	r3, #11
 800ea36:	8183      	strh	r3, [r0, #12]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ea40:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800ea42:	4a0e      	ldr	r2, [pc, #56]	; (800ea7c <rand+0x74>)
 800ea44:	6920      	ldr	r0, [r4, #16]
 800ea46:	6963      	ldr	r3, [r4, #20]
 800ea48:	490d      	ldr	r1, [pc, #52]	; (800ea80 <rand+0x78>)
 800ea4a:	4342      	muls	r2, r0
 800ea4c:	fb01 2203 	mla	r2, r1, r3, r2
 800ea50:	fba0 0101 	umull	r0, r1, r0, r1
 800ea54:	1c43      	adds	r3, r0, #1
 800ea56:	eb42 0001 	adc.w	r0, r2, r1
 800ea5a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800ea5e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ea62:	bd10      	pop	{r4, pc}
 800ea64:	2000002c 	.word	0x2000002c
 800ea68:	08012930 	.word	0x08012930
 800ea6c:	08012947 	.word	0x08012947
 800ea70:	abcd330e 	.word	0xabcd330e
 800ea74:	e66d1234 	.word	0xe66d1234
 800ea78:	0005deec 	.word	0x0005deec
 800ea7c:	5851f42d 	.word	0x5851f42d
 800ea80:	4c957f2d 	.word	0x4c957f2d

0800ea84 <siprintf>:
 800ea84:	b40e      	push	{r1, r2, r3}
 800ea86:	b500      	push	{lr}
 800ea88:	b09c      	sub	sp, #112	; 0x70
 800ea8a:	ab1d      	add	r3, sp, #116	; 0x74
 800ea8c:	9002      	str	r0, [sp, #8]
 800ea8e:	9006      	str	r0, [sp, #24]
 800ea90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ea94:	4809      	ldr	r0, [pc, #36]	; (800eabc <siprintf+0x38>)
 800ea96:	9107      	str	r1, [sp, #28]
 800ea98:	9104      	str	r1, [sp, #16]
 800ea9a:	4909      	ldr	r1, [pc, #36]	; (800eac0 <siprintf+0x3c>)
 800ea9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800eaa0:	9105      	str	r1, [sp, #20]
 800eaa2:	6800      	ldr	r0, [r0, #0]
 800eaa4:	9301      	str	r3, [sp, #4]
 800eaa6:	a902      	add	r1, sp, #8
 800eaa8:	f000 fa8c 	bl	800efc4 <_svfiprintf_r>
 800eaac:	9b02      	ldr	r3, [sp, #8]
 800eaae:	2200      	movs	r2, #0
 800eab0:	701a      	strb	r2, [r3, #0]
 800eab2:	b01c      	add	sp, #112	; 0x70
 800eab4:	f85d eb04 	ldr.w	lr, [sp], #4
 800eab8:	b003      	add	sp, #12
 800eaba:	4770      	bx	lr
 800eabc:	2000002c 	.word	0x2000002c
 800eac0:	ffff0208 	.word	0xffff0208

0800eac4 <strncpy>:
 800eac4:	b510      	push	{r4, lr}
 800eac6:	3901      	subs	r1, #1
 800eac8:	4603      	mov	r3, r0
 800eaca:	b132      	cbz	r2, 800eada <strncpy+0x16>
 800eacc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ead0:	f803 4b01 	strb.w	r4, [r3], #1
 800ead4:	3a01      	subs	r2, #1
 800ead6:	2c00      	cmp	r4, #0
 800ead8:	d1f7      	bne.n	800eaca <strncpy+0x6>
 800eada:	441a      	add	r2, r3
 800eadc:	2100      	movs	r1, #0
 800eade:	4293      	cmp	r3, r2
 800eae0:	d100      	bne.n	800eae4 <strncpy+0x20>
 800eae2:	bd10      	pop	{r4, pc}
 800eae4:	f803 1b01 	strb.w	r1, [r3], #1
 800eae8:	e7f9      	b.n	800eade <strncpy+0x1a>
	...

0800eaec <__assert_func>:
 800eaec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eaee:	4614      	mov	r4, r2
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	4b09      	ldr	r3, [pc, #36]	; (800eb18 <__assert_func+0x2c>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	4605      	mov	r5, r0
 800eaf8:	68d8      	ldr	r0, [r3, #12]
 800eafa:	b14c      	cbz	r4, 800eb10 <__assert_func+0x24>
 800eafc:	4b07      	ldr	r3, [pc, #28]	; (800eb1c <__assert_func+0x30>)
 800eafe:	9100      	str	r1, [sp, #0]
 800eb00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb04:	4906      	ldr	r1, [pc, #24]	; (800eb20 <__assert_func+0x34>)
 800eb06:	462b      	mov	r3, r5
 800eb08:	f000 f8e4 	bl	800ecd4 <fiprintf>
 800eb0c:	f000 ff6e 	bl	800f9ec <abort>
 800eb10:	4b04      	ldr	r3, [pc, #16]	; (800eb24 <__assert_func+0x38>)
 800eb12:	461c      	mov	r4, r3
 800eb14:	e7f3      	b.n	800eafe <__assert_func+0x12>
 800eb16:	bf00      	nop
 800eb18:	2000002c 	.word	0x2000002c
 800eb1c:	080129a2 	.word	0x080129a2
 800eb20:	080129af 	.word	0x080129af
 800eb24:	080129dd 	.word	0x080129dd

0800eb28 <std>:
 800eb28:	2300      	movs	r3, #0
 800eb2a:	b510      	push	{r4, lr}
 800eb2c:	4604      	mov	r4, r0
 800eb2e:	e9c0 3300 	strd	r3, r3, [r0]
 800eb32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb36:	6083      	str	r3, [r0, #8]
 800eb38:	8181      	strh	r1, [r0, #12]
 800eb3a:	6643      	str	r3, [r0, #100]	; 0x64
 800eb3c:	81c2      	strh	r2, [r0, #14]
 800eb3e:	6183      	str	r3, [r0, #24]
 800eb40:	4619      	mov	r1, r3
 800eb42:	2208      	movs	r2, #8
 800eb44:	305c      	adds	r0, #92	; 0x5c
 800eb46:	f7ff ff3f 	bl	800e9c8 <memset>
 800eb4a:	4b05      	ldr	r3, [pc, #20]	; (800eb60 <std+0x38>)
 800eb4c:	6263      	str	r3, [r4, #36]	; 0x24
 800eb4e:	4b05      	ldr	r3, [pc, #20]	; (800eb64 <std+0x3c>)
 800eb50:	62a3      	str	r3, [r4, #40]	; 0x28
 800eb52:	4b05      	ldr	r3, [pc, #20]	; (800eb68 <std+0x40>)
 800eb54:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb56:	4b05      	ldr	r3, [pc, #20]	; (800eb6c <std+0x44>)
 800eb58:	6224      	str	r4, [r4, #32]
 800eb5a:	6323      	str	r3, [r4, #48]	; 0x30
 800eb5c:	bd10      	pop	{r4, pc}
 800eb5e:	bf00      	nop
 800eb60:	0800f7c1 	.word	0x0800f7c1
 800eb64:	0800f7e3 	.word	0x0800f7e3
 800eb68:	0800f81b 	.word	0x0800f81b
 800eb6c:	0800f83f 	.word	0x0800f83f

0800eb70 <_cleanup_r>:
 800eb70:	4901      	ldr	r1, [pc, #4]	; (800eb78 <_cleanup_r+0x8>)
 800eb72:	f000 b8c1 	b.w	800ecf8 <_fwalk_reent>
 800eb76:	bf00      	nop
 800eb78:	0800fb29 	.word	0x0800fb29

0800eb7c <__sfmoreglue>:
 800eb7c:	b570      	push	{r4, r5, r6, lr}
 800eb7e:	2268      	movs	r2, #104	; 0x68
 800eb80:	1e4d      	subs	r5, r1, #1
 800eb82:	4355      	muls	r5, r2
 800eb84:	460e      	mov	r6, r1
 800eb86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb8a:	f000 f94b 	bl	800ee24 <_malloc_r>
 800eb8e:	4604      	mov	r4, r0
 800eb90:	b140      	cbz	r0, 800eba4 <__sfmoreglue+0x28>
 800eb92:	2100      	movs	r1, #0
 800eb94:	e9c0 1600 	strd	r1, r6, [r0]
 800eb98:	300c      	adds	r0, #12
 800eb9a:	60a0      	str	r0, [r4, #8]
 800eb9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eba0:	f7ff ff12 	bl	800e9c8 <memset>
 800eba4:	4620      	mov	r0, r4
 800eba6:	bd70      	pop	{r4, r5, r6, pc}

0800eba8 <__sfp_lock_acquire>:
 800eba8:	4801      	ldr	r0, [pc, #4]	; (800ebb0 <__sfp_lock_acquire+0x8>)
 800ebaa:	f000 b8c5 	b.w	800ed38 <__retarget_lock_acquire_recursive>
 800ebae:	bf00      	nop
 800ebb0:	2000847d 	.word	0x2000847d

0800ebb4 <__sfp_lock_release>:
 800ebb4:	4801      	ldr	r0, [pc, #4]	; (800ebbc <__sfp_lock_release+0x8>)
 800ebb6:	f000 b8c0 	b.w	800ed3a <__retarget_lock_release_recursive>
 800ebba:	bf00      	nop
 800ebbc:	2000847d 	.word	0x2000847d

0800ebc0 <__sinit_lock_acquire>:
 800ebc0:	4801      	ldr	r0, [pc, #4]	; (800ebc8 <__sinit_lock_acquire+0x8>)
 800ebc2:	f000 b8b9 	b.w	800ed38 <__retarget_lock_acquire_recursive>
 800ebc6:	bf00      	nop
 800ebc8:	2000847e 	.word	0x2000847e

0800ebcc <__sinit_lock_release>:
 800ebcc:	4801      	ldr	r0, [pc, #4]	; (800ebd4 <__sinit_lock_release+0x8>)
 800ebce:	f000 b8b4 	b.w	800ed3a <__retarget_lock_release_recursive>
 800ebd2:	bf00      	nop
 800ebd4:	2000847e 	.word	0x2000847e

0800ebd8 <__sinit>:
 800ebd8:	b510      	push	{r4, lr}
 800ebda:	4604      	mov	r4, r0
 800ebdc:	f7ff fff0 	bl	800ebc0 <__sinit_lock_acquire>
 800ebe0:	69a3      	ldr	r3, [r4, #24]
 800ebe2:	b11b      	cbz	r3, 800ebec <__sinit+0x14>
 800ebe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebe8:	f7ff bff0 	b.w	800ebcc <__sinit_lock_release>
 800ebec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ebf0:	6523      	str	r3, [r4, #80]	; 0x50
 800ebf2:	4b13      	ldr	r3, [pc, #76]	; (800ec40 <__sinit+0x68>)
 800ebf4:	4a13      	ldr	r2, [pc, #76]	; (800ec44 <__sinit+0x6c>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	62a2      	str	r2, [r4, #40]	; 0x28
 800ebfa:	42a3      	cmp	r3, r4
 800ebfc:	bf04      	itt	eq
 800ebfe:	2301      	moveq	r3, #1
 800ec00:	61a3      	streq	r3, [r4, #24]
 800ec02:	4620      	mov	r0, r4
 800ec04:	f000 f820 	bl	800ec48 <__sfp>
 800ec08:	6060      	str	r0, [r4, #4]
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	f000 f81c 	bl	800ec48 <__sfp>
 800ec10:	60a0      	str	r0, [r4, #8]
 800ec12:	4620      	mov	r0, r4
 800ec14:	f000 f818 	bl	800ec48 <__sfp>
 800ec18:	2200      	movs	r2, #0
 800ec1a:	60e0      	str	r0, [r4, #12]
 800ec1c:	2104      	movs	r1, #4
 800ec1e:	6860      	ldr	r0, [r4, #4]
 800ec20:	f7ff ff82 	bl	800eb28 <std>
 800ec24:	68a0      	ldr	r0, [r4, #8]
 800ec26:	2201      	movs	r2, #1
 800ec28:	2109      	movs	r1, #9
 800ec2a:	f7ff ff7d 	bl	800eb28 <std>
 800ec2e:	68e0      	ldr	r0, [r4, #12]
 800ec30:	2202      	movs	r2, #2
 800ec32:	2112      	movs	r1, #18
 800ec34:	f7ff ff78 	bl	800eb28 <std>
 800ec38:	2301      	movs	r3, #1
 800ec3a:	61a3      	str	r3, [r4, #24]
 800ec3c:	e7d2      	b.n	800ebe4 <__sinit+0xc>
 800ec3e:	bf00      	nop
 800ec40:	0801292c 	.word	0x0801292c
 800ec44:	0800eb71 	.word	0x0800eb71

0800ec48 <__sfp>:
 800ec48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec4a:	4607      	mov	r7, r0
 800ec4c:	f7ff ffac 	bl	800eba8 <__sfp_lock_acquire>
 800ec50:	4b1e      	ldr	r3, [pc, #120]	; (800eccc <__sfp+0x84>)
 800ec52:	681e      	ldr	r6, [r3, #0]
 800ec54:	69b3      	ldr	r3, [r6, #24]
 800ec56:	b913      	cbnz	r3, 800ec5e <__sfp+0x16>
 800ec58:	4630      	mov	r0, r6
 800ec5a:	f7ff ffbd 	bl	800ebd8 <__sinit>
 800ec5e:	3648      	adds	r6, #72	; 0x48
 800ec60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ec64:	3b01      	subs	r3, #1
 800ec66:	d503      	bpl.n	800ec70 <__sfp+0x28>
 800ec68:	6833      	ldr	r3, [r6, #0]
 800ec6a:	b30b      	cbz	r3, 800ecb0 <__sfp+0x68>
 800ec6c:	6836      	ldr	r6, [r6, #0]
 800ec6e:	e7f7      	b.n	800ec60 <__sfp+0x18>
 800ec70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ec74:	b9d5      	cbnz	r5, 800ecac <__sfp+0x64>
 800ec76:	4b16      	ldr	r3, [pc, #88]	; (800ecd0 <__sfp+0x88>)
 800ec78:	60e3      	str	r3, [r4, #12]
 800ec7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec7e:	6665      	str	r5, [r4, #100]	; 0x64
 800ec80:	f000 f859 	bl	800ed36 <__retarget_lock_init_recursive>
 800ec84:	f7ff ff96 	bl	800ebb4 <__sfp_lock_release>
 800ec88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ec8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec90:	6025      	str	r5, [r4, #0]
 800ec92:	61a5      	str	r5, [r4, #24]
 800ec94:	2208      	movs	r2, #8
 800ec96:	4629      	mov	r1, r5
 800ec98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec9c:	f7ff fe94 	bl	800e9c8 <memset>
 800eca0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eca4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eca8:	4620      	mov	r0, r4
 800ecaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecac:	3468      	adds	r4, #104	; 0x68
 800ecae:	e7d9      	b.n	800ec64 <__sfp+0x1c>
 800ecb0:	2104      	movs	r1, #4
 800ecb2:	4638      	mov	r0, r7
 800ecb4:	f7ff ff62 	bl	800eb7c <__sfmoreglue>
 800ecb8:	4604      	mov	r4, r0
 800ecba:	6030      	str	r0, [r6, #0]
 800ecbc:	2800      	cmp	r0, #0
 800ecbe:	d1d5      	bne.n	800ec6c <__sfp+0x24>
 800ecc0:	f7ff ff78 	bl	800ebb4 <__sfp_lock_release>
 800ecc4:	230c      	movs	r3, #12
 800ecc6:	603b      	str	r3, [r7, #0]
 800ecc8:	e7ee      	b.n	800eca8 <__sfp+0x60>
 800ecca:	bf00      	nop
 800eccc:	0801292c 	.word	0x0801292c
 800ecd0:	ffff0001 	.word	0xffff0001

0800ecd4 <fiprintf>:
 800ecd4:	b40e      	push	{r1, r2, r3}
 800ecd6:	b503      	push	{r0, r1, lr}
 800ecd8:	4601      	mov	r1, r0
 800ecda:	ab03      	add	r3, sp, #12
 800ecdc:	4805      	ldr	r0, [pc, #20]	; (800ecf4 <fiprintf+0x20>)
 800ecde:	f853 2b04 	ldr.w	r2, [r3], #4
 800ece2:	6800      	ldr	r0, [r0, #0]
 800ece4:	9301      	str	r3, [sp, #4]
 800ece6:	f000 fa97 	bl	800f218 <_vfiprintf_r>
 800ecea:	b002      	add	sp, #8
 800ecec:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecf0:	b003      	add	sp, #12
 800ecf2:	4770      	bx	lr
 800ecf4:	2000002c 	.word	0x2000002c

0800ecf8 <_fwalk_reent>:
 800ecf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecfc:	4606      	mov	r6, r0
 800ecfe:	4688      	mov	r8, r1
 800ed00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ed04:	2700      	movs	r7, #0
 800ed06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed0a:	f1b9 0901 	subs.w	r9, r9, #1
 800ed0e:	d505      	bpl.n	800ed1c <_fwalk_reent+0x24>
 800ed10:	6824      	ldr	r4, [r4, #0]
 800ed12:	2c00      	cmp	r4, #0
 800ed14:	d1f7      	bne.n	800ed06 <_fwalk_reent+0xe>
 800ed16:	4638      	mov	r0, r7
 800ed18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed1c:	89ab      	ldrh	r3, [r5, #12]
 800ed1e:	2b01      	cmp	r3, #1
 800ed20:	d907      	bls.n	800ed32 <_fwalk_reent+0x3a>
 800ed22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed26:	3301      	adds	r3, #1
 800ed28:	d003      	beq.n	800ed32 <_fwalk_reent+0x3a>
 800ed2a:	4629      	mov	r1, r5
 800ed2c:	4630      	mov	r0, r6
 800ed2e:	47c0      	blx	r8
 800ed30:	4307      	orrs	r7, r0
 800ed32:	3568      	adds	r5, #104	; 0x68
 800ed34:	e7e9      	b.n	800ed0a <_fwalk_reent+0x12>

0800ed36 <__retarget_lock_init_recursive>:
 800ed36:	4770      	bx	lr

0800ed38 <__retarget_lock_acquire_recursive>:
 800ed38:	4770      	bx	lr

0800ed3a <__retarget_lock_release_recursive>:
 800ed3a:	4770      	bx	lr

0800ed3c <malloc>:
 800ed3c:	4b02      	ldr	r3, [pc, #8]	; (800ed48 <malloc+0xc>)
 800ed3e:	4601      	mov	r1, r0
 800ed40:	6818      	ldr	r0, [r3, #0]
 800ed42:	f000 b86f 	b.w	800ee24 <_malloc_r>
 800ed46:	bf00      	nop
 800ed48:	2000002c 	.word	0x2000002c

0800ed4c <_free_r>:
 800ed4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed4e:	2900      	cmp	r1, #0
 800ed50:	d044      	beq.n	800eddc <_free_r+0x90>
 800ed52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed56:	9001      	str	r0, [sp, #4]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	f1a1 0404 	sub.w	r4, r1, #4
 800ed5e:	bfb8      	it	lt
 800ed60:	18e4      	addlt	r4, r4, r3
 800ed62:	f000 ff95 	bl	800fc90 <__malloc_lock>
 800ed66:	4a1e      	ldr	r2, [pc, #120]	; (800ede0 <_free_r+0x94>)
 800ed68:	9801      	ldr	r0, [sp, #4]
 800ed6a:	6813      	ldr	r3, [r2, #0]
 800ed6c:	b933      	cbnz	r3, 800ed7c <_free_r+0x30>
 800ed6e:	6063      	str	r3, [r4, #4]
 800ed70:	6014      	str	r4, [r2, #0]
 800ed72:	b003      	add	sp, #12
 800ed74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed78:	f000 bf90 	b.w	800fc9c <__malloc_unlock>
 800ed7c:	42a3      	cmp	r3, r4
 800ed7e:	d908      	bls.n	800ed92 <_free_r+0x46>
 800ed80:	6825      	ldr	r5, [r4, #0]
 800ed82:	1961      	adds	r1, r4, r5
 800ed84:	428b      	cmp	r3, r1
 800ed86:	bf01      	itttt	eq
 800ed88:	6819      	ldreq	r1, [r3, #0]
 800ed8a:	685b      	ldreq	r3, [r3, #4]
 800ed8c:	1949      	addeq	r1, r1, r5
 800ed8e:	6021      	streq	r1, [r4, #0]
 800ed90:	e7ed      	b.n	800ed6e <_free_r+0x22>
 800ed92:	461a      	mov	r2, r3
 800ed94:	685b      	ldr	r3, [r3, #4]
 800ed96:	b10b      	cbz	r3, 800ed9c <_free_r+0x50>
 800ed98:	42a3      	cmp	r3, r4
 800ed9a:	d9fa      	bls.n	800ed92 <_free_r+0x46>
 800ed9c:	6811      	ldr	r1, [r2, #0]
 800ed9e:	1855      	adds	r5, r2, r1
 800eda0:	42a5      	cmp	r5, r4
 800eda2:	d10b      	bne.n	800edbc <_free_r+0x70>
 800eda4:	6824      	ldr	r4, [r4, #0]
 800eda6:	4421      	add	r1, r4
 800eda8:	1854      	adds	r4, r2, r1
 800edaa:	42a3      	cmp	r3, r4
 800edac:	6011      	str	r1, [r2, #0]
 800edae:	d1e0      	bne.n	800ed72 <_free_r+0x26>
 800edb0:	681c      	ldr	r4, [r3, #0]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	6053      	str	r3, [r2, #4]
 800edb6:	4421      	add	r1, r4
 800edb8:	6011      	str	r1, [r2, #0]
 800edba:	e7da      	b.n	800ed72 <_free_r+0x26>
 800edbc:	d902      	bls.n	800edc4 <_free_r+0x78>
 800edbe:	230c      	movs	r3, #12
 800edc0:	6003      	str	r3, [r0, #0]
 800edc2:	e7d6      	b.n	800ed72 <_free_r+0x26>
 800edc4:	6825      	ldr	r5, [r4, #0]
 800edc6:	1961      	adds	r1, r4, r5
 800edc8:	428b      	cmp	r3, r1
 800edca:	bf04      	itt	eq
 800edcc:	6819      	ldreq	r1, [r3, #0]
 800edce:	685b      	ldreq	r3, [r3, #4]
 800edd0:	6063      	str	r3, [r4, #4]
 800edd2:	bf04      	itt	eq
 800edd4:	1949      	addeq	r1, r1, r5
 800edd6:	6021      	streq	r1, [r4, #0]
 800edd8:	6054      	str	r4, [r2, #4]
 800edda:	e7ca      	b.n	800ed72 <_free_r+0x26>
 800eddc:	b003      	add	sp, #12
 800edde:	bd30      	pop	{r4, r5, pc}
 800ede0:	20008480 	.word	0x20008480

0800ede4 <sbrk_aligned>:
 800ede4:	b570      	push	{r4, r5, r6, lr}
 800ede6:	4e0e      	ldr	r6, [pc, #56]	; (800ee20 <sbrk_aligned+0x3c>)
 800ede8:	460c      	mov	r4, r1
 800edea:	6831      	ldr	r1, [r6, #0]
 800edec:	4605      	mov	r5, r0
 800edee:	b911      	cbnz	r1, 800edf6 <sbrk_aligned+0x12>
 800edf0:	f000 fcd6 	bl	800f7a0 <_sbrk_r>
 800edf4:	6030      	str	r0, [r6, #0]
 800edf6:	4621      	mov	r1, r4
 800edf8:	4628      	mov	r0, r5
 800edfa:	f000 fcd1 	bl	800f7a0 <_sbrk_r>
 800edfe:	1c43      	adds	r3, r0, #1
 800ee00:	d00a      	beq.n	800ee18 <sbrk_aligned+0x34>
 800ee02:	1cc4      	adds	r4, r0, #3
 800ee04:	f024 0403 	bic.w	r4, r4, #3
 800ee08:	42a0      	cmp	r0, r4
 800ee0a:	d007      	beq.n	800ee1c <sbrk_aligned+0x38>
 800ee0c:	1a21      	subs	r1, r4, r0
 800ee0e:	4628      	mov	r0, r5
 800ee10:	f000 fcc6 	bl	800f7a0 <_sbrk_r>
 800ee14:	3001      	adds	r0, #1
 800ee16:	d101      	bne.n	800ee1c <sbrk_aligned+0x38>
 800ee18:	f04f 34ff 	mov.w	r4, #4294967295
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	bd70      	pop	{r4, r5, r6, pc}
 800ee20:	20008484 	.word	0x20008484

0800ee24 <_malloc_r>:
 800ee24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee28:	1ccd      	adds	r5, r1, #3
 800ee2a:	f025 0503 	bic.w	r5, r5, #3
 800ee2e:	3508      	adds	r5, #8
 800ee30:	2d0c      	cmp	r5, #12
 800ee32:	bf38      	it	cc
 800ee34:	250c      	movcc	r5, #12
 800ee36:	2d00      	cmp	r5, #0
 800ee38:	4607      	mov	r7, r0
 800ee3a:	db01      	blt.n	800ee40 <_malloc_r+0x1c>
 800ee3c:	42a9      	cmp	r1, r5
 800ee3e:	d905      	bls.n	800ee4c <_malloc_r+0x28>
 800ee40:	230c      	movs	r3, #12
 800ee42:	603b      	str	r3, [r7, #0]
 800ee44:	2600      	movs	r6, #0
 800ee46:	4630      	mov	r0, r6
 800ee48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee4c:	4e2e      	ldr	r6, [pc, #184]	; (800ef08 <_malloc_r+0xe4>)
 800ee4e:	f000 ff1f 	bl	800fc90 <__malloc_lock>
 800ee52:	6833      	ldr	r3, [r6, #0]
 800ee54:	461c      	mov	r4, r3
 800ee56:	bb34      	cbnz	r4, 800eea6 <_malloc_r+0x82>
 800ee58:	4629      	mov	r1, r5
 800ee5a:	4638      	mov	r0, r7
 800ee5c:	f7ff ffc2 	bl	800ede4 <sbrk_aligned>
 800ee60:	1c43      	adds	r3, r0, #1
 800ee62:	4604      	mov	r4, r0
 800ee64:	d14d      	bne.n	800ef02 <_malloc_r+0xde>
 800ee66:	6834      	ldr	r4, [r6, #0]
 800ee68:	4626      	mov	r6, r4
 800ee6a:	2e00      	cmp	r6, #0
 800ee6c:	d140      	bne.n	800eef0 <_malloc_r+0xcc>
 800ee6e:	6823      	ldr	r3, [r4, #0]
 800ee70:	4631      	mov	r1, r6
 800ee72:	4638      	mov	r0, r7
 800ee74:	eb04 0803 	add.w	r8, r4, r3
 800ee78:	f000 fc92 	bl	800f7a0 <_sbrk_r>
 800ee7c:	4580      	cmp	r8, r0
 800ee7e:	d13a      	bne.n	800eef6 <_malloc_r+0xd2>
 800ee80:	6821      	ldr	r1, [r4, #0]
 800ee82:	3503      	adds	r5, #3
 800ee84:	1a6d      	subs	r5, r5, r1
 800ee86:	f025 0503 	bic.w	r5, r5, #3
 800ee8a:	3508      	adds	r5, #8
 800ee8c:	2d0c      	cmp	r5, #12
 800ee8e:	bf38      	it	cc
 800ee90:	250c      	movcc	r5, #12
 800ee92:	4629      	mov	r1, r5
 800ee94:	4638      	mov	r0, r7
 800ee96:	f7ff ffa5 	bl	800ede4 <sbrk_aligned>
 800ee9a:	3001      	adds	r0, #1
 800ee9c:	d02b      	beq.n	800eef6 <_malloc_r+0xd2>
 800ee9e:	6823      	ldr	r3, [r4, #0]
 800eea0:	442b      	add	r3, r5
 800eea2:	6023      	str	r3, [r4, #0]
 800eea4:	e00e      	b.n	800eec4 <_malloc_r+0xa0>
 800eea6:	6822      	ldr	r2, [r4, #0]
 800eea8:	1b52      	subs	r2, r2, r5
 800eeaa:	d41e      	bmi.n	800eeea <_malloc_r+0xc6>
 800eeac:	2a0b      	cmp	r2, #11
 800eeae:	d916      	bls.n	800eede <_malloc_r+0xba>
 800eeb0:	1961      	adds	r1, r4, r5
 800eeb2:	42a3      	cmp	r3, r4
 800eeb4:	6025      	str	r5, [r4, #0]
 800eeb6:	bf18      	it	ne
 800eeb8:	6059      	strne	r1, [r3, #4]
 800eeba:	6863      	ldr	r3, [r4, #4]
 800eebc:	bf08      	it	eq
 800eebe:	6031      	streq	r1, [r6, #0]
 800eec0:	5162      	str	r2, [r4, r5]
 800eec2:	604b      	str	r3, [r1, #4]
 800eec4:	4638      	mov	r0, r7
 800eec6:	f104 060b 	add.w	r6, r4, #11
 800eeca:	f000 fee7 	bl	800fc9c <__malloc_unlock>
 800eece:	f026 0607 	bic.w	r6, r6, #7
 800eed2:	1d23      	adds	r3, r4, #4
 800eed4:	1af2      	subs	r2, r6, r3
 800eed6:	d0b6      	beq.n	800ee46 <_malloc_r+0x22>
 800eed8:	1b9b      	subs	r3, r3, r6
 800eeda:	50a3      	str	r3, [r4, r2]
 800eedc:	e7b3      	b.n	800ee46 <_malloc_r+0x22>
 800eede:	6862      	ldr	r2, [r4, #4]
 800eee0:	42a3      	cmp	r3, r4
 800eee2:	bf0c      	ite	eq
 800eee4:	6032      	streq	r2, [r6, #0]
 800eee6:	605a      	strne	r2, [r3, #4]
 800eee8:	e7ec      	b.n	800eec4 <_malloc_r+0xa0>
 800eeea:	4623      	mov	r3, r4
 800eeec:	6864      	ldr	r4, [r4, #4]
 800eeee:	e7b2      	b.n	800ee56 <_malloc_r+0x32>
 800eef0:	4634      	mov	r4, r6
 800eef2:	6876      	ldr	r6, [r6, #4]
 800eef4:	e7b9      	b.n	800ee6a <_malloc_r+0x46>
 800eef6:	230c      	movs	r3, #12
 800eef8:	603b      	str	r3, [r7, #0]
 800eefa:	4638      	mov	r0, r7
 800eefc:	f000 fece 	bl	800fc9c <__malloc_unlock>
 800ef00:	e7a1      	b.n	800ee46 <_malloc_r+0x22>
 800ef02:	6025      	str	r5, [r4, #0]
 800ef04:	e7de      	b.n	800eec4 <_malloc_r+0xa0>
 800ef06:	bf00      	nop
 800ef08:	20008480 	.word	0x20008480

0800ef0c <__ssputs_r>:
 800ef0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef10:	688e      	ldr	r6, [r1, #8]
 800ef12:	429e      	cmp	r6, r3
 800ef14:	4682      	mov	sl, r0
 800ef16:	460c      	mov	r4, r1
 800ef18:	4690      	mov	r8, r2
 800ef1a:	461f      	mov	r7, r3
 800ef1c:	d838      	bhi.n	800ef90 <__ssputs_r+0x84>
 800ef1e:	898a      	ldrh	r2, [r1, #12]
 800ef20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ef24:	d032      	beq.n	800ef8c <__ssputs_r+0x80>
 800ef26:	6825      	ldr	r5, [r4, #0]
 800ef28:	6909      	ldr	r1, [r1, #16]
 800ef2a:	eba5 0901 	sub.w	r9, r5, r1
 800ef2e:	6965      	ldr	r5, [r4, #20]
 800ef30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef38:	3301      	adds	r3, #1
 800ef3a:	444b      	add	r3, r9
 800ef3c:	106d      	asrs	r5, r5, #1
 800ef3e:	429d      	cmp	r5, r3
 800ef40:	bf38      	it	cc
 800ef42:	461d      	movcc	r5, r3
 800ef44:	0553      	lsls	r3, r2, #21
 800ef46:	d531      	bpl.n	800efac <__ssputs_r+0xa0>
 800ef48:	4629      	mov	r1, r5
 800ef4a:	f7ff ff6b 	bl	800ee24 <_malloc_r>
 800ef4e:	4606      	mov	r6, r0
 800ef50:	b950      	cbnz	r0, 800ef68 <__ssputs_r+0x5c>
 800ef52:	230c      	movs	r3, #12
 800ef54:	f8ca 3000 	str.w	r3, [sl]
 800ef58:	89a3      	ldrh	r3, [r4, #12]
 800ef5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef5e:	81a3      	strh	r3, [r4, #12]
 800ef60:	f04f 30ff 	mov.w	r0, #4294967295
 800ef64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef68:	6921      	ldr	r1, [r4, #16]
 800ef6a:	464a      	mov	r2, r9
 800ef6c:	f7ff fd04 	bl	800e978 <memcpy>
 800ef70:	89a3      	ldrh	r3, [r4, #12]
 800ef72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ef76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef7a:	81a3      	strh	r3, [r4, #12]
 800ef7c:	6126      	str	r6, [r4, #16]
 800ef7e:	6165      	str	r5, [r4, #20]
 800ef80:	444e      	add	r6, r9
 800ef82:	eba5 0509 	sub.w	r5, r5, r9
 800ef86:	6026      	str	r6, [r4, #0]
 800ef88:	60a5      	str	r5, [r4, #8]
 800ef8a:	463e      	mov	r6, r7
 800ef8c:	42be      	cmp	r6, r7
 800ef8e:	d900      	bls.n	800ef92 <__ssputs_r+0x86>
 800ef90:	463e      	mov	r6, r7
 800ef92:	6820      	ldr	r0, [r4, #0]
 800ef94:	4632      	mov	r2, r6
 800ef96:	4641      	mov	r1, r8
 800ef98:	f7ff fcfc 	bl	800e994 <memmove>
 800ef9c:	68a3      	ldr	r3, [r4, #8]
 800ef9e:	1b9b      	subs	r3, r3, r6
 800efa0:	60a3      	str	r3, [r4, #8]
 800efa2:	6823      	ldr	r3, [r4, #0]
 800efa4:	4433      	add	r3, r6
 800efa6:	6023      	str	r3, [r4, #0]
 800efa8:	2000      	movs	r0, #0
 800efaa:	e7db      	b.n	800ef64 <__ssputs_r+0x58>
 800efac:	462a      	mov	r2, r5
 800efae:	f000 fe7b 	bl	800fca8 <_realloc_r>
 800efb2:	4606      	mov	r6, r0
 800efb4:	2800      	cmp	r0, #0
 800efb6:	d1e1      	bne.n	800ef7c <__ssputs_r+0x70>
 800efb8:	6921      	ldr	r1, [r4, #16]
 800efba:	4650      	mov	r0, sl
 800efbc:	f7ff fec6 	bl	800ed4c <_free_r>
 800efc0:	e7c7      	b.n	800ef52 <__ssputs_r+0x46>
	...

0800efc4 <_svfiprintf_r>:
 800efc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efc8:	4698      	mov	r8, r3
 800efca:	898b      	ldrh	r3, [r1, #12]
 800efcc:	061b      	lsls	r3, r3, #24
 800efce:	b09d      	sub	sp, #116	; 0x74
 800efd0:	4607      	mov	r7, r0
 800efd2:	460d      	mov	r5, r1
 800efd4:	4614      	mov	r4, r2
 800efd6:	d50e      	bpl.n	800eff6 <_svfiprintf_r+0x32>
 800efd8:	690b      	ldr	r3, [r1, #16]
 800efda:	b963      	cbnz	r3, 800eff6 <_svfiprintf_r+0x32>
 800efdc:	2140      	movs	r1, #64	; 0x40
 800efde:	f7ff ff21 	bl	800ee24 <_malloc_r>
 800efe2:	6028      	str	r0, [r5, #0]
 800efe4:	6128      	str	r0, [r5, #16]
 800efe6:	b920      	cbnz	r0, 800eff2 <_svfiprintf_r+0x2e>
 800efe8:	230c      	movs	r3, #12
 800efea:	603b      	str	r3, [r7, #0]
 800efec:	f04f 30ff 	mov.w	r0, #4294967295
 800eff0:	e0d1      	b.n	800f196 <_svfiprintf_r+0x1d2>
 800eff2:	2340      	movs	r3, #64	; 0x40
 800eff4:	616b      	str	r3, [r5, #20]
 800eff6:	2300      	movs	r3, #0
 800eff8:	9309      	str	r3, [sp, #36]	; 0x24
 800effa:	2320      	movs	r3, #32
 800effc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f000:	f8cd 800c 	str.w	r8, [sp, #12]
 800f004:	2330      	movs	r3, #48	; 0x30
 800f006:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f1b0 <_svfiprintf_r+0x1ec>
 800f00a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f00e:	f04f 0901 	mov.w	r9, #1
 800f012:	4623      	mov	r3, r4
 800f014:	469a      	mov	sl, r3
 800f016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f01a:	b10a      	cbz	r2, 800f020 <_svfiprintf_r+0x5c>
 800f01c:	2a25      	cmp	r2, #37	; 0x25
 800f01e:	d1f9      	bne.n	800f014 <_svfiprintf_r+0x50>
 800f020:	ebba 0b04 	subs.w	fp, sl, r4
 800f024:	d00b      	beq.n	800f03e <_svfiprintf_r+0x7a>
 800f026:	465b      	mov	r3, fp
 800f028:	4622      	mov	r2, r4
 800f02a:	4629      	mov	r1, r5
 800f02c:	4638      	mov	r0, r7
 800f02e:	f7ff ff6d 	bl	800ef0c <__ssputs_r>
 800f032:	3001      	adds	r0, #1
 800f034:	f000 80aa 	beq.w	800f18c <_svfiprintf_r+0x1c8>
 800f038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f03a:	445a      	add	r2, fp
 800f03c:	9209      	str	r2, [sp, #36]	; 0x24
 800f03e:	f89a 3000 	ldrb.w	r3, [sl]
 800f042:	2b00      	cmp	r3, #0
 800f044:	f000 80a2 	beq.w	800f18c <_svfiprintf_r+0x1c8>
 800f048:	2300      	movs	r3, #0
 800f04a:	f04f 32ff 	mov.w	r2, #4294967295
 800f04e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f052:	f10a 0a01 	add.w	sl, sl, #1
 800f056:	9304      	str	r3, [sp, #16]
 800f058:	9307      	str	r3, [sp, #28]
 800f05a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f05e:	931a      	str	r3, [sp, #104]	; 0x68
 800f060:	4654      	mov	r4, sl
 800f062:	2205      	movs	r2, #5
 800f064:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f068:	4851      	ldr	r0, [pc, #324]	; (800f1b0 <_svfiprintf_r+0x1ec>)
 800f06a:	f7f1 f8b1 	bl	80001d0 <memchr>
 800f06e:	9a04      	ldr	r2, [sp, #16]
 800f070:	b9d8      	cbnz	r0, 800f0aa <_svfiprintf_r+0xe6>
 800f072:	06d0      	lsls	r0, r2, #27
 800f074:	bf44      	itt	mi
 800f076:	2320      	movmi	r3, #32
 800f078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f07c:	0711      	lsls	r1, r2, #28
 800f07e:	bf44      	itt	mi
 800f080:	232b      	movmi	r3, #43	; 0x2b
 800f082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f086:	f89a 3000 	ldrb.w	r3, [sl]
 800f08a:	2b2a      	cmp	r3, #42	; 0x2a
 800f08c:	d015      	beq.n	800f0ba <_svfiprintf_r+0xf6>
 800f08e:	9a07      	ldr	r2, [sp, #28]
 800f090:	4654      	mov	r4, sl
 800f092:	2000      	movs	r0, #0
 800f094:	f04f 0c0a 	mov.w	ip, #10
 800f098:	4621      	mov	r1, r4
 800f09a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f09e:	3b30      	subs	r3, #48	; 0x30
 800f0a0:	2b09      	cmp	r3, #9
 800f0a2:	d94e      	bls.n	800f142 <_svfiprintf_r+0x17e>
 800f0a4:	b1b0      	cbz	r0, 800f0d4 <_svfiprintf_r+0x110>
 800f0a6:	9207      	str	r2, [sp, #28]
 800f0a8:	e014      	b.n	800f0d4 <_svfiprintf_r+0x110>
 800f0aa:	eba0 0308 	sub.w	r3, r0, r8
 800f0ae:	fa09 f303 	lsl.w	r3, r9, r3
 800f0b2:	4313      	orrs	r3, r2
 800f0b4:	9304      	str	r3, [sp, #16]
 800f0b6:	46a2      	mov	sl, r4
 800f0b8:	e7d2      	b.n	800f060 <_svfiprintf_r+0x9c>
 800f0ba:	9b03      	ldr	r3, [sp, #12]
 800f0bc:	1d19      	adds	r1, r3, #4
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	9103      	str	r1, [sp, #12]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	bfbb      	ittet	lt
 800f0c6:	425b      	neglt	r3, r3
 800f0c8:	f042 0202 	orrlt.w	r2, r2, #2
 800f0cc:	9307      	strge	r3, [sp, #28]
 800f0ce:	9307      	strlt	r3, [sp, #28]
 800f0d0:	bfb8      	it	lt
 800f0d2:	9204      	strlt	r2, [sp, #16]
 800f0d4:	7823      	ldrb	r3, [r4, #0]
 800f0d6:	2b2e      	cmp	r3, #46	; 0x2e
 800f0d8:	d10c      	bne.n	800f0f4 <_svfiprintf_r+0x130>
 800f0da:	7863      	ldrb	r3, [r4, #1]
 800f0dc:	2b2a      	cmp	r3, #42	; 0x2a
 800f0de:	d135      	bne.n	800f14c <_svfiprintf_r+0x188>
 800f0e0:	9b03      	ldr	r3, [sp, #12]
 800f0e2:	1d1a      	adds	r2, r3, #4
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	9203      	str	r2, [sp, #12]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	bfb8      	it	lt
 800f0ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800f0f0:	3402      	adds	r4, #2
 800f0f2:	9305      	str	r3, [sp, #20]
 800f0f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f1c0 <_svfiprintf_r+0x1fc>
 800f0f8:	7821      	ldrb	r1, [r4, #0]
 800f0fa:	2203      	movs	r2, #3
 800f0fc:	4650      	mov	r0, sl
 800f0fe:	f7f1 f867 	bl	80001d0 <memchr>
 800f102:	b140      	cbz	r0, 800f116 <_svfiprintf_r+0x152>
 800f104:	2340      	movs	r3, #64	; 0x40
 800f106:	eba0 000a 	sub.w	r0, r0, sl
 800f10a:	fa03 f000 	lsl.w	r0, r3, r0
 800f10e:	9b04      	ldr	r3, [sp, #16]
 800f110:	4303      	orrs	r3, r0
 800f112:	3401      	adds	r4, #1
 800f114:	9304      	str	r3, [sp, #16]
 800f116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f11a:	4826      	ldr	r0, [pc, #152]	; (800f1b4 <_svfiprintf_r+0x1f0>)
 800f11c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f120:	2206      	movs	r2, #6
 800f122:	f7f1 f855 	bl	80001d0 <memchr>
 800f126:	2800      	cmp	r0, #0
 800f128:	d038      	beq.n	800f19c <_svfiprintf_r+0x1d8>
 800f12a:	4b23      	ldr	r3, [pc, #140]	; (800f1b8 <_svfiprintf_r+0x1f4>)
 800f12c:	bb1b      	cbnz	r3, 800f176 <_svfiprintf_r+0x1b2>
 800f12e:	9b03      	ldr	r3, [sp, #12]
 800f130:	3307      	adds	r3, #7
 800f132:	f023 0307 	bic.w	r3, r3, #7
 800f136:	3308      	adds	r3, #8
 800f138:	9303      	str	r3, [sp, #12]
 800f13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f13c:	4433      	add	r3, r6
 800f13e:	9309      	str	r3, [sp, #36]	; 0x24
 800f140:	e767      	b.n	800f012 <_svfiprintf_r+0x4e>
 800f142:	fb0c 3202 	mla	r2, ip, r2, r3
 800f146:	460c      	mov	r4, r1
 800f148:	2001      	movs	r0, #1
 800f14a:	e7a5      	b.n	800f098 <_svfiprintf_r+0xd4>
 800f14c:	2300      	movs	r3, #0
 800f14e:	3401      	adds	r4, #1
 800f150:	9305      	str	r3, [sp, #20]
 800f152:	4619      	mov	r1, r3
 800f154:	f04f 0c0a 	mov.w	ip, #10
 800f158:	4620      	mov	r0, r4
 800f15a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f15e:	3a30      	subs	r2, #48	; 0x30
 800f160:	2a09      	cmp	r2, #9
 800f162:	d903      	bls.n	800f16c <_svfiprintf_r+0x1a8>
 800f164:	2b00      	cmp	r3, #0
 800f166:	d0c5      	beq.n	800f0f4 <_svfiprintf_r+0x130>
 800f168:	9105      	str	r1, [sp, #20]
 800f16a:	e7c3      	b.n	800f0f4 <_svfiprintf_r+0x130>
 800f16c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f170:	4604      	mov	r4, r0
 800f172:	2301      	movs	r3, #1
 800f174:	e7f0      	b.n	800f158 <_svfiprintf_r+0x194>
 800f176:	ab03      	add	r3, sp, #12
 800f178:	9300      	str	r3, [sp, #0]
 800f17a:	462a      	mov	r2, r5
 800f17c:	4b0f      	ldr	r3, [pc, #60]	; (800f1bc <_svfiprintf_r+0x1f8>)
 800f17e:	a904      	add	r1, sp, #16
 800f180:	4638      	mov	r0, r7
 800f182:	f3af 8000 	nop.w
 800f186:	1c42      	adds	r2, r0, #1
 800f188:	4606      	mov	r6, r0
 800f18a:	d1d6      	bne.n	800f13a <_svfiprintf_r+0x176>
 800f18c:	89ab      	ldrh	r3, [r5, #12]
 800f18e:	065b      	lsls	r3, r3, #25
 800f190:	f53f af2c 	bmi.w	800efec <_svfiprintf_r+0x28>
 800f194:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f196:	b01d      	add	sp, #116	; 0x74
 800f198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f19c:	ab03      	add	r3, sp, #12
 800f19e:	9300      	str	r3, [sp, #0]
 800f1a0:	462a      	mov	r2, r5
 800f1a2:	4b06      	ldr	r3, [pc, #24]	; (800f1bc <_svfiprintf_r+0x1f8>)
 800f1a4:	a904      	add	r1, sp, #16
 800f1a6:	4638      	mov	r0, r7
 800f1a8:	f000 f9d4 	bl	800f554 <_printf_i>
 800f1ac:	e7eb      	b.n	800f186 <_svfiprintf_r+0x1c2>
 800f1ae:	bf00      	nop
 800f1b0:	08012a40 	.word	0x08012a40
 800f1b4:	08012a4a 	.word	0x08012a4a
 800f1b8:	00000000 	.word	0x00000000
 800f1bc:	0800ef0d 	.word	0x0800ef0d
 800f1c0:	08012a46 	.word	0x08012a46

0800f1c4 <__sfputc_r>:
 800f1c4:	6893      	ldr	r3, [r2, #8]
 800f1c6:	3b01      	subs	r3, #1
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	b410      	push	{r4}
 800f1cc:	6093      	str	r3, [r2, #8]
 800f1ce:	da08      	bge.n	800f1e2 <__sfputc_r+0x1e>
 800f1d0:	6994      	ldr	r4, [r2, #24]
 800f1d2:	42a3      	cmp	r3, r4
 800f1d4:	db01      	blt.n	800f1da <__sfputc_r+0x16>
 800f1d6:	290a      	cmp	r1, #10
 800f1d8:	d103      	bne.n	800f1e2 <__sfputc_r+0x1e>
 800f1da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1de:	f000 bb33 	b.w	800f848 <__swbuf_r>
 800f1e2:	6813      	ldr	r3, [r2, #0]
 800f1e4:	1c58      	adds	r0, r3, #1
 800f1e6:	6010      	str	r0, [r2, #0]
 800f1e8:	7019      	strb	r1, [r3, #0]
 800f1ea:	4608      	mov	r0, r1
 800f1ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1f0:	4770      	bx	lr

0800f1f2 <__sfputs_r>:
 800f1f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1f4:	4606      	mov	r6, r0
 800f1f6:	460f      	mov	r7, r1
 800f1f8:	4614      	mov	r4, r2
 800f1fa:	18d5      	adds	r5, r2, r3
 800f1fc:	42ac      	cmp	r4, r5
 800f1fe:	d101      	bne.n	800f204 <__sfputs_r+0x12>
 800f200:	2000      	movs	r0, #0
 800f202:	e007      	b.n	800f214 <__sfputs_r+0x22>
 800f204:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f208:	463a      	mov	r2, r7
 800f20a:	4630      	mov	r0, r6
 800f20c:	f7ff ffda 	bl	800f1c4 <__sfputc_r>
 800f210:	1c43      	adds	r3, r0, #1
 800f212:	d1f3      	bne.n	800f1fc <__sfputs_r+0xa>
 800f214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f218 <_vfiprintf_r>:
 800f218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f21c:	460d      	mov	r5, r1
 800f21e:	b09d      	sub	sp, #116	; 0x74
 800f220:	4614      	mov	r4, r2
 800f222:	4698      	mov	r8, r3
 800f224:	4606      	mov	r6, r0
 800f226:	b118      	cbz	r0, 800f230 <_vfiprintf_r+0x18>
 800f228:	6983      	ldr	r3, [r0, #24]
 800f22a:	b90b      	cbnz	r3, 800f230 <_vfiprintf_r+0x18>
 800f22c:	f7ff fcd4 	bl	800ebd8 <__sinit>
 800f230:	4b89      	ldr	r3, [pc, #548]	; (800f458 <_vfiprintf_r+0x240>)
 800f232:	429d      	cmp	r5, r3
 800f234:	d11b      	bne.n	800f26e <_vfiprintf_r+0x56>
 800f236:	6875      	ldr	r5, [r6, #4]
 800f238:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f23a:	07d9      	lsls	r1, r3, #31
 800f23c:	d405      	bmi.n	800f24a <_vfiprintf_r+0x32>
 800f23e:	89ab      	ldrh	r3, [r5, #12]
 800f240:	059a      	lsls	r2, r3, #22
 800f242:	d402      	bmi.n	800f24a <_vfiprintf_r+0x32>
 800f244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f246:	f7ff fd77 	bl	800ed38 <__retarget_lock_acquire_recursive>
 800f24a:	89ab      	ldrh	r3, [r5, #12]
 800f24c:	071b      	lsls	r3, r3, #28
 800f24e:	d501      	bpl.n	800f254 <_vfiprintf_r+0x3c>
 800f250:	692b      	ldr	r3, [r5, #16]
 800f252:	b9eb      	cbnz	r3, 800f290 <_vfiprintf_r+0x78>
 800f254:	4629      	mov	r1, r5
 800f256:	4630      	mov	r0, r6
 800f258:	f000 fb5a 	bl	800f910 <__swsetup_r>
 800f25c:	b1c0      	cbz	r0, 800f290 <_vfiprintf_r+0x78>
 800f25e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f260:	07dc      	lsls	r4, r3, #31
 800f262:	d50e      	bpl.n	800f282 <_vfiprintf_r+0x6a>
 800f264:	f04f 30ff 	mov.w	r0, #4294967295
 800f268:	b01d      	add	sp, #116	; 0x74
 800f26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f26e:	4b7b      	ldr	r3, [pc, #492]	; (800f45c <_vfiprintf_r+0x244>)
 800f270:	429d      	cmp	r5, r3
 800f272:	d101      	bne.n	800f278 <_vfiprintf_r+0x60>
 800f274:	68b5      	ldr	r5, [r6, #8]
 800f276:	e7df      	b.n	800f238 <_vfiprintf_r+0x20>
 800f278:	4b79      	ldr	r3, [pc, #484]	; (800f460 <_vfiprintf_r+0x248>)
 800f27a:	429d      	cmp	r5, r3
 800f27c:	bf08      	it	eq
 800f27e:	68f5      	ldreq	r5, [r6, #12]
 800f280:	e7da      	b.n	800f238 <_vfiprintf_r+0x20>
 800f282:	89ab      	ldrh	r3, [r5, #12]
 800f284:	0598      	lsls	r0, r3, #22
 800f286:	d4ed      	bmi.n	800f264 <_vfiprintf_r+0x4c>
 800f288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f28a:	f7ff fd56 	bl	800ed3a <__retarget_lock_release_recursive>
 800f28e:	e7e9      	b.n	800f264 <_vfiprintf_r+0x4c>
 800f290:	2300      	movs	r3, #0
 800f292:	9309      	str	r3, [sp, #36]	; 0x24
 800f294:	2320      	movs	r3, #32
 800f296:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f29a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f29e:	2330      	movs	r3, #48	; 0x30
 800f2a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f464 <_vfiprintf_r+0x24c>
 800f2a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f2a8:	f04f 0901 	mov.w	r9, #1
 800f2ac:	4623      	mov	r3, r4
 800f2ae:	469a      	mov	sl, r3
 800f2b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2b4:	b10a      	cbz	r2, 800f2ba <_vfiprintf_r+0xa2>
 800f2b6:	2a25      	cmp	r2, #37	; 0x25
 800f2b8:	d1f9      	bne.n	800f2ae <_vfiprintf_r+0x96>
 800f2ba:	ebba 0b04 	subs.w	fp, sl, r4
 800f2be:	d00b      	beq.n	800f2d8 <_vfiprintf_r+0xc0>
 800f2c0:	465b      	mov	r3, fp
 800f2c2:	4622      	mov	r2, r4
 800f2c4:	4629      	mov	r1, r5
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	f7ff ff93 	bl	800f1f2 <__sfputs_r>
 800f2cc:	3001      	adds	r0, #1
 800f2ce:	f000 80aa 	beq.w	800f426 <_vfiprintf_r+0x20e>
 800f2d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2d4:	445a      	add	r2, fp
 800f2d6:	9209      	str	r2, [sp, #36]	; 0x24
 800f2d8:	f89a 3000 	ldrb.w	r3, [sl]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	f000 80a2 	beq.w	800f426 <_vfiprintf_r+0x20e>
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800f2e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2ec:	f10a 0a01 	add.w	sl, sl, #1
 800f2f0:	9304      	str	r3, [sp, #16]
 800f2f2:	9307      	str	r3, [sp, #28]
 800f2f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f2f8:	931a      	str	r3, [sp, #104]	; 0x68
 800f2fa:	4654      	mov	r4, sl
 800f2fc:	2205      	movs	r2, #5
 800f2fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f302:	4858      	ldr	r0, [pc, #352]	; (800f464 <_vfiprintf_r+0x24c>)
 800f304:	f7f0 ff64 	bl	80001d0 <memchr>
 800f308:	9a04      	ldr	r2, [sp, #16]
 800f30a:	b9d8      	cbnz	r0, 800f344 <_vfiprintf_r+0x12c>
 800f30c:	06d1      	lsls	r1, r2, #27
 800f30e:	bf44      	itt	mi
 800f310:	2320      	movmi	r3, #32
 800f312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f316:	0713      	lsls	r3, r2, #28
 800f318:	bf44      	itt	mi
 800f31a:	232b      	movmi	r3, #43	; 0x2b
 800f31c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f320:	f89a 3000 	ldrb.w	r3, [sl]
 800f324:	2b2a      	cmp	r3, #42	; 0x2a
 800f326:	d015      	beq.n	800f354 <_vfiprintf_r+0x13c>
 800f328:	9a07      	ldr	r2, [sp, #28]
 800f32a:	4654      	mov	r4, sl
 800f32c:	2000      	movs	r0, #0
 800f32e:	f04f 0c0a 	mov.w	ip, #10
 800f332:	4621      	mov	r1, r4
 800f334:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f338:	3b30      	subs	r3, #48	; 0x30
 800f33a:	2b09      	cmp	r3, #9
 800f33c:	d94e      	bls.n	800f3dc <_vfiprintf_r+0x1c4>
 800f33e:	b1b0      	cbz	r0, 800f36e <_vfiprintf_r+0x156>
 800f340:	9207      	str	r2, [sp, #28]
 800f342:	e014      	b.n	800f36e <_vfiprintf_r+0x156>
 800f344:	eba0 0308 	sub.w	r3, r0, r8
 800f348:	fa09 f303 	lsl.w	r3, r9, r3
 800f34c:	4313      	orrs	r3, r2
 800f34e:	9304      	str	r3, [sp, #16]
 800f350:	46a2      	mov	sl, r4
 800f352:	e7d2      	b.n	800f2fa <_vfiprintf_r+0xe2>
 800f354:	9b03      	ldr	r3, [sp, #12]
 800f356:	1d19      	adds	r1, r3, #4
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	9103      	str	r1, [sp, #12]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	bfbb      	ittet	lt
 800f360:	425b      	neglt	r3, r3
 800f362:	f042 0202 	orrlt.w	r2, r2, #2
 800f366:	9307      	strge	r3, [sp, #28]
 800f368:	9307      	strlt	r3, [sp, #28]
 800f36a:	bfb8      	it	lt
 800f36c:	9204      	strlt	r2, [sp, #16]
 800f36e:	7823      	ldrb	r3, [r4, #0]
 800f370:	2b2e      	cmp	r3, #46	; 0x2e
 800f372:	d10c      	bne.n	800f38e <_vfiprintf_r+0x176>
 800f374:	7863      	ldrb	r3, [r4, #1]
 800f376:	2b2a      	cmp	r3, #42	; 0x2a
 800f378:	d135      	bne.n	800f3e6 <_vfiprintf_r+0x1ce>
 800f37a:	9b03      	ldr	r3, [sp, #12]
 800f37c:	1d1a      	adds	r2, r3, #4
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	9203      	str	r2, [sp, #12]
 800f382:	2b00      	cmp	r3, #0
 800f384:	bfb8      	it	lt
 800f386:	f04f 33ff 	movlt.w	r3, #4294967295
 800f38a:	3402      	adds	r4, #2
 800f38c:	9305      	str	r3, [sp, #20]
 800f38e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f474 <_vfiprintf_r+0x25c>
 800f392:	7821      	ldrb	r1, [r4, #0]
 800f394:	2203      	movs	r2, #3
 800f396:	4650      	mov	r0, sl
 800f398:	f7f0 ff1a 	bl	80001d0 <memchr>
 800f39c:	b140      	cbz	r0, 800f3b0 <_vfiprintf_r+0x198>
 800f39e:	2340      	movs	r3, #64	; 0x40
 800f3a0:	eba0 000a 	sub.w	r0, r0, sl
 800f3a4:	fa03 f000 	lsl.w	r0, r3, r0
 800f3a8:	9b04      	ldr	r3, [sp, #16]
 800f3aa:	4303      	orrs	r3, r0
 800f3ac:	3401      	adds	r4, #1
 800f3ae:	9304      	str	r3, [sp, #16]
 800f3b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3b4:	482c      	ldr	r0, [pc, #176]	; (800f468 <_vfiprintf_r+0x250>)
 800f3b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f3ba:	2206      	movs	r2, #6
 800f3bc:	f7f0 ff08 	bl	80001d0 <memchr>
 800f3c0:	2800      	cmp	r0, #0
 800f3c2:	d03f      	beq.n	800f444 <_vfiprintf_r+0x22c>
 800f3c4:	4b29      	ldr	r3, [pc, #164]	; (800f46c <_vfiprintf_r+0x254>)
 800f3c6:	bb1b      	cbnz	r3, 800f410 <_vfiprintf_r+0x1f8>
 800f3c8:	9b03      	ldr	r3, [sp, #12]
 800f3ca:	3307      	adds	r3, #7
 800f3cc:	f023 0307 	bic.w	r3, r3, #7
 800f3d0:	3308      	adds	r3, #8
 800f3d2:	9303      	str	r3, [sp, #12]
 800f3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3d6:	443b      	add	r3, r7
 800f3d8:	9309      	str	r3, [sp, #36]	; 0x24
 800f3da:	e767      	b.n	800f2ac <_vfiprintf_r+0x94>
 800f3dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3e0:	460c      	mov	r4, r1
 800f3e2:	2001      	movs	r0, #1
 800f3e4:	e7a5      	b.n	800f332 <_vfiprintf_r+0x11a>
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	3401      	adds	r4, #1
 800f3ea:	9305      	str	r3, [sp, #20]
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	f04f 0c0a 	mov.w	ip, #10
 800f3f2:	4620      	mov	r0, r4
 800f3f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3f8:	3a30      	subs	r2, #48	; 0x30
 800f3fa:	2a09      	cmp	r2, #9
 800f3fc:	d903      	bls.n	800f406 <_vfiprintf_r+0x1ee>
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d0c5      	beq.n	800f38e <_vfiprintf_r+0x176>
 800f402:	9105      	str	r1, [sp, #20]
 800f404:	e7c3      	b.n	800f38e <_vfiprintf_r+0x176>
 800f406:	fb0c 2101 	mla	r1, ip, r1, r2
 800f40a:	4604      	mov	r4, r0
 800f40c:	2301      	movs	r3, #1
 800f40e:	e7f0      	b.n	800f3f2 <_vfiprintf_r+0x1da>
 800f410:	ab03      	add	r3, sp, #12
 800f412:	9300      	str	r3, [sp, #0]
 800f414:	462a      	mov	r2, r5
 800f416:	4b16      	ldr	r3, [pc, #88]	; (800f470 <_vfiprintf_r+0x258>)
 800f418:	a904      	add	r1, sp, #16
 800f41a:	4630      	mov	r0, r6
 800f41c:	f3af 8000 	nop.w
 800f420:	4607      	mov	r7, r0
 800f422:	1c78      	adds	r0, r7, #1
 800f424:	d1d6      	bne.n	800f3d4 <_vfiprintf_r+0x1bc>
 800f426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f428:	07d9      	lsls	r1, r3, #31
 800f42a:	d405      	bmi.n	800f438 <_vfiprintf_r+0x220>
 800f42c:	89ab      	ldrh	r3, [r5, #12]
 800f42e:	059a      	lsls	r2, r3, #22
 800f430:	d402      	bmi.n	800f438 <_vfiprintf_r+0x220>
 800f432:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f434:	f7ff fc81 	bl	800ed3a <__retarget_lock_release_recursive>
 800f438:	89ab      	ldrh	r3, [r5, #12]
 800f43a:	065b      	lsls	r3, r3, #25
 800f43c:	f53f af12 	bmi.w	800f264 <_vfiprintf_r+0x4c>
 800f440:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f442:	e711      	b.n	800f268 <_vfiprintf_r+0x50>
 800f444:	ab03      	add	r3, sp, #12
 800f446:	9300      	str	r3, [sp, #0]
 800f448:	462a      	mov	r2, r5
 800f44a:	4b09      	ldr	r3, [pc, #36]	; (800f470 <_vfiprintf_r+0x258>)
 800f44c:	a904      	add	r1, sp, #16
 800f44e:	4630      	mov	r0, r6
 800f450:	f000 f880 	bl	800f554 <_printf_i>
 800f454:	e7e4      	b.n	800f420 <_vfiprintf_r+0x208>
 800f456:	bf00      	nop
 800f458:	08012a00 	.word	0x08012a00
 800f45c:	08012a20 	.word	0x08012a20
 800f460:	080129e0 	.word	0x080129e0
 800f464:	08012a40 	.word	0x08012a40
 800f468:	08012a4a 	.word	0x08012a4a
 800f46c:	00000000 	.word	0x00000000
 800f470:	0800f1f3 	.word	0x0800f1f3
 800f474:	08012a46 	.word	0x08012a46

0800f478 <_printf_common>:
 800f478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f47c:	4616      	mov	r6, r2
 800f47e:	4699      	mov	r9, r3
 800f480:	688a      	ldr	r2, [r1, #8]
 800f482:	690b      	ldr	r3, [r1, #16]
 800f484:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f488:	4293      	cmp	r3, r2
 800f48a:	bfb8      	it	lt
 800f48c:	4613      	movlt	r3, r2
 800f48e:	6033      	str	r3, [r6, #0]
 800f490:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f494:	4607      	mov	r7, r0
 800f496:	460c      	mov	r4, r1
 800f498:	b10a      	cbz	r2, 800f49e <_printf_common+0x26>
 800f49a:	3301      	adds	r3, #1
 800f49c:	6033      	str	r3, [r6, #0]
 800f49e:	6823      	ldr	r3, [r4, #0]
 800f4a0:	0699      	lsls	r1, r3, #26
 800f4a2:	bf42      	ittt	mi
 800f4a4:	6833      	ldrmi	r3, [r6, #0]
 800f4a6:	3302      	addmi	r3, #2
 800f4a8:	6033      	strmi	r3, [r6, #0]
 800f4aa:	6825      	ldr	r5, [r4, #0]
 800f4ac:	f015 0506 	ands.w	r5, r5, #6
 800f4b0:	d106      	bne.n	800f4c0 <_printf_common+0x48>
 800f4b2:	f104 0a19 	add.w	sl, r4, #25
 800f4b6:	68e3      	ldr	r3, [r4, #12]
 800f4b8:	6832      	ldr	r2, [r6, #0]
 800f4ba:	1a9b      	subs	r3, r3, r2
 800f4bc:	42ab      	cmp	r3, r5
 800f4be:	dc26      	bgt.n	800f50e <_printf_common+0x96>
 800f4c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f4c4:	1e13      	subs	r3, r2, #0
 800f4c6:	6822      	ldr	r2, [r4, #0]
 800f4c8:	bf18      	it	ne
 800f4ca:	2301      	movne	r3, #1
 800f4cc:	0692      	lsls	r2, r2, #26
 800f4ce:	d42b      	bmi.n	800f528 <_printf_common+0xb0>
 800f4d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f4d4:	4649      	mov	r1, r9
 800f4d6:	4638      	mov	r0, r7
 800f4d8:	47c0      	blx	r8
 800f4da:	3001      	adds	r0, #1
 800f4dc:	d01e      	beq.n	800f51c <_printf_common+0xa4>
 800f4de:	6823      	ldr	r3, [r4, #0]
 800f4e0:	68e5      	ldr	r5, [r4, #12]
 800f4e2:	6832      	ldr	r2, [r6, #0]
 800f4e4:	f003 0306 	and.w	r3, r3, #6
 800f4e8:	2b04      	cmp	r3, #4
 800f4ea:	bf08      	it	eq
 800f4ec:	1aad      	subeq	r5, r5, r2
 800f4ee:	68a3      	ldr	r3, [r4, #8]
 800f4f0:	6922      	ldr	r2, [r4, #16]
 800f4f2:	bf0c      	ite	eq
 800f4f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f4f8:	2500      	movne	r5, #0
 800f4fa:	4293      	cmp	r3, r2
 800f4fc:	bfc4      	itt	gt
 800f4fe:	1a9b      	subgt	r3, r3, r2
 800f500:	18ed      	addgt	r5, r5, r3
 800f502:	2600      	movs	r6, #0
 800f504:	341a      	adds	r4, #26
 800f506:	42b5      	cmp	r5, r6
 800f508:	d11a      	bne.n	800f540 <_printf_common+0xc8>
 800f50a:	2000      	movs	r0, #0
 800f50c:	e008      	b.n	800f520 <_printf_common+0xa8>
 800f50e:	2301      	movs	r3, #1
 800f510:	4652      	mov	r2, sl
 800f512:	4649      	mov	r1, r9
 800f514:	4638      	mov	r0, r7
 800f516:	47c0      	blx	r8
 800f518:	3001      	adds	r0, #1
 800f51a:	d103      	bne.n	800f524 <_printf_common+0xac>
 800f51c:	f04f 30ff 	mov.w	r0, #4294967295
 800f520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f524:	3501      	adds	r5, #1
 800f526:	e7c6      	b.n	800f4b6 <_printf_common+0x3e>
 800f528:	18e1      	adds	r1, r4, r3
 800f52a:	1c5a      	adds	r2, r3, #1
 800f52c:	2030      	movs	r0, #48	; 0x30
 800f52e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f532:	4422      	add	r2, r4
 800f534:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f538:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f53c:	3302      	adds	r3, #2
 800f53e:	e7c7      	b.n	800f4d0 <_printf_common+0x58>
 800f540:	2301      	movs	r3, #1
 800f542:	4622      	mov	r2, r4
 800f544:	4649      	mov	r1, r9
 800f546:	4638      	mov	r0, r7
 800f548:	47c0      	blx	r8
 800f54a:	3001      	adds	r0, #1
 800f54c:	d0e6      	beq.n	800f51c <_printf_common+0xa4>
 800f54e:	3601      	adds	r6, #1
 800f550:	e7d9      	b.n	800f506 <_printf_common+0x8e>
	...

0800f554 <_printf_i>:
 800f554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f558:	7e0f      	ldrb	r7, [r1, #24]
 800f55a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f55c:	2f78      	cmp	r7, #120	; 0x78
 800f55e:	4691      	mov	r9, r2
 800f560:	4680      	mov	r8, r0
 800f562:	460c      	mov	r4, r1
 800f564:	469a      	mov	sl, r3
 800f566:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f56a:	d807      	bhi.n	800f57c <_printf_i+0x28>
 800f56c:	2f62      	cmp	r7, #98	; 0x62
 800f56e:	d80a      	bhi.n	800f586 <_printf_i+0x32>
 800f570:	2f00      	cmp	r7, #0
 800f572:	f000 80d8 	beq.w	800f726 <_printf_i+0x1d2>
 800f576:	2f58      	cmp	r7, #88	; 0x58
 800f578:	f000 80a3 	beq.w	800f6c2 <_printf_i+0x16e>
 800f57c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f580:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f584:	e03a      	b.n	800f5fc <_printf_i+0xa8>
 800f586:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f58a:	2b15      	cmp	r3, #21
 800f58c:	d8f6      	bhi.n	800f57c <_printf_i+0x28>
 800f58e:	a101      	add	r1, pc, #4	; (adr r1, 800f594 <_printf_i+0x40>)
 800f590:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f594:	0800f5ed 	.word	0x0800f5ed
 800f598:	0800f601 	.word	0x0800f601
 800f59c:	0800f57d 	.word	0x0800f57d
 800f5a0:	0800f57d 	.word	0x0800f57d
 800f5a4:	0800f57d 	.word	0x0800f57d
 800f5a8:	0800f57d 	.word	0x0800f57d
 800f5ac:	0800f601 	.word	0x0800f601
 800f5b0:	0800f57d 	.word	0x0800f57d
 800f5b4:	0800f57d 	.word	0x0800f57d
 800f5b8:	0800f57d 	.word	0x0800f57d
 800f5bc:	0800f57d 	.word	0x0800f57d
 800f5c0:	0800f70d 	.word	0x0800f70d
 800f5c4:	0800f631 	.word	0x0800f631
 800f5c8:	0800f6ef 	.word	0x0800f6ef
 800f5cc:	0800f57d 	.word	0x0800f57d
 800f5d0:	0800f57d 	.word	0x0800f57d
 800f5d4:	0800f72f 	.word	0x0800f72f
 800f5d8:	0800f57d 	.word	0x0800f57d
 800f5dc:	0800f631 	.word	0x0800f631
 800f5e0:	0800f57d 	.word	0x0800f57d
 800f5e4:	0800f57d 	.word	0x0800f57d
 800f5e8:	0800f6f7 	.word	0x0800f6f7
 800f5ec:	682b      	ldr	r3, [r5, #0]
 800f5ee:	1d1a      	adds	r2, r3, #4
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	602a      	str	r2, [r5, #0]
 800f5f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f5f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	e0a3      	b.n	800f748 <_printf_i+0x1f4>
 800f600:	6820      	ldr	r0, [r4, #0]
 800f602:	6829      	ldr	r1, [r5, #0]
 800f604:	0606      	lsls	r6, r0, #24
 800f606:	f101 0304 	add.w	r3, r1, #4
 800f60a:	d50a      	bpl.n	800f622 <_printf_i+0xce>
 800f60c:	680e      	ldr	r6, [r1, #0]
 800f60e:	602b      	str	r3, [r5, #0]
 800f610:	2e00      	cmp	r6, #0
 800f612:	da03      	bge.n	800f61c <_printf_i+0xc8>
 800f614:	232d      	movs	r3, #45	; 0x2d
 800f616:	4276      	negs	r6, r6
 800f618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f61c:	485e      	ldr	r0, [pc, #376]	; (800f798 <_printf_i+0x244>)
 800f61e:	230a      	movs	r3, #10
 800f620:	e019      	b.n	800f656 <_printf_i+0x102>
 800f622:	680e      	ldr	r6, [r1, #0]
 800f624:	602b      	str	r3, [r5, #0]
 800f626:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f62a:	bf18      	it	ne
 800f62c:	b236      	sxthne	r6, r6
 800f62e:	e7ef      	b.n	800f610 <_printf_i+0xbc>
 800f630:	682b      	ldr	r3, [r5, #0]
 800f632:	6820      	ldr	r0, [r4, #0]
 800f634:	1d19      	adds	r1, r3, #4
 800f636:	6029      	str	r1, [r5, #0]
 800f638:	0601      	lsls	r1, r0, #24
 800f63a:	d501      	bpl.n	800f640 <_printf_i+0xec>
 800f63c:	681e      	ldr	r6, [r3, #0]
 800f63e:	e002      	b.n	800f646 <_printf_i+0xf2>
 800f640:	0646      	lsls	r6, r0, #25
 800f642:	d5fb      	bpl.n	800f63c <_printf_i+0xe8>
 800f644:	881e      	ldrh	r6, [r3, #0]
 800f646:	4854      	ldr	r0, [pc, #336]	; (800f798 <_printf_i+0x244>)
 800f648:	2f6f      	cmp	r7, #111	; 0x6f
 800f64a:	bf0c      	ite	eq
 800f64c:	2308      	moveq	r3, #8
 800f64e:	230a      	movne	r3, #10
 800f650:	2100      	movs	r1, #0
 800f652:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f656:	6865      	ldr	r5, [r4, #4]
 800f658:	60a5      	str	r5, [r4, #8]
 800f65a:	2d00      	cmp	r5, #0
 800f65c:	bfa2      	ittt	ge
 800f65e:	6821      	ldrge	r1, [r4, #0]
 800f660:	f021 0104 	bicge.w	r1, r1, #4
 800f664:	6021      	strge	r1, [r4, #0]
 800f666:	b90e      	cbnz	r6, 800f66c <_printf_i+0x118>
 800f668:	2d00      	cmp	r5, #0
 800f66a:	d04d      	beq.n	800f708 <_printf_i+0x1b4>
 800f66c:	4615      	mov	r5, r2
 800f66e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f672:	fb03 6711 	mls	r7, r3, r1, r6
 800f676:	5dc7      	ldrb	r7, [r0, r7]
 800f678:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f67c:	4637      	mov	r7, r6
 800f67e:	42bb      	cmp	r3, r7
 800f680:	460e      	mov	r6, r1
 800f682:	d9f4      	bls.n	800f66e <_printf_i+0x11a>
 800f684:	2b08      	cmp	r3, #8
 800f686:	d10b      	bne.n	800f6a0 <_printf_i+0x14c>
 800f688:	6823      	ldr	r3, [r4, #0]
 800f68a:	07de      	lsls	r6, r3, #31
 800f68c:	d508      	bpl.n	800f6a0 <_printf_i+0x14c>
 800f68e:	6923      	ldr	r3, [r4, #16]
 800f690:	6861      	ldr	r1, [r4, #4]
 800f692:	4299      	cmp	r1, r3
 800f694:	bfde      	ittt	le
 800f696:	2330      	movle	r3, #48	; 0x30
 800f698:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f69c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f6a0:	1b52      	subs	r2, r2, r5
 800f6a2:	6122      	str	r2, [r4, #16]
 800f6a4:	f8cd a000 	str.w	sl, [sp]
 800f6a8:	464b      	mov	r3, r9
 800f6aa:	aa03      	add	r2, sp, #12
 800f6ac:	4621      	mov	r1, r4
 800f6ae:	4640      	mov	r0, r8
 800f6b0:	f7ff fee2 	bl	800f478 <_printf_common>
 800f6b4:	3001      	adds	r0, #1
 800f6b6:	d14c      	bne.n	800f752 <_printf_i+0x1fe>
 800f6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f6bc:	b004      	add	sp, #16
 800f6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6c2:	4835      	ldr	r0, [pc, #212]	; (800f798 <_printf_i+0x244>)
 800f6c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f6c8:	6829      	ldr	r1, [r5, #0]
 800f6ca:	6823      	ldr	r3, [r4, #0]
 800f6cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800f6d0:	6029      	str	r1, [r5, #0]
 800f6d2:	061d      	lsls	r5, r3, #24
 800f6d4:	d514      	bpl.n	800f700 <_printf_i+0x1ac>
 800f6d6:	07df      	lsls	r7, r3, #31
 800f6d8:	bf44      	itt	mi
 800f6da:	f043 0320 	orrmi.w	r3, r3, #32
 800f6de:	6023      	strmi	r3, [r4, #0]
 800f6e0:	b91e      	cbnz	r6, 800f6ea <_printf_i+0x196>
 800f6e2:	6823      	ldr	r3, [r4, #0]
 800f6e4:	f023 0320 	bic.w	r3, r3, #32
 800f6e8:	6023      	str	r3, [r4, #0]
 800f6ea:	2310      	movs	r3, #16
 800f6ec:	e7b0      	b.n	800f650 <_printf_i+0xfc>
 800f6ee:	6823      	ldr	r3, [r4, #0]
 800f6f0:	f043 0320 	orr.w	r3, r3, #32
 800f6f4:	6023      	str	r3, [r4, #0]
 800f6f6:	2378      	movs	r3, #120	; 0x78
 800f6f8:	4828      	ldr	r0, [pc, #160]	; (800f79c <_printf_i+0x248>)
 800f6fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f6fe:	e7e3      	b.n	800f6c8 <_printf_i+0x174>
 800f700:	0659      	lsls	r1, r3, #25
 800f702:	bf48      	it	mi
 800f704:	b2b6      	uxthmi	r6, r6
 800f706:	e7e6      	b.n	800f6d6 <_printf_i+0x182>
 800f708:	4615      	mov	r5, r2
 800f70a:	e7bb      	b.n	800f684 <_printf_i+0x130>
 800f70c:	682b      	ldr	r3, [r5, #0]
 800f70e:	6826      	ldr	r6, [r4, #0]
 800f710:	6961      	ldr	r1, [r4, #20]
 800f712:	1d18      	adds	r0, r3, #4
 800f714:	6028      	str	r0, [r5, #0]
 800f716:	0635      	lsls	r5, r6, #24
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	d501      	bpl.n	800f720 <_printf_i+0x1cc>
 800f71c:	6019      	str	r1, [r3, #0]
 800f71e:	e002      	b.n	800f726 <_printf_i+0x1d2>
 800f720:	0670      	lsls	r0, r6, #25
 800f722:	d5fb      	bpl.n	800f71c <_printf_i+0x1c8>
 800f724:	8019      	strh	r1, [r3, #0]
 800f726:	2300      	movs	r3, #0
 800f728:	6123      	str	r3, [r4, #16]
 800f72a:	4615      	mov	r5, r2
 800f72c:	e7ba      	b.n	800f6a4 <_printf_i+0x150>
 800f72e:	682b      	ldr	r3, [r5, #0]
 800f730:	1d1a      	adds	r2, r3, #4
 800f732:	602a      	str	r2, [r5, #0]
 800f734:	681d      	ldr	r5, [r3, #0]
 800f736:	6862      	ldr	r2, [r4, #4]
 800f738:	2100      	movs	r1, #0
 800f73a:	4628      	mov	r0, r5
 800f73c:	f7f0 fd48 	bl	80001d0 <memchr>
 800f740:	b108      	cbz	r0, 800f746 <_printf_i+0x1f2>
 800f742:	1b40      	subs	r0, r0, r5
 800f744:	6060      	str	r0, [r4, #4]
 800f746:	6863      	ldr	r3, [r4, #4]
 800f748:	6123      	str	r3, [r4, #16]
 800f74a:	2300      	movs	r3, #0
 800f74c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f750:	e7a8      	b.n	800f6a4 <_printf_i+0x150>
 800f752:	6923      	ldr	r3, [r4, #16]
 800f754:	462a      	mov	r2, r5
 800f756:	4649      	mov	r1, r9
 800f758:	4640      	mov	r0, r8
 800f75a:	47d0      	blx	sl
 800f75c:	3001      	adds	r0, #1
 800f75e:	d0ab      	beq.n	800f6b8 <_printf_i+0x164>
 800f760:	6823      	ldr	r3, [r4, #0]
 800f762:	079b      	lsls	r3, r3, #30
 800f764:	d413      	bmi.n	800f78e <_printf_i+0x23a>
 800f766:	68e0      	ldr	r0, [r4, #12]
 800f768:	9b03      	ldr	r3, [sp, #12]
 800f76a:	4298      	cmp	r0, r3
 800f76c:	bfb8      	it	lt
 800f76e:	4618      	movlt	r0, r3
 800f770:	e7a4      	b.n	800f6bc <_printf_i+0x168>
 800f772:	2301      	movs	r3, #1
 800f774:	4632      	mov	r2, r6
 800f776:	4649      	mov	r1, r9
 800f778:	4640      	mov	r0, r8
 800f77a:	47d0      	blx	sl
 800f77c:	3001      	adds	r0, #1
 800f77e:	d09b      	beq.n	800f6b8 <_printf_i+0x164>
 800f780:	3501      	adds	r5, #1
 800f782:	68e3      	ldr	r3, [r4, #12]
 800f784:	9903      	ldr	r1, [sp, #12]
 800f786:	1a5b      	subs	r3, r3, r1
 800f788:	42ab      	cmp	r3, r5
 800f78a:	dcf2      	bgt.n	800f772 <_printf_i+0x21e>
 800f78c:	e7eb      	b.n	800f766 <_printf_i+0x212>
 800f78e:	2500      	movs	r5, #0
 800f790:	f104 0619 	add.w	r6, r4, #25
 800f794:	e7f5      	b.n	800f782 <_printf_i+0x22e>
 800f796:	bf00      	nop
 800f798:	08012a51 	.word	0x08012a51
 800f79c:	08012a62 	.word	0x08012a62

0800f7a0 <_sbrk_r>:
 800f7a0:	b538      	push	{r3, r4, r5, lr}
 800f7a2:	4d06      	ldr	r5, [pc, #24]	; (800f7bc <_sbrk_r+0x1c>)
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	4604      	mov	r4, r0
 800f7a8:	4608      	mov	r0, r1
 800f7aa:	602b      	str	r3, [r5, #0]
 800f7ac:	f7f1 f9f4 	bl	8000b98 <_sbrk>
 800f7b0:	1c43      	adds	r3, r0, #1
 800f7b2:	d102      	bne.n	800f7ba <_sbrk_r+0x1a>
 800f7b4:	682b      	ldr	r3, [r5, #0]
 800f7b6:	b103      	cbz	r3, 800f7ba <_sbrk_r+0x1a>
 800f7b8:	6023      	str	r3, [r4, #0]
 800f7ba:	bd38      	pop	{r3, r4, r5, pc}
 800f7bc:	20008478 	.word	0x20008478

0800f7c0 <__sread>:
 800f7c0:	b510      	push	{r4, lr}
 800f7c2:	460c      	mov	r4, r1
 800f7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7c8:	f000 fa9e 	bl	800fd08 <_read_r>
 800f7cc:	2800      	cmp	r0, #0
 800f7ce:	bfab      	itete	ge
 800f7d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f7d2:	89a3      	ldrhlt	r3, [r4, #12]
 800f7d4:	181b      	addge	r3, r3, r0
 800f7d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f7da:	bfac      	ite	ge
 800f7dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800f7de:	81a3      	strhlt	r3, [r4, #12]
 800f7e0:	bd10      	pop	{r4, pc}

0800f7e2 <__swrite>:
 800f7e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7e6:	461f      	mov	r7, r3
 800f7e8:	898b      	ldrh	r3, [r1, #12]
 800f7ea:	05db      	lsls	r3, r3, #23
 800f7ec:	4605      	mov	r5, r0
 800f7ee:	460c      	mov	r4, r1
 800f7f0:	4616      	mov	r6, r2
 800f7f2:	d505      	bpl.n	800f800 <__swrite+0x1e>
 800f7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7f8:	2302      	movs	r3, #2
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	f000 f9d0 	bl	800fba0 <_lseek_r>
 800f800:	89a3      	ldrh	r3, [r4, #12]
 800f802:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f806:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f80a:	81a3      	strh	r3, [r4, #12]
 800f80c:	4632      	mov	r2, r6
 800f80e:	463b      	mov	r3, r7
 800f810:	4628      	mov	r0, r5
 800f812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f816:	f000 b869 	b.w	800f8ec <_write_r>

0800f81a <__sseek>:
 800f81a:	b510      	push	{r4, lr}
 800f81c:	460c      	mov	r4, r1
 800f81e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f822:	f000 f9bd 	bl	800fba0 <_lseek_r>
 800f826:	1c43      	adds	r3, r0, #1
 800f828:	89a3      	ldrh	r3, [r4, #12]
 800f82a:	bf15      	itete	ne
 800f82c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f82e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f832:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f836:	81a3      	strheq	r3, [r4, #12]
 800f838:	bf18      	it	ne
 800f83a:	81a3      	strhne	r3, [r4, #12]
 800f83c:	bd10      	pop	{r4, pc}

0800f83e <__sclose>:
 800f83e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f842:	f000 b8db 	b.w	800f9fc <_close_r>
	...

0800f848 <__swbuf_r>:
 800f848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f84a:	460e      	mov	r6, r1
 800f84c:	4614      	mov	r4, r2
 800f84e:	4605      	mov	r5, r0
 800f850:	b118      	cbz	r0, 800f85a <__swbuf_r+0x12>
 800f852:	6983      	ldr	r3, [r0, #24]
 800f854:	b90b      	cbnz	r3, 800f85a <__swbuf_r+0x12>
 800f856:	f7ff f9bf 	bl	800ebd8 <__sinit>
 800f85a:	4b21      	ldr	r3, [pc, #132]	; (800f8e0 <__swbuf_r+0x98>)
 800f85c:	429c      	cmp	r4, r3
 800f85e:	d12b      	bne.n	800f8b8 <__swbuf_r+0x70>
 800f860:	686c      	ldr	r4, [r5, #4]
 800f862:	69a3      	ldr	r3, [r4, #24]
 800f864:	60a3      	str	r3, [r4, #8]
 800f866:	89a3      	ldrh	r3, [r4, #12]
 800f868:	071a      	lsls	r2, r3, #28
 800f86a:	d52f      	bpl.n	800f8cc <__swbuf_r+0x84>
 800f86c:	6923      	ldr	r3, [r4, #16]
 800f86e:	b36b      	cbz	r3, 800f8cc <__swbuf_r+0x84>
 800f870:	6923      	ldr	r3, [r4, #16]
 800f872:	6820      	ldr	r0, [r4, #0]
 800f874:	1ac0      	subs	r0, r0, r3
 800f876:	6963      	ldr	r3, [r4, #20]
 800f878:	b2f6      	uxtb	r6, r6
 800f87a:	4283      	cmp	r3, r0
 800f87c:	4637      	mov	r7, r6
 800f87e:	dc04      	bgt.n	800f88a <__swbuf_r+0x42>
 800f880:	4621      	mov	r1, r4
 800f882:	4628      	mov	r0, r5
 800f884:	f000 f950 	bl	800fb28 <_fflush_r>
 800f888:	bb30      	cbnz	r0, 800f8d8 <__swbuf_r+0x90>
 800f88a:	68a3      	ldr	r3, [r4, #8]
 800f88c:	3b01      	subs	r3, #1
 800f88e:	60a3      	str	r3, [r4, #8]
 800f890:	6823      	ldr	r3, [r4, #0]
 800f892:	1c5a      	adds	r2, r3, #1
 800f894:	6022      	str	r2, [r4, #0]
 800f896:	701e      	strb	r6, [r3, #0]
 800f898:	6963      	ldr	r3, [r4, #20]
 800f89a:	3001      	adds	r0, #1
 800f89c:	4283      	cmp	r3, r0
 800f89e:	d004      	beq.n	800f8aa <__swbuf_r+0x62>
 800f8a0:	89a3      	ldrh	r3, [r4, #12]
 800f8a2:	07db      	lsls	r3, r3, #31
 800f8a4:	d506      	bpl.n	800f8b4 <__swbuf_r+0x6c>
 800f8a6:	2e0a      	cmp	r6, #10
 800f8a8:	d104      	bne.n	800f8b4 <__swbuf_r+0x6c>
 800f8aa:	4621      	mov	r1, r4
 800f8ac:	4628      	mov	r0, r5
 800f8ae:	f000 f93b 	bl	800fb28 <_fflush_r>
 800f8b2:	b988      	cbnz	r0, 800f8d8 <__swbuf_r+0x90>
 800f8b4:	4638      	mov	r0, r7
 800f8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8b8:	4b0a      	ldr	r3, [pc, #40]	; (800f8e4 <__swbuf_r+0x9c>)
 800f8ba:	429c      	cmp	r4, r3
 800f8bc:	d101      	bne.n	800f8c2 <__swbuf_r+0x7a>
 800f8be:	68ac      	ldr	r4, [r5, #8]
 800f8c0:	e7cf      	b.n	800f862 <__swbuf_r+0x1a>
 800f8c2:	4b09      	ldr	r3, [pc, #36]	; (800f8e8 <__swbuf_r+0xa0>)
 800f8c4:	429c      	cmp	r4, r3
 800f8c6:	bf08      	it	eq
 800f8c8:	68ec      	ldreq	r4, [r5, #12]
 800f8ca:	e7ca      	b.n	800f862 <__swbuf_r+0x1a>
 800f8cc:	4621      	mov	r1, r4
 800f8ce:	4628      	mov	r0, r5
 800f8d0:	f000 f81e 	bl	800f910 <__swsetup_r>
 800f8d4:	2800      	cmp	r0, #0
 800f8d6:	d0cb      	beq.n	800f870 <__swbuf_r+0x28>
 800f8d8:	f04f 37ff 	mov.w	r7, #4294967295
 800f8dc:	e7ea      	b.n	800f8b4 <__swbuf_r+0x6c>
 800f8de:	bf00      	nop
 800f8e0:	08012a00 	.word	0x08012a00
 800f8e4:	08012a20 	.word	0x08012a20
 800f8e8:	080129e0 	.word	0x080129e0

0800f8ec <_write_r>:
 800f8ec:	b538      	push	{r3, r4, r5, lr}
 800f8ee:	4d07      	ldr	r5, [pc, #28]	; (800f90c <_write_r+0x20>)
 800f8f0:	4604      	mov	r4, r0
 800f8f2:	4608      	mov	r0, r1
 800f8f4:	4611      	mov	r1, r2
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	602a      	str	r2, [r5, #0]
 800f8fa:	461a      	mov	r2, r3
 800f8fc:	f7f1 f8fb 	bl	8000af6 <_write>
 800f900:	1c43      	adds	r3, r0, #1
 800f902:	d102      	bne.n	800f90a <_write_r+0x1e>
 800f904:	682b      	ldr	r3, [r5, #0]
 800f906:	b103      	cbz	r3, 800f90a <_write_r+0x1e>
 800f908:	6023      	str	r3, [r4, #0]
 800f90a:	bd38      	pop	{r3, r4, r5, pc}
 800f90c:	20008478 	.word	0x20008478

0800f910 <__swsetup_r>:
 800f910:	4b32      	ldr	r3, [pc, #200]	; (800f9dc <__swsetup_r+0xcc>)
 800f912:	b570      	push	{r4, r5, r6, lr}
 800f914:	681d      	ldr	r5, [r3, #0]
 800f916:	4606      	mov	r6, r0
 800f918:	460c      	mov	r4, r1
 800f91a:	b125      	cbz	r5, 800f926 <__swsetup_r+0x16>
 800f91c:	69ab      	ldr	r3, [r5, #24]
 800f91e:	b913      	cbnz	r3, 800f926 <__swsetup_r+0x16>
 800f920:	4628      	mov	r0, r5
 800f922:	f7ff f959 	bl	800ebd8 <__sinit>
 800f926:	4b2e      	ldr	r3, [pc, #184]	; (800f9e0 <__swsetup_r+0xd0>)
 800f928:	429c      	cmp	r4, r3
 800f92a:	d10f      	bne.n	800f94c <__swsetup_r+0x3c>
 800f92c:	686c      	ldr	r4, [r5, #4]
 800f92e:	89a3      	ldrh	r3, [r4, #12]
 800f930:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f934:	0719      	lsls	r1, r3, #28
 800f936:	d42c      	bmi.n	800f992 <__swsetup_r+0x82>
 800f938:	06dd      	lsls	r5, r3, #27
 800f93a:	d411      	bmi.n	800f960 <__swsetup_r+0x50>
 800f93c:	2309      	movs	r3, #9
 800f93e:	6033      	str	r3, [r6, #0]
 800f940:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f944:	81a3      	strh	r3, [r4, #12]
 800f946:	f04f 30ff 	mov.w	r0, #4294967295
 800f94a:	e03e      	b.n	800f9ca <__swsetup_r+0xba>
 800f94c:	4b25      	ldr	r3, [pc, #148]	; (800f9e4 <__swsetup_r+0xd4>)
 800f94e:	429c      	cmp	r4, r3
 800f950:	d101      	bne.n	800f956 <__swsetup_r+0x46>
 800f952:	68ac      	ldr	r4, [r5, #8]
 800f954:	e7eb      	b.n	800f92e <__swsetup_r+0x1e>
 800f956:	4b24      	ldr	r3, [pc, #144]	; (800f9e8 <__swsetup_r+0xd8>)
 800f958:	429c      	cmp	r4, r3
 800f95a:	bf08      	it	eq
 800f95c:	68ec      	ldreq	r4, [r5, #12]
 800f95e:	e7e6      	b.n	800f92e <__swsetup_r+0x1e>
 800f960:	0758      	lsls	r0, r3, #29
 800f962:	d512      	bpl.n	800f98a <__swsetup_r+0x7a>
 800f964:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f966:	b141      	cbz	r1, 800f97a <__swsetup_r+0x6a>
 800f968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f96c:	4299      	cmp	r1, r3
 800f96e:	d002      	beq.n	800f976 <__swsetup_r+0x66>
 800f970:	4630      	mov	r0, r6
 800f972:	f7ff f9eb 	bl	800ed4c <_free_r>
 800f976:	2300      	movs	r3, #0
 800f978:	6363      	str	r3, [r4, #52]	; 0x34
 800f97a:	89a3      	ldrh	r3, [r4, #12]
 800f97c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f980:	81a3      	strh	r3, [r4, #12]
 800f982:	2300      	movs	r3, #0
 800f984:	6063      	str	r3, [r4, #4]
 800f986:	6923      	ldr	r3, [r4, #16]
 800f988:	6023      	str	r3, [r4, #0]
 800f98a:	89a3      	ldrh	r3, [r4, #12]
 800f98c:	f043 0308 	orr.w	r3, r3, #8
 800f990:	81a3      	strh	r3, [r4, #12]
 800f992:	6923      	ldr	r3, [r4, #16]
 800f994:	b94b      	cbnz	r3, 800f9aa <__swsetup_r+0x9a>
 800f996:	89a3      	ldrh	r3, [r4, #12]
 800f998:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f99c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f9a0:	d003      	beq.n	800f9aa <__swsetup_r+0x9a>
 800f9a2:	4621      	mov	r1, r4
 800f9a4:	4630      	mov	r0, r6
 800f9a6:	f000 f933 	bl	800fc10 <__smakebuf_r>
 800f9aa:	89a0      	ldrh	r0, [r4, #12]
 800f9ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f9b0:	f010 0301 	ands.w	r3, r0, #1
 800f9b4:	d00a      	beq.n	800f9cc <__swsetup_r+0xbc>
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	60a3      	str	r3, [r4, #8]
 800f9ba:	6963      	ldr	r3, [r4, #20]
 800f9bc:	425b      	negs	r3, r3
 800f9be:	61a3      	str	r3, [r4, #24]
 800f9c0:	6923      	ldr	r3, [r4, #16]
 800f9c2:	b943      	cbnz	r3, 800f9d6 <__swsetup_r+0xc6>
 800f9c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f9c8:	d1ba      	bne.n	800f940 <__swsetup_r+0x30>
 800f9ca:	bd70      	pop	{r4, r5, r6, pc}
 800f9cc:	0781      	lsls	r1, r0, #30
 800f9ce:	bf58      	it	pl
 800f9d0:	6963      	ldrpl	r3, [r4, #20]
 800f9d2:	60a3      	str	r3, [r4, #8]
 800f9d4:	e7f4      	b.n	800f9c0 <__swsetup_r+0xb0>
 800f9d6:	2000      	movs	r0, #0
 800f9d8:	e7f7      	b.n	800f9ca <__swsetup_r+0xba>
 800f9da:	bf00      	nop
 800f9dc:	2000002c 	.word	0x2000002c
 800f9e0:	08012a00 	.word	0x08012a00
 800f9e4:	08012a20 	.word	0x08012a20
 800f9e8:	080129e0 	.word	0x080129e0

0800f9ec <abort>:
 800f9ec:	b508      	push	{r3, lr}
 800f9ee:	2006      	movs	r0, #6
 800f9f0:	f000 f9c4 	bl	800fd7c <raise>
 800f9f4:	2001      	movs	r0, #1
 800f9f6:	f7f1 f857 	bl	8000aa8 <_exit>
	...

0800f9fc <_close_r>:
 800f9fc:	b538      	push	{r3, r4, r5, lr}
 800f9fe:	4d06      	ldr	r5, [pc, #24]	; (800fa18 <_close_r+0x1c>)
 800fa00:	2300      	movs	r3, #0
 800fa02:	4604      	mov	r4, r0
 800fa04:	4608      	mov	r0, r1
 800fa06:	602b      	str	r3, [r5, #0]
 800fa08:	f7f1 f891 	bl	8000b2e <_close>
 800fa0c:	1c43      	adds	r3, r0, #1
 800fa0e:	d102      	bne.n	800fa16 <_close_r+0x1a>
 800fa10:	682b      	ldr	r3, [r5, #0]
 800fa12:	b103      	cbz	r3, 800fa16 <_close_r+0x1a>
 800fa14:	6023      	str	r3, [r4, #0]
 800fa16:	bd38      	pop	{r3, r4, r5, pc}
 800fa18:	20008478 	.word	0x20008478

0800fa1c <__sflush_r>:
 800fa1c:	898a      	ldrh	r2, [r1, #12]
 800fa1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa22:	4605      	mov	r5, r0
 800fa24:	0710      	lsls	r0, r2, #28
 800fa26:	460c      	mov	r4, r1
 800fa28:	d458      	bmi.n	800fadc <__sflush_r+0xc0>
 800fa2a:	684b      	ldr	r3, [r1, #4]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	dc05      	bgt.n	800fa3c <__sflush_r+0x20>
 800fa30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	dc02      	bgt.n	800fa3c <__sflush_r+0x20>
 800fa36:	2000      	movs	r0, #0
 800fa38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa3e:	2e00      	cmp	r6, #0
 800fa40:	d0f9      	beq.n	800fa36 <__sflush_r+0x1a>
 800fa42:	2300      	movs	r3, #0
 800fa44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fa48:	682f      	ldr	r7, [r5, #0]
 800fa4a:	602b      	str	r3, [r5, #0]
 800fa4c:	d032      	beq.n	800fab4 <__sflush_r+0x98>
 800fa4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fa50:	89a3      	ldrh	r3, [r4, #12]
 800fa52:	075a      	lsls	r2, r3, #29
 800fa54:	d505      	bpl.n	800fa62 <__sflush_r+0x46>
 800fa56:	6863      	ldr	r3, [r4, #4]
 800fa58:	1ac0      	subs	r0, r0, r3
 800fa5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fa5c:	b10b      	cbz	r3, 800fa62 <__sflush_r+0x46>
 800fa5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fa60:	1ac0      	subs	r0, r0, r3
 800fa62:	2300      	movs	r3, #0
 800fa64:	4602      	mov	r2, r0
 800fa66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa68:	6a21      	ldr	r1, [r4, #32]
 800fa6a:	4628      	mov	r0, r5
 800fa6c:	47b0      	blx	r6
 800fa6e:	1c43      	adds	r3, r0, #1
 800fa70:	89a3      	ldrh	r3, [r4, #12]
 800fa72:	d106      	bne.n	800fa82 <__sflush_r+0x66>
 800fa74:	6829      	ldr	r1, [r5, #0]
 800fa76:	291d      	cmp	r1, #29
 800fa78:	d82c      	bhi.n	800fad4 <__sflush_r+0xb8>
 800fa7a:	4a2a      	ldr	r2, [pc, #168]	; (800fb24 <__sflush_r+0x108>)
 800fa7c:	40ca      	lsrs	r2, r1
 800fa7e:	07d6      	lsls	r6, r2, #31
 800fa80:	d528      	bpl.n	800fad4 <__sflush_r+0xb8>
 800fa82:	2200      	movs	r2, #0
 800fa84:	6062      	str	r2, [r4, #4]
 800fa86:	04d9      	lsls	r1, r3, #19
 800fa88:	6922      	ldr	r2, [r4, #16]
 800fa8a:	6022      	str	r2, [r4, #0]
 800fa8c:	d504      	bpl.n	800fa98 <__sflush_r+0x7c>
 800fa8e:	1c42      	adds	r2, r0, #1
 800fa90:	d101      	bne.n	800fa96 <__sflush_r+0x7a>
 800fa92:	682b      	ldr	r3, [r5, #0]
 800fa94:	b903      	cbnz	r3, 800fa98 <__sflush_r+0x7c>
 800fa96:	6560      	str	r0, [r4, #84]	; 0x54
 800fa98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa9a:	602f      	str	r7, [r5, #0]
 800fa9c:	2900      	cmp	r1, #0
 800fa9e:	d0ca      	beq.n	800fa36 <__sflush_r+0x1a>
 800faa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800faa4:	4299      	cmp	r1, r3
 800faa6:	d002      	beq.n	800faae <__sflush_r+0x92>
 800faa8:	4628      	mov	r0, r5
 800faaa:	f7ff f94f 	bl	800ed4c <_free_r>
 800faae:	2000      	movs	r0, #0
 800fab0:	6360      	str	r0, [r4, #52]	; 0x34
 800fab2:	e7c1      	b.n	800fa38 <__sflush_r+0x1c>
 800fab4:	6a21      	ldr	r1, [r4, #32]
 800fab6:	2301      	movs	r3, #1
 800fab8:	4628      	mov	r0, r5
 800faba:	47b0      	blx	r6
 800fabc:	1c41      	adds	r1, r0, #1
 800fabe:	d1c7      	bne.n	800fa50 <__sflush_r+0x34>
 800fac0:	682b      	ldr	r3, [r5, #0]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d0c4      	beq.n	800fa50 <__sflush_r+0x34>
 800fac6:	2b1d      	cmp	r3, #29
 800fac8:	d001      	beq.n	800face <__sflush_r+0xb2>
 800faca:	2b16      	cmp	r3, #22
 800facc:	d101      	bne.n	800fad2 <__sflush_r+0xb6>
 800face:	602f      	str	r7, [r5, #0]
 800fad0:	e7b1      	b.n	800fa36 <__sflush_r+0x1a>
 800fad2:	89a3      	ldrh	r3, [r4, #12]
 800fad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fad8:	81a3      	strh	r3, [r4, #12]
 800fada:	e7ad      	b.n	800fa38 <__sflush_r+0x1c>
 800fadc:	690f      	ldr	r7, [r1, #16]
 800fade:	2f00      	cmp	r7, #0
 800fae0:	d0a9      	beq.n	800fa36 <__sflush_r+0x1a>
 800fae2:	0793      	lsls	r3, r2, #30
 800fae4:	680e      	ldr	r6, [r1, #0]
 800fae6:	bf08      	it	eq
 800fae8:	694b      	ldreq	r3, [r1, #20]
 800faea:	600f      	str	r7, [r1, #0]
 800faec:	bf18      	it	ne
 800faee:	2300      	movne	r3, #0
 800faf0:	eba6 0807 	sub.w	r8, r6, r7
 800faf4:	608b      	str	r3, [r1, #8]
 800faf6:	f1b8 0f00 	cmp.w	r8, #0
 800fafa:	dd9c      	ble.n	800fa36 <__sflush_r+0x1a>
 800fafc:	6a21      	ldr	r1, [r4, #32]
 800fafe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fb00:	4643      	mov	r3, r8
 800fb02:	463a      	mov	r2, r7
 800fb04:	4628      	mov	r0, r5
 800fb06:	47b0      	blx	r6
 800fb08:	2800      	cmp	r0, #0
 800fb0a:	dc06      	bgt.n	800fb1a <__sflush_r+0xfe>
 800fb0c:	89a3      	ldrh	r3, [r4, #12]
 800fb0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb12:	81a3      	strh	r3, [r4, #12]
 800fb14:	f04f 30ff 	mov.w	r0, #4294967295
 800fb18:	e78e      	b.n	800fa38 <__sflush_r+0x1c>
 800fb1a:	4407      	add	r7, r0
 800fb1c:	eba8 0800 	sub.w	r8, r8, r0
 800fb20:	e7e9      	b.n	800faf6 <__sflush_r+0xda>
 800fb22:	bf00      	nop
 800fb24:	20400001 	.word	0x20400001

0800fb28 <_fflush_r>:
 800fb28:	b538      	push	{r3, r4, r5, lr}
 800fb2a:	690b      	ldr	r3, [r1, #16]
 800fb2c:	4605      	mov	r5, r0
 800fb2e:	460c      	mov	r4, r1
 800fb30:	b913      	cbnz	r3, 800fb38 <_fflush_r+0x10>
 800fb32:	2500      	movs	r5, #0
 800fb34:	4628      	mov	r0, r5
 800fb36:	bd38      	pop	{r3, r4, r5, pc}
 800fb38:	b118      	cbz	r0, 800fb42 <_fflush_r+0x1a>
 800fb3a:	6983      	ldr	r3, [r0, #24]
 800fb3c:	b90b      	cbnz	r3, 800fb42 <_fflush_r+0x1a>
 800fb3e:	f7ff f84b 	bl	800ebd8 <__sinit>
 800fb42:	4b14      	ldr	r3, [pc, #80]	; (800fb94 <_fflush_r+0x6c>)
 800fb44:	429c      	cmp	r4, r3
 800fb46:	d11b      	bne.n	800fb80 <_fflush_r+0x58>
 800fb48:	686c      	ldr	r4, [r5, #4]
 800fb4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d0ef      	beq.n	800fb32 <_fflush_r+0xa>
 800fb52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fb54:	07d0      	lsls	r0, r2, #31
 800fb56:	d404      	bmi.n	800fb62 <_fflush_r+0x3a>
 800fb58:	0599      	lsls	r1, r3, #22
 800fb5a:	d402      	bmi.n	800fb62 <_fflush_r+0x3a>
 800fb5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb5e:	f7ff f8eb 	bl	800ed38 <__retarget_lock_acquire_recursive>
 800fb62:	4628      	mov	r0, r5
 800fb64:	4621      	mov	r1, r4
 800fb66:	f7ff ff59 	bl	800fa1c <__sflush_r>
 800fb6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fb6c:	07da      	lsls	r2, r3, #31
 800fb6e:	4605      	mov	r5, r0
 800fb70:	d4e0      	bmi.n	800fb34 <_fflush_r+0xc>
 800fb72:	89a3      	ldrh	r3, [r4, #12]
 800fb74:	059b      	lsls	r3, r3, #22
 800fb76:	d4dd      	bmi.n	800fb34 <_fflush_r+0xc>
 800fb78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb7a:	f7ff f8de 	bl	800ed3a <__retarget_lock_release_recursive>
 800fb7e:	e7d9      	b.n	800fb34 <_fflush_r+0xc>
 800fb80:	4b05      	ldr	r3, [pc, #20]	; (800fb98 <_fflush_r+0x70>)
 800fb82:	429c      	cmp	r4, r3
 800fb84:	d101      	bne.n	800fb8a <_fflush_r+0x62>
 800fb86:	68ac      	ldr	r4, [r5, #8]
 800fb88:	e7df      	b.n	800fb4a <_fflush_r+0x22>
 800fb8a:	4b04      	ldr	r3, [pc, #16]	; (800fb9c <_fflush_r+0x74>)
 800fb8c:	429c      	cmp	r4, r3
 800fb8e:	bf08      	it	eq
 800fb90:	68ec      	ldreq	r4, [r5, #12]
 800fb92:	e7da      	b.n	800fb4a <_fflush_r+0x22>
 800fb94:	08012a00 	.word	0x08012a00
 800fb98:	08012a20 	.word	0x08012a20
 800fb9c:	080129e0 	.word	0x080129e0

0800fba0 <_lseek_r>:
 800fba0:	b538      	push	{r3, r4, r5, lr}
 800fba2:	4d07      	ldr	r5, [pc, #28]	; (800fbc0 <_lseek_r+0x20>)
 800fba4:	4604      	mov	r4, r0
 800fba6:	4608      	mov	r0, r1
 800fba8:	4611      	mov	r1, r2
 800fbaa:	2200      	movs	r2, #0
 800fbac:	602a      	str	r2, [r5, #0]
 800fbae:	461a      	mov	r2, r3
 800fbb0:	f7f0 ffe4 	bl	8000b7c <_lseek>
 800fbb4:	1c43      	adds	r3, r0, #1
 800fbb6:	d102      	bne.n	800fbbe <_lseek_r+0x1e>
 800fbb8:	682b      	ldr	r3, [r5, #0]
 800fbba:	b103      	cbz	r3, 800fbbe <_lseek_r+0x1e>
 800fbbc:	6023      	str	r3, [r4, #0]
 800fbbe:	bd38      	pop	{r3, r4, r5, pc}
 800fbc0:	20008478 	.word	0x20008478

0800fbc4 <__swhatbuf_r>:
 800fbc4:	b570      	push	{r4, r5, r6, lr}
 800fbc6:	460e      	mov	r6, r1
 800fbc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbcc:	2900      	cmp	r1, #0
 800fbce:	b096      	sub	sp, #88	; 0x58
 800fbd0:	4614      	mov	r4, r2
 800fbd2:	461d      	mov	r5, r3
 800fbd4:	da08      	bge.n	800fbe8 <__swhatbuf_r+0x24>
 800fbd6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	602a      	str	r2, [r5, #0]
 800fbde:	061a      	lsls	r2, r3, #24
 800fbe0:	d410      	bmi.n	800fc04 <__swhatbuf_r+0x40>
 800fbe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fbe6:	e00e      	b.n	800fc06 <__swhatbuf_r+0x42>
 800fbe8:	466a      	mov	r2, sp
 800fbea:	f000 f8e3 	bl	800fdb4 <_fstat_r>
 800fbee:	2800      	cmp	r0, #0
 800fbf0:	dbf1      	blt.n	800fbd6 <__swhatbuf_r+0x12>
 800fbf2:	9a01      	ldr	r2, [sp, #4]
 800fbf4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fbf8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fbfc:	425a      	negs	r2, r3
 800fbfe:	415a      	adcs	r2, r3
 800fc00:	602a      	str	r2, [r5, #0]
 800fc02:	e7ee      	b.n	800fbe2 <__swhatbuf_r+0x1e>
 800fc04:	2340      	movs	r3, #64	; 0x40
 800fc06:	2000      	movs	r0, #0
 800fc08:	6023      	str	r3, [r4, #0]
 800fc0a:	b016      	add	sp, #88	; 0x58
 800fc0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fc10 <__smakebuf_r>:
 800fc10:	898b      	ldrh	r3, [r1, #12]
 800fc12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fc14:	079d      	lsls	r5, r3, #30
 800fc16:	4606      	mov	r6, r0
 800fc18:	460c      	mov	r4, r1
 800fc1a:	d507      	bpl.n	800fc2c <__smakebuf_r+0x1c>
 800fc1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fc20:	6023      	str	r3, [r4, #0]
 800fc22:	6123      	str	r3, [r4, #16]
 800fc24:	2301      	movs	r3, #1
 800fc26:	6163      	str	r3, [r4, #20]
 800fc28:	b002      	add	sp, #8
 800fc2a:	bd70      	pop	{r4, r5, r6, pc}
 800fc2c:	ab01      	add	r3, sp, #4
 800fc2e:	466a      	mov	r2, sp
 800fc30:	f7ff ffc8 	bl	800fbc4 <__swhatbuf_r>
 800fc34:	9900      	ldr	r1, [sp, #0]
 800fc36:	4605      	mov	r5, r0
 800fc38:	4630      	mov	r0, r6
 800fc3a:	f7ff f8f3 	bl	800ee24 <_malloc_r>
 800fc3e:	b948      	cbnz	r0, 800fc54 <__smakebuf_r+0x44>
 800fc40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc44:	059a      	lsls	r2, r3, #22
 800fc46:	d4ef      	bmi.n	800fc28 <__smakebuf_r+0x18>
 800fc48:	f023 0303 	bic.w	r3, r3, #3
 800fc4c:	f043 0302 	orr.w	r3, r3, #2
 800fc50:	81a3      	strh	r3, [r4, #12]
 800fc52:	e7e3      	b.n	800fc1c <__smakebuf_r+0xc>
 800fc54:	4b0d      	ldr	r3, [pc, #52]	; (800fc8c <__smakebuf_r+0x7c>)
 800fc56:	62b3      	str	r3, [r6, #40]	; 0x28
 800fc58:	89a3      	ldrh	r3, [r4, #12]
 800fc5a:	6020      	str	r0, [r4, #0]
 800fc5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc60:	81a3      	strh	r3, [r4, #12]
 800fc62:	9b00      	ldr	r3, [sp, #0]
 800fc64:	6163      	str	r3, [r4, #20]
 800fc66:	9b01      	ldr	r3, [sp, #4]
 800fc68:	6120      	str	r0, [r4, #16]
 800fc6a:	b15b      	cbz	r3, 800fc84 <__smakebuf_r+0x74>
 800fc6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc70:	4630      	mov	r0, r6
 800fc72:	f000 f8b1 	bl	800fdd8 <_isatty_r>
 800fc76:	b128      	cbz	r0, 800fc84 <__smakebuf_r+0x74>
 800fc78:	89a3      	ldrh	r3, [r4, #12]
 800fc7a:	f023 0303 	bic.w	r3, r3, #3
 800fc7e:	f043 0301 	orr.w	r3, r3, #1
 800fc82:	81a3      	strh	r3, [r4, #12]
 800fc84:	89a0      	ldrh	r0, [r4, #12]
 800fc86:	4305      	orrs	r5, r0
 800fc88:	81a5      	strh	r5, [r4, #12]
 800fc8a:	e7cd      	b.n	800fc28 <__smakebuf_r+0x18>
 800fc8c:	0800eb71 	.word	0x0800eb71

0800fc90 <__malloc_lock>:
 800fc90:	4801      	ldr	r0, [pc, #4]	; (800fc98 <__malloc_lock+0x8>)
 800fc92:	f7ff b851 	b.w	800ed38 <__retarget_lock_acquire_recursive>
 800fc96:	bf00      	nop
 800fc98:	2000847c 	.word	0x2000847c

0800fc9c <__malloc_unlock>:
 800fc9c:	4801      	ldr	r0, [pc, #4]	; (800fca4 <__malloc_unlock+0x8>)
 800fc9e:	f7ff b84c 	b.w	800ed3a <__retarget_lock_release_recursive>
 800fca2:	bf00      	nop
 800fca4:	2000847c 	.word	0x2000847c

0800fca8 <_realloc_r>:
 800fca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcac:	4680      	mov	r8, r0
 800fcae:	4614      	mov	r4, r2
 800fcb0:	460e      	mov	r6, r1
 800fcb2:	b921      	cbnz	r1, 800fcbe <_realloc_r+0x16>
 800fcb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcb8:	4611      	mov	r1, r2
 800fcba:	f7ff b8b3 	b.w	800ee24 <_malloc_r>
 800fcbe:	b92a      	cbnz	r2, 800fccc <_realloc_r+0x24>
 800fcc0:	f7ff f844 	bl	800ed4c <_free_r>
 800fcc4:	4625      	mov	r5, r4
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fccc:	f000 f894 	bl	800fdf8 <_malloc_usable_size_r>
 800fcd0:	4284      	cmp	r4, r0
 800fcd2:	4607      	mov	r7, r0
 800fcd4:	d802      	bhi.n	800fcdc <_realloc_r+0x34>
 800fcd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fcda:	d812      	bhi.n	800fd02 <_realloc_r+0x5a>
 800fcdc:	4621      	mov	r1, r4
 800fcde:	4640      	mov	r0, r8
 800fce0:	f7ff f8a0 	bl	800ee24 <_malloc_r>
 800fce4:	4605      	mov	r5, r0
 800fce6:	2800      	cmp	r0, #0
 800fce8:	d0ed      	beq.n	800fcc6 <_realloc_r+0x1e>
 800fcea:	42bc      	cmp	r4, r7
 800fcec:	4622      	mov	r2, r4
 800fcee:	4631      	mov	r1, r6
 800fcf0:	bf28      	it	cs
 800fcf2:	463a      	movcs	r2, r7
 800fcf4:	f7fe fe40 	bl	800e978 <memcpy>
 800fcf8:	4631      	mov	r1, r6
 800fcfa:	4640      	mov	r0, r8
 800fcfc:	f7ff f826 	bl	800ed4c <_free_r>
 800fd00:	e7e1      	b.n	800fcc6 <_realloc_r+0x1e>
 800fd02:	4635      	mov	r5, r6
 800fd04:	e7df      	b.n	800fcc6 <_realloc_r+0x1e>
	...

0800fd08 <_read_r>:
 800fd08:	b538      	push	{r3, r4, r5, lr}
 800fd0a:	4d07      	ldr	r5, [pc, #28]	; (800fd28 <_read_r+0x20>)
 800fd0c:	4604      	mov	r4, r0
 800fd0e:	4608      	mov	r0, r1
 800fd10:	4611      	mov	r1, r2
 800fd12:	2200      	movs	r2, #0
 800fd14:	602a      	str	r2, [r5, #0]
 800fd16:	461a      	mov	r2, r3
 800fd18:	f7f0 fed0 	bl	8000abc <_read>
 800fd1c:	1c43      	adds	r3, r0, #1
 800fd1e:	d102      	bne.n	800fd26 <_read_r+0x1e>
 800fd20:	682b      	ldr	r3, [r5, #0]
 800fd22:	b103      	cbz	r3, 800fd26 <_read_r+0x1e>
 800fd24:	6023      	str	r3, [r4, #0]
 800fd26:	bd38      	pop	{r3, r4, r5, pc}
 800fd28:	20008478 	.word	0x20008478

0800fd2c <_raise_r>:
 800fd2c:	291f      	cmp	r1, #31
 800fd2e:	b538      	push	{r3, r4, r5, lr}
 800fd30:	4604      	mov	r4, r0
 800fd32:	460d      	mov	r5, r1
 800fd34:	d904      	bls.n	800fd40 <_raise_r+0x14>
 800fd36:	2316      	movs	r3, #22
 800fd38:	6003      	str	r3, [r0, #0]
 800fd3a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd3e:	bd38      	pop	{r3, r4, r5, pc}
 800fd40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fd42:	b112      	cbz	r2, 800fd4a <_raise_r+0x1e>
 800fd44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fd48:	b94b      	cbnz	r3, 800fd5e <_raise_r+0x32>
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	f000 f830 	bl	800fdb0 <_getpid_r>
 800fd50:	462a      	mov	r2, r5
 800fd52:	4601      	mov	r1, r0
 800fd54:	4620      	mov	r0, r4
 800fd56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd5a:	f000 b817 	b.w	800fd8c <_kill_r>
 800fd5e:	2b01      	cmp	r3, #1
 800fd60:	d00a      	beq.n	800fd78 <_raise_r+0x4c>
 800fd62:	1c59      	adds	r1, r3, #1
 800fd64:	d103      	bne.n	800fd6e <_raise_r+0x42>
 800fd66:	2316      	movs	r3, #22
 800fd68:	6003      	str	r3, [r0, #0]
 800fd6a:	2001      	movs	r0, #1
 800fd6c:	e7e7      	b.n	800fd3e <_raise_r+0x12>
 800fd6e:	2400      	movs	r4, #0
 800fd70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fd74:	4628      	mov	r0, r5
 800fd76:	4798      	blx	r3
 800fd78:	2000      	movs	r0, #0
 800fd7a:	e7e0      	b.n	800fd3e <_raise_r+0x12>

0800fd7c <raise>:
 800fd7c:	4b02      	ldr	r3, [pc, #8]	; (800fd88 <raise+0xc>)
 800fd7e:	4601      	mov	r1, r0
 800fd80:	6818      	ldr	r0, [r3, #0]
 800fd82:	f7ff bfd3 	b.w	800fd2c <_raise_r>
 800fd86:	bf00      	nop
 800fd88:	2000002c 	.word	0x2000002c

0800fd8c <_kill_r>:
 800fd8c:	b538      	push	{r3, r4, r5, lr}
 800fd8e:	4d07      	ldr	r5, [pc, #28]	; (800fdac <_kill_r+0x20>)
 800fd90:	2300      	movs	r3, #0
 800fd92:	4604      	mov	r4, r0
 800fd94:	4608      	mov	r0, r1
 800fd96:	4611      	mov	r1, r2
 800fd98:	602b      	str	r3, [r5, #0]
 800fd9a:	f7f0 fe73 	bl	8000a84 <_kill>
 800fd9e:	1c43      	adds	r3, r0, #1
 800fda0:	d102      	bne.n	800fda8 <_kill_r+0x1c>
 800fda2:	682b      	ldr	r3, [r5, #0]
 800fda4:	b103      	cbz	r3, 800fda8 <_kill_r+0x1c>
 800fda6:	6023      	str	r3, [r4, #0]
 800fda8:	bd38      	pop	{r3, r4, r5, pc}
 800fdaa:	bf00      	nop
 800fdac:	20008478 	.word	0x20008478

0800fdb0 <_getpid_r>:
 800fdb0:	f7f0 be60 	b.w	8000a74 <_getpid>

0800fdb4 <_fstat_r>:
 800fdb4:	b538      	push	{r3, r4, r5, lr}
 800fdb6:	4d07      	ldr	r5, [pc, #28]	; (800fdd4 <_fstat_r+0x20>)
 800fdb8:	2300      	movs	r3, #0
 800fdba:	4604      	mov	r4, r0
 800fdbc:	4608      	mov	r0, r1
 800fdbe:	4611      	mov	r1, r2
 800fdc0:	602b      	str	r3, [r5, #0]
 800fdc2:	f7f0 fec0 	bl	8000b46 <_fstat>
 800fdc6:	1c43      	adds	r3, r0, #1
 800fdc8:	d102      	bne.n	800fdd0 <_fstat_r+0x1c>
 800fdca:	682b      	ldr	r3, [r5, #0]
 800fdcc:	b103      	cbz	r3, 800fdd0 <_fstat_r+0x1c>
 800fdce:	6023      	str	r3, [r4, #0]
 800fdd0:	bd38      	pop	{r3, r4, r5, pc}
 800fdd2:	bf00      	nop
 800fdd4:	20008478 	.word	0x20008478

0800fdd8 <_isatty_r>:
 800fdd8:	b538      	push	{r3, r4, r5, lr}
 800fdda:	4d06      	ldr	r5, [pc, #24]	; (800fdf4 <_isatty_r+0x1c>)
 800fddc:	2300      	movs	r3, #0
 800fdde:	4604      	mov	r4, r0
 800fde0:	4608      	mov	r0, r1
 800fde2:	602b      	str	r3, [r5, #0]
 800fde4:	f7f0 febf 	bl	8000b66 <_isatty>
 800fde8:	1c43      	adds	r3, r0, #1
 800fdea:	d102      	bne.n	800fdf2 <_isatty_r+0x1a>
 800fdec:	682b      	ldr	r3, [r5, #0]
 800fdee:	b103      	cbz	r3, 800fdf2 <_isatty_r+0x1a>
 800fdf0:	6023      	str	r3, [r4, #0]
 800fdf2:	bd38      	pop	{r3, r4, r5, pc}
 800fdf4:	20008478 	.word	0x20008478

0800fdf8 <_malloc_usable_size_r>:
 800fdf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fdfc:	1f18      	subs	r0, r3, #4
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	bfbc      	itt	lt
 800fe02:	580b      	ldrlt	r3, [r1, r0]
 800fe04:	18c0      	addlt	r0, r0, r3
 800fe06:	4770      	bx	lr

0800fe08 <_init>:
 800fe08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe0a:	bf00      	nop
 800fe0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe0e:	bc08      	pop	{r3}
 800fe10:	469e      	mov	lr, r3
 800fe12:	4770      	bx	lr

0800fe14 <_fini>:
 800fe14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe16:	bf00      	nop
 800fe18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe1a:	bc08      	pop	{r3}
 800fe1c:	469e      	mov	lr, r3
 800fe1e:	4770      	bx	lr
