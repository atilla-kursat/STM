
ethernet_api.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d94  08010100  08010100  00020100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012e94  08012e94  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08012e94  08012e94  00022e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012e9c  08012e9c  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012e9c  08012e9c  00022e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012ea0  08012ea0  00022ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08012ea4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          00008404  20000090  20000090  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008494  20008494  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f367  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053a6  00000000  00000000  0004f427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c8  00000000  00000000  000547d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016f8  00000000  00000000  00055f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dd1f  00000000  00000000  00057690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000260fd  00000000  00000000  000853af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1aad  00000000  00000000  000ab4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018cf59  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c00  00000000  00000000  0018cfac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080100e8 	.word	0x080100e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080100e8 	.word	0x080100e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <udpClient_send>:
	}
	*/

}

void udpClient_send(){
 8000574:	b580      	push	{r7, lr}
 8000576:	b09c      	sub	sp, #112	; 0x70
 8000578:	af00      	add	r7, sp, #0
	struct pbuf *txBuf;
	char data[100];
	int len = sprintf(data,"hello, received message count is %d \n",counter);
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <udpClient_send+0x58>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	461a      	mov	r2, r3
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	4913      	ldr	r1, [pc, #76]	; (80005d0 <udpClient_send+0x5c>)
 8000584:	4618      	mov	r0, r3
 8000586:	f00e fc01 	bl	800ed8c <siprintf>
 800058a:	66f8      	str	r0, [r7, #108]	; 0x6c
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800058c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800058e:	b29b      	uxth	r3, r3
 8000590:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000594:	4619      	mov	r1, r3
 8000596:	2036      	movs	r0, #54	; 0x36
 8000598:	f005 f938 	bl	800580c <pbuf_alloc>
 800059c:	66b8      	str	r0, [r7, #104]	; 0x68

	if(txBuf != NULL){
 800059e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00f      	beq.n	80005c4 <udpClient_send+0x50>
		pbuf_take(txBuf,data,len);
 80005a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	4619      	mov	r1, r3
 80005ac:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80005ae:	f005 fe7d 	bl	80062ac <pbuf_take>
		udp_send(upcb,txBuf);
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <udpClient_send+0x60>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80005b8:	4618      	mov	r0, r3
 80005ba:	f00b fdb9 	bl	800c130 <udp_send>
		pbuf_free(txBuf);
 80005be:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80005c0:	f005 fc08 	bl	8005dd4 <pbuf_free>
	}


}
 80005c4:	bf00      	nop
 80005c6:	3770      	adds	r7, #112	; 0x70
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200000f4 	.word	0x200000f4
 80005d0:	08010100 	.word	0x08010100
 80005d4:	200000f8 	.word	0x200000f8

080005d8 <HAL_TIM_PeriodElapsedCallback>:
	pbuf_free(p);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	udpClient_send();
 80005e0:	f7ff ffc8 	bl	8000574 <udpClient_send>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <ping_send_now>:

void ping_send_now()
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
  ip_addr_t ping_target = destIP;
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <ping_send_now+0x38>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	607b      	str	r3, [r7, #4]
  LWIP_ASSERT("ping_pcb != NULL", ping_pcb != NULL);
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <ping_send_now+0x3c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d105      	bne.n	800060c <ping_send_now+0x20>
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <ping_send_now+0x40>)
 8000602:	228b      	movs	r2, #139	; 0x8b
 8000604:	490a      	ldr	r1, [pc, #40]	; (8000630 <ping_send_now+0x44>)
 8000606:	480b      	ldr	r0, [pc, #44]	; (8000634 <ping_send_now+0x48>)
 8000608:	f00e fb6a 	bl	800ece0 <iprintf>
  ping_send(ping_pcb, &ping_target);
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <ping_send_now+0x3c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	1d3a      	adds	r2, r7, #4
 8000612:	4611      	mov	r1, r2
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f80f 	bl	8000638 <ping_send>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000100 	.word	0x20000100
 8000628:	20000104 	.word	0x20000104
 800062c:	0801012c 	.word	0x0801012c
 8000630:	08010140 	.word	0x08010140
 8000634:	08010154 	.word	0x08010154

08000638 <ping_send>:

static void ping_send(struct raw_pcb *raw, ip_addr_t *addr)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
  struct pbuf *p;
  struct icmp_echo_hdr *iecho;
  size_t ping_size = sizeof(struct icmp_echo_hdr) + 32;
 8000642:	2328      	movs	r3, #40	; 0x28
 8000644:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF( PING_DEBUG, ("ping: send "));
  ip_addr_debug_print(PING_DEBUG, addr);
  LWIP_DEBUGF( PING_DEBUG, ("\n"));
  LWIP_ASSERT("ping_size <= 0xffff", ping_size <= 0xffff);
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800064c:	d305      	bcc.n	800065a <ping_send+0x22>
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <ping_send+0x84>)
 8000650:	2298      	movs	r2, #152	; 0x98
 8000652:	491b      	ldr	r1, [pc, #108]	; (80006c0 <ping_send+0x88>)
 8000654:	481b      	ldr	r0, [pc, #108]	; (80006c4 <ping_send+0x8c>)
 8000656:	f00e fb43 	bl	800ece0 <iprintf>

  p = pbuf_alloc(PBUF_IP, (u16_t)ping_size, PBUF_RAM);
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	b29b      	uxth	r3, r3
 800065e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000662:	4619      	mov	r1, r3
 8000664:	2022      	movs	r0, #34	; 0x22
 8000666:	f005 f8d1 	bl	800580c <pbuf_alloc>
 800066a:	6138      	str	r0, [r7, #16]
  if (!p) {
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d020      	beq.n	80006b4 <ping_send+0x7c>
    return;
  }
  if ((p->len == p->tot_len) && (p->next == NULL)) {
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	895a      	ldrh	r2, [r3, #10]
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	891b      	ldrh	r3, [r3, #8]
 800067a:	429a      	cmp	r2, r3
 800067c:	d116      	bne.n	80006ac <ping_send+0x74>
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d112      	bne.n	80006ac <ping_send+0x74>
    iecho = (struct icmp_echo_hdr *)p->payload;
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	60fb      	str	r3, [r7, #12]

    ping_prepare_echo(iecho, (u16_t)ping_size);
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	b29b      	uxth	r3, r3
 8000690:	4619      	mov	r1, r3
 8000692:	68f8      	ldr	r0, [r7, #12]
 8000694:	f000 f81a 	bl	80006cc <ping_prepare_echo>

    raw_sendto(raw, p, addr);
 8000698:	683a      	ldr	r2, [r7, #0]
 800069a:	6939      	ldr	r1, [r7, #16]
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f005 ffa3 	bl	80065e8 <raw_sendto>
    ping_time = sys_now();
 80006a2:	f003 fdc7 	bl	8004234 <sys_now>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <ping_send+0x90>)
 80006aa:	6013      	str	r3, [r2, #0]
  }
  pbuf_free(p);
 80006ac:	6938      	ldr	r0, [r7, #16]
 80006ae:	f005 fb91 	bl	8005dd4 <pbuf_free>
 80006b2:	e000      	b.n	80006b6 <ping_send+0x7e>
    return;
 80006b4:	bf00      	nop
}
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	0801012c 	.word	0x0801012c
 80006c0:	0801017c 	.word	0x0801017c
 80006c4:	08010154 	.word	0x08010154
 80006c8:	20000108 	.word	0x20000108

080006cc <ping_prepare_echo>:

static void ping_prepare_echo( struct icmp_echo_hdr *iecho, u16_t len)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	807b      	strh	r3, [r7, #2]
  size_t i;
  size_t data_len = len - sizeof(struct icmp_echo_hdr);
 80006d8:	887b      	ldrh	r3, [r7, #2]
 80006da:	3b08      	subs	r3, #8
 80006dc:	60bb      	str	r3, [r7, #8]

  ICMPH_TYPE_SET(iecho, ICMP_ECHO);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2208      	movs	r2, #8
 80006e2:	701a      	strb	r2, [r3, #0]
  ICMPH_CODE_SET(iecho, 0);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2200      	movs	r2, #0
 80006e8:	705a      	strb	r2, [r3, #1]
  iecho->chksum = 0;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	709a      	strb	r2, [r3, #2]
 80006f0:	2200      	movs	r2, #0
 80006f2:	70da      	strb	r2, [r3, #3]
  iecho->id     = 0xAFAF;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	f062 0250 	orn	r2, r2, #80	; 0x50
 80006fc:	711a      	strb	r2, [r3, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	f062 0250 	orn	r2, r2, #80	; 0x50
 8000704:	715a      	strb	r2, [r3, #5]
  iecho->seqno  = htons(++ping_seq_num);
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <ping_prepare_echo+0x94>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	4a14      	ldr	r2, [pc, #80]	; (8000760 <ping_prepare_echo+0x94>)
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <ping_prepare_echo+0x94>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	b29b      	uxth	r3, r3
 8000716:	4618      	mov	r0, r3
 8000718:	f003 ff8c 	bl	8004634 <lwip_htons>
 800071c:	4603      	mov	r3, r0
 800071e:	461a      	mov	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	80da      	strh	r2, [r3, #6]

  /* fill the additional data buffer with some data */
  for(i = 0; i < data_len; i++) {
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	e009      	b.n	800073e <ping_prepare_echo+0x72>
    ((char*)iecho)[sizeof(struct icmp_echo_hdr) + i] = (char)i;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	3308      	adds	r3, #8
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	4413      	add	r3, r2
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < data_len; i++) {
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	3301      	adds	r3, #1
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	429a      	cmp	r2, r3
 8000744:	d3f1      	bcc.n	800072a <ping_prepare_echo+0x5e>
  }

  iecho->chksum = inet_chksum(iecho, len);
 8000746:	887b      	ldrh	r3, [r7, #2]
 8000748:	4619      	mov	r1, r3
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f003 fffd 	bl	800474a <inet_chksum>
 8000750:	4603      	mov	r3, r0
 8000752:	b29a      	uxth	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	805a      	strh	r2, [r3, #2]
}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000010c 	.word	0x2000010c

08000764 <ping_raw_init>:

static void
ping_raw_init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  ping_pcb = raw_new(IP_PROTO_ICMP);
 8000768:	2001      	movs	r0, #1
 800076a:	f006 f823 	bl	80067b4 <raw_new>
 800076e:	4603      	mov	r3, r0
 8000770:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <ping_raw_init+0x48>)
 8000772:	6013      	str	r3, [r2, #0]
  LWIP_ASSERT("ping_pcb != NULL", ping_pcb != NULL);
 8000774:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <ping_raw_init+0x48>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d105      	bne.n	8000788 <ping_raw_init+0x24>
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <ping_raw_init+0x4c>)
 800077e:	22c0      	movs	r2, #192	; 0xc0
 8000780:	490c      	ldr	r1, [pc, #48]	; (80007b4 <ping_raw_init+0x50>)
 8000782:	480d      	ldr	r0, [pc, #52]	; (80007b8 <ping_raw_init+0x54>)
 8000784:	f00e faac 	bl	800ece0 <iprintf>


  raw_bind(ping_pcb, &myIP);
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <ping_raw_init+0x48>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	490b      	ldr	r1, [pc, #44]	; (80007bc <ping_raw_init+0x58>)
 800078e:	4618      	mov	r0, r3
 8000790:	f005 ff0c 	bl	80065ac <raw_bind>
  sys_timeout(1000, 1000, ping_pcb);
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <ping_raw_init+0x48>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	461a      	mov	r2, r3
 800079a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800079e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a2:	f00b fa9b 	bl	800bcdc <sys_timeout>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000104 	.word	0x20000104
 80007b0:	0801012c 	.word	0x0801012c
 80007b4:	08010140 	.word	0x08010140
 80007b8:	08010154 	.word	0x08010154
 80007bc:	200000fc 	.word	0x200000fc

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c4:	f000 fc54 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c8:	f000 f82e 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007cc:	f000 f8e8 	bl	80009a0 <MX_GPIO_Init>
  MX_LWIP_Init();
 80007d0:	f003 fa30 	bl	8003c34 <MX_LWIP_Init>
  MX_TIM1_Init();
 80007d4:	f000 f892 	bl	80008fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80007d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007dc:	480c      	ldr	r0, [pc, #48]	; (8000810 <main+0x50>)
 80007de:	f002 f98e 	bl	8002afe <HAL_GPIO_TogglePin>

  //udpClient_connect();
  IP_ADDR4(&destIP,192,168,1,50);
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <main+0x54>)
 80007e4:	4a0c      	ldr	r2, [pc, #48]	; (8000818 <main+0x58>)
 80007e6:	601a      	str	r2, [r3, #0]
  IP_ADDR4(&myIP,192,168,1,111);
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <main+0x5c>)
 80007ea:	4a0d      	ldr	r2, [pc, #52]	; (8000820 <main+0x60>)
 80007ec:	601a      	str	r2, [r3, #0]
  ping_raw_init();
 80007ee:	f7ff ffb9 	bl	8000764 <ping_raw_init>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80007f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f6:	4806      	ldr	r0, [pc, #24]	; (8000810 <main+0x50>)
 80007f8:	f002 f981 	bl	8002afe <HAL_GPIO_TogglePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 80007fc:	f003 fb66 	bl	8003ecc <MX_LWIP_Process>
	  ping_send_now(ping_pcb, &destIP);
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <main+0x64>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4903      	ldr	r1, [pc, #12]	; (8000814 <main+0x54>)
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fef0 	bl	80005ec <ping_send_now>
	  MX_LWIP_Process();
 800080c:	e7f6      	b.n	80007fc <main+0x3c>
 800080e:	bf00      	nop
 8000810:	40020c00 	.word	0x40020c00
 8000814:	20000100 	.word	0x20000100
 8000818:	3201a8c0 	.word	0x3201a8c0
 800081c:	200000fc 	.word	0x200000fc
 8000820:	6f01a8c0 	.word	0x6f01a8c0
 8000824:	20000104 	.word	0x20000104

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b094      	sub	sp, #80	; 0x50
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0320 	add.w	r3, r7, #32
 8000832:	2230      	movs	r2, #48	; 0x30
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f00e fa4a 	bl	800ecd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <SystemClock_Config+0xcc>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	4a27      	ldr	r2, [pc, #156]	; (80008f4 <SystemClock_Config+0xcc>)
 8000856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085a:	6413      	str	r3, [r2, #64]	; 0x40
 800085c:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <SystemClock_Config+0xcc>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <SystemClock_Config+0xd0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <SystemClock_Config+0xd0>)
 8000872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <SystemClock_Config+0xd0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000884:	2301      	movs	r3, #1
 8000886:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000888:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088e:	2302      	movs	r3, #2
 8000890:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000892:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000898:	2308      	movs	r3, #8
 800089a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800089c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008a6:	2307      	movs	r3, #7
 80008a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008aa:	f107 0320 	add.w	r3, r7, #32
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 f940 	bl	8002b34 <HAL_RCC_OscConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008ba:	f000 f8df 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008be:	230f      	movs	r3, #15
 80008c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c2:	2302      	movs	r3, #2
 80008c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	2105      	movs	r1, #5
 80008dc:	4618      	mov	r0, r3
 80008de:	f002 fba1 	bl	8003024 <HAL_RCC_ClockConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008e8:	f000 f8c8 	bl	8000a7c <Error_Handler>
  }
}
 80008ec:	bf00      	nop
 80008ee:	3750      	adds	r7, #80	; 0x50
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40007000 	.word	0x40007000

080008fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_TIM1_Init+0x9c>)
 800091a:	4a20      	ldr	r2, [pc, #128]	; (800099c <MX_TIM1_Init+0xa0>)
 800091c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 800091e:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_TIM1_Init+0x9c>)
 8000920:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000924:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_TIM1_Init+0x9c>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_TIM1_Init+0x9c>)
 800092e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000932:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_TIM1_Init+0x9c>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_TIM1_Init+0x9c>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_TIM1_Init+0x9c>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000946:	4814      	ldr	r0, [pc, #80]	; (8000998 <MX_TIM1_Init+0x9c>)
 8000948:	f002 fd64 	bl	8003414 <HAL_TIM_Base_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000952:	f000 f893 	bl	8000a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	4619      	mov	r1, r3
 8000962:	480d      	ldr	r0, [pc, #52]	; (8000998 <MX_TIM1_Init+0x9c>)
 8000964:	f002 fead 	bl	80036c2 <HAL_TIM_ConfigClockSource>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800096e:	f000 f885 	bl	8000a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800097a:	463b      	mov	r3, r7
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	; (8000998 <MX_TIM1_Init+0x9c>)
 8000980:	f003 f8c8 	bl	8003b14 <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800098a:	f000 f877 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200000ac 	.word	0x200000ac
 800099c:	40010000 	.word	0x40010000

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b2e      	ldr	r3, [pc, #184]	; (8000a74 <MX_GPIO_Init+0xd4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a2d      	ldr	r2, [pc, #180]	; (8000a74 <MX_GPIO_Init+0xd4>)
 80009c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <MX_GPIO_Init+0xd4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b27      	ldr	r3, [pc, #156]	; (8000a74 <MX_GPIO_Init+0xd4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a26      	ldr	r2, [pc, #152]	; (8000a74 <MX_GPIO_Init+0xd4>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <MX_GPIO_Init+0xd4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <MX_GPIO_Init+0xd4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a1f      	ldr	r2, [pc, #124]	; (8000a74 <MX_GPIO_Init+0xd4>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <MX_GPIO_Init+0xd4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <MX_GPIO_Init+0xd4>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <MX_GPIO_Init+0xd4>)
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_GPIO_Init+0xd4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_GPIO_Init+0xd4>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a11      	ldr	r2, [pc, #68]	; (8000a74 <MX_GPIO_Init+0xd4>)
 8000a30:	f043 0308 	orr.w	r3, r3, #8
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_GPIO_Init+0xd4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0308 	and.w	r3, r3, #8
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000a48:	480b      	ldr	r0, [pc, #44]	; (8000a78 <MX_GPIO_Init+0xd8>)
 8000a4a:	f002 f83f 	bl	8002acc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000a4e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_GPIO_Init+0xd8>)
 8000a68:	f001 fe94 	bl	8002794 <HAL_GPIO_Init>

}
 8000a6c:	bf00      	nop
 8000a6e:	3728      	adds	r7, #40	; 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020c00 	.word	0x40020c00

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ac6:	2007      	movs	r0, #7
 8000ac8:	f000 fc38 	bl	800133c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_TIM_Base_MspInit+0x48>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d115      	bne.n	8000b16 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_TIM_Base_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	4a0c      	ldr	r2, [pc, #48]	; (8000b24 <HAL_TIM_Base_MspInit+0x4c>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6453      	str	r3, [r2, #68]	; 0x44
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_TIM_Base_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2019      	movs	r0, #25
 8000b0c:	f000 fc21 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b10:	2019      	movs	r0, #25
 8000b12:	f000 fc3a 	bl	800138a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40010000 	.word	0x40010000
 8000b24:	40023800 	.word	0x40023800

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <NMI_Handler+0x4>

08000b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b74:	f000 face 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b82:	f002 fc96 	bl	80034b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000ac 	.word	0x200000ac

08000b90 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <ETH_IRQHandler+0x10>)
 8000b96:	f000 ff15 	bl	80019c4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20004c34 	.word	0x20004c34

08000ba4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
	return 1;
 8000ba8:	2301      	movs	r3, #1
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <_kill>:

int _kill(int pid, int sig)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <_kill+0x20>)
 8000bc0:	2216      	movs	r2, #22
 8000bc2:	601a      	str	r2, [r3, #0]
	return -1;
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	20008484 	.word	0x20008484

08000bd8 <_exit>:

void _exit (int status)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ffe5 	bl	8000bb4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000bea:	e7fe      	b.n	8000bea <_exit+0x12>

08000bec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	e00a      	b.n	8000c14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bfe:	f3af 8000 	nop.w
 8000c02:	4601      	mov	r1, r0
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	1c5a      	adds	r2, r3, #1
 8000c08:	60ba      	str	r2, [r7, #8]
 8000c0a:	b2ca      	uxtb	r2, r1
 8000c0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	dbf0      	blt.n	8000bfe <_read+0x12>
	}

return len;
 8000c1c:	687b      	ldr	r3, [r7, #4]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	60f8      	str	r0, [r7, #12]
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	e009      	b.n	8000c4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	1c5a      	adds	r2, r3, #1
 8000c3c:	60ba      	str	r2, [r7, #8]
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	dbf1      	blt.n	8000c38 <_write+0x12>
	}
	return len;
 8000c54:	687b      	ldr	r3, [r7, #4]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <_close>:

int _close(int file)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
	return -1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c86:	605a      	str	r2, [r3, #4]
	return 0;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <_isatty>:

int _isatty(int file)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
	return 1;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
	return 0;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b087      	sub	sp, #28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd0:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <_sbrk+0x5c>)
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <_sbrk+0x60>)
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d102      	bne.n	8000cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <_sbrk+0x64>)
 8000ce6:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <_sbrk+0x68>)
 8000ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d205      	bcs.n	8000d04 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <_sbrk+0x6c>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e009      	b.n	8000d18 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <_sbrk+0x64>)
 8000d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	371c      	adds	r7, #28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	20020000 	.word	0x20020000
 8000d28:	00000400 	.word	0x00000400
 8000d2c:	20000110 	.word	0x20000110
 8000d30:	20008498 	.word	0x20008498
 8000d34:	20008484 	.word	0x20008484

08000d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <SystemInit+0x20>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <SystemInit+0x20>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d62:	490e      	ldr	r1, [pc, #56]	; (8000d9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d64:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d78:	4c0b      	ldr	r4, [pc, #44]	; (8000da8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d86:	f7ff ffd7 	bl	8000d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f00d ff45 	bl	800ec18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8e:	f7ff fd17 	bl	80007c0 <main>
  bx  lr    
 8000d92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000da0:	08012ea4 	.word	0x08012ea4
  ldr r2, =_sbss
 8000da4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000da8:	20008494 	.word	0x20008494

08000dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC_IRQHandler>

08000dae <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d00b      	beq.n	8000dd6 <DP83848_RegisterBusIO+0x28>
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d007      	beq.n	8000dd6 <DP83848_RegisterBusIO+0x28>
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <DP83848_RegisterBusIO+0x28>
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d102      	bne.n	8000ddc <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	e014      	b.n	8000e06 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	691a      	ldr	r2, [r3, #16]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d17c      	bne.n	8000f2c <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d002      	beq.n	8000e40 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2220      	movs	r2, #32
 8000e44:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	e01c      	b.n	8000e86 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	f107 0208 	add.w	r2, r7, #8
 8000e54:	2119      	movs	r1, #25
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	4798      	blx	r3
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	da03      	bge.n	8000e68 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8000e60:	f06f 0304 	mvn.w	r3, #4
 8000e64:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000e66:	e00b      	b.n	8000e80 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	f003 031f 	and.w	r3, r3, #31
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d105      	bne.n	8000e80 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
         break;
 8000e7e:	e005      	b.n	8000e8c <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	3301      	adds	r3, #1
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	2b1f      	cmp	r3, #31
 8000e8a:	d9df      	bls.n	8000e4c <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b1f      	cmp	r3, #31
 8000e92:	d902      	bls.n	8000e9a <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8000e94:	f06f 0302 	mvn.w	r3, #2
 8000e98:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d145      	bne.n	8000f2c <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	6810      	ldr	r0, [r2, #0]
 8000ea8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000eac:	2100      	movs	r1, #0
 8000eae:	4798      	blx	r3
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db37      	blt.n	8000f26 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	6810      	ldr	r0, [r2, #0]
 8000ebe:	f107 0208 	add.w	r2, r7, #8
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4798      	blx	r3
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db28      	blt.n	8000f1e <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4798      	blx	r3
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000ed6:	e01c      	b.n	8000f12 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4798      	blx	r3
 8000ede:	4603      	mov	r3, r0
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000eea:	d80e      	bhi.n	8000f0a <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	6810      	ldr	r0, [r2, #0]
 8000ef4:	f107 0208 	add.w	r2, r7, #8
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4798      	blx	r3
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	da07      	bge.n	8000f12 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8000f02:	f06f 0304 	mvn.w	r3, #4
 8000f06:	613b      	str	r3, [r7, #16]
                 break;
 8000f08:	e010      	b.n	8000f2c <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8000f0a:	f06f 0301 	mvn.w	r3, #1
 8000f0e:	613b      	str	r3, [r7, #16]
               break;
 8000f10:	e00c      	b.n	8000f2c <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1dd      	bne.n	8000ed8 <DP83848_Init+0xc6>
 8000f1c:	e006      	b.n	8000f2c <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8000f1e:	f06f 0304 	mvn.w	r3, #4
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	e002      	b.n	8000f2c <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8000f26:	f06f 0303 	mvn.w	r3, #3
 8000f2a:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d112      	bne.n	8000f58 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	4798      	blx	r3
 8000f38:	4603      	mov	r3, r0
 8000f3a:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8000f3c:	bf00      	nop
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	4798      	blx	r3
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f50:	d9f5      	bls.n	8000f3e <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	605a      	str	r2, [r3, #4]
   }

   return status;
 8000f58:	693b      	ldr	r3, [r7, #16]
 }
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	6810      	ldr	r0, [r2, #0]
 8000f76:	f107 020c 	add.w	r2, r7, #12
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4798      	blx	r3
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	da02      	bge.n	8000f8a <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8000f84:	f06f 0304 	mvn.w	r3, #4
 8000f88:	e06e      	b.n	8001068 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	6810      	ldr	r0, [r2, #0]
 8000f92:	f107 020c 	add.w	r2, r7, #12
 8000f96:	2101      	movs	r1, #1
 8000f98:	4798      	blx	r3
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	da02      	bge.n	8000fa6 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8000fa0:	f06f 0304 	mvn.w	r3, #4
 8000fa4:	e060      	b.n	8001068 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e059      	b.n	8001068 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	6810      	ldr	r0, [r2, #0]
 8000fbc:	f107 020c 	add.w	r2, r7, #12
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4798      	blx	r3
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	da02      	bge.n	8000fd0 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8000fca:	f06f 0304 	mvn.w	r3, #4
 8000fce:	e04b      	b.n	8001068 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d11b      	bne.n	8001012 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d006      	beq.n	8000ff2 <DP83848_GetLinkState+0x90>
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e03a      	b.n	8001068 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e033      	b.n	8001068 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800100a:	2304      	movs	r3, #4
 800100c:	e02c      	b.n	8001068 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 800100e:	2305      	movs	r3, #5
 8001010:	e02a      	b.n	8001068 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	6810      	ldr	r0, [r2, #0]
 800101a:	f107 020c 	add.w	r2, r7, #12
 800101e:	2110      	movs	r1, #16
 8001020:	4798      	blx	r3
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	da02      	bge.n	800102e <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8001028:	f06f 0304 	mvn.w	r3, #4
 800102c:	e01c      	b.n	8001068 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8001038:	2306      	movs	r3, #6
 800103a:	e015      	b.n	8001068 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0306 	and.w	r3, r3, #6
 8001042:	2b04      	cmp	r3, #4
 8001044:	d101      	bne.n	800104a <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001046:	2302      	movs	r3, #2
 8001048:	e00e      	b.n	8001068 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f003 0306 	and.w	r3, r3, #6
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8001054:	2303      	movs	r3, #3
 8001056:	e007      	b.n	8001068 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0306 	and.w	r3, r3, #6
 800105e:	2b06      	cmp	r3, #6
 8001060:	d101      	bne.n	8001066 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8001062:	2304      	movs	r3, #4
 8001064:	e000      	b.n	8001068 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001066:	2305      	movs	r3, #5
    }
  }
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_Init+0x40>)
 800107a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_Init+0x40>)
 8001086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_Init+0x40>)
 8001092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001098:	2003      	movs	r0, #3
 800109a:	f000 f94f 	bl	800133c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109e:	2000      	movs	r0, #0
 80010a0:	f000 f808 	bl	80010b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a4:	f7ff fcf0 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023c00 	.word	0x40023c00

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_InitTick+0x54>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_InitTick+0x58>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f967 	bl	80013a6 <HAL_SYSTICK_Config>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e00e      	b.n	8001100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b0f      	cmp	r3, #15
 80010e6:	d80a      	bhi.n	80010fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e8:	2200      	movs	r2, #0
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f000 f92f 	bl	8001352 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f4:	4a06      	ldr	r2, [pc, #24]	; (8001110 <HAL_InitTick+0x5c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e000      	b.n	8001100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000000 	.word	0x20000000
 800110c:	20000008 	.word	0x20000008
 8001110:	20000004 	.word	0x20000004

08001114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x20>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x24>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_IncTick+0x24>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008
 8001138:	20000114 	.word	0x20000114

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000114 	.word	0x20000114

08001154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff ffee 	bl	800113c <HAL_GetTick>
 8001160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116c:	d005      	beq.n	800117a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_Delay+0x44>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800117a:	bf00      	nop
 800117c:	f7ff ffde 	bl	800113c <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d8f7      	bhi.n	800117c <HAL_Delay+0x28>
  {
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000008 	.word	0x20000008

0800119c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	60d3      	str	r3, [r2, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db0b      	blt.n	800122a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f003 021f 	and.w	r2, r3, #31
 8001218:	4907      	ldr	r1, [pc, #28]	; (8001238 <__NVIC_EnableIRQ+0x38>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	2001      	movs	r0, #1
 8001222:	fa00 f202 	lsl.w	r2, r0, r2
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000e100 	.word	0xe000e100

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0a      	blt.n	8001266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	490c      	ldr	r1, [pc, #48]	; (8001288 <__NVIC_SetPriority+0x4c>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	440b      	add	r3, r1
 8001260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001264:	e00a      	b.n	800127c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4908      	ldr	r1, [pc, #32]	; (800128c <__NVIC_SetPriority+0x50>)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3b04      	subs	r3, #4
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	440b      	add	r3, r1
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf28      	it	cs
 80012ae:	2304      	movcs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d902      	bls.n	80012c0 <NVIC_EncodePriority+0x30>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b03      	subs	r3, #3
 80012be:	e000      	b.n	80012c2 <NVIC_EncodePriority+0x32>
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001308:	d301      	bcc.n	800130e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130a:	2301      	movs	r3, #1
 800130c:	e00f      	b.n	800132e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130e:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <SysTick_Config+0x40>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001316:	210f      	movs	r1, #15
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f7ff ff8e 	bl	800123c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <SysTick_Config+0x40>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001326:	4b04      	ldr	r3, [pc, #16]	; (8001338 <SysTick_Config+0x40>)
 8001328:	2207      	movs	r2, #7
 800132a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	e000e010 	.word	0xe000e010

0800133c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff29 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001364:	f7ff ff3e 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 8001368:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	6978      	ldr	r0, [r7, #20]
 8001370:	f7ff ff8e 	bl	8001290 <NVIC_EncodePriority>
 8001374:	4602      	mov	r2, r0
 8001376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff5d 	bl	800123c <__NVIC_SetPriority>
}
 8001382:	bf00      	nop
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff31 	bl	8001200 <__NVIC_EnableIRQ>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffa2 	bl	80012f8 <SysTick_Config>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e06c      	b.n	80014ac <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d106      	bne.n	80013ea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2223      	movs	r2, #35	; 0x23
 80013e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f002 ff2d 	bl	8004244 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <HAL_ETH_Init+0xf4>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a30      	ldr	r2, [pc, #192]	; (80014b4 <HAL_ETH_Init+0xf4>)
 80013f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <HAL_ETH_Init+0xf4>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001406:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <HAL_ETH_Init+0xf8>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4a2b      	ldr	r2, [pc, #172]	; (80014b8 <HAL_ETH_Init+0xf8>)
 800140c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001410:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001412:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <HAL_ETH_Init+0xf8>)
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	4927      	ldr	r1, [pc, #156]	; (80014b8 <HAL_ETH_Init+0xf8>)
 800141c:	4313      	orrs	r3, r2
 800141e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001420:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <HAL_ETH_Init+0xf8>)
 8001422:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800143a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800143c:	f7ff fe7e 	bl	800113c <HAL_GetTick>
 8001440:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001442:	e011      	b.n	8001468 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001444:	f7ff fe7a 	bl	800113c <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001452:	d909      	bls.n	8001468 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2204      	movs	r2, #4
 8001458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	22e0      	movs	r2, #224	; 0xe0
 8001460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e021      	b.n	80014ac <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1e4      	bne.n	8001444 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 fee4 	bl	8002248 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 ff8b 	bl	800239c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 ffe1 	bl	800244e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	461a      	mov	r2, r3
 8001492:	2100      	movs	r1, #0
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 ff49 	bl	800232c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2210      	movs	r2, #16
 80014a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40013800 	.word	0x40013800

080014bc <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014ca:	2b10      	cmp	r3, #16
 80014cc:	d150      	bne.n	8001570 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2223      	movs	r2, #35	; 0x23
 80014d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2204      	movs	r2, #4
 80014da:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f9fd 	bl	80018dc <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f042 0208 	orr.w	r2, r2, #8
 80014f0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014fa:	2001      	movs	r0, #1
 80014fc:	f7ff fe2a 	bl	8001154 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0204 	orr.w	r2, r2, #4
 8001516:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff fe17 	bl	8001154 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 fd2a 	bl	8001f88 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001546:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800154a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	f043 0302 	orr.w	r3, r3, #2
 800155e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001562:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2223      	movs	r2, #35	; 0x23
 8001568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	e000      	b.n	8001572 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
  }
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b084      	sub	sp, #16
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001588:	2b23      	cmp	r3, #35	; 0x23
 800158a:	d14a      	bne.n	8001622 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2223      	movs	r2, #35	; 0x23
 8001590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015aa:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	f023 0302 	bic.w	r3, r3, #2
 80015be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015c2:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0204 	bic.w	r2, r2, #4
 80015d2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015dc:	2001      	movs	r0, #1
 80015de:	f7ff fdb9 	bl	8001154 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 fccc 	bl	8001f88 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0208 	bic.w	r2, r2, #8
 80015fe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001608:	2001      	movs	r0, #1
 800160a:	f7ff fda3 	bl	8001154 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2210      	movs	r2, #16
 800161a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	e000      	b.n	8001624 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
  }
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d109      	bne.n	8001652 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001644:	f043 0201 	orr.w	r2, r3, #1
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e07c      	b.n	800174c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001658:	2b23      	cmp	r3, #35	; 0x23
 800165a:	d176      	bne.n	800174a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800165c:	2200      	movs	r2, #0
 800165e:	68b9      	ldr	r1, [r7, #8]
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 ff61 	bl	8002528 <ETH_Prepare_Tx_Descriptors>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d009      	beq.n	8001680 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001672:	f043 0202 	orr.w	r2, r3, #2
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e065      	b.n	800174c <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001680:	f3bf 8f4f 	dsb	sy
}
 8001684:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	3206      	adds	r2, #6
 800168e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001692:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d904      	bls.n	80016b0 <HAL_ETH_Transmit+0x84>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016aa:	1f1a      	subs	r2, r3, #4
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3106      	adds	r1, #6
 80016bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016c4:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80016c6:	f7ff fd39 	bl	800113c <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80016cc:	e037      	b.n	800173e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d011      	beq.n	8001704 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e6:	f043 0208 	orr.w	r2, r3, #8
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e023      	b.n	800174c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170a:	d018      	beq.n	800173e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800170c:	f7ff fd16 	bl	800113c <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	429a      	cmp	r2, r3
 800171a:	d302      	bcc.n	8001722 <HAL_ETH_Transmit+0xf6>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10d      	bne.n	800173e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001728:	f043 0204 	orr.w	r2, r3, #4
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001738:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e006      	b.n	800174c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	dbc3      	blt.n	80016ce <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	e000      	b.n	800174c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
  }
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d109      	bne.n	8001780 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001772:	f043 0201 	orr.w	r2, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0a8      	b.n	80018d2 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001786:	2b23      	cmp	r3, #35	; 0x23
 8001788:	d001      	beq.n	800178e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0a1      	b.n	80018d2 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001792:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	3212      	adds	r2, #18
 800179a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017a4:	f1c3 0304 	rsb	r3, r3, #4
 80017a8:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017aa:	e06a      	b.n	8001882 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d007      	beq.n	80017c8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	699a      	ldr	r2, [r3, #24]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	69da      	ldr	r2, [r3, #28]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d103      	bne.n	80017dc <HAL_ETH_ReadData+0x88>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d040      	beq.n	800185e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00c      	beq.n	8001820 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001810:	3b04      	subs	r3, #4
 8001812:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800181c:	2301      	movs	r3, #1
 800181e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001838:	461a      	mov	r2, r3
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	b29b      	uxth	r3, r3
 800183e:	f002 feb9 	bl	80045b4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	441a      	add	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2200      	movs	r2, #0
 800185c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3301      	adds	r3, #1
 8001862:	61fb      	str	r3, [r7, #28]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	2b03      	cmp	r3, #3
 8001868:	d902      	bls.n	8001870 <HAL_ETH_ReadData+0x11c>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3b04      	subs	r3, #4
 800186e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	3212      	adds	r2, #18
 8001876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	3301      	adds	r3, #1
 8001880:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	db06      	blt.n	8001898 <HAL_ETH_ReadData+0x144>
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	429a      	cmp	r2, r3
 8001890:	d202      	bcs.n	8001898 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d089      	beq.n	80017ac <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	441a      	add	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f815 	bl	80018dc <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d108      	bne.n	80018d0 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	e000      	b.n	80018d2 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80018e8:	2301      	movs	r3, #1
 80018ea:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018f0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	3212      	adds	r2, #18
 80018f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018fc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001902:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001904:	e040      	b.n	8001988 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d112      	bne.n	8001934 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	4618      	mov	r0, r3
 8001914:	f002 fe1e 	bl	8004554 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d102      	bne.n	8001924 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	74fb      	strb	r3, [r7, #19]
 8001922:	e007      	b.n	8001934 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	461a      	mov	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	461a      	mov	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001934:	7cfb      	ldrb	r3, [r7, #19]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d026      	beq.n	8001988 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193e:	2b00      	cmp	r3, #0
 8001940:	d103      	bne.n	800194a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	4a1e      	ldr	r2, [pc, #120]	; (80019c0 <ETH_UpdateDescriptor+0xe4>)
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	e003      	b.n	8001952 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001950:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001952:	f3bf 8f5f 	dmb	sy
}
 8001956:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	3301      	adds	r3, #1
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	2b03      	cmp	r3, #3
 800196e:	d902      	bls.n	8001976 <ETH_UpdateDescriptor+0x9a>
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	3b04      	subs	r3, #4
 8001974:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	3212      	adds	r2, #18
 800197c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001980:	617b      	str	r3, [r7, #20]
      desccount--;
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	3b01      	subs	r3, #1
 8001986:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <ETH_UpdateDescriptor+0xb8>
 800198e:	7cfb      	ldrb	r3, [r7, #19]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1b8      	bne.n	8001906 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	429a      	cmp	r2, r3
 800199c:	d00c      	beq.n	80019b8 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a6:	461a      	mov	r2, r3
 80019a8:	2300      	movs	r3, #0
 80019aa:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80019b8:	bf00      	nop
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	800045f8 	.word	0x800045f8

080019c4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019da:	2b40      	cmp	r3, #64	; 0x40
 80019dc:	d112      	bne.n	8001a04 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ec:	2b40      	cmp	r3, #64	; 0x40
 80019ee:	d109      	bne.n	8001a04 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b50      	ldr	r3, [pc, #320]	; (8001b3c <HAL_ETH_IRQHandler+0x178>)
 80019fc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f8ac 	bl	8001b5c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d113      	bne.n	8001a3e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d10a      	bne.n	8001a3e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a30:	461a      	mov	r2, r3
 8001a32:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001a36:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f885 	bl	8001b48 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a50:	d14c      	bne.n	8001aec <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a64:	d142      	bne.n	8001aec <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6c:	f043 0208 	orr.w	r2, r3, #8
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a88:	d11a      	bne.n	8001ac0 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	4b2a      	ldr	r3, [pc, #168]	; (8001b40 <HAL_ETH_IRQHandler+0x17c>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001ab0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ab4:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	22e0      	movs	r2, #224	; 0xe0
 8001aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001abe:	e012      	b.n	8001ae6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac8:	695a      	ldr	r2, [r3, #20]
 8001aca:	f248 6380 	movw	r3, #34432	; 0x8680
 8001ace:	4013      	ands	r3, r2
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f248 6380 	movw	r3, #34432	; 0x8680
 8001ae4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f842 	bl	8001b70 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d10e      	bne.n	8001b18 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f83a 	bl	8001b84 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <HAL_ETH_IRQHandler+0x180>)
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d006      	beq.n	8001b32 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <HAL_ETH_IRQHandler+0x180>)
 8001b26:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b2a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f833 	bl	8001b98 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	00010040 	.word	0x00010040
 8001b40:	007e2000 	.word	0x007e2000
 8001b44:	40013c00 	.word	0x40013c00

08001b48 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f003 031c 	and.w	r3, r3, #28
 8001bc8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	02db      	lsls	r3, r3, #11
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	019b      	lsls	r3, r3, #6
 8001bda:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f023 0302 	bic.w	r3, r3, #2
 8001bea:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001bfc:	f7ff fa9e 	bl	800113c <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c02:	e00d      	b.n	8001c20 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001c04:	f7ff fa9a 	bl	800113c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c12:	d301      	bcc.n	8001c18 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e010      	b.n	8001c3a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1ec      	bne.n	8001c04 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f003 031c 	and.w	r3, r3, #28
 8001c5e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	02db      	lsls	r3, r3, #11
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	019b      	lsls	r3, r3, #6
 8001c70:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c9c:	f7ff fa4e 	bl	800113c <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ca2:	e00d      	b.n	8001cc0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001ca4:	f7ff fa4a 	bl	800113c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb2:	d301      	bcc.n	8001cb8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e009      	b.n	8001ccc <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1ec      	bne.n	8001ca4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0d9      	b.n	8001e9c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	bf14      	ite	ne
 8001cf6:	2301      	movne	r3, #1
 8001cf8:	2300      	moveq	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf0c      	ite	eq
 8001d20:	2301      	moveq	r3, #1
 8001d22:	2300      	movne	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf14      	ite	ne
 8001d3c:	2301      	movne	r3, #1
 8001d3e:	2300      	moveq	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	bf0c      	ite	eq
 8001d56:	2301      	moveq	r3, #1
 8001d58:	2300      	movne	r3, #0
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bf14      	ite	ne
 8001d70:	2301      	movne	r3, #1
 8001d72:	2300      	moveq	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	461a      	mov	r2, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	bf0c      	ite	eq
 8001da6:	2301      	moveq	r3, #1
 8001da8:	2300      	movne	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	461a      	mov	r2, r3
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	bf0c      	ite	eq
 8001dc0:	2301      	moveq	r3, #1
 8001dc2:	2300      	movne	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	bf14      	ite	ne
 8001dda:	2301      	movne	r3, #1
 8001ddc:	2300      	moveq	r3, #0
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	bf14      	ite	ne
 8001e02:	2301      	movne	r3, #1
 8001e04:	2300      	moveq	r3, #0
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf14      	ite	ne
 8001e1c:	2301      	movne	r3, #1
 8001e1e:	2300      	moveq	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	461a      	mov	r2, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bf0c      	ite	eq
 8001e38:	2301      	moveq	r3, #1
 8001e3a:	2300      	movne	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	461a      	mov	r2, r3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	0c1b      	lsrs	r3, r3, #16
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf14      	ite	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	2300      	moveq	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	461a      	mov	r2, r3
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e00b      	b.n	8001ed4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d105      	bne.n	8001ed2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001ec6:	6839      	ldr	r1, [r7, #0]
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f883 	bl	8001fd4 <ETH_SetMACConfig>

    return HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e000      	b.n	8001ed4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
  }
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f023 031c 	bic.w	r3, r3, #28
 8001ef2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ef4:	f001 fa82 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 8001ef8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	4a1d      	ldr	r2, [pc, #116]	; (8001f74 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d908      	bls.n	8001f14 <HAL_ETH_SetMDIOClockRange+0x38>
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d804      	bhi.n	8001f14 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f043 0308 	orr.w	r3, r3, #8
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	e027      	b.n	8001f64 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	4a18      	ldr	r2, [pc, #96]	; (8001f78 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d908      	bls.n	8001f2e <HAL_ETH_SetMDIOClockRange+0x52>
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4a17      	ldr	r2, [pc, #92]	; (8001f7c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d204      	bcs.n	8001f2e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f043 030c 	orr.w	r3, r3, #12
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	e01a      	b.n	8001f64 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d303      	bcc.n	8001f3e <HAL_ETH_SetMDIOClockRange+0x62>
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	4a11      	ldr	r2, [pc, #68]	; (8001f80 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d911      	bls.n	8001f62 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	4a0f      	ldr	r2, [pc, #60]	; (8001f80 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d908      	bls.n	8001f58 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d804      	bhi.n	8001f58 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	e005      	b.n	8001f64 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f043 0310 	orr.w	r3, r3, #16
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	e000      	b.n	8001f64 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001f62:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	01312cff 	.word	0x01312cff
 8001f78:	02160ebf 	.word	0x02160ebf
 8001f7c:	03938700 	.word	0x03938700
 8001f80:	05f5e0ff 	.word	0x05f5e0ff
 8001f84:	08f0d17f 	.word	0x08f0d17f

08001f88 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fa6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001faa:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fb8:	2001      	movs	r0, #1
 8001fba:	f7ff f8cb 	bl	8001154 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fc8:	6193      	str	r3, [r2, #24]
}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4b51      	ldr	r3, [pc, #324]	; (8002130 <ETH_SetMACConfig+0x15c>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	7c1b      	ldrb	r3, [r3, #16]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d102      	bne.n	8001ffc <ETH_SetMACConfig+0x28>
 8001ff6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ffa:	e000      	b.n	8001ffe <ETH_SetMACConfig+0x2a>
 8001ffc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	7c5b      	ldrb	r3, [r3, #17]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <ETH_SetMACConfig+0x38>
 8002006:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800200a:	e000      	b.n	800200e <ETH_SetMACConfig+0x3a>
 800200c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800200e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002014:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	7fdb      	ldrb	r3, [r3, #31]
 800201a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800201c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002022:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	7f92      	ldrb	r2, [r2, #30]
 8002028:	2a00      	cmp	r2, #0
 800202a:	d102      	bne.n	8002032 <ETH_SetMACConfig+0x5e>
 800202c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002030:	e000      	b.n	8002034 <ETH_SetMACConfig+0x60>
 8002032:	2200      	movs	r2, #0
                        macconf->Speed |
 8002034:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	7f1b      	ldrb	r3, [r3, #28]
 800203a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800203c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002042:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	791b      	ldrb	r3, [r3, #4]
 8002048:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800204a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002052:	2a00      	cmp	r2, #0
 8002054:	d102      	bne.n	800205c <ETH_SetMACConfig+0x88>
 8002056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800205a:	e000      	b.n	800205e <ETH_SetMACConfig+0x8a>
 800205c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800205e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	7bdb      	ldrb	r3, [r3, #15]
 8002064:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002066:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800206c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002074:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002076:	4313      	orrs	r3, r2
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800208e:	2001      	movs	r0, #1
 8002090:	f7ff f860 	bl	8001154 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020aa:	4013      	ands	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80020ba:	2a00      	cmp	r2, #0
 80020bc:	d101      	bne.n	80020c2 <ETH_SetMACConfig+0xee>
 80020be:	2280      	movs	r2, #128	; 0x80
 80020c0:	e000      	b.n	80020c4 <ETH_SetMACConfig+0xf0>
 80020c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020c4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80020ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80020d2:	2a01      	cmp	r2, #1
 80020d4:	d101      	bne.n	80020da <ETH_SetMACConfig+0x106>
 80020d6:	2208      	movs	r2, #8
 80020d8:	e000      	b.n	80020dc <ETH_SetMACConfig+0x108>
 80020da:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80020dc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80020e4:	2a01      	cmp	r2, #1
 80020e6:	d101      	bne.n	80020ec <ETH_SetMACConfig+0x118>
 80020e8:	2204      	movs	r2, #4
 80020ea:	e000      	b.n	80020ee <ETH_SetMACConfig+0x11a>
 80020ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80020ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80020f6:	2a01      	cmp	r2, #1
 80020f8:	d101      	bne.n	80020fe <ETH_SetMACConfig+0x12a>
 80020fa:	2202      	movs	r2, #2
 80020fc:	e000      	b.n	8002100 <ETH_SetMACConfig+0x12c>
 80020fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002100:	4313      	orrs	r3, r2
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002118:	2001      	movs	r0, #1
 800211a:	f7ff f81b 	bl	8001154 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	619a      	str	r2, [r3, #24]
}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	ff20810f 	.word	0xff20810f

08002134 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4b3d      	ldr	r3, [pc, #244]	; (8002244 <ETH_SetDMAConfig+0x110>)
 800214e:	4013      	ands	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	7b1b      	ldrb	r3, [r3, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d102      	bne.n	8002160 <ETH_SetDMAConfig+0x2c>
 800215a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800215e:	e000      	b.n	8002162 <ETH_SetDMAConfig+0x2e>
 8002160:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	7b5b      	ldrb	r3, [r3, #13]
 8002166:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002168:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	7f52      	ldrb	r2, [r2, #29]
 800216e:	2a00      	cmp	r2, #0
 8002170:	d102      	bne.n	8002178 <ETH_SetDMAConfig+0x44>
 8002172:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002176:	e000      	b.n	800217a <ETH_SetDMAConfig+0x46>
 8002178:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800217a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	7b9b      	ldrb	r3, [r3, #14]
 8002180:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002182:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002188:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	7f1b      	ldrb	r3, [r3, #28]
 800218e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002190:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	7f9b      	ldrb	r3, [r3, #30]
 8002196:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002198:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800219e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021a6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021a8:	4313      	orrs	r3, r2
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b8:	461a      	mov	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021ca:	2001      	movs	r0, #1
 80021cc:	f7fe ffc2 	bl	8001154 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d8:	461a      	mov	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	791b      	ldrb	r3, [r3, #4]
 80021e2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021e8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80021ee:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80021f4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021fc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80021fe:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002206:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800220c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002216:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800221a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002228:	2001      	movs	r0, #1
 800222a:	f7fe ff93 	bl	8001154 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002236:	461a      	mov	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6013      	str	r3, [r2, #0]
}
 800223c:	bf00      	nop
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	f8de3f23 	.word	0xf8de3f23

08002248 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b0a6      	sub	sp, #152	; 0x98
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002250:	2301      	movs	r3, #1
 8002252:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002256:	2301      	movs	r3, #1
 8002258:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800225c:	2300      	movs	r3, #0
 800225e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002260:	2300      	movs	r3, #0
 8002262:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002266:	2301      	movs	r3, #1
 8002268:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002272:	2301      	movs	r3, #1
 8002274:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002284:	2300      	movs	r3, #0
 8002286:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002288:	2300      	movs	r3, #0
 800228a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800228e:	2300      	movs	r3, #0
 8002290:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002292:	2300      	movs	r3, #0
 8002294:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800229e:	2300      	movs	r3, #0
 80022a0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80022aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022ae:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80022b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80022bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022c0:	4619      	mov	r1, r3
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff fe86 	bl	8001fd4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80022c8:	2301      	movs	r3, #1
 80022ca:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80022cc:	2301      	movs	r3, #1
 80022ce:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80022d0:	2301      	movs	r3, #1
 80022d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80022d6:	2301      	movs	r3, #1
 80022d8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80022ea:	2300      	movs	r3, #0
 80022ec:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80022ee:	2301      	movs	r3, #1
 80022f0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80022f4:	2301      	movs	r3, #1
 80022f6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80022f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022fc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80022fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002302:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002308:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800230a:	2301      	movs	r3, #1
 800230c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002310:	2300      	movs	r3, #0
 8002312:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002314:	2300      	movs	r3, #0
 8002316:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002318:	f107 0308 	add.w	r3, r7, #8
 800231c:	4619      	mov	r1, r3
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff ff08 	bl	8002134 <ETH_SetDMAConfig>
}
 8002324:	bf00      	nop
 8002326:	3798      	adds	r7, #152	; 0x98
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3305      	adds	r3, #5
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	3204      	adds	r2, #4
 8002344:	7812      	ldrb	r2, [r2, #0]
 8002346:	4313      	orrs	r3, r2
 8002348:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <ETH_MACAddressConfig+0x68>)
 800234e:	4413      	add	r3, r2
 8002350:	461a      	mov	r2, r3
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3303      	adds	r3, #3
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	061a      	lsls	r2, r3, #24
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3302      	adds	r3, #2
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	041b      	lsls	r3, r3, #16
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3301      	adds	r3, #1
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	021b      	lsls	r3, r3, #8
 8002370:	4313      	orrs	r3, r2
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	7812      	ldrb	r2, [r2, #0]
 8002376:	4313      	orrs	r3, r2
 8002378:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <ETH_MACAddressConfig+0x6c>)
 800237e:	4413      	add	r3, r2
 8002380:	461a      	mov	r2, r3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	6013      	str	r3, [r2, #0]
}
 8002386:	bf00      	nop
 8002388:	371c      	adds	r7, #28
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40028040 	.word	0x40028040
 8002398:	40028044 	.word	0x40028044

0800239c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e03e      	b.n	8002428 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68d9      	ldr	r1, [r3, #12]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	440b      	add	r3, r1
 80023ba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2200      	movs	r2, #0
 80023c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2200      	movs	r2, #0
 80023d2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	3206      	adds	r2, #6
 80023dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d80c      	bhi.n	800240c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68d9      	ldr	r1, [r3, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	440b      	add	r3, r1
 8002404:	461a      	mov	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	e004      	b.n	8002416 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	461a      	mov	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	3301      	adds	r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d9bd      	bls.n	80023aa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002440:	611a      	str	r2, [r3, #16]
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800244e:	b480      	push	{r7}
 8002450:	b085      	sub	sp, #20
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	e046      	b.n	80024ea <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6919      	ldr	r1, [r3, #16]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	440b      	add	r3, r1
 800246c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2200      	movs	r2, #0
 8002478:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2200      	movs	r2, #0
 8002484:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2200      	movs	r2, #0
 800248a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2200      	movs	r2, #0
 8002490:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002498:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80024a0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80024ae:	68b9      	ldr	r1, [r7, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	3212      	adds	r2, #18
 80024b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d80c      	bhi.n	80024da <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6919      	ldr	r1, [r3, #16]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	440b      	add	r3, r1
 80024d2:	461a      	mov	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	60da      	str	r2, [r3, #12]
 80024d8:	e004      	b.n	80024e4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	461a      	mov	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	3301      	adds	r3, #1
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d9b5      	bls.n	800245c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800251a:	60da      	str	r2, [r3, #12]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002528:	b480      	push	{r7}
 800252a:	b08d      	sub	sp, #52	; 0x34
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3318      	adds	r3, #24
 8002538:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800254e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002552:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002566:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800256a:	d007      	beq.n	800257c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002570:	3304      	adds	r3, #4
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800257c:	2302      	movs	r3, #2
 800257e:	e103      	b.n	8002788 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	3301      	adds	r3, #1
 8002584:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002598:	f023 031f 	bic.w	r3, r3, #31
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	6852      	ldr	r2, [r2, #4]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d008      	beq.n	80025c4 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	431a      	orrs	r2, r3
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	431a      	orrs	r2, r3
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002606:	f3bf 8f5f 	dmb	sy
}
 800260a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002618:	e084      	b.n	8002724 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d006      	beq.n	800263a <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	e005      	b.n	8002646 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002648:	3301      	adds	r3, #1
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264e:	2b03      	cmp	r3, #3
 8002650:	d902      	bls.n	8002658 <ETH_Prepare_Tx_Descriptors+0x130>
 8002652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002654:	3b04      	subs	r3, #4
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800265c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002660:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800267a:	d007      	beq.n	800268c <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002680:	3304      	adds	r3, #4
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d029      	beq.n	80026e0 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002698:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800269a:	2300      	movs	r3, #0
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
 800269e:	e019      	b.n	80026d4 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80026a0:	f3bf 8f5f 	dmb	sy
}
 80026a4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80026b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b4:	3301      	adds	r3, #1
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d902      	bls.n	80026c4 <ETH_Prepare_Tx_Descriptors+0x19c>
 80026be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c0:	3b04      	subs	r3, #4
 80026c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026cc:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80026ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d0:	3301      	adds	r3, #1
 80026d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80026d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	429a      	cmp	r2, r3
 80026da:	d3e1      	bcc.n	80026a0 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80026dc:	2302      	movs	r3, #2
 80026de:	e053      	b.n	8002788 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	3301      	adds	r3, #1
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80026fe:	f023 031f 	bic.w	r3, r3, #31
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	6852      	ldr	r2, [r2, #4]
 8002706:	431a      	orrs	r2, r3
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	3301      	adds	r3, #1
 8002710:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002712:	f3bf 8f5f 	dmb	sy
}
 8002716:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	f47f af76 	bne.w	800261a <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d006      	beq.n	8002742 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	e005      	b.n	800274e <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800275e:	6979      	ldr	r1, [r7, #20]
 8002760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002762:	3304      	adds	r3, #4
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800276e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002770:	b672      	cpsid	i
}
 8002772:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	4413      	add	r3, r2
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002782:	b662      	cpsie	i
}
 8002784:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3734      	adds	r7, #52	; 0x34
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002794:	b480      	push	{r7}
 8002796:	b089      	sub	sp, #36	; 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	e16b      	b.n	8002a88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027b0:	2201      	movs	r2, #1
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4013      	ands	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	f040 815a 	bne.w	8002a82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d005      	beq.n	80027e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d130      	bne.n	8002848 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	2203      	movs	r2, #3
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800281c:	2201      	movs	r2, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	f003 0201 	and.w	r2, r3, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b03      	cmp	r3, #3
 8002852:	d017      	beq.n	8002884 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	2203      	movs	r2, #3
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d123      	bne.n	80028d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	08da      	lsrs	r2, r3, #3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3208      	adds	r2, #8
 8002898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	220f      	movs	r2, #15
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	08da      	lsrs	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3208      	adds	r2, #8
 80028d2:	69b9      	ldr	r1, [r7, #24]
 80028d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2203      	movs	r2, #3
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 0203 	and.w	r2, r3, #3
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 80b4 	beq.w	8002a82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	4b60      	ldr	r3, [pc, #384]	; (8002aa0 <HAL_GPIO_Init+0x30c>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	4a5f      	ldr	r2, [pc, #380]	; (8002aa0 <HAL_GPIO_Init+0x30c>)
 8002924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002928:	6453      	str	r3, [r2, #68]	; 0x44
 800292a:	4b5d      	ldr	r3, [pc, #372]	; (8002aa0 <HAL_GPIO_Init+0x30c>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002936:	4a5b      	ldr	r2, [pc, #364]	; (8002aa4 <HAL_GPIO_Init+0x310>)
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	3302      	adds	r3, #2
 800293e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	220f      	movs	r2, #15
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4013      	ands	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a52      	ldr	r2, [pc, #328]	; (8002aa8 <HAL_GPIO_Init+0x314>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d02b      	beq.n	80029ba <HAL_GPIO_Init+0x226>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a51      	ldr	r2, [pc, #324]	; (8002aac <HAL_GPIO_Init+0x318>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d025      	beq.n	80029b6 <HAL_GPIO_Init+0x222>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a50      	ldr	r2, [pc, #320]	; (8002ab0 <HAL_GPIO_Init+0x31c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d01f      	beq.n	80029b2 <HAL_GPIO_Init+0x21e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a4f      	ldr	r2, [pc, #316]	; (8002ab4 <HAL_GPIO_Init+0x320>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d019      	beq.n	80029ae <HAL_GPIO_Init+0x21a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a4e      	ldr	r2, [pc, #312]	; (8002ab8 <HAL_GPIO_Init+0x324>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d013      	beq.n	80029aa <HAL_GPIO_Init+0x216>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a4d      	ldr	r2, [pc, #308]	; (8002abc <HAL_GPIO_Init+0x328>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00d      	beq.n	80029a6 <HAL_GPIO_Init+0x212>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4c      	ldr	r2, [pc, #304]	; (8002ac0 <HAL_GPIO_Init+0x32c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d007      	beq.n	80029a2 <HAL_GPIO_Init+0x20e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a4b      	ldr	r2, [pc, #300]	; (8002ac4 <HAL_GPIO_Init+0x330>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d101      	bne.n	800299e <HAL_GPIO_Init+0x20a>
 800299a:	2307      	movs	r3, #7
 800299c:	e00e      	b.n	80029bc <HAL_GPIO_Init+0x228>
 800299e:	2308      	movs	r3, #8
 80029a0:	e00c      	b.n	80029bc <HAL_GPIO_Init+0x228>
 80029a2:	2306      	movs	r3, #6
 80029a4:	e00a      	b.n	80029bc <HAL_GPIO_Init+0x228>
 80029a6:	2305      	movs	r3, #5
 80029a8:	e008      	b.n	80029bc <HAL_GPIO_Init+0x228>
 80029aa:	2304      	movs	r3, #4
 80029ac:	e006      	b.n	80029bc <HAL_GPIO_Init+0x228>
 80029ae:	2303      	movs	r3, #3
 80029b0:	e004      	b.n	80029bc <HAL_GPIO_Init+0x228>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e002      	b.n	80029bc <HAL_GPIO_Init+0x228>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_GPIO_Init+0x228>
 80029ba:	2300      	movs	r3, #0
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	f002 0203 	and.w	r2, r2, #3
 80029c2:	0092      	lsls	r2, r2, #2
 80029c4:	4093      	lsls	r3, r2
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029cc:	4935      	ldr	r1, [pc, #212]	; (8002aa4 <HAL_GPIO_Init+0x310>)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	3302      	adds	r3, #2
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029da:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <HAL_GPIO_Init+0x334>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029fe:	4a32      	ldr	r2, [pc, #200]	; (8002ac8 <HAL_GPIO_Init+0x334>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a04:	4b30      	ldr	r3, [pc, #192]	; (8002ac8 <HAL_GPIO_Init+0x334>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a28:	4a27      	ldr	r2, [pc, #156]	; (8002ac8 <HAL_GPIO_Init+0x334>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a2e:	4b26      	ldr	r3, [pc, #152]	; (8002ac8 <HAL_GPIO_Init+0x334>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a52:	4a1d      	ldr	r2, [pc, #116]	; (8002ac8 <HAL_GPIO_Init+0x334>)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a58:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <HAL_GPIO_Init+0x334>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a7c:	4a12      	ldr	r2, [pc, #72]	; (8002ac8 <HAL_GPIO_Init+0x334>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3301      	adds	r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b0f      	cmp	r3, #15
 8002a8c:	f67f ae90 	bls.w	80027b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	3724      	adds	r7, #36	; 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40013800 	.word	0x40013800
 8002aa8:	40020000 	.word	0x40020000
 8002aac:	40020400 	.word	0x40020400
 8002ab0:	40020800 	.word	0x40020800
 8002ab4:	40020c00 	.word	0x40020c00
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40021400 	.word	0x40021400
 8002ac0:	40021800 	.word	0x40021800
 8002ac4:	40021c00 	.word	0x40021c00
 8002ac8:	40013c00 	.word	0x40013c00

08002acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	807b      	strh	r3, [r7, #2]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002adc:	787b      	ldrb	r3, [r7, #1]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ae2:	887a      	ldrh	r2, [r7, #2]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ae8:	e003      	b.n	8002af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aea:	887b      	ldrh	r3, [r7, #2]
 8002aec:	041a      	lsls	r2, r3, #16
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	619a      	str	r2, [r3, #24]
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b085      	sub	sp, #20
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	460b      	mov	r3, r1
 8002b08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b10:	887a      	ldrh	r2, [r7, #2]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4013      	ands	r3, r2
 8002b16:	041a      	lsls	r2, r3, #16
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	43d9      	mvns	r1, r3
 8002b1c:	887b      	ldrh	r3, [r7, #2]
 8002b1e:	400b      	ands	r3, r1
 8002b20:	431a      	orrs	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	619a      	str	r2, [r3, #24]
}
 8002b26:	bf00      	nop
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e267      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d075      	beq.n	8002c3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b52:	4b88      	ldr	r3, [pc, #544]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d00c      	beq.n	8002b78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b5e:	4b85      	ldr	r3, [pc, #532]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d112      	bne.n	8002b90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b6a:	4b82      	ldr	r3, [pc, #520]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b76:	d10b      	bne.n	8002b90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b78:	4b7e      	ldr	r3, [pc, #504]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d05b      	beq.n	8002c3c <HAL_RCC_OscConfig+0x108>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d157      	bne.n	8002c3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e242      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b98:	d106      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x74>
 8002b9a:	4b76      	ldr	r3, [pc, #472]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a75      	ldr	r2, [pc, #468]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e01d      	b.n	8002be4 <HAL_RCC_OscConfig+0xb0>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x98>
 8002bb2:	4b70      	ldr	r3, [pc, #448]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a6f      	ldr	r2, [pc, #444]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	4b6d      	ldr	r3, [pc, #436]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a6c      	ldr	r2, [pc, #432]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	e00b      	b.n	8002be4 <HAL_RCC_OscConfig+0xb0>
 8002bcc:	4b69      	ldr	r3, [pc, #420]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a68      	ldr	r2, [pc, #416]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	4b66      	ldr	r3, [pc, #408]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a65      	ldr	r2, [pc, #404]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d013      	beq.n	8002c14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7fe faa6 	bl	800113c <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf4:	f7fe faa2 	bl	800113c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	; 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e207      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c06:	4b5b      	ldr	r3, [pc, #364]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0xc0>
 8002c12:	e014      	b.n	8002c3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe fa92 	bl	800113c <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7fe fa8e 	bl	800113c <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e1f3      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2e:	4b51      	ldr	r3, [pc, #324]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0xe8>
 8002c3a:	e000      	b.n	8002c3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d063      	beq.n	8002d12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c4a:	4b4a      	ldr	r3, [pc, #296]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00b      	beq.n	8002c6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c56:	4b47      	ldr	r3, [pc, #284]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d11c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c62:	4b44      	ldr	r3, [pc, #272]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d116      	bne.n	8002c9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6e:	4b41      	ldr	r3, [pc, #260]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d005      	beq.n	8002c86 <HAL_RCC_OscConfig+0x152>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d001      	beq.n	8002c86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e1c7      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c86:	4b3b      	ldr	r3, [pc, #236]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4937      	ldr	r1, [pc, #220]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9a:	e03a      	b.n	8002d12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d020      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca4:	4b34      	ldr	r3, [pc, #208]	; (8002d78 <HAL_RCC_OscConfig+0x244>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002caa:	f7fe fa47 	bl	800113c <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb2:	f7fe fa43 	bl	800113c <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e1a8      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc4:	4b2b      	ldr	r3, [pc, #172]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd0:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4925      	ldr	r1, [pc, #148]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	600b      	str	r3, [r1, #0]
 8002ce4:	e015      	b.n	8002d12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce6:	4b24      	ldr	r3, [pc, #144]	; (8002d78 <HAL_RCC_OscConfig+0x244>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fe fa26 	bl	800113c <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf4:	f7fe fa22 	bl	800113c <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e187      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d06:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d036      	beq.n	8002d8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d016      	beq.n	8002d54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d26:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <HAL_RCC_OscConfig+0x248>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2c:	f7fe fa06 	bl	800113c <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d34:	f7fe fa02 	bl	800113c <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e167      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d46:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x200>
 8002d52:	e01b      	b.n	8002d8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d54:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <HAL_RCC_OscConfig+0x248>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5a:	f7fe f9ef 	bl	800113c <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d60:	e00e      	b.n	8002d80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d62:	f7fe f9eb 	bl	800113c <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d907      	bls.n	8002d80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e150      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
 8002d74:	40023800 	.word	0x40023800
 8002d78:	42470000 	.word	0x42470000
 8002d7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d80:	4b88      	ldr	r3, [pc, #544]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1ea      	bne.n	8002d62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 8097 	beq.w	8002ec8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9e:	4b81      	ldr	r3, [pc, #516]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10f      	bne.n	8002dca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	4b7d      	ldr	r3, [pc, #500]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	4a7c      	ldr	r2, [pc, #496]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dba:	4b7a      	ldr	r3, [pc, #488]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dca:	4b77      	ldr	r3, [pc, #476]	; (8002fa8 <HAL_RCC_OscConfig+0x474>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d118      	bne.n	8002e08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd6:	4b74      	ldr	r3, [pc, #464]	; (8002fa8 <HAL_RCC_OscConfig+0x474>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a73      	ldr	r2, [pc, #460]	; (8002fa8 <HAL_RCC_OscConfig+0x474>)
 8002ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de2:	f7fe f9ab 	bl	800113c <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dea:	f7fe f9a7 	bl	800113c <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e10c      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfc:	4b6a      	ldr	r3, [pc, #424]	; (8002fa8 <HAL_RCC_OscConfig+0x474>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCC_OscConfig+0x2ea>
 8002e10:	4b64      	ldr	r3, [pc, #400]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	4a63      	ldr	r2, [pc, #396]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1c:	e01c      	b.n	8002e58 <HAL_RCC_OscConfig+0x324>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b05      	cmp	r3, #5
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCC_OscConfig+0x30c>
 8002e26:	4b5f      	ldr	r3, [pc, #380]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	4a5e      	ldr	r2, [pc, #376]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	f043 0304 	orr.w	r3, r3, #4
 8002e30:	6713      	str	r3, [r2, #112]	; 0x70
 8002e32:	4b5c      	ldr	r3, [pc, #368]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	4a5b      	ldr	r2, [pc, #364]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3e:	e00b      	b.n	8002e58 <HAL_RCC_OscConfig+0x324>
 8002e40:	4b58      	ldr	r3, [pc, #352]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	4a57      	ldr	r2, [pc, #348]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e46:	f023 0301 	bic.w	r3, r3, #1
 8002e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4c:	4b55      	ldr	r3, [pc, #340]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e50:	4a54      	ldr	r2, [pc, #336]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e52:	f023 0304 	bic.w	r3, r3, #4
 8002e56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d015      	beq.n	8002e8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e60:	f7fe f96c 	bl	800113c <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e66:	e00a      	b.n	8002e7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e68:	f7fe f968 	bl	800113c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e0cb      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7e:	4b49      	ldr	r3, [pc, #292]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0ee      	beq.n	8002e68 <HAL_RCC_OscConfig+0x334>
 8002e8a:	e014      	b.n	8002eb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8c:	f7fe f956 	bl	800113c <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e92:	e00a      	b.n	8002eaa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e94:	f7fe f952 	bl	800113c <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e0b5      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eaa:	4b3e      	ldr	r3, [pc, #248]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1ee      	bne.n	8002e94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eb6:	7dfb      	ldrb	r3, [r7, #23]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d105      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ebc:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	4a38      	ldr	r2, [pc, #224]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80a1 	beq.w	8003014 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ed2:	4b34      	ldr	r3, [pc, #208]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d05c      	beq.n	8002f98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d141      	bne.n	8002f6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee6:	4b31      	ldr	r3, [pc, #196]	; (8002fac <HAL_RCC_OscConfig+0x478>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe f926 	bl	800113c <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe f922 	bl	800113c <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e087      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f06:	4b27      	ldr	r3, [pc, #156]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69da      	ldr	r2, [r3, #28]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	019b      	lsls	r3, r3, #6
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	085b      	lsrs	r3, r3, #1
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	041b      	lsls	r3, r3, #16
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	061b      	lsls	r3, r3, #24
 8002f36:	491b      	ldr	r1, [pc, #108]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <HAL_RCC_OscConfig+0x478>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f42:	f7fe f8fb 	bl	800113c <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f4a:	f7fe f8f7 	bl	800113c <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e05c      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5c:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCC_OscConfig+0x416>
 8002f68:	e054      	b.n	8003014 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6a:	4b10      	ldr	r3, [pc, #64]	; (8002fac <HAL_RCC_OscConfig+0x478>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7fe f8e4 	bl	800113c <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f78:	f7fe f8e0 	bl	800113c <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e045      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x444>
 8002f96:	e03d      	b.n	8003014 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d107      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e038      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40007000 	.word	0x40007000
 8002fac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fb0:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <HAL_RCC_OscConfig+0x4ec>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d028      	beq.n	8003010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d121      	bne.n	8003010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d11a      	bne.n	8003010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fe6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d111      	bne.n	8003010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff6:	085b      	lsrs	r3, r3, #1
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d107      	bne.n	8003010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800

08003024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0cc      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003038:	4b68      	ldr	r3, [pc, #416]	; (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d90c      	bls.n	8003060 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b65      	ldr	r3, [pc, #404]	; (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b63      	ldr	r3, [pc, #396]	; (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0b8      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d020      	beq.n	80030ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003078:	4b59      	ldr	r3, [pc, #356]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	4a58      	ldr	r2, [pc, #352]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003082:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003090:	4b53      	ldr	r3, [pc, #332]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	4a52      	ldr	r2, [pc, #328]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800309a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800309c:	4b50      	ldr	r3, [pc, #320]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	494d      	ldr	r1, [pc, #308]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d044      	beq.n	8003144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d107      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c2:	4b47      	ldr	r3, [pc, #284]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d119      	bne.n	8003102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e07f      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d003      	beq.n	80030e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d107      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e2:	4b3f      	ldr	r3, [pc, #252]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e06f      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f2:	4b3b      	ldr	r3, [pc, #236]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e067      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003102:	4b37      	ldr	r3, [pc, #220]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f023 0203 	bic.w	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	4934      	ldr	r1, [pc, #208]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	4313      	orrs	r3, r2
 8003112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003114:	f7fe f812 	bl	800113c <HAL_GetTick>
 8003118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311a:	e00a      	b.n	8003132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311c:	f7fe f80e 	bl	800113c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	; 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e04f      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 020c 	and.w	r2, r3, #12
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	429a      	cmp	r2, r3
 8003142:	d1eb      	bne.n	800311c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003144:	4b25      	ldr	r3, [pc, #148]	; (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d20c      	bcs.n	800316c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b22      	ldr	r3, [pc, #136]	; (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315a:	4b20      	ldr	r3, [pc, #128]	; (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d001      	beq.n	800316c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e032      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4916      	ldr	r1, [pc, #88]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	4313      	orrs	r3, r2
 8003188:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003196:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	490e      	ldr	r1, [pc, #56]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031aa:	f000 f821 	bl	80031f0 <HAL_RCC_GetSysClockFreq>
 80031ae:	4602      	mov	r2, r0
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	091b      	lsrs	r3, r3, #4
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	490a      	ldr	r1, [pc, #40]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 80031bc:	5ccb      	ldrb	r3, [r1, r3]
 80031be:	fa22 f303 	lsr.w	r3, r2, r3
 80031c2:	4a09      	ldr	r2, [pc, #36]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031c6:	4b09      	ldr	r3, [pc, #36]	; (80031ec <HAL_RCC_ClockConfig+0x1c8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd ff72 	bl	80010b4 <HAL_InitTick>

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40023c00 	.word	0x40023c00
 80031e0:	40023800 	.word	0x40023800
 80031e4:	08012c3c 	.word	0x08012c3c
 80031e8:	20000000 	.word	0x20000000
 80031ec:	20000004 	.word	0x20000004

080031f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f4:	b094      	sub	sp, #80	; 0x50
 80031f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	647b      	str	r3, [r7, #68]	; 0x44
 80031fc:	2300      	movs	r3, #0
 80031fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003200:	2300      	movs	r3, #0
 8003202:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003208:	4b79      	ldr	r3, [pc, #484]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b08      	cmp	r3, #8
 8003212:	d00d      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0x40>
 8003214:	2b08      	cmp	r3, #8
 8003216:	f200 80e1 	bhi.w	80033dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_RCC_GetSysClockFreq+0x34>
 800321e:	2b04      	cmp	r3, #4
 8003220:	d003      	beq.n	800322a <HAL_RCC_GetSysClockFreq+0x3a>
 8003222:	e0db      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003224:	4b73      	ldr	r3, [pc, #460]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003226:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003228:	e0db      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800322a:	4b73      	ldr	r3, [pc, #460]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800322c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800322e:	e0d8      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003230:	4b6f      	ldr	r3, [pc, #444]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003238:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800323a:	4b6d      	ldr	r3, [pc, #436]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d063      	beq.n	800330e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003246:	4b6a      	ldr	r3, [pc, #424]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	099b      	lsrs	r3, r3, #6
 800324c:	2200      	movs	r2, #0
 800324e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003250:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003258:	633b      	str	r3, [r7, #48]	; 0x30
 800325a:	2300      	movs	r3, #0
 800325c:	637b      	str	r3, [r7, #52]	; 0x34
 800325e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003262:	4622      	mov	r2, r4
 8003264:	462b      	mov	r3, r5
 8003266:	f04f 0000 	mov.w	r0, #0
 800326a:	f04f 0100 	mov.w	r1, #0
 800326e:	0159      	lsls	r1, r3, #5
 8003270:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003274:	0150      	lsls	r0, r2, #5
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	4621      	mov	r1, r4
 800327c:	1a51      	subs	r1, r2, r1
 800327e:	6139      	str	r1, [r7, #16]
 8003280:	4629      	mov	r1, r5
 8003282:	eb63 0301 	sbc.w	r3, r3, r1
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003294:	4659      	mov	r1, fp
 8003296:	018b      	lsls	r3, r1, #6
 8003298:	4651      	mov	r1, sl
 800329a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800329e:	4651      	mov	r1, sl
 80032a0:	018a      	lsls	r2, r1, #6
 80032a2:	4651      	mov	r1, sl
 80032a4:	ebb2 0801 	subs.w	r8, r2, r1
 80032a8:	4659      	mov	r1, fp
 80032aa:	eb63 0901 	sbc.w	r9, r3, r1
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032c2:	4690      	mov	r8, r2
 80032c4:	4699      	mov	r9, r3
 80032c6:	4623      	mov	r3, r4
 80032c8:	eb18 0303 	adds.w	r3, r8, r3
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	462b      	mov	r3, r5
 80032d0:	eb49 0303 	adc.w	r3, r9, r3
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032e2:	4629      	mov	r1, r5
 80032e4:	024b      	lsls	r3, r1, #9
 80032e6:	4621      	mov	r1, r4
 80032e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032ec:	4621      	mov	r1, r4
 80032ee:	024a      	lsls	r2, r1, #9
 80032f0:	4610      	mov	r0, r2
 80032f2:	4619      	mov	r1, r3
 80032f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032f6:	2200      	movs	r2, #0
 80032f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003300:	f7fc ffb6 	bl	8000270 <__aeabi_uldivmod>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4613      	mov	r3, r2
 800330a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800330c:	e058      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800330e:	4b38      	ldr	r3, [pc, #224]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	099b      	lsrs	r3, r3, #6
 8003314:	2200      	movs	r2, #0
 8003316:	4618      	mov	r0, r3
 8003318:	4611      	mov	r1, r2
 800331a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800331e:	623b      	str	r3, [r7, #32]
 8003320:	2300      	movs	r3, #0
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
 8003324:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003328:	4642      	mov	r2, r8
 800332a:	464b      	mov	r3, r9
 800332c:	f04f 0000 	mov.w	r0, #0
 8003330:	f04f 0100 	mov.w	r1, #0
 8003334:	0159      	lsls	r1, r3, #5
 8003336:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800333a:	0150      	lsls	r0, r2, #5
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4641      	mov	r1, r8
 8003342:	ebb2 0a01 	subs.w	sl, r2, r1
 8003346:	4649      	mov	r1, r9
 8003348:	eb63 0b01 	sbc.w	fp, r3, r1
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003358:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800335c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003360:	ebb2 040a 	subs.w	r4, r2, sl
 8003364:	eb63 050b 	sbc.w	r5, r3, fp
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	00eb      	lsls	r3, r5, #3
 8003372:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003376:	00e2      	lsls	r2, r4, #3
 8003378:	4614      	mov	r4, r2
 800337a:	461d      	mov	r5, r3
 800337c:	4643      	mov	r3, r8
 800337e:	18e3      	adds	r3, r4, r3
 8003380:	603b      	str	r3, [r7, #0]
 8003382:	464b      	mov	r3, r9
 8003384:	eb45 0303 	adc.w	r3, r5, r3
 8003388:	607b      	str	r3, [r7, #4]
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003396:	4629      	mov	r1, r5
 8003398:	028b      	lsls	r3, r1, #10
 800339a:	4621      	mov	r1, r4
 800339c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033a0:	4621      	mov	r1, r4
 80033a2:	028a      	lsls	r2, r1, #10
 80033a4:	4610      	mov	r0, r2
 80033a6:	4619      	mov	r1, r3
 80033a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033aa:	2200      	movs	r2, #0
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	61fa      	str	r2, [r7, #28]
 80033b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033b4:	f7fc ff5c 	bl	8000270 <__aeabi_uldivmod>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4613      	mov	r3, r2
 80033be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	0c1b      	lsrs	r3, r3, #16
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	3301      	adds	r3, #1
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80033d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033da:	e002      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80033de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3750      	adds	r7, #80	; 0x50
 80033e8:	46bd      	mov	sp, r7
 80033ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800
 80033f4:	00f42400 	.word	0x00f42400
 80033f8:	007a1200 	.word	0x007a1200

080033fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003400:	4b03      	ldr	r3, [pc, #12]	; (8003410 <HAL_RCC_GetHCLKFreq+0x14>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	20000000 	.word	0x20000000

08003414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e041      	b.n	80034aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fd fb4c 	bl	8000ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3304      	adds	r3, #4
 8003450:	4619      	mov	r1, r3
 8003452:	4610      	mov	r0, r2
 8003454:	f000 fa24 	bl	80038a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d122      	bne.n	800350e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d11b      	bne.n	800350e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f06f 0202 	mvn.w	r2, #2
 80034de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f9b5 	bl	8003864 <HAL_TIM_IC_CaptureCallback>
 80034fa:	e005      	b.n	8003508 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f9a7 	bl	8003850 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f9b8 	bl	8003878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b04      	cmp	r3, #4
 800351a:	d122      	bne.n	8003562 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b04      	cmp	r3, #4
 8003528:	d11b      	bne.n	8003562 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f06f 0204 	mvn.w	r2, #4
 8003532:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f98b 	bl	8003864 <HAL_TIM_IC_CaptureCallback>
 800354e:	e005      	b.n	800355c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f97d 	bl	8003850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f98e 	bl	8003878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b08      	cmp	r3, #8
 800356e:	d122      	bne.n	80035b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b08      	cmp	r3, #8
 800357c:	d11b      	bne.n	80035b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f06f 0208 	mvn.w	r2, #8
 8003586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2204      	movs	r2, #4
 800358c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f961 	bl	8003864 <HAL_TIM_IC_CaptureCallback>
 80035a2:	e005      	b.n	80035b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f953 	bl	8003850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f964 	bl	8003878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b10      	cmp	r3, #16
 80035c2:	d122      	bne.n	800360a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	2b10      	cmp	r3, #16
 80035d0:	d11b      	bne.n	800360a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f06f 0210 	mvn.w	r2, #16
 80035da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2208      	movs	r2, #8
 80035e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f937 	bl	8003864 <HAL_TIM_IC_CaptureCallback>
 80035f6:	e005      	b.n	8003604 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f929 	bl	8003850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f93a 	bl	8003878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	d10e      	bne.n	8003636 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b01      	cmp	r3, #1
 8003624:	d107      	bne.n	8003636 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f06f 0201 	mvn.w	r2, #1
 800362e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7fc ffd1 	bl	80005d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003640:	2b80      	cmp	r3, #128	; 0x80
 8003642:	d10e      	bne.n	8003662 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364e:	2b80      	cmp	r3, #128	; 0x80
 8003650:	d107      	bne.n	8003662 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800365a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fadf 	bl	8003c20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366c:	2b40      	cmp	r3, #64	; 0x40
 800366e:	d10e      	bne.n	800368e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367a:	2b40      	cmp	r3, #64	; 0x40
 800367c:	d107      	bne.n	800368e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f8ff 	bl	800388c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b20      	cmp	r3, #32
 800369a:	d10e      	bne.n	80036ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b20      	cmp	r3, #32
 80036a8:	d107      	bne.n	80036ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f06f 0220 	mvn.w	r2, #32
 80036b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 faa9 	bl	8003c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_TIM_ConfigClockSource+0x1c>
 80036da:	2302      	movs	r3, #2
 80036dc:	e0b4      	b.n	8003848 <HAL_TIM_ConfigClockSource+0x186>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2202      	movs	r2, #2
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003704:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003716:	d03e      	beq.n	8003796 <HAL_TIM_ConfigClockSource+0xd4>
 8003718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800371c:	f200 8087 	bhi.w	800382e <HAL_TIM_ConfigClockSource+0x16c>
 8003720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003724:	f000 8086 	beq.w	8003834 <HAL_TIM_ConfigClockSource+0x172>
 8003728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800372c:	d87f      	bhi.n	800382e <HAL_TIM_ConfigClockSource+0x16c>
 800372e:	2b70      	cmp	r3, #112	; 0x70
 8003730:	d01a      	beq.n	8003768 <HAL_TIM_ConfigClockSource+0xa6>
 8003732:	2b70      	cmp	r3, #112	; 0x70
 8003734:	d87b      	bhi.n	800382e <HAL_TIM_ConfigClockSource+0x16c>
 8003736:	2b60      	cmp	r3, #96	; 0x60
 8003738:	d050      	beq.n	80037dc <HAL_TIM_ConfigClockSource+0x11a>
 800373a:	2b60      	cmp	r3, #96	; 0x60
 800373c:	d877      	bhi.n	800382e <HAL_TIM_ConfigClockSource+0x16c>
 800373e:	2b50      	cmp	r3, #80	; 0x50
 8003740:	d03c      	beq.n	80037bc <HAL_TIM_ConfigClockSource+0xfa>
 8003742:	2b50      	cmp	r3, #80	; 0x50
 8003744:	d873      	bhi.n	800382e <HAL_TIM_ConfigClockSource+0x16c>
 8003746:	2b40      	cmp	r3, #64	; 0x40
 8003748:	d058      	beq.n	80037fc <HAL_TIM_ConfigClockSource+0x13a>
 800374a:	2b40      	cmp	r3, #64	; 0x40
 800374c:	d86f      	bhi.n	800382e <HAL_TIM_ConfigClockSource+0x16c>
 800374e:	2b30      	cmp	r3, #48	; 0x30
 8003750:	d064      	beq.n	800381c <HAL_TIM_ConfigClockSource+0x15a>
 8003752:	2b30      	cmp	r3, #48	; 0x30
 8003754:	d86b      	bhi.n	800382e <HAL_TIM_ConfigClockSource+0x16c>
 8003756:	2b20      	cmp	r3, #32
 8003758:	d060      	beq.n	800381c <HAL_TIM_ConfigClockSource+0x15a>
 800375a:	2b20      	cmp	r3, #32
 800375c:	d867      	bhi.n	800382e <HAL_TIM_ConfigClockSource+0x16c>
 800375e:	2b00      	cmp	r3, #0
 8003760:	d05c      	beq.n	800381c <HAL_TIM_ConfigClockSource+0x15a>
 8003762:	2b10      	cmp	r3, #16
 8003764:	d05a      	beq.n	800381c <HAL_TIM_ConfigClockSource+0x15a>
 8003766:	e062      	b.n	800382e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	6899      	ldr	r1, [r3, #8]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f000 f9ac 	bl	8003ad4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800378a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	609a      	str	r2, [r3, #8]
      break;
 8003794:	e04f      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	6899      	ldr	r1, [r3, #8]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f000 f995 	bl	8003ad4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037b8:	609a      	str	r2, [r3, #8]
      break;
 80037ba:	e03c      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	6859      	ldr	r1, [r3, #4]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	461a      	mov	r2, r3
 80037ca:	f000 f909 	bl	80039e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2150      	movs	r1, #80	; 0x50
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 f962 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 80037da:	e02c      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	6859      	ldr	r1, [r3, #4]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	461a      	mov	r2, r3
 80037ea:	f000 f928 	bl	8003a3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2160      	movs	r1, #96	; 0x60
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 f952 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 80037fa:	e01c      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	6859      	ldr	r1, [r3, #4]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	461a      	mov	r2, r3
 800380a:	f000 f8e9 	bl	80039e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2140      	movs	r1, #64	; 0x40
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f942 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 800381a:	e00c      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4619      	mov	r1, r3
 8003826:	4610      	mov	r0, r2
 8003828:	f000 f939 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 800382c:	e003      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
      break;
 8003832:	e000      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003834:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003846:	7bfb      	ldrb	r3, [r7, #15]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a40      	ldr	r2, [pc, #256]	; (80039b4 <TIM_Base_SetConfig+0x114>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d013      	beq.n	80038e0 <TIM_Base_SetConfig+0x40>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038be:	d00f      	beq.n	80038e0 <TIM_Base_SetConfig+0x40>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a3d      	ldr	r2, [pc, #244]	; (80039b8 <TIM_Base_SetConfig+0x118>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00b      	beq.n	80038e0 <TIM_Base_SetConfig+0x40>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a3c      	ldr	r2, [pc, #240]	; (80039bc <TIM_Base_SetConfig+0x11c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d007      	beq.n	80038e0 <TIM_Base_SetConfig+0x40>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a3b      	ldr	r2, [pc, #236]	; (80039c0 <TIM_Base_SetConfig+0x120>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d003      	beq.n	80038e0 <TIM_Base_SetConfig+0x40>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a3a      	ldr	r2, [pc, #232]	; (80039c4 <TIM_Base_SetConfig+0x124>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d108      	bne.n	80038f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a2f      	ldr	r2, [pc, #188]	; (80039b4 <TIM_Base_SetConfig+0x114>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d02b      	beq.n	8003952 <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003900:	d027      	beq.n	8003952 <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a2c      	ldr	r2, [pc, #176]	; (80039b8 <TIM_Base_SetConfig+0x118>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d023      	beq.n	8003952 <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a2b      	ldr	r2, [pc, #172]	; (80039bc <TIM_Base_SetConfig+0x11c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d01f      	beq.n	8003952 <TIM_Base_SetConfig+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a2a      	ldr	r2, [pc, #168]	; (80039c0 <TIM_Base_SetConfig+0x120>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d01b      	beq.n	8003952 <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a29      	ldr	r2, [pc, #164]	; (80039c4 <TIM_Base_SetConfig+0x124>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d017      	beq.n	8003952 <TIM_Base_SetConfig+0xb2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a28      	ldr	r2, [pc, #160]	; (80039c8 <TIM_Base_SetConfig+0x128>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d013      	beq.n	8003952 <TIM_Base_SetConfig+0xb2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a27      	ldr	r2, [pc, #156]	; (80039cc <TIM_Base_SetConfig+0x12c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00f      	beq.n	8003952 <TIM_Base_SetConfig+0xb2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a26      	ldr	r2, [pc, #152]	; (80039d0 <TIM_Base_SetConfig+0x130>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00b      	beq.n	8003952 <TIM_Base_SetConfig+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a25      	ldr	r2, [pc, #148]	; (80039d4 <TIM_Base_SetConfig+0x134>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d007      	beq.n	8003952 <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a24      	ldr	r2, [pc, #144]	; (80039d8 <TIM_Base_SetConfig+0x138>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d003      	beq.n	8003952 <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a23      	ldr	r2, [pc, #140]	; (80039dc <TIM_Base_SetConfig+0x13c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d108      	bne.n	8003964 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	4313      	orrs	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	4313      	orrs	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <TIM_Base_SetConfig+0x114>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d003      	beq.n	8003998 <TIM_Base_SetConfig+0xf8>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a0c      	ldr	r2, [pc, #48]	; (80039c4 <TIM_Base_SetConfig+0x124>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d103      	bne.n	80039a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	615a      	str	r2, [r3, #20]
}
 80039a6:	bf00      	nop
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40010000 	.word	0x40010000
 80039b8:	40000400 	.word	0x40000400
 80039bc:	40000800 	.word	0x40000800
 80039c0:	40000c00 	.word	0x40000c00
 80039c4:	40010400 	.word	0x40010400
 80039c8:	40014000 	.word	0x40014000
 80039cc:	40014400 	.word	0x40014400
 80039d0:	40014800 	.word	0x40014800
 80039d4:	40001800 	.word	0x40001800
 80039d8:	40001c00 	.word	0x40001c00
 80039dc:	40002000 	.word	0x40002000

080039e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	f023 0201 	bic.w	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f023 030a 	bic.w	r3, r3, #10
 8003a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	621a      	str	r2, [r3, #32]
}
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b087      	sub	sp, #28
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	f023 0210 	bic.w	r2, r3, #16
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	031b      	lsls	r3, r3, #12
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	621a      	str	r2, [r3, #32]
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b085      	sub	sp, #20
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f043 0307 	orr.w	r3, r3, #7
 8003ac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	609a      	str	r2, [r3, #8]
}
 8003ac8:	bf00      	nop
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	021a      	lsls	r2, r3, #8
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	609a      	str	r2, [r3, #8]
}
 8003b08:	bf00      	nop
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e05a      	b.n	8003be2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a21      	ldr	r2, [pc, #132]	; (8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d022      	beq.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b78:	d01d      	beq.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a1d      	ldr	r2, [pc, #116]	; (8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d018      	beq.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a1b      	ldr	r2, [pc, #108]	; (8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d013      	beq.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a1a      	ldr	r2, [pc, #104]	; (8003bfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00e      	beq.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a18      	ldr	r2, [pc, #96]	; (8003c00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d009      	beq.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a17      	ldr	r2, [pc, #92]	; (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d004      	beq.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a15      	ldr	r2, [pc, #84]	; (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40010000 	.word	0x40010000
 8003bf4:	40000400 	.word	0x40000400
 8003bf8:	40000800 	.word	0x40000800
 8003bfc:	40000c00 	.word	0x40000c00
 8003c00:	40010400 	.word	0x40010400
 8003c04:	40014000 	.word	0x40014000
 8003c08:	40001800 	.word	0x40001800

08003c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003c3a:	4b8d      	ldr	r3, [pc, #564]	; (8003e70 <MX_LWIP_Init+0x23c>)
 8003c3c:	22c0      	movs	r2, #192	; 0xc0
 8003c3e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003c40:	4b8b      	ldr	r3, [pc, #556]	; (8003e70 <MX_LWIP_Init+0x23c>)
 8003c42:	22a8      	movs	r2, #168	; 0xa8
 8003c44:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8003c46:	4b8a      	ldr	r3, [pc, #552]	; (8003e70 <MX_LWIP_Init+0x23c>)
 8003c48:	2201      	movs	r2, #1
 8003c4a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8003c4c:	4b88      	ldr	r3, [pc, #544]	; (8003e70 <MX_LWIP_Init+0x23c>)
 8003c4e:	226f      	movs	r2, #111	; 0x6f
 8003c50:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003c52:	4b88      	ldr	r3, [pc, #544]	; (8003e74 <MX_LWIP_Init+0x240>)
 8003c54:	22ff      	movs	r2, #255	; 0xff
 8003c56:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003c58:	4b86      	ldr	r3, [pc, #536]	; (8003e74 <MX_LWIP_Init+0x240>)
 8003c5a:	22ff      	movs	r2, #255	; 0xff
 8003c5c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003c5e:	4b85      	ldr	r3, [pc, #532]	; (8003e74 <MX_LWIP_Init+0x240>)
 8003c60:	22ff      	movs	r2, #255	; 0xff
 8003c62:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003c64:	4b83      	ldr	r3, [pc, #524]	; (8003e74 <MX_LWIP_Init+0x240>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003c6a:	4b83      	ldr	r3, [pc, #524]	; (8003e78 <MX_LWIP_Init+0x244>)
 8003c6c:	22c0      	movs	r2, #192	; 0xc0
 8003c6e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003c70:	4b81      	ldr	r3, [pc, #516]	; (8003e78 <MX_LWIP_Init+0x244>)
 8003c72:	22a8      	movs	r2, #168	; 0xa8
 8003c74:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8003c76:	4b80      	ldr	r3, [pc, #512]	; (8003e78 <MX_LWIP_Init+0x244>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 111;
 8003c7c:	4b7e      	ldr	r3, [pc, #504]	; (8003e78 <MX_LWIP_Init+0x244>)
 8003c7e:	226f      	movs	r2, #111	; 0x6f
 8003c80:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003c82:	f000 fd74 	bl	800476e <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003c86:	4b7a      	ldr	r3, [pc, #488]	; (8003e70 <MX_LWIP_Init+0x23c>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	061a      	lsls	r2, r3, #24
 8003c8c:	4b78      	ldr	r3, [pc, #480]	; (8003e70 <MX_LWIP_Init+0x23c>)
 8003c8e:	785b      	ldrb	r3, [r3, #1]
 8003c90:	041b      	lsls	r3, r3, #16
 8003c92:	431a      	orrs	r2, r3
 8003c94:	4b76      	ldr	r3, [pc, #472]	; (8003e70 <MX_LWIP_Init+0x23c>)
 8003c96:	789b      	ldrb	r3, [r3, #2]
 8003c98:	021b      	lsls	r3, r3, #8
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	4a74      	ldr	r2, [pc, #464]	; (8003e70 <MX_LWIP_Init+0x23c>)
 8003c9e:	78d2      	ldrb	r2, [r2, #3]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	061a      	lsls	r2, r3, #24
 8003ca4:	4b72      	ldr	r3, [pc, #456]	; (8003e70 <MX_LWIP_Init+0x23c>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	0619      	lsls	r1, r3, #24
 8003caa:	4b71      	ldr	r3, [pc, #452]	; (8003e70 <MX_LWIP_Init+0x23c>)
 8003cac:	785b      	ldrb	r3, [r3, #1]
 8003cae:	041b      	lsls	r3, r3, #16
 8003cb0:	4319      	orrs	r1, r3
 8003cb2:	4b6f      	ldr	r3, [pc, #444]	; (8003e70 <MX_LWIP_Init+0x23c>)
 8003cb4:	789b      	ldrb	r3, [r3, #2]
 8003cb6:	021b      	lsls	r3, r3, #8
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	496d      	ldr	r1, [pc, #436]	; (8003e70 <MX_LWIP_Init+0x23c>)
 8003cbc:	78c9      	ldrb	r1, [r1, #3]
 8003cbe:	430b      	orrs	r3, r1
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	4b69      	ldr	r3, [pc, #420]	; (8003e70 <MX_LWIP_Init+0x23c>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	0619      	lsls	r1, r3, #24
 8003cce:	4b68      	ldr	r3, [pc, #416]	; (8003e70 <MX_LWIP_Init+0x23c>)
 8003cd0:	785b      	ldrb	r3, [r3, #1]
 8003cd2:	041b      	lsls	r3, r3, #16
 8003cd4:	4319      	orrs	r1, r3
 8003cd6:	4b66      	ldr	r3, [pc, #408]	; (8003e70 <MX_LWIP_Init+0x23c>)
 8003cd8:	789b      	ldrb	r3, [r3, #2]
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	4964      	ldr	r1, [pc, #400]	; (8003e70 <MX_LWIP_Init+0x23c>)
 8003ce0:	78c9      	ldrb	r1, [r1, #3]
 8003ce2:	430b      	orrs	r3, r1
 8003ce4:	0a1b      	lsrs	r3, r3, #8
 8003ce6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003cea:	431a      	orrs	r2, r3
 8003cec:	4b60      	ldr	r3, [pc, #384]	; (8003e70 <MX_LWIP_Init+0x23c>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	0619      	lsls	r1, r3, #24
 8003cf2:	4b5f      	ldr	r3, [pc, #380]	; (8003e70 <MX_LWIP_Init+0x23c>)
 8003cf4:	785b      	ldrb	r3, [r3, #1]
 8003cf6:	041b      	lsls	r3, r3, #16
 8003cf8:	4319      	orrs	r1, r3
 8003cfa:	4b5d      	ldr	r3, [pc, #372]	; (8003e70 <MX_LWIP_Init+0x23c>)
 8003cfc:	789b      	ldrb	r3, [r3, #2]
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	430b      	orrs	r3, r1
 8003d02:	495b      	ldr	r1, [pc, #364]	; (8003e70 <MX_LWIP_Init+0x23c>)
 8003d04:	78c9      	ldrb	r1, [r1, #3]
 8003d06:	430b      	orrs	r3, r1
 8003d08:	0e1b      	lsrs	r3, r3, #24
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	4a5b      	ldr	r2, [pc, #364]	; (8003e7c <MX_LWIP_Init+0x248>)
 8003d0e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003d10:	4b58      	ldr	r3, [pc, #352]	; (8003e74 <MX_LWIP_Init+0x240>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	061a      	lsls	r2, r3, #24
 8003d16:	4b57      	ldr	r3, [pc, #348]	; (8003e74 <MX_LWIP_Init+0x240>)
 8003d18:	785b      	ldrb	r3, [r3, #1]
 8003d1a:	041b      	lsls	r3, r3, #16
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	4b55      	ldr	r3, [pc, #340]	; (8003e74 <MX_LWIP_Init+0x240>)
 8003d20:	789b      	ldrb	r3, [r3, #2]
 8003d22:	021b      	lsls	r3, r3, #8
 8003d24:	4313      	orrs	r3, r2
 8003d26:	4a53      	ldr	r2, [pc, #332]	; (8003e74 <MX_LWIP_Init+0x240>)
 8003d28:	78d2      	ldrb	r2, [r2, #3]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	061a      	lsls	r2, r3, #24
 8003d2e:	4b51      	ldr	r3, [pc, #324]	; (8003e74 <MX_LWIP_Init+0x240>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	0619      	lsls	r1, r3, #24
 8003d34:	4b4f      	ldr	r3, [pc, #316]	; (8003e74 <MX_LWIP_Init+0x240>)
 8003d36:	785b      	ldrb	r3, [r3, #1]
 8003d38:	041b      	lsls	r3, r3, #16
 8003d3a:	4319      	orrs	r1, r3
 8003d3c:	4b4d      	ldr	r3, [pc, #308]	; (8003e74 <MX_LWIP_Init+0x240>)
 8003d3e:	789b      	ldrb	r3, [r3, #2]
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	430b      	orrs	r3, r1
 8003d44:	494b      	ldr	r1, [pc, #300]	; (8003e74 <MX_LWIP_Init+0x240>)
 8003d46:	78c9      	ldrb	r1, [r1, #3]
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d50:	431a      	orrs	r2, r3
 8003d52:	4b48      	ldr	r3, [pc, #288]	; (8003e74 <MX_LWIP_Init+0x240>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	0619      	lsls	r1, r3, #24
 8003d58:	4b46      	ldr	r3, [pc, #280]	; (8003e74 <MX_LWIP_Init+0x240>)
 8003d5a:	785b      	ldrb	r3, [r3, #1]
 8003d5c:	041b      	lsls	r3, r3, #16
 8003d5e:	4319      	orrs	r1, r3
 8003d60:	4b44      	ldr	r3, [pc, #272]	; (8003e74 <MX_LWIP_Init+0x240>)
 8003d62:	789b      	ldrb	r3, [r3, #2]
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	430b      	orrs	r3, r1
 8003d68:	4942      	ldr	r1, [pc, #264]	; (8003e74 <MX_LWIP_Init+0x240>)
 8003d6a:	78c9      	ldrb	r1, [r1, #3]
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	0a1b      	lsrs	r3, r3, #8
 8003d70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d74:	431a      	orrs	r2, r3
 8003d76:	4b3f      	ldr	r3, [pc, #252]	; (8003e74 <MX_LWIP_Init+0x240>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	0619      	lsls	r1, r3, #24
 8003d7c:	4b3d      	ldr	r3, [pc, #244]	; (8003e74 <MX_LWIP_Init+0x240>)
 8003d7e:	785b      	ldrb	r3, [r3, #1]
 8003d80:	041b      	lsls	r3, r3, #16
 8003d82:	4319      	orrs	r1, r3
 8003d84:	4b3b      	ldr	r3, [pc, #236]	; (8003e74 <MX_LWIP_Init+0x240>)
 8003d86:	789b      	ldrb	r3, [r3, #2]
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	4939      	ldr	r1, [pc, #228]	; (8003e74 <MX_LWIP_Init+0x240>)
 8003d8e:	78c9      	ldrb	r1, [r1, #3]
 8003d90:	430b      	orrs	r3, r1
 8003d92:	0e1b      	lsrs	r3, r3, #24
 8003d94:	4313      	orrs	r3, r2
 8003d96:	4a3a      	ldr	r2, [pc, #232]	; (8003e80 <MX_LWIP_Init+0x24c>)
 8003d98:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003d9a:	4b37      	ldr	r3, [pc, #220]	; (8003e78 <MX_LWIP_Init+0x244>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	061a      	lsls	r2, r3, #24
 8003da0:	4b35      	ldr	r3, [pc, #212]	; (8003e78 <MX_LWIP_Init+0x244>)
 8003da2:	785b      	ldrb	r3, [r3, #1]
 8003da4:	041b      	lsls	r3, r3, #16
 8003da6:	431a      	orrs	r2, r3
 8003da8:	4b33      	ldr	r3, [pc, #204]	; (8003e78 <MX_LWIP_Init+0x244>)
 8003daa:	789b      	ldrb	r3, [r3, #2]
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	4313      	orrs	r3, r2
 8003db0:	4a31      	ldr	r2, [pc, #196]	; (8003e78 <MX_LWIP_Init+0x244>)
 8003db2:	78d2      	ldrb	r2, [r2, #3]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	061a      	lsls	r2, r3, #24
 8003db8:	4b2f      	ldr	r3, [pc, #188]	; (8003e78 <MX_LWIP_Init+0x244>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	0619      	lsls	r1, r3, #24
 8003dbe:	4b2e      	ldr	r3, [pc, #184]	; (8003e78 <MX_LWIP_Init+0x244>)
 8003dc0:	785b      	ldrb	r3, [r3, #1]
 8003dc2:	041b      	lsls	r3, r3, #16
 8003dc4:	4319      	orrs	r1, r3
 8003dc6:	4b2c      	ldr	r3, [pc, #176]	; (8003e78 <MX_LWIP_Init+0x244>)
 8003dc8:	789b      	ldrb	r3, [r3, #2]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	492a      	ldr	r1, [pc, #168]	; (8003e78 <MX_LWIP_Init+0x244>)
 8003dd0:	78c9      	ldrb	r1, [r1, #3]
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	4b26      	ldr	r3, [pc, #152]	; (8003e78 <MX_LWIP_Init+0x244>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	0619      	lsls	r1, r3, #24
 8003de2:	4b25      	ldr	r3, [pc, #148]	; (8003e78 <MX_LWIP_Init+0x244>)
 8003de4:	785b      	ldrb	r3, [r3, #1]
 8003de6:	041b      	lsls	r3, r3, #16
 8003de8:	4319      	orrs	r1, r3
 8003dea:	4b23      	ldr	r3, [pc, #140]	; (8003e78 <MX_LWIP_Init+0x244>)
 8003dec:	789b      	ldrb	r3, [r3, #2]
 8003dee:	021b      	lsls	r3, r3, #8
 8003df0:	430b      	orrs	r3, r1
 8003df2:	4921      	ldr	r1, [pc, #132]	; (8003e78 <MX_LWIP_Init+0x244>)
 8003df4:	78c9      	ldrb	r1, [r1, #3]
 8003df6:	430b      	orrs	r3, r1
 8003df8:	0a1b      	lsrs	r3, r3, #8
 8003dfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <MX_LWIP_Init+0x244>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	0619      	lsls	r1, r3, #24
 8003e06:	4b1c      	ldr	r3, [pc, #112]	; (8003e78 <MX_LWIP_Init+0x244>)
 8003e08:	785b      	ldrb	r3, [r3, #1]
 8003e0a:	041b      	lsls	r3, r3, #16
 8003e0c:	4319      	orrs	r1, r3
 8003e0e:	4b1a      	ldr	r3, [pc, #104]	; (8003e78 <MX_LWIP_Init+0x244>)
 8003e10:	789b      	ldrb	r3, [r3, #2]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	430b      	orrs	r3, r1
 8003e16:	4918      	ldr	r1, [pc, #96]	; (8003e78 <MX_LWIP_Init+0x244>)
 8003e18:	78c9      	ldrb	r1, [r1, #3]
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	0e1b      	lsrs	r3, r3, #24
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	4a18      	ldr	r2, [pc, #96]	; (8003e84 <MX_LWIP_Init+0x250>)
 8003e22:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003e24:	4b18      	ldr	r3, [pc, #96]	; (8003e88 <MX_LWIP_Init+0x254>)
 8003e26:	9302      	str	r3, [sp, #8]
 8003e28:	4b18      	ldr	r3, [pc, #96]	; (8003e8c <MX_LWIP_Init+0x258>)
 8003e2a:	9301      	str	r3, [sp, #4]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <MX_LWIP_Init+0x250>)
 8003e32:	4a13      	ldr	r2, [pc, #76]	; (8003e80 <MX_LWIP_Init+0x24c>)
 8003e34:	4911      	ldr	r1, [pc, #68]	; (8003e7c <MX_LWIP_Init+0x248>)
 8003e36:	4816      	ldr	r0, [pc, #88]	; (8003e90 <MX_LWIP_Init+0x25c>)
 8003e38:	f001 f984 	bl	8005144 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003e3c:	4814      	ldr	r0, [pc, #80]	; (8003e90 <MX_LWIP_Init+0x25c>)
 8003e3e:	f001 fb37 	bl	80054b0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003e42:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <MX_LWIP_Init+0x25c>)
 8003e44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003e48:	089b      	lsrs	r3, r3, #2
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003e54:	480e      	ldr	r0, [pc, #56]	; (8003e90 <MX_LWIP_Init+0x25c>)
 8003e56:	f001 fb3b 	bl	80054d0 <netif_set_up>
 8003e5a:	e002      	b.n	8003e62 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003e5c:	480c      	ldr	r0, [pc, #48]	; (8003e90 <MX_LWIP_Init+0x25c>)
 8003e5e:	f001 fba3 	bl	80055a8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003e62:	490c      	ldr	r1, [pc, #48]	; (8003e94 <MX_LWIP_Init+0x260>)
 8003e64:	480a      	ldr	r0, [pc, #40]	; (8003e90 <MX_LWIP_Init+0x25c>)
 8003e66:	f001 fc35 	bl	80056d4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003e6a:	bf00      	nop
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	2000015c 	.word	0x2000015c
 8003e74:	20000160 	.word	0x20000160
 8003e78:	20000164 	.word	0x20000164
 8003e7c:	20000150 	.word	0x20000150
 8003e80:	20000154 	.word	0x20000154
 8003e84:	20000158 	.word	0x20000158
 8003e88:	0800ea6d 	.word	0x0800ea6d
 8003e8c:	080041a5 	.word	0x080041a5
 8003e90:	2000011c 	.word	0x2000011c
 8003e94:	08003ee9 	.word	0x08003ee9

08003e98 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8003ea0:	f7fd f94c 	bl	800113c <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <Ethernet_Link_Periodic_Handle+0x30>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b63      	cmp	r3, #99	; 0x63
 8003eae:	d907      	bls.n	8003ec0 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8003eb0:	f7fd f944 	bl	800113c <HAL_GetTick>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	4a04      	ldr	r2, [pc, #16]	; (8003ec8 <Ethernet_Link_Periodic_Handle+0x30>)
 8003eb8:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fabe 	bl	800443c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8003ec0:	bf00      	nop
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20000118 	.word	0x20000118

08003ecc <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003ed0:	4804      	ldr	r0, [pc, #16]	; (8003ee4 <MX_LWIP_Process+0x18>)
 8003ed2:	f000 f947 	bl	8004164 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8003ed6:	f007 ff27 	bl	800bd28 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8003eda:	4802      	ldr	r0, [pc, #8]	; (8003ee4 <MX_LWIP_Process+0x18>)
 8003edc:	f7ff ffdc 	bl	8003e98 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003ee0:	bf00      	nop
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	2000011c 	.word	0x2000011c

08003ee8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003f08:	4b40      	ldr	r3, [pc, #256]	; (800400c <low_level_init+0x110>)
 8003f0a:	4a41      	ldr	r2, [pc, #260]	; (8004010 <low_level_init+0x114>)
 8003f0c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003f12:	2380      	movs	r3, #128	; 0x80
 8003f14:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003f16:	23e1      	movs	r3, #225	; 0xe1
 8003f18:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0xDF;
 8003f1a:	23df      	movs	r3, #223	; 0xdf
 8003f1c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0xB0;
 8003f1e:	23b0      	movs	r3, #176	; 0xb0
 8003f20:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0xC2;
 8003f22:	23c2      	movs	r3, #194	; 0xc2
 8003f24:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003f26:	4a39      	ldr	r2, [pc, #228]	; (800400c <low_level_init+0x110>)
 8003f28:	f107 0308 	add.w	r3, r7, #8
 8003f2c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003f2e:	4b37      	ldr	r3, [pc, #220]	; (800400c <low_level_init+0x110>)
 8003f30:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003f34:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003f36:	4b35      	ldr	r3, [pc, #212]	; (800400c <low_level_init+0x110>)
 8003f38:	4a36      	ldr	r2, [pc, #216]	; (8004014 <low_level_init+0x118>)
 8003f3a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003f3c:	4b33      	ldr	r3, [pc, #204]	; (800400c <low_level_init+0x110>)
 8003f3e:	4a36      	ldr	r2, [pc, #216]	; (8004018 <low_level_init+0x11c>)
 8003f40:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8003f42:	4b32      	ldr	r3, [pc, #200]	; (800400c <low_level_init+0x110>)
 8003f44:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003f48:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003f4a:	4830      	ldr	r0, [pc, #192]	; (800400c <low_level_init+0x110>)
 8003f4c:	f7fd fa38 	bl	80013c0 <HAL_ETH_Init>
 8003f50:	4603      	mov	r3, r0
 8003f52:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003f54:	2238      	movs	r2, #56	; 0x38
 8003f56:	2100      	movs	r1, #0
 8003f58:	4830      	ldr	r0, [pc, #192]	; (800401c <low_level_init+0x120>)
 8003f5a:	f00a feb9 	bl	800ecd0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003f5e:	4b2f      	ldr	r3, [pc, #188]	; (800401c <low_level_init+0x120>)
 8003f60:	2221      	movs	r2, #33	; 0x21
 8003f62:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003f64:	4b2d      	ldr	r3, [pc, #180]	; (800401c <low_level_init+0x120>)
 8003f66:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8003f6a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003f6c:	4b2b      	ldr	r3, [pc, #172]	; (800401c <low_level_init+0x120>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003f72:	482b      	ldr	r0, [pc, #172]	; (8004020 <low_level_init+0x124>)
 8003f74:	f000 ffae 	bl	8004ed4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2206      	movs	r2, #6
 8003f7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003f80:	4b22      	ldr	r3, [pc, #136]	; (800400c <low_level_init+0x110>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	781a      	ldrb	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003f8c:	4b1f      	ldr	r3, [pc, #124]	; (800400c <low_level_init+0x110>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	785a      	ldrb	r2, [r3, #1]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003f98:	4b1c      	ldr	r3, [pc, #112]	; (800400c <low_level_init+0x110>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	789a      	ldrb	r2, [r3, #2]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003fa4:	4b19      	ldr	r3, [pc, #100]	; (800400c <low_level_init+0x110>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	78da      	ldrb	r2, [r3, #3]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003fb0:	4b16      	ldr	r3, [pc, #88]	; (800400c <low_level_init+0x110>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	791a      	ldrb	r2, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003fbc:	4b13      	ldr	r3, [pc, #76]	; (800400c <low_level_init+0x110>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	795a      	ldrb	r2, [r3, #5]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003fce:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003fd6:	f043 030a 	orr.w	r3, r3, #10
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8003fe2:	4910      	ldr	r1, [pc, #64]	; (8004024 <low_level_init+0x128>)
 8003fe4:	4810      	ldr	r0, [pc, #64]	; (8004028 <low_level_init+0x12c>)
 8003fe6:	f7fc fee2 	bl	8000dae <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 8003fea:	480f      	ldr	r0, [pc, #60]	; (8004028 <low_level_init+0x12c>)
 8003fec:	f7fc ff11 	bl	8000e12 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d103      	bne.n	8003ffe <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fa20 	bl	800443c <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003ffc:	e001      	b.n	8004002 <low_level_init+0x106>
    Error_Handler();
 8003ffe:	f7fc fd3d 	bl	8000a7c <Error_Handler>
}
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20004c34 	.word	0x20004c34
 8004010:	40028000 	.word	0x40028000
 8004014:	20004b94 	.word	0x20004b94
 8004018:	20004af4 	.word	0x20004af4
 800401c:	20004ce4 	.word	0x20004ce4
 8004020:	08012c4c 	.word	0x08012c4c
 8004024:	2000000c 	.word	0x2000000c
 8004028:	20004d1c 	.word	0x20004d1c

0800402c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b092      	sub	sp, #72	; 0x48
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800403a:	2300      	movs	r3, #0
 800403c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004044:	f107 030c 	add.w	r3, r7, #12
 8004048:	2230      	movs	r2, #48	; 0x30
 800404a:	2100      	movs	r1, #0
 800404c:	4618      	mov	r0, r3
 800404e:	f00a fe3f 	bl	800ecd0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004052:	f107 030c 	add.w	r3, r7, #12
 8004056:	2230      	movs	r2, #48	; 0x30
 8004058:	2100      	movs	r1, #0
 800405a:	4618      	mov	r0, r3
 800405c:	f00a fe38 	bl	800ecd0 <memset>

  for(q = p; q != NULL; q = q->next)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	643b      	str	r3, [r7, #64]	; 0x40
 8004064:	e045      	b.n	80040f2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004068:	2b03      	cmp	r3, #3
 800406a:	d902      	bls.n	8004072 <low_level_output+0x46>
      return ERR_IF;
 800406c:	f06f 030b 	mvn.w	r3, #11
 8004070:	e055      	b.n	800411e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8004072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004074:	6859      	ldr	r1, [r3, #4]
 8004076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004078:	4613      	mov	r3, r2
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	3348      	adds	r3, #72	; 0x48
 8004082:	443b      	add	r3, r7
 8004084:	3b3c      	subs	r3, #60	; 0x3c
 8004086:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800408a:	895b      	ldrh	r3, [r3, #10]
 800408c:	4619      	mov	r1, r3
 800408e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004090:	4613      	mov	r3, r2
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	3348      	adds	r3, #72	; 0x48
 800409a:	443b      	add	r3, r7
 800409c:	3b38      	subs	r3, #56	; 0x38
 800409e:	6019      	str	r1, [r3, #0]

    if(i>0)
 80040a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d011      	beq.n	80040ca <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80040a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040a8:	1e5a      	subs	r2, r3, #1
 80040aa:	f107 000c 	add.w	r0, r7, #12
 80040ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040b0:	460b      	mov	r3, r1
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	440b      	add	r3, r1
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	18c1      	adds	r1, r0, r3
 80040ba:	4613      	mov	r3, r2
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	4413      	add	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	3348      	adds	r3, #72	; 0x48
 80040c4:	443b      	add	r3, r7
 80040c6:	3b34      	subs	r3, #52	; 0x34
 80040c8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80040ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d109      	bne.n	80040e6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80040d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040d4:	4613      	mov	r3, r2
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	3348      	adds	r3, #72	; 0x48
 80040de:	443b      	add	r3, r7
 80040e0:	3b34      	subs	r3, #52	; 0x34
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80040e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040e8:	3301      	adds	r3, #1
 80040ea:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80040ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	643b      	str	r3, [r7, #64]	; 0x40
 80040f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1b6      	bne.n	8004066 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	891b      	ldrh	r3, [r3, #8]
 80040fc:	461a      	mov	r2, r3
 80040fe:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <low_level_output+0xfc>)
 8004100:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004102:	4a09      	ldr	r2, [pc, #36]	; (8004128 <low_level_output+0xfc>)
 8004104:	f107 030c 	add.w	r3, r7, #12
 8004108:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800410a:	4a07      	ldr	r2, [pc, #28]	; (8004128 <low_level_output+0xfc>)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004110:	2214      	movs	r2, #20
 8004112:	4905      	ldr	r1, [pc, #20]	; (8004128 <low_level_output+0xfc>)
 8004114:	4805      	ldr	r0, [pc, #20]	; (800412c <low_level_output+0x100>)
 8004116:	f7fd fa89 	bl	800162c <HAL_ETH_Transmit>

  return errval;
 800411a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800411e:	4618      	mov	r0, r3
 8004120:	3748      	adds	r7, #72	; 0x48
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20004ce4 	.word	0x20004ce4
 800412c:	20004c34 	.word	0x20004c34

08004130 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004138:	2300      	movs	r3, #0
 800413a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800413c:	4b07      	ldr	r3, [pc, #28]	; (800415c <low_level_input+0x2c>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d105      	bne.n	8004150 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004144:	f107 030c 	add.w	r3, r7, #12
 8004148:	4619      	mov	r1, r3
 800414a:	4805      	ldr	r0, [pc, #20]	; (8004160 <low_level_input+0x30>)
 800414c:	f7fd fb02 	bl	8001754 <HAL_ETH_ReadData>
  }

  return p;
 8004150:	68fb      	ldr	r3, [r7, #12]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20004af0 	.word	0x20004af0
 8004160:	20004c34 	.word	0x20004c34

08004164 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff ffdd 	bl	8004130 <low_level_input>
 8004176:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	4798      	blx	r3
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f001 fe20 	bl	8005dd4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1ea      	bne.n	8004170 <ethernetif_input+0xc>
}
 800419a:	bf00      	nop
 800419c:	bf00      	nop
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <ethernetif_init+0x1c>
 80041b2:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <ethernetif_init+0x48>)
 80041b4:	f240 126b 	movw	r2, #363	; 0x16b
 80041b8:	490d      	ldr	r1, [pc, #52]	; (80041f0 <ethernetif_init+0x4c>)
 80041ba:	480e      	ldr	r0, [pc, #56]	; (80041f4 <ethernetif_init+0x50>)
 80041bc:	f00a fd90 	bl	800ece0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2273      	movs	r2, #115	; 0x73
 80041c4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2274      	movs	r2, #116	; 0x74
 80041cc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a09      	ldr	r2, [pc, #36]	; (80041f8 <ethernetif_init+0x54>)
 80041d4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a08      	ldr	r2, [pc, #32]	; (80041fc <ethernetif_init+0x58>)
 80041da:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7ff fe8d 	bl	8003efc <low_level_init>

  return ERR_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	08010190 	.word	0x08010190
 80041f0:	080101ac 	.word	0x080101ac
 80041f4:	080101bc 	.word	0x080101bc
 80041f8:	0800cf0d 	.word	0x0800cf0d
 80041fc:	0800402d 	.word	0x0800402d

08004200 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800420c:	68f9      	ldr	r1, [r7, #12]
 800420e:	4807      	ldr	r0, [pc, #28]	; (800422c <pbuf_free_custom+0x2c>)
 8004210:	f000 ff42 	bl	8005098 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004214:	4b06      	ldr	r3, [pc, #24]	; (8004230 <pbuf_free_custom+0x30>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d102      	bne.n	8004222 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800421c:	4b04      	ldr	r3, [pc, #16]	; (8004230 <pbuf_free_custom+0x30>)
 800421e:	2200      	movs	r2, #0
 8004220:	701a      	strb	r2, [r3, #0]
  }
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	08012c4c 	.word	0x08012c4c
 8004230:	20004af0 	.word	0x20004af0

08004234 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004238:	f7fc ff80 	bl	800113c <HAL_GetTick>
 800423c:	4603      	mov	r3, r0
}
 800423e:	4618      	mov	r0, r3
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08e      	sub	sp, #56	; 0x38
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800424c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	605a      	str	r2, [r3, #4]
 8004256:	609a      	str	r2, [r3, #8]
 8004258:	60da      	str	r2, [r3, #12]
 800425a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a4a      	ldr	r2, [pc, #296]	; (800438c <HAL_ETH_MspInit+0x148>)
 8004262:	4293      	cmp	r3, r2
 8004264:	f040 808d 	bne.w	8004382 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004268:	2300      	movs	r3, #0
 800426a:	623b      	str	r3, [r7, #32]
 800426c:	4b48      	ldr	r3, [pc, #288]	; (8004390 <HAL_ETH_MspInit+0x14c>)
 800426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004270:	4a47      	ldr	r2, [pc, #284]	; (8004390 <HAL_ETH_MspInit+0x14c>)
 8004272:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004276:	6313      	str	r3, [r2, #48]	; 0x30
 8004278:	4b45      	ldr	r3, [pc, #276]	; (8004390 <HAL_ETH_MspInit+0x14c>)
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004280:	623b      	str	r3, [r7, #32]
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	2300      	movs	r3, #0
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	4b41      	ldr	r3, [pc, #260]	; (8004390 <HAL_ETH_MspInit+0x14c>)
 800428a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428c:	4a40      	ldr	r2, [pc, #256]	; (8004390 <HAL_ETH_MspInit+0x14c>)
 800428e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004292:	6313      	str	r3, [r2, #48]	; 0x30
 8004294:	4b3e      	ldr	r3, [pc, #248]	; (8004390 <HAL_ETH_MspInit+0x14c>)
 8004296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004298:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	2300      	movs	r3, #0
 80042a2:	61bb      	str	r3, [r7, #24]
 80042a4:	4b3a      	ldr	r3, [pc, #232]	; (8004390 <HAL_ETH_MspInit+0x14c>)
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	4a39      	ldr	r2, [pc, #228]	; (8004390 <HAL_ETH_MspInit+0x14c>)
 80042aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042ae:	6313      	str	r3, [r2, #48]	; 0x30
 80042b0:	4b37      	ldr	r3, [pc, #220]	; (8004390 <HAL_ETH_MspInit+0x14c>)
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042b8:	61bb      	str	r3, [r7, #24]
 80042ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	4b33      	ldr	r3, [pc, #204]	; (8004390 <HAL_ETH_MspInit+0x14c>)
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	4a32      	ldr	r2, [pc, #200]	; (8004390 <HAL_ETH_MspInit+0x14c>)
 80042c6:	f043 0304 	orr.w	r3, r3, #4
 80042ca:	6313      	str	r3, [r2, #48]	; 0x30
 80042cc:	4b30      	ldr	r3, [pc, #192]	; (8004390 <HAL_ETH_MspInit+0x14c>)
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042d8:	2300      	movs	r3, #0
 80042da:	613b      	str	r3, [r7, #16]
 80042dc:	4b2c      	ldr	r3, [pc, #176]	; (8004390 <HAL_ETH_MspInit+0x14c>)
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	4a2b      	ldr	r2, [pc, #172]	; (8004390 <HAL_ETH_MspInit+0x14c>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6313      	str	r3, [r2, #48]	; 0x30
 80042e8:	4b29      	ldr	r3, [pc, #164]	; (8004390 <HAL_ETH_MspInit+0x14c>)
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	4b25      	ldr	r3, [pc, #148]	; (8004390 <HAL_ETH_MspInit+0x14c>)
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	4a24      	ldr	r2, [pc, #144]	; (8004390 <HAL_ETH_MspInit+0x14c>)
 80042fe:	f043 0302 	orr.w	r3, r3, #2
 8004302:	6313      	str	r3, [r2, #48]	; 0x30
 8004304:	4b22      	ldr	r3, [pc, #136]	; (8004390 <HAL_ETH_MspInit+0x14c>)
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004310:	2332      	movs	r3, #50	; 0x32
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004314:	2302      	movs	r3, #2
 8004316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004318:	2300      	movs	r3, #0
 800431a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800431c:	2303      	movs	r3, #3
 800431e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004320:	230b      	movs	r3, #11
 8004322:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004328:	4619      	mov	r1, r3
 800432a:	481a      	ldr	r0, [pc, #104]	; (8004394 <HAL_ETH_MspInit+0x150>)
 800432c:	f7fe fa32 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004330:	2386      	movs	r3, #134	; 0x86
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004334:	2302      	movs	r3, #2
 8004336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004338:	2300      	movs	r3, #0
 800433a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800433c:	2303      	movs	r3, #3
 800433e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004340:	230b      	movs	r3, #11
 8004342:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004348:	4619      	mov	r1, r3
 800434a:	4813      	ldr	r0, [pc, #76]	; (8004398 <HAL_ETH_MspInit+0x154>)
 800434c:	f7fe fa22 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004350:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004356:	2302      	movs	r3, #2
 8004358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435a:	2300      	movs	r3, #0
 800435c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800435e:	2303      	movs	r3, #3
 8004360:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004362:	230b      	movs	r3, #11
 8004364:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800436a:	4619      	mov	r1, r3
 800436c:	480b      	ldr	r0, [pc, #44]	; (800439c <HAL_ETH_MspInit+0x158>)
 800436e:	f7fe fa11 	bl	8002794 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8004372:	2200      	movs	r2, #0
 8004374:	2100      	movs	r1, #0
 8004376:	203d      	movs	r0, #61	; 0x3d
 8004378:	f7fc ffeb 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800437c:	203d      	movs	r0, #61	; 0x3d
 800437e:	f7fd f804 	bl	800138a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004382:	bf00      	nop
 8004384:	3738      	adds	r7, #56	; 0x38
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40028000 	.word	0x40028000
 8004390:	40023800 	.word	0x40023800
 8004394:	40020800 	.word	0x40020800
 8004398:	40020000 	.word	0x40020000
 800439c:	40020400 	.word	0x40020400

080043a0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80043a4:	4802      	ldr	r0, [pc, #8]	; (80043b0 <ETH_PHY_IO_Init+0x10>)
 80043a6:	f7fd fd99 	bl	8001edc <HAL_ETH_SetMDIOClockRange>

  return 0;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20004c34 	.word	0x20004c34

080043b4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return 0;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	68f9      	ldr	r1, [r7, #12]
 80043d6:	4807      	ldr	r0, [pc, #28]	; (80043f4 <ETH_PHY_IO_ReadReg+0x30>)
 80043d8:	f7fd fbe8 	bl	8001bac <HAL_ETH_ReadPHYRegister>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80043e2:	f04f 33ff 	mov.w	r3, #4294967295
 80043e6:	e000      	b.n	80043ea <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20004c34 	.word	0x20004c34

080043f8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	68f9      	ldr	r1, [r7, #12]
 800440a:	4807      	ldr	r0, [pc, #28]	; (8004428 <ETH_PHY_IO_WriteReg+0x30>)
 800440c:	f7fd fc19 	bl	8001c42 <HAL_ETH_WritePHYRegister>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004416:	f04f 33ff 	mov.w	r3, #4294967295
 800441a:	e000      	b.n	800441e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20004c34 	.word	0x20004c34

0800442c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004430:	f7fc fe84 	bl	800113c <HAL_GetTick>
 8004434:	4603      	mov	r3, r0
}
 8004436:	4618      	mov	r0, r3
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b0a0      	sub	sp, #128	; 0x80
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004444:	f107 030c 	add.w	r3, r7, #12
 8004448:	2264      	movs	r2, #100	; 0x64
 800444a:	2100      	movs	r1, #0
 800444c:	4618      	mov	r0, r3
 800444e:	f00a fc3f 	bl	800ecd0 <memset>
  int32_t PHYLinkState = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	67fb      	str	r3, [r7, #124]	; 0x7c
 800445a:	2300      	movs	r3, #0
 800445c:	67bb      	str	r3, [r7, #120]	; 0x78
 800445e:	2300      	movs	r3, #0
 8004460:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8004462:	483a      	ldr	r0, [pc, #232]	; (800454c <ethernet_link_check_state+0x110>)
 8004464:	f7fc fd7d 	bl	8000f62 <DP83848_GetLinkState>
 8004468:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004470:	089b      	lsrs	r3, r3, #2
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00c      	beq.n	8004496 <ethernet_link_check_state+0x5a>
 800447c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800447e:	2b01      	cmp	r3, #1
 8004480:	dc09      	bgt.n	8004496 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8004482:	4833      	ldr	r0, [pc, #204]	; (8004550 <ethernet_link_check_state+0x114>)
 8004484:	f7fd f879 	bl	800157a <HAL_ETH_Stop>
    netif_set_down(netif);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f001 f88d 	bl	80055a8 <netif_set_down>
    netif_set_link_down(netif);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f001 f8f0 	bl	8005674 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004494:	e055      	b.n	8004542 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d14e      	bne.n	8004542 <ethernet_link_check_state+0x106>
 80044a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	dd4b      	ble.n	8004542 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80044aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044ac:	3b02      	subs	r3, #2
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d82a      	bhi.n	8004508 <ethernet_link_check_state+0xcc>
 80044b2:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <ethernet_link_check_state+0x7c>)
 80044b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b8:	080044c9 	.word	0x080044c9
 80044bc:	080044db 	.word	0x080044db
 80044c0:	080044eb 	.word	0x080044eb
 80044c4:	080044fb 	.word	0x080044fb
      duplex = ETH_FULLDUPLEX_MODE;
 80044c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044cc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80044ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044d2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80044d4:	2301      	movs	r3, #1
 80044d6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80044d8:	e017      	b.n	800450a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80044da:	2300      	movs	r3, #0
 80044dc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80044de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044e2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80044e4:	2301      	movs	r3, #1
 80044e6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80044e8:	e00f      	b.n	800450a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80044ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044ee:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80044f0:	2300      	movs	r3, #0
 80044f2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80044f4:	2301      	movs	r3, #1
 80044f6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80044f8:	e007      	b.n	800450a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80044fa:	2300      	movs	r3, #0
 80044fc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80044fe:	2300      	movs	r3, #0
 8004500:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004502:	2301      	movs	r3, #1
 8004504:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004506:	e000      	b.n	800450a <ethernet_link_check_state+0xce>
      break;
 8004508:	bf00      	nop
    if(linkchanged)
 800450a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800450c:	2b00      	cmp	r3, #0
 800450e:	d018      	beq.n	8004542 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004510:	f107 030c 	add.w	r3, r7, #12
 8004514:	4619      	mov	r1, r3
 8004516:	480e      	ldr	r0, [pc, #56]	; (8004550 <ethernet_link_check_state+0x114>)
 8004518:	f7fd fbdc 	bl	8001cd4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800451c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8004520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004522:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004524:	f107 030c 	add.w	r3, r7, #12
 8004528:	4619      	mov	r1, r3
 800452a:	4809      	ldr	r0, [pc, #36]	; (8004550 <ethernet_link_check_state+0x114>)
 800452c:	f7fd fcbc 	bl	8001ea8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004530:	4807      	ldr	r0, [pc, #28]	; (8004550 <ethernet_link_check_state+0x114>)
 8004532:	f7fc ffc3 	bl	80014bc <HAL_ETH_Start>
      netif_set_up(netif);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 ffca 	bl	80054d0 <netif_set_up>
      netif_set_link_up(netif);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f001 f865 	bl	800560c <netif_set_link_up>
}
 8004542:	bf00      	nop
 8004544:	3780      	adds	r7, #128	; 0x80
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20004d1c 	.word	0x20004d1c
 8004550:	20004c34 	.word	0x20004c34

08004554 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af02      	add	r7, sp, #8
 800455a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800455c:	4812      	ldr	r0, [pc, #72]	; (80045a8 <HAL_ETH_RxAllocateCallback+0x54>)
 800455e:	f000 fd2d 	bl	8004fbc <memp_malloc_pool>
 8004562:	60f8      	str	r0, [r7, #12]
  if (p)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d014      	beq.n	8004594 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f103 0220 	add.w	r2, r3, #32
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4a0d      	ldr	r2, [pc, #52]	; (80045ac <HAL_ETH_RxAllocateCallback+0x58>)
 8004578:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004582:	9201      	str	r2, [sp, #4]
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2241      	movs	r2, #65	; 0x41
 800458a:	2100      	movs	r1, #0
 800458c:	2000      	movs	r0, #0
 800458e:	f001 fa67 	bl	8005a60 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004592:	e005      	b.n	80045a0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004596:	2201      	movs	r2, #1
 8004598:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
}
 80045a0:	bf00      	nop
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	08012c4c 	.word	0x08012c4c
 80045ac:	08004201 	.word	0x08004201
 80045b0:	20004af0 	.word	0x20004af0

080045b4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b089      	sub	sp, #36	; 0x24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3b20      	subs	r3, #32
 80045d2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	2200      	movs	r2, #0
 80045de:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	887a      	ldrh	r2, [r7, #2]
 80045e4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d103      	bne.n	80045f6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	69fa      	ldr	r2, [r7, #28]
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	e003      	b.n	80045fe <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	61fb      	str	r3, [r7, #28]
 800460a:	e009      	b.n	8004620 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	891a      	ldrh	r2, [r3, #8]
 8004610:	887b      	ldrh	r3, [r7, #2]
 8004612:	4413      	add	r3, r2
 8004614:	b29a      	uxth	r2, r3
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	61fb      	str	r3, [r7, #28]
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f2      	bne.n	800460c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004626:	bf00      	nop
 8004628:	bf00      	nop
 800462a:	3724      	adds	r7, #36	; 0x24
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	b21a      	sxth	r2, r3
 8004644:	88fb      	ldrh	r3, [r7, #6]
 8004646:	0a1b      	lsrs	r3, r3, #8
 8004648:	b29b      	uxth	r3, r3
 800464a:	b21b      	sxth	r3, r3
 800464c:	4313      	orrs	r3, r2
 800464e:	b21b      	sxth	r3, r3
 8004650:	b29b      	uxth	r3, r3
}
 8004652:	4618      	mov	r0, r3
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	061a      	lsls	r2, r3, #24
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	0a1b      	lsrs	r3, r3, #8
 8004678:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	0e1b      	lsrs	r3, r3, #24
 8004682:	4313      	orrs	r3, r2
}
 8004684:	4618      	mov	r0, r3
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8004690:	b480      	push	{r7}
 8004692:	b089      	sub	sp, #36	; 0x24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00d      	beq.n	80046d0 <lwip_standard_chksum+0x40>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	dd0a      	ble.n	80046d0 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80046ba:	69fa      	ldr	r2, [r7, #28]
 80046bc:	1c53      	adds	r3, r2, #1
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	f107 030e 	add.w	r3, r7, #14
 80046c4:	3301      	adds	r3, #1
 80046c6:	7812      	ldrb	r2, [r2, #0]
 80046c8:	701a      	strb	r2, [r3, #0]
    len--;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	3b01      	subs	r3, #1
 80046ce:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80046d4:	e00a      	b.n	80046ec <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	1c9a      	adds	r2, r3, #2
 80046da:	61ba      	str	r2, [r7, #24]
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	4413      	add	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]
    len -= 2;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	3b02      	subs	r3, #2
 80046ea:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	dcf1      	bgt.n	80046d6 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	dd04      	ble.n	8004702 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80046f8:	f107 030e 	add.w	r3, r7, #14
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	7812      	ldrb	r2, [r2, #0]
 8004700:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8004702:	89fb      	ldrh	r3, [r7, #14]
 8004704:	461a      	mov	r2, r3
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	4413      	add	r3, r2
 800470a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	0c1a      	lsrs	r2, r3, #16
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	b29b      	uxth	r3, r3
 8004714:	4413      	add	r3, r2
 8004716:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	0c1a      	lsrs	r2, r3, #16
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	b29b      	uxth	r3, r3
 8004720:	4413      	add	r3, r2
 8004722:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d007      	beq.n	800473a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	021b      	lsls	r3, r3, #8
 800472e:	b29a      	uxth	r2, r3
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	0a1b      	lsrs	r3, r3, #8
 8004734:	b2db      	uxtb	r3, r3
 8004736:	4313      	orrs	r3, r2
 8004738:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	b29b      	uxth	r3, r3
}
 800473e:	4618      	mov	r0, r3
 8004740:	3724      	adds	r7, #36	; 0x24
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	460b      	mov	r3, r1
 8004754:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8004756:	887b      	ldrh	r3, [r7, #2]
 8004758:	4619      	mov	r1, r3
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff ff98 	bl	8004690 <lwip_standard_chksum>
 8004760:	4603      	mov	r3, r0
 8004762:	43db      	mvns	r3, r3
 8004764:	b29b      	uxth	r3, r3
}
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004778:	f000 f8d4 	bl	8004924 <mem_init>
  memp_init();
 800477c:	f000 fbda 	bl	8004f34 <memp_init>
  pbuf_init();
  netif_init();
 8004780:	f000 fcd8 	bl	8005134 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004784:	f007 fb12 	bl	800bdac <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004788:	f002 f86a 	bl	8006860 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800478c:	f007 fa84 	bl	800bc98 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80047a2:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <ptr_to_mem+0x20>)
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	88fb      	ldrh	r3, [r7, #6]
 80047a8:	4413      	add	r3, r2
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	200053a8 	.word	0x200053a8

080047bc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80047c4:	4b05      	ldr	r3, [pc, #20]	; (80047dc <mem_to_ptr+0x20>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	b29b      	uxth	r3, r3
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	200053a8 	.word	0x200053a8

080047e0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80047e0:	b590      	push	{r4, r7, lr}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80047e8:	4b45      	ldr	r3, [pc, #276]	; (8004900 <plug_holes+0x120>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d206      	bcs.n	8004800 <plug_holes+0x20>
 80047f2:	4b44      	ldr	r3, [pc, #272]	; (8004904 <plug_holes+0x124>)
 80047f4:	f240 12df 	movw	r2, #479	; 0x1df
 80047f8:	4943      	ldr	r1, [pc, #268]	; (8004908 <plug_holes+0x128>)
 80047fa:	4844      	ldr	r0, [pc, #272]	; (800490c <plug_holes+0x12c>)
 80047fc:	f00a fa70 	bl	800ece0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004800:	4b43      	ldr	r3, [pc, #268]	; (8004910 <plug_holes+0x130>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	429a      	cmp	r2, r3
 8004808:	d306      	bcc.n	8004818 <plug_holes+0x38>
 800480a:	4b3e      	ldr	r3, [pc, #248]	; (8004904 <plug_holes+0x124>)
 800480c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004810:	4940      	ldr	r1, [pc, #256]	; (8004914 <plug_holes+0x134>)
 8004812:	483e      	ldr	r0, [pc, #248]	; (800490c <plug_holes+0x12c>)
 8004814:	f00a fa64 	bl	800ece0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	791b      	ldrb	r3, [r3, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d006      	beq.n	800482e <plug_holes+0x4e>
 8004820:	4b38      	ldr	r3, [pc, #224]	; (8004904 <plug_holes+0x124>)
 8004822:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004826:	493c      	ldr	r1, [pc, #240]	; (8004918 <plug_holes+0x138>)
 8004828:	4838      	ldr	r0, [pc, #224]	; (800490c <plug_holes+0x12c>)
 800482a:	f00a fa59 	bl	800ece0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004836:	d906      	bls.n	8004846 <plug_holes+0x66>
 8004838:	4b32      	ldr	r3, [pc, #200]	; (8004904 <plug_holes+0x124>)
 800483a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800483e:	4937      	ldr	r1, [pc, #220]	; (800491c <plug_holes+0x13c>)
 8004840:	4832      	ldr	r0, [pc, #200]	; (800490c <plug_holes+0x12c>)
 8004842:	f00a fa4d 	bl	800ece0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff ffa4 	bl	8004798 <ptr_to_mem>
 8004850:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	429a      	cmp	r2, r3
 8004858:	d024      	beq.n	80048a4 <plug_holes+0xc4>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	791b      	ldrb	r3, [r3, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d120      	bne.n	80048a4 <plug_holes+0xc4>
 8004862:	4b2b      	ldr	r3, [pc, #172]	; (8004910 <plug_holes+0x130>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	429a      	cmp	r2, r3
 800486a:	d01b      	beq.n	80048a4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800486c:	4b2c      	ldr	r3, [pc, #176]	; (8004920 <plug_holes+0x140>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	429a      	cmp	r2, r3
 8004874:	d102      	bne.n	800487c <plug_holes+0x9c>
      lfree = mem;
 8004876:	4a2a      	ldr	r2, [pc, #168]	; (8004920 <plug_holes+0x140>)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	881a      	ldrh	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800488c:	d00a      	beq.n	80048a4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff ff80 	bl	8004798 <ptr_to_mem>
 8004898:	4604      	mov	r4, r0
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7ff ff8e 	bl	80047bc <mem_to_ptr>
 80048a0:	4603      	mov	r3, r0
 80048a2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	885b      	ldrh	r3, [r3, #2]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff ff75 	bl	8004798 <ptr_to_mem>
 80048ae:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d01f      	beq.n	80048f8 <plug_holes+0x118>
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	791b      	ldrb	r3, [r3, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d11b      	bne.n	80048f8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80048c0:	4b17      	ldr	r3, [pc, #92]	; (8004920 <plug_holes+0x140>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d102      	bne.n	80048d0 <plug_holes+0xf0>
      lfree = pmem;
 80048ca:	4a15      	ldr	r2, [pc, #84]	; (8004920 <plug_holes+0x140>)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	881a      	ldrh	r2, [r3, #0]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80048e0:	d00a      	beq.n	80048f8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff ff56 	bl	8004798 <ptr_to_mem>
 80048ec:	4604      	mov	r4, r0
 80048ee:	68b8      	ldr	r0, [r7, #8]
 80048f0:	f7ff ff64 	bl	80047bc <mem_to_ptr>
 80048f4:	4603      	mov	r3, r0
 80048f6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80048f8:	bf00      	nop
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd90      	pop	{r4, r7, pc}
 8004900:	200053a8 	.word	0x200053a8
 8004904:	080101e4 	.word	0x080101e4
 8004908:	08010214 	.word	0x08010214
 800490c:	0801022c 	.word	0x0801022c
 8004910:	200053ac 	.word	0x200053ac
 8004914:	08010254 	.word	0x08010254
 8004918:	08010270 	.word	0x08010270
 800491c:	0801028c 	.word	0x0801028c
 8004920:	200053b0 	.word	0x200053b0

08004924 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800492a:	4b18      	ldr	r3, [pc, #96]	; (800498c <mem_init+0x68>)
 800492c:	3303      	adds	r3, #3
 800492e:	f023 0303 	bic.w	r3, r3, #3
 8004932:	461a      	mov	r2, r3
 8004934:	4b16      	ldr	r3, [pc, #88]	; (8004990 <mem_init+0x6c>)
 8004936:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004938:	4b15      	ldr	r3, [pc, #84]	; (8004990 <mem_init+0x6c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004944:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004952:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004956:	f7ff ff1f 	bl	8004798 <ptr_to_mem>
 800495a:	4603      	mov	r3, r0
 800495c:	4a0d      	ldr	r2, [pc, #52]	; (8004994 <mem_init+0x70>)
 800495e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004960:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <mem_init+0x70>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2201      	movs	r2, #1
 8004966:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004968:	4b0a      	ldr	r3, [pc, #40]	; (8004994 <mem_init+0x70>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004970:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004972:	4b08      	ldr	r3, [pc, #32]	; (8004994 <mem_init+0x70>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800497a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800497c:	4b04      	ldr	r3, [pc, #16]	; (8004990 <mem_init+0x6c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a05      	ldr	r2, [pc, #20]	; (8004998 <mem_init+0x74>)
 8004982:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004984:	bf00      	nop
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	20004d54 	.word	0x20004d54
 8004990:	200053a8 	.word	0x200053a8
 8004994:	200053ac 	.word	0x200053ac
 8004998:	200053b0 	.word	0x200053b0

0800499c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff ff09 	bl	80047bc <mem_to_ptr>
 80049aa:	4603      	mov	r3, r0
 80049ac:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff fef0 	bl	8004798 <ptr_to_mem>
 80049b8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	885b      	ldrh	r3, [r3, #2]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff feea 	bl	8004798 <ptr_to_mem>
 80049c4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80049ce:	d818      	bhi.n	8004a02 <mem_link_valid+0x66>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	885b      	ldrh	r3, [r3, #2]
 80049d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80049d8:	d813      	bhi.n	8004a02 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80049de:	8afa      	ldrh	r2, [r7, #22]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d004      	beq.n	80049ee <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	8afa      	ldrh	r2, [r7, #22]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d109      	bne.n	8004a02 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80049ee:	4b08      	ldr	r3, [pc, #32]	; (8004a10 <mem_link_valid+0x74>)
 80049f0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d006      	beq.n	8004a06 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	885b      	ldrh	r3, [r3, #2]
 80049fc:	8afa      	ldrh	r2, [r7, #22]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d001      	beq.n	8004a06 <mem_link_valid+0x6a>
    return 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	e000      	b.n	8004a08 <mem_link_valid+0x6c>
  }
  return 1;
 8004a06:	2301      	movs	r3, #1
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	200053ac 	.word	0x200053ac

08004a14 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d04c      	beq.n	8004abc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f003 0303 	and.w	r3, r3, #3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d007      	beq.n	8004a3c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004a2c:	4b25      	ldr	r3, [pc, #148]	; (8004ac4 <mem_free+0xb0>)
 8004a2e:	f240 2273 	movw	r2, #627	; 0x273
 8004a32:	4925      	ldr	r1, [pc, #148]	; (8004ac8 <mem_free+0xb4>)
 8004a34:	4825      	ldr	r0, [pc, #148]	; (8004acc <mem_free+0xb8>)
 8004a36:	f00a f953 	bl	800ece0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004a3a:	e040      	b.n	8004abe <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3b08      	subs	r3, #8
 8004a40:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004a42:	4b23      	ldr	r3, [pc, #140]	; (8004ad0 <mem_free+0xbc>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d306      	bcc.n	8004a5a <mem_free+0x46>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f103 020c 	add.w	r2, r3, #12
 8004a52:	4b20      	ldr	r3, [pc, #128]	; (8004ad4 <mem_free+0xc0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d907      	bls.n	8004a6a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004a5a:	4b1a      	ldr	r3, [pc, #104]	; (8004ac4 <mem_free+0xb0>)
 8004a5c:	f240 227f 	movw	r2, #639	; 0x27f
 8004a60:	491d      	ldr	r1, [pc, #116]	; (8004ad8 <mem_free+0xc4>)
 8004a62:	481a      	ldr	r0, [pc, #104]	; (8004acc <mem_free+0xb8>)
 8004a64:	f00a f93c 	bl	800ece0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004a68:	e029      	b.n	8004abe <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	791b      	ldrb	r3, [r3, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d107      	bne.n	8004a82 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004a72:	4b14      	ldr	r3, [pc, #80]	; (8004ac4 <mem_free+0xb0>)
 8004a74:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004a78:	4918      	ldr	r1, [pc, #96]	; (8004adc <mem_free+0xc8>)
 8004a7a:	4814      	ldr	r0, [pc, #80]	; (8004acc <mem_free+0xb8>)
 8004a7c:	f00a f930 	bl	800ece0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004a80:	e01d      	b.n	8004abe <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f7ff ff8a 	bl	800499c <mem_link_valid>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d107      	bne.n	8004a9e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004a8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ac4 <mem_free+0xb0>)
 8004a90:	f240 2295 	movw	r2, #661	; 0x295
 8004a94:	4912      	ldr	r1, [pc, #72]	; (8004ae0 <mem_free+0xcc>)
 8004a96:	480d      	ldr	r0, [pc, #52]	; (8004acc <mem_free+0xb8>)
 8004a98:	f00a f922 	bl	800ece0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004a9c:	e00f      	b.n	8004abe <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004aa4:	4b0f      	ldr	r3, [pc, #60]	; (8004ae4 <mem_free+0xd0>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d202      	bcs.n	8004ab4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004aae:	4a0d      	ldr	r2, [pc, #52]	; (8004ae4 <mem_free+0xd0>)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f7ff fe93 	bl	80047e0 <plug_holes>
 8004aba:	e000      	b.n	8004abe <mem_free+0xaa>
    return;
 8004abc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	080101e4 	.word	0x080101e4
 8004ac8:	080102b8 	.word	0x080102b8
 8004acc:	0801022c 	.word	0x0801022c
 8004ad0:	200053a8 	.word	0x200053a8
 8004ad4:	200053ac 	.word	0x200053ac
 8004ad8:	080102dc 	.word	0x080102dc
 8004adc:	080102f8 	.word	0x080102f8
 8004ae0:	08010320 	.word	0x08010320
 8004ae4:	200053b0 	.word	0x200053b0

08004ae8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004af4:	887b      	ldrh	r3, [r7, #2]
 8004af6:	3303      	adds	r3, #3
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	f023 0303 	bic.w	r3, r3, #3
 8004afe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004b00:	8bfb      	ldrh	r3, [r7, #30]
 8004b02:	2b0b      	cmp	r3, #11
 8004b04:	d801      	bhi.n	8004b0a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004b06:	230c      	movs	r3, #12
 8004b08:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004b0a:	8bfb      	ldrh	r3, [r7, #30]
 8004b0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b10:	d803      	bhi.n	8004b1a <mem_trim+0x32>
 8004b12:	8bfa      	ldrh	r2, [r7, #30]
 8004b14:	887b      	ldrh	r3, [r7, #2]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d201      	bcs.n	8004b1e <mem_trim+0x36>
    return NULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e0cc      	b.n	8004cb8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004b1e:	4b68      	ldr	r3, [pc, #416]	; (8004cc0 <mem_trim+0x1d8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d304      	bcc.n	8004b32 <mem_trim+0x4a>
 8004b28:	4b66      	ldr	r3, [pc, #408]	; (8004cc4 <mem_trim+0x1dc>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d306      	bcc.n	8004b40 <mem_trim+0x58>
 8004b32:	4b65      	ldr	r3, [pc, #404]	; (8004cc8 <mem_trim+0x1e0>)
 8004b34:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004b38:	4964      	ldr	r1, [pc, #400]	; (8004ccc <mem_trim+0x1e4>)
 8004b3a:	4865      	ldr	r0, [pc, #404]	; (8004cd0 <mem_trim+0x1e8>)
 8004b3c:	f00a f8d0 	bl	800ece0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004b40:	4b5f      	ldr	r3, [pc, #380]	; (8004cc0 <mem_trim+0x1d8>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d304      	bcc.n	8004b54 <mem_trim+0x6c>
 8004b4a:	4b5e      	ldr	r3, [pc, #376]	; (8004cc4 <mem_trim+0x1dc>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d301      	bcc.n	8004b58 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	e0af      	b.n	8004cb8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3b08      	subs	r3, #8
 8004b5c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004b5e:	69b8      	ldr	r0, [r7, #24]
 8004b60:	f7ff fe2c 	bl	80047bc <mem_to_ptr>
 8004b64:	4603      	mov	r3, r0
 8004b66:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	881a      	ldrh	r2, [r3, #0]
 8004b6c:	8afb      	ldrh	r3, [r7, #22]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b08      	subs	r3, #8
 8004b74:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004b76:	8bfa      	ldrh	r2, [r7, #30]
 8004b78:	8abb      	ldrh	r3, [r7, #20]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d906      	bls.n	8004b8c <mem_trim+0xa4>
 8004b7e:	4b52      	ldr	r3, [pc, #328]	; (8004cc8 <mem_trim+0x1e0>)
 8004b80:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004b84:	4953      	ldr	r1, [pc, #332]	; (8004cd4 <mem_trim+0x1ec>)
 8004b86:	4852      	ldr	r0, [pc, #328]	; (8004cd0 <mem_trim+0x1e8>)
 8004b88:	f00a f8aa 	bl	800ece0 <iprintf>
  if (newsize > size) {
 8004b8c:	8bfa      	ldrh	r2, [r7, #30]
 8004b8e:	8abb      	ldrh	r3, [r7, #20]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d901      	bls.n	8004b98 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	e08f      	b.n	8004cb8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004b98:	8bfa      	ldrh	r2, [r7, #30]
 8004b9a:	8abb      	ldrh	r3, [r7, #20]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d101      	bne.n	8004ba4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	e089      	b.n	8004cb8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff fdf5 	bl	8004798 <ptr_to_mem>
 8004bae:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	791b      	ldrb	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d13f      	bne.n	8004c38 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004bc0:	d106      	bne.n	8004bd0 <mem_trim+0xe8>
 8004bc2:	4b41      	ldr	r3, [pc, #260]	; (8004cc8 <mem_trim+0x1e0>)
 8004bc4:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004bc8:	4943      	ldr	r1, [pc, #268]	; (8004cd8 <mem_trim+0x1f0>)
 8004bca:	4841      	ldr	r0, [pc, #260]	; (8004cd0 <mem_trim+0x1e8>)
 8004bcc:	f00a f888 	bl	800ece0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004bd6:	8afa      	ldrh	r2, [r7, #22]
 8004bd8:	8bfb      	ldrh	r3, [r7, #30]
 8004bda:	4413      	add	r3, r2
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3308      	adds	r3, #8
 8004be0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004be2:	4b3e      	ldr	r3, [pc, #248]	; (8004cdc <mem_trim+0x1f4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d106      	bne.n	8004bfa <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004bec:	89fb      	ldrh	r3, [r7, #14]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff fdd2 	bl	8004798 <ptr_to_mem>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	4a39      	ldr	r2, [pc, #228]	; (8004cdc <mem_trim+0x1f4>)
 8004bf8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004bfa:	89fb      	ldrh	r3, [r7, #14]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fdcb 	bl	8004798 <ptr_to_mem>
 8004c02:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	2200      	movs	r2, #0
 8004c08:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	89ba      	ldrh	r2, [r7, #12]
 8004c0e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	8afa      	ldrh	r2, [r7, #22]
 8004c14:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	89fa      	ldrh	r2, [r7, #14]
 8004c1a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c24:	d047      	beq.n	8004cb6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff fdb4 	bl	8004798 <ptr_to_mem>
 8004c30:	4602      	mov	r2, r0
 8004c32:	89fb      	ldrh	r3, [r7, #14]
 8004c34:	8053      	strh	r3, [r2, #2]
 8004c36:	e03e      	b.n	8004cb6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004c38:	8bfb      	ldrh	r3, [r7, #30]
 8004c3a:	f103 0214 	add.w	r2, r3, #20
 8004c3e:	8abb      	ldrh	r3, [r7, #20]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d838      	bhi.n	8004cb6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004c44:	8afa      	ldrh	r2, [r7, #22]
 8004c46:	8bfb      	ldrh	r3, [r7, #30]
 8004c48:	4413      	add	r3, r2
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c58:	d106      	bne.n	8004c68 <mem_trim+0x180>
 8004c5a:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <mem_trim+0x1e0>)
 8004c5c:	f240 3216 	movw	r2, #790	; 0x316
 8004c60:	491d      	ldr	r1, [pc, #116]	; (8004cd8 <mem_trim+0x1f0>)
 8004c62:	481b      	ldr	r0, [pc, #108]	; (8004cd0 <mem_trim+0x1e8>)
 8004c64:	f00a f83c 	bl	800ece0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004c68:	89fb      	ldrh	r3, [r7, #14]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff fd94 	bl	8004798 <ptr_to_mem>
 8004c70:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004c72:	4b1a      	ldr	r3, [pc, #104]	; (8004cdc <mem_trim+0x1f4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d202      	bcs.n	8004c82 <mem_trim+0x19a>
      lfree = mem2;
 8004c7c:	4a17      	ldr	r2, [pc, #92]	; (8004cdc <mem_trim+0x1f4>)
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	2200      	movs	r2, #0
 8004c86:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	881a      	ldrh	r2, [r3, #0]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	8afa      	ldrh	r2, [r7, #22]
 8004c94:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	89fa      	ldrh	r2, [r7, #14]
 8004c9a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ca4:	d007      	beq.n	8004cb6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff fd74 	bl	8004798 <ptr_to_mem>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	89fb      	ldrh	r3, [r7, #14]
 8004cb4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004cb6:	687b      	ldr	r3, [r7, #4]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3720      	adds	r7, #32
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	200053a8 	.word	0x200053a8
 8004cc4:	200053ac 	.word	0x200053ac
 8004cc8:	080101e4 	.word	0x080101e4
 8004ccc:	08010354 	.word	0x08010354
 8004cd0:	0801022c 	.word	0x0801022c
 8004cd4:	0801036c 	.word	0x0801036c
 8004cd8:	0801038c 	.word	0x0801038c
 8004cdc:	200053b0 	.word	0x200053b0

08004ce0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004cea:	88fb      	ldrh	r3, [r7, #6]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <mem_malloc+0x14>
    return NULL;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	e0d9      	b.n	8004ea8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004cf4:	88fb      	ldrh	r3, [r7, #6]
 8004cf6:	3303      	adds	r3, #3
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f023 0303 	bic.w	r3, r3, #3
 8004cfe:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004d00:	8bbb      	ldrh	r3, [r7, #28]
 8004d02:	2b0b      	cmp	r3, #11
 8004d04:	d801      	bhi.n	8004d0a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004d06:	230c      	movs	r3, #12
 8004d08:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004d0a:	8bbb      	ldrh	r3, [r7, #28]
 8004d0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d10:	d803      	bhi.n	8004d1a <mem_malloc+0x3a>
 8004d12:	8bba      	ldrh	r2, [r7, #28]
 8004d14:	88fb      	ldrh	r3, [r7, #6]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d201      	bcs.n	8004d1e <mem_malloc+0x3e>
    return NULL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	e0c4      	b.n	8004ea8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004d1e:	4b64      	ldr	r3, [pc, #400]	; (8004eb0 <mem_malloc+0x1d0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff fd4a 	bl	80047bc <mem_to_ptr>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	83fb      	strh	r3, [r7, #30]
 8004d2c:	e0b4      	b.n	8004e98 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004d2e:	8bfb      	ldrh	r3, [r7, #30]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff fd31 	bl	8004798 <ptr_to_mem>
 8004d36:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	791b      	ldrb	r3, [r3, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f040 80a4 	bne.w	8004e8a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	8bfb      	ldrh	r3, [r7, #30]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	f1a3 0208 	sub.w	r2, r3, #8
 8004d50:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004d52:	429a      	cmp	r2, r3
 8004d54:	f0c0 8099 	bcc.w	8004e8a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	8bfb      	ldrh	r3, [r7, #30]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	f1a3 0208 	sub.w	r2, r3, #8
 8004d66:	8bbb      	ldrh	r3, [r7, #28]
 8004d68:	3314      	adds	r3, #20
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d333      	bcc.n	8004dd6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004d6e:	8bfa      	ldrh	r2, [r7, #30]
 8004d70:	8bbb      	ldrh	r3, [r7, #28]
 8004d72:	4413      	add	r3, r2
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	3308      	adds	r3, #8
 8004d78:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004d7a:	8a7b      	ldrh	r3, [r7, #18]
 8004d7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d80:	d106      	bne.n	8004d90 <mem_malloc+0xb0>
 8004d82:	4b4c      	ldr	r3, [pc, #304]	; (8004eb4 <mem_malloc+0x1d4>)
 8004d84:	f240 3287 	movw	r2, #903	; 0x387
 8004d88:	494b      	ldr	r1, [pc, #300]	; (8004eb8 <mem_malloc+0x1d8>)
 8004d8a:	484c      	ldr	r0, [pc, #304]	; (8004ebc <mem_malloc+0x1dc>)
 8004d8c:	f009 ffa8 	bl	800ece0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004d90:	8a7b      	ldrh	r3, [r7, #18]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff fd00 	bl	8004798 <ptr_to_mem>
 8004d98:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	881a      	ldrh	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8bfa      	ldrh	r2, [r7, #30]
 8004dac:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	8a7a      	ldrh	r2, [r7, #18]
 8004db2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2201      	movs	r2, #1
 8004db8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004dc2:	d00b      	beq.n	8004ddc <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff fce5 	bl	8004798 <ptr_to_mem>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	8a7b      	ldrh	r3, [r7, #18]
 8004dd2:	8053      	strh	r3, [r2, #2]
 8004dd4:	e002      	b.n	8004ddc <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004ddc:	4b34      	ldr	r3, [pc, #208]	; (8004eb0 <mem_malloc+0x1d0>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d127      	bne.n	8004e36 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004de6:	4b32      	ldr	r3, [pc, #200]	; (8004eb0 <mem_malloc+0x1d0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004dec:	e005      	b.n	8004dfa <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff fcd0 	bl	8004798 <ptr_to_mem>
 8004df8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	791b      	ldrb	r3, [r3, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d004      	beq.n	8004e0c <mem_malloc+0x12c>
 8004e02:	4b2f      	ldr	r3, [pc, #188]	; (8004ec0 <mem_malloc+0x1e0>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d1f0      	bne.n	8004dee <mem_malloc+0x10e>
          }
          lfree = cur;
 8004e0c:	4a28      	ldr	r2, [pc, #160]	; (8004eb0 <mem_malloc+0x1d0>)
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004e12:	4b27      	ldr	r3, [pc, #156]	; (8004eb0 <mem_malloc+0x1d0>)
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	4b2a      	ldr	r3, [pc, #168]	; (8004ec0 <mem_malloc+0x1e0>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d00b      	beq.n	8004e36 <mem_malloc+0x156>
 8004e1e:	4b24      	ldr	r3, [pc, #144]	; (8004eb0 <mem_malloc+0x1d0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	791b      	ldrb	r3, [r3, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d006      	beq.n	8004e36 <mem_malloc+0x156>
 8004e28:	4b22      	ldr	r3, [pc, #136]	; (8004eb4 <mem_malloc+0x1d4>)
 8004e2a:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004e2e:	4925      	ldr	r1, [pc, #148]	; (8004ec4 <mem_malloc+0x1e4>)
 8004e30:	4822      	ldr	r0, [pc, #136]	; (8004ebc <mem_malloc+0x1dc>)
 8004e32:	f009 ff55 	bl	800ece0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004e36:	8bba      	ldrh	r2, [r7, #28]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3308      	adds	r3, #8
 8004e3e:	4a20      	ldr	r2, [pc, #128]	; (8004ec0 <mem_malloc+0x1e0>)
 8004e40:	6812      	ldr	r2, [r2, #0]
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d906      	bls.n	8004e54 <mem_malloc+0x174>
 8004e46:	4b1b      	ldr	r3, [pc, #108]	; (8004eb4 <mem_malloc+0x1d4>)
 8004e48:	f240 32b9 	movw	r2, #953	; 0x3b9
 8004e4c:	491e      	ldr	r1, [pc, #120]	; (8004ec8 <mem_malloc+0x1e8>)
 8004e4e:	481b      	ldr	r0, [pc, #108]	; (8004ebc <mem_malloc+0x1dc>)
 8004e50:	f009 ff46 	bl	800ece0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f003 0303 	and.w	r3, r3, #3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d006      	beq.n	8004e6c <mem_malloc+0x18c>
 8004e5e:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <mem_malloc+0x1d4>)
 8004e60:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004e64:	4919      	ldr	r1, [pc, #100]	; (8004ecc <mem_malloc+0x1ec>)
 8004e66:	4815      	ldr	r0, [pc, #84]	; (8004ebc <mem_malloc+0x1dc>)
 8004e68:	f009 ff3a 	bl	800ece0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d006      	beq.n	8004e84 <mem_malloc+0x1a4>
 8004e76:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <mem_malloc+0x1d4>)
 8004e78:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004e7c:	4914      	ldr	r1, [pc, #80]	; (8004ed0 <mem_malloc+0x1f0>)
 8004e7e:	480f      	ldr	r0, [pc, #60]	; (8004ebc <mem_malloc+0x1dc>)
 8004e80:	f009 ff2e 	bl	800ece0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	3308      	adds	r3, #8
 8004e88:	e00e      	b.n	8004ea8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004e8a:	8bfb      	ldrh	r3, [r7, #30]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff fc83 	bl	8004798 <ptr_to_mem>
 8004e92:	4603      	mov	r3, r0
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004e98:	8bfa      	ldrh	r2, [r7, #30]
 8004e9a:	8bbb      	ldrh	r3, [r7, #28]
 8004e9c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	f4ff af44 	bcc.w	8004d2e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3720      	adds	r7, #32
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	200053b0 	.word	0x200053b0
 8004eb4:	080101e4 	.word	0x080101e4
 8004eb8:	0801038c 	.word	0x0801038c
 8004ebc:	0801022c 	.word	0x0801022c
 8004ec0:	200053ac 	.word	0x200053ac
 8004ec4:	080103a0 	.word	0x080103a0
 8004ec8:	080103bc 	.word	0x080103bc
 8004ecc:	080103ec 	.word	0x080103ec
 8004ed0:	0801041c 	.word	0x0801041c

08004ed4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	3303      	adds	r3, #3
 8004eea:	f023 0303 	bic.w	r3, r3, #3
 8004eee:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	e011      	b.n	8004f1a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4413      	add	r3, r2
 8004f12:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	3301      	adds	r3, #1
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	885b      	ldrh	r3, [r3, #2]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4293      	cmp	r3, r2
 8004f24:	dbe7      	blt.n	8004ef6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004f26:	bf00      	nop
 8004f28:	bf00      	nop
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	80fb      	strh	r3, [r7, #6]
 8004f3e:	e009      	b.n	8004f54 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004f40:	88fb      	ldrh	r3, [r7, #6]
 8004f42:	4a08      	ldr	r2, [pc, #32]	; (8004f64 <memp_init+0x30>)
 8004f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff ffc3 	bl	8004ed4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004f4e:	88fb      	ldrh	r3, [r7, #6]
 8004f50:	3301      	adds	r3, #1
 8004f52:	80fb      	strh	r3, [r7, #6]
 8004f54:	88fb      	ldrh	r3, [r7, #6]
 8004f56:	2b09      	cmp	r3, #9
 8004f58:	d9f2      	bls.n	8004f40 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004f5a:	bf00      	nop
 8004f5c:	bf00      	nop
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	08012cd0 	.word	0x08012cd0

08004f68 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d012      	beq.n	8004fa4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	6812      	ldr	r2, [r2, #0]
 8004f86:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d006      	beq.n	8004fa0 <do_memp_malloc_pool+0x38>
 8004f92:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <do_memp_malloc_pool+0x48>)
 8004f94:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004f98:	4906      	ldr	r1, [pc, #24]	; (8004fb4 <do_memp_malloc_pool+0x4c>)
 8004f9a:	4807      	ldr	r0, [pc, #28]	; (8004fb8 <do_memp_malloc_pool+0x50>)
 8004f9c:	f009 fea0 	bl	800ece0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	e000      	b.n	8004fa6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	08010440 	.word	0x08010440
 8004fb4:	08010470 	.word	0x08010470
 8004fb8:	08010494 	.word	0x08010494

08004fbc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <memp_malloc_pool+0x1c>
 8004fca:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <memp_malloc_pool+0x38>)
 8004fcc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8004fd0:	4909      	ldr	r1, [pc, #36]	; (8004ff8 <memp_malloc_pool+0x3c>)
 8004fd2:	480a      	ldr	r0, [pc, #40]	; (8004ffc <memp_malloc_pool+0x40>)
 8004fd4:	f009 fe84 	bl	800ece0 <iprintf>
  if (desc == NULL) {
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <memp_malloc_pool+0x26>
    return NULL;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e003      	b.n	8004fea <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7ff ffc0 	bl	8004f68 <do_memp_malloc_pool>
 8004fe8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	08010440 	.word	0x08010440
 8004ff8:	080104bc 	.word	0x080104bc
 8004ffc:	08010494 	.word	0x08010494

08005000 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	2b09      	cmp	r3, #9
 800500e:	d908      	bls.n	8005022 <memp_malloc+0x22>
 8005010:	4b0a      	ldr	r3, [pc, #40]	; (800503c <memp_malloc+0x3c>)
 8005012:	f240 1257 	movw	r2, #343	; 0x157
 8005016:	490a      	ldr	r1, [pc, #40]	; (8005040 <memp_malloc+0x40>)
 8005018:	480a      	ldr	r0, [pc, #40]	; (8005044 <memp_malloc+0x44>)
 800501a:	f009 fe61 	bl	800ece0 <iprintf>
 800501e:	2300      	movs	r3, #0
 8005020:	e008      	b.n	8005034 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005022:	79fb      	ldrb	r3, [r7, #7]
 8005024:	4a08      	ldr	r2, [pc, #32]	; (8005048 <memp_malloc+0x48>)
 8005026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff ff9c 	bl	8004f68 <do_memp_malloc_pool>
 8005030:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005032:	68fb      	ldr	r3, [r7, #12]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	08010440 	.word	0x08010440
 8005040:	080104d0 	.word	0x080104d0
 8005044:	08010494 	.word	0x08010494
 8005048:	08012cd0 	.word	0x08012cd0

0800504c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	f003 0303 	and.w	r3, r3, #3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d006      	beq.n	800506e <do_memp_free_pool+0x22>
 8005060:	4b0a      	ldr	r3, [pc, #40]	; (800508c <do_memp_free_pool+0x40>)
 8005062:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8005066:	490a      	ldr	r1, [pc, #40]	; (8005090 <do_memp_free_pool+0x44>)
 8005068:	480a      	ldr	r0, [pc, #40]	; (8005094 <do_memp_free_pool+0x48>)
 800506a:	f009 fe39 	bl	800ece0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005084:	bf00      	nop
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	08010440 	.word	0x08010440
 8005090:	080104f0 	.word	0x080104f0
 8005094:	08010494 	.word	0x08010494

08005098 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d106      	bne.n	80050b6 <memp_free_pool+0x1e>
 80050a8:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <memp_free_pool+0x3c>)
 80050aa:	f240 1295 	movw	r2, #405	; 0x195
 80050ae:	490a      	ldr	r1, [pc, #40]	; (80050d8 <memp_free_pool+0x40>)
 80050b0:	480a      	ldr	r0, [pc, #40]	; (80050dc <memp_free_pool+0x44>)
 80050b2:	f009 fe15 	bl	800ece0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d007      	beq.n	80050cc <memp_free_pool+0x34>
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d004      	beq.n	80050cc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80050c2:	6839      	ldr	r1, [r7, #0]
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7ff ffc1 	bl	800504c <do_memp_free_pool>
 80050ca:	e000      	b.n	80050ce <memp_free_pool+0x36>
    return;
 80050cc:	bf00      	nop
}
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	08010440 	.word	0x08010440
 80050d8:	080104bc 	.word	0x080104bc
 80050dc:	08010494 	.word	0x08010494

080050e0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	4603      	mov	r3, r0
 80050e8:	6039      	str	r1, [r7, #0]
 80050ea:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80050ec:	79fb      	ldrb	r3, [r7, #7]
 80050ee:	2b09      	cmp	r3, #9
 80050f0:	d907      	bls.n	8005102 <memp_free+0x22>
 80050f2:	4b0c      	ldr	r3, [pc, #48]	; (8005124 <memp_free+0x44>)
 80050f4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80050f8:	490b      	ldr	r1, [pc, #44]	; (8005128 <memp_free+0x48>)
 80050fa:	480c      	ldr	r0, [pc, #48]	; (800512c <memp_free+0x4c>)
 80050fc:	f009 fdf0 	bl	800ece0 <iprintf>
 8005100:	e00c      	b.n	800511c <memp_free+0x3c>

  if (mem == NULL) {
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d008      	beq.n	800511a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005108:	79fb      	ldrb	r3, [r7, #7]
 800510a:	4a09      	ldr	r2, [pc, #36]	; (8005130 <memp_free+0x50>)
 800510c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005110:	6839      	ldr	r1, [r7, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff ff9a 	bl	800504c <do_memp_free_pool>
 8005118:	e000      	b.n	800511c <memp_free+0x3c>
    return;
 800511a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	08010440 	.word	0x08010440
 8005128:	08010510 	.word	0x08010510
 800512c:	08010494 	.word	0x08010494
 8005130:	08012cd0 	.word	0x08012cd0

08005134 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005138:	bf00      	nop
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
	...

08005144 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d108      	bne.n	800516a <netif_add+0x26>
 8005158:	4b57      	ldr	r3, [pc, #348]	; (80052b8 <netif_add+0x174>)
 800515a:	f240 1227 	movw	r2, #295	; 0x127
 800515e:	4957      	ldr	r1, [pc, #348]	; (80052bc <netif_add+0x178>)
 8005160:	4857      	ldr	r0, [pc, #348]	; (80052c0 <netif_add+0x17c>)
 8005162:	f009 fdbd 	bl	800ece0 <iprintf>
 8005166:	2300      	movs	r3, #0
 8005168:	e0a2      	b.n	80052b0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	2b00      	cmp	r3, #0
 800516e:	d108      	bne.n	8005182 <netif_add+0x3e>
 8005170:	4b51      	ldr	r3, [pc, #324]	; (80052b8 <netif_add+0x174>)
 8005172:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005176:	4953      	ldr	r1, [pc, #332]	; (80052c4 <netif_add+0x180>)
 8005178:	4851      	ldr	r0, [pc, #324]	; (80052c0 <netif_add+0x17c>)
 800517a:	f009 fdb1 	bl	800ece0 <iprintf>
 800517e:	2300      	movs	r3, #0
 8005180:	e096      	b.n	80052b0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005188:	4b4f      	ldr	r3, [pc, #316]	; (80052c8 <netif_add+0x184>)
 800518a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005192:	4b4d      	ldr	r3, [pc, #308]	; (80052c8 <netif_add+0x184>)
 8005194:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800519c:	4b4a      	ldr	r3, [pc, #296]	; (80052c8 <netif_add+0x184>)
 800519e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4a45      	ldr	r2, [pc, #276]	; (80052cc <netif_add+0x188>)
 80051b6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a3a      	ldr	r2, [r7, #32]
 80051d0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80051d2:	4b3f      	ldr	r3, [pc, #252]	; (80052d0 <netif_add+0x18c>)
 80051d4:	781a      	ldrb	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 f917 	bl	800541c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	4798      	blx	r3
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <netif_add+0xba>
    return NULL;
 80051fa:	2300      	movs	r3, #0
 80051fc:	e058      	b.n	80052b0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005204:	2bff      	cmp	r3, #255	; 0xff
 8005206:	d103      	bne.n	8005210 <netif_add+0xcc>
        netif->num = 0;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005214:	4b2f      	ldr	r3, [pc, #188]	; (80052d4 <netif_add+0x190>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	e02b      	b.n	8005274 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	429a      	cmp	r2, r3
 8005222:	d106      	bne.n	8005232 <netif_add+0xee>
 8005224:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <netif_add+0x174>)
 8005226:	f240 128b 	movw	r2, #395	; 0x18b
 800522a:	492b      	ldr	r1, [pc, #172]	; (80052d8 <netif_add+0x194>)
 800522c:	4824      	ldr	r0, [pc, #144]	; (80052c0 <netif_add+0x17c>)
 800522e:	f009 fd57 	bl	800ece0 <iprintf>
        num_netifs++;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	3301      	adds	r3, #1
 8005236:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	2bff      	cmp	r3, #255	; 0xff
 800523c:	dd06      	ble.n	800524c <netif_add+0x108>
 800523e:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <netif_add+0x174>)
 8005240:	f240 128d 	movw	r2, #397	; 0x18d
 8005244:	4925      	ldr	r1, [pc, #148]	; (80052dc <netif_add+0x198>)
 8005246:	481e      	ldr	r0, [pc, #120]	; (80052c0 <netif_add+0x17c>)
 8005248:	f009 fd4a 	bl	800ece0 <iprintf>
        if (netif2->num == netif->num) {
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005258:	429a      	cmp	r2, r3
 800525a:	d108      	bne.n	800526e <netif_add+0x12a>
          netif->num++;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005262:	3301      	adds	r3, #1
 8005264:	b2da      	uxtb	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800526c:	e005      	b.n	800527a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1d0      	bne.n	800521c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1be      	bne.n	80051fe <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005286:	2bfe      	cmp	r3, #254	; 0xfe
 8005288:	d103      	bne.n	8005292 <netif_add+0x14e>
    netif_num = 0;
 800528a:	4b11      	ldr	r3, [pc, #68]	; (80052d0 <netif_add+0x18c>)
 800528c:	2200      	movs	r2, #0
 800528e:	701a      	strb	r2, [r3, #0]
 8005290:	e006      	b.n	80052a0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005298:	3301      	adds	r3, #1
 800529a:	b2da      	uxtb	r2, r3
 800529c:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <netif_add+0x18c>)
 800529e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80052a0:	4b0c      	ldr	r3, [pc, #48]	; (80052d4 <netif_add+0x190>)
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80052a8:	4a0a      	ldr	r2, [pc, #40]	; (80052d4 <netif_add+0x190>)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80052ae:	68fb      	ldr	r3, [r7, #12]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	0801052c 	.word	0x0801052c
 80052bc:	080105c0 	.word	0x080105c0
 80052c0:	0801057c 	.word	0x0801057c
 80052c4:	080105dc 	.word	0x080105dc
 80052c8:	08012d38 	.word	0x08012d38
 80052cc:	080056f7 	.word	0x080056f7
 80052d0:	20008320 	.word	0x20008320
 80052d4:	20008318 	.word	0x20008318
 80052d8:	08010600 	.word	0x08010600
 80052dc:	08010614 	.word	0x08010614

080052e0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80052ea:	6839      	ldr	r1, [r7, #0]
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f002 fdff 	bl	8007ef0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80052f2:	6839      	ldr	r1, [r7, #0]
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f007 f98d 	bl	800c614 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
 80052fa:	6839      	ldr	r1, [r7, #0]
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f001 fa7f 	bl	8006800 <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
}
 8005302:	bf00      	nop
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d106      	bne.n	800532c <netif_do_set_ipaddr+0x20>
 800531e:	4b1d      	ldr	r3, [pc, #116]	; (8005394 <netif_do_set_ipaddr+0x88>)
 8005320:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005324:	491c      	ldr	r1, [pc, #112]	; (8005398 <netif_do_set_ipaddr+0x8c>)
 8005326:	481d      	ldr	r0, [pc, #116]	; (800539c <netif_do_set_ipaddr+0x90>)
 8005328:	f009 fcda 	bl	800ece0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <netif_do_set_ipaddr+0x34>
 8005332:	4b18      	ldr	r3, [pc, #96]	; (8005394 <netif_do_set_ipaddr+0x88>)
 8005334:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005338:	4917      	ldr	r1, [pc, #92]	; (8005398 <netif_do_set_ipaddr+0x8c>)
 800533a:	4818      	ldr	r0, [pc, #96]	; (800539c <netif_do_set_ipaddr+0x90>)
 800533c:	f009 fcd0 	bl	800ece0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3304      	adds	r3, #4
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d01c      	beq.n	8005388 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3304      	adds	r3, #4
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800535e:	f107 0314 	add.w	r3, r7, #20
 8005362:	4619      	mov	r1, r3
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff ffbb 	bl	80052e0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <netif_do_set_ipaddr+0x6a>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	e000      	b.n	8005378 <netif_do_set_ipaddr+0x6c>
 8005376:	2300      	movs	r3, #0
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800537c:	2101      	movs	r1, #1
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 f8d2 	bl	8005528 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005384:	2301      	movs	r3, #1
 8005386:	e000      	b.n	800538a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	0801052c 	.word	0x0801052c
 8005398:	08010644 	.word	0x08010644
 800539c:	0801057c 	.word	0x0801057c

080053a0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3308      	adds	r3, #8
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d00a      	beq.n	80053d0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <netif_do_set_netmask+0x26>
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	e000      	b.n	80053c8 <netif_do_set_netmask+0x28>
 80053c6:	2300      	movs	r3, #0
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80053de:	b480      	push	{r7}
 80053e0:	b085      	sub	sp, #20
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	330c      	adds	r3, #12
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d00a      	beq.n	800540e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d002      	beq.n	8005404 <netif_do_set_gw+0x26>
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	e000      	b.n	8005406 <netif_do_set_gw+0x28>
 8005404:	2300      	movs	r3, #0
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800542a:	2300      	movs	r3, #0
 800542c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800542e:	2300      	movs	r3, #0
 8005430:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005438:	4b1c      	ldr	r3, [pc, #112]	; (80054ac <netif_set_addr+0x90>)
 800543a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005442:	4b1a      	ldr	r3, [pc, #104]	; (80054ac <netif_set_addr+0x90>)
 8005444:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800544c:	4b17      	ldr	r3, [pc, #92]	; (80054ac <netif_set_addr+0x90>)
 800544e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <netif_set_addr+0x42>
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <netif_set_addr+0x46>
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <netif_set_addr+0x48>
 8005462:	2300      	movs	r3, #0
 8005464:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d006      	beq.n	800547a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800546c:	f107 0310 	add.w	r3, r7, #16
 8005470:	461a      	mov	r2, r3
 8005472:	68b9      	ldr	r1, [r7, #8]
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f7ff ff49 	bl	800530c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800547a:	69fa      	ldr	r2, [r7, #28]
 800547c:	6879      	ldr	r1, [r7, #4]
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f7ff ff8e 	bl	80053a0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005484:	69ba      	ldr	r2, [r7, #24]
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f7ff ffa8 	bl	80053de <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d106      	bne.n	80054a2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005494:	f107 0310 	add.w	r3, r7, #16
 8005498:	461a      	mov	r2, r3
 800549a:	68b9      	ldr	r1, [r7, #8]
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f7ff ff35 	bl	800530c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80054a2:	bf00      	nop
 80054a4:	3720      	adds	r7, #32
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	08012d38 	.word	0x08012d38

080054b0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80054b8:	4a04      	ldr	r2, [pc, #16]	; (80054cc <netif_set_default+0x1c>)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	2000831c 	.word	0x2000831c

080054d0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d107      	bne.n	80054ee <netif_set_up+0x1e>
 80054de:	4b0f      	ldr	r3, [pc, #60]	; (800551c <netif_set_up+0x4c>)
 80054e0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80054e4:	490e      	ldr	r1, [pc, #56]	; (8005520 <netif_set_up+0x50>)
 80054e6:	480f      	ldr	r0, [pc, #60]	; (8005524 <netif_set_up+0x54>)
 80054e8:	f009 fbfa 	bl	800ece0 <iprintf>
 80054ec:	e013      	b.n	8005516 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10c      	bne.n	8005516 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005502:	f043 0301 	orr.w	r3, r3, #1
 8005506:	b2da      	uxtb	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800550e:	2103      	movs	r1, #3
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f809 	bl	8005528 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	0801052c 	.word	0x0801052c
 8005520:	080106b4 	.word	0x080106b4
 8005524:	0801057c 	.word	0x0801057c

08005528 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	460b      	mov	r3, r1
 8005532:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <netif_issue_reports+0x20>
 800553a:	4b18      	ldr	r3, [pc, #96]	; (800559c <netif_issue_reports+0x74>)
 800553c:	f240 326d 	movw	r2, #877	; 0x36d
 8005540:	4917      	ldr	r1, [pc, #92]	; (80055a0 <netif_issue_reports+0x78>)
 8005542:	4818      	ldr	r0, [pc, #96]	; (80055a4 <netif_issue_reports+0x7c>)
 8005544:	f009 fbcc 	bl	800ece0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b00      	cmp	r3, #0
 8005554:	d01e      	beq.n	8005594 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800555c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005560:	2b00      	cmp	r3, #0
 8005562:	d017      	beq.n	8005594 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d013      	beq.n	8005596 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3304      	adds	r3, #4
 8005572:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00e      	beq.n	8005596 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d007      	beq.n	8005596 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3304      	adds	r3, #4
 800558a:	4619      	mov	r1, r3
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f007 ffab 	bl	800d4e8 <etharp_request>
 8005592:	e000      	b.n	8005596 <netif_issue_reports+0x6e>
    return;
 8005594:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	0801052c 	.word	0x0801052c
 80055a0:	080106d0 	.word	0x080106d0
 80055a4:	0801057c 	.word	0x0801057c

080055a8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d107      	bne.n	80055c6 <netif_set_down+0x1e>
 80055b6:	4b12      	ldr	r3, [pc, #72]	; (8005600 <netif_set_down+0x58>)
 80055b8:	f240 329b 	movw	r2, #923	; 0x39b
 80055bc:	4911      	ldr	r1, [pc, #68]	; (8005604 <netif_set_down+0x5c>)
 80055be:	4812      	ldr	r0, [pc, #72]	; (8005608 <netif_set_down+0x60>)
 80055c0:	f009 fb8e 	bl	800ece0 <iprintf>
 80055c4:	e019      	b.n	80055fa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d012      	beq.n	80055fa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80055da:	f023 0301 	bic.w	r3, r3, #1
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f007 fb35 	bl	800cc64 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	0801052c 	.word	0x0801052c
 8005604:	080106f4 	.word	0x080106f4
 8005608:	0801057c 	.word	0x0801057c

0800560c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d107      	bne.n	800562a <netif_set_link_up+0x1e>
 800561a:	4b13      	ldr	r3, [pc, #76]	; (8005668 <netif_set_link_up+0x5c>)
 800561c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8005620:	4912      	ldr	r1, [pc, #72]	; (800566c <netif_set_link_up+0x60>)
 8005622:	4813      	ldr	r0, [pc, #76]	; (8005670 <netif_set_link_up+0x64>)
 8005624:	f009 fb5c 	bl	800ece0 <iprintf>
 8005628:	e01b      	b.n	8005662 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	d114      	bne.n	8005662 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800563e:	f043 0304 	orr.w	r3, r3, #4
 8005642:	b2da      	uxtb	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800564a:	2103      	movs	r1, #3
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff ff6b 	bl	8005528 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <netif_set_link_up+0x56>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	0801052c 	.word	0x0801052c
 800566c:	08010714 	.word	0x08010714
 8005670:	0801057c 	.word	0x0801057c

08005674 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d107      	bne.n	8005692 <netif_set_link_down+0x1e>
 8005682:	4b11      	ldr	r3, [pc, #68]	; (80056c8 <netif_set_link_down+0x54>)
 8005684:	f240 4206 	movw	r2, #1030	; 0x406
 8005688:	4910      	ldr	r1, [pc, #64]	; (80056cc <netif_set_link_down+0x58>)
 800568a:	4811      	ldr	r0, [pc, #68]	; (80056d0 <netif_set_link_down+0x5c>)
 800568c:	f009 fb28 	bl	800ece0 <iprintf>
 8005690:	e017      	b.n	80056c2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d010      	beq.n	80056c2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80056a6:	f023 0304 	bic.w	r3, r3, #4
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <netif_set_link_down+0x4e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	0801052c 	.word	0x0801052c
 80056cc:	08010738 	.word	0x08010738
 80056d0:	0801057c 	.word	0x0801057c

080056d4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	61da      	str	r2, [r3, #28]
  }
}
 80056ea:	bf00      	nop
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b085      	sub	sp, #20
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005702:	f06f 030b 	mvn.w	r3, #11
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
	...

08005714 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	4603      	mov	r3, r0
 800571c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800571e:	79fb      	ldrb	r3, [r7, #7]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d013      	beq.n	800574c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005724:	4b0d      	ldr	r3, [pc, #52]	; (800575c <netif_get_by_index+0x48>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	e00c      	b.n	8005746 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005732:	3301      	adds	r3, #1
 8005734:	b2db      	uxtb	r3, r3
 8005736:	79fa      	ldrb	r2, [r7, #7]
 8005738:	429a      	cmp	r2, r3
 800573a:	d101      	bne.n	8005740 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	e006      	b.n	800574e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1ef      	bne.n	800572c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	20008318 	.word	0x20008318

08005760 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005766:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <pbuf_free_ooseq+0x38>)
 8005768:	2200      	movs	r2, #0
 800576a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800576c:	4b0b      	ldr	r3, [pc, #44]	; (800579c <pbuf_free_ooseq+0x3c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	607b      	str	r3, [r7, #4]
 8005772:	e00a      	b.n	800578a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f002 fbf5 	bl	8007f6c <tcp_free_ooseq>
      return;
 8005782:	e005      	b.n	8005790 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	607b      	str	r3, [r7, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1f1      	bne.n	8005774 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20008321 	.word	0x20008321
 800579c:	20008334 	.word	0x20008334

080057a0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80057a4:	4b03      	ldr	r3, [pc, #12]	; (80057b4 <pbuf_pool_is_empty+0x14>)
 80057a6:	2201      	movs	r2, #1
 80057a8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80057aa:	bf00      	nop
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	20008321 	.word	0x20008321

080057b8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	4611      	mov	r1, r2
 80057c4:	461a      	mov	r2, r3
 80057c6:	460b      	mov	r3, r1
 80057c8:	80fb      	strh	r3, [r7, #6]
 80057ca:	4613      	mov	r3, r2
 80057cc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	88fa      	ldrh	r2, [r7, #6]
 80057de:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	88ba      	ldrh	r2, [r7, #4]
 80057e4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80057e6:	8b3b      	ldrh	r3, [r7, #24]
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	7f3a      	ldrb	r2, [r7, #28]
 80057f2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2201      	movs	r2, #1
 80057f8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	73da      	strb	r2, [r3, #15]
}
 8005800:	bf00      	nop
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08c      	sub	sp, #48	; 0x30
 8005810:	af02      	add	r7, sp, #8
 8005812:	4603      	mov	r3, r0
 8005814:	71fb      	strb	r3, [r7, #7]
 8005816:	460b      	mov	r3, r1
 8005818:	80bb      	strh	r3, [r7, #4]
 800581a:	4613      	mov	r3, r2
 800581c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800581e:	79fb      	ldrb	r3, [r7, #7]
 8005820:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005822:	887b      	ldrh	r3, [r7, #2]
 8005824:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005828:	d07f      	beq.n	800592a <pbuf_alloc+0x11e>
 800582a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800582e:	f300 80c8 	bgt.w	80059c2 <pbuf_alloc+0x1b6>
 8005832:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005836:	d010      	beq.n	800585a <pbuf_alloc+0x4e>
 8005838:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800583c:	f300 80c1 	bgt.w	80059c2 <pbuf_alloc+0x1b6>
 8005840:	2b01      	cmp	r3, #1
 8005842:	d002      	beq.n	800584a <pbuf_alloc+0x3e>
 8005844:	2b41      	cmp	r3, #65	; 0x41
 8005846:	f040 80bc 	bne.w	80059c2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800584a:	887a      	ldrh	r2, [r7, #2]
 800584c:	88bb      	ldrh	r3, [r7, #4]
 800584e:	4619      	mov	r1, r3
 8005850:	2000      	movs	r0, #0
 8005852:	f000 f8d1 	bl	80059f8 <pbuf_alloc_reference>
 8005856:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005858:	e0bd      	b.n	80059d6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800585a:	2300      	movs	r3, #0
 800585c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005862:	88bb      	ldrh	r3, [r7, #4]
 8005864:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005866:	2009      	movs	r0, #9
 8005868:	f7ff fbca 	bl	8005000 <memp_malloc>
 800586c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d109      	bne.n	8005888 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005874:	f7ff ff94 	bl	80057a0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	2b00      	cmp	r3, #0
 800587c:	d002      	beq.n	8005884 <pbuf_alloc+0x78>
            pbuf_free(p);
 800587e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005880:	f000 faa8 	bl	8005dd4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005884:	2300      	movs	r3, #0
 8005886:	e0a7      	b.n	80059d8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005888:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800588a:	3303      	adds	r3, #3
 800588c:	b29b      	uxth	r3, r3
 800588e:	f023 0303 	bic.w	r3, r3, #3
 8005892:	b29b      	uxth	r3, r3
 8005894:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005898:	b29b      	uxth	r3, r3
 800589a:	8b7a      	ldrh	r2, [r7, #26]
 800589c:	4293      	cmp	r3, r2
 800589e:	bf28      	it	cs
 80058a0:	4613      	movcs	r3, r2
 80058a2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80058a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058a6:	3310      	adds	r3, #16
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	4413      	add	r3, r2
 80058ac:	3303      	adds	r3, #3
 80058ae:	f023 0303 	bic.w	r3, r3, #3
 80058b2:	4618      	mov	r0, r3
 80058b4:	89f9      	ldrh	r1, [r7, #14]
 80058b6:	8b7a      	ldrh	r2, [r7, #26]
 80058b8:	2300      	movs	r3, #0
 80058ba:	9301      	str	r3, [sp, #4]
 80058bc:	887b      	ldrh	r3, [r7, #2]
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	460b      	mov	r3, r1
 80058c2:	4601      	mov	r1, r0
 80058c4:	6938      	ldr	r0, [r7, #16]
 80058c6:	f7ff ff77 	bl	80057b8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d006      	beq.n	80058e4 <pbuf_alloc+0xd8>
 80058d6:	4b42      	ldr	r3, [pc, #264]	; (80059e0 <pbuf_alloc+0x1d4>)
 80058d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058dc:	4941      	ldr	r1, [pc, #260]	; (80059e4 <pbuf_alloc+0x1d8>)
 80058de:	4842      	ldr	r0, [pc, #264]	; (80059e8 <pbuf_alloc+0x1dc>)
 80058e0:	f009 f9fe 	bl	800ece0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80058e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058e6:	3303      	adds	r3, #3
 80058e8:	f023 0303 	bic.w	r3, r3, #3
 80058ec:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80058f0:	d106      	bne.n	8005900 <pbuf_alloc+0xf4>
 80058f2:	4b3b      	ldr	r3, [pc, #236]	; (80059e0 <pbuf_alloc+0x1d4>)
 80058f4:	f44f 7281 	mov.w	r2, #258	; 0x102
 80058f8:	493c      	ldr	r1, [pc, #240]	; (80059ec <pbuf_alloc+0x1e0>)
 80058fa:	483b      	ldr	r0, [pc, #236]	; (80059e8 <pbuf_alloc+0x1dc>)
 80058fc:	f009 f9f0 	bl	800ece0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	2b00      	cmp	r3, #0
 8005904:	d102      	bne.n	800590c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
 800590a:	e002      	b.n	8005912 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005916:	8b7a      	ldrh	r2, [r7, #26]
 8005918:	89fb      	ldrh	r3, [r7, #14]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005922:	8b7b      	ldrh	r3, [r7, #26]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d19e      	bne.n	8005866 <pbuf_alloc+0x5a>
      break;
 8005928:	e055      	b.n	80059d6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800592a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800592c:	3303      	adds	r3, #3
 800592e:	b29b      	uxth	r3, r3
 8005930:	f023 0303 	bic.w	r3, r3, #3
 8005934:	b29a      	uxth	r2, r3
 8005936:	88bb      	ldrh	r3, [r7, #4]
 8005938:	3303      	adds	r3, #3
 800593a:	b29b      	uxth	r3, r3
 800593c:	f023 0303 	bic.w	r3, r3, #3
 8005940:	b29b      	uxth	r3, r3
 8005942:	4413      	add	r3, r2
 8005944:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005946:	8b3b      	ldrh	r3, [r7, #24]
 8005948:	3310      	adds	r3, #16
 800594a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800594c:	8b3a      	ldrh	r2, [r7, #24]
 800594e:	88bb      	ldrh	r3, [r7, #4]
 8005950:	3303      	adds	r3, #3
 8005952:	f023 0303 	bic.w	r3, r3, #3
 8005956:	429a      	cmp	r2, r3
 8005958:	d306      	bcc.n	8005968 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800595a:	8afa      	ldrh	r2, [r7, #22]
 800595c:	88bb      	ldrh	r3, [r7, #4]
 800595e:	3303      	adds	r3, #3
 8005960:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005964:	429a      	cmp	r2, r3
 8005966:	d201      	bcs.n	800596c <pbuf_alloc+0x160>
        return NULL;
 8005968:	2300      	movs	r3, #0
 800596a:	e035      	b.n	80059d8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800596c:	8afb      	ldrh	r3, [r7, #22]
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff f9b6 	bl	8004ce0 <mem_malloc>
 8005974:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <pbuf_alloc+0x174>
        return NULL;
 800597c:	2300      	movs	r3, #0
 800597e:	e02b      	b.n	80059d8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005980:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005982:	3310      	adds	r3, #16
 8005984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005986:	4413      	add	r3, r2
 8005988:	3303      	adds	r3, #3
 800598a:	f023 0303 	bic.w	r3, r3, #3
 800598e:	4618      	mov	r0, r3
 8005990:	88b9      	ldrh	r1, [r7, #4]
 8005992:	88ba      	ldrh	r2, [r7, #4]
 8005994:	2300      	movs	r3, #0
 8005996:	9301      	str	r3, [sp, #4]
 8005998:	887b      	ldrh	r3, [r7, #2]
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	460b      	mov	r3, r1
 800599e:	4601      	mov	r1, r0
 80059a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059a2:	f7ff ff09 	bl	80057b8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f003 0303 	and.w	r3, r3, #3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d010      	beq.n	80059d4 <pbuf_alloc+0x1c8>
 80059b2:	4b0b      	ldr	r3, [pc, #44]	; (80059e0 <pbuf_alloc+0x1d4>)
 80059b4:	f44f 7291 	mov.w	r2, #290	; 0x122
 80059b8:	490d      	ldr	r1, [pc, #52]	; (80059f0 <pbuf_alloc+0x1e4>)
 80059ba:	480b      	ldr	r0, [pc, #44]	; (80059e8 <pbuf_alloc+0x1dc>)
 80059bc:	f009 f990 	bl	800ece0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80059c0:	e008      	b.n	80059d4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80059c2:	4b07      	ldr	r3, [pc, #28]	; (80059e0 <pbuf_alloc+0x1d4>)
 80059c4:	f240 1227 	movw	r2, #295	; 0x127
 80059c8:	490a      	ldr	r1, [pc, #40]	; (80059f4 <pbuf_alloc+0x1e8>)
 80059ca:	4807      	ldr	r0, [pc, #28]	; (80059e8 <pbuf_alloc+0x1dc>)
 80059cc:	f009 f988 	bl	800ece0 <iprintf>
      return NULL;
 80059d0:	2300      	movs	r3, #0
 80059d2:	e001      	b.n	80059d8 <pbuf_alloc+0x1cc>
      break;
 80059d4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3728      	adds	r7, #40	; 0x28
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	0801075c 	.word	0x0801075c
 80059e4:	0801078c 	.word	0x0801078c
 80059e8:	080107bc 	.word	0x080107bc
 80059ec:	080107e4 	.word	0x080107e4
 80059f0:	08010818 	.word	0x08010818
 80059f4:	08010844 	.word	0x08010844

080059f8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	807b      	strh	r3, [r7, #2]
 8005a04:	4613      	mov	r3, r2
 8005a06:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005a08:	883b      	ldrh	r3, [r7, #0]
 8005a0a:	2b41      	cmp	r3, #65	; 0x41
 8005a0c:	d009      	beq.n	8005a22 <pbuf_alloc_reference+0x2a>
 8005a0e:	883b      	ldrh	r3, [r7, #0]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d006      	beq.n	8005a22 <pbuf_alloc_reference+0x2a>
 8005a14:	4b0f      	ldr	r3, [pc, #60]	; (8005a54 <pbuf_alloc_reference+0x5c>)
 8005a16:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005a1a:	490f      	ldr	r1, [pc, #60]	; (8005a58 <pbuf_alloc_reference+0x60>)
 8005a1c:	480f      	ldr	r0, [pc, #60]	; (8005a5c <pbuf_alloc_reference+0x64>)
 8005a1e:	f009 f95f 	bl	800ece0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005a22:	2008      	movs	r0, #8
 8005a24:	f7ff faec 	bl	8005000 <memp_malloc>
 8005a28:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005a30:	2300      	movs	r3, #0
 8005a32:	e00b      	b.n	8005a4c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005a34:	8879      	ldrh	r1, [r7, #2]
 8005a36:	887a      	ldrh	r2, [r7, #2]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	9301      	str	r3, [sp, #4]
 8005a3c:	883b      	ldrh	r3, [r7, #0]
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	460b      	mov	r3, r1
 8005a42:	6879      	ldr	r1, [r7, #4]
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f7ff feb7 	bl	80057b8 <pbuf_init_alloced_pbuf>
  return p;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	0801075c 	.word	0x0801075c
 8005a58:	08010860 	.word	0x08010860
 8005a5c:	080107bc 	.word	0x080107bc

08005a60 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b088      	sub	sp, #32
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	607b      	str	r3, [r7, #4]
 8005a68:	4603      	mov	r3, r0
 8005a6a:	73fb      	strb	r3, [r7, #15]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	81bb      	strh	r3, [r7, #12]
 8005a70:	4613      	mov	r3, r2
 8005a72:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005a78:	8a7b      	ldrh	r3, [r7, #18]
 8005a7a:	3303      	adds	r3, #3
 8005a7c:	f023 0203 	bic.w	r2, r3, #3
 8005a80:	89bb      	ldrh	r3, [r7, #12]
 8005a82:	441a      	add	r2, r3
 8005a84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d901      	bls.n	8005a8e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	e018      	b.n	8005ac0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005a94:	8a7b      	ldrh	r3, [r7, #18]
 8005a96:	3303      	adds	r3, #3
 8005a98:	f023 0303 	bic.w	r3, r3, #3
 8005a9c:	6a3a      	ldr	r2, [r7, #32]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	e001      	b.n	8005aa8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	89b9      	ldrh	r1, [r7, #12]
 8005aac:	89ba      	ldrh	r2, [r7, #12]
 8005aae:	2302      	movs	r3, #2
 8005ab0:	9301      	str	r3, [sp, #4]
 8005ab2:	897b      	ldrh	r3, [r7, #10]
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	6979      	ldr	r1, [r7, #20]
 8005aba:	f7ff fe7d 	bl	80057b8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005abe:	687b      	ldr	r3, [r7, #4]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d106      	bne.n	8005ae8 <pbuf_realloc+0x20>
 8005ada:	4b3a      	ldr	r3, [pc, #232]	; (8005bc4 <pbuf_realloc+0xfc>)
 8005adc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005ae0:	4939      	ldr	r1, [pc, #228]	; (8005bc8 <pbuf_realloc+0x100>)
 8005ae2:	483a      	ldr	r0, [pc, #232]	; (8005bcc <pbuf_realloc+0x104>)
 8005ae4:	f009 f8fc 	bl	800ece0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	891b      	ldrh	r3, [r3, #8]
 8005aec:	887a      	ldrh	r2, [r7, #2]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d263      	bcs.n	8005bba <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	891a      	ldrh	r2, [r3, #8]
 8005af6:	887b      	ldrh	r3, [r7, #2]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005afc:	887b      	ldrh	r3, [r7, #2]
 8005afe:	817b      	strh	r3, [r7, #10]
  q = p;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005b04:	e018      	b.n	8005b38 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	895b      	ldrh	r3, [r3, #10]
 8005b0a:	897a      	ldrh	r2, [r7, #10]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	891a      	ldrh	r2, [r3, #8]
 8005b14:	893b      	ldrh	r3, [r7, #8]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d106      	bne.n	8005b38 <pbuf_realloc+0x70>
 8005b2a:	4b26      	ldr	r3, [pc, #152]	; (8005bc4 <pbuf_realloc+0xfc>)
 8005b2c:	f240 12af 	movw	r2, #431	; 0x1af
 8005b30:	4927      	ldr	r1, [pc, #156]	; (8005bd0 <pbuf_realloc+0x108>)
 8005b32:	4826      	ldr	r0, [pc, #152]	; (8005bcc <pbuf_realloc+0x104>)
 8005b34:	f009 f8d4 	bl	800ece0 <iprintf>
  while (rem_len > q->len) {
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	895b      	ldrh	r3, [r3, #10]
 8005b3c:	897a      	ldrh	r2, [r7, #10]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d8e1      	bhi.n	8005b06 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	7b1b      	ldrb	r3, [r3, #12]
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d121      	bne.n	8005b92 <pbuf_realloc+0xca>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	895b      	ldrh	r3, [r3, #10]
 8005b52:	897a      	ldrh	r2, [r7, #10]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d01c      	beq.n	8005b92 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	7b5b      	ldrb	r3, [r3, #13]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d116      	bne.n	8005b92 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	897b      	ldrh	r3, [r7, #10]
 8005b70:	4413      	add	r3, r2
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	4619      	mov	r1, r3
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f7fe ffb6 	bl	8004ae8 <mem_trim>
 8005b7c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d106      	bne.n	8005b92 <pbuf_realloc+0xca>
 8005b84:	4b0f      	ldr	r3, [pc, #60]	; (8005bc4 <pbuf_realloc+0xfc>)
 8005b86:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005b8a:	4912      	ldr	r1, [pc, #72]	; (8005bd4 <pbuf_realloc+0x10c>)
 8005b8c:	480f      	ldr	r0, [pc, #60]	; (8005bcc <pbuf_realloc+0x104>)
 8005b8e:	f009 f8a7 	bl	800ece0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	897a      	ldrh	r2, [r7, #10]
 8005b96:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	895a      	ldrh	r2, [r3, #10]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d004      	beq.n	8005bb2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 f911 	bl	8005dd4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	e000      	b.n	8005bbc <pbuf_realloc+0xf4>
    return;
 8005bba:	bf00      	nop

}
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	0801075c 	.word	0x0801075c
 8005bc8:	08010874 	.word	0x08010874
 8005bcc:	080107bc 	.word	0x080107bc
 8005bd0:	0801088c 	.word	0x0801088c
 8005bd4:	080108a4 	.word	0x080108a4

08005bd8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	4613      	mov	r3, r2
 8005be4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d106      	bne.n	8005bfa <pbuf_add_header_impl+0x22>
 8005bec:	4b2b      	ldr	r3, [pc, #172]	; (8005c9c <pbuf_add_header_impl+0xc4>)
 8005bee:	f240 12df 	movw	r2, #479	; 0x1df
 8005bf2:	492b      	ldr	r1, [pc, #172]	; (8005ca0 <pbuf_add_header_impl+0xc8>)
 8005bf4:	482b      	ldr	r0, [pc, #172]	; (8005ca4 <pbuf_add_header_impl+0xcc>)
 8005bf6:	f009 f873 	bl	800ece0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <pbuf_add_header_impl+0x30>
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c06:	d301      	bcc.n	8005c0c <pbuf_add_header_impl+0x34>
    return 1;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e043      	b.n	8005c94 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <pbuf_add_header_impl+0x3e>
    return 0;
 8005c12:	2300      	movs	r3, #0
 8005c14:	e03e      	b.n	8005c94 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	891a      	ldrh	r2, [r3, #8]
 8005c1e:	8a7b      	ldrh	r3, [r7, #18]
 8005c20:	4413      	add	r3, r2
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	8a7a      	ldrh	r2, [r7, #18]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d901      	bls.n	8005c2e <pbuf_add_header_impl+0x56>
    return 1;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e032      	b.n	8005c94 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	7b1b      	ldrb	r3, [r3, #12]
 8005c32:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005c34:	8a3b      	ldrh	r3, [r7, #16]
 8005c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00c      	beq.n	8005c58 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	425b      	negs	r3, r3
 8005c46:	4413      	add	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3310      	adds	r3, #16
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d20d      	bcs.n	8005c70 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e01d      	b.n	8005c94 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005c58:	79fb      	ldrb	r3, [r7, #7]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d006      	beq.n	8005c6c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	425b      	negs	r3, r3
 8005c66:	4413      	add	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	e001      	b.n	8005c70 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e011      	b.n	8005c94 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	895a      	ldrh	r2, [r3, #10]
 8005c7a:	8a7b      	ldrh	r3, [r7, #18]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	891a      	ldrh	r2, [r3, #8]
 8005c88:	8a7b      	ldrh	r3, [r7, #18]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	811a      	strh	r2, [r3, #8]


  return 0;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	0801075c 	.word	0x0801075c
 8005ca0:	080108c0 	.word	0x080108c0
 8005ca4:	080107bc 	.word	0x080107bc

08005ca8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	6839      	ldr	r1, [r7, #0]
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7ff ff8e 	bl	8005bd8 <pbuf_add_header_impl>
 8005cbc:	4603      	mov	r3, r0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d106      	bne.n	8005ce6 <pbuf_remove_header+0x1e>
 8005cd8:	4b20      	ldr	r3, [pc, #128]	; (8005d5c <pbuf_remove_header+0x94>)
 8005cda:	f240 224b 	movw	r2, #587	; 0x24b
 8005cde:	4920      	ldr	r1, [pc, #128]	; (8005d60 <pbuf_remove_header+0x98>)
 8005ce0:	4820      	ldr	r0, [pc, #128]	; (8005d64 <pbuf_remove_header+0x9c>)
 8005ce2:	f008 fffd 	bl	800ece0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <pbuf_remove_header+0x2c>
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf2:	d301      	bcc.n	8005cf8 <pbuf_remove_header+0x30>
    return 1;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e02c      	b.n	8005d52 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <pbuf_remove_header+0x3a>
    return 0;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	e027      	b.n	8005d52 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	895b      	ldrh	r3, [r3, #10]
 8005d0a:	89fa      	ldrh	r2, [r7, #14]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d908      	bls.n	8005d22 <pbuf_remove_header+0x5a>
 8005d10:	4b12      	ldr	r3, [pc, #72]	; (8005d5c <pbuf_remove_header+0x94>)
 8005d12:	f240 2255 	movw	r2, #597	; 0x255
 8005d16:	4914      	ldr	r1, [pc, #80]	; (8005d68 <pbuf_remove_header+0xa0>)
 8005d18:	4812      	ldr	r0, [pc, #72]	; (8005d64 <pbuf_remove_header+0x9c>)
 8005d1a:	f008 ffe1 	bl	800ece0 <iprintf>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e017      	b.n	8005d52 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	441a      	add	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	895a      	ldrh	r2, [r3, #10]
 8005d38:	89fb      	ldrh	r3, [r7, #14]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	891a      	ldrh	r2, [r3, #8]
 8005d46:	89fb      	ldrh	r3, [r7, #14]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	0801075c 	.word	0x0801075c
 8005d60:	080108c0 	.word	0x080108c0
 8005d64:	080107bc 	.word	0x080107bc
 8005d68:	080108cc 	.word	0x080108cc

08005d6c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	460b      	mov	r3, r1
 8005d76:	807b      	strh	r3, [r7, #2]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005d7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	da08      	bge.n	8005d96 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005d84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d88:	425b      	negs	r3, r3
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7ff ff9b 	bl	8005cc8 <pbuf_remove_header>
 8005d92:	4603      	mov	r3, r0
 8005d94:	e007      	b.n	8005da6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005d96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d9a:	787a      	ldrb	r2, [r7, #1]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff ff1a 	bl	8005bd8 <pbuf_add_header_impl>
 8005da4:	4603      	mov	r3, r0
  }
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	460b      	mov	r3, r1
 8005db8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005dba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff ffd2 	bl	8005d6c <pbuf_header_impl>
 8005dc8:	4603      	mov	r3, r0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10b      	bne.n	8005dfa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d106      	bne.n	8005df6 <pbuf_free+0x22>
 8005de8:	4b38      	ldr	r3, [pc, #224]	; (8005ecc <pbuf_free+0xf8>)
 8005dea:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005dee:	4938      	ldr	r1, [pc, #224]	; (8005ed0 <pbuf_free+0xfc>)
 8005df0:	4838      	ldr	r0, [pc, #224]	; (8005ed4 <pbuf_free+0x100>)
 8005df2:	f008 ff75 	bl	800ece0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005df6:	2300      	movs	r3, #0
 8005df8:	e063      	b.n	8005ec2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005dfe:	e05c      	b.n	8005eba <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	7b9b      	ldrb	r3, [r3, #14]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d106      	bne.n	8005e16 <pbuf_free+0x42>
 8005e08:	4b30      	ldr	r3, [pc, #192]	; (8005ecc <pbuf_free+0xf8>)
 8005e0a:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005e0e:	4932      	ldr	r1, [pc, #200]	; (8005ed8 <pbuf_free+0x104>)
 8005e10:	4830      	ldr	r0, [pc, #192]	; (8005ed4 <pbuf_free+0x100>)
 8005e12:	f008 ff65 	bl	800ece0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	7b9b      	ldrb	r3, [r3, #14]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	739a      	strb	r2, [r3, #14]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	7b9b      	ldrb	r3, [r3, #14]
 8005e26:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005e28:	7dbb      	ldrb	r3, [r7, #22]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d143      	bne.n	8005eb6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	7b1b      	ldrb	r3, [r3, #12]
 8005e38:	f003 030f 	and.w	r3, r3, #15
 8005e3c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	7b5b      	ldrb	r3, [r3, #13]
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d011      	beq.n	8005e6e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <pbuf_free+0x90>
 8005e56:	4b1d      	ldr	r3, [pc, #116]	; (8005ecc <pbuf_free+0xf8>)
 8005e58:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005e5c:	491f      	ldr	r1, [pc, #124]	; (8005edc <pbuf_free+0x108>)
 8005e5e:	481d      	ldr	r0, [pc, #116]	; (8005ed4 <pbuf_free+0x100>)
 8005e60:	f008 ff3e 	bl	800ece0 <iprintf>
        pc->custom_free_function(p);
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	4798      	blx	r3
 8005e6c:	e01d      	b.n	8005eaa <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d104      	bne.n	8005e7e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	2009      	movs	r0, #9
 8005e78:	f7ff f932 	bl	80050e0 <memp_free>
 8005e7c:	e015      	b.n	8005eaa <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d104      	bne.n	8005e8e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	2008      	movs	r0, #8
 8005e88:	f7ff f92a 	bl	80050e0 <memp_free>
 8005e8c:	e00d      	b.n	8005eaa <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d103      	bne.n	8005e9c <pbuf_free+0xc8>
          mem_free(p);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7fe fdbd 	bl	8004a14 <mem_free>
 8005e9a:	e006      	b.n	8005eaa <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005e9c:	4b0b      	ldr	r3, [pc, #44]	; (8005ecc <pbuf_free+0xf8>)
 8005e9e:	f240 320f 	movw	r2, #783	; 0x30f
 8005ea2:	490f      	ldr	r1, [pc, #60]	; (8005ee0 <pbuf_free+0x10c>)
 8005ea4:	480b      	ldr	r0, [pc, #44]	; (8005ed4 <pbuf_free+0x100>)
 8005ea6:	f008 ff1b 	bl	800ece0 <iprintf>
        }
      }
      count++;
 8005eaa:	7dfb      	ldrb	r3, [r7, #23]
 8005eac:	3301      	adds	r3, #1
 8005eae:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	607b      	str	r3, [r7, #4]
 8005eb4:	e001      	b.n	8005eba <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d19f      	bne.n	8005e00 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	0801075c 	.word	0x0801075c
 8005ed0:	080108c0 	.word	0x080108c0
 8005ed4:	080107bc 	.word	0x080107bc
 8005ed8:	080108ec 	.word	0x080108ec
 8005edc:	08010904 	.word	0x08010904
 8005ee0:	08010928 	.word	0x08010928

08005ee4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005ef0:	e005      	b.n	8005efe <pbuf_clen+0x1a>
    ++len;
 8005ef2:	89fb      	ldrh	r3, [r7, #14]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1f6      	bne.n	8005ef2 <pbuf_clen+0xe>
  }
  return len;
 8005f04:	89fb      	ldrh	r3, [r7, #14]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
	...

08005f14 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d010      	beq.n	8005f44 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	7b9b      	ldrb	r3, [r3, #14]
 8005f26:	3301      	adds	r3, #1
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	7b9b      	ldrb	r3, [r3, #14]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d106      	bne.n	8005f44 <pbuf_ref+0x30>
 8005f36:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <pbuf_ref+0x38>)
 8005f38:	f240 3242 	movw	r2, #834	; 0x342
 8005f3c:	4904      	ldr	r1, [pc, #16]	; (8005f50 <pbuf_ref+0x3c>)
 8005f3e:	4805      	ldr	r0, [pc, #20]	; (8005f54 <pbuf_ref+0x40>)
 8005f40:	f008 fece 	bl	800ece0 <iprintf>
  }
}
 8005f44:	bf00      	nop
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	0801075c 	.word	0x0801075c
 8005f50:	0801093c 	.word	0x0801093c
 8005f54:	080107bc 	.word	0x080107bc

08005f58 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <pbuf_cat+0x16>
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d107      	bne.n	8005f7e <pbuf_cat+0x26>
 8005f6e:	4b20      	ldr	r3, [pc, #128]	; (8005ff0 <pbuf_cat+0x98>)
 8005f70:	f240 3259 	movw	r2, #857	; 0x359
 8005f74:	491f      	ldr	r1, [pc, #124]	; (8005ff4 <pbuf_cat+0x9c>)
 8005f76:	4820      	ldr	r0, [pc, #128]	; (8005ff8 <pbuf_cat+0xa0>)
 8005f78:	f008 feb2 	bl	800ece0 <iprintf>
 8005f7c:	e034      	b.n	8005fe8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	e00a      	b.n	8005f9a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	891a      	ldrh	r2, [r3, #8]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	891b      	ldrh	r3, [r3, #8]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	60fb      	str	r3, [r7, #12]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1f0      	bne.n	8005f84 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	891a      	ldrh	r2, [r3, #8]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	895b      	ldrh	r3, [r3, #10]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d006      	beq.n	8005fbc <pbuf_cat+0x64>
 8005fae:	4b10      	ldr	r3, [pc, #64]	; (8005ff0 <pbuf_cat+0x98>)
 8005fb0:	f240 3262 	movw	r2, #866	; 0x362
 8005fb4:	4911      	ldr	r1, [pc, #68]	; (8005ffc <pbuf_cat+0xa4>)
 8005fb6:	4810      	ldr	r0, [pc, #64]	; (8005ff8 <pbuf_cat+0xa0>)
 8005fb8:	f008 fe92 	bl	800ece0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d006      	beq.n	8005fd2 <pbuf_cat+0x7a>
 8005fc4:	4b0a      	ldr	r3, [pc, #40]	; (8005ff0 <pbuf_cat+0x98>)
 8005fc6:	f240 3263 	movw	r2, #867	; 0x363
 8005fca:	490d      	ldr	r1, [pc, #52]	; (8006000 <pbuf_cat+0xa8>)
 8005fcc:	480a      	ldr	r0, [pc, #40]	; (8005ff8 <pbuf_cat+0xa0>)
 8005fce:	f008 fe87 	bl	800ece0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	891a      	ldrh	r2, [r3, #8]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	891b      	ldrh	r3, [r3, #8]
 8005fda:	4413      	add	r3, r2
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	0801075c 	.word	0x0801075c
 8005ff4:	08010950 	.word	0x08010950
 8005ff8:	080107bc 	.word	0x080107bc
 8005ffc:	08010988 	.word	0x08010988
 8006000:	080109b8 	.word	0x080109b8

08006004 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800600e:	6839      	ldr	r1, [r7, #0]
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7ff ffa1 	bl	8005f58 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006016:	6838      	ldr	r0, [r7, #0]
 8006018:	f7ff ff7c 	bl	8005f14 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800601c:	bf00      	nop
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800602e:	2300      	movs	r3, #0
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	2300      	movs	r3, #0
 8006034:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d008      	beq.n	800604e <pbuf_copy+0x2a>
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d005      	beq.n	800604e <pbuf_copy+0x2a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	891a      	ldrh	r2, [r3, #8]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	891b      	ldrh	r3, [r3, #8]
 800604a:	429a      	cmp	r2, r3
 800604c:	d209      	bcs.n	8006062 <pbuf_copy+0x3e>
 800604e:	4b57      	ldr	r3, [pc, #348]	; (80061ac <pbuf_copy+0x188>)
 8006050:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006054:	4956      	ldr	r1, [pc, #344]	; (80061b0 <pbuf_copy+0x18c>)
 8006056:	4857      	ldr	r0, [pc, #348]	; (80061b4 <pbuf_copy+0x190>)
 8006058:	f008 fe42 	bl	800ece0 <iprintf>
 800605c:	f06f 030f 	mvn.w	r3, #15
 8006060:	e09f      	b.n	80061a2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	895b      	ldrh	r3, [r3, #10]
 8006066:	461a      	mov	r2, r3
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	1ad2      	subs	r2, r2, r3
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	895b      	ldrh	r3, [r3, #10]
 8006070:	4619      	mov	r1, r3
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	1acb      	subs	r3, r1, r3
 8006076:	429a      	cmp	r2, r3
 8006078:	d306      	bcc.n	8006088 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	895b      	ldrh	r3, [r3, #10]
 800607e:	461a      	mov	r2, r3
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	e005      	b.n	8006094 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	895b      	ldrh	r3, [r3, #10]
 800608c:	461a      	mov	r2, r3
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	18d0      	adds	r0, r2, r3
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	4413      	add	r3, r2
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4619      	mov	r1, r3
 80060a8:	f008 fdea 	bl	800ec80 <memcpy>
    offset_to += len;
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4413      	add	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4413      	add	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	895b      	ldrh	r3, [r3, #10]
 80060c0:	461a      	mov	r2, r3
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d906      	bls.n	80060d6 <pbuf_copy+0xb2>
 80060c8:	4b38      	ldr	r3, [pc, #224]	; (80061ac <pbuf_copy+0x188>)
 80060ca:	f240 32d9 	movw	r2, #985	; 0x3d9
 80060ce:	493a      	ldr	r1, [pc, #232]	; (80061b8 <pbuf_copy+0x194>)
 80060d0:	4838      	ldr	r0, [pc, #224]	; (80061b4 <pbuf_copy+0x190>)
 80060d2:	f008 fe05 	bl	800ece0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	895b      	ldrh	r3, [r3, #10]
 80060da:	461a      	mov	r2, r3
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	4293      	cmp	r3, r2
 80060e0:	d906      	bls.n	80060f0 <pbuf_copy+0xcc>
 80060e2:	4b32      	ldr	r3, [pc, #200]	; (80061ac <pbuf_copy+0x188>)
 80060e4:	f240 32da 	movw	r2, #986	; 0x3da
 80060e8:	4934      	ldr	r1, [pc, #208]	; (80061bc <pbuf_copy+0x198>)
 80060ea:	4832      	ldr	r0, [pc, #200]	; (80061b4 <pbuf_copy+0x190>)
 80060ec:	f008 fdf8 	bl	800ece0 <iprintf>
    if (offset_from >= p_from->len) {
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	895b      	ldrh	r3, [r3, #10]
 80060f4:	461a      	mov	r2, r3
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d304      	bcc.n	8006106 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	895b      	ldrh	r3, [r3, #10]
 800610a:	461a      	mov	r2, r3
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	4293      	cmp	r3, r2
 8006110:	d114      	bne.n	800613c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006112:	2300      	movs	r3, #0
 8006114:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10c      	bne.n	800613c <pbuf_copy+0x118>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d009      	beq.n	800613c <pbuf_copy+0x118>
 8006128:	4b20      	ldr	r3, [pc, #128]	; (80061ac <pbuf_copy+0x188>)
 800612a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800612e:	4924      	ldr	r1, [pc, #144]	; (80061c0 <pbuf_copy+0x19c>)
 8006130:	4820      	ldr	r0, [pc, #128]	; (80061b4 <pbuf_copy+0x190>)
 8006132:	f008 fdd5 	bl	800ece0 <iprintf>
 8006136:	f06f 030f 	mvn.w	r3, #15
 800613a:	e032      	b.n	80061a2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d013      	beq.n	800616a <pbuf_copy+0x146>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	895a      	ldrh	r2, [r3, #10]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	891b      	ldrh	r3, [r3, #8]
 800614a:	429a      	cmp	r2, r3
 800614c:	d10d      	bne.n	800616a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d009      	beq.n	800616a <pbuf_copy+0x146>
 8006156:	4b15      	ldr	r3, [pc, #84]	; (80061ac <pbuf_copy+0x188>)
 8006158:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800615c:	4919      	ldr	r1, [pc, #100]	; (80061c4 <pbuf_copy+0x1a0>)
 800615e:	4815      	ldr	r0, [pc, #84]	; (80061b4 <pbuf_copy+0x190>)
 8006160:	f008 fdbe 	bl	800ece0 <iprintf>
 8006164:	f06f 0305 	mvn.w	r3, #5
 8006168:	e01b      	b.n	80061a2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d013      	beq.n	8006198 <pbuf_copy+0x174>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	895a      	ldrh	r2, [r3, #10]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	891b      	ldrh	r3, [r3, #8]
 8006178:	429a      	cmp	r2, r3
 800617a:	d10d      	bne.n	8006198 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d009      	beq.n	8006198 <pbuf_copy+0x174>
 8006184:	4b09      	ldr	r3, [pc, #36]	; (80061ac <pbuf_copy+0x188>)
 8006186:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800618a:	490e      	ldr	r1, [pc, #56]	; (80061c4 <pbuf_copy+0x1a0>)
 800618c:	4809      	ldr	r0, [pc, #36]	; (80061b4 <pbuf_copy+0x190>)
 800618e:	f008 fda7 	bl	800ece0 <iprintf>
 8006192:	f06f 0305 	mvn.w	r3, #5
 8006196:	e004      	b.n	80061a2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	f47f af61 	bne.w	8006062 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	0801075c 	.word	0x0801075c
 80061b0:	08010a04 	.word	0x08010a04
 80061b4:	080107bc 	.word	0x080107bc
 80061b8:	08010a34 	.word	0x08010a34
 80061bc:	08010a4c 	.word	0x08010a4c
 80061c0:	08010a68 	.word	0x08010a68
 80061c4:	08010a78 	.word	0x08010a78

080061c8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b088      	sub	sp, #32
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	4611      	mov	r1, r2
 80061d4:	461a      	mov	r2, r3
 80061d6:	460b      	mov	r3, r1
 80061d8:	80fb      	strh	r3, [r7, #6]
 80061da:	4613      	mov	r3, r2
 80061dc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80061de:	2300      	movs	r3, #0
 80061e0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80061e2:	2300      	movs	r3, #0
 80061e4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d108      	bne.n	80061fe <pbuf_copy_partial+0x36>
 80061ec:	4b2b      	ldr	r3, [pc, #172]	; (800629c <pbuf_copy_partial+0xd4>)
 80061ee:	f240 420a 	movw	r2, #1034	; 0x40a
 80061f2:	492b      	ldr	r1, [pc, #172]	; (80062a0 <pbuf_copy_partial+0xd8>)
 80061f4:	482b      	ldr	r0, [pc, #172]	; (80062a4 <pbuf_copy_partial+0xdc>)
 80061f6:	f008 fd73 	bl	800ece0 <iprintf>
 80061fa:	2300      	movs	r3, #0
 80061fc:	e04a      	b.n	8006294 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d108      	bne.n	8006216 <pbuf_copy_partial+0x4e>
 8006204:	4b25      	ldr	r3, [pc, #148]	; (800629c <pbuf_copy_partial+0xd4>)
 8006206:	f240 420b 	movw	r2, #1035	; 0x40b
 800620a:	4927      	ldr	r1, [pc, #156]	; (80062a8 <pbuf_copy_partial+0xe0>)
 800620c:	4825      	ldr	r0, [pc, #148]	; (80062a4 <pbuf_copy_partial+0xdc>)
 800620e:	f008 fd67 	bl	800ece0 <iprintf>
 8006212:	2300      	movs	r3, #0
 8006214:	e03e      	b.n	8006294 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	61fb      	str	r3, [r7, #28]
 800621a:	e034      	b.n	8006286 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800621c:	88bb      	ldrh	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <pbuf_copy_partial+0x70>
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	895b      	ldrh	r3, [r3, #10]
 8006226:	88ba      	ldrh	r2, [r7, #4]
 8006228:	429a      	cmp	r2, r3
 800622a:	d305      	bcc.n	8006238 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	895b      	ldrh	r3, [r3, #10]
 8006230:	88ba      	ldrh	r2, [r7, #4]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	80bb      	strh	r3, [r7, #4]
 8006236:	e023      	b.n	8006280 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	895a      	ldrh	r2, [r3, #10]
 800623c:	88bb      	ldrh	r3, [r7, #4]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006242:	8b3a      	ldrh	r2, [r7, #24]
 8006244:	88fb      	ldrh	r3, [r7, #6]
 8006246:	429a      	cmp	r2, r3
 8006248:	d901      	bls.n	800624e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800624a:	88fb      	ldrh	r3, [r7, #6]
 800624c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800624e:	8b7b      	ldrh	r3, [r7, #26]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	18d0      	adds	r0, r2, r3
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	88bb      	ldrh	r3, [r7, #4]
 800625a:	4413      	add	r3, r2
 800625c:	8b3a      	ldrh	r2, [r7, #24]
 800625e:	4619      	mov	r1, r3
 8006260:	f008 fd0e 	bl	800ec80 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006264:	8afa      	ldrh	r2, [r7, #22]
 8006266:	8b3b      	ldrh	r3, [r7, #24]
 8006268:	4413      	add	r3, r2
 800626a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800626c:	8b7a      	ldrh	r2, [r7, #26]
 800626e:	8b3b      	ldrh	r3, [r7, #24]
 8006270:	4413      	add	r3, r2
 8006272:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006274:	88fa      	ldrh	r2, [r7, #6]
 8006276:	8b3b      	ldrh	r3, [r7, #24]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800627c:	2300      	movs	r3, #0
 800627e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	61fb      	str	r3, [r7, #28]
 8006286:	88fb      	ldrh	r3, [r7, #6]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d002      	beq.n	8006292 <pbuf_copy_partial+0xca>
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1c4      	bne.n	800621c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006292:	8afb      	ldrh	r3, [r7, #22]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3720      	adds	r7, #32
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	0801075c 	.word	0x0801075c
 80062a0:	08010aa4 	.word	0x08010aa4
 80062a4:	080107bc 	.word	0x080107bc
 80062a8:	08010ac4 	.word	0x08010ac4

080062ac <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	4613      	mov	r3, r2
 80062b8:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80062ba:	88fb      	ldrh	r3, [r7, #6]
 80062bc:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d109      	bne.n	80062dc <pbuf_take+0x30>
 80062c8:	4b3a      	ldr	r3, [pc, #232]	; (80063b4 <pbuf_take+0x108>)
 80062ca:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80062ce:	493a      	ldr	r1, [pc, #232]	; (80063b8 <pbuf_take+0x10c>)
 80062d0:	483a      	ldr	r0, [pc, #232]	; (80063bc <pbuf_take+0x110>)
 80062d2:	f008 fd05 	bl	800ece0 <iprintf>
 80062d6:	f06f 030f 	mvn.w	r3, #15
 80062da:	e067      	b.n	80063ac <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d109      	bne.n	80062f6 <pbuf_take+0x4a>
 80062e2:	4b34      	ldr	r3, [pc, #208]	; (80063b4 <pbuf_take+0x108>)
 80062e4:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80062e8:	4935      	ldr	r1, [pc, #212]	; (80063c0 <pbuf_take+0x114>)
 80062ea:	4834      	ldr	r0, [pc, #208]	; (80063bc <pbuf_take+0x110>)
 80062ec:	f008 fcf8 	bl	800ece0 <iprintf>
 80062f0:	f06f 030f 	mvn.w	r3, #15
 80062f4:	e05a      	b.n	80063ac <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	891b      	ldrh	r3, [r3, #8]
 80062fa:	88fa      	ldrh	r2, [r7, #6]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d909      	bls.n	8006314 <pbuf_take+0x68>
 8006300:	4b2c      	ldr	r3, [pc, #176]	; (80063b4 <pbuf_take+0x108>)
 8006302:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8006306:	492f      	ldr	r1, [pc, #188]	; (80063c4 <pbuf_take+0x118>)
 8006308:	482c      	ldr	r0, [pc, #176]	; (80063bc <pbuf_take+0x110>)
 800630a:	f008 fce9 	bl	800ece0 <iprintf>
 800630e:	f04f 33ff 	mov.w	r3, #4294967295
 8006312:	e04b      	b.n	80063ac <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d007      	beq.n	800632a <pbuf_take+0x7e>
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d004      	beq.n	800632a <pbuf_take+0x7e>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	891b      	ldrh	r3, [r3, #8]
 8006324:	88fa      	ldrh	r2, [r7, #6]
 8006326:	429a      	cmp	r2, r3
 8006328:	d902      	bls.n	8006330 <pbuf_take+0x84>
    return ERR_ARG;
 800632a:	f06f 030f 	mvn.w	r3, #15
 800632e:	e03d      	b.n	80063ac <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	61fb      	str	r3, [r7, #28]
 8006334:	e028      	b.n	8006388 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d106      	bne.n	800634a <pbuf_take+0x9e>
 800633c:	4b1d      	ldr	r3, [pc, #116]	; (80063b4 <pbuf_take+0x108>)
 800633e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8006342:	4921      	ldr	r1, [pc, #132]	; (80063c8 <pbuf_take+0x11c>)
 8006344:	481d      	ldr	r0, [pc, #116]	; (80063bc <pbuf_take+0x110>)
 8006346:	f008 fccb 	bl	800ece0 <iprintf>
    buf_copy_len = total_copy_len;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	895b      	ldrh	r3, [r3, #10]
 8006352:	461a      	mov	r2, r3
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	4293      	cmp	r3, r2
 8006358:	d902      	bls.n	8006360 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	895b      	ldrh	r3, [r3, #10]
 800635e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	6858      	ldr	r0, [r3, #4]
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	4413      	add	r3, r2
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	4619      	mov	r1, r3
 800636e:	f008 fc87 	bl	800ec80 <memcpy>
    total_copy_len -= buf_copy_len;
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	4413      	add	r3, r2
 8006380:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	61fb      	str	r3, [r7, #28]
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1d3      	bne.n	8006336 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d103      	bne.n	800639c <pbuf_take+0xf0>
 8006394:	88fb      	ldrh	r3, [r7, #6]
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	429a      	cmp	r2, r3
 800639a:	d006      	beq.n	80063aa <pbuf_take+0xfe>
 800639c:	4b05      	ldr	r3, [pc, #20]	; (80063b4 <pbuf_take+0x108>)
 800639e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80063a2:	490a      	ldr	r1, [pc, #40]	; (80063cc <pbuf_take+0x120>)
 80063a4:	4805      	ldr	r0, [pc, #20]	; (80063bc <pbuf_take+0x110>)
 80063a6:	f008 fc9b 	bl	800ece0 <iprintf>
  return ERR_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3720      	adds	r7, #32
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	0801075c 	.word	0x0801075c
 80063b8:	08010b34 	.word	0x08010b34
 80063bc:	080107bc 	.word	0x080107bc
 80063c0:	08010b4c 	.word	0x08010b4c
 80063c4:	08010b68 	.word	0x08010b68
 80063c8:	08010b88 	.word	0x08010b88
 80063cc:	08010ba0 	.word	0x08010ba0

080063d0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	4603      	mov	r3, r0
 80063d8:	603a      	str	r2, [r7, #0]
 80063da:	71fb      	strb	r3, [r7, #7]
 80063dc:	460b      	mov	r3, r1
 80063de:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	8919      	ldrh	r1, [r3, #8]
 80063e4:	88ba      	ldrh	r2, [r7, #4]
 80063e6:	79fb      	ldrb	r3, [r7, #7]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff fa0f 	bl	800580c <pbuf_alloc>
 80063ee:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <pbuf_clone+0x2a>
    return NULL;
 80063f6:	2300      	movs	r3, #0
 80063f8:	e011      	b.n	800641e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f7ff fe11 	bl	8006024 <pbuf_copy>
 8006402:	4603      	mov	r3, r0
 8006404:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006406:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d006      	beq.n	800641c <pbuf_clone+0x4c>
 800640e:	4b06      	ldr	r3, [pc, #24]	; (8006428 <pbuf_clone+0x58>)
 8006410:	f240 5224 	movw	r2, #1316	; 0x524
 8006414:	4905      	ldr	r1, [pc, #20]	; (800642c <pbuf_clone+0x5c>)
 8006416:	4806      	ldr	r0, [pc, #24]	; (8006430 <pbuf_clone+0x60>)
 8006418:	f008 fc62 	bl	800ece0 <iprintf>
  return q;
 800641c:	68fb      	ldr	r3, [r7, #12]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	0801075c 	.word	0x0801075c
 800642c:	08010bd0 	.word	0x08010bd0
 8006430:	080107bc 	.word	0x080107bc

08006434 <raw_input_local_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_local_match(struct raw_pcb *pcb, u8_t broadcast)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	7a1b      	ldrb	r3, [r3, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00b      	beq.n	8006460 <raw_input_local_match+0x2c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	7a1a      	ldrb	r2, [r3, #8]
 800644c:	4b15      	ldr	r3, [pc, #84]	; (80064a4 <raw_input_local_match+0x70>)
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006454:	3301      	adds	r3, #1
 8006456:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006458:	429a      	cmp	r2, r3
 800645a:	d001      	beq.n	8006460 <raw_input_local_match+0x2c>
    return 0;
 800645c:	2300      	movs	r3, #0
 800645e:	e01b      	b.n	8006498 <raw_input_local_match+0x64>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8006460:	78fb      	ldrb	r3, [r7, #3]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d008      	beq.n	8006478 <raw_input_local_match+0x44>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <raw_input_local_match+0x40>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d110      	bne.n	8006496 <raw_input_local_match+0x62>
          return 1;
 8006474:	2301      	movs	r3, #1
 8006476:	e00f      	b.n	8006498 <raw_input_local_match+0x64>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: catch all or exact match */
      if (ip_addr_isany(&pcb->local_ip) ||
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d009      	beq.n	8006492 <raw_input_local_match+0x5e>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d005      	beq.n	8006492 <raw_input_local_match+0x5e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <raw_input_local_match+0x70>)
 800648c:	695b      	ldr	r3, [r3, #20]
      if (ip_addr_isany(&pcb->local_ip) ||
 800648e:	429a      	cmp	r2, r3
 8006490:	d101      	bne.n	8006496 <raw_input_local_match+0x62>
        return 1;
 8006492:	2301      	movs	r3, #1
 8006494:	e000      	b.n	8006498 <raw_input_local_match+0x64>
      }
  }

  return 0;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	20004d3c 	.word	0x20004d3c

080064a8 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 80064a8:	b590      	push	{r4, r7, lr}
 80064aa:	b089      	sub	sp, #36	; 0x24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
 80064b2:	2300      	movs	r3, #0
 80064b4:	75fb      	strb	r3, [r7, #23]
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80064b6:	4b37      	ldr	r3, [pc, #220]	; (8006594 <raw_input+0xec>)
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	4a36      	ldr	r2, [pc, #216]	; (8006594 <raw_input+0xec>)
 80064bc:	6812      	ldr	r2, [r2, #0]
 80064be:	4611      	mov	r1, r2
 80064c0:	4618      	mov	r0, r3
 80064c2:	f007 fc53 	bl	800dd6c <ip4_addr_isbroadcast_u32>
 80064c6:	4603      	mov	r3, r0
 80064c8:	75bb      	strb	r3, [r7, #22]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	7a5b      	ldrb	r3, [r3, #9]
 80064d0:	82bb      	strh	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	61bb      	str	r3, [r7, #24]
  pcb = raw_pcbs;
 80064d6:	4b30      	ldr	r3, [pc, #192]	; (8006598 <raw_input+0xf0>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	61fb      	str	r3, [r7, #28]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 80064dc:	e052      	b.n	8006584 <raw_input+0xdc>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	7c1b      	ldrb	r3, [r3, #16]
 80064e2:	461a      	mov	r2, r3
 80064e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d146      	bne.n	800657a <raw_input+0xd2>
 80064ec:	7dbb      	ldrb	r3, [r7, #22]
 80064ee:	4619      	mov	r1, r3
 80064f0:	69f8      	ldr	r0, [r7, #28]
 80064f2:	f7ff ff9f 	bl	8006434 <raw_input_local_match>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d03e      	beq.n	800657a <raw_input+0xd2>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	7c5b      	ldrb	r3, [r3, #17]
 8006500:	f003 0301 	and.w	r3, r3, #1
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8006504:	2b00      	cmp	r3, #0
 8006506:	d005      	beq.n	8006514 <raw_input+0x6c>
         ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	4b21      	ldr	r3, [pc, #132]	; (8006594 <raw_input+0xec>)
 800650e:	691b      	ldr	r3, [r3, #16]
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 8006510:	429a      	cmp	r2, r3
 8006512:	d132      	bne.n	800657a <raw_input+0xd2>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d02e      	beq.n	800657a <raw_input+0xd2>
        u8_t eaten;
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	613b      	str	r3, [r7, #16]
#endif
        ret = RAW_INPUT_DELIVERED;
 8006522:	2302      	movs	r3, #2
 8006524:	75fb      	strb	r3, [r7, #23]
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	695c      	ldr	r4, [r3, #20]
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	6998      	ldr	r0, [r3, #24]
 800652e:	4b1b      	ldr	r3, [pc, #108]	; (800659c <raw_input+0xf4>)
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	69f9      	ldr	r1, [r7, #28]
 8006534:	47a0      	blx	r4
 8006536:	4603      	mov	r3, r0
 8006538:	73fb      	strb	r3, [r7, #15]
        if (eaten != 0) {
 800653a:	7bfb      	ldrb	r3, [r7, #15]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d011      	beq.n	8006564 <raw_input+0xbc>
          /* receive function ate the packet */
          p = NULL;
 8006540:	2300      	movs	r3, #0
 8006542:	607b      	str	r3, [r7, #4]
          if (prev != NULL) {
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <raw_input+0xb8>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
            prev->next = pcb->next;
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	60da      	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
 8006552:	4b11      	ldr	r3, [pc, #68]	; (8006598 <raw_input+0xf0>)
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	60da      	str	r2, [r3, #12]
            raw_pcbs = pcb;
 800655a:	4a0f      	ldr	r2, [pc, #60]	; (8006598 <raw_input+0xf0>)
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	6013      	str	r3, [r2, #0]
          }
          return RAW_INPUT_EATEN;
 8006560:	2301      	movs	r3, #1
 8006562:	e013      	b.n	800658c <raw_input+0xe4>
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	429a      	cmp	r2, r3
 800656c:	d005      	beq.n	800657a <raw_input+0xd2>
 800656e:	4b0c      	ldr	r3, [pc, #48]	; (80065a0 <raw_input+0xf8>)
 8006570:	22c0      	movs	r2, #192	; 0xc0
 8006572:	490c      	ldr	r1, [pc, #48]	; (80065a4 <raw_input+0xfc>)
 8006574:	480c      	ldr	r0, [pc, #48]	; (80065a8 <raw_input+0x100>)
 8006576:	f008 fbb3 	bl	800ece0 <iprintf>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	61bb      	str	r3, [r7, #24]
    pcb = pcb->next;
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1a9      	bne.n	80064de <raw_input+0x36>
  }
  return ret;
 800658a:	7dfb      	ldrb	r3, [r7, #23]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3724      	adds	r7, #36	; 0x24
 8006590:	46bd      	mov	sp, r7
 8006592:	bd90      	pop	{r4, r7, pc}
 8006594:	20004d3c 	.word	0x20004d3c
 8006598:	20008324 	.word	0x20008324
 800659c:	20004d4c 	.word	0x20004d4c
 80065a0:	08010be4 	.word	0x08010be4
 80065a4:	08010c14 	.word	0x08010c14
 80065a8:	08010c60 	.word	0x08010c60

080065ac <raw_bind>:
 *
 * @see raw_disconnect()
 */
err_t
raw_bind(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <raw_bind+0x16>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d102      	bne.n	80065c8 <raw_bind+0x1c>
    return ERR_VAL;
 80065c2:	f06f 0305 	mvn.w	r3, #5
 80065c6:	e009      	b.n	80065dc <raw_bind+0x30>
  }
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <raw_bind+0x28>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	e000      	b.n	80065d6 <raw_bind+0x2a>
 80065d4:	2300      	movs	r3, #0
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	6013      	str	r3, [r2, #0]
  if (IP_IS_V6(&pcb->local_ip) &&
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->local_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->local_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */
  return ERR_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <raw_sendto>:
 * @param ipaddr the destination address of the IP packet
 *
 */
err_t
raw_sendto(struct raw_pcb *pcb, struct pbuf *p, const ip_addr_t *ipaddr)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af02      	add	r7, sp, #8
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
  struct netif *netif;
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (ipaddr == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <raw_sendto+0x18>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d102      	bne.n	8006606 <raw_sendto+0x1e>
    return ERR_VAL;
 8006600:	f06f 0305 	mvn.w	r3, #5
 8006604:	e035      	b.n	8006672 <raw_sendto+0x8a>
  }

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_sendto\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	7a1b      	ldrb	r3, [r3, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d006      	beq.n	800661c <raw_sendto+0x34>
    netif = netif_get_by_index(pcb->netif_idx);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	7a1b      	ldrb	r3, [r3, #8]
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff f87e 	bl	8005714 <netif_get_by_index>
 8006618:	6178      	str	r0, [r7, #20]
 800661a:	e003      	b.n	8006624 <raw_sendto+0x3c>
    }

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      netif = ip_route(&pcb->local_ip, ipaddr);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f007 f903 	bl	800d828 <ip4_route>
 8006622:	6178      	str	r0, [r7, #20]
    }
  }

  if (netif == NULL) {
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d102      	bne.n	8006630 <raw_sendto+0x48>
    LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: No route to "));
    ip_addr_debug_print(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ipaddr);
    return ERR_RTE;
 800662a:	f06f 0303 	mvn.w	r3, #3
 800662e:	e020      	b.n	8006672 <raw_sendto+0x8a>
  }

  if (ip_addr_isany(&pcb->local_ip) || ip_addr_ismulticast(&pcb->local_ip)) {
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d009      	beq.n	800664a <raw_sendto+0x62>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d005      	beq.n	800664a <raw_sendto+0x62>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006646:	2be0      	cmp	r3, #224	; 0xe0
 8006648:	d108      	bne.n	800665c <raw_sendto+0x74>
    /* use outgoing network interface IP address as source address */
    src_ip = ip_netif_get_local_ip(netif, ipaddr);
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <raw_sendto+0x6e>
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	3304      	adds	r3, #4
 8006654:	e000      	b.n	8006658 <raw_sendto+0x70>
 8006656:	2300      	movs	r3, #0
 8006658:	613b      	str	r3, [r7, #16]
 800665a:	e001      	b.n	8006660 <raw_sendto+0x78>
      return ERR_RTE;
    }
#endif /* LWIP_IPV6 */
  } else {
    /* use RAW PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	613b      	str	r3, [r7, #16]
  }

  return raw_sendto_if_src(pcb, p, ipaddr, netif, src_ip);
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	68b9      	ldr	r1, [r7, #8]
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 f806 	bl	800667c <raw_sendto_if_src>
 8006670:	4603      	mov	r3, r0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3718      	adds	r7, #24
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
	...

0800667c <raw_sendto_if_src>:
 * @param src_ip source IP address
 */
err_t
raw_sendto_if_src(struct raw_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  struct netif *netif, const ip_addr_t *src_ip)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b08a      	sub	sp, #40	; 0x28
 8006680:	af04      	add	r7, sp, #16
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
 8006688:	603b      	str	r3, [r7, #0]
  u16_t header_size;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  if ((pcb == NULL) || (dst_ip == NULL) || (netif == NULL) || (src_ip == NULL) ||
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d008      	beq.n	80066a2 <raw_sendto_if_src+0x26>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d005      	beq.n	80066a2 <raw_sendto_if_src+0x26>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <raw_sendto_if_src+0x26>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d102      	bne.n	80066a8 <raw_sendto_if_src+0x2c>
    return ERR_VAL;
 80066a2:	f06f 0305 	mvn.w	r3, #5
 80066a6:	e07b      	b.n	80067a0 <raw_sendto_if_src+0x124>
  }

  header_size = (
 80066a8:	2314      	movs	r3, #20
 80066aa:	827b      	strh	r3, [r7, #18]
                  IP6_HLEN);
#endif

  /* Handle the HDRINCL option as an exception: none of the code below applies
   * to this case, and sending the packet needs to be done differently too. */
  if (pcb->flags & RAW_FLAGS_HDRINCL) {
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	7c5b      	ldrb	r3, [r3, #17]
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d018      	beq.n	80066ea <raw_sendto_if_src+0x6e>
    /* A full header *must* be present in the first pbuf of the chain, as the
     * output routines may access its fields directly. */
    if (p->len < header_size) {
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	895b      	ldrh	r3, [r3, #10]
 80066bc:	8a7a      	ldrh	r2, [r7, #18]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d902      	bls.n	80066c8 <raw_sendto_if_src+0x4c>
      return ERR_VAL;
 80066c2:	f06f 0305 	mvn.w	r3, #5
 80066c6:	e06b      	b.n	80067a0 <raw_sendto_if_src+0x124>
    }
    /* @todo multicast loop support, if at all desired for this scenario.. */
    NETIF_SET_HINTS(netif, &pcb->netif_hints);
    err = ip_output_if_hdrincl(p, src_ip, dst_ip, netif);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	9302      	str	r3, [sp, #8]
 80066cc:	2300      	movs	r3, #0
 80066ce:	9301      	str	r3, [sp, #4]
 80066d0:	2300      	movs	r3, #0
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	2300      	movs	r3, #0
 80066d6:	2200      	movs	r2, #0
 80066d8:	6a39      	ldr	r1, [r7, #32]
 80066da:	68b8      	ldr	r0, [r7, #8]
 80066dc:	f007 fa6e 	bl	800dbbc <ip4_output_if>
 80066e0:	4603      	mov	r3, r0
 80066e2:	743b      	strb	r3, [r7, #16]
    NETIF_RESET_HINTS(netif);
    return err;
 80066e4:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80066e8:	e05a      	b.n	80067a0 <raw_sendto_if_src+0x124>
  }

  /* packet too large to add an IP header without causing an overflow? */
  if ((u16_t)(p->tot_len + header_size) < p->tot_len) {
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	891a      	ldrh	r2, [r3, #8]
 80066ee:	8a7b      	ldrh	r3, [r7, #18]
 80066f0:	4413      	add	r3, r2
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	891b      	ldrh	r3, [r3, #8]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d202      	bcs.n	8006702 <raw_sendto_if_src+0x86>
    return ERR_MEM;
 80066fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006700:	e04e      	b.n	80067a0 <raw_sendto_if_src+0x124>
  }
  /* not enough space to add an IP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, header_size)) {
 8006702:	8a7b      	ldrh	r3, [r7, #18]
 8006704:	4619      	mov	r1, r3
 8006706:	68b8      	ldr	r0, [r7, #8]
 8006708:	f7ff face 	bl	8005ca8 <pbuf_add_header>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d015      	beq.n	800673e <raw_sendto_if_src+0xc2>
    /* allocate header in new pbuf */
    q = pbuf_alloc(PBUF_IP, 0, PBUF_RAM);
 8006712:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006716:	2100      	movs	r1, #0
 8006718:	2022      	movs	r0, #34	; 0x22
 800671a:	f7ff f877 	bl	800580c <pbuf_alloc>
 800671e:	6178      	str	r0, [r7, #20]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d102      	bne.n	800672c <raw_sendto_if_src+0xb0>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("raw_sendto: could not allocate header\n"));
      return ERR_MEM;
 8006726:	f04f 33ff 	mov.w	r3, #4294967295
 800672a:	e039      	b.n	80067a0 <raw_sendto_if_src+0x124>
    }
    if (p->tot_len != 0) {
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	891b      	ldrh	r3, [r3, #8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d018      	beq.n	8006766 <raw_sendto_if_src+0xea>
      /* chain header q in front of given pbuf p */
      pbuf_chain(q, p);
 8006734:	68b9      	ldr	r1, [r7, #8]
 8006736:	6978      	ldr	r0, [r7, #20]
 8006738:	f7ff fc64 	bl	8006004 <pbuf_chain>
 800673c:	e013      	b.n	8006766 <raw_sendto_if_src+0xea>
    }
    /* { first pbuf q points to header pbuf } */
    LWIP_DEBUGF(RAW_DEBUG, ("raw_sendto: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* first pbuf q equals given pbuf */
    q = p;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	617b      	str	r3, [r7, #20]
    if (pbuf_remove_header(q, header_size)) {
 8006742:	8a7b      	ldrh	r3, [r7, #18]
 8006744:	4619      	mov	r1, r3
 8006746:	6978      	ldr	r0, [r7, #20]
 8006748:	f7ff fabe 	bl	8005cc8 <pbuf_remove_header>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d009      	beq.n	8006766 <raw_sendto_if_src+0xea>
      LWIP_ASSERT("Can't restore header we just removed!", 0);
 8006752:	4b15      	ldr	r3, [pc, #84]	; (80067a8 <raw_sendto_if_src+0x12c>)
 8006754:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8006758:	4914      	ldr	r1, [pc, #80]	; (80067ac <raw_sendto_if_src+0x130>)
 800675a:	4815      	ldr	r0, [pc, #84]	; (80067b0 <raw_sendto_if_src+0x134>)
 800675c:	f008 fac0 	bl	800ece0 <iprintf>
      return ERR_MEM;
 8006760:	f04f 33ff 	mov.w	r3, #4294967295
 8006764:	e01c      	b.n	80067a0 <raw_sendto_if_src+0x124>

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? raw_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	7adb      	ldrb	r3, [r3, #11]
 800676a:	747b      	strb	r3, [r7, #17]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  NETIF_SET_HINTS(netif, &pcb->netif_hints);
  err = ip_output_if(q, src_ip, dst_ip, ttl, pcb->tos, pcb->protocol, netif);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	7a9b      	ldrb	r3, [r3, #10]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	7c12      	ldrb	r2, [r2, #16]
 8006774:	7c78      	ldrb	r0, [r7, #17]
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	9102      	str	r1, [sp, #8]
 800677a:	9201      	str	r2, [sp, #4]
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	4603      	mov	r3, r0
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	6a39      	ldr	r1, [r7, #32]
 8006784:	6978      	ldr	r0, [r7, #20]
 8006786:	f007 fa19 	bl	800dbbc <ip4_output_if>
 800678a:	4603      	mov	r3, r0
 800678c:	743b      	strb	r3, [r7, #16]
  NETIF_RESET_HINTS(netif);

  /* did we chain a header earlier? */
  if (q != p) {
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	429a      	cmp	r2, r3
 8006794:	d002      	beq.n	800679c <raw_sendto_if_src+0x120>
    /* free the header */
    pbuf_free(q);
 8006796:	6978      	ldr	r0, [r7, #20]
 8006798:	f7ff fb1c 	bl	8005dd4 <pbuf_free>
  }
  return err;
 800679c:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	08010be4 	.word	0x08010be4
 80067ac:	08010c88 	.word	0x08010c88
 80067b0:	08010c60 	.word	0x08010c60

080067b4 <raw_new>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new(u8_t proto)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	4603      	mov	r3, r0
 80067bc:	71fb      	strb	r3, [r7, #7]
  struct raw_pcb *pcb;

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_new\n"));
  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct raw_pcb *)memp_malloc(MEMP_RAW_PCB);
 80067be:	2000      	movs	r0, #0
 80067c0:	f7fe fc1e 	bl	8005000 <memp_malloc>
 80067c4:	60f8      	str	r0, [r7, #12]
  /* could allocate RAW PCB? */
  if (pcb != NULL) {
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d011      	beq.n	80067f0 <raw_new+0x3c>
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct raw_pcb));
 80067cc:	221c      	movs	r2, #28
 80067ce:	2100      	movs	r1, #0
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f008 fa7d 	bl	800ecd0 <memset>
    pcb->protocol = proto;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	79fa      	ldrb	r2, [r7, #7]
 80067da:	741a      	strb	r2, [r3, #16]
    pcb->ttl = RAW_TTL;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	22ff      	movs	r2, #255	; 0xff
 80067e0:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    raw_set_multicast_ttl(pcb, RAW_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    pcb->next = raw_pcbs;
 80067e2:	4b06      	ldr	r3, [pc, #24]	; (80067fc <raw_new+0x48>)
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	60da      	str	r2, [r3, #12]
    raw_pcbs = pcb;
 80067ea:	4a04      	ldr	r2, [pc, #16]	; (80067fc <raw_new+0x48>)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6013      	str	r3, [r2, #0]
  }
  return pcb;
 80067f0:	68fb      	ldr	r3, [r7, #12]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20008324 	.word	0x20008324

08006800 <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d01e      	beq.n	800684e <raw_netif_ip_addr_changed+0x4e>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d01a      	beq.n	800684e <raw_netif_ip_addr_changed+0x4e>
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d017      	beq.n	800684e <raw_netif_ip_addr_changed+0x4e>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d013      	beq.n	800684e <raw_netif_ip_addr_changed+0x4e>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8006826:	4b0d      	ldr	r3, [pc, #52]	; (800685c <raw_netif_ip_addr_changed+0x5c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	e00c      	b.n	8006848 <raw_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d103      	bne.n	8006842 <raw_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1ef      	bne.n	800682e <raw_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800684e:	bf00      	nop
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	20008324 	.word	0x20008324

08006860 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006864:	f008 fa54 	bl	800ed10 <rand>
 8006868:	4603      	mov	r3, r0
 800686a:	b29b      	uxth	r3, r3
 800686c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006870:	b29b      	uxth	r3, r3
 8006872:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006876:	b29a      	uxth	r2, r3
 8006878:	4b01      	ldr	r3, [pc, #4]	; (8006880 <tcp_init+0x20>)
 800687a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800687c:	bf00      	nop
 800687e:	bd80      	pop	{r7, pc}
 8006880:	20000020 	.word	0x20000020

08006884 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	7d1b      	ldrb	r3, [r3, #20]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d105      	bne.n	80068a0 <tcp_free+0x1c>
 8006894:	4b06      	ldr	r3, [pc, #24]	; (80068b0 <tcp_free+0x2c>)
 8006896:	22d4      	movs	r2, #212	; 0xd4
 8006898:	4906      	ldr	r1, [pc, #24]	; (80068b4 <tcp_free+0x30>)
 800689a:	4807      	ldr	r0, [pc, #28]	; (80068b8 <tcp_free+0x34>)
 800689c:	f008 fa20 	bl	800ece0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	2002      	movs	r0, #2
 80068a4:	f7fe fc1c 	bl	80050e0 <memp_free>
}
 80068a8:	bf00      	nop
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	08010d28 	.word	0x08010d28
 80068b4:	08010d58 	.word	0x08010d58
 80068b8:	08010d6c 	.word	0x08010d6c

080068bc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	7d1b      	ldrb	r3, [r3, #20]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d105      	bne.n	80068d8 <tcp_free_listen+0x1c>
 80068cc:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <tcp_free_listen+0x2c>)
 80068ce:	22df      	movs	r2, #223	; 0xdf
 80068d0:	4906      	ldr	r1, [pc, #24]	; (80068ec <tcp_free_listen+0x30>)
 80068d2:	4807      	ldr	r0, [pc, #28]	; (80068f0 <tcp_free_listen+0x34>)
 80068d4:	f008 fa04 	bl	800ece0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	2003      	movs	r0, #3
 80068dc:	f7fe fc00 	bl	80050e0 <memp_free>
}
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	08010d28 	.word	0x08010d28
 80068ec:	08010d94 	.word	0x08010d94
 80068f0:	08010d6c 	.word	0x08010d6c

080068f4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80068f8:	f000 fea2 	bl	8007640 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80068fc:	4b07      	ldr	r3, [pc, #28]	; (800691c <tcp_tmr+0x28>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	3301      	adds	r3, #1
 8006902:	b2da      	uxtb	r2, r3
 8006904:	4b05      	ldr	r3, [pc, #20]	; (800691c <tcp_tmr+0x28>)
 8006906:	701a      	strb	r2, [r3, #0]
 8006908:	4b04      	ldr	r3, [pc, #16]	; (800691c <tcp_tmr+0x28>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006914:	f000 fb54 	bl	8006fc0 <tcp_slowtmr>
  }
}
 8006918:	bf00      	nop
 800691a:	bd80      	pop	{r7, pc}
 800691c:	2000833d 	.word	0x2000833d

08006920 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d105      	bne.n	800693c <tcp_remove_listener+0x1c>
 8006930:	4b0d      	ldr	r3, [pc, #52]	; (8006968 <tcp_remove_listener+0x48>)
 8006932:	22ff      	movs	r2, #255	; 0xff
 8006934:	490d      	ldr	r1, [pc, #52]	; (800696c <tcp_remove_listener+0x4c>)
 8006936:	480e      	ldr	r0, [pc, #56]	; (8006970 <tcp_remove_listener+0x50>)
 8006938:	f008 f9d2 	bl	800ece0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	e00a      	b.n	8006958 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	429a      	cmp	r2, r3
 800694a:	d102      	bne.n	8006952 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1f1      	bne.n	8006942 <tcp_remove_listener+0x22>
    }
  }
}
 800695e:	bf00      	nop
 8006960:	bf00      	nop
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	08010d28 	.word	0x08010d28
 800696c:	08010db0 	.word	0x08010db0
 8006970:	08010d6c 	.word	0x08010d6c

08006974 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d106      	bne.n	8006990 <tcp_listen_closed+0x1c>
 8006982:	4b14      	ldr	r3, [pc, #80]	; (80069d4 <tcp_listen_closed+0x60>)
 8006984:	f240 1211 	movw	r2, #273	; 0x111
 8006988:	4913      	ldr	r1, [pc, #76]	; (80069d8 <tcp_listen_closed+0x64>)
 800698a:	4814      	ldr	r0, [pc, #80]	; (80069dc <tcp_listen_closed+0x68>)
 800698c:	f008 f9a8 	bl	800ece0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	7d1b      	ldrb	r3, [r3, #20]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d006      	beq.n	80069a6 <tcp_listen_closed+0x32>
 8006998:	4b0e      	ldr	r3, [pc, #56]	; (80069d4 <tcp_listen_closed+0x60>)
 800699a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800699e:	4910      	ldr	r1, [pc, #64]	; (80069e0 <tcp_listen_closed+0x6c>)
 80069a0:	480e      	ldr	r0, [pc, #56]	; (80069dc <tcp_listen_closed+0x68>)
 80069a2:	f008 f99d 	bl	800ece0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80069a6:	2301      	movs	r3, #1
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	e00b      	b.n	80069c4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80069ac:	4a0d      	ldr	r2, [pc, #52]	; (80069e4 <tcp_listen_closed+0x70>)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6879      	ldr	r1, [r7, #4]
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7ff ffb1 	bl	8006920 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3301      	adds	r3, #1
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d9f0      	bls.n	80069ac <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80069ca:	bf00      	nop
 80069cc:	bf00      	nop
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	08010d28 	.word	0x08010d28
 80069d8:	08010dd8 	.word	0x08010dd8
 80069dc:	08010d6c 	.word	0x08010d6c
 80069e0:	08010de4 	.word	0x08010de4
 80069e4:	08012d10 	.word	0x08012d10

080069e8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80069e8:	b5b0      	push	{r4, r5, r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af04      	add	r7, sp, #16
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d106      	bne.n	8006a08 <tcp_close_shutdown+0x20>
 80069fa:	4b63      	ldr	r3, [pc, #396]	; (8006b88 <tcp_close_shutdown+0x1a0>)
 80069fc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006a00:	4962      	ldr	r1, [pc, #392]	; (8006b8c <tcp_close_shutdown+0x1a4>)
 8006a02:	4863      	ldr	r0, [pc, #396]	; (8006b90 <tcp_close_shutdown+0x1a8>)
 8006a04:	f008 f96c 	bl	800ece0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d066      	beq.n	8006adc <tcp_close_shutdown+0xf4>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	7d1b      	ldrb	r3, [r3, #20]
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d003      	beq.n	8006a1e <tcp_close_shutdown+0x36>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	7d1b      	ldrb	r3, [r3, #20]
 8006a1a:	2b07      	cmp	r3, #7
 8006a1c:	d15e      	bne.n	8006adc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d104      	bne.n	8006a30 <tcp_close_shutdown+0x48>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a2a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006a2e:	d055      	beq.n	8006adc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	8b5b      	ldrh	r3, [r3, #26]
 8006a34:	f003 0310 	and.w	r3, r3, #16
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d106      	bne.n	8006a4a <tcp_close_shutdown+0x62>
 8006a3c:	4b52      	ldr	r3, [pc, #328]	; (8006b88 <tcp_close_shutdown+0x1a0>)
 8006a3e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006a42:	4954      	ldr	r1, [pc, #336]	; (8006b94 <tcp_close_shutdown+0x1ac>)
 8006a44:	4852      	ldr	r0, [pc, #328]	; (8006b90 <tcp_close_shutdown+0x1a8>)
 8006a46:	f008 f94b 	bl	800ece0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006a52:	687d      	ldr	r5, [r7, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3304      	adds	r3, #4
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	8ad2      	ldrh	r2, [r2, #22]
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	8b09      	ldrh	r1, [r1, #24]
 8006a60:	9102      	str	r1, [sp, #8]
 8006a62:	9201      	str	r2, [sp, #4]
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	462b      	mov	r3, r5
 8006a68:	4622      	mov	r2, r4
 8006a6a:	4601      	mov	r1, r0
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f004 fe91 	bl	800b794 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f001 f8c6 	bl	8007c04 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006a78:	4b47      	ldr	r3, [pc, #284]	; (8006b98 <tcp_close_shutdown+0x1b0>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d105      	bne.n	8006a8e <tcp_close_shutdown+0xa6>
 8006a82:	4b45      	ldr	r3, [pc, #276]	; (8006b98 <tcp_close_shutdown+0x1b0>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	4a43      	ldr	r2, [pc, #268]	; (8006b98 <tcp_close_shutdown+0x1b0>)
 8006a8a:	6013      	str	r3, [r2, #0]
 8006a8c:	e013      	b.n	8006ab6 <tcp_close_shutdown+0xce>
 8006a8e:	4b42      	ldr	r3, [pc, #264]	; (8006b98 <tcp_close_shutdown+0x1b0>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	e00c      	b.n	8006ab0 <tcp_close_shutdown+0xc8>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d104      	bne.n	8006aaa <tcp_close_shutdown+0xc2>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68da      	ldr	r2, [r3, #12]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	60da      	str	r2, [r3, #12]
 8006aa8:	e005      	b.n	8006ab6 <tcp_close_shutdown+0xce>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1ef      	bne.n	8006a96 <tcp_close_shutdown+0xae>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	60da      	str	r2, [r3, #12]
 8006abc:	4b37      	ldr	r3, [pc, #220]	; (8006b9c <tcp_close_shutdown+0x1b4>)
 8006abe:	2201      	movs	r2, #1
 8006ac0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006ac2:	4b37      	ldr	r3, [pc, #220]	; (8006ba0 <tcp_close_shutdown+0x1b8>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d102      	bne.n	8006ad2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006acc:	f003 fd5e 	bl	800a58c <tcp_trigger_input_pcb_close>
 8006ad0:	e002      	b.n	8006ad8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff fed6 	bl	8006884 <tcp_free>
      }
      return ERR_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	e050      	b.n	8006b7e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	7d1b      	ldrb	r3, [r3, #20]
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d03b      	beq.n	8006b5c <tcp_close_shutdown+0x174>
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	dc44      	bgt.n	8006b72 <tcp_close_shutdown+0x18a>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <tcp_close_shutdown+0x10a>
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d02a      	beq.n	8006b46 <tcp_close_shutdown+0x15e>
 8006af0:	e03f      	b.n	8006b72 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	8adb      	ldrh	r3, [r3, #22]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d021      	beq.n	8006b3e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006afa:	4b2a      	ldr	r3, [pc, #168]	; (8006ba4 <tcp_close_shutdown+0x1bc>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d105      	bne.n	8006b10 <tcp_close_shutdown+0x128>
 8006b04:	4b27      	ldr	r3, [pc, #156]	; (8006ba4 <tcp_close_shutdown+0x1bc>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	4a26      	ldr	r2, [pc, #152]	; (8006ba4 <tcp_close_shutdown+0x1bc>)
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	e013      	b.n	8006b38 <tcp_close_shutdown+0x150>
 8006b10:	4b24      	ldr	r3, [pc, #144]	; (8006ba4 <tcp_close_shutdown+0x1bc>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60bb      	str	r3, [r7, #8]
 8006b16:	e00c      	b.n	8006b32 <tcp_close_shutdown+0x14a>
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d104      	bne.n	8006b2c <tcp_close_shutdown+0x144>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	60da      	str	r2, [r3, #12]
 8006b2a:	e005      	b.n	8006b38 <tcp_close_shutdown+0x150>
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	60bb      	str	r3, [r7, #8]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1ef      	bne.n	8006b18 <tcp_close_shutdown+0x130>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff fea0 	bl	8006884 <tcp_free>
      break;
 8006b44:	e01a      	b.n	8006b7c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff ff14 	bl	8006974 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006b4c:	6879      	ldr	r1, [r7, #4]
 8006b4e:	4816      	ldr	r0, [pc, #88]	; (8006ba8 <tcp_close_shutdown+0x1c0>)
 8006b50:	f001 f8a8 	bl	8007ca4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7ff feb1 	bl	80068bc <tcp_free_listen>
      break;
 8006b5a:	e00f      	b.n	8006b7c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	480e      	ldr	r0, [pc, #56]	; (8006b98 <tcp_close_shutdown+0x1b0>)
 8006b60:	f001 f8a0 	bl	8007ca4 <tcp_pcb_remove>
 8006b64:	4b0d      	ldr	r3, [pc, #52]	; (8006b9c <tcp_close_shutdown+0x1b4>)
 8006b66:	2201      	movs	r2, #1
 8006b68:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7ff fe8a 	bl	8006884 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006b70:	e004      	b.n	8006b7c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f81a 	bl	8006bac <tcp_close_shutdown_fin>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	e000      	b.n	8006b7e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bdb0      	pop	{r4, r5, r7, pc}
 8006b86:	bf00      	nop
 8006b88:	08010d28 	.word	0x08010d28
 8006b8c:	08010dfc 	.word	0x08010dfc
 8006b90:	08010d6c 	.word	0x08010d6c
 8006b94:	08010e1c 	.word	0x08010e1c
 8006b98:	20008334 	.word	0x20008334
 8006b9c:	2000833c 	.word	0x2000833c
 8006ba0:	20008374 	.word	0x20008374
 8006ba4:	2000832c 	.word	0x2000832c
 8006ba8:	20008330 	.word	0x20008330

08006bac <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d106      	bne.n	8006bc8 <tcp_close_shutdown_fin+0x1c>
 8006bba:	4b2e      	ldr	r3, [pc, #184]	; (8006c74 <tcp_close_shutdown_fin+0xc8>)
 8006bbc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006bc0:	492d      	ldr	r1, [pc, #180]	; (8006c78 <tcp_close_shutdown_fin+0xcc>)
 8006bc2:	482e      	ldr	r0, [pc, #184]	; (8006c7c <tcp_close_shutdown_fin+0xd0>)
 8006bc4:	f008 f88c 	bl	800ece0 <iprintf>

  switch (pcb->state) {
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	7d1b      	ldrb	r3, [r3, #20]
 8006bcc:	2b07      	cmp	r3, #7
 8006bce:	d020      	beq.n	8006c12 <tcp_close_shutdown_fin+0x66>
 8006bd0:	2b07      	cmp	r3, #7
 8006bd2:	dc2b      	bgt.n	8006c2c <tcp_close_shutdown_fin+0x80>
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	d002      	beq.n	8006bde <tcp_close_shutdown_fin+0x32>
 8006bd8:	2b04      	cmp	r3, #4
 8006bda:	d00d      	beq.n	8006bf8 <tcp_close_shutdown_fin+0x4c>
 8006bdc:	e026      	b.n	8006c2c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f003 fee6 	bl	800a9b0 <tcp_send_fin>
 8006be4:	4603      	mov	r3, r0
 8006be6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d11f      	bne.n	8006c30 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2205      	movs	r2, #5
 8006bf4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006bf6:	e01b      	b.n	8006c30 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f003 fed9 	bl	800a9b0 <tcp_send_fin>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d114      	bne.n	8006c34 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2205      	movs	r2, #5
 8006c0e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006c10:	e010      	b.n	8006c34 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f003 fecc 	bl	800a9b0 <tcp_send_fin>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d109      	bne.n	8006c38 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2209      	movs	r2, #9
 8006c28:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006c2a:	e005      	b.n	8006c38 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	e01c      	b.n	8006c6a <tcp_close_shutdown_fin+0xbe>
      break;
 8006c30:	bf00      	nop
 8006c32:	e002      	b.n	8006c3a <tcp_close_shutdown_fin+0x8e>
      break;
 8006c34:	bf00      	nop
 8006c36:	e000      	b.n	8006c3a <tcp_close_shutdown_fin+0x8e>
      break;
 8006c38:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d103      	bne.n	8006c4a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f003 fff2 	bl	800ac2c <tcp_output>
 8006c48:	e00d      	b.n	8006c66 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c52:	d108      	bne.n	8006c66 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	8b5b      	ldrh	r3, [r3, #26]
 8006c58:	f043 0308 	orr.w	r3, r3, #8
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	e001      	b.n	8006c6a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	08010d28 	.word	0x08010d28
 8006c78:	08010dd8 	.word	0x08010dd8
 8006c7c:	08010d6c 	.word	0x08010d6c

08006c80 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d109      	bne.n	8006ca2 <tcp_close+0x22>
 8006c8e:	4b0f      	ldr	r3, [pc, #60]	; (8006ccc <tcp_close+0x4c>)
 8006c90:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006c94:	490e      	ldr	r1, [pc, #56]	; (8006cd0 <tcp_close+0x50>)
 8006c96:	480f      	ldr	r0, [pc, #60]	; (8006cd4 <tcp_close+0x54>)
 8006c98:	f008 f822 	bl	800ece0 <iprintf>
 8006c9c:	f06f 030f 	mvn.w	r3, #15
 8006ca0:	e00f      	b.n	8006cc2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	7d1b      	ldrb	r3, [r3, #20]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d006      	beq.n	8006cb8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	8b5b      	ldrh	r3, [r3, #26]
 8006cae:	f043 0310 	orr.w	r3, r3, #16
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006cb8:	2101      	movs	r1, #1
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff fe94 	bl	80069e8 <tcp_close_shutdown>
 8006cc0:	4603      	mov	r3, r0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	08010d28 	.word	0x08010d28
 8006cd0:	08010e38 	.word	0x08010e38
 8006cd4:	08010d6c 	.word	0x08010d6c

08006cd8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b08e      	sub	sp, #56	; 0x38
 8006cdc:	af04      	add	r7, sp, #16
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d107      	bne.n	8006cf8 <tcp_abandon+0x20>
 8006ce8:	4b52      	ldr	r3, [pc, #328]	; (8006e34 <tcp_abandon+0x15c>)
 8006cea:	f240 223d 	movw	r2, #573	; 0x23d
 8006cee:	4952      	ldr	r1, [pc, #328]	; (8006e38 <tcp_abandon+0x160>)
 8006cf0:	4852      	ldr	r0, [pc, #328]	; (8006e3c <tcp_abandon+0x164>)
 8006cf2:	f007 fff5 	bl	800ece0 <iprintf>
 8006cf6:	e099      	b.n	8006e2c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	7d1b      	ldrb	r3, [r3, #20]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d106      	bne.n	8006d0e <tcp_abandon+0x36>
 8006d00:	4b4c      	ldr	r3, [pc, #304]	; (8006e34 <tcp_abandon+0x15c>)
 8006d02:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006d06:	494e      	ldr	r1, [pc, #312]	; (8006e40 <tcp_abandon+0x168>)
 8006d08:	484c      	ldr	r0, [pc, #304]	; (8006e3c <tcp_abandon+0x164>)
 8006d0a:	f007 ffe9 	bl	800ece0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	7d1b      	ldrb	r3, [r3, #20]
 8006d12:	2b0a      	cmp	r3, #10
 8006d14:	d107      	bne.n	8006d26 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006d16:	6879      	ldr	r1, [r7, #4]
 8006d18:	484a      	ldr	r0, [pc, #296]	; (8006e44 <tcp_abandon+0x16c>)
 8006d1a:	f000 ffc3 	bl	8007ca4 <tcp_pcb_remove>
    tcp_free(pcb);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7ff fdb0 	bl	8006884 <tcp_free>
 8006d24:	e082      	b.n	8006e2c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d32:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d40:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	7d1b      	ldrb	r3, [r3, #20]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d126      	bne.n	8006d9e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	8adb      	ldrh	r3, [r3, #22]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d02e      	beq.n	8006db6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006d58:	4b3b      	ldr	r3, [pc, #236]	; (8006e48 <tcp_abandon+0x170>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d105      	bne.n	8006d6e <tcp_abandon+0x96>
 8006d62:	4b39      	ldr	r3, [pc, #228]	; (8006e48 <tcp_abandon+0x170>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	4a37      	ldr	r2, [pc, #220]	; (8006e48 <tcp_abandon+0x170>)
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	e013      	b.n	8006d96 <tcp_abandon+0xbe>
 8006d6e:	4b36      	ldr	r3, [pc, #216]	; (8006e48 <tcp_abandon+0x170>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	61fb      	str	r3, [r7, #28]
 8006d74:	e00c      	b.n	8006d90 <tcp_abandon+0xb8>
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d104      	bne.n	8006d8a <tcp_abandon+0xb2>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68da      	ldr	r2, [r3, #12]
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	60da      	str	r2, [r3, #12]
 8006d88:	e005      	b.n	8006d96 <tcp_abandon+0xbe>
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	61fb      	str	r3, [r7, #28]
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1ef      	bne.n	8006d76 <tcp_abandon+0x9e>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	60da      	str	r2, [r3, #12]
 8006d9c:	e00b      	b.n	8006db6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	8adb      	ldrh	r3, [r3, #22]
 8006da6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006da8:	6879      	ldr	r1, [r7, #4]
 8006daa:	4828      	ldr	r0, [pc, #160]	; (8006e4c <tcp_abandon+0x174>)
 8006dac:	f000 ff7a 	bl	8007ca4 <tcp_pcb_remove>
 8006db0:	4b27      	ldr	r3, [pc, #156]	; (8006e50 <tcp_abandon+0x178>)
 8006db2:	2201      	movs	r2, #1
 8006db4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d004      	beq.n	8006dc8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 fd1c 	bl	8007800 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d004      	beq.n	8006dda <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 fd13 	bl	8007800 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d004      	beq.n	8006dec <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 fd0a 	bl	8007800 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00e      	beq.n	8006e10 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006df2:	6879      	ldr	r1, [r7, #4]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3304      	adds	r3, #4
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	8b12      	ldrh	r2, [r2, #24]
 8006dfc:	9202      	str	r2, [sp, #8]
 8006dfe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006e00:	9201      	str	r2, [sp, #4]
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	460b      	mov	r3, r1
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	69b9      	ldr	r1, [r7, #24]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f004 fcc2 	bl	800b794 <tcp_rst>
    }
    last_state = pcb->state;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	7d1b      	ldrb	r3, [r3, #20]
 8006e14:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7ff fd34 	bl	8006884 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d004      	beq.n	8006e2c <tcp_abandon+0x154>
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f06f 010c 	mvn.w	r1, #12
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	4798      	blx	r3
  }
}
 8006e2c:	3728      	adds	r7, #40	; 0x28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	08010d28 	.word	0x08010d28
 8006e38:	08010e6c 	.word	0x08010e6c
 8006e3c:	08010d6c 	.word	0x08010d6c
 8006e40:	08010e88 	.word	0x08010e88
 8006e44:	20008338 	.word	0x20008338
 8006e48:	2000832c 	.word	0x2000832c
 8006e4c:	20008334 	.word	0x20008334
 8006e50:	2000833c 	.word	0x2000833c

08006e54 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7ff ff3a 	bl	8006cd8 <tcp_abandon>
}
 8006e64:	bf00      	nop
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d106      	bne.n	8006e88 <tcp_update_rcv_ann_wnd+0x1c>
 8006e7a:	4b25      	ldr	r3, [pc, #148]	; (8006f10 <tcp_update_rcv_ann_wnd+0xa4>)
 8006e7c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006e80:	4924      	ldr	r1, [pc, #144]	; (8006f14 <tcp_update_rcv_ann_wnd+0xa8>)
 8006e82:	4825      	ldr	r0, [pc, #148]	; (8006f18 <tcp_update_rcv_ann_wnd+0xac>)
 8006e84:	f007 ff2c 	bl	800ece0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006e90:	4413      	add	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006e9c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006ea0:	bf28      	it	cs
 8006ea2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006ea6:	b292      	uxth	r2, r2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	db08      	blt.n	8006ec4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	e020      	b.n	8006f06 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	dd03      	ble.n	8006eda <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ed8:	e014      	b.n	8006f04 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eec:	d306      	bcc.n	8006efc <tcp_update_rcv_ann_wnd+0x90>
 8006eee:	4b08      	ldr	r3, [pc, #32]	; (8006f10 <tcp_update_rcv_ann_wnd+0xa4>)
 8006ef0:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006ef4:	4909      	ldr	r1, [pc, #36]	; (8006f1c <tcp_update_rcv_ann_wnd+0xb0>)
 8006ef6:	4808      	ldr	r0, [pc, #32]	; (8006f18 <tcp_update_rcv_ann_wnd+0xac>)
 8006ef8:	f007 fef2 	bl	800ece0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006f04:	2300      	movs	r3, #0
  }
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	08010d28 	.word	0x08010d28
 8006f14:	08010f84 	.word	0x08010f84
 8006f18:	08010d6c 	.word	0x08010d6c
 8006f1c:	08010fa8 	.word	0x08010fa8

08006f20 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d107      	bne.n	8006f42 <tcp_recved+0x22>
 8006f32:	4b1f      	ldr	r3, [pc, #124]	; (8006fb0 <tcp_recved+0x90>)
 8006f34:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006f38:	491e      	ldr	r1, [pc, #120]	; (8006fb4 <tcp_recved+0x94>)
 8006f3a:	481f      	ldr	r0, [pc, #124]	; (8006fb8 <tcp_recved+0x98>)
 8006f3c:	f007 fed0 	bl	800ece0 <iprintf>
 8006f40:	e032      	b.n	8006fa8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	7d1b      	ldrb	r3, [r3, #20]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d106      	bne.n	8006f58 <tcp_recved+0x38>
 8006f4a:	4b19      	ldr	r3, [pc, #100]	; (8006fb0 <tcp_recved+0x90>)
 8006f4c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006f50:	491a      	ldr	r1, [pc, #104]	; (8006fbc <tcp_recved+0x9c>)
 8006f52:	4819      	ldr	r0, [pc, #100]	; (8006fb8 <tcp_recved+0x98>)
 8006f54:	f007 fec4 	bl	800ece0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006f5c:	887b      	ldrh	r3, [r7, #2]
 8006f5e:	4413      	add	r3, r2
 8006f60:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006f62:	89fb      	ldrh	r3, [r7, #14]
 8006f64:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006f68:	d804      	bhi.n	8006f74 <tcp_recved+0x54>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f6e:	89fa      	ldrh	r2, [r7, #14]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d204      	bcs.n	8006f7e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006f7a:	851a      	strh	r2, [r3, #40]	; 0x28
 8006f7c:	e002      	b.n	8006f84 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	89fa      	ldrh	r2, [r7, #14]
 8006f82:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7ff ff71 	bl	8006e6c <tcp_update_rcv_ann_wnd>
 8006f8a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006f92:	d309      	bcc.n	8006fa8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	8b5b      	ldrh	r3, [r3, #26]
 8006f98:	f043 0302 	orr.w	r3, r3, #2
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f003 fe42 	bl	800ac2c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	08010d28 	.word	0x08010d28
 8006fb4:	08010fc4 	.word	0x08010fc4
 8006fb8:	08010d6c 	.word	0x08010d6c
 8006fbc:	08010fdc 	.word	0x08010fdc

08006fc0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006fc0:	b5b0      	push	{r4, r5, r7, lr}
 8006fc2:	b090      	sub	sp, #64	; 0x40
 8006fc4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006fcc:	4b94      	ldr	r3, [pc, #592]	; (8007220 <tcp_slowtmr+0x260>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	4a93      	ldr	r2, [pc, #588]	; (8007220 <tcp_slowtmr+0x260>)
 8006fd4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006fd6:	4b93      	ldr	r3, [pc, #588]	; (8007224 <tcp_slowtmr+0x264>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	4b91      	ldr	r3, [pc, #580]	; (8007224 <tcp_slowtmr+0x264>)
 8006fe0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006fe6:	4b90      	ldr	r3, [pc, #576]	; (8007228 <tcp_slowtmr+0x268>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006fec:	e29f      	b.n	800752e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff0:	7d1b      	ldrb	r3, [r3, #20]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d106      	bne.n	8007004 <tcp_slowtmr+0x44>
 8006ff6:	4b8d      	ldr	r3, [pc, #564]	; (800722c <tcp_slowtmr+0x26c>)
 8006ff8:	f240 42be 	movw	r2, #1214	; 0x4be
 8006ffc:	498c      	ldr	r1, [pc, #560]	; (8007230 <tcp_slowtmr+0x270>)
 8006ffe:	488d      	ldr	r0, [pc, #564]	; (8007234 <tcp_slowtmr+0x274>)
 8007000:	f007 fe6e 	bl	800ece0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007006:	7d1b      	ldrb	r3, [r3, #20]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d106      	bne.n	800701a <tcp_slowtmr+0x5a>
 800700c:	4b87      	ldr	r3, [pc, #540]	; (800722c <tcp_slowtmr+0x26c>)
 800700e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007012:	4989      	ldr	r1, [pc, #548]	; (8007238 <tcp_slowtmr+0x278>)
 8007014:	4887      	ldr	r0, [pc, #540]	; (8007234 <tcp_slowtmr+0x274>)
 8007016:	f007 fe63 	bl	800ece0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800701a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701c:	7d1b      	ldrb	r3, [r3, #20]
 800701e:	2b0a      	cmp	r3, #10
 8007020:	d106      	bne.n	8007030 <tcp_slowtmr+0x70>
 8007022:	4b82      	ldr	r3, [pc, #520]	; (800722c <tcp_slowtmr+0x26c>)
 8007024:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007028:	4984      	ldr	r1, [pc, #528]	; (800723c <tcp_slowtmr+0x27c>)
 800702a:	4882      	ldr	r0, [pc, #520]	; (8007234 <tcp_slowtmr+0x274>)
 800702c:	f007 fe58 	bl	800ece0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007032:	7f9a      	ldrb	r2, [r3, #30]
 8007034:	4b7b      	ldr	r3, [pc, #492]	; (8007224 <tcp_slowtmr+0x264>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	429a      	cmp	r2, r3
 800703a:	d105      	bne.n	8007048 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800703c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007046:	e272      	b.n	800752e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007048:	4b76      	ldr	r3, [pc, #472]	; (8007224 <tcp_slowtmr+0x264>)
 800704a:	781a      	ldrb	r2, [r3, #0]
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007050:	2300      	movs	r3, #0
 8007052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007056:	2300      	movs	r3, #0
 8007058:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800705c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705e:	7d1b      	ldrb	r3, [r3, #20]
 8007060:	2b02      	cmp	r3, #2
 8007062:	d10a      	bne.n	800707a <tcp_slowtmr+0xba>
 8007064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007066:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800706a:	2b05      	cmp	r3, #5
 800706c:	d905      	bls.n	800707a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800706e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007072:	3301      	adds	r3, #1
 8007074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007078:	e11e      	b.n	80072b8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800707a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007080:	2b0b      	cmp	r3, #11
 8007082:	d905      	bls.n	8007090 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007088:	3301      	adds	r3, #1
 800708a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800708e:	e113      	b.n	80072b8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007092:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007096:	2b00      	cmp	r3, #0
 8007098:	d075      	beq.n	8007186 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800709a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d006      	beq.n	80070b0 <tcp_slowtmr+0xf0>
 80070a2:	4b62      	ldr	r3, [pc, #392]	; (800722c <tcp_slowtmr+0x26c>)
 80070a4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80070a8:	4965      	ldr	r1, [pc, #404]	; (8007240 <tcp_slowtmr+0x280>)
 80070aa:	4862      	ldr	r0, [pc, #392]	; (8007234 <tcp_slowtmr+0x274>)
 80070ac:	f007 fe18 	bl	800ece0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80070b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d106      	bne.n	80070c6 <tcp_slowtmr+0x106>
 80070b8:	4b5c      	ldr	r3, [pc, #368]	; (800722c <tcp_slowtmr+0x26c>)
 80070ba:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80070be:	4961      	ldr	r1, [pc, #388]	; (8007244 <tcp_slowtmr+0x284>)
 80070c0:	485c      	ldr	r0, [pc, #368]	; (8007234 <tcp_slowtmr+0x274>)
 80070c2:	f007 fe0d 	bl	800ece0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80070c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80070cc:	2b0b      	cmp	r3, #11
 80070ce:	d905      	bls.n	80070dc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80070d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070d4:	3301      	adds	r3, #1
 80070d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070da:	e0ed      	b.n	80072b8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80070dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80070e2:	3b01      	subs	r3, #1
 80070e4:	4a58      	ldr	r2, [pc, #352]	; (8007248 <tcp_slowtmr+0x288>)
 80070e6:	5cd3      	ldrb	r3, [r2, r3]
 80070e8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80070ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80070f0:	7c7a      	ldrb	r2, [r7, #17]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d907      	bls.n	8007106 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80070fc:	3301      	adds	r3, #1
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007102:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007108:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800710c:	7c7a      	ldrb	r2, [r7, #17]
 800710e:	429a      	cmp	r2, r3
 8007110:	f200 80d2 	bhi.w	80072b8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007114:	2301      	movs	r3, #1
 8007116:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800711e:	2b00      	cmp	r3, #0
 8007120:	d108      	bne.n	8007134 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007122:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007124:	f004 fc2a 	bl	800b97c <tcp_zero_window_probe>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d014      	beq.n	8007158 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800712e:	2300      	movs	r3, #0
 8007130:	623b      	str	r3, [r7, #32]
 8007132:	e011      	b.n	8007158 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800713a:	4619      	mov	r1, r3
 800713c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800713e:	f003 faef 	bl	800a720 <tcp_split_unsent_seg>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d107      	bne.n	8007158 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007148:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800714a:	f003 fd6f 	bl	800ac2c <tcp_output>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007154:	2300      	movs	r3, #0
 8007156:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 80ac 	beq.w	80072b8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800716e:	2b06      	cmp	r3, #6
 8007170:	f200 80a2 	bhi.w	80072b8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007176:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800717a:	3301      	adds	r3, #1
 800717c:	b2da      	uxtb	r2, r3
 800717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007180:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007184:	e098      	b.n	80072b8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007188:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800718c:	2b00      	cmp	r3, #0
 800718e:	db0f      	blt.n	80071b0 <tcp_slowtmr+0x1f0>
 8007190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007192:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007196:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800719a:	4293      	cmp	r3, r2
 800719c:	d008      	beq.n	80071b0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	3301      	adds	r3, #1
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	b21a      	sxth	r2, r3
 80071ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ae:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80071b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80071b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80071bc:	429a      	cmp	r2, r3
 80071be:	db7b      	blt.n	80072b8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80071c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071c2:	f004 f825 	bl	800b210 <tcp_rexmit_rto_prepare>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d007      	beq.n	80071dc <tcp_slowtmr+0x21c>
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d171      	bne.n	80072b8 <tcp_slowtmr+0x2f8>
 80071d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d06d      	beq.n	80072b8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80071dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071de:	7d1b      	ldrb	r3, [r3, #20]
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d03a      	beq.n	800725a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80071e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071ea:	2b0c      	cmp	r3, #12
 80071ec:	bf28      	it	cs
 80071ee:	230c      	movcs	r3, #12
 80071f0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80071f8:	10db      	asrs	r3, r3, #3
 80071fa:	b21b      	sxth	r3, r3
 80071fc:	461a      	mov	r2, r3
 80071fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007200:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007204:	4413      	add	r3, r2
 8007206:	7efa      	ldrb	r2, [r7, #27]
 8007208:	4910      	ldr	r1, [pc, #64]	; (800724c <tcp_slowtmr+0x28c>)
 800720a:	5c8a      	ldrb	r2, [r1, r2]
 800720c:	4093      	lsls	r3, r2
 800720e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007216:	4293      	cmp	r3, r2
 8007218:	dc1a      	bgt.n	8007250 <tcp_slowtmr+0x290>
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	b21a      	sxth	r2, r3
 800721e:	e019      	b.n	8007254 <tcp_slowtmr+0x294>
 8007220:	20008328 	.word	0x20008328
 8007224:	2000833e 	.word	0x2000833e
 8007228:	20008334 	.word	0x20008334
 800722c:	08010d28 	.word	0x08010d28
 8007230:	0801106c 	.word	0x0801106c
 8007234:	08010d6c 	.word	0x08010d6c
 8007238:	08011098 	.word	0x08011098
 800723c:	080110c4 	.word	0x080110c4
 8007240:	080110f4 	.word	0x080110f4
 8007244:	08011128 	.word	0x08011128
 8007248:	08012d08 	.word	0x08012d08
 800724c:	08012cf8 	.word	0x08012cf8
 8007250:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007256:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800725a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725c:	2200      	movs	r2, #0
 800725e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007262:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007268:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800726c:	4293      	cmp	r3, r2
 800726e:	bf28      	it	cs
 8007270:	4613      	movcs	r3, r2
 8007272:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007274:	8a7b      	ldrh	r3, [r7, #18]
 8007276:	085b      	lsrs	r3, r3, #1
 8007278:	b29a      	uxth	r2, r3
 800727a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007282:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800728a:	005b      	lsls	r3, r3, #1
 800728c:	b29b      	uxth	r3, r3
 800728e:	429a      	cmp	r2, r3
 8007290:	d206      	bcs.n	80072a0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007294:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	b29a      	uxth	r2, r3
 800729a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80072a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80072a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80072aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ac:	2200      	movs	r2, #0
 80072ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80072b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072b4:	f004 f81c 	bl	800b2f0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80072b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ba:	7d1b      	ldrb	r3, [r3, #20]
 80072bc:	2b06      	cmp	r3, #6
 80072be:	d111      	bne.n	80072e4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80072c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c2:	8b5b      	ldrh	r3, [r3, #26]
 80072c4:	f003 0310 	and.w	r3, r3, #16
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00b      	beq.n	80072e4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80072cc:	4b9d      	ldr	r3, [pc, #628]	; (8007544 <tcp_slowtmr+0x584>)
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	2b28      	cmp	r3, #40	; 0x28
 80072d8:	d904      	bls.n	80072e4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80072da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072de:	3301      	adds	r3, #1
 80072e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80072e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e6:	7a5b      	ldrb	r3, [r3, #9]
 80072e8:	f003 0308 	and.w	r3, r3, #8
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d04c      	beq.n	800738a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80072f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80072f4:	2b04      	cmp	r3, #4
 80072f6:	d003      	beq.n	8007300 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80072f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80072fc:	2b07      	cmp	r3, #7
 80072fe:	d144      	bne.n	800738a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007300:	4b90      	ldr	r3, [pc, #576]	; (8007544 <tcp_slowtmr+0x584>)
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800730a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007310:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8007314:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007318:	498b      	ldr	r1, [pc, #556]	; (8007548 <tcp_slowtmr+0x588>)
 800731a:	fba1 1303 	umull	r1, r3, r1, r3
 800731e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007320:	429a      	cmp	r2, r3
 8007322:	d90a      	bls.n	800733a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007328:	3301      	adds	r3, #1
 800732a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800732e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007332:	3301      	adds	r3, #1
 8007334:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007338:	e027      	b.n	800738a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800733a:	4b82      	ldr	r3, [pc, #520]	; (8007544 <tcp_slowtmr+0x584>)
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800734a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007350:	4618      	mov	r0, r3
 8007352:	4b7e      	ldr	r3, [pc, #504]	; (800754c <tcp_slowtmr+0x58c>)
 8007354:	fb00 f303 	mul.w	r3, r0, r3
 8007358:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800735a:	497b      	ldr	r1, [pc, #492]	; (8007548 <tcp_slowtmr+0x588>)
 800735c:	fba1 1303 	umull	r1, r3, r1, r3
 8007360:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007362:	429a      	cmp	r2, r3
 8007364:	d911      	bls.n	800738a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8007366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007368:	f004 fac8 	bl	800b8fc <tcp_keepalive>
 800736c:	4603      	mov	r3, r0
 800736e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007372:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007376:	2b00      	cmp	r3, #0
 8007378:	d107      	bne.n	800738a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800737a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007380:	3301      	adds	r3, #1
 8007382:	b2da      	uxtb	r2, r3
 8007384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007386:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800738e:	2b00      	cmp	r3, #0
 8007390:	d011      	beq.n	80073b6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007392:	4b6c      	ldr	r3, [pc, #432]	; (8007544 <tcp_slowtmr+0x584>)
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	1ad2      	subs	r2, r2, r3
 800739c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80073a2:	4619      	mov	r1, r3
 80073a4:	460b      	mov	r3, r1
 80073a6:	005b      	lsls	r3, r3, #1
 80073a8:	440b      	add	r3, r1
 80073aa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d302      	bcc.n	80073b6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80073b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073b2:	f000 fddb 	bl	8007f6c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80073b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b8:	7d1b      	ldrb	r3, [r3, #20]
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d10b      	bne.n	80073d6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80073be:	4b61      	ldr	r3, [pc, #388]	; (8007544 <tcp_slowtmr+0x584>)
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	2b28      	cmp	r3, #40	; 0x28
 80073ca:	d904      	bls.n	80073d6 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80073cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073d0:	3301      	adds	r3, #1
 80073d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	7d1b      	ldrb	r3, [r3, #20]
 80073da:	2b09      	cmp	r3, #9
 80073dc:	d10b      	bne.n	80073f6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80073de:	4b59      	ldr	r3, [pc, #356]	; (8007544 <tcp_slowtmr+0x584>)
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	2bf0      	cmp	r3, #240	; 0xf0
 80073ea:	d904      	bls.n	80073f6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80073ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073f0:	3301      	adds	r3, #1
 80073f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80073f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d060      	beq.n	80074c0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80073fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007404:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007408:	f000 fbfc 	bl	8007c04 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800740c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740e:	2b00      	cmp	r3, #0
 8007410:	d010      	beq.n	8007434 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007412:	4b4f      	ldr	r3, [pc, #316]	; (8007550 <tcp_slowtmr+0x590>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007418:	429a      	cmp	r2, r3
 800741a:	d106      	bne.n	800742a <tcp_slowtmr+0x46a>
 800741c:	4b4d      	ldr	r3, [pc, #308]	; (8007554 <tcp_slowtmr+0x594>)
 800741e:	f240 526d 	movw	r2, #1389	; 0x56d
 8007422:	494d      	ldr	r1, [pc, #308]	; (8007558 <tcp_slowtmr+0x598>)
 8007424:	484d      	ldr	r0, [pc, #308]	; (800755c <tcp_slowtmr+0x59c>)
 8007426:	f007 fc5b 	bl	800ece0 <iprintf>
        prev->next = pcb->next;
 800742a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742c:	68da      	ldr	r2, [r3, #12]
 800742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007430:	60da      	str	r2, [r3, #12]
 8007432:	e00f      	b.n	8007454 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007434:	4b46      	ldr	r3, [pc, #280]	; (8007550 <tcp_slowtmr+0x590>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800743a:	429a      	cmp	r2, r3
 800743c:	d006      	beq.n	800744c <tcp_slowtmr+0x48c>
 800743e:	4b45      	ldr	r3, [pc, #276]	; (8007554 <tcp_slowtmr+0x594>)
 8007440:	f240 5271 	movw	r2, #1393	; 0x571
 8007444:	4946      	ldr	r1, [pc, #280]	; (8007560 <tcp_slowtmr+0x5a0>)
 8007446:	4845      	ldr	r0, [pc, #276]	; (800755c <tcp_slowtmr+0x59c>)
 8007448:	f007 fc4a 	bl	800ece0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800744c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	4a3f      	ldr	r2, [pc, #252]	; (8007550 <tcp_slowtmr+0x590>)
 8007452:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007454:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007458:	2b00      	cmp	r3, #0
 800745a:	d013      	beq.n	8007484 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800745c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007462:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007464:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007468:	3304      	adds	r3, #4
 800746a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800746c:	8ad2      	ldrh	r2, [r2, #22]
 800746e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007470:	8b09      	ldrh	r1, [r1, #24]
 8007472:	9102      	str	r1, [sp, #8]
 8007474:	9201      	str	r2, [sp, #4]
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	462b      	mov	r3, r5
 800747a:	4622      	mov	r2, r4
 800747c:	4601      	mov	r1, r0
 800747e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007480:	f004 f988 	bl	800b794 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748c:	7d1b      	ldrb	r3, [r3, #20]
 800748e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007492:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800749a:	6838      	ldr	r0, [r7, #0]
 800749c:	f7ff f9f2 	bl	8006884 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80074a0:	4b30      	ldr	r3, [pc, #192]	; (8007564 <tcp_slowtmr+0x5a4>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d004      	beq.n	80074b6 <tcp_slowtmr+0x4f6>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f06f 010c 	mvn.w	r1, #12
 80074b2:	68b8      	ldr	r0, [r7, #8]
 80074b4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80074b6:	4b2b      	ldr	r3, [pc, #172]	; (8007564 <tcp_slowtmr+0x5a4>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d037      	beq.n	800752e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80074be:	e590      	b.n	8006fe2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80074c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80074c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80074ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074cc:	7f1b      	ldrb	r3, [r3, #28]
 80074ce:	3301      	adds	r3, #1
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	7f1a      	ldrb	r2, [r3, #28]
 80074da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074dc:	7f5b      	ldrb	r3, [r3, #29]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d325      	bcc.n	800752e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80074e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e4:	2200      	movs	r2, #0
 80074e6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80074e8:	4b1e      	ldr	r3, [pc, #120]	; (8007564 <tcp_slowtmr+0x5a4>)
 80074ea:	2200      	movs	r2, #0
 80074ec:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80074ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00b      	beq.n	8007510 <tcp_slowtmr+0x550>
 80074f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007500:	6912      	ldr	r2, [r2, #16]
 8007502:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007504:	4610      	mov	r0, r2
 8007506:	4798      	blx	r3
 8007508:	4603      	mov	r3, r0
 800750a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800750e:	e002      	b.n	8007516 <tcp_slowtmr+0x556>
 8007510:	2300      	movs	r3, #0
 8007512:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007516:	4b13      	ldr	r3, [pc, #76]	; (8007564 <tcp_slowtmr+0x5a4>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d000      	beq.n	8007520 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800751e:	e560      	b.n	8006fe2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007520:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007524:	2b00      	cmp	r3, #0
 8007526:	d102      	bne.n	800752e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8007528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800752a:	f003 fb7f 	bl	800ac2c <tcp_output>
  while (pcb != NULL) {
 800752e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007530:	2b00      	cmp	r3, #0
 8007532:	f47f ad5c 	bne.w	8006fee <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007536:	2300      	movs	r3, #0
 8007538:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800753a:	4b0b      	ldr	r3, [pc, #44]	; (8007568 <tcp_slowtmr+0x5a8>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007540:	e067      	b.n	8007612 <tcp_slowtmr+0x652>
 8007542:	bf00      	nop
 8007544:	20008328 	.word	0x20008328
 8007548:	10624dd3 	.word	0x10624dd3
 800754c:	000124f8 	.word	0x000124f8
 8007550:	20008334 	.word	0x20008334
 8007554:	08010d28 	.word	0x08010d28
 8007558:	08011160 	.word	0x08011160
 800755c:	08010d6c 	.word	0x08010d6c
 8007560:	0801118c 	.word	0x0801118c
 8007564:	2000833c 	.word	0x2000833c
 8007568:	20008338 	.word	0x20008338
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756e:	7d1b      	ldrb	r3, [r3, #20]
 8007570:	2b0a      	cmp	r3, #10
 8007572:	d006      	beq.n	8007582 <tcp_slowtmr+0x5c2>
 8007574:	4b2b      	ldr	r3, [pc, #172]	; (8007624 <tcp_slowtmr+0x664>)
 8007576:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800757a:	492b      	ldr	r1, [pc, #172]	; (8007628 <tcp_slowtmr+0x668>)
 800757c:	482b      	ldr	r0, [pc, #172]	; (800762c <tcp_slowtmr+0x66c>)
 800757e:	f007 fbaf 	bl	800ece0 <iprintf>
    pcb_remove = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007588:	4b29      	ldr	r3, [pc, #164]	; (8007630 <tcp_slowtmr+0x670>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758e:	6a1b      	ldr	r3, [r3, #32]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	2bf0      	cmp	r3, #240	; 0xf0
 8007594:	d904      	bls.n	80075a0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800759a:	3301      	adds	r3, #1
 800759c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80075a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d02f      	beq.n	8007608 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80075a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075aa:	f000 fb2b 	bl	8007c04 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80075ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d010      	beq.n	80075d6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80075b4:	4b1f      	ldr	r3, [pc, #124]	; (8007634 <tcp_slowtmr+0x674>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d106      	bne.n	80075cc <tcp_slowtmr+0x60c>
 80075be:	4b19      	ldr	r3, [pc, #100]	; (8007624 <tcp_slowtmr+0x664>)
 80075c0:	f240 52af 	movw	r2, #1455	; 0x5af
 80075c4:	491c      	ldr	r1, [pc, #112]	; (8007638 <tcp_slowtmr+0x678>)
 80075c6:	4819      	ldr	r0, [pc, #100]	; (800762c <tcp_slowtmr+0x66c>)
 80075c8:	f007 fb8a 	bl	800ece0 <iprintf>
        prev->next = pcb->next;
 80075cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ce:	68da      	ldr	r2, [r3, #12]
 80075d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d2:	60da      	str	r2, [r3, #12]
 80075d4:	e00f      	b.n	80075f6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80075d6:	4b17      	ldr	r3, [pc, #92]	; (8007634 <tcp_slowtmr+0x674>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075dc:	429a      	cmp	r2, r3
 80075de:	d006      	beq.n	80075ee <tcp_slowtmr+0x62e>
 80075e0:	4b10      	ldr	r3, [pc, #64]	; (8007624 <tcp_slowtmr+0x664>)
 80075e2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80075e6:	4915      	ldr	r1, [pc, #84]	; (800763c <tcp_slowtmr+0x67c>)
 80075e8:	4810      	ldr	r0, [pc, #64]	; (800762c <tcp_slowtmr+0x66c>)
 80075ea:	f007 fb79 	bl	800ece0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80075ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	4a10      	ldr	r2, [pc, #64]	; (8007634 <tcp_slowtmr+0x674>)
 80075f4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80075f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80075fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007600:	69f8      	ldr	r0, [r7, #28]
 8007602:	f7ff f93f 	bl	8006884 <tcp_free>
 8007606:	e004      	b.n	8007612 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800760c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1a9      	bne.n	800756c <tcp_slowtmr+0x5ac>
    }
  }
}
 8007618:	bf00      	nop
 800761a:	bf00      	nop
 800761c:	3730      	adds	r7, #48	; 0x30
 800761e:	46bd      	mov	sp, r7
 8007620:	bdb0      	pop	{r4, r5, r7, pc}
 8007622:	bf00      	nop
 8007624:	08010d28 	.word	0x08010d28
 8007628:	080111b8 	.word	0x080111b8
 800762c:	08010d6c 	.word	0x08010d6c
 8007630:	20008328 	.word	0x20008328
 8007634:	20008338 	.word	0x20008338
 8007638:	080111e8 	.word	0x080111e8
 800763c:	08011210 	.word	0x08011210

08007640 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007646:	4b2d      	ldr	r3, [pc, #180]	; (80076fc <tcp_fasttmr+0xbc>)
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	3301      	adds	r3, #1
 800764c:	b2da      	uxtb	r2, r3
 800764e:	4b2b      	ldr	r3, [pc, #172]	; (80076fc <tcp_fasttmr+0xbc>)
 8007650:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007652:	4b2b      	ldr	r3, [pc, #172]	; (8007700 <tcp_fasttmr+0xc0>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007658:	e048      	b.n	80076ec <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	7f9a      	ldrb	r2, [r3, #30]
 800765e:	4b27      	ldr	r3, [pc, #156]	; (80076fc <tcp_fasttmr+0xbc>)
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	429a      	cmp	r2, r3
 8007664:	d03f      	beq.n	80076e6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007666:	4b25      	ldr	r3, [pc, #148]	; (80076fc <tcp_fasttmr+0xbc>)
 8007668:	781a      	ldrb	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	8b5b      	ldrh	r3, [r3, #26]
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d010      	beq.n	800769c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	8b5b      	ldrh	r3, [r3, #26]
 800767e:	f043 0302 	orr.w	r3, r3, #2
 8007682:	b29a      	uxth	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f003 facf 	bl	800ac2c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8b5b      	ldrh	r3, [r3, #26]
 8007692:	f023 0303 	bic.w	r3, r3, #3
 8007696:	b29a      	uxth	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	8b5b      	ldrh	r3, [r3, #26]
 80076a0:	f003 0308 	and.w	r3, r3, #8
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d009      	beq.n	80076bc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	8b5b      	ldrh	r3, [r3, #26]
 80076ac:	f023 0308 	bic.w	r3, r3, #8
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7ff fa78 	bl	8006bac <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00a      	beq.n	80076e0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80076ca:	4b0e      	ldr	r3, [pc, #56]	; (8007704 <tcp_fasttmr+0xc4>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f819 	bl	8007708 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80076d6:	4b0b      	ldr	r3, [pc, #44]	; (8007704 <tcp_fasttmr+0xc4>)
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d000      	beq.n	80076e0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80076de:	e7b8      	b.n	8007652 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	607b      	str	r3, [r7, #4]
 80076e4:	e002      	b.n	80076ec <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1b3      	bne.n	800765a <tcp_fasttmr+0x1a>
    }
  }
}
 80076f2:	bf00      	nop
 80076f4:	bf00      	nop
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	2000833e 	.word	0x2000833e
 8007700:	20008334 	.word	0x20008334
 8007704:	2000833c 	.word	0x2000833c

08007708 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007708:	b590      	push	{r4, r7, lr}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d109      	bne.n	800772a <tcp_process_refused_data+0x22>
 8007716:	4b37      	ldr	r3, [pc, #220]	; (80077f4 <tcp_process_refused_data+0xec>)
 8007718:	f240 6209 	movw	r2, #1545	; 0x609
 800771c:	4936      	ldr	r1, [pc, #216]	; (80077f8 <tcp_process_refused_data+0xf0>)
 800771e:	4837      	ldr	r0, [pc, #220]	; (80077fc <tcp_process_refused_data+0xf4>)
 8007720:	f007 fade 	bl	800ece0 <iprintf>
 8007724:	f06f 030f 	mvn.w	r3, #15
 8007728:	e060      	b.n	80077ec <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800772e:	7b5b      	ldrb	r3, [r3, #13]
 8007730:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007736:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00b      	beq.n	8007760 <tcp_process_refused_data+0x58>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6918      	ldr	r0, [r3, #16]
 8007752:	2300      	movs	r3, #0
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	6879      	ldr	r1, [r7, #4]
 8007758:	47a0      	blx	r4
 800775a:	4603      	mov	r3, r0
 800775c:	73fb      	strb	r3, [r7, #15]
 800775e:	e007      	b.n	8007770 <tcp_process_refused_data+0x68>
 8007760:	2300      	movs	r3, #0
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	6879      	ldr	r1, [r7, #4]
 8007766:	2000      	movs	r0, #0
 8007768:	f000 f8a4 	bl	80078b4 <tcp_recv_null>
 800776c:	4603      	mov	r3, r0
 800776e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d12a      	bne.n	80077ce <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	f003 0320 	and.w	r3, r3, #32
 800777e:	2b00      	cmp	r3, #0
 8007780:	d033      	beq.n	80077ea <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007786:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800778a:	d005      	beq.n	8007798 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007790:	3301      	adds	r3, #1
 8007792:	b29a      	uxth	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00b      	beq.n	80077ba <tcp_process_refused_data+0xb2>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6918      	ldr	r0, [r3, #16]
 80077ac:	2300      	movs	r3, #0
 80077ae:	2200      	movs	r2, #0
 80077b0:	6879      	ldr	r1, [r7, #4]
 80077b2:	47a0      	blx	r4
 80077b4:	4603      	mov	r3, r0
 80077b6:	73fb      	strb	r3, [r7, #15]
 80077b8:	e001      	b.n	80077be <tcp_process_refused_data+0xb6>
 80077ba:	2300      	movs	r3, #0
 80077bc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80077be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077c2:	f113 0f0d 	cmn.w	r3, #13
 80077c6:	d110      	bne.n	80077ea <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80077c8:	f06f 030c 	mvn.w	r3, #12
 80077cc:	e00e      	b.n	80077ec <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80077ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077d2:	f113 0f0d 	cmn.w	r3, #13
 80077d6:	d102      	bne.n	80077de <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80077d8:	f06f 030c 	mvn.w	r3, #12
 80077dc:	e006      	b.n	80077ec <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80077e4:	f06f 0304 	mvn.w	r3, #4
 80077e8:	e000      	b.n	80077ec <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd90      	pop	{r4, r7, pc}
 80077f4:	08010d28 	.word	0x08010d28
 80077f8:	08011238 	.word	0x08011238
 80077fc:	08010d6c 	.word	0x08010d6c

08007800 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007808:	e007      	b.n	800781a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f80a 	bl	800782a <tcp_seg_free>
    seg = next;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1f4      	bne.n	800780a <tcp_segs_free+0xa>
  }
}
 8007820:	bf00      	nop
 8007822:	bf00      	nop
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b082      	sub	sp, #8
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00c      	beq.n	8007852 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d004      	beq.n	800784a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	4618      	mov	r0, r3
 8007846:	f7fe fac5 	bl	8005dd4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	2004      	movs	r0, #4
 800784e:	f7fd fc47 	bl	80050e0 <memp_free>
  }
}
 8007852:	bf00      	nop
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
	...

0800785c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d106      	bne.n	8007878 <tcp_seg_copy+0x1c>
 800786a:	4b0f      	ldr	r3, [pc, #60]	; (80078a8 <tcp_seg_copy+0x4c>)
 800786c:	f240 6282 	movw	r2, #1666	; 0x682
 8007870:	490e      	ldr	r1, [pc, #56]	; (80078ac <tcp_seg_copy+0x50>)
 8007872:	480f      	ldr	r0, [pc, #60]	; (80078b0 <tcp_seg_copy+0x54>)
 8007874:	f007 fa34 	bl	800ece0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007878:	2004      	movs	r0, #4
 800787a:	f7fd fbc1 	bl	8005000 <memp_malloc>
 800787e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <tcp_seg_copy+0x2e>
    return NULL;
 8007886:	2300      	movs	r3, #0
 8007888:	e00a      	b.n	80078a0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800788a:	2210      	movs	r2, #16
 800788c:	6879      	ldr	r1, [r7, #4]
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f007 f9f6 	bl	800ec80 <memcpy>
  pbuf_ref(cseg->p);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	4618      	mov	r0, r3
 800789a:	f7fe fb3b 	bl	8005f14 <pbuf_ref>
  return cseg;
 800789e:	68fb      	ldr	r3, [r7, #12]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	08010d28 	.word	0x08010d28
 80078ac:	0801127c 	.word	0x0801127c
 80078b0:	08010d6c 	.word	0x08010d6c

080078b4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
 80078c0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d109      	bne.n	80078dc <tcp_recv_null+0x28>
 80078c8:	4b12      	ldr	r3, [pc, #72]	; (8007914 <tcp_recv_null+0x60>)
 80078ca:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80078ce:	4912      	ldr	r1, [pc, #72]	; (8007918 <tcp_recv_null+0x64>)
 80078d0:	4812      	ldr	r0, [pc, #72]	; (800791c <tcp_recv_null+0x68>)
 80078d2:	f007 fa05 	bl	800ece0 <iprintf>
 80078d6:	f06f 030f 	mvn.w	r3, #15
 80078da:	e016      	b.n	800790a <tcp_recv_null+0x56>

  if (p != NULL) {
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d009      	beq.n	80078f6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	891b      	ldrh	r3, [r3, #8]
 80078e6:	4619      	mov	r1, r3
 80078e8:	68b8      	ldr	r0, [r7, #8]
 80078ea:	f7ff fb19 	bl	8006f20 <tcp_recved>
    pbuf_free(p);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7fe fa70 	bl	8005dd4 <pbuf_free>
 80078f4:	e008      	b.n	8007908 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80078f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d104      	bne.n	8007908 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80078fe:	68b8      	ldr	r0, [r7, #8]
 8007900:	f7ff f9be 	bl	8006c80 <tcp_close>
 8007904:	4603      	mov	r3, r0
 8007906:	e000      	b.n	800790a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	08010d28 	.word	0x08010d28
 8007918:	08011298 	.word	0x08011298
 800791c:	08010d6c 	.word	0x08010d6c

08007920 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	4603      	mov	r3, r0
 8007928:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800792a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800792e:	2b00      	cmp	r3, #0
 8007930:	db01      	blt.n	8007936 <tcp_kill_prio+0x16>
 8007932:	79fb      	ldrb	r3, [r7, #7]
 8007934:	e000      	b.n	8007938 <tcp_kill_prio+0x18>
 8007936:	237f      	movs	r3, #127	; 0x7f
 8007938:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800793a:	7afb      	ldrb	r3, [r7, #11]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d034      	beq.n	80079aa <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007940:	7afb      	ldrb	r3, [r7, #11]
 8007942:	3b01      	subs	r3, #1
 8007944:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007946:	2300      	movs	r3, #0
 8007948:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800794a:	2300      	movs	r3, #0
 800794c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800794e:	4b19      	ldr	r3, [pc, #100]	; (80079b4 <tcp_kill_prio+0x94>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	617b      	str	r3, [r7, #20]
 8007954:	e01f      	b.n	8007996 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	7d5b      	ldrb	r3, [r3, #21]
 800795a:	7afa      	ldrb	r2, [r7, #11]
 800795c:	429a      	cmp	r2, r3
 800795e:	d80c      	bhi.n	800797a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007964:	7afa      	ldrb	r2, [r7, #11]
 8007966:	429a      	cmp	r2, r3
 8007968:	d112      	bne.n	8007990 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800796a:	4b13      	ldr	r3, [pc, #76]	; (80079b8 <tcp_kill_prio+0x98>)
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	429a      	cmp	r2, r3
 8007978:	d80a      	bhi.n	8007990 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800797a:	4b0f      	ldr	r3, [pc, #60]	; (80079b8 <tcp_kill_prio+0x98>)
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	7d5b      	ldrb	r3, [r3, #21]
 800798e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1dc      	bne.n	8007956 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d004      	beq.n	80079ac <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80079a2:	6938      	ldr	r0, [r7, #16]
 80079a4:	f7ff fa56 	bl	8006e54 <tcp_abort>
 80079a8:	e000      	b.n	80079ac <tcp_kill_prio+0x8c>
    return;
 80079aa:	bf00      	nop
  }
}
 80079ac:	3718      	adds	r7, #24
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	20008334 	.word	0x20008334
 80079b8:	20008328 	.word	0x20008328

080079bc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	4603      	mov	r3, r0
 80079c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d009      	beq.n	80079e0 <tcp_kill_state+0x24>
 80079cc:	79fb      	ldrb	r3, [r7, #7]
 80079ce:	2b09      	cmp	r3, #9
 80079d0:	d006      	beq.n	80079e0 <tcp_kill_state+0x24>
 80079d2:	4b1a      	ldr	r3, [pc, #104]	; (8007a3c <tcp_kill_state+0x80>)
 80079d4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80079d8:	4919      	ldr	r1, [pc, #100]	; (8007a40 <tcp_kill_state+0x84>)
 80079da:	481a      	ldr	r0, [pc, #104]	; (8007a44 <tcp_kill_state+0x88>)
 80079dc:	f007 f980 	bl	800ece0 <iprintf>

  inactivity = 0;
 80079e0:	2300      	movs	r3, #0
 80079e2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80079e4:	2300      	movs	r3, #0
 80079e6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80079e8:	4b17      	ldr	r3, [pc, #92]	; (8007a48 <tcp_kill_state+0x8c>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	617b      	str	r3, [r7, #20]
 80079ee:	e017      	b.n	8007a20 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	7d1b      	ldrb	r3, [r3, #20]
 80079f4:	79fa      	ldrb	r2, [r7, #7]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d10f      	bne.n	8007a1a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80079fa:	4b14      	ldr	r3, [pc, #80]	; (8007a4c <tcp_kill_state+0x90>)
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d807      	bhi.n	8007a1a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007a0a:	4b10      	ldr	r3, [pc, #64]	; (8007a4c <tcp_kill_state+0x90>)
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	617b      	str	r3, [r7, #20]
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e4      	bne.n	80079f0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	6938      	ldr	r0, [r7, #16]
 8007a30:	f7ff f952 	bl	8006cd8 <tcp_abandon>
  }
}
 8007a34:	bf00      	nop
 8007a36:	3718      	adds	r7, #24
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	08010d28 	.word	0x08010d28
 8007a40:	080112b4 	.word	0x080112b4
 8007a44:	08010d6c 	.word	0x08010d6c
 8007a48:	20008334 	.word	0x20008334
 8007a4c:	20008328 	.word	0x20008328

08007a50 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a5e:	4b12      	ldr	r3, [pc, #72]	; (8007aa8 <tcp_kill_timewait+0x58>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	60fb      	str	r3, [r7, #12]
 8007a64:	e012      	b.n	8007a8c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007a66:	4b11      	ldr	r3, [pc, #68]	; (8007aac <tcp_kill_timewait+0x5c>)
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d807      	bhi.n	8007a86 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007a76:	4b0d      	ldr	r3, [pc, #52]	; (8007aac <tcp_kill_timewait+0x5c>)
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1e9      	bne.n	8007a66 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d002      	beq.n	8007a9e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007a98:	68b8      	ldr	r0, [r7, #8]
 8007a9a:	f7ff f9db 	bl	8006e54 <tcp_abort>
  }
}
 8007a9e:	bf00      	nop
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20008338 	.word	0x20008338
 8007aac:	20008328 	.word	0x20008328

08007ab0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007ab6:	4b10      	ldr	r3, [pc, #64]	; (8007af8 <tcp_handle_closepend+0x48>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007abc:	e014      	b.n	8007ae8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	8b5b      	ldrh	r3, [r3, #26]
 8007ac8:	f003 0308 	and.w	r3, r3, #8
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d009      	beq.n	8007ae4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	8b5b      	ldrh	r3, [r3, #26]
 8007ad4:	f023 0308 	bic.w	r3, r3, #8
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7ff f864 	bl	8006bac <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1e7      	bne.n	8007abe <tcp_handle_closepend+0xe>
  }
}
 8007aee:	bf00      	nop
 8007af0:	bf00      	nop
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	20008334 	.word	0x20008334

08007afc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	4603      	mov	r3, r0
 8007b04:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b06:	2002      	movs	r0, #2
 8007b08:	f7fd fa7a 	bl	8005000 <memp_malloc>
 8007b0c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d126      	bne.n	8007b62 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007b14:	f7ff ffcc 	bl	8007ab0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007b18:	f7ff ff9a 	bl	8007a50 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b1c:	2002      	movs	r0, #2
 8007b1e:	f7fd fa6f 	bl	8005000 <memp_malloc>
 8007b22:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d11b      	bne.n	8007b62 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007b2a:	2009      	movs	r0, #9
 8007b2c:	f7ff ff46 	bl	80079bc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b30:	2002      	movs	r0, #2
 8007b32:	f7fd fa65 	bl	8005000 <memp_malloc>
 8007b36:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d111      	bne.n	8007b62 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007b3e:	2008      	movs	r0, #8
 8007b40:	f7ff ff3c 	bl	80079bc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b44:	2002      	movs	r0, #2
 8007b46:	f7fd fa5b 	bl	8005000 <memp_malloc>
 8007b4a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d107      	bne.n	8007b62 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007b52:	79fb      	ldrb	r3, [r7, #7]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7ff fee3 	bl	8007920 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b5a:	2002      	movs	r0, #2
 8007b5c:	f7fd fa50 	bl	8005000 <memp_malloc>
 8007b60:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d03f      	beq.n	8007be8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007b68:	229c      	movs	r2, #156	; 0x9c
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f007 f8af 	bl	800ecd0 <memset>
    pcb->prio = prio;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	79fa      	ldrb	r2, [r7, #7]
 8007b76:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007b7e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007b88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	22ff      	movs	r2, #255	; 0xff
 8007b96:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007b9e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2206      	movs	r2, #6
 8007ba4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2206      	movs	r2, #6
 8007bac:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bb4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007bbe:	4b0d      	ldr	r3, [pc, #52]	; (8007bf4 <tcp_alloc+0xf8>)
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007bc6:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <tcp_alloc+0xfc>)
 8007bc8:	781a      	ldrb	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007bd4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4a08      	ldr	r2, [pc, #32]	; (8007bfc <tcp_alloc+0x100>)
 8007bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	4a07      	ldr	r2, [pc, #28]	; (8007c00 <tcp_alloc+0x104>)
 8007be4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007be8:	68fb      	ldr	r3, [r7, #12]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	20008328 	.word	0x20008328
 8007bf8:	2000833e 	.word	0x2000833e
 8007bfc:	080078b5 	.word	0x080078b5
 8007c00:	006ddd00 	.word	0x006ddd00

08007c04 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d107      	bne.n	8007c22 <tcp_pcb_purge+0x1e>
 8007c12:	4b21      	ldr	r3, [pc, #132]	; (8007c98 <tcp_pcb_purge+0x94>)
 8007c14:	f640 0251 	movw	r2, #2129	; 0x851
 8007c18:	4920      	ldr	r1, [pc, #128]	; (8007c9c <tcp_pcb_purge+0x98>)
 8007c1a:	4821      	ldr	r0, [pc, #132]	; (8007ca0 <tcp_pcb_purge+0x9c>)
 8007c1c:	f007 f860 	bl	800ece0 <iprintf>
 8007c20:	e037      	b.n	8007c92 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	7d1b      	ldrb	r3, [r3, #20]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d033      	beq.n	8007c92 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007c2e:	2b0a      	cmp	r3, #10
 8007c30:	d02f      	beq.n	8007c92 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d02b      	beq.n	8007c92 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d007      	beq.n	8007c52 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fe f8c4 	bl	8005dd4 <pbuf_free>
      pcb->refused_data = NULL;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f986 	bl	8007f6c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c66:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7ff fdc7 	bl	8007800 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7ff fdc2 	bl	8007800 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	66da      	str	r2, [r3, #108]	; 0x6c
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	08010d28 	.word	0x08010d28
 8007c9c:	08011374 	.word	0x08011374
 8007ca0:	08010d6c 	.word	0x08010d6c

08007ca4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d106      	bne.n	8007cc2 <tcp_pcb_remove+0x1e>
 8007cb4:	4b3e      	ldr	r3, [pc, #248]	; (8007db0 <tcp_pcb_remove+0x10c>)
 8007cb6:	f640 0283 	movw	r2, #2179	; 0x883
 8007cba:	493e      	ldr	r1, [pc, #248]	; (8007db4 <tcp_pcb_remove+0x110>)
 8007cbc:	483e      	ldr	r0, [pc, #248]	; (8007db8 <tcp_pcb_remove+0x114>)
 8007cbe:	f007 f80f 	bl	800ece0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d106      	bne.n	8007cd6 <tcp_pcb_remove+0x32>
 8007cc8:	4b39      	ldr	r3, [pc, #228]	; (8007db0 <tcp_pcb_remove+0x10c>)
 8007cca:	f640 0284 	movw	r2, #2180	; 0x884
 8007cce:	493b      	ldr	r1, [pc, #236]	; (8007dbc <tcp_pcb_remove+0x118>)
 8007cd0:	4839      	ldr	r0, [pc, #228]	; (8007db8 <tcp_pcb_remove+0x114>)
 8007cd2:	f007 f805 	bl	800ece0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d105      	bne.n	8007cec <tcp_pcb_remove+0x48>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68da      	ldr	r2, [r3, #12]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	e013      	b.n	8007d14 <tcp_pcb_remove+0x70>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	60fb      	str	r3, [r7, #12]
 8007cf2:	e00c      	b.n	8007d0e <tcp_pcb_remove+0x6a>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	683a      	ldr	r2, [r7, #0]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d104      	bne.n	8007d08 <tcp_pcb_remove+0x64>
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	68da      	ldr	r2, [r3, #12]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	60da      	str	r2, [r3, #12]
 8007d06:	e005      	b.n	8007d14 <tcp_pcb_remove+0x70>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1ef      	bne.n	8007cf4 <tcp_pcb_remove+0x50>
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	2200      	movs	r2, #0
 8007d18:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007d1a:	6838      	ldr	r0, [r7, #0]
 8007d1c:	f7ff ff72 	bl	8007c04 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	7d1b      	ldrb	r3, [r3, #20]
 8007d24:	2b0a      	cmp	r3, #10
 8007d26:	d013      	beq.n	8007d50 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d00f      	beq.n	8007d50 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	8b5b      	ldrh	r3, [r3, #26]
 8007d34:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d009      	beq.n	8007d50 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	8b5b      	ldrh	r3, [r3, #26]
 8007d40:	f043 0302 	orr.w	r3, r3, #2
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007d4a:	6838      	ldr	r0, [r7, #0]
 8007d4c:	f002 ff6e 	bl	800ac2c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	7d1b      	ldrb	r3, [r3, #20]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d020      	beq.n	8007d9a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d006      	beq.n	8007d6e <tcp_pcb_remove+0xca>
 8007d60:	4b13      	ldr	r3, [pc, #76]	; (8007db0 <tcp_pcb_remove+0x10c>)
 8007d62:	f640 0293 	movw	r2, #2195	; 0x893
 8007d66:	4916      	ldr	r1, [pc, #88]	; (8007dc0 <tcp_pcb_remove+0x11c>)
 8007d68:	4813      	ldr	r0, [pc, #76]	; (8007db8 <tcp_pcb_remove+0x114>)
 8007d6a:	f006 ffb9 	bl	800ece0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d006      	beq.n	8007d84 <tcp_pcb_remove+0xe0>
 8007d76:	4b0e      	ldr	r3, [pc, #56]	; (8007db0 <tcp_pcb_remove+0x10c>)
 8007d78:	f640 0294 	movw	r2, #2196	; 0x894
 8007d7c:	4911      	ldr	r1, [pc, #68]	; (8007dc4 <tcp_pcb_remove+0x120>)
 8007d7e:	480e      	ldr	r0, [pc, #56]	; (8007db8 <tcp_pcb_remove+0x114>)
 8007d80:	f006 ffae 	bl	800ece0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d006      	beq.n	8007d9a <tcp_pcb_remove+0xf6>
 8007d8c:	4b08      	ldr	r3, [pc, #32]	; (8007db0 <tcp_pcb_remove+0x10c>)
 8007d8e:	f640 0296 	movw	r2, #2198	; 0x896
 8007d92:	490d      	ldr	r1, [pc, #52]	; (8007dc8 <tcp_pcb_remove+0x124>)
 8007d94:	4808      	ldr	r0, [pc, #32]	; (8007db8 <tcp_pcb_remove+0x114>)
 8007d96:	f006 ffa3 	bl	800ece0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	2200      	movs	r2, #0
 8007da4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007da6:	bf00      	nop
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	08010d28 	.word	0x08010d28
 8007db4:	08011390 	.word	0x08011390
 8007db8:	08010d6c 	.word	0x08010d6c
 8007dbc:	080113ac 	.word	0x080113ac
 8007dc0:	080113cc 	.word	0x080113cc
 8007dc4:	080113e4 	.word	0x080113e4
 8007dc8:	08011400 	.word	0x08011400

08007dcc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d106      	bne.n	8007de8 <tcp_next_iss+0x1c>
 8007dda:	4b0a      	ldr	r3, [pc, #40]	; (8007e04 <tcp_next_iss+0x38>)
 8007ddc:	f640 02af 	movw	r2, #2223	; 0x8af
 8007de0:	4909      	ldr	r1, [pc, #36]	; (8007e08 <tcp_next_iss+0x3c>)
 8007de2:	480a      	ldr	r0, [pc, #40]	; (8007e0c <tcp_next_iss+0x40>)
 8007de4:	f006 ff7c 	bl	800ece0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007de8:	4b09      	ldr	r3, [pc, #36]	; (8007e10 <tcp_next_iss+0x44>)
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <tcp_next_iss+0x48>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4413      	add	r3, r2
 8007df2:	4a07      	ldr	r2, [pc, #28]	; (8007e10 <tcp_next_iss+0x44>)
 8007df4:	6013      	str	r3, [r2, #0]
  return iss;
 8007df6:	4b06      	ldr	r3, [pc, #24]	; (8007e10 <tcp_next_iss+0x44>)
 8007df8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	08010d28 	.word	0x08010d28
 8007e08:	08011418 	.word	0x08011418
 8007e0c:	08010d6c 	.word	0x08010d6c
 8007e10:	20000024 	.word	0x20000024
 8007e14:	20008328 	.word	0x20008328

08007e18 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	4603      	mov	r3, r0
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
 8007e24:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d106      	bne.n	8007e3a <tcp_eff_send_mss_netif+0x22>
 8007e2c:	4b14      	ldr	r3, [pc, #80]	; (8007e80 <tcp_eff_send_mss_netif+0x68>)
 8007e2e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007e32:	4914      	ldr	r1, [pc, #80]	; (8007e84 <tcp_eff_send_mss_netif+0x6c>)
 8007e34:	4814      	ldr	r0, [pc, #80]	; (8007e88 <tcp_eff_send_mss_netif+0x70>)
 8007e36:	f006 ff53 	bl	800ece0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d101      	bne.n	8007e44 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007e40:	89fb      	ldrh	r3, [r7, #14]
 8007e42:	e019      	b.n	8007e78 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007e48:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007e4a:	8afb      	ldrh	r3, [r7, #22]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d012      	beq.n	8007e76 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007e50:	2328      	movs	r3, #40	; 0x28
 8007e52:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007e54:	8afa      	ldrh	r2, [r7, #22]
 8007e56:	8abb      	ldrh	r3, [r7, #20]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d904      	bls.n	8007e66 <tcp_eff_send_mss_netif+0x4e>
 8007e5c:	8afa      	ldrh	r2, [r7, #22]
 8007e5e:	8abb      	ldrh	r3, [r7, #20]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	e000      	b.n	8007e68 <tcp_eff_send_mss_netif+0x50>
 8007e66:	2300      	movs	r3, #0
 8007e68:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007e6a:	8a7a      	ldrh	r2, [r7, #18]
 8007e6c:	89fb      	ldrh	r3, [r7, #14]
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	bf28      	it	cs
 8007e72:	4613      	movcs	r3, r2
 8007e74:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007e76:	89fb      	ldrh	r3, [r7, #14]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3718      	adds	r7, #24
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	08010d28 	.word	0x08010d28
 8007e84:	08011434 	.word	0x08011434
 8007e88:	08010d6c 	.word	0x08010d6c

08007e8c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d119      	bne.n	8007ed4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007ea0:	4b10      	ldr	r3, [pc, #64]	; (8007ee4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007ea2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007ea6:	4910      	ldr	r1, [pc, #64]	; (8007ee8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007ea8:	4810      	ldr	r0, [pc, #64]	; (8007eec <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007eaa:	f006 ff19 	bl	800ece0 <iprintf>

  while (pcb != NULL) {
 8007eae:	e011      	b.n	8007ed4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d108      	bne.n	8007ece <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f7fe ffc6 	bl	8006e54 <tcp_abort>
      pcb = next;
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	60fb      	str	r3, [r7, #12]
 8007ecc:	e002      	b.n	8007ed4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1ea      	bne.n	8007eb0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007eda:	bf00      	nop
 8007edc:	bf00      	nop
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	08010d28 	.word	0x08010d28
 8007ee8:	0801145c 	.word	0x0801145c
 8007eec:	08010d6c 	.word	0x08010d6c

08007ef0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d02a      	beq.n	8007f56 <tcp_netif_ip_addr_changed+0x66>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d026      	beq.n	8007f56 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007f08:	4b15      	ldr	r3, [pc, #84]	; (8007f60 <tcp_netif_ip_addr_changed+0x70>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7ff ffbc 	bl	8007e8c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007f14:	4b13      	ldr	r3, [pc, #76]	; (8007f64 <tcp_netif_ip_addr_changed+0x74>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7ff ffb6 	bl	8007e8c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d017      	beq.n	8007f56 <tcp_netif_ip_addr_changed+0x66>
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d013      	beq.n	8007f56 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007f2e:	4b0e      	ldr	r3, [pc, #56]	; (8007f68 <tcp_netif_ip_addr_changed+0x78>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	60fb      	str	r3, [r7, #12]
 8007f34:	e00c      	b.n	8007f50 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d103      	bne.n	8007f4a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	60fb      	str	r3, [r7, #12]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1ef      	bne.n	8007f36 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007f56:	bf00      	nop
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	20008334 	.word	0x20008334
 8007f64:	2000832c 	.word	0x2000832c
 8007f68:	20008330 	.word	0x20008330

08007f6c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d007      	beq.n	8007f8c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7ff fc3d 	bl	8007800 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007f94:	b590      	push	{r4, r7, lr}
 8007f96:	b08d      	sub	sp, #52	; 0x34
 8007f98:	af04      	add	r7, sp, #16
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d105      	bne.n	8007fb0 <tcp_input+0x1c>
 8007fa4:	4b9b      	ldr	r3, [pc, #620]	; (8008214 <tcp_input+0x280>)
 8007fa6:	2283      	movs	r2, #131	; 0x83
 8007fa8:	499b      	ldr	r1, [pc, #620]	; (8008218 <tcp_input+0x284>)
 8007faa:	489c      	ldr	r0, [pc, #624]	; (800821c <tcp_input+0x288>)
 8007fac:	f006 fe98 	bl	800ece0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	4a9a      	ldr	r2, [pc, #616]	; (8008220 <tcp_input+0x28c>)
 8007fb6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	895b      	ldrh	r3, [r3, #10]
 8007fbc:	2b13      	cmp	r3, #19
 8007fbe:	f240 83d1 	bls.w	8008764 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007fc2:	4b98      	ldr	r3, [pc, #608]	; (8008224 <tcp_input+0x290>)
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	4a97      	ldr	r2, [pc, #604]	; (8008224 <tcp_input+0x290>)
 8007fc8:	6812      	ldr	r2, [r2, #0]
 8007fca:	4611      	mov	r1, r2
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f005 fecd 	bl	800dd6c <ip4_addr_isbroadcast_u32>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f040 83c7 	bne.w	8008768 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007fda:	4b92      	ldr	r3, [pc, #584]	; (8008224 <tcp_input+0x290>)
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007fe2:	2be0      	cmp	r3, #224	; 0xe0
 8007fe4:	f000 83c0 	beq.w	8008768 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007fe8:	4b8d      	ldr	r3, [pc, #564]	; (8008220 <tcp_input+0x28c>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	899b      	ldrh	r3, [r3, #12]
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7fc fb1f 	bl	8004634 <lwip_htons>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	0b1b      	lsrs	r3, r3, #12
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008002:	7cbb      	ldrb	r3, [r7, #18]
 8008004:	2b13      	cmp	r3, #19
 8008006:	f240 83b1 	bls.w	800876c <tcp_input+0x7d8>
 800800a:	7cbb      	ldrb	r3, [r7, #18]
 800800c:	b29a      	uxth	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	891b      	ldrh	r3, [r3, #8]
 8008012:	429a      	cmp	r2, r3
 8008014:	f200 83aa 	bhi.w	800876c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008018:	7cbb      	ldrb	r3, [r7, #18]
 800801a:	b29b      	uxth	r3, r3
 800801c:	3b14      	subs	r3, #20
 800801e:	b29a      	uxth	r2, r3
 8008020:	4b81      	ldr	r3, [pc, #516]	; (8008228 <tcp_input+0x294>)
 8008022:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008024:	4b81      	ldr	r3, [pc, #516]	; (800822c <tcp_input+0x298>)
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	895a      	ldrh	r2, [r3, #10]
 800802e:	7cbb      	ldrb	r3, [r7, #18]
 8008030:	b29b      	uxth	r3, r3
 8008032:	429a      	cmp	r2, r3
 8008034:	d309      	bcc.n	800804a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008036:	4b7c      	ldr	r3, [pc, #496]	; (8008228 <tcp_input+0x294>)
 8008038:	881a      	ldrh	r2, [r3, #0]
 800803a:	4b7d      	ldr	r3, [pc, #500]	; (8008230 <tcp_input+0x29c>)
 800803c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800803e:	7cbb      	ldrb	r3, [r7, #18]
 8008040:	4619      	mov	r1, r3
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7fd fe40 	bl	8005cc8 <pbuf_remove_header>
 8008048:	e04e      	b.n	80080e8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d105      	bne.n	800805e <tcp_input+0xca>
 8008052:	4b70      	ldr	r3, [pc, #448]	; (8008214 <tcp_input+0x280>)
 8008054:	22c2      	movs	r2, #194	; 0xc2
 8008056:	4977      	ldr	r1, [pc, #476]	; (8008234 <tcp_input+0x2a0>)
 8008058:	4870      	ldr	r0, [pc, #448]	; (800821c <tcp_input+0x288>)
 800805a:	f006 fe41 	bl	800ece0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800805e:	2114      	movs	r1, #20
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7fd fe31 	bl	8005cc8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	895a      	ldrh	r2, [r3, #10]
 800806a:	4b71      	ldr	r3, [pc, #452]	; (8008230 <tcp_input+0x29c>)
 800806c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800806e:	4b6e      	ldr	r3, [pc, #440]	; (8008228 <tcp_input+0x294>)
 8008070:	881a      	ldrh	r2, [r3, #0]
 8008072:	4b6f      	ldr	r3, [pc, #444]	; (8008230 <tcp_input+0x29c>)
 8008074:	881b      	ldrh	r3, [r3, #0]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800807a:	4b6d      	ldr	r3, [pc, #436]	; (8008230 <tcp_input+0x29c>)
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7fd fe21 	bl	8005cc8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	895b      	ldrh	r3, [r3, #10]
 800808c:	8a3a      	ldrh	r2, [r7, #16]
 800808e:	429a      	cmp	r2, r3
 8008090:	f200 836e 	bhi.w	8008770 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	4a64      	ldr	r2, [pc, #400]	; (800822c <tcp_input+0x298>)
 800809c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	8a3a      	ldrh	r2, [r7, #16]
 80080a4:	4611      	mov	r1, r2
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fd fe0e 	bl	8005cc8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	891a      	ldrh	r2, [r3, #8]
 80080b0:	8a3b      	ldrh	r3, [r7, #16]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	895b      	ldrh	r3, [r3, #10]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d005      	beq.n	80080ce <tcp_input+0x13a>
 80080c2:	4b54      	ldr	r3, [pc, #336]	; (8008214 <tcp_input+0x280>)
 80080c4:	22df      	movs	r2, #223	; 0xdf
 80080c6:	495c      	ldr	r1, [pc, #368]	; (8008238 <tcp_input+0x2a4>)
 80080c8:	4854      	ldr	r0, [pc, #336]	; (800821c <tcp_input+0x288>)
 80080ca:	f006 fe09 	bl	800ece0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	891a      	ldrh	r2, [r3, #8]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	891b      	ldrh	r3, [r3, #8]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d005      	beq.n	80080e8 <tcp_input+0x154>
 80080dc:	4b4d      	ldr	r3, [pc, #308]	; (8008214 <tcp_input+0x280>)
 80080de:	22e0      	movs	r2, #224	; 0xe0
 80080e0:	4956      	ldr	r1, [pc, #344]	; (800823c <tcp_input+0x2a8>)
 80080e2:	484e      	ldr	r0, [pc, #312]	; (800821c <tcp_input+0x288>)
 80080e4:	f006 fdfc 	bl	800ece0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80080e8:	4b4d      	ldr	r3, [pc, #308]	; (8008220 <tcp_input+0x28c>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	881b      	ldrh	r3, [r3, #0]
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	4a4b      	ldr	r2, [pc, #300]	; (8008220 <tcp_input+0x28c>)
 80080f2:	6814      	ldr	r4, [r2, #0]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fc fa9d 	bl	8004634 <lwip_htons>
 80080fa:	4603      	mov	r3, r0
 80080fc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80080fe:	4b48      	ldr	r3, [pc, #288]	; (8008220 <tcp_input+0x28c>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	885b      	ldrh	r3, [r3, #2]
 8008104:	b29b      	uxth	r3, r3
 8008106:	4a46      	ldr	r2, [pc, #280]	; (8008220 <tcp_input+0x28c>)
 8008108:	6814      	ldr	r4, [r2, #0]
 800810a:	4618      	mov	r0, r3
 800810c:	f7fc fa92 	bl	8004634 <lwip_htons>
 8008110:	4603      	mov	r3, r0
 8008112:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008114:	4b42      	ldr	r3, [pc, #264]	; (8008220 <tcp_input+0x28c>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	4a41      	ldr	r2, [pc, #260]	; (8008220 <tcp_input+0x28c>)
 800811c:	6814      	ldr	r4, [r2, #0]
 800811e:	4618      	mov	r0, r3
 8008120:	f7fc fa9d 	bl	800465e <lwip_htonl>
 8008124:	4603      	mov	r3, r0
 8008126:	6063      	str	r3, [r4, #4]
 8008128:	6863      	ldr	r3, [r4, #4]
 800812a:	4a45      	ldr	r2, [pc, #276]	; (8008240 <tcp_input+0x2ac>)
 800812c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800812e:	4b3c      	ldr	r3, [pc, #240]	; (8008220 <tcp_input+0x28c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	4a3a      	ldr	r2, [pc, #232]	; (8008220 <tcp_input+0x28c>)
 8008136:	6814      	ldr	r4, [r2, #0]
 8008138:	4618      	mov	r0, r3
 800813a:	f7fc fa90 	bl	800465e <lwip_htonl>
 800813e:	4603      	mov	r3, r0
 8008140:	60a3      	str	r3, [r4, #8]
 8008142:	68a3      	ldr	r3, [r4, #8]
 8008144:	4a3f      	ldr	r2, [pc, #252]	; (8008244 <tcp_input+0x2b0>)
 8008146:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008148:	4b35      	ldr	r3, [pc, #212]	; (8008220 <tcp_input+0x28c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	89db      	ldrh	r3, [r3, #14]
 800814e:	b29b      	uxth	r3, r3
 8008150:	4a33      	ldr	r2, [pc, #204]	; (8008220 <tcp_input+0x28c>)
 8008152:	6814      	ldr	r4, [r2, #0]
 8008154:	4618      	mov	r0, r3
 8008156:	f7fc fa6d 	bl	8004634 <lwip_htons>
 800815a:	4603      	mov	r3, r0
 800815c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800815e:	4b30      	ldr	r3, [pc, #192]	; (8008220 <tcp_input+0x28c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	899b      	ldrh	r3, [r3, #12]
 8008164:	b29b      	uxth	r3, r3
 8008166:	4618      	mov	r0, r3
 8008168:	f7fc fa64 	bl	8004634 <lwip_htons>
 800816c:	4603      	mov	r3, r0
 800816e:	b2db      	uxtb	r3, r3
 8008170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008174:	b2da      	uxtb	r2, r3
 8008176:	4b34      	ldr	r3, [pc, #208]	; (8008248 <tcp_input+0x2b4>)
 8008178:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	891a      	ldrh	r2, [r3, #8]
 800817e:	4b33      	ldr	r3, [pc, #204]	; (800824c <tcp_input+0x2b8>)
 8008180:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008182:	4b31      	ldr	r3, [pc, #196]	; (8008248 <tcp_input+0x2b4>)
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	f003 0303 	and.w	r3, r3, #3
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00c      	beq.n	80081a8 <tcp_input+0x214>
    tcplen++;
 800818e:	4b2f      	ldr	r3, [pc, #188]	; (800824c <tcp_input+0x2b8>)
 8008190:	881b      	ldrh	r3, [r3, #0]
 8008192:	3301      	adds	r3, #1
 8008194:	b29a      	uxth	r2, r3
 8008196:	4b2d      	ldr	r3, [pc, #180]	; (800824c <tcp_input+0x2b8>)
 8008198:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	891a      	ldrh	r2, [r3, #8]
 800819e:	4b2b      	ldr	r3, [pc, #172]	; (800824c <tcp_input+0x2b8>)
 80081a0:	881b      	ldrh	r3, [r3, #0]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	f200 82e6 	bhi.w	8008774 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80081a8:	2300      	movs	r3, #0
 80081aa:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80081ac:	4b28      	ldr	r3, [pc, #160]	; (8008250 <tcp_input+0x2bc>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	61fb      	str	r3, [r7, #28]
 80081b2:	e09d      	b.n	80082f0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	7d1b      	ldrb	r3, [r3, #20]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d105      	bne.n	80081c8 <tcp_input+0x234>
 80081bc:	4b15      	ldr	r3, [pc, #84]	; (8008214 <tcp_input+0x280>)
 80081be:	22fb      	movs	r2, #251	; 0xfb
 80081c0:	4924      	ldr	r1, [pc, #144]	; (8008254 <tcp_input+0x2c0>)
 80081c2:	4816      	ldr	r0, [pc, #88]	; (800821c <tcp_input+0x288>)
 80081c4:	f006 fd8c 	bl	800ece0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	7d1b      	ldrb	r3, [r3, #20]
 80081cc:	2b0a      	cmp	r3, #10
 80081ce:	d105      	bne.n	80081dc <tcp_input+0x248>
 80081d0:	4b10      	ldr	r3, [pc, #64]	; (8008214 <tcp_input+0x280>)
 80081d2:	22fc      	movs	r2, #252	; 0xfc
 80081d4:	4920      	ldr	r1, [pc, #128]	; (8008258 <tcp_input+0x2c4>)
 80081d6:	4811      	ldr	r0, [pc, #68]	; (800821c <tcp_input+0x288>)
 80081d8:	f006 fd82 	bl	800ece0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	7d1b      	ldrb	r3, [r3, #20]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d105      	bne.n	80081f0 <tcp_input+0x25c>
 80081e4:	4b0b      	ldr	r3, [pc, #44]	; (8008214 <tcp_input+0x280>)
 80081e6:	22fd      	movs	r2, #253	; 0xfd
 80081e8:	491c      	ldr	r1, [pc, #112]	; (800825c <tcp_input+0x2c8>)
 80081ea:	480c      	ldr	r0, [pc, #48]	; (800821c <tcp_input+0x288>)
 80081ec:	f006 fd78 	bl	800ece0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	7a1b      	ldrb	r3, [r3, #8]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d033      	beq.n	8008260 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	7a1a      	ldrb	r2, [r3, #8]
 80081fc:	4b09      	ldr	r3, [pc, #36]	; (8008224 <tcp_input+0x290>)
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008204:	3301      	adds	r3, #1
 8008206:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008208:	429a      	cmp	r2, r3
 800820a:	d029      	beq.n	8008260 <tcp_input+0x2cc>
      prev = pcb;
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	61bb      	str	r3, [r7, #24]
      continue;
 8008210:	e06b      	b.n	80082ea <tcp_input+0x356>
 8008212:	bf00      	nop
 8008214:	08011490 	.word	0x08011490
 8008218:	080114c4 	.word	0x080114c4
 800821c:	080114dc 	.word	0x080114dc
 8008220:	20008350 	.word	0x20008350
 8008224:	20004d3c 	.word	0x20004d3c
 8008228:	20008354 	.word	0x20008354
 800822c:	20008358 	.word	0x20008358
 8008230:	20008356 	.word	0x20008356
 8008234:	08011504 	.word	0x08011504
 8008238:	08011514 	.word	0x08011514
 800823c:	08011520 	.word	0x08011520
 8008240:	20008360 	.word	0x20008360
 8008244:	20008364 	.word	0x20008364
 8008248:	2000836c 	.word	0x2000836c
 800824c:	2000836a 	.word	0x2000836a
 8008250:	20008334 	.word	0x20008334
 8008254:	08011540 	.word	0x08011540
 8008258:	08011568 	.word	0x08011568
 800825c:	08011594 	.word	0x08011594
    }

    if (pcb->remote_port == tcphdr->src &&
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	8b1a      	ldrh	r2, [r3, #24]
 8008264:	4b72      	ldr	r3, [pc, #456]	; (8008430 <tcp_input+0x49c>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	b29b      	uxth	r3, r3
 800826c:	429a      	cmp	r2, r3
 800826e:	d13a      	bne.n	80082e6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	8ada      	ldrh	r2, [r3, #22]
 8008274:	4b6e      	ldr	r3, [pc, #440]	; (8008430 <tcp_input+0x49c>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	885b      	ldrh	r3, [r3, #2]
 800827a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800827c:	429a      	cmp	r2, r3
 800827e:	d132      	bne.n	80082e6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	685a      	ldr	r2, [r3, #4]
 8008284:	4b6b      	ldr	r3, [pc, #428]	; (8008434 <tcp_input+0x4a0>)
 8008286:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008288:	429a      	cmp	r2, r3
 800828a:	d12c      	bne.n	80082e6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	4b68      	ldr	r3, [pc, #416]	; (8008434 <tcp_input+0x4a0>)
 8008292:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008294:	429a      	cmp	r2, r3
 8008296:	d126      	bne.n	80082e6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d106      	bne.n	80082b0 <tcp_input+0x31c>
 80082a2:	4b65      	ldr	r3, [pc, #404]	; (8008438 <tcp_input+0x4a4>)
 80082a4:	f240 120d 	movw	r2, #269	; 0x10d
 80082a8:	4964      	ldr	r1, [pc, #400]	; (800843c <tcp_input+0x4a8>)
 80082aa:	4865      	ldr	r0, [pc, #404]	; (8008440 <tcp_input+0x4ac>)
 80082ac:	f006 fd18 	bl	800ece0 <iprintf>
      if (prev != NULL) {
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00a      	beq.n	80082cc <tcp_input+0x338>
        prev->next = pcb->next;
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	68da      	ldr	r2, [r3, #12]
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80082be:	4b61      	ldr	r3, [pc, #388]	; (8008444 <tcp_input+0x4b0>)
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80082c6:	4a5f      	ldr	r2, [pc, #380]	; (8008444 <tcp_input+0x4b0>)
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	69fa      	ldr	r2, [r7, #28]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d111      	bne.n	80082fa <tcp_input+0x366>
 80082d6:	4b58      	ldr	r3, [pc, #352]	; (8008438 <tcp_input+0x4a4>)
 80082d8:	f240 1215 	movw	r2, #277	; 0x115
 80082dc:	495a      	ldr	r1, [pc, #360]	; (8008448 <tcp_input+0x4b4>)
 80082de:	4858      	ldr	r0, [pc, #352]	; (8008440 <tcp_input+0x4ac>)
 80082e0:	f006 fcfe 	bl	800ece0 <iprintf>
      break;
 80082e4:	e009      	b.n	80082fa <tcp_input+0x366>
    }
    prev = pcb;
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	61fb      	str	r3, [r7, #28]
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f47f af5e 	bne.w	80081b4 <tcp_input+0x220>
 80082f8:	e000      	b.n	80082fc <tcp_input+0x368>
      break;
 80082fa:	bf00      	nop
  }

  if (pcb == NULL) {
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f040 80aa 	bne.w	8008458 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008304:	4b51      	ldr	r3, [pc, #324]	; (800844c <tcp_input+0x4b8>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	61fb      	str	r3, [r7, #28]
 800830a:	e03f      	b.n	800838c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	7d1b      	ldrb	r3, [r3, #20]
 8008310:	2b0a      	cmp	r3, #10
 8008312:	d006      	beq.n	8008322 <tcp_input+0x38e>
 8008314:	4b48      	ldr	r3, [pc, #288]	; (8008438 <tcp_input+0x4a4>)
 8008316:	f240 121f 	movw	r2, #287	; 0x11f
 800831a:	494d      	ldr	r1, [pc, #308]	; (8008450 <tcp_input+0x4bc>)
 800831c:	4848      	ldr	r0, [pc, #288]	; (8008440 <tcp_input+0x4ac>)
 800831e:	f006 fcdf 	bl	800ece0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	7a1b      	ldrb	r3, [r3, #8]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d009      	beq.n	800833e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	7a1a      	ldrb	r2, [r3, #8]
 800832e:	4b41      	ldr	r3, [pc, #260]	; (8008434 <tcp_input+0x4a0>)
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008336:	3301      	adds	r3, #1
 8008338:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800833a:	429a      	cmp	r2, r3
 800833c:	d122      	bne.n	8008384 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	8b1a      	ldrh	r2, [r3, #24]
 8008342:	4b3b      	ldr	r3, [pc, #236]	; (8008430 <tcp_input+0x49c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	881b      	ldrh	r3, [r3, #0]
 8008348:	b29b      	uxth	r3, r3
 800834a:	429a      	cmp	r2, r3
 800834c:	d11b      	bne.n	8008386 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	8ada      	ldrh	r2, [r3, #22]
 8008352:	4b37      	ldr	r3, [pc, #220]	; (8008430 <tcp_input+0x49c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	885b      	ldrh	r3, [r3, #2]
 8008358:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800835a:	429a      	cmp	r2, r3
 800835c:	d113      	bne.n	8008386 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	685a      	ldr	r2, [r3, #4]
 8008362:	4b34      	ldr	r3, [pc, #208]	; (8008434 <tcp_input+0x4a0>)
 8008364:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008366:	429a      	cmp	r2, r3
 8008368:	d10d      	bne.n	8008386 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	4b31      	ldr	r3, [pc, #196]	; (8008434 <tcp_input+0x4a0>)
 8008370:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008372:	429a      	cmp	r2, r3
 8008374:	d107      	bne.n	8008386 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008376:	69f8      	ldr	r0, [r7, #28]
 8008378:	f000 fb56 	bl	8008a28 <tcp_timewait_input>
        }
        pbuf_free(p);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7fd fd29 	bl	8005dd4 <pbuf_free>
        return;
 8008382:	e1fd      	b.n	8008780 <tcp_input+0x7ec>
        continue;
 8008384:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	61fb      	str	r3, [r7, #28]
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1bc      	bne.n	800830c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008392:	2300      	movs	r3, #0
 8008394:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008396:	4b2f      	ldr	r3, [pc, #188]	; (8008454 <tcp_input+0x4c0>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	617b      	str	r3, [r7, #20]
 800839c:	e02a      	b.n	80083f4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	7a1b      	ldrb	r3, [r3, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00c      	beq.n	80083c0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	7a1a      	ldrb	r2, [r3, #8]
 80083aa:	4b22      	ldr	r3, [pc, #136]	; (8008434 <tcp_input+0x4a0>)
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80083b2:	3301      	adds	r3, #1
 80083b4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d002      	beq.n	80083c0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	61bb      	str	r3, [r7, #24]
        continue;
 80083be:	e016      	b.n	80083ee <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	8ada      	ldrh	r2, [r3, #22]
 80083c4:	4b1a      	ldr	r3, [pc, #104]	; (8008430 <tcp_input+0x49c>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	885b      	ldrh	r3, [r3, #2]
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d10c      	bne.n	80083ea <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	4b17      	ldr	r3, [pc, #92]	; (8008434 <tcp_input+0x4a0>)
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d00f      	beq.n	80083fc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00d      	beq.n	80083fe <tcp_input+0x46a>
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d009      	beq.n	80083fe <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	617b      	str	r3, [r7, #20]
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1d1      	bne.n	800839e <tcp_input+0x40a>
 80083fa:	e000      	b.n	80083fe <tcp_input+0x46a>
            break;
 80083fc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d029      	beq.n	8008458 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00a      	beq.n	8008420 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	68da      	ldr	r2, [r3, #12]
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008412:	4b10      	ldr	r3, [pc, #64]	; (8008454 <tcp_input+0x4c0>)
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800841a:	4a0e      	ldr	r2, [pc, #56]	; (8008454 <tcp_input+0x4c0>)
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008420:	6978      	ldr	r0, [r7, #20]
 8008422:	f000 fa03 	bl	800882c <tcp_listen_input>
      }
      pbuf_free(p);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7fd fcd4 	bl	8005dd4 <pbuf_free>
      return;
 800842c:	e1a8      	b.n	8008780 <tcp_input+0x7ec>
 800842e:	bf00      	nop
 8008430:	20008350 	.word	0x20008350
 8008434:	20004d3c 	.word	0x20004d3c
 8008438:	08011490 	.word	0x08011490
 800843c:	080115bc 	.word	0x080115bc
 8008440:	080114dc 	.word	0x080114dc
 8008444:	20008334 	.word	0x20008334
 8008448:	080115e8 	.word	0x080115e8
 800844c:	20008338 	.word	0x20008338
 8008450:	08011614 	.word	0x08011614
 8008454:	20008330 	.word	0x20008330
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	2b00      	cmp	r3, #0
 800845c:	f000 8158 	beq.w	8008710 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008460:	4b95      	ldr	r3, [pc, #596]	; (80086b8 <tcp_input+0x724>)
 8008462:	2200      	movs	r2, #0
 8008464:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	891a      	ldrh	r2, [r3, #8]
 800846a:	4b93      	ldr	r3, [pc, #588]	; (80086b8 <tcp_input+0x724>)
 800846c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800846e:	4a92      	ldr	r2, [pc, #584]	; (80086b8 <tcp_input+0x724>)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008474:	4b91      	ldr	r3, [pc, #580]	; (80086bc <tcp_input+0x728>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a8f      	ldr	r2, [pc, #572]	; (80086b8 <tcp_input+0x724>)
 800847a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800847c:	4b90      	ldr	r3, [pc, #576]	; (80086c0 <tcp_input+0x72c>)
 800847e:	2200      	movs	r2, #0
 8008480:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008482:	4b90      	ldr	r3, [pc, #576]	; (80086c4 <tcp_input+0x730>)
 8008484:	2200      	movs	r2, #0
 8008486:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008488:	4b8f      	ldr	r3, [pc, #572]	; (80086c8 <tcp_input+0x734>)
 800848a:	2200      	movs	r2, #0
 800848c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800848e:	4b8f      	ldr	r3, [pc, #572]	; (80086cc <tcp_input+0x738>)
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	f003 0308 	and.w	r3, r3, #8
 8008496:	2b00      	cmp	r3, #0
 8008498:	d006      	beq.n	80084a8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	7b5b      	ldrb	r3, [r3, #13]
 800849e:	f043 0301 	orr.w	r3, r3, #1
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d017      	beq.n	80084e0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80084b0:	69f8      	ldr	r0, [r7, #28]
 80084b2:	f7ff f929 	bl	8007708 <tcp_process_refused_data>
 80084b6:	4603      	mov	r3, r0
 80084b8:	f113 0f0d 	cmn.w	r3, #13
 80084bc:	d007      	beq.n	80084ce <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00c      	beq.n	80084e0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80084c6:	4b82      	ldr	r3, [pc, #520]	; (80086d0 <tcp_input+0x73c>)
 80084c8:	881b      	ldrh	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d008      	beq.n	80084e0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f040 80e3 	bne.w	800869e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80084d8:	69f8      	ldr	r0, [r7, #28]
 80084da:	f003 f9ad 	bl	800b838 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80084de:	e0de      	b.n	800869e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80084e0:	4a7c      	ldr	r2, [pc, #496]	; (80086d4 <tcp_input+0x740>)
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80084e6:	69f8      	ldr	r0, [r7, #28]
 80084e8:	f000 fb18 	bl	8008b1c <tcp_process>
 80084ec:	4603      	mov	r3, r0
 80084ee:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80084f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80084f4:	f113 0f0d 	cmn.w	r3, #13
 80084f8:	f000 80d3 	beq.w	80086a2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80084fc:	4b71      	ldr	r3, [pc, #452]	; (80086c4 <tcp_input+0x730>)
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	f003 0308 	and.w	r3, r3, #8
 8008504:	2b00      	cmp	r3, #0
 8008506:	d015      	beq.n	8008534 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800850e:	2b00      	cmp	r3, #0
 8008510:	d008      	beq.n	8008524 <tcp_input+0x590>
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008518:	69fa      	ldr	r2, [r7, #28]
 800851a:	6912      	ldr	r2, [r2, #16]
 800851c:	f06f 010d 	mvn.w	r1, #13
 8008520:	4610      	mov	r0, r2
 8008522:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008524:	69f9      	ldr	r1, [r7, #28]
 8008526:	486c      	ldr	r0, [pc, #432]	; (80086d8 <tcp_input+0x744>)
 8008528:	f7ff fbbc 	bl	8007ca4 <tcp_pcb_remove>
        tcp_free(pcb);
 800852c:	69f8      	ldr	r0, [r7, #28]
 800852e:	f7fe f9a9 	bl	8006884 <tcp_free>
 8008532:	e0da      	b.n	80086ea <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008538:	4b63      	ldr	r3, [pc, #396]	; (80086c8 <tcp_input+0x734>)
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d01d      	beq.n	800857c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008540:	4b61      	ldr	r3, [pc, #388]	; (80086c8 <tcp_input+0x734>)
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00a      	beq.n	8008566 <tcp_input+0x5d2>
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008556:	69fa      	ldr	r2, [r7, #28]
 8008558:	6910      	ldr	r0, [r2, #16]
 800855a:	89fa      	ldrh	r2, [r7, #14]
 800855c:	69f9      	ldr	r1, [r7, #28]
 800855e:	4798      	blx	r3
 8008560:	4603      	mov	r3, r0
 8008562:	74fb      	strb	r3, [r7, #19]
 8008564:	e001      	b.n	800856a <tcp_input+0x5d6>
 8008566:	2300      	movs	r3, #0
 8008568:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800856a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800856e:	f113 0f0d 	cmn.w	r3, #13
 8008572:	f000 8098 	beq.w	80086a6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008576:	4b54      	ldr	r3, [pc, #336]	; (80086c8 <tcp_input+0x734>)
 8008578:	2200      	movs	r2, #0
 800857a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800857c:	69f8      	ldr	r0, [r7, #28]
 800857e:	f000 f915 	bl	80087ac <tcp_input_delayed_close>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	f040 8090 	bne.w	80086aa <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800858a:	4b4d      	ldr	r3, [pc, #308]	; (80086c0 <tcp_input+0x72c>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d041      	beq.n	8008616 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008596:	2b00      	cmp	r3, #0
 8008598:	d006      	beq.n	80085a8 <tcp_input+0x614>
 800859a:	4b50      	ldr	r3, [pc, #320]	; (80086dc <tcp_input+0x748>)
 800859c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80085a0:	494f      	ldr	r1, [pc, #316]	; (80086e0 <tcp_input+0x74c>)
 80085a2:	4850      	ldr	r0, [pc, #320]	; (80086e4 <tcp_input+0x750>)
 80085a4:	f006 fb9c 	bl	800ece0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	8b5b      	ldrh	r3, [r3, #26]
 80085ac:	f003 0310 	and.w	r3, r3, #16
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d008      	beq.n	80085c6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80085b4:	4b42      	ldr	r3, [pc, #264]	; (80086c0 <tcp_input+0x72c>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fd fc0b 	bl	8005dd4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80085be:	69f8      	ldr	r0, [r7, #28]
 80085c0:	f7fe fc48 	bl	8006e54 <tcp_abort>
            goto aborted;
 80085c4:	e091      	b.n	80086ea <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00c      	beq.n	80085ea <tcp_input+0x656>
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	6918      	ldr	r0, [r3, #16]
 80085da:	4b39      	ldr	r3, [pc, #228]	; (80086c0 <tcp_input+0x72c>)
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	2300      	movs	r3, #0
 80085e0:	69f9      	ldr	r1, [r7, #28]
 80085e2:	47a0      	blx	r4
 80085e4:	4603      	mov	r3, r0
 80085e6:	74fb      	strb	r3, [r7, #19]
 80085e8:	e008      	b.n	80085fc <tcp_input+0x668>
 80085ea:	4b35      	ldr	r3, [pc, #212]	; (80086c0 <tcp_input+0x72c>)
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	2300      	movs	r3, #0
 80085f0:	69f9      	ldr	r1, [r7, #28]
 80085f2:	2000      	movs	r0, #0
 80085f4:	f7ff f95e 	bl	80078b4 <tcp_recv_null>
 80085f8:	4603      	mov	r3, r0
 80085fa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80085fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008600:	f113 0f0d 	cmn.w	r3, #13
 8008604:	d053      	beq.n	80086ae <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008606:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800860e:	4b2c      	ldr	r3, [pc, #176]	; (80086c0 <tcp_input+0x72c>)
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008616:	4b2b      	ldr	r3, [pc, #172]	; (80086c4 <tcp_input+0x730>)
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	f003 0320 	and.w	r3, r3, #32
 800861e:	2b00      	cmp	r3, #0
 8008620:	d030      	beq.n	8008684 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008626:	2b00      	cmp	r3, #0
 8008628:	d009      	beq.n	800863e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800862e:	7b5a      	ldrb	r2, [r3, #13]
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008634:	f042 0220 	orr.w	r2, r2, #32
 8008638:	b2d2      	uxtb	r2, r2
 800863a:	735a      	strb	r2, [r3, #13]
 800863c:	e022      	b.n	8008684 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008642:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008646:	d005      	beq.n	8008654 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800864c:	3301      	adds	r3, #1
 800864e:	b29a      	uxth	r2, r3
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00b      	beq.n	8008676 <tcp_input+0x6e2>
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	6918      	ldr	r0, [r3, #16]
 8008668:	2300      	movs	r3, #0
 800866a:	2200      	movs	r2, #0
 800866c:	69f9      	ldr	r1, [r7, #28]
 800866e:	47a0      	blx	r4
 8008670:	4603      	mov	r3, r0
 8008672:	74fb      	strb	r3, [r7, #19]
 8008674:	e001      	b.n	800867a <tcp_input+0x6e6>
 8008676:	2300      	movs	r3, #0
 8008678:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800867a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800867e:	f113 0f0d 	cmn.w	r3, #13
 8008682:	d016      	beq.n	80086b2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008684:	4b13      	ldr	r3, [pc, #76]	; (80086d4 <tcp_input+0x740>)
 8008686:	2200      	movs	r2, #0
 8008688:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800868a:	69f8      	ldr	r0, [r7, #28]
 800868c:	f000 f88e 	bl	80087ac <tcp_input_delayed_close>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d128      	bne.n	80086e8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008696:	69f8      	ldr	r0, [r7, #28]
 8008698:	f002 fac8 	bl	800ac2c <tcp_output>
 800869c:	e025      	b.n	80086ea <tcp_input+0x756>
        goto aborted;
 800869e:	bf00      	nop
 80086a0:	e023      	b.n	80086ea <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80086a2:	bf00      	nop
 80086a4:	e021      	b.n	80086ea <tcp_input+0x756>
              goto aborted;
 80086a6:	bf00      	nop
 80086a8:	e01f      	b.n	80086ea <tcp_input+0x756>
          goto aborted;
 80086aa:	bf00      	nop
 80086ac:	e01d      	b.n	80086ea <tcp_input+0x756>
            goto aborted;
 80086ae:	bf00      	nop
 80086b0:	e01b      	b.n	80086ea <tcp_input+0x756>
              goto aborted;
 80086b2:	bf00      	nop
 80086b4:	e019      	b.n	80086ea <tcp_input+0x756>
 80086b6:	bf00      	nop
 80086b8:	20008340 	.word	0x20008340
 80086bc:	20008350 	.word	0x20008350
 80086c0:	20008370 	.word	0x20008370
 80086c4:	2000836d 	.word	0x2000836d
 80086c8:	20008368 	.word	0x20008368
 80086cc:	2000836c 	.word	0x2000836c
 80086d0:	2000836a 	.word	0x2000836a
 80086d4:	20008374 	.word	0x20008374
 80086d8:	20008334 	.word	0x20008334
 80086dc:	08011490 	.word	0x08011490
 80086e0:	08011644 	.word	0x08011644
 80086e4:	080114dc 	.word	0x080114dc
          goto aborted;
 80086e8:	bf00      	nop
    tcp_input_pcb = NULL;
 80086ea:	4b27      	ldr	r3, [pc, #156]	; (8008788 <tcp_input+0x7f4>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80086f0:	4b26      	ldr	r3, [pc, #152]	; (800878c <tcp_input+0x7f8>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80086f6:	4b26      	ldr	r3, [pc, #152]	; (8008790 <tcp_input+0x7fc>)
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d03f      	beq.n	800877e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80086fe:	4b24      	ldr	r3, [pc, #144]	; (8008790 <tcp_input+0x7fc>)
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	4618      	mov	r0, r3
 8008704:	f7fd fb66 	bl	8005dd4 <pbuf_free>
      inseg.p = NULL;
 8008708:	4b21      	ldr	r3, [pc, #132]	; (8008790 <tcp_input+0x7fc>)
 800870a:	2200      	movs	r2, #0
 800870c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800870e:	e036      	b.n	800877e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008710:	4b20      	ldr	r3, [pc, #128]	; (8008794 <tcp_input+0x800>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	899b      	ldrh	r3, [r3, #12]
 8008716:	b29b      	uxth	r3, r3
 8008718:	4618      	mov	r0, r3
 800871a:	f7fb ff8b 	bl	8004634 <lwip_htons>
 800871e:	4603      	mov	r3, r0
 8008720:	b2db      	uxtb	r3, r3
 8008722:	f003 0304 	and.w	r3, r3, #4
 8008726:	2b00      	cmp	r3, #0
 8008728:	d118      	bne.n	800875c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800872a:	4b1b      	ldr	r3, [pc, #108]	; (8008798 <tcp_input+0x804>)
 800872c:	6819      	ldr	r1, [r3, #0]
 800872e:	4b1b      	ldr	r3, [pc, #108]	; (800879c <tcp_input+0x808>)
 8008730:	881b      	ldrh	r3, [r3, #0]
 8008732:	461a      	mov	r2, r3
 8008734:	4b1a      	ldr	r3, [pc, #104]	; (80087a0 <tcp_input+0x80c>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800873a:	4b16      	ldr	r3, [pc, #88]	; (8008794 <tcp_input+0x800>)
 800873c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800873e:	885b      	ldrh	r3, [r3, #2]
 8008740:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008742:	4a14      	ldr	r2, [pc, #80]	; (8008794 <tcp_input+0x800>)
 8008744:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008746:	8812      	ldrh	r2, [r2, #0]
 8008748:	b292      	uxth	r2, r2
 800874a:	9202      	str	r2, [sp, #8]
 800874c:	9301      	str	r3, [sp, #4]
 800874e:	4b15      	ldr	r3, [pc, #84]	; (80087a4 <tcp_input+0x810>)
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	4b15      	ldr	r3, [pc, #84]	; (80087a8 <tcp_input+0x814>)
 8008754:	4602      	mov	r2, r0
 8008756:	2000      	movs	r0, #0
 8008758:	f003 f81c 	bl	800b794 <tcp_rst>
    pbuf_free(p);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7fd fb39 	bl	8005dd4 <pbuf_free>
  return;
 8008762:	e00c      	b.n	800877e <tcp_input+0x7ea>
    goto dropped;
 8008764:	bf00      	nop
 8008766:	e006      	b.n	8008776 <tcp_input+0x7e2>
    goto dropped;
 8008768:	bf00      	nop
 800876a:	e004      	b.n	8008776 <tcp_input+0x7e2>
    goto dropped;
 800876c:	bf00      	nop
 800876e:	e002      	b.n	8008776 <tcp_input+0x7e2>
      goto dropped;
 8008770:	bf00      	nop
 8008772:	e000      	b.n	8008776 <tcp_input+0x7e2>
      goto dropped;
 8008774:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f7fd fb2c 	bl	8005dd4 <pbuf_free>
 800877c:	e000      	b.n	8008780 <tcp_input+0x7ec>
  return;
 800877e:	bf00      	nop
}
 8008780:	3724      	adds	r7, #36	; 0x24
 8008782:	46bd      	mov	sp, r7
 8008784:	bd90      	pop	{r4, r7, pc}
 8008786:	bf00      	nop
 8008788:	20008374 	.word	0x20008374
 800878c:	20008370 	.word	0x20008370
 8008790:	20008340 	.word	0x20008340
 8008794:	20008350 	.word	0x20008350
 8008798:	20008364 	.word	0x20008364
 800879c:	2000836a 	.word	0x2000836a
 80087a0:	20008360 	.word	0x20008360
 80087a4:	20004d4c 	.word	0x20004d4c
 80087a8:	20004d50 	.word	0x20004d50

080087ac <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d106      	bne.n	80087c8 <tcp_input_delayed_close+0x1c>
 80087ba:	4b17      	ldr	r3, [pc, #92]	; (8008818 <tcp_input_delayed_close+0x6c>)
 80087bc:	f240 225a 	movw	r2, #602	; 0x25a
 80087c0:	4916      	ldr	r1, [pc, #88]	; (800881c <tcp_input_delayed_close+0x70>)
 80087c2:	4817      	ldr	r0, [pc, #92]	; (8008820 <tcp_input_delayed_close+0x74>)
 80087c4:	f006 fa8c 	bl	800ece0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80087c8:	4b16      	ldr	r3, [pc, #88]	; (8008824 <tcp_input_delayed_close+0x78>)
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	f003 0310 	and.w	r3, r3, #16
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d01c      	beq.n	800880e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	8b5b      	ldrh	r3, [r3, #26]
 80087d8:	f003 0310 	and.w	r3, r3, #16
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d10d      	bne.n	80087fc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d008      	beq.n	80087fc <tcp_input_delayed_close+0x50>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	6912      	ldr	r2, [r2, #16]
 80087f4:	f06f 010e 	mvn.w	r1, #14
 80087f8:	4610      	mov	r0, r2
 80087fa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80087fc:	6879      	ldr	r1, [r7, #4]
 80087fe:	480a      	ldr	r0, [pc, #40]	; (8008828 <tcp_input_delayed_close+0x7c>)
 8008800:	f7ff fa50 	bl	8007ca4 <tcp_pcb_remove>
    tcp_free(pcb);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f7fe f83d 	bl	8006884 <tcp_free>
    return 1;
 800880a:	2301      	movs	r3, #1
 800880c:	e000      	b.n	8008810 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	08011490 	.word	0x08011490
 800881c:	08011660 	.word	0x08011660
 8008820:	080114dc 	.word	0x080114dc
 8008824:	2000836d 	.word	0x2000836d
 8008828:	20008334 	.word	0x20008334

0800882c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800882c:	b590      	push	{r4, r7, lr}
 800882e:	b08b      	sub	sp, #44	; 0x2c
 8008830:	af04      	add	r7, sp, #16
 8008832:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008834:	4b6f      	ldr	r3, [pc, #444]	; (80089f4 <tcp_listen_input+0x1c8>)
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	f003 0304 	and.w	r3, r3, #4
 800883c:	2b00      	cmp	r3, #0
 800883e:	f040 80d2 	bne.w	80089e6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d106      	bne.n	8008856 <tcp_listen_input+0x2a>
 8008848:	4b6b      	ldr	r3, [pc, #428]	; (80089f8 <tcp_listen_input+0x1cc>)
 800884a:	f240 2281 	movw	r2, #641	; 0x281
 800884e:	496b      	ldr	r1, [pc, #428]	; (80089fc <tcp_listen_input+0x1d0>)
 8008850:	486b      	ldr	r0, [pc, #428]	; (8008a00 <tcp_listen_input+0x1d4>)
 8008852:	f006 fa45 	bl	800ece0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008856:	4b67      	ldr	r3, [pc, #412]	; (80089f4 <tcp_listen_input+0x1c8>)
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	f003 0310 	and.w	r3, r3, #16
 800885e:	2b00      	cmp	r3, #0
 8008860:	d019      	beq.n	8008896 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008862:	4b68      	ldr	r3, [pc, #416]	; (8008a04 <tcp_listen_input+0x1d8>)
 8008864:	6819      	ldr	r1, [r3, #0]
 8008866:	4b68      	ldr	r3, [pc, #416]	; (8008a08 <tcp_listen_input+0x1dc>)
 8008868:	881b      	ldrh	r3, [r3, #0]
 800886a:	461a      	mov	r2, r3
 800886c:	4b67      	ldr	r3, [pc, #412]	; (8008a0c <tcp_listen_input+0x1e0>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008872:	4b67      	ldr	r3, [pc, #412]	; (8008a10 <tcp_listen_input+0x1e4>)
 8008874:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008876:	885b      	ldrh	r3, [r3, #2]
 8008878:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800887a:	4a65      	ldr	r2, [pc, #404]	; (8008a10 <tcp_listen_input+0x1e4>)
 800887c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800887e:	8812      	ldrh	r2, [r2, #0]
 8008880:	b292      	uxth	r2, r2
 8008882:	9202      	str	r2, [sp, #8]
 8008884:	9301      	str	r3, [sp, #4]
 8008886:	4b63      	ldr	r3, [pc, #396]	; (8008a14 <tcp_listen_input+0x1e8>)
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	4b63      	ldr	r3, [pc, #396]	; (8008a18 <tcp_listen_input+0x1ec>)
 800888c:	4602      	mov	r2, r0
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f002 ff80 	bl	800b794 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008894:	e0a9      	b.n	80089ea <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008896:	4b57      	ldr	r3, [pc, #348]	; (80089f4 <tcp_listen_input+0x1c8>)
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	f003 0302 	and.w	r3, r3, #2
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f000 80a3 	beq.w	80089ea <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	7d5b      	ldrb	r3, [r3, #21]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7ff f927 	bl	8007afc <tcp_alloc>
 80088ae:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d111      	bne.n	80088da <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00a      	beq.n	80088d4 <tcp_listen_input+0xa8>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	6910      	ldr	r0, [r2, #16]
 80088c6:	f04f 32ff 	mov.w	r2, #4294967295
 80088ca:	2100      	movs	r1, #0
 80088cc:	4798      	blx	r3
 80088ce:	4603      	mov	r3, r0
 80088d0:	73bb      	strb	r3, [r7, #14]
      return;
 80088d2:	e08b      	b.n	80089ec <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80088d4:	23f0      	movs	r3, #240	; 0xf0
 80088d6:	73bb      	strb	r3, [r7, #14]
      return;
 80088d8:	e088      	b.n	80089ec <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80088da:	4b50      	ldr	r3, [pc, #320]	; (8008a1c <tcp_listen_input+0x1f0>)
 80088dc:	695a      	ldr	r2, [r3, #20]
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80088e2:	4b4e      	ldr	r3, [pc, #312]	; (8008a1c <tcp_listen_input+0x1f0>)
 80088e4:	691a      	ldr	r2, [r3, #16]
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	8ada      	ldrh	r2, [r3, #22]
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80088f2:	4b47      	ldr	r3, [pc, #284]	; (8008a10 <tcp_listen_input+0x1e4>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	881b      	ldrh	r3, [r3, #0]
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	2203      	movs	r2, #3
 8008902:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008904:	4b41      	ldr	r3, [pc, #260]	; (8008a0c <tcp_listen_input+0x1e0>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	1c5a      	adds	r2, r3, #1
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008916:	6978      	ldr	r0, [r7, #20]
 8008918:	f7ff fa58 	bl	8007dcc <tcp_next_iss>
 800891c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	693a      	ldr	r2, [r7, #16]
 8008928:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008936:	4b35      	ldr	r3, [pc, #212]	; (8008a0c <tcp_listen_input+0x1e0>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	1e5a      	subs	r2, r3, #1
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	691a      	ldr	r2, [r3, #16]
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	7a5b      	ldrb	r3, [r3, #9]
 8008952:	f003 030c 	and.w	r3, r3, #12
 8008956:	b2da      	uxtb	r2, r3
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	7a1a      	ldrb	r2, [r3, #8]
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008964:	4b2e      	ldr	r3, [pc, #184]	; (8008a20 <tcp_listen_input+0x1f4>)
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	60da      	str	r2, [r3, #12]
 800896c:	4a2c      	ldr	r2, [pc, #176]	; (8008a20 <tcp_listen_input+0x1f4>)
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	6013      	str	r3, [r2, #0]
 8008972:	f003 f8d1 	bl	800bb18 <tcp_timer_needed>
 8008976:	4b2b      	ldr	r3, [pc, #172]	; (8008a24 <tcp_listen_input+0x1f8>)
 8008978:	2201      	movs	r2, #1
 800897a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800897c:	6978      	ldr	r0, [r7, #20]
 800897e:	f001 fd8f 	bl	800a4a0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008982:	4b23      	ldr	r3, [pc, #140]	; (8008a10 <tcp_listen_input+0x1e4>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	89db      	ldrh	r3, [r3, #14]
 8008988:	b29a      	uxth	r2, r3
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	3304      	adds	r3, #4
 80089a4:	4618      	mov	r0, r3
 80089a6:	f004 ff3f 	bl	800d828 <ip4_route>
 80089aa:	4601      	mov	r1, r0
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	3304      	adds	r3, #4
 80089b0:	461a      	mov	r2, r3
 80089b2:	4620      	mov	r0, r4
 80089b4:	f7ff fa30 	bl	8007e18 <tcp_eff_send_mss_netif>
 80089b8:	4603      	mov	r3, r0
 80089ba:	461a      	mov	r2, r3
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80089c0:	2112      	movs	r1, #18
 80089c2:	6978      	ldr	r0, [r7, #20]
 80089c4:	f002 f844 	bl	800aa50 <tcp_enqueue_flags>
 80089c8:	4603      	mov	r3, r0
 80089ca:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80089cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d004      	beq.n	80089de <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80089d4:	2100      	movs	r1, #0
 80089d6:	6978      	ldr	r0, [r7, #20]
 80089d8:	f7fe f97e 	bl	8006cd8 <tcp_abandon>
      return;
 80089dc:	e006      	b.n	80089ec <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80089de:	6978      	ldr	r0, [r7, #20]
 80089e0:	f002 f924 	bl	800ac2c <tcp_output>
  return;
 80089e4:	e001      	b.n	80089ea <tcp_listen_input+0x1be>
    return;
 80089e6:	bf00      	nop
 80089e8:	e000      	b.n	80089ec <tcp_listen_input+0x1c0>
  return;
 80089ea:	bf00      	nop
}
 80089ec:	371c      	adds	r7, #28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd90      	pop	{r4, r7, pc}
 80089f2:	bf00      	nop
 80089f4:	2000836c 	.word	0x2000836c
 80089f8:	08011490 	.word	0x08011490
 80089fc:	08011688 	.word	0x08011688
 8008a00:	080114dc 	.word	0x080114dc
 8008a04:	20008364 	.word	0x20008364
 8008a08:	2000836a 	.word	0x2000836a
 8008a0c:	20008360 	.word	0x20008360
 8008a10:	20008350 	.word	0x20008350
 8008a14:	20004d4c 	.word	0x20004d4c
 8008a18:	20004d50 	.word	0x20004d50
 8008a1c:	20004d3c 	.word	0x20004d3c
 8008a20:	20008334 	.word	0x20008334
 8008a24:	2000833c 	.word	0x2000833c

08008a28 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af04      	add	r7, sp, #16
 8008a2e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008a30:	4b2f      	ldr	r3, [pc, #188]	; (8008af0 <tcp_timewait_input+0xc8>)
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	f003 0304 	and.w	r3, r3, #4
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d153      	bne.n	8008ae4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d106      	bne.n	8008a50 <tcp_timewait_input+0x28>
 8008a42:	4b2c      	ldr	r3, [pc, #176]	; (8008af4 <tcp_timewait_input+0xcc>)
 8008a44:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008a48:	492b      	ldr	r1, [pc, #172]	; (8008af8 <tcp_timewait_input+0xd0>)
 8008a4a:	482c      	ldr	r0, [pc, #176]	; (8008afc <tcp_timewait_input+0xd4>)
 8008a4c:	f006 f948 	bl	800ece0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008a50:	4b27      	ldr	r3, [pc, #156]	; (8008af0 <tcp_timewait_input+0xc8>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	f003 0302 	and.w	r3, r3, #2
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d02a      	beq.n	8008ab2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008a5c:	4b28      	ldr	r3, [pc, #160]	; (8008b00 <tcp_timewait_input+0xd8>)
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	db2d      	blt.n	8008ac6 <tcp_timewait_input+0x9e>
 8008a6a:	4b25      	ldr	r3, [pc, #148]	; (8008b00 <tcp_timewait_input+0xd8>)
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a72:	6879      	ldr	r1, [r7, #4]
 8008a74:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008a76:	440b      	add	r3, r1
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	dc23      	bgt.n	8008ac6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a7e:	4b21      	ldr	r3, [pc, #132]	; (8008b04 <tcp_timewait_input+0xdc>)
 8008a80:	6819      	ldr	r1, [r3, #0]
 8008a82:	4b21      	ldr	r3, [pc, #132]	; (8008b08 <tcp_timewait_input+0xe0>)
 8008a84:	881b      	ldrh	r3, [r3, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	4b1d      	ldr	r3, [pc, #116]	; (8008b00 <tcp_timewait_input+0xd8>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a8e:	4b1f      	ldr	r3, [pc, #124]	; (8008b0c <tcp_timewait_input+0xe4>)
 8008a90:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a92:	885b      	ldrh	r3, [r3, #2]
 8008a94:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a96:	4a1d      	ldr	r2, [pc, #116]	; (8008b0c <tcp_timewait_input+0xe4>)
 8008a98:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a9a:	8812      	ldrh	r2, [r2, #0]
 8008a9c:	b292      	uxth	r2, r2
 8008a9e:	9202      	str	r2, [sp, #8]
 8008aa0:	9301      	str	r3, [sp, #4]
 8008aa2:	4b1b      	ldr	r3, [pc, #108]	; (8008b10 <tcp_timewait_input+0xe8>)
 8008aa4:	9300      	str	r3, [sp, #0]
 8008aa6:	4b1b      	ldr	r3, [pc, #108]	; (8008b14 <tcp_timewait_input+0xec>)
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f002 fe72 	bl	800b794 <tcp_rst>
      return;
 8008ab0:	e01b      	b.n	8008aea <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008ab2:	4b0f      	ldr	r3, [pc, #60]	; (8008af0 <tcp_timewait_input+0xc8>)
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d003      	beq.n	8008ac6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008abe:	4b16      	ldr	r3, [pc, #88]	; (8008b18 <tcp_timewait_input+0xf0>)
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008ac6:	4b10      	ldr	r3, [pc, #64]	; (8008b08 <tcp_timewait_input+0xe0>)
 8008ac8:	881b      	ldrh	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00c      	beq.n	8008ae8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	8b5b      	ldrh	r3, [r3, #26]
 8008ad2:	f043 0302 	orr.w	r3, r3, #2
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f002 f8a5 	bl	800ac2c <tcp_output>
  }
  return;
 8008ae2:	e001      	b.n	8008ae8 <tcp_timewait_input+0xc0>
    return;
 8008ae4:	bf00      	nop
 8008ae6:	e000      	b.n	8008aea <tcp_timewait_input+0xc2>
  return;
 8008ae8:	bf00      	nop
}
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	2000836c 	.word	0x2000836c
 8008af4:	08011490 	.word	0x08011490
 8008af8:	080116a8 	.word	0x080116a8
 8008afc:	080114dc 	.word	0x080114dc
 8008b00:	20008360 	.word	0x20008360
 8008b04:	20008364 	.word	0x20008364
 8008b08:	2000836a 	.word	0x2000836a
 8008b0c:	20008350 	.word	0x20008350
 8008b10:	20004d4c 	.word	0x20004d4c
 8008b14:	20004d50 	.word	0x20004d50
 8008b18:	20008328 	.word	0x20008328

08008b1c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008b1c:	b590      	push	{r4, r7, lr}
 8008b1e:	b08d      	sub	sp, #52	; 0x34
 8008b20:	af04      	add	r7, sp, #16
 8008b22:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d106      	bne.n	8008b40 <tcp_process+0x24>
 8008b32:	4b9d      	ldr	r3, [pc, #628]	; (8008da8 <tcp_process+0x28c>)
 8008b34:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008b38:	499c      	ldr	r1, [pc, #624]	; (8008dac <tcp_process+0x290>)
 8008b3a:	489d      	ldr	r0, [pc, #628]	; (8008db0 <tcp_process+0x294>)
 8008b3c:	f006 f8d0 	bl	800ece0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008b40:	4b9c      	ldr	r3, [pc, #624]	; (8008db4 <tcp_process+0x298>)
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	f003 0304 	and.w	r3, r3, #4
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d04e      	beq.n	8008bea <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	7d1b      	ldrb	r3, [r3, #20]
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d108      	bne.n	8008b66 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b58:	4b97      	ldr	r3, [pc, #604]	; (8008db8 <tcp_process+0x29c>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d123      	bne.n	8008ba8 <tcp_process+0x8c>
        acceptable = 1;
 8008b60:	2301      	movs	r3, #1
 8008b62:	76fb      	strb	r3, [r7, #27]
 8008b64:	e020      	b.n	8008ba8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b6a:	4b94      	ldr	r3, [pc, #592]	; (8008dbc <tcp_process+0x2a0>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d102      	bne.n	8008b78 <tcp_process+0x5c>
        acceptable = 1;
 8008b72:	2301      	movs	r3, #1
 8008b74:	76fb      	strb	r3, [r7, #27]
 8008b76:	e017      	b.n	8008ba8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008b78:	4b90      	ldr	r3, [pc, #576]	; (8008dbc <tcp_process+0x2a0>)
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	db10      	blt.n	8008ba8 <tcp_process+0x8c>
 8008b86:	4b8d      	ldr	r3, [pc, #564]	; (8008dbc <tcp_process+0x2a0>)
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8e:	6879      	ldr	r1, [r7, #4]
 8008b90:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008b92:	440b      	add	r3, r1
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	dc06      	bgt.n	8008ba8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	8b5b      	ldrh	r3, [r3, #26]
 8008b9e:	f043 0302 	orr.w	r3, r3, #2
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008ba8:	7efb      	ldrb	r3, [r7, #27]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d01b      	beq.n	8008be6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	7d1b      	ldrb	r3, [r3, #20]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d106      	bne.n	8008bc4 <tcp_process+0xa8>
 8008bb6:	4b7c      	ldr	r3, [pc, #496]	; (8008da8 <tcp_process+0x28c>)
 8008bb8:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008bbc:	4980      	ldr	r1, [pc, #512]	; (8008dc0 <tcp_process+0x2a4>)
 8008bbe:	487c      	ldr	r0, [pc, #496]	; (8008db0 <tcp_process+0x294>)
 8008bc0:	f006 f88e 	bl	800ece0 <iprintf>
      recv_flags |= TF_RESET;
 8008bc4:	4b7f      	ldr	r3, [pc, #508]	; (8008dc4 <tcp_process+0x2a8>)
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	f043 0308 	orr.w	r3, r3, #8
 8008bcc:	b2da      	uxtb	r2, r3
 8008bce:	4b7d      	ldr	r3, [pc, #500]	; (8008dc4 <tcp_process+0x2a8>)
 8008bd0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	8b5b      	ldrh	r3, [r3, #26]
 8008bd6:	f023 0301 	bic.w	r3, r3, #1
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008be0:	f06f 030d 	mvn.w	r3, #13
 8008be4:	e37a      	b.n	80092dc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	e378      	b.n	80092dc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008bea:	4b72      	ldr	r3, [pc, #456]	; (8008db4 <tcp_process+0x298>)
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	f003 0302 	and.w	r3, r3, #2
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d010      	beq.n	8008c18 <tcp_process+0xfc>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	7d1b      	ldrb	r3, [r3, #20]
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d00c      	beq.n	8008c18 <tcp_process+0xfc>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	7d1b      	ldrb	r3, [r3, #20]
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d008      	beq.n	8008c18 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	8b5b      	ldrh	r3, [r3, #26]
 8008c0a:	f043 0302 	orr.w	r3, r3, #2
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	e361      	b.n	80092dc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	8b5b      	ldrh	r3, [r3, #26]
 8008c1c:	f003 0310 	and.w	r3, r3, #16
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d103      	bne.n	8008c2c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008c24:	4b68      	ldr	r3, [pc, #416]	; (8008dc8 <tcp_process+0x2ac>)
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f001 fc2f 	bl	800a4a0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	7d1b      	ldrb	r3, [r3, #20]
 8008c46:	3b02      	subs	r3, #2
 8008c48:	2b07      	cmp	r3, #7
 8008c4a:	f200 8337 	bhi.w	80092bc <tcp_process+0x7a0>
 8008c4e:	a201      	add	r2, pc, #4	; (adr r2, 8008c54 <tcp_process+0x138>)
 8008c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c54:	08008c75 	.word	0x08008c75
 8008c58:	08008ea5 	.word	0x08008ea5
 8008c5c:	0800901d 	.word	0x0800901d
 8008c60:	08009047 	.word	0x08009047
 8008c64:	0800916b 	.word	0x0800916b
 8008c68:	0800901d 	.word	0x0800901d
 8008c6c:	080091f7 	.word	0x080091f7
 8008c70:	08009287 	.word	0x08009287
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008c74:	4b4f      	ldr	r3, [pc, #316]	; (8008db4 <tcp_process+0x298>)
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	f003 0310 	and.w	r3, r3, #16
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 80e4 	beq.w	8008e4a <tcp_process+0x32e>
 8008c82:	4b4c      	ldr	r3, [pc, #304]	; (8008db4 <tcp_process+0x298>)
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	f003 0302 	and.w	r3, r3, #2
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f000 80dd 	beq.w	8008e4a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c94:	1c5a      	adds	r2, r3, #1
 8008c96:	4b48      	ldr	r3, [pc, #288]	; (8008db8 <tcp_process+0x29c>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	f040 80d5 	bne.w	8008e4a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008ca0:	4b46      	ldr	r3, [pc, #280]	; (8008dbc <tcp_process+0x2a0>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	1c5a      	adds	r2, r3, #1
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008cb2:	4b41      	ldr	r3, [pc, #260]	; (8008db8 <tcp_process+0x29c>)
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008cba:	4b44      	ldr	r3, [pc, #272]	; (8008dcc <tcp_process+0x2b0>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	89db      	ldrh	r3, [r3, #14]
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008cd4:	4b39      	ldr	r3, [pc, #228]	; (8008dbc <tcp_process+0x2a0>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	1e5a      	subs	r2, r3, #1
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2204      	movs	r2, #4
 8008ce2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	3304      	adds	r3, #4
 8008cec:	4618      	mov	r0, r3
 8008cee:	f004 fd9b 	bl	800d828 <ip4_route>
 8008cf2:	4601      	mov	r1, r0
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f7ff f88c 	bl	8007e18 <tcp_eff_send_mss_netif>
 8008d00:	4603      	mov	r3, r0
 8008d02:	461a      	mov	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d0c:	009a      	lsls	r2, r3, #2
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d12:	005b      	lsls	r3, r3, #1
 8008d14:	f241 111c 	movw	r1, #4380	; 0x111c
 8008d18:	428b      	cmp	r3, r1
 8008d1a:	bf38      	it	cc
 8008d1c:	460b      	movcc	r3, r1
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d204      	bcs.n	8008d2c <tcp_process+0x210>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	e00d      	b.n	8008d48 <tcp_process+0x22c>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	f241 121c 	movw	r2, #4380	; 0x111c
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d904      	bls.n	8008d44 <tcp_process+0x228>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d3e:	005b      	lsls	r3, r3, #1
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	e001      	b.n	8008d48 <tcp_process+0x22c>
 8008d44:	f241 131c 	movw	r3, #4380	; 0x111c
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d106      	bne.n	8008d66 <tcp_process+0x24a>
 8008d58:	4b13      	ldr	r3, [pc, #76]	; (8008da8 <tcp_process+0x28c>)
 8008d5a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008d5e:	491c      	ldr	r1, [pc, #112]	; (8008dd0 <tcp_process+0x2b4>)
 8008d60:	4813      	ldr	r0, [pc, #76]	; (8008db0 <tcp_process+0x294>)
 8008d62:	f005 ffbd 	bl	800ece0 <iprintf>
        --pcb->snd_queuelen;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	b29a      	uxth	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d7a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d12a      	bne.n	8008dd8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d86:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d106      	bne.n	8008d9c <tcp_process+0x280>
 8008d8e:	4b06      	ldr	r3, [pc, #24]	; (8008da8 <tcp_process+0x28c>)
 8008d90:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008d94:	490f      	ldr	r1, [pc, #60]	; (8008dd4 <tcp_process+0x2b8>)
 8008d96:	4806      	ldr	r0, [pc, #24]	; (8008db0 <tcp_process+0x294>)
 8008d98:	f005 ffa2 	bl	800ece0 <iprintf>
          pcb->unsent = rseg->next;
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	66da      	str	r2, [r3, #108]	; 0x6c
 8008da4:	e01c      	b.n	8008de0 <tcp_process+0x2c4>
 8008da6:	bf00      	nop
 8008da8:	08011490 	.word	0x08011490
 8008dac:	080116c8 	.word	0x080116c8
 8008db0:	080114dc 	.word	0x080114dc
 8008db4:	2000836c 	.word	0x2000836c
 8008db8:	20008364 	.word	0x20008364
 8008dbc:	20008360 	.word	0x20008360
 8008dc0:	080116e4 	.word	0x080116e4
 8008dc4:	2000836d 	.word	0x2000836d
 8008dc8:	20008328 	.word	0x20008328
 8008dcc:	20008350 	.word	0x20008350
 8008dd0:	08011704 	.word	0x08011704
 8008dd4:	0801171c 	.word	0x0801171c
        } else {
          pcb->unacked = rseg->next;
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008de0:	69f8      	ldr	r0, [r7, #28]
 8008de2:	f7fe fd22 	bl	800782a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d104      	bne.n	8008df8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008df4:	861a      	strh	r2, [r3, #48]	; 0x30
 8008df6:	e006      	b.n	8008e06 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00a      	beq.n	8008e26 <tcp_process+0x30a>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	6910      	ldr	r0, [r2, #16]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	6879      	ldr	r1, [r7, #4]
 8008e1e:	4798      	blx	r3
 8008e20:	4603      	mov	r3, r0
 8008e22:	76bb      	strb	r3, [r7, #26]
 8008e24:	e001      	b.n	8008e2a <tcp_process+0x30e>
 8008e26:	2300      	movs	r3, #0
 8008e28:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008e2a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008e2e:	f113 0f0d 	cmn.w	r3, #13
 8008e32:	d102      	bne.n	8008e3a <tcp_process+0x31e>
          return ERR_ABRT;
 8008e34:	f06f 030c 	mvn.w	r3, #12
 8008e38:	e250      	b.n	80092dc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	8b5b      	ldrh	r3, [r3, #26]
 8008e3e:	f043 0302 	orr.w	r3, r3, #2
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008e48:	e23a      	b.n	80092c0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008e4a:	4b98      	ldr	r3, [pc, #608]	; (80090ac <tcp_process+0x590>)
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	f003 0310 	and.w	r3, r3, #16
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f000 8234 	beq.w	80092c0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e58:	4b95      	ldr	r3, [pc, #596]	; (80090b0 <tcp_process+0x594>)
 8008e5a:	6819      	ldr	r1, [r3, #0]
 8008e5c:	4b95      	ldr	r3, [pc, #596]	; (80090b4 <tcp_process+0x598>)
 8008e5e:	881b      	ldrh	r3, [r3, #0]
 8008e60:	461a      	mov	r2, r3
 8008e62:	4b95      	ldr	r3, [pc, #596]	; (80090b8 <tcp_process+0x59c>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e68:	4b94      	ldr	r3, [pc, #592]	; (80090bc <tcp_process+0x5a0>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e6c:	885b      	ldrh	r3, [r3, #2]
 8008e6e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e70:	4a92      	ldr	r2, [pc, #584]	; (80090bc <tcp_process+0x5a0>)
 8008e72:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e74:	8812      	ldrh	r2, [r2, #0]
 8008e76:	b292      	uxth	r2, r2
 8008e78:	9202      	str	r2, [sp, #8]
 8008e7a:	9301      	str	r3, [sp, #4]
 8008e7c:	4b90      	ldr	r3, [pc, #576]	; (80090c0 <tcp_process+0x5a4>)
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	4b90      	ldr	r3, [pc, #576]	; (80090c4 <tcp_process+0x5a8>)
 8008e82:	4602      	mov	r2, r0
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f002 fc85 	bl	800b794 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e90:	2b05      	cmp	r3, #5
 8008e92:	f200 8215 	bhi.w	80092c0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f002 fa4f 	bl	800b340 <tcp_rexmit_rto>
      break;
 8008ea2:	e20d      	b.n	80092c0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008ea4:	4b81      	ldr	r3, [pc, #516]	; (80090ac <tcp_process+0x590>)
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	f003 0310 	and.w	r3, r3, #16
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 80a1 	beq.w	8008ff4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008eb2:	4b7f      	ldr	r3, [pc, #508]	; (80090b0 <tcp_process+0x594>)
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	db7e      	blt.n	8008fc0 <tcp_process+0x4a4>
 8008ec2:	4b7b      	ldr	r3, [pc, #492]	; (80090b0 <tcp_process+0x594>)
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	dc77      	bgt.n	8008fc0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2204      	movs	r2, #4
 8008ed4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d102      	bne.n	8008ee4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008ede:	23fa      	movs	r3, #250	; 0xfa
 8008ee0:	76bb      	strb	r3, [r7, #26]
 8008ee2:	e01d      	b.n	8008f20 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d106      	bne.n	8008efc <tcp_process+0x3e0>
 8008eee:	4b76      	ldr	r3, [pc, #472]	; (80090c8 <tcp_process+0x5ac>)
 8008ef0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008ef4:	4975      	ldr	r1, [pc, #468]	; (80090cc <tcp_process+0x5b0>)
 8008ef6:	4876      	ldr	r0, [pc, #472]	; (80090d0 <tcp_process+0x5b4>)
 8008ef8:	f005 fef2 	bl	800ece0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f00:	699b      	ldr	r3, [r3, #24]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00a      	beq.n	8008f1c <tcp_process+0x400>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f0a:	699b      	ldr	r3, [r3, #24]
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	6910      	ldr	r0, [r2, #16]
 8008f10:	2200      	movs	r2, #0
 8008f12:	6879      	ldr	r1, [r7, #4]
 8008f14:	4798      	blx	r3
 8008f16:	4603      	mov	r3, r0
 8008f18:	76bb      	strb	r3, [r7, #26]
 8008f1a:	e001      	b.n	8008f20 <tcp_process+0x404>
 8008f1c:	23f0      	movs	r3, #240	; 0xf0
 8008f1e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008f20:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00a      	beq.n	8008f3e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008f28:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008f2c:	f113 0f0d 	cmn.w	r3, #13
 8008f30:	d002      	beq.n	8008f38 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7fd ff8e 	bl	8006e54 <tcp_abort>
            }
            return ERR_ABRT;
 8008f38:	f06f 030c 	mvn.w	r3, #12
 8008f3c:	e1ce      	b.n	80092dc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fae0 	bl	8009504 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008f44:	4b63      	ldr	r3, [pc, #396]	; (80090d4 <tcp_process+0x5b8>)
 8008f46:	881b      	ldrh	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d005      	beq.n	8008f58 <tcp_process+0x43c>
            recv_acked--;
 8008f4c:	4b61      	ldr	r3, [pc, #388]	; (80090d4 <tcp_process+0x5b8>)
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	4b5f      	ldr	r3, [pc, #380]	; (80090d4 <tcp_process+0x5b8>)
 8008f56:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f5c:	009a      	lsls	r2, r3, #2
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f62:	005b      	lsls	r3, r3, #1
 8008f64:	f241 111c 	movw	r1, #4380	; 0x111c
 8008f68:	428b      	cmp	r3, r1
 8008f6a:	bf38      	it	cc
 8008f6c:	460b      	movcc	r3, r1
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d204      	bcs.n	8008f7c <tcp_process+0x460>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	e00d      	b.n	8008f98 <tcp_process+0x47c>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f80:	005b      	lsls	r3, r3, #1
 8008f82:	f241 121c 	movw	r2, #4380	; 0x111c
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d904      	bls.n	8008f94 <tcp_process+0x478>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f8e:	005b      	lsls	r3, r3, #1
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	e001      	b.n	8008f98 <tcp_process+0x47c>
 8008f94:	f241 131c 	movw	r3, #4380	; 0x111c
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008f9e:	4b4e      	ldr	r3, [pc, #312]	; (80090d8 <tcp_process+0x5bc>)
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	f003 0320 	and.w	r3, r3, #32
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d037      	beq.n	800901a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	8b5b      	ldrh	r3, [r3, #26]
 8008fae:	f043 0302 	orr.w	r3, r3, #2
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2207      	movs	r2, #7
 8008fbc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008fbe:	e02c      	b.n	800901a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008fc0:	4b3b      	ldr	r3, [pc, #236]	; (80090b0 <tcp_process+0x594>)
 8008fc2:	6819      	ldr	r1, [r3, #0]
 8008fc4:	4b3b      	ldr	r3, [pc, #236]	; (80090b4 <tcp_process+0x598>)
 8008fc6:	881b      	ldrh	r3, [r3, #0]
 8008fc8:	461a      	mov	r2, r3
 8008fca:	4b3b      	ldr	r3, [pc, #236]	; (80090b8 <tcp_process+0x59c>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008fd0:	4b3a      	ldr	r3, [pc, #232]	; (80090bc <tcp_process+0x5a0>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008fd4:	885b      	ldrh	r3, [r3, #2]
 8008fd6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008fd8:	4a38      	ldr	r2, [pc, #224]	; (80090bc <tcp_process+0x5a0>)
 8008fda:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008fdc:	8812      	ldrh	r2, [r2, #0]
 8008fde:	b292      	uxth	r2, r2
 8008fe0:	9202      	str	r2, [sp, #8]
 8008fe2:	9301      	str	r3, [sp, #4]
 8008fe4:	4b36      	ldr	r3, [pc, #216]	; (80090c0 <tcp_process+0x5a4>)
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	4b36      	ldr	r3, [pc, #216]	; (80090c4 <tcp_process+0x5a8>)
 8008fea:	4602      	mov	r2, r0
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f002 fbd1 	bl	800b794 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008ff2:	e167      	b.n	80092c4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008ff4:	4b2d      	ldr	r3, [pc, #180]	; (80090ac <tcp_process+0x590>)
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	f003 0302 	and.w	r3, r3, #2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 8161 	beq.w	80092c4 <tcp_process+0x7a8>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009006:	1e5a      	subs	r2, r3, #1
 8009008:	4b2b      	ldr	r3, [pc, #172]	; (80090b8 <tcp_process+0x59c>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	429a      	cmp	r2, r3
 800900e:	f040 8159 	bne.w	80092c4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f002 f9b6 	bl	800b384 <tcp_rexmit>
      break;
 8009018:	e154      	b.n	80092c4 <tcp_process+0x7a8>
 800901a:	e153      	b.n	80092c4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fa71 	bl	8009504 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009022:	4b2d      	ldr	r3, [pc, #180]	; (80090d8 <tcp_process+0x5bc>)
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	f003 0320 	and.w	r3, r3, #32
 800902a:	2b00      	cmp	r3, #0
 800902c:	f000 814c 	beq.w	80092c8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	8b5b      	ldrh	r3, [r3, #26]
 8009034:	f043 0302 	orr.w	r3, r3, #2
 8009038:	b29a      	uxth	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2207      	movs	r2, #7
 8009042:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009044:	e140      	b.n	80092c8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fa5c 	bl	8009504 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800904c:	4b22      	ldr	r3, [pc, #136]	; (80090d8 <tcp_process+0x5bc>)
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	f003 0320 	and.w	r3, r3, #32
 8009054:	2b00      	cmp	r3, #0
 8009056:	d071      	beq.n	800913c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009058:	4b14      	ldr	r3, [pc, #80]	; (80090ac <tcp_process+0x590>)
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	f003 0310 	and.w	r3, r3, #16
 8009060:	2b00      	cmp	r3, #0
 8009062:	d060      	beq.n	8009126 <tcp_process+0x60a>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009068:	4b11      	ldr	r3, [pc, #68]	; (80090b0 <tcp_process+0x594>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	429a      	cmp	r2, r3
 800906e:	d15a      	bne.n	8009126 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009074:	2b00      	cmp	r3, #0
 8009076:	d156      	bne.n	8009126 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	8b5b      	ldrh	r3, [r3, #26]
 800907c:	f043 0302 	orr.w	r3, r3, #2
 8009080:	b29a      	uxth	r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7fe fdbc 	bl	8007c04 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800908c:	4b13      	ldr	r3, [pc, #76]	; (80090dc <tcp_process+0x5c0>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	429a      	cmp	r2, r3
 8009094:	d105      	bne.n	80090a2 <tcp_process+0x586>
 8009096:	4b11      	ldr	r3, [pc, #68]	; (80090dc <tcp_process+0x5c0>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	4a0f      	ldr	r2, [pc, #60]	; (80090dc <tcp_process+0x5c0>)
 800909e:	6013      	str	r3, [r2, #0]
 80090a0:	e02e      	b.n	8009100 <tcp_process+0x5e4>
 80090a2:	4b0e      	ldr	r3, [pc, #56]	; (80090dc <tcp_process+0x5c0>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	617b      	str	r3, [r7, #20]
 80090a8:	e027      	b.n	80090fa <tcp_process+0x5de>
 80090aa:	bf00      	nop
 80090ac:	2000836c 	.word	0x2000836c
 80090b0:	20008364 	.word	0x20008364
 80090b4:	2000836a 	.word	0x2000836a
 80090b8:	20008360 	.word	0x20008360
 80090bc:	20008350 	.word	0x20008350
 80090c0:	20004d4c 	.word	0x20004d4c
 80090c4:	20004d50 	.word	0x20004d50
 80090c8:	08011490 	.word	0x08011490
 80090cc:	08011730 	.word	0x08011730
 80090d0:	080114dc 	.word	0x080114dc
 80090d4:	20008368 	.word	0x20008368
 80090d8:	2000836d 	.word	0x2000836d
 80090dc:	20008334 	.word	0x20008334
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d104      	bne.n	80090f4 <tcp_process+0x5d8>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	68da      	ldr	r2, [r3, #12]
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	60da      	str	r2, [r3, #12]
 80090f2:	e005      	b.n	8009100 <tcp_process+0x5e4>
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	617b      	str	r3, [r7, #20]
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1ef      	bne.n	80090e0 <tcp_process+0x5c4>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	60da      	str	r2, [r3, #12]
 8009106:	4b77      	ldr	r3, [pc, #476]	; (80092e4 <tcp_process+0x7c8>)
 8009108:	2201      	movs	r2, #1
 800910a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	220a      	movs	r2, #10
 8009110:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009112:	4b75      	ldr	r3, [pc, #468]	; (80092e8 <tcp_process+0x7cc>)
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	60da      	str	r2, [r3, #12]
 800911a:	4a73      	ldr	r2, [pc, #460]	; (80092e8 <tcp_process+0x7cc>)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6013      	str	r3, [r2, #0]
 8009120:	f002 fcfa 	bl	800bb18 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009124:	e0d2      	b.n	80092cc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	8b5b      	ldrh	r3, [r3, #26]
 800912a:	f043 0302 	orr.w	r3, r3, #2
 800912e:	b29a      	uxth	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2208      	movs	r2, #8
 8009138:	751a      	strb	r2, [r3, #20]
      break;
 800913a:	e0c7      	b.n	80092cc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800913c:	4b6b      	ldr	r3, [pc, #428]	; (80092ec <tcp_process+0x7d0>)
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	f003 0310 	and.w	r3, r3, #16
 8009144:	2b00      	cmp	r3, #0
 8009146:	f000 80c1 	beq.w	80092cc <tcp_process+0x7b0>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800914e:	4b68      	ldr	r3, [pc, #416]	; (80092f0 <tcp_process+0x7d4>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	429a      	cmp	r2, r3
 8009154:	f040 80ba 	bne.w	80092cc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800915c:	2b00      	cmp	r3, #0
 800915e:	f040 80b5 	bne.w	80092cc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2206      	movs	r2, #6
 8009166:	751a      	strb	r2, [r3, #20]
      break;
 8009168:	e0b0      	b.n	80092cc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f9ca 	bl	8009504 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009170:	4b60      	ldr	r3, [pc, #384]	; (80092f4 <tcp_process+0x7d8>)
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	f003 0320 	and.w	r3, r3, #32
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 80a9 	beq.w	80092d0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	8b5b      	ldrh	r3, [r3, #26]
 8009182:	f043 0302 	orr.w	r3, r3, #2
 8009186:	b29a      	uxth	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7fe fd39 	bl	8007c04 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009192:	4b59      	ldr	r3, [pc, #356]	; (80092f8 <tcp_process+0x7dc>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	429a      	cmp	r2, r3
 800919a:	d105      	bne.n	80091a8 <tcp_process+0x68c>
 800919c:	4b56      	ldr	r3, [pc, #344]	; (80092f8 <tcp_process+0x7dc>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	4a55      	ldr	r2, [pc, #340]	; (80092f8 <tcp_process+0x7dc>)
 80091a4:	6013      	str	r3, [r2, #0]
 80091a6:	e013      	b.n	80091d0 <tcp_process+0x6b4>
 80091a8:	4b53      	ldr	r3, [pc, #332]	; (80092f8 <tcp_process+0x7dc>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	613b      	str	r3, [r7, #16]
 80091ae:	e00c      	b.n	80091ca <tcp_process+0x6ae>
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d104      	bne.n	80091c4 <tcp_process+0x6a8>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	68da      	ldr	r2, [r3, #12]
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	60da      	str	r2, [r3, #12]
 80091c2:	e005      	b.n	80091d0 <tcp_process+0x6b4>
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	613b      	str	r3, [r7, #16]
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1ef      	bne.n	80091b0 <tcp_process+0x694>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	60da      	str	r2, [r3, #12]
 80091d6:	4b43      	ldr	r3, [pc, #268]	; (80092e4 <tcp_process+0x7c8>)
 80091d8:	2201      	movs	r2, #1
 80091da:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	220a      	movs	r2, #10
 80091e0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80091e2:	4b41      	ldr	r3, [pc, #260]	; (80092e8 <tcp_process+0x7cc>)
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	60da      	str	r2, [r3, #12]
 80091ea:	4a3f      	ldr	r2, [pc, #252]	; (80092e8 <tcp_process+0x7cc>)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6013      	str	r3, [r2, #0]
 80091f0:	f002 fc92 	bl	800bb18 <tcp_timer_needed>
      }
      break;
 80091f4:	e06c      	b.n	80092d0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f984 	bl	8009504 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80091fc:	4b3b      	ldr	r3, [pc, #236]	; (80092ec <tcp_process+0x7d0>)
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	f003 0310 	and.w	r3, r3, #16
 8009204:	2b00      	cmp	r3, #0
 8009206:	d065      	beq.n	80092d4 <tcp_process+0x7b8>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800920c:	4b38      	ldr	r3, [pc, #224]	; (80092f0 <tcp_process+0x7d4>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	429a      	cmp	r2, r3
 8009212:	d15f      	bne.n	80092d4 <tcp_process+0x7b8>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009218:	2b00      	cmp	r3, #0
 800921a:	d15b      	bne.n	80092d4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f7fe fcf1 	bl	8007c04 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009222:	4b35      	ldr	r3, [pc, #212]	; (80092f8 <tcp_process+0x7dc>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	429a      	cmp	r2, r3
 800922a:	d105      	bne.n	8009238 <tcp_process+0x71c>
 800922c:	4b32      	ldr	r3, [pc, #200]	; (80092f8 <tcp_process+0x7dc>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	4a31      	ldr	r2, [pc, #196]	; (80092f8 <tcp_process+0x7dc>)
 8009234:	6013      	str	r3, [r2, #0]
 8009236:	e013      	b.n	8009260 <tcp_process+0x744>
 8009238:	4b2f      	ldr	r3, [pc, #188]	; (80092f8 <tcp_process+0x7dc>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	60fb      	str	r3, [r7, #12]
 800923e:	e00c      	b.n	800925a <tcp_process+0x73e>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	429a      	cmp	r2, r3
 8009248:	d104      	bne.n	8009254 <tcp_process+0x738>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	68da      	ldr	r2, [r3, #12]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	60da      	str	r2, [r3, #12]
 8009252:	e005      	b.n	8009260 <tcp_process+0x744>
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	60fb      	str	r3, [r7, #12]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1ef      	bne.n	8009240 <tcp_process+0x724>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	60da      	str	r2, [r3, #12]
 8009266:	4b1f      	ldr	r3, [pc, #124]	; (80092e4 <tcp_process+0x7c8>)
 8009268:	2201      	movs	r2, #1
 800926a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	220a      	movs	r2, #10
 8009270:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009272:	4b1d      	ldr	r3, [pc, #116]	; (80092e8 <tcp_process+0x7cc>)
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	60da      	str	r2, [r3, #12]
 800927a:	4a1b      	ldr	r2, [pc, #108]	; (80092e8 <tcp_process+0x7cc>)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6013      	str	r3, [r2, #0]
 8009280:	f002 fc4a 	bl	800bb18 <tcp_timer_needed>
      }
      break;
 8009284:	e026      	b.n	80092d4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 f93c 	bl	8009504 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800928c:	4b17      	ldr	r3, [pc, #92]	; (80092ec <tcp_process+0x7d0>)
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	f003 0310 	and.w	r3, r3, #16
 8009294:	2b00      	cmp	r3, #0
 8009296:	d01f      	beq.n	80092d8 <tcp_process+0x7bc>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800929c:	4b14      	ldr	r3, [pc, #80]	; (80092f0 <tcp_process+0x7d4>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d119      	bne.n	80092d8 <tcp_process+0x7bc>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d115      	bne.n	80092d8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80092ac:	4b11      	ldr	r3, [pc, #68]	; (80092f4 <tcp_process+0x7d8>)
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	f043 0310 	orr.w	r3, r3, #16
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	4b0f      	ldr	r3, [pc, #60]	; (80092f4 <tcp_process+0x7d8>)
 80092b8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80092ba:	e00d      	b.n	80092d8 <tcp_process+0x7bc>
    default:
      break;
 80092bc:	bf00      	nop
 80092be:	e00c      	b.n	80092da <tcp_process+0x7be>
      break;
 80092c0:	bf00      	nop
 80092c2:	e00a      	b.n	80092da <tcp_process+0x7be>
      break;
 80092c4:	bf00      	nop
 80092c6:	e008      	b.n	80092da <tcp_process+0x7be>
      break;
 80092c8:	bf00      	nop
 80092ca:	e006      	b.n	80092da <tcp_process+0x7be>
      break;
 80092cc:	bf00      	nop
 80092ce:	e004      	b.n	80092da <tcp_process+0x7be>
      break;
 80092d0:	bf00      	nop
 80092d2:	e002      	b.n	80092da <tcp_process+0x7be>
      break;
 80092d4:	bf00      	nop
 80092d6:	e000      	b.n	80092da <tcp_process+0x7be>
      break;
 80092d8:	bf00      	nop
  }
  return ERR_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3724      	adds	r7, #36	; 0x24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd90      	pop	{r4, r7, pc}
 80092e4:	2000833c 	.word	0x2000833c
 80092e8:	20008338 	.word	0x20008338
 80092ec:	2000836c 	.word	0x2000836c
 80092f0:	20008364 	.word	0x20008364
 80092f4:	2000836d 	.word	0x2000836d
 80092f8:	20008334 	.word	0x20008334

080092fc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80092fc:	b590      	push	{r4, r7, lr}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d106      	bne.n	800931a <tcp_oos_insert_segment+0x1e>
 800930c:	4b3b      	ldr	r3, [pc, #236]	; (80093fc <tcp_oos_insert_segment+0x100>)
 800930e:	f240 421f 	movw	r2, #1055	; 0x41f
 8009312:	493b      	ldr	r1, [pc, #236]	; (8009400 <tcp_oos_insert_segment+0x104>)
 8009314:	483b      	ldr	r0, [pc, #236]	; (8009404 <tcp_oos_insert_segment+0x108>)
 8009316:	f005 fce3 	bl	800ece0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	899b      	ldrh	r3, [r3, #12]
 8009320:	b29b      	uxth	r3, r3
 8009322:	4618      	mov	r0, r3
 8009324:	f7fb f986 	bl	8004634 <lwip_htons>
 8009328:	4603      	mov	r3, r0
 800932a:	b2db      	uxtb	r3, r3
 800932c:	f003 0301 	and.w	r3, r3, #1
 8009330:	2b00      	cmp	r3, #0
 8009332:	d028      	beq.n	8009386 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009334:	6838      	ldr	r0, [r7, #0]
 8009336:	f7fe fa63 	bl	8007800 <tcp_segs_free>
    next = NULL;
 800933a:	2300      	movs	r3, #0
 800933c:	603b      	str	r3, [r7, #0]
 800933e:	e056      	b.n	80093ee <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	899b      	ldrh	r3, [r3, #12]
 8009346:	b29b      	uxth	r3, r3
 8009348:	4618      	mov	r0, r3
 800934a:	f7fb f973 	bl	8004634 <lwip_htons>
 800934e:	4603      	mov	r3, r0
 8009350:	b2db      	uxtb	r3, r3
 8009352:	f003 0301 	and.w	r3, r3, #1
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00d      	beq.n	8009376 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	899b      	ldrh	r3, [r3, #12]
 8009360:	b29c      	uxth	r4, r3
 8009362:	2001      	movs	r0, #1
 8009364:	f7fb f966 	bl	8004634 <lwip_htons>
 8009368:	4603      	mov	r3, r0
 800936a:	461a      	mov	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	4322      	orrs	r2, r4
 8009372:	b292      	uxth	r2, r2
 8009374:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f7fe fa52 	bl	800782a <tcp_seg_free>
    while (next &&
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00e      	beq.n	80093aa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	891b      	ldrh	r3, [r3, #8]
 8009390:	461a      	mov	r2, r3
 8009392:	4b1d      	ldr	r3, [pc, #116]	; (8009408 <tcp_oos_insert_segment+0x10c>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	441a      	add	r2, r3
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	6839      	ldr	r1, [r7, #0]
 80093a0:	8909      	ldrh	r1, [r1, #8]
 80093a2:	440b      	add	r3, r1
 80093a4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	daca      	bge.n	8009340 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d01e      	beq.n	80093ee <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	891b      	ldrh	r3, [r3, #8]
 80093b4:	461a      	mov	r2, r3
 80093b6:	4b14      	ldr	r3, [pc, #80]	; (8009408 <tcp_oos_insert_segment+0x10c>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	441a      	add	r2, r3
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	dd12      	ble.n	80093ee <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	4b0d      	ldr	r3, [pc, #52]	; (8009408 <tcp_oos_insert_segment+0x10c>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	b29a      	uxth	r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	891b      	ldrh	r3, [r3, #8]
 80093e6:	4619      	mov	r1, r3
 80093e8:	4610      	mov	r0, r2
 80093ea:	f7fc fb6d 	bl	8005ac8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	683a      	ldr	r2, [r7, #0]
 80093f2:	601a      	str	r2, [r3, #0]
}
 80093f4:	bf00      	nop
 80093f6:	3714      	adds	r7, #20
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd90      	pop	{r4, r7, pc}
 80093fc:	08011490 	.word	0x08011490
 8009400:	08011750 	.word	0x08011750
 8009404:	080114dc 	.word	0x080114dc
 8009408:	20008360 	.word	0x20008360

0800940c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800940c:	b5b0      	push	{r4, r5, r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
 8009418:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800941a:	e03e      	b.n	800949a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	4618      	mov	r0, r3
 800942c:	f7fc fd5a 	bl	8005ee4 <pbuf_clen>
 8009430:	4603      	mov	r3, r0
 8009432:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800943a:	8a7a      	ldrh	r2, [r7, #18]
 800943c:	429a      	cmp	r2, r3
 800943e:	d906      	bls.n	800944e <tcp_free_acked_segments+0x42>
 8009440:	4b2a      	ldr	r3, [pc, #168]	; (80094ec <tcp_free_acked_segments+0xe0>)
 8009442:	f240 4257 	movw	r2, #1111	; 0x457
 8009446:	492a      	ldr	r1, [pc, #168]	; (80094f0 <tcp_free_acked_segments+0xe4>)
 8009448:	482a      	ldr	r0, [pc, #168]	; (80094f4 <tcp_free_acked_segments+0xe8>)
 800944a:	f005 fc49 	bl	800ece0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009454:	8a7b      	ldrh	r3, [r7, #18]
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	b29a      	uxth	r2, r3
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	891a      	ldrh	r2, [r3, #8]
 8009464:	4b24      	ldr	r3, [pc, #144]	; (80094f8 <tcp_free_acked_segments+0xec>)
 8009466:	881b      	ldrh	r3, [r3, #0]
 8009468:	4413      	add	r3, r2
 800946a:	b29a      	uxth	r2, r3
 800946c:	4b22      	ldr	r3, [pc, #136]	; (80094f8 <tcp_free_acked_segments+0xec>)
 800946e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009470:	6978      	ldr	r0, [r7, #20]
 8009472:	f7fe f9da 	bl	800782a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00c      	beq.n	800949a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d109      	bne.n	800949a <tcp_free_acked_segments+0x8e>
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d106      	bne.n	800949a <tcp_free_acked_segments+0x8e>
 800948c:	4b17      	ldr	r3, [pc, #92]	; (80094ec <tcp_free_acked_segments+0xe0>)
 800948e:	f240 4261 	movw	r2, #1121	; 0x461
 8009492:	491a      	ldr	r1, [pc, #104]	; (80094fc <tcp_free_acked_segments+0xf0>)
 8009494:	4817      	ldr	r0, [pc, #92]	; (80094f4 <tcp_free_acked_segments+0xe8>)
 8009496:	f005 fc23 	bl	800ece0 <iprintf>
  while (seg_list != NULL &&
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d020      	beq.n	80094e2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fb f8d9 	bl	800465e <lwip_htonl>
 80094ac:	4604      	mov	r4, r0
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	891b      	ldrh	r3, [r3, #8]
 80094b2:	461d      	mov	r5, r3
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	899b      	ldrh	r3, [r3, #12]
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	4618      	mov	r0, r3
 80094be:	f7fb f8b9 	bl	8004634 <lwip_htons>
 80094c2:	4603      	mov	r3, r0
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	f003 0303 	and.w	r3, r3, #3
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <tcp_free_acked_segments+0xc6>
 80094ce:	2301      	movs	r3, #1
 80094d0:	e000      	b.n	80094d4 <tcp_free_acked_segments+0xc8>
 80094d2:	2300      	movs	r3, #0
 80094d4:	442b      	add	r3, r5
 80094d6:	18e2      	adds	r2, r4, r3
 80094d8:	4b09      	ldr	r3, [pc, #36]	; (8009500 <tcp_free_acked_segments+0xf4>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80094de:	2b00      	cmp	r3, #0
 80094e0:	dd9c      	ble.n	800941c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80094e2:	68bb      	ldr	r3, [r7, #8]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bdb0      	pop	{r4, r5, r7, pc}
 80094ec:	08011490 	.word	0x08011490
 80094f0:	08011778 	.word	0x08011778
 80094f4:	080114dc 	.word	0x080114dc
 80094f8:	20008368 	.word	0x20008368
 80094fc:	080117a0 	.word	0x080117a0
 8009500:	20008364 	.word	0x20008364

08009504 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009504:	b5b0      	push	{r4, r5, r7, lr}
 8009506:	b094      	sub	sp, #80	; 0x50
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800950c:	2300      	movs	r3, #0
 800950e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d106      	bne.n	8009524 <tcp_receive+0x20>
 8009516:	4b91      	ldr	r3, [pc, #580]	; (800975c <tcp_receive+0x258>)
 8009518:	f240 427b 	movw	r2, #1147	; 0x47b
 800951c:	4990      	ldr	r1, [pc, #576]	; (8009760 <tcp_receive+0x25c>)
 800951e:	4891      	ldr	r0, [pc, #580]	; (8009764 <tcp_receive+0x260>)
 8009520:	f005 fbde 	bl	800ece0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	7d1b      	ldrb	r3, [r3, #20]
 8009528:	2b03      	cmp	r3, #3
 800952a:	d806      	bhi.n	800953a <tcp_receive+0x36>
 800952c:	4b8b      	ldr	r3, [pc, #556]	; (800975c <tcp_receive+0x258>)
 800952e:	f240 427c 	movw	r2, #1148	; 0x47c
 8009532:	498d      	ldr	r1, [pc, #564]	; (8009768 <tcp_receive+0x264>)
 8009534:	488b      	ldr	r0, [pc, #556]	; (8009764 <tcp_receive+0x260>)
 8009536:	f005 fbd3 	bl	800ece0 <iprintf>

  if (flags & TCP_ACK) {
 800953a:	4b8c      	ldr	r3, [pc, #560]	; (800976c <tcp_receive+0x268>)
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	f003 0310 	and.w	r3, r3, #16
 8009542:	2b00      	cmp	r3, #0
 8009544:	f000 8264 	beq.w	8009a10 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800954e:	461a      	mov	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009554:	4413      	add	r3, r2
 8009556:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800955c:	4b84      	ldr	r3, [pc, #528]	; (8009770 <tcp_receive+0x26c>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	2b00      	cmp	r3, #0
 8009564:	db1b      	blt.n	800959e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800956a:	4b81      	ldr	r3, [pc, #516]	; (8009770 <tcp_receive+0x26c>)
 800956c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800956e:	429a      	cmp	r2, r3
 8009570:	d106      	bne.n	8009580 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009576:	4b7f      	ldr	r3, [pc, #508]	; (8009774 <tcp_receive+0x270>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	2b00      	cmp	r3, #0
 800957e:	db0e      	blt.n	800959e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009584:	4b7b      	ldr	r3, [pc, #492]	; (8009774 <tcp_receive+0x270>)
 8009586:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009588:	429a      	cmp	r2, r3
 800958a:	d125      	bne.n	80095d8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800958c:	4b7a      	ldr	r3, [pc, #488]	; (8009778 <tcp_receive+0x274>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	89db      	ldrh	r3, [r3, #14]
 8009592:	b29a      	uxth	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800959a:	429a      	cmp	r2, r3
 800959c:	d91c      	bls.n	80095d8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800959e:	4b76      	ldr	r3, [pc, #472]	; (8009778 <tcp_receive+0x274>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	89db      	ldrh	r3, [r3, #14]
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d205      	bcs.n	80095c8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80095c8:	4b69      	ldr	r3, [pc, #420]	; (8009770 <tcp_receive+0x26c>)
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80095d0:	4b68      	ldr	r3, [pc, #416]	; (8009774 <tcp_receive+0x270>)
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80095d8:	4b66      	ldr	r3, [pc, #408]	; (8009774 <tcp_receive+0x270>)
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	dc58      	bgt.n	8009698 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80095e6:	4b65      	ldr	r3, [pc, #404]	; (800977c <tcp_receive+0x278>)
 80095e8:	881b      	ldrh	r3, [r3, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d14b      	bne.n	8009686 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80095f8:	4413      	add	r3, r2
 80095fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d142      	bne.n	8009686 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009606:	2b00      	cmp	r3, #0
 8009608:	db3d      	blt.n	8009686 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800960e:	4b59      	ldr	r3, [pc, #356]	; (8009774 <tcp_receive+0x270>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	429a      	cmp	r2, r3
 8009614:	d137      	bne.n	8009686 <tcp_receive+0x182>
              found_dupack = 1;
 8009616:	2301      	movs	r3, #1
 8009618:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009620:	2bff      	cmp	r3, #255	; 0xff
 8009622:	d007      	beq.n	8009634 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800962a:	3301      	adds	r3, #1
 800962c:	b2da      	uxtb	r2, r3
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800963a:	2b03      	cmp	r3, #3
 800963c:	d91b      	bls.n	8009676 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009648:	4413      	add	r3, r2
 800964a:	b29a      	uxth	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009652:	429a      	cmp	r2, r3
 8009654:	d30a      	bcc.n	800966c <tcp_receive+0x168>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009660:	4413      	add	r3, r2
 8009662:	b29a      	uxth	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800966a:	e004      	b.n	8009676 <tcp_receive+0x172>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009672:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800967c:	2b02      	cmp	r3, #2
 800967e:	d902      	bls.n	8009686 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f001 feeb 	bl	800b45c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009688:	2b00      	cmp	r3, #0
 800968a:	f040 8161 	bne.w	8009950 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009696:	e15b      	b.n	8009950 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009698:	4b36      	ldr	r3, [pc, #216]	; (8009774 <tcp_receive+0x270>)
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	3b01      	subs	r3, #1
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f2c0 814e 	blt.w	8009946 <tcp_receive+0x442>
 80096aa:	4b32      	ldr	r3, [pc, #200]	; (8009774 <tcp_receive+0x270>)
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096b2:	1ad3      	subs	r3, r2, r3
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f300 8146 	bgt.w	8009946 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	8b5b      	ldrh	r3, [r3, #26]
 80096be:	f003 0304 	and.w	r3, r3, #4
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d010      	beq.n	80096e8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	8b5b      	ldrh	r3, [r3, #26]
 80096ca:	f023 0304 	bic.w	r3, r3, #4
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80096f6:	10db      	asrs	r3, r3, #3
 80096f8:	b21b      	sxth	r3, r3
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009702:	b29b      	uxth	r3, r3
 8009704:	4413      	add	r3, r2
 8009706:	b29b      	uxth	r3, r3
 8009708:	b21a      	sxth	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009710:	4b18      	ldr	r3, [pc, #96]	; (8009774 <tcp_receive+0x270>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	b29a      	uxth	r2, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800971a:	b29b      	uxth	r3, r3
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009728:	4b12      	ldr	r3, [pc, #72]	; (8009774 <tcp_receive+0x270>)
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	7d1b      	ldrb	r3, [r3, #20]
 8009734:	2b03      	cmp	r3, #3
 8009736:	f240 8097 	bls.w	8009868 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009746:	429a      	cmp	r2, r3
 8009748:	d245      	bcs.n	80097d6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	8b5b      	ldrh	r3, [r3, #26]
 800974e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009752:	2b00      	cmp	r3, #0
 8009754:	d014      	beq.n	8009780 <tcp_receive+0x27c>
 8009756:	2301      	movs	r3, #1
 8009758:	e013      	b.n	8009782 <tcp_receive+0x27e>
 800975a:	bf00      	nop
 800975c:	08011490 	.word	0x08011490
 8009760:	080117c0 	.word	0x080117c0
 8009764:	080114dc 	.word	0x080114dc
 8009768:	080117dc 	.word	0x080117dc
 800976c:	2000836c 	.word	0x2000836c
 8009770:	20008360 	.word	0x20008360
 8009774:	20008364 	.word	0x20008364
 8009778:	20008350 	.word	0x20008350
 800977c:	2000836a 	.word	0x2000836a
 8009780:	2302      	movs	r3, #2
 8009782:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009786:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800978a:	b29a      	uxth	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009790:	fb12 f303 	smulbb	r3, r2, r3
 8009794:	b29b      	uxth	r3, r3
 8009796:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009798:	4293      	cmp	r3, r2
 800979a:	bf28      	it	cs
 800979c:	4613      	movcs	r3, r2
 800979e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80097a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80097a8:	4413      	add	r3, r2
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d309      	bcc.n	80097ca <tcp_receive+0x2c6>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80097bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80097be:	4413      	add	r3, r2
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80097c8:	e04e      	b.n	8009868 <tcp_receive+0x364>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80097d4:	e048      	b.n	8009868 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80097dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80097de:	4413      	add	r3, r2
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d309      	bcc.n	8009800 <tcp_receive+0x2fc>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80097f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80097f4:	4413      	add	r3, r2
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80097fe:	e004      	b.n	800980a <tcp_receive+0x306>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009806:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009816:	429a      	cmp	r2, r3
 8009818:	d326      	bcc.n	8009868 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	b29a      	uxth	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800983a:	4413      	add	r3, r2
 800983c:	b29a      	uxth	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009844:	429a      	cmp	r2, r3
 8009846:	d30a      	bcc.n	800985e <tcp_receive+0x35a>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009852:	4413      	add	r3, r2
 8009854:	b29a      	uxth	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800985c:	e004      	b.n	8009868 <tcp_receive+0x364>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009864:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009870:	4a98      	ldr	r2, [pc, #608]	; (8009ad4 <tcp_receive+0x5d0>)
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7ff fdca 	bl	800940c <tcp_free_acked_segments>
 8009878:	4602      	mov	r2, r0
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009886:	4a94      	ldr	r2, [pc, #592]	; (8009ad8 <tcp_receive+0x5d4>)
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7ff fdbf 	bl	800940c <tcp_free_acked_segments>
 800988e:	4602      	mov	r2, r0
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009898:	2b00      	cmp	r3, #0
 800989a:	d104      	bne.n	80098a6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098a2:	861a      	strh	r2, [r3, #48]	; 0x30
 80098a4:	e002      	b.n	80098ac <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d103      	bne.n	80098c2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80098c8:	4b84      	ldr	r3, [pc, #528]	; (8009adc <tcp_receive+0x5d8>)
 80098ca:	881b      	ldrh	r3, [r3, #0]
 80098cc:	4413      	add	r3, r2
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	8b5b      	ldrh	r3, [r3, #26]
 80098da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d035      	beq.n	800994e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d118      	bne.n	800991c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00c      	beq.n	800990c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	4618      	mov	r0, r3
 8009900:	f7fa fead 	bl	800465e <lwip_htonl>
 8009904:	4603      	mov	r3, r0
 8009906:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009908:	2b00      	cmp	r3, #0
 800990a:	dc20      	bgt.n	800994e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	8b5b      	ldrh	r3, [r3, #26]
 8009910:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009914:	b29a      	uxth	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800991a:	e018      	b.n	800994e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	4618      	mov	r0, r3
 800992a:	f7fa fe98 	bl	800465e <lwip_htonl>
 800992e:	4603      	mov	r3, r0
 8009930:	1ae3      	subs	r3, r4, r3
 8009932:	2b00      	cmp	r3, #0
 8009934:	dc0b      	bgt.n	800994e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	8b5b      	ldrh	r3, [r3, #26]
 800993a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800993e:	b29a      	uxth	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009944:	e003      	b.n	800994e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f001 ff76 	bl	800b838 <tcp_send_empty_ack>
 800994c:	e000      	b.n	8009950 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800994e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009954:	2b00      	cmp	r3, #0
 8009956:	d05b      	beq.n	8009a10 <tcp_receive+0x50c>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800995c:	4b60      	ldr	r3, [pc, #384]	; (8009ae0 <tcp_receive+0x5dc>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	2b00      	cmp	r3, #0
 8009964:	da54      	bge.n	8009a10 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009966:	4b5f      	ldr	r3, [pc, #380]	; (8009ae4 <tcp_receive+0x5e0>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	b29a      	uxth	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009970:	b29b      	uxth	r3, r3
 8009972:	1ad3      	subs	r3, r2, r3
 8009974:	b29b      	uxth	r3, r3
 8009976:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800997a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009984:	10db      	asrs	r3, r3, #3
 8009986:	b21b      	sxth	r3, r3
 8009988:	b29b      	uxth	r3, r3
 800998a:	1ad3      	subs	r3, r2, r3
 800998c:	b29b      	uxth	r3, r3
 800998e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009998:	b29a      	uxth	r2, r3
 800999a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800999e:	4413      	add	r3, r2
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	b21a      	sxth	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80099a8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	da05      	bge.n	80099bc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80099b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80099b4:	425b      	negs	r3, r3
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80099bc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80099c6:	109b      	asrs	r3, r3, #2
 80099c8:	b21b      	sxth	r3, r3
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80099da:	b29a      	uxth	r2, r3
 80099dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80099e0:	4413      	add	r3, r2
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	b21a      	sxth	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80099f0:	10db      	asrs	r3, r3, #3
 80099f2:	b21b      	sxth	r3, r3
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	4413      	add	r3, r2
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	b21a      	sxth	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009a10:	4b35      	ldr	r3, [pc, #212]	; (8009ae8 <tcp_receive+0x5e4>)
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f000 84e2 	beq.w	800a3de <tcp_receive+0xeda>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	7d1b      	ldrb	r3, [r3, #20]
 8009a1e:	2b06      	cmp	r3, #6
 8009a20:	f200 84dd 	bhi.w	800a3de <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a28:	4b30      	ldr	r3, [pc, #192]	; (8009aec <tcp_receive+0x5e8>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	1ad3      	subs	r3, r2, r3
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f2c0 808f 	blt.w	8009b54 <tcp_receive+0x650>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a3a:	4b2b      	ldr	r3, [pc, #172]	; (8009ae8 <tcp_receive+0x5e4>)
 8009a3c:	881b      	ldrh	r3, [r3, #0]
 8009a3e:	4619      	mov	r1, r3
 8009a40:	4b2a      	ldr	r3, [pc, #168]	; (8009aec <tcp_receive+0x5e8>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	440b      	add	r3, r1
 8009a46:	1ad3      	subs	r3, r2, r3
 8009a48:	3301      	adds	r3, #1
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f300 8082 	bgt.w	8009b54 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009a50:	4b27      	ldr	r3, [pc, #156]	; (8009af0 <tcp_receive+0x5ec>)
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a5a:	4b24      	ldr	r3, [pc, #144]	; (8009aec <tcp_receive+0x5e8>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009a62:	4b23      	ldr	r3, [pc, #140]	; (8009af0 <tcp_receive+0x5ec>)
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d106      	bne.n	8009a78 <tcp_receive+0x574>
 8009a6a:	4b22      	ldr	r3, [pc, #136]	; (8009af4 <tcp_receive+0x5f0>)
 8009a6c:	f240 5294 	movw	r2, #1428	; 0x594
 8009a70:	4921      	ldr	r1, [pc, #132]	; (8009af8 <tcp_receive+0x5f4>)
 8009a72:	4822      	ldr	r0, [pc, #136]	; (8009afc <tcp_receive+0x5f8>)
 8009a74:	f005 f934 	bl	800ece0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d906      	bls.n	8009a90 <tcp_receive+0x58c>
 8009a82:	4b1c      	ldr	r3, [pc, #112]	; (8009af4 <tcp_receive+0x5f0>)
 8009a84:	f240 5295 	movw	r2, #1429	; 0x595
 8009a88:	491d      	ldr	r1, [pc, #116]	; (8009b00 <tcp_receive+0x5fc>)
 8009a8a:	481c      	ldr	r0, [pc, #112]	; (8009afc <tcp_receive+0x5f8>)
 8009a8c:	f005 f928 	bl	800ece0 <iprintf>
      off = (u16_t)off32;
 8009a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a92:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009a96:	4b16      	ldr	r3, [pc, #88]	; (8009af0 <tcp_receive+0x5ec>)
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	891b      	ldrh	r3, [r3, #8]
 8009a9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d906      	bls.n	8009ab2 <tcp_receive+0x5ae>
 8009aa4:	4b13      	ldr	r3, [pc, #76]	; (8009af4 <tcp_receive+0x5f0>)
 8009aa6:	f240 5297 	movw	r2, #1431	; 0x597
 8009aaa:	4916      	ldr	r1, [pc, #88]	; (8009b04 <tcp_receive+0x600>)
 8009aac:	4813      	ldr	r0, [pc, #76]	; (8009afc <tcp_receive+0x5f8>)
 8009aae:	f005 f917 	bl	800ece0 <iprintf>
      inseg.len -= off;
 8009ab2:	4b0f      	ldr	r3, [pc, #60]	; (8009af0 <tcp_receive+0x5ec>)
 8009ab4:	891a      	ldrh	r2, [r3, #8]
 8009ab6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009aba:	1ad3      	subs	r3, r2, r3
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	4b0c      	ldr	r3, [pc, #48]	; (8009af0 <tcp_receive+0x5ec>)
 8009ac0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009ac2:	4b0b      	ldr	r3, [pc, #44]	; (8009af0 <tcp_receive+0x5ec>)
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	891a      	ldrh	r2, [r3, #8]
 8009ac8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009ad0:	e02a      	b.n	8009b28 <tcp_receive+0x624>
 8009ad2:	bf00      	nop
 8009ad4:	080117f8 	.word	0x080117f8
 8009ad8:	08011800 	.word	0x08011800
 8009adc:	20008368 	.word	0x20008368
 8009ae0:	20008364 	.word	0x20008364
 8009ae4:	20008328 	.word	0x20008328
 8009ae8:	2000836a 	.word	0x2000836a
 8009aec:	20008360 	.word	0x20008360
 8009af0:	20008340 	.word	0x20008340
 8009af4:	08011490 	.word	0x08011490
 8009af8:	08011808 	.word	0x08011808
 8009afc:	080114dc 	.word	0x080114dc
 8009b00:	08011818 	.word	0x08011818
 8009b04:	08011828 	.word	0x08011828
        off -= p->len;
 8009b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b0a:	895b      	ldrh	r3, [r3, #10]
 8009b0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009b10:	1ad3      	subs	r3, r2, r3
 8009b12:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b18:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009b1a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b1e:	2200      	movs	r2, #0
 8009b20:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b2a:	895b      	ldrh	r3, [r3, #10]
 8009b2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d8e9      	bhi.n	8009b08 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009b34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009b38:	4619      	mov	r1, r3
 8009b3a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009b3c:	f7fc f8c4 	bl	8005cc8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b44:	4a91      	ldr	r2, [pc, #580]	; (8009d8c <tcp_receive+0x888>)
 8009b46:	6013      	str	r3, [r2, #0]
 8009b48:	4b91      	ldr	r3, [pc, #580]	; (8009d90 <tcp_receive+0x88c>)
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	4a8f      	ldr	r2, [pc, #572]	; (8009d8c <tcp_receive+0x888>)
 8009b4e:	6812      	ldr	r2, [r2, #0]
 8009b50:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009b52:	e00d      	b.n	8009b70 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009b54:	4b8d      	ldr	r3, [pc, #564]	; (8009d8c <tcp_receive+0x888>)
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5c:	1ad3      	subs	r3, r2, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	da06      	bge.n	8009b70 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	8b5b      	ldrh	r3, [r3, #26]
 8009b66:	f043 0302 	orr.w	r3, r3, #2
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009b70:	4b86      	ldr	r3, [pc, #536]	; (8009d8c <tcp_receive+0x888>)
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f2c0 842a 	blt.w	800a3d4 <tcp_receive+0xed0>
 8009b80:	4b82      	ldr	r3, [pc, #520]	; (8009d8c <tcp_receive+0x888>)
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b88:	6879      	ldr	r1, [r7, #4]
 8009b8a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009b8c:	440b      	add	r3, r1
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	3301      	adds	r3, #1
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f300 841e 	bgt.w	800a3d4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b9c:	4b7b      	ldr	r3, [pc, #492]	; (8009d8c <tcp_receive+0x888>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	f040 829a 	bne.w	800a0da <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009ba6:	4b7a      	ldr	r3, [pc, #488]	; (8009d90 <tcp_receive+0x88c>)
 8009ba8:	891c      	ldrh	r4, [r3, #8]
 8009baa:	4b79      	ldr	r3, [pc, #484]	; (8009d90 <tcp_receive+0x88c>)
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	899b      	ldrh	r3, [r3, #12]
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fa fd3e 	bl	8004634 <lwip_htons>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	f003 0303 	and.w	r3, r3, #3
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d001      	beq.n	8009bc8 <tcp_receive+0x6c4>
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e000      	b.n	8009bca <tcp_receive+0x6c6>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4423      	add	r3, r4
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	4b71      	ldr	r3, [pc, #452]	; (8009d94 <tcp_receive+0x890>)
 8009bd0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009bd6:	4b6f      	ldr	r3, [pc, #444]	; (8009d94 <tcp_receive+0x890>)
 8009bd8:	881b      	ldrh	r3, [r3, #0]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d275      	bcs.n	8009cca <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009bde:	4b6c      	ldr	r3, [pc, #432]	; (8009d90 <tcp_receive+0x88c>)
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	899b      	ldrh	r3, [r3, #12]
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7fa fd24 	bl	8004634 <lwip_htons>
 8009bec:	4603      	mov	r3, r0
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	f003 0301 	and.w	r3, r3, #1
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d01f      	beq.n	8009c38 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009bf8:	4b65      	ldr	r3, [pc, #404]	; (8009d90 <tcp_receive+0x88c>)
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	899b      	ldrh	r3, [r3, #12]
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	b21b      	sxth	r3, r3
 8009c02:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009c06:	b21c      	sxth	r4, r3
 8009c08:	4b61      	ldr	r3, [pc, #388]	; (8009d90 <tcp_receive+0x88c>)
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	899b      	ldrh	r3, [r3, #12]
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7fa fd0f 	bl	8004634 <lwip_htons>
 8009c16:	4603      	mov	r3, r0
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fa fd06 	bl	8004634 <lwip_htons>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	b21b      	sxth	r3, r3
 8009c2c:	4323      	orrs	r3, r4
 8009c2e:	b21a      	sxth	r2, r3
 8009c30:	4b57      	ldr	r3, [pc, #348]	; (8009d90 <tcp_receive+0x88c>)
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	b292      	uxth	r2, r2
 8009c36:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009c3c:	4b54      	ldr	r3, [pc, #336]	; (8009d90 <tcp_receive+0x88c>)
 8009c3e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009c40:	4b53      	ldr	r3, [pc, #332]	; (8009d90 <tcp_receive+0x88c>)
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	899b      	ldrh	r3, [r3, #12]
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7fa fcf3 	bl	8004634 <lwip_htons>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	f003 0302 	and.w	r3, r3, #2
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d005      	beq.n	8009c66 <tcp_receive+0x762>
            inseg.len -= 1;
 8009c5a:	4b4d      	ldr	r3, [pc, #308]	; (8009d90 <tcp_receive+0x88c>)
 8009c5c:	891b      	ldrh	r3, [r3, #8]
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	4b4b      	ldr	r3, [pc, #300]	; (8009d90 <tcp_receive+0x88c>)
 8009c64:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009c66:	4b4a      	ldr	r3, [pc, #296]	; (8009d90 <tcp_receive+0x88c>)
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	4a49      	ldr	r2, [pc, #292]	; (8009d90 <tcp_receive+0x88c>)
 8009c6c:	8912      	ldrh	r2, [r2, #8]
 8009c6e:	4611      	mov	r1, r2
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fb ff29 	bl	8005ac8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009c76:	4b46      	ldr	r3, [pc, #280]	; (8009d90 <tcp_receive+0x88c>)
 8009c78:	891c      	ldrh	r4, [r3, #8]
 8009c7a:	4b45      	ldr	r3, [pc, #276]	; (8009d90 <tcp_receive+0x88c>)
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	899b      	ldrh	r3, [r3, #12]
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7fa fcd6 	bl	8004634 <lwip_htons>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	f003 0303 	and.w	r3, r3, #3
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d001      	beq.n	8009c98 <tcp_receive+0x794>
 8009c94:	2301      	movs	r3, #1
 8009c96:	e000      	b.n	8009c9a <tcp_receive+0x796>
 8009c98:	2300      	movs	r3, #0
 8009c9a:	4423      	add	r3, r4
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	4b3d      	ldr	r3, [pc, #244]	; (8009d94 <tcp_receive+0x890>)
 8009ca0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009ca2:	4b3c      	ldr	r3, [pc, #240]	; (8009d94 <tcp_receive+0x890>)
 8009ca4:	881b      	ldrh	r3, [r3, #0]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	4b38      	ldr	r3, [pc, #224]	; (8009d8c <tcp_receive+0x888>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	441a      	add	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb2:	6879      	ldr	r1, [r7, #4]
 8009cb4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009cb6:	440b      	add	r3, r1
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d006      	beq.n	8009cca <tcp_receive+0x7c6>
 8009cbc:	4b36      	ldr	r3, [pc, #216]	; (8009d98 <tcp_receive+0x894>)
 8009cbe:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009cc2:	4936      	ldr	r1, [pc, #216]	; (8009d9c <tcp_receive+0x898>)
 8009cc4:	4836      	ldr	r0, [pc, #216]	; (8009da0 <tcp_receive+0x89c>)
 8009cc6:	f005 f80b 	bl	800ece0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f000 80e7 	beq.w	8009ea2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009cd4:	4b2e      	ldr	r3, [pc, #184]	; (8009d90 <tcp_receive+0x88c>)
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	899b      	ldrh	r3, [r3, #12]
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7fa fca9 	bl	8004634 <lwip_htons>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	f003 0301 	and.w	r3, r3, #1
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d010      	beq.n	8009d10 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009cee:	e00a      	b.n	8009d06 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cf4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f7fd fd92 	bl	800782a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1f0      	bne.n	8009cf0 <tcp_receive+0x7ec>
 8009d0e:	e0c8      	b.n	8009ea2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d14:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009d16:	e052      	b.n	8009dbe <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	899b      	ldrh	r3, [r3, #12]
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7fa fc87 	bl	8004634 <lwip_htons>
 8009d26:	4603      	mov	r3, r0
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	f003 0301 	and.w	r3, r3, #1
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d03d      	beq.n	8009dae <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009d32:	4b17      	ldr	r3, [pc, #92]	; (8009d90 <tcp_receive+0x88c>)
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	899b      	ldrh	r3, [r3, #12]
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7fa fc7a 	bl	8004634 <lwip_htons>
 8009d40:	4603      	mov	r3, r0
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d130      	bne.n	8009dae <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009d4c:	4b10      	ldr	r3, [pc, #64]	; (8009d90 <tcp_receive+0x88c>)
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	899b      	ldrh	r3, [r3, #12]
 8009d52:	b29c      	uxth	r4, r3
 8009d54:	2001      	movs	r0, #1
 8009d56:	f7fa fc6d 	bl	8004634 <lwip_htons>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	4b0c      	ldr	r3, [pc, #48]	; (8009d90 <tcp_receive+0x88c>)
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	4322      	orrs	r2, r4
 8009d64:	b292      	uxth	r2, r2
 8009d66:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009d68:	4b09      	ldr	r3, [pc, #36]	; (8009d90 <tcp_receive+0x88c>)
 8009d6a:	891c      	ldrh	r4, [r3, #8]
 8009d6c:	4b08      	ldr	r3, [pc, #32]	; (8009d90 <tcp_receive+0x88c>)
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	899b      	ldrh	r3, [r3, #12]
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7fa fc5d 	bl	8004634 <lwip_htons>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	f003 0303 	and.w	r3, r3, #3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00e      	beq.n	8009da4 <tcp_receive+0x8a0>
 8009d86:	2301      	movs	r3, #1
 8009d88:	e00d      	b.n	8009da6 <tcp_receive+0x8a2>
 8009d8a:	bf00      	nop
 8009d8c:	20008360 	.word	0x20008360
 8009d90:	20008340 	.word	0x20008340
 8009d94:	2000836a 	.word	0x2000836a
 8009d98:	08011490 	.word	0x08011490
 8009d9c:	08011838 	.word	0x08011838
 8009da0:	080114dc 	.word	0x080114dc
 8009da4:	2300      	movs	r3, #0
 8009da6:	4423      	add	r3, r4
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	4b98      	ldr	r3, [pc, #608]	; (800a00c <tcp_receive+0xb08>)
 8009dac:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009db0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009db8:	6938      	ldr	r0, [r7, #16]
 8009dba:	f7fd fd36 	bl	800782a <tcp_seg_free>
            while (next &&
 8009dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00e      	beq.n	8009de2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009dc4:	4b91      	ldr	r3, [pc, #580]	; (800a00c <tcp_receive+0xb08>)
 8009dc6:	881b      	ldrh	r3, [r3, #0]
 8009dc8:	461a      	mov	r2, r3
 8009dca:	4b91      	ldr	r3, [pc, #580]	; (800a010 <tcp_receive+0xb0c>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	441a      	add	r2, r3
 8009dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009dd8:	8909      	ldrh	r1, [r1, #8]
 8009dda:	440b      	add	r3, r1
 8009ddc:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	da9a      	bge.n	8009d18 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d059      	beq.n	8009e9c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8009de8:	4b88      	ldr	r3, [pc, #544]	; (800a00c <tcp_receive+0xb08>)
 8009dea:	881b      	ldrh	r3, [r3, #0]
 8009dec:	461a      	mov	r2, r3
 8009dee:	4b88      	ldr	r3, [pc, #544]	; (800a010 <tcp_receive+0xb0c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	441a      	add	r2, r3
 8009df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	dd4d      	ble.n	8009e9c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	b29a      	uxth	r2, r3
 8009e08:	4b81      	ldr	r3, [pc, #516]	; (800a010 <tcp_receive+0xb0c>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	4b80      	ldr	r3, [pc, #512]	; (800a014 <tcp_receive+0xb10>)
 8009e14:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009e16:	4b7f      	ldr	r3, [pc, #508]	; (800a014 <tcp_receive+0xb10>)
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	899b      	ldrh	r3, [r3, #12]
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fa fc08 	bl	8004634 <lwip_htons>
 8009e24:	4603      	mov	r3, r0
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	f003 0302 	and.w	r3, r3, #2
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d005      	beq.n	8009e3c <tcp_receive+0x938>
                inseg.len -= 1;
 8009e30:	4b78      	ldr	r3, [pc, #480]	; (800a014 <tcp_receive+0xb10>)
 8009e32:	891b      	ldrh	r3, [r3, #8]
 8009e34:	3b01      	subs	r3, #1
 8009e36:	b29a      	uxth	r2, r3
 8009e38:	4b76      	ldr	r3, [pc, #472]	; (800a014 <tcp_receive+0xb10>)
 8009e3a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009e3c:	4b75      	ldr	r3, [pc, #468]	; (800a014 <tcp_receive+0xb10>)
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	4a74      	ldr	r2, [pc, #464]	; (800a014 <tcp_receive+0xb10>)
 8009e42:	8912      	ldrh	r2, [r2, #8]
 8009e44:	4611      	mov	r1, r2
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fb fe3e 	bl	8005ac8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009e4c:	4b71      	ldr	r3, [pc, #452]	; (800a014 <tcp_receive+0xb10>)
 8009e4e:	891c      	ldrh	r4, [r3, #8]
 8009e50:	4b70      	ldr	r3, [pc, #448]	; (800a014 <tcp_receive+0xb10>)
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	899b      	ldrh	r3, [r3, #12]
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7fa fbeb 	bl	8004634 <lwip_htons>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	f003 0303 	and.w	r3, r3, #3
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d001      	beq.n	8009e6e <tcp_receive+0x96a>
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e000      	b.n	8009e70 <tcp_receive+0x96c>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	4423      	add	r3, r4
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	4b65      	ldr	r3, [pc, #404]	; (800a00c <tcp_receive+0xb08>)
 8009e76:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009e78:	4b64      	ldr	r3, [pc, #400]	; (800a00c <tcp_receive+0xb08>)
 8009e7a:	881b      	ldrh	r3, [r3, #0]
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	4b64      	ldr	r3, [pc, #400]	; (800a010 <tcp_receive+0xb0c>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	441a      	add	r2, r3
 8009e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d006      	beq.n	8009e9c <tcp_receive+0x998>
 8009e8e:	4b62      	ldr	r3, [pc, #392]	; (800a018 <tcp_receive+0xb14>)
 8009e90:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009e94:	4961      	ldr	r1, [pc, #388]	; (800a01c <tcp_receive+0xb18>)
 8009e96:	4862      	ldr	r0, [pc, #392]	; (800a020 <tcp_receive+0xb1c>)
 8009e98:	f004 ff22 	bl	800ece0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ea0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009ea2:	4b5a      	ldr	r3, [pc, #360]	; (800a00c <tcp_receive+0xb08>)
 8009ea4:	881b      	ldrh	r3, [r3, #0]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	4b59      	ldr	r3, [pc, #356]	; (800a010 <tcp_receive+0xb0c>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	441a      	add	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009eb6:	4b55      	ldr	r3, [pc, #340]	; (800a00c <tcp_receive+0xb08>)
 8009eb8:	881b      	ldrh	r3, [r3, #0]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d206      	bcs.n	8009ecc <tcp_receive+0x9c8>
 8009ebe:	4b56      	ldr	r3, [pc, #344]	; (800a018 <tcp_receive+0xb14>)
 8009ec0:	f240 6207 	movw	r2, #1543	; 0x607
 8009ec4:	4957      	ldr	r1, [pc, #348]	; (800a024 <tcp_receive+0xb20>)
 8009ec6:	4856      	ldr	r0, [pc, #344]	; (800a020 <tcp_receive+0xb1c>)
 8009ec8:	f004 ff0a 	bl	800ece0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009ed0:	4b4e      	ldr	r3, [pc, #312]	; (800a00c <tcp_receive+0xb08>)
 8009ed2:	881b      	ldrh	r3, [r3, #0]
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f7fc ffc5 	bl	8006e6c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009ee2:	4b4c      	ldr	r3, [pc, #304]	; (800a014 <tcp_receive+0xb10>)
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	891b      	ldrh	r3, [r3, #8]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d006      	beq.n	8009efa <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8009eec:	4b49      	ldr	r3, [pc, #292]	; (800a014 <tcp_receive+0xb10>)
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	4a4d      	ldr	r2, [pc, #308]	; (800a028 <tcp_receive+0xb24>)
 8009ef2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009ef4:	4b47      	ldr	r3, [pc, #284]	; (800a014 <tcp_receive+0xb10>)
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009efa:	4b46      	ldr	r3, [pc, #280]	; (800a014 <tcp_receive+0xb10>)
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	899b      	ldrh	r3, [r3, #12]
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7fa fb96 	bl	8004634 <lwip_htons>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	f003 0301 	and.w	r3, r3, #1
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f000 80b8 	beq.w	800a086 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009f16:	4b45      	ldr	r3, [pc, #276]	; (800a02c <tcp_receive+0xb28>)
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	f043 0320 	orr.w	r3, r3, #32
 8009f1e:	b2da      	uxtb	r2, r3
 8009f20:	4b42      	ldr	r3, [pc, #264]	; (800a02c <tcp_receive+0xb28>)
 8009f22:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009f24:	e0af      	b.n	800a086 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f2a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	4a36      	ldr	r2, [pc, #216]	; (800a010 <tcp_receive+0xb0c>)
 8009f36:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	891b      	ldrh	r3, [r3, #8]
 8009f3c:	461c      	mov	r4, r3
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	899b      	ldrh	r3, [r3, #12]
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fa fb74 	bl	8004634 <lwip_htons>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	f003 0303 	and.w	r3, r3, #3
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d001      	beq.n	8009f5c <tcp_receive+0xa58>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e000      	b.n	8009f5e <tcp_receive+0xa5a>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	191a      	adds	r2, r3, r4
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f64:	441a      	add	r2, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f6e:	461c      	mov	r4, r3
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	891b      	ldrh	r3, [r3, #8]
 8009f74:	461d      	mov	r5, r3
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	899b      	ldrh	r3, [r3, #12]
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fa fb58 	bl	8004634 <lwip_htons>
 8009f84:	4603      	mov	r3, r0
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	f003 0303 	and.w	r3, r3, #3
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d001      	beq.n	8009f94 <tcp_receive+0xa90>
 8009f90:	2301      	movs	r3, #1
 8009f92:	e000      	b.n	8009f96 <tcp_receive+0xa92>
 8009f94:	2300      	movs	r3, #0
 8009f96:	442b      	add	r3, r5
 8009f98:	429c      	cmp	r4, r3
 8009f9a:	d206      	bcs.n	8009faa <tcp_receive+0xaa6>
 8009f9c:	4b1e      	ldr	r3, [pc, #120]	; (800a018 <tcp_receive+0xb14>)
 8009f9e:	f240 622b 	movw	r2, #1579	; 0x62b
 8009fa2:	4923      	ldr	r1, [pc, #140]	; (800a030 <tcp_receive+0xb2c>)
 8009fa4:	481e      	ldr	r0, [pc, #120]	; (800a020 <tcp_receive+0xb1c>)
 8009fa6:	f004 fe9b 	bl	800ece0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	891b      	ldrh	r3, [r3, #8]
 8009fae:	461c      	mov	r4, r3
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	899b      	ldrh	r3, [r3, #12]
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fa fb3b 	bl	8004634 <lwip_htons>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	f003 0303 	and.w	r3, r3, #3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <tcp_receive+0xaca>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e000      	b.n	8009fd0 <tcp_receive+0xacc>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	1919      	adds	r1, r3, r4
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009fd6:	b28b      	uxth	r3, r1
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f7fc ff43 	bl	8006e6c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	891b      	ldrh	r3, [r3, #8]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d028      	beq.n	800a042 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009ff0:	4b0d      	ldr	r3, [pc, #52]	; (800a028 <tcp_receive+0xb24>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d01d      	beq.n	800a034 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8009ff8:	4b0b      	ldr	r3, [pc, #44]	; (800a028 <tcp_receive+0xb24>)
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	4619      	mov	r1, r3
 800a002:	4610      	mov	r0, r2
 800a004:	f7fb ffa8 	bl	8005f58 <pbuf_cat>
 800a008:	e018      	b.n	800a03c <tcp_receive+0xb38>
 800a00a:	bf00      	nop
 800a00c:	2000836a 	.word	0x2000836a
 800a010:	20008360 	.word	0x20008360
 800a014:	20008340 	.word	0x20008340
 800a018:	08011490 	.word	0x08011490
 800a01c:	08011870 	.word	0x08011870
 800a020:	080114dc 	.word	0x080114dc
 800a024:	080118ac 	.word	0x080118ac
 800a028:	20008370 	.word	0x20008370
 800a02c:	2000836d 	.word	0x2000836d
 800a030:	080118cc 	.word	0x080118cc
            } else {
              recv_data = cseg->p;
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	4a70      	ldr	r2, [pc, #448]	; (800a1fc <tcp_receive+0xcf8>)
 800a03a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	2200      	movs	r2, #0
 800a040:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	899b      	ldrh	r3, [r3, #12]
 800a048:	b29b      	uxth	r3, r3
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fa faf2 	bl	8004634 <lwip_htons>
 800a050:	4603      	mov	r3, r0
 800a052:	b2db      	uxtb	r3, r3
 800a054:	f003 0301 	and.w	r3, r3, #1
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00d      	beq.n	800a078 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a05c:	4b68      	ldr	r3, [pc, #416]	; (800a200 <tcp_receive+0xcfc>)
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	f043 0320 	orr.w	r3, r3, #32
 800a064:	b2da      	uxtb	r2, r3
 800a066:	4b66      	ldr	r3, [pc, #408]	; (800a200 <tcp_receive+0xcfc>)
 800a068:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	7d1b      	ldrb	r3, [r3, #20]
 800a06e:	2b04      	cmp	r3, #4
 800a070:	d102      	bne.n	800a078 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2207      	movs	r2, #7
 800a076:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a080:	68b8      	ldr	r0, [r7, #8]
 800a082:	f7fd fbd2 	bl	800782a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d008      	beq.n	800a0a0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	685a      	ldr	r2, [r3, #4]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a09a:	429a      	cmp	r2, r3
 800a09c:	f43f af43 	beq.w	8009f26 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	8b5b      	ldrh	r3, [r3, #26]
 800a0a4:	f003 0301 	and.w	r3, r3, #1
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00e      	beq.n	800a0ca <tcp_receive+0xbc6>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	8b5b      	ldrh	r3, [r3, #26]
 800a0b0:	f023 0301 	bic.w	r3, r3, #1
 800a0b4:	b29a      	uxth	r2, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	835a      	strh	r2, [r3, #26]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	8b5b      	ldrh	r3, [r3, #26]
 800a0be:	f043 0302 	orr.w	r3, r3, #2
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a0c8:	e188      	b.n	800a3dc <tcp_receive+0xed8>
        tcp_ack(pcb);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	8b5b      	ldrh	r3, [r3, #26]
 800a0ce:	f043 0301 	orr.w	r3, r3, #1
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a0d8:	e180      	b.n	800a3dc <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d106      	bne.n	800a0f0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a0e2:	4848      	ldr	r0, [pc, #288]	; (800a204 <tcp_receive+0xd00>)
 800a0e4:	f7fd fbba 	bl	800785c <tcp_seg_copy>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	675a      	str	r2, [r3, #116]	; 0x74
 800a0ee:	e16d      	b.n	800a3cc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0fa:	e157      	b.n	800a3ac <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800a0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	4b41      	ldr	r3, [pc, #260]	; (800a208 <tcp_receive+0xd04>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	429a      	cmp	r2, r3
 800a108:	d11d      	bne.n	800a146 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a10a:	4b3e      	ldr	r3, [pc, #248]	; (800a204 <tcp_receive+0xd00>)
 800a10c:	891a      	ldrh	r2, [r3, #8]
 800a10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a110:	891b      	ldrh	r3, [r3, #8]
 800a112:	429a      	cmp	r2, r3
 800a114:	f240 814f 	bls.w	800a3b6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a118:	483a      	ldr	r0, [pc, #232]	; (800a204 <tcp_receive+0xd00>)
 800a11a:	f7fd fb9f 	bl	800785c <tcp_seg_copy>
 800a11e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	2b00      	cmp	r3, #0
 800a124:	f000 8149 	beq.w	800a3ba <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800a128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d003      	beq.n	800a136 <tcp_receive+0xc32>
                    prev->next = cseg;
 800a12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a130:	697a      	ldr	r2, [r7, #20]
 800a132:	601a      	str	r2, [r3, #0]
 800a134:	e002      	b.n	800a13c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	697a      	ldr	r2, [r7, #20]
 800a13a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a13c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a13e:	6978      	ldr	r0, [r7, #20]
 800a140:	f7ff f8dc 	bl	80092fc <tcp_oos_insert_segment>
                }
                break;
 800a144:	e139      	b.n	800a3ba <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d117      	bne.n	800a17c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a14c:	4b2e      	ldr	r3, [pc, #184]	; (800a208 <tcp_receive+0xd04>)
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	2b00      	cmp	r3, #0
 800a15a:	da57      	bge.n	800a20c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a15c:	4829      	ldr	r0, [pc, #164]	; (800a204 <tcp_receive+0xd00>)
 800a15e:	f7fd fb7d 	bl	800785c <tcp_seg_copy>
 800a162:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	2b00      	cmp	r3, #0
 800a168:	f000 8129 	beq.w	800a3be <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	69ba      	ldr	r2, [r7, #24]
 800a170:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a172:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a174:	69b8      	ldr	r0, [r7, #24]
 800a176:	f7ff f8c1 	bl	80092fc <tcp_oos_insert_segment>
                  }
                  break;
 800a17a:	e120      	b.n	800a3be <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a17c:	4b22      	ldr	r3, [pc, #136]	; (800a208 <tcp_receive+0xd04>)
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	3b01      	subs	r3, #1
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	db3e      	blt.n	800a20c <tcp_receive+0xd08>
 800a18e:	4b1e      	ldr	r3, [pc, #120]	; (800a208 <tcp_receive+0xd04>)
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	1ad3      	subs	r3, r2, r3
 800a19a:	3301      	adds	r3, #1
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	dc35      	bgt.n	800a20c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a1a0:	4818      	ldr	r0, [pc, #96]	; (800a204 <tcp_receive+0xd00>)
 800a1a2:	f7fd fb5b 	bl	800785c <tcp_seg_copy>
 800a1a6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f000 8109 	beq.w	800a3c2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1b8:	8912      	ldrh	r2, [r2, #8]
 800a1ba:	441a      	add	r2, r3
 800a1bc:	4b12      	ldr	r3, [pc, #72]	; (800a208 <tcp_receive+0xd04>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	1ad3      	subs	r3, r2, r3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	dd12      	ble.n	800a1ec <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a1c6:	4b10      	ldr	r3, [pc, #64]	; (800a208 <tcp_receive+0xd04>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	1ad3      	subs	r3, r2, r3
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1da:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e2:	891b      	ldrh	r3, [r3, #8]
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	4610      	mov	r0, r2
 800a1e8:	f7fb fc6e 	bl	8005ac8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ee:	69fa      	ldr	r2, [r7, #28]
 800a1f0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a1f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a1f4:	69f8      	ldr	r0, [r7, #28]
 800a1f6:	f7ff f881 	bl	80092fc <tcp_oos_insert_segment>
                  }
                  break;
 800a1fa:	e0e2      	b.n	800a3c2 <tcp_receive+0xebe>
 800a1fc:	20008370 	.word	0x20008370
 800a200:	2000836d 	.word	0x2000836d
 800a204:	20008340 	.word	0x20008340
 800a208:	20008360 	.word	0x20008360
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	f040 80c6 	bne.w	800a3a6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a21a:	4b80      	ldr	r3, [pc, #512]	; (800a41c <tcp_receive+0xf18>)
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a226:	2b00      	cmp	r3, #0
 800a228:	f340 80bd 	ble.w	800a3a6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	899b      	ldrh	r3, [r3, #12]
 800a232:	b29b      	uxth	r3, r3
 800a234:	4618      	mov	r0, r3
 800a236:	f7fa f9fd 	bl	8004634 <lwip_htons>
 800a23a:	4603      	mov	r3, r0
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	f003 0301 	and.w	r3, r3, #1
 800a242:	2b00      	cmp	r3, #0
 800a244:	f040 80bf 	bne.w	800a3c6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a248:	4875      	ldr	r0, [pc, #468]	; (800a420 <tcp_receive+0xf1c>)
 800a24a:	f7fd fb07 	bl	800785c <tcp_seg_copy>
 800a24e:	4602      	mov	r2, r0
 800a250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a252:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 80b6 	beq.w	800a3ca <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a266:	8912      	ldrh	r2, [r2, #8]
 800a268:	441a      	add	r2, r3
 800a26a:	4b6c      	ldr	r3, [pc, #432]	; (800a41c <tcp_receive+0xf18>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	1ad3      	subs	r3, r2, r3
 800a270:	2b00      	cmp	r3, #0
 800a272:	dd12      	ble.n	800a29a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a274:	4b69      	ldr	r3, [pc, #420]	; (800a41c <tcp_receive+0xf18>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	b29a      	uxth	r2, r3
 800a27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	b29b      	uxth	r3, r3
 800a282:	1ad3      	subs	r3, r2, r3
 800a284:	b29a      	uxth	r2, r3
 800a286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a288:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28c:	685a      	ldr	r2, [r3, #4]
 800a28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a290:	891b      	ldrh	r3, [r3, #8]
 800a292:	4619      	mov	r1, r3
 800a294:	4610      	mov	r0, r2
 800a296:	f7fb fc17 	bl	8005ac8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a29a:	4b62      	ldr	r3, [pc, #392]	; (800a424 <tcp_receive+0xf20>)
 800a29c:	881b      	ldrh	r3, [r3, #0]
 800a29e:	461a      	mov	r2, r3
 800a2a0:	4b5e      	ldr	r3, [pc, #376]	; (800a41c <tcp_receive+0xf18>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	441a      	add	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2aa:	6879      	ldr	r1, [r7, #4]
 800a2ac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a2ae:	440b      	add	r3, r1
 800a2b0:	1ad3      	subs	r3, r2, r3
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f340 8089 	ble.w	800a3ca <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	899b      	ldrh	r3, [r3, #12]
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fa f9b6 	bl	8004634 <lwip_htons>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	f003 0301 	and.w	r3, r3, #1
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d022      	beq.n	800a31a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	899b      	ldrh	r3, [r3, #12]
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	b21b      	sxth	r3, r3
 800a2e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a2e4:	b21c      	sxth	r4, r3
 800a2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	899b      	ldrh	r3, [r3, #12]
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7fa f99f 	bl	8004634 <lwip_htons>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a300:	b29b      	uxth	r3, r3
 800a302:	4618      	mov	r0, r3
 800a304:	f7fa f996 	bl	8004634 <lwip_htons>
 800a308:	4603      	mov	r3, r0
 800a30a:	b21b      	sxth	r3, r3
 800a30c:	4323      	orrs	r3, r4
 800a30e:	b21a      	sxth	r2, r3
 800a310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	b292      	uxth	r2, r2
 800a318:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31e:	b29a      	uxth	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a324:	4413      	add	r3, r2
 800a326:	b299      	uxth	r1, r3
 800a328:	4b3c      	ldr	r3, [pc, #240]	; (800a41c <tcp_receive+0xf18>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	1a8a      	subs	r2, r1, r2
 800a334:	b292      	uxth	r2, r2
 800a336:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	685a      	ldr	r2, [r3, #4]
 800a33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	891b      	ldrh	r3, [r3, #8]
 800a344:	4619      	mov	r1, r3
 800a346:	4610      	mov	r0, r2
 800a348:	f7fb fbbe 	bl	8005ac8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	891c      	ldrh	r4, [r3, #8]
 800a352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	899b      	ldrh	r3, [r3, #12]
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7fa f969 	bl	8004634 <lwip_htons>
 800a362:	4603      	mov	r3, r0
 800a364:	b2db      	uxtb	r3, r3
 800a366:	f003 0303 	and.w	r3, r3, #3
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d001      	beq.n	800a372 <tcp_receive+0xe6e>
 800a36e:	2301      	movs	r3, #1
 800a370:	e000      	b.n	800a374 <tcp_receive+0xe70>
 800a372:	2300      	movs	r3, #0
 800a374:	4423      	add	r3, r4
 800a376:	b29a      	uxth	r2, r3
 800a378:	4b2a      	ldr	r3, [pc, #168]	; (800a424 <tcp_receive+0xf20>)
 800a37a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a37c:	4b29      	ldr	r3, [pc, #164]	; (800a424 <tcp_receive+0xf20>)
 800a37e:	881b      	ldrh	r3, [r3, #0]
 800a380:	461a      	mov	r2, r3
 800a382:	4b26      	ldr	r3, [pc, #152]	; (800a41c <tcp_receive+0xf18>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	441a      	add	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38c:	6879      	ldr	r1, [r7, #4]
 800a38e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a390:	440b      	add	r3, r1
 800a392:	429a      	cmp	r2, r3
 800a394:	d019      	beq.n	800a3ca <tcp_receive+0xec6>
 800a396:	4b24      	ldr	r3, [pc, #144]	; (800a428 <tcp_receive+0xf24>)
 800a398:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a39c:	4923      	ldr	r1, [pc, #140]	; (800a42c <tcp_receive+0xf28>)
 800a39e:	4824      	ldr	r0, [pc, #144]	; (800a430 <tcp_receive+0xf2c>)
 800a3a0:	f004 fc9e 	bl	800ece0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a3a4:	e011      	b.n	800a3ca <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f47f aea4 	bne.w	800a0fc <tcp_receive+0xbf8>
 800a3b4:	e00a      	b.n	800a3cc <tcp_receive+0xec8>
                break;
 800a3b6:	bf00      	nop
 800a3b8:	e008      	b.n	800a3cc <tcp_receive+0xec8>
                break;
 800a3ba:	bf00      	nop
 800a3bc:	e006      	b.n	800a3cc <tcp_receive+0xec8>
                  break;
 800a3be:	bf00      	nop
 800a3c0:	e004      	b.n	800a3cc <tcp_receive+0xec8>
                  break;
 800a3c2:	bf00      	nop
 800a3c4:	e002      	b.n	800a3cc <tcp_receive+0xec8>
                  break;
 800a3c6:	bf00      	nop
 800a3c8:	e000      	b.n	800a3cc <tcp_receive+0xec8>
                break;
 800a3ca:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f001 fa33 	bl	800b838 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a3d2:	e003      	b.n	800a3dc <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f001 fa2f 	bl	800b838 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a3da:	e01a      	b.n	800a412 <tcp_receive+0xf0e>
 800a3dc:	e019      	b.n	800a412 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a3de:	4b0f      	ldr	r3, [pc, #60]	; (800a41c <tcp_receive+0xf18>)
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	db0a      	blt.n	800a402 <tcp_receive+0xefe>
 800a3ec:	4b0b      	ldr	r3, [pc, #44]	; (800a41c <tcp_receive+0xf18>)
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	6879      	ldr	r1, [r7, #4]
 800a3f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a3f8:	440b      	add	r3, r1
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	dd07      	ble.n	800a412 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	8b5b      	ldrh	r3, [r3, #26]
 800a406:	f043 0302 	orr.w	r3, r3, #2
 800a40a:	b29a      	uxth	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a410:	e7ff      	b.n	800a412 <tcp_receive+0xf0e>
 800a412:	bf00      	nop
 800a414:	3750      	adds	r7, #80	; 0x50
 800a416:	46bd      	mov	sp, r7
 800a418:	bdb0      	pop	{r4, r5, r7, pc}
 800a41a:	bf00      	nop
 800a41c:	20008360 	.word	0x20008360
 800a420:	20008340 	.word	0x20008340
 800a424:	2000836a 	.word	0x2000836a
 800a428:	08011490 	.word	0x08011490
 800a42c:	08011838 	.word	0x08011838
 800a430:	080114dc 	.word	0x080114dc

0800a434 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a43a:	4b15      	ldr	r3, [pc, #84]	; (800a490 <tcp_get_next_optbyte+0x5c>)
 800a43c:	881b      	ldrh	r3, [r3, #0]
 800a43e:	1c5a      	adds	r2, r3, #1
 800a440:	b291      	uxth	r1, r2
 800a442:	4a13      	ldr	r2, [pc, #76]	; (800a490 <tcp_get_next_optbyte+0x5c>)
 800a444:	8011      	strh	r1, [r2, #0]
 800a446:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a448:	4b12      	ldr	r3, [pc, #72]	; (800a494 <tcp_get_next_optbyte+0x60>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d004      	beq.n	800a45a <tcp_get_next_optbyte+0x26>
 800a450:	4b11      	ldr	r3, [pc, #68]	; (800a498 <tcp_get_next_optbyte+0x64>)
 800a452:	881b      	ldrh	r3, [r3, #0]
 800a454:	88fa      	ldrh	r2, [r7, #6]
 800a456:	429a      	cmp	r2, r3
 800a458:	d208      	bcs.n	800a46c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a45a:	4b10      	ldr	r3, [pc, #64]	; (800a49c <tcp_get_next_optbyte+0x68>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	3314      	adds	r3, #20
 800a460:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a462:	88fb      	ldrh	r3, [r7, #6]
 800a464:	683a      	ldr	r2, [r7, #0]
 800a466:	4413      	add	r3, r2
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	e00b      	b.n	800a484 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a46c:	88fb      	ldrh	r3, [r7, #6]
 800a46e:	b2da      	uxtb	r2, r3
 800a470:	4b09      	ldr	r3, [pc, #36]	; (800a498 <tcp_get_next_optbyte+0x64>)
 800a472:	881b      	ldrh	r3, [r3, #0]
 800a474:	b2db      	uxtb	r3, r3
 800a476:	1ad3      	subs	r3, r2, r3
 800a478:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a47a:	4b06      	ldr	r3, [pc, #24]	; (800a494 <tcp_get_next_optbyte+0x60>)
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	797b      	ldrb	r3, [r7, #5]
 800a480:	4413      	add	r3, r2
 800a482:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a484:	4618      	mov	r0, r3
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr
 800a490:	2000835c 	.word	0x2000835c
 800a494:	20008358 	.word	0x20008358
 800a498:	20008356 	.word	0x20008356
 800a49c:	20008350 	.word	0x20008350

0800a4a0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d106      	bne.n	800a4bc <tcp_parseopt+0x1c>
 800a4ae:	4b32      	ldr	r3, [pc, #200]	; (800a578 <tcp_parseopt+0xd8>)
 800a4b0:	f240 727d 	movw	r2, #1917	; 0x77d
 800a4b4:	4931      	ldr	r1, [pc, #196]	; (800a57c <tcp_parseopt+0xdc>)
 800a4b6:	4832      	ldr	r0, [pc, #200]	; (800a580 <tcp_parseopt+0xe0>)
 800a4b8:	f004 fc12 	bl	800ece0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a4bc:	4b31      	ldr	r3, [pc, #196]	; (800a584 <tcp_parseopt+0xe4>)
 800a4be:	881b      	ldrh	r3, [r3, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d055      	beq.n	800a570 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a4c4:	4b30      	ldr	r3, [pc, #192]	; (800a588 <tcp_parseopt+0xe8>)
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	801a      	strh	r2, [r3, #0]
 800a4ca:	e045      	b.n	800a558 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a4cc:	f7ff ffb2 	bl	800a434 <tcp_get_next_optbyte>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	d006      	beq.n	800a4e8 <tcp_parseopt+0x48>
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	dc2b      	bgt.n	800a536 <tcp_parseopt+0x96>
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d041      	beq.n	800a566 <tcp_parseopt+0xc6>
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d127      	bne.n	800a536 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a4e6:	e037      	b.n	800a558 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a4e8:	f7ff ffa4 	bl	800a434 <tcp_get_next_optbyte>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b04      	cmp	r3, #4
 800a4f0:	d13b      	bne.n	800a56a <tcp_parseopt+0xca>
 800a4f2:	4b25      	ldr	r3, [pc, #148]	; (800a588 <tcp_parseopt+0xe8>)
 800a4f4:	881b      	ldrh	r3, [r3, #0]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	4a22      	ldr	r2, [pc, #136]	; (800a584 <tcp_parseopt+0xe4>)
 800a4fa:	8812      	ldrh	r2, [r2, #0]
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	da34      	bge.n	800a56a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a500:	f7ff ff98 	bl	800a434 <tcp_get_next_optbyte>
 800a504:	4603      	mov	r3, r0
 800a506:	b29b      	uxth	r3, r3
 800a508:	021b      	lsls	r3, r3, #8
 800a50a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a50c:	f7ff ff92 	bl	800a434 <tcp_get_next_optbyte>
 800a510:	4603      	mov	r3, r0
 800a512:	b29a      	uxth	r2, r3
 800a514:	89bb      	ldrh	r3, [r7, #12]
 800a516:	4313      	orrs	r3, r2
 800a518:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a51a:	89bb      	ldrh	r3, [r7, #12]
 800a51c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a520:	d804      	bhi.n	800a52c <tcp_parseopt+0x8c>
 800a522:	89bb      	ldrh	r3, [r7, #12]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <tcp_parseopt+0x8c>
 800a528:	89ba      	ldrh	r2, [r7, #12]
 800a52a:	e001      	b.n	800a530 <tcp_parseopt+0x90>
 800a52c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a534:	e010      	b.n	800a558 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a536:	f7ff ff7d 	bl	800a434 <tcp_get_next_optbyte>
 800a53a:	4603      	mov	r3, r0
 800a53c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a53e:	7afb      	ldrb	r3, [r7, #11]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d914      	bls.n	800a56e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a544:	7afb      	ldrb	r3, [r7, #11]
 800a546:	b29a      	uxth	r2, r3
 800a548:	4b0f      	ldr	r3, [pc, #60]	; (800a588 <tcp_parseopt+0xe8>)
 800a54a:	881b      	ldrh	r3, [r3, #0]
 800a54c:	4413      	add	r3, r2
 800a54e:	b29b      	uxth	r3, r3
 800a550:	3b02      	subs	r3, #2
 800a552:	b29a      	uxth	r2, r3
 800a554:	4b0c      	ldr	r3, [pc, #48]	; (800a588 <tcp_parseopt+0xe8>)
 800a556:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a558:	4b0b      	ldr	r3, [pc, #44]	; (800a588 <tcp_parseopt+0xe8>)
 800a55a:	881a      	ldrh	r2, [r3, #0]
 800a55c:	4b09      	ldr	r3, [pc, #36]	; (800a584 <tcp_parseopt+0xe4>)
 800a55e:	881b      	ldrh	r3, [r3, #0]
 800a560:	429a      	cmp	r2, r3
 800a562:	d3b3      	bcc.n	800a4cc <tcp_parseopt+0x2c>
 800a564:	e004      	b.n	800a570 <tcp_parseopt+0xd0>
          return;
 800a566:	bf00      	nop
 800a568:	e002      	b.n	800a570 <tcp_parseopt+0xd0>
            return;
 800a56a:	bf00      	nop
 800a56c:	e000      	b.n	800a570 <tcp_parseopt+0xd0>
            return;
 800a56e:	bf00      	nop
      }
    }
  }
}
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	08011490 	.word	0x08011490
 800a57c:	080118f4 	.word	0x080118f4
 800a580:	080114dc 	.word	0x080114dc
 800a584:	20008354 	.word	0x20008354
 800a588:	2000835c 	.word	0x2000835c

0800a58c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a58c:	b480      	push	{r7}
 800a58e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a590:	4b05      	ldr	r3, [pc, #20]	; (800a5a8 <tcp_trigger_input_pcb_close+0x1c>)
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	f043 0310 	orr.w	r3, r3, #16
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	4b03      	ldr	r3, [pc, #12]	; (800a5a8 <tcp_trigger_input_pcb_close+0x1c>)
 800a59c:	701a      	strb	r2, [r3, #0]
}
 800a59e:	bf00      	nop
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr
 800a5a8:	2000836d 	.word	0x2000836d

0800a5ac <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00a      	beq.n	800a5d4 <tcp_route+0x28>
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	7a1b      	ldrb	r3, [r3, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d006      	beq.n	800a5d4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	7a1b      	ldrb	r3, [r3, #8]
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fb f8a2 	bl	8005714 <netif_get_by_index>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	e003      	b.n	800a5dc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f003 f927 	bl	800d828 <ip4_route>
 800a5da:	4603      	mov	r3, r0
  }
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a5e4:	b590      	push	{r4, r7, lr}
 800a5e6:	b087      	sub	sp, #28
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	603b      	str	r3, [r7, #0]
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d105      	bne.n	800a606 <tcp_create_segment+0x22>
 800a5fa:	4b44      	ldr	r3, [pc, #272]	; (800a70c <tcp_create_segment+0x128>)
 800a5fc:	22a3      	movs	r2, #163	; 0xa3
 800a5fe:	4944      	ldr	r1, [pc, #272]	; (800a710 <tcp_create_segment+0x12c>)
 800a600:	4844      	ldr	r0, [pc, #272]	; (800a714 <tcp_create_segment+0x130>)
 800a602:	f004 fb6d 	bl	800ece0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d105      	bne.n	800a618 <tcp_create_segment+0x34>
 800a60c:	4b3f      	ldr	r3, [pc, #252]	; (800a70c <tcp_create_segment+0x128>)
 800a60e:	22a4      	movs	r2, #164	; 0xa4
 800a610:	4941      	ldr	r1, [pc, #260]	; (800a718 <tcp_create_segment+0x134>)
 800a612:	4840      	ldr	r0, [pc, #256]	; (800a714 <tcp_create_segment+0x130>)
 800a614:	f004 fb64 	bl	800ece0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a618:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	f003 0304 	and.w	r3, r3, #4
 800a624:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a626:	2004      	movs	r0, #4
 800a628:	f7fa fcea 	bl	8005000 <memp_malloc>
 800a62c:	6138      	str	r0, [r7, #16]
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d104      	bne.n	800a63e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a634:	68b8      	ldr	r0, [r7, #8]
 800a636:	f7fb fbcd 	bl	8005dd4 <pbuf_free>
    return NULL;
 800a63a:	2300      	movs	r3, #0
 800a63c:	e061      	b.n	800a702 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a644:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	2200      	movs	r2, #0
 800a64a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	68ba      	ldr	r2, [r7, #8]
 800a650:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	891a      	ldrh	r2, [r3, #8]
 800a656:	7dfb      	ldrb	r3, [r7, #23]
 800a658:	b29b      	uxth	r3, r3
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d205      	bcs.n	800a66a <tcp_create_segment+0x86>
 800a65e:	4b2b      	ldr	r3, [pc, #172]	; (800a70c <tcp_create_segment+0x128>)
 800a660:	22b0      	movs	r2, #176	; 0xb0
 800a662:	492e      	ldr	r1, [pc, #184]	; (800a71c <tcp_create_segment+0x138>)
 800a664:	482b      	ldr	r0, [pc, #172]	; (800a714 <tcp_create_segment+0x130>)
 800a666:	f004 fb3b 	bl	800ece0 <iprintf>
  seg->len = p->tot_len - optlen;
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	891a      	ldrh	r2, [r3, #8]
 800a66e:	7dfb      	ldrb	r3, [r7, #23]
 800a670:	b29b      	uxth	r3, r3
 800a672:	1ad3      	subs	r3, r2, r3
 800a674:	b29a      	uxth	r2, r3
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a67a:	2114      	movs	r1, #20
 800a67c:	68b8      	ldr	r0, [r7, #8]
 800a67e:	f7fb fb13 	bl	8005ca8 <pbuf_add_header>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d004      	beq.n	800a692 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a688:	6938      	ldr	r0, [r7, #16]
 800a68a:	f7fd f8ce 	bl	800782a <tcp_seg_free>
    return NULL;
 800a68e:	2300      	movs	r3, #0
 800a690:	e037      	b.n	800a702 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	8ada      	ldrh	r2, [r3, #22]
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	68dc      	ldr	r4, [r3, #12]
 800a6a4:	4610      	mov	r0, r2
 800a6a6:	f7f9 ffc5 	bl	8004634 <lwip_htons>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	8b1a      	ldrh	r2, [r3, #24]
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	68dc      	ldr	r4, [r3, #12]
 800a6b6:	4610      	mov	r0, r2
 800a6b8:	f7f9 ffbc 	bl	8004634 <lwip_htons>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	68dc      	ldr	r4, [r3, #12]
 800a6c4:	6838      	ldr	r0, [r7, #0]
 800a6c6:	f7f9 ffca 	bl	800465e <lwip_htonl>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a6ce:	7dfb      	ldrb	r3, [r7, #23]
 800a6d0:	089b      	lsrs	r3, r3, #2
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	3305      	adds	r3, #5
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	031b      	lsls	r3, r3, #12
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	79fb      	ldrb	r3, [r7, #7]
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	68dc      	ldr	r4, [r3, #12]
 800a6ea:	4610      	mov	r0, r2
 800a6ec:	f7f9 ffa2 	bl	8004634 <lwip_htons>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	749a      	strb	r2, [r3, #18]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	74da      	strb	r2, [r3, #19]
  return seg;
 800a700:	693b      	ldr	r3, [r7, #16]
}
 800a702:	4618      	mov	r0, r3
 800a704:	371c      	adds	r7, #28
 800a706:	46bd      	mov	sp, r7
 800a708:	bd90      	pop	{r4, r7, pc}
 800a70a:	bf00      	nop
 800a70c:	08011910 	.word	0x08011910
 800a710:	08011944 	.word	0x08011944
 800a714:	08011964 	.word	0x08011964
 800a718:	0801198c 	.word	0x0801198c
 800a71c:	080119b0 	.word	0x080119b0

0800a720 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a720:	b590      	push	{r4, r7, lr}
 800a722:	b08b      	sub	sp, #44	; 0x2c
 800a724:	af02      	add	r7, sp, #8
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	460b      	mov	r3, r1
 800a72a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a72c:	2300      	movs	r3, #0
 800a72e:	61fb      	str	r3, [r7, #28]
 800a730:	2300      	movs	r3, #0
 800a732:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a734:	2300      	movs	r3, #0
 800a736:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d106      	bne.n	800a74c <tcp_split_unsent_seg+0x2c>
 800a73e:	4b95      	ldr	r3, [pc, #596]	; (800a994 <tcp_split_unsent_seg+0x274>)
 800a740:	f240 324b 	movw	r2, #843	; 0x34b
 800a744:	4994      	ldr	r1, [pc, #592]	; (800a998 <tcp_split_unsent_seg+0x278>)
 800a746:	4895      	ldr	r0, [pc, #596]	; (800a99c <tcp_split_unsent_seg+0x27c>)
 800a748:	f004 faca 	bl	800ece0 <iprintf>

  useg = pcb->unsent;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a750:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d102      	bne.n	800a75e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a758:	f04f 33ff 	mov.w	r3, #4294967295
 800a75c:	e116      	b.n	800a98c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a75e:	887b      	ldrh	r3, [r7, #2]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d109      	bne.n	800a778 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a764:	4b8b      	ldr	r3, [pc, #556]	; (800a994 <tcp_split_unsent_seg+0x274>)
 800a766:	f240 3253 	movw	r2, #851	; 0x353
 800a76a:	498d      	ldr	r1, [pc, #564]	; (800a9a0 <tcp_split_unsent_seg+0x280>)
 800a76c:	488b      	ldr	r0, [pc, #556]	; (800a99c <tcp_split_unsent_seg+0x27c>)
 800a76e:	f004 fab7 	bl	800ece0 <iprintf>
    return ERR_VAL;
 800a772:	f06f 0305 	mvn.w	r3, #5
 800a776:	e109      	b.n	800a98c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	891b      	ldrh	r3, [r3, #8]
 800a77c:	887a      	ldrh	r2, [r7, #2]
 800a77e:	429a      	cmp	r2, r3
 800a780:	d301      	bcc.n	800a786 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a782:	2300      	movs	r3, #0
 800a784:	e102      	b.n	800a98c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a78a:	887a      	ldrh	r2, [r7, #2]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d906      	bls.n	800a79e <tcp_split_unsent_seg+0x7e>
 800a790:	4b80      	ldr	r3, [pc, #512]	; (800a994 <tcp_split_unsent_seg+0x274>)
 800a792:	f240 325b 	movw	r2, #859	; 0x35b
 800a796:	4983      	ldr	r1, [pc, #524]	; (800a9a4 <tcp_split_unsent_seg+0x284>)
 800a798:	4880      	ldr	r0, [pc, #512]	; (800a99c <tcp_split_unsent_seg+0x27c>)
 800a79a:	f004 faa1 	bl	800ece0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	891b      	ldrh	r3, [r3, #8]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d106      	bne.n	800a7b4 <tcp_split_unsent_seg+0x94>
 800a7a6:	4b7b      	ldr	r3, [pc, #492]	; (800a994 <tcp_split_unsent_seg+0x274>)
 800a7a8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a7ac:	497e      	ldr	r1, [pc, #504]	; (800a9a8 <tcp_split_unsent_seg+0x288>)
 800a7ae:	487b      	ldr	r0, [pc, #492]	; (800a99c <tcp_split_unsent_seg+0x27c>)
 800a7b0:	f004 fa96 	bl	800ece0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	7a9b      	ldrb	r3, [r3, #10]
 800a7b8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a7ba:	7bfb      	ldrb	r3, [r7, #15]
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	f003 0304 	and.w	r3, r3, #4
 800a7c4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	891a      	ldrh	r2, [r3, #8]
 800a7ca:	887b      	ldrh	r3, [r7, #2]
 800a7cc:	1ad3      	subs	r3, r2, r3
 800a7ce:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a7d0:	7bbb      	ldrb	r3, [r7, #14]
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	89bb      	ldrh	r3, [r7, #12]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a7de:	4619      	mov	r1, r3
 800a7e0:	2036      	movs	r0, #54	; 0x36
 800a7e2:	f7fb f813 	bl	800580c <pbuf_alloc>
 800a7e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f000 80b7 	beq.w	800a95e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	891a      	ldrh	r2, [r3, #8]
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	891b      	ldrh	r3, [r3, #8]
 800a7fa:	1ad3      	subs	r3, r2, r3
 800a7fc:	b29a      	uxth	r2, r3
 800a7fe:	887b      	ldrh	r3, [r7, #2]
 800a800:	4413      	add	r3, r2
 800a802:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	6858      	ldr	r0, [r3, #4]
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	685a      	ldr	r2, [r3, #4]
 800a80c:	7bbb      	ldrb	r3, [r7, #14]
 800a80e:	18d1      	adds	r1, r2, r3
 800a810:	897b      	ldrh	r3, [r7, #10]
 800a812:	89ba      	ldrh	r2, [r7, #12]
 800a814:	f7fb fcd8 	bl	80061c8 <pbuf_copy_partial>
 800a818:	4603      	mov	r3, r0
 800a81a:	461a      	mov	r2, r3
 800a81c:	89bb      	ldrh	r3, [r7, #12]
 800a81e:	4293      	cmp	r3, r2
 800a820:	f040 809f 	bne.w	800a962 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	899b      	ldrh	r3, [r3, #12]
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7f9 ff01 	bl	8004634 <lwip_htons>
 800a832:	4603      	mov	r3, r0
 800a834:	b2db      	uxtb	r3, r3
 800a836:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a83a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a83c:	2300      	movs	r3, #0
 800a83e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a840:	7efb      	ldrb	r3, [r7, #27]
 800a842:	f003 0308 	and.w	r3, r3, #8
 800a846:	2b00      	cmp	r3, #0
 800a848:	d007      	beq.n	800a85a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a84a:	7efb      	ldrb	r3, [r7, #27]
 800a84c:	f023 0308 	bic.w	r3, r3, #8
 800a850:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a852:	7ebb      	ldrb	r3, [r7, #26]
 800a854:	f043 0308 	orr.w	r3, r3, #8
 800a858:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a85a:	7efb      	ldrb	r3, [r7, #27]
 800a85c:	f003 0301 	and.w	r3, r3, #1
 800a860:	2b00      	cmp	r3, #0
 800a862:	d007      	beq.n	800a874 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a864:	7efb      	ldrb	r3, [r7, #27]
 800a866:	f023 0301 	bic.w	r3, r3, #1
 800a86a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a86c:	7ebb      	ldrb	r3, [r7, #26]
 800a86e:	f043 0301 	orr.w	r3, r3, #1
 800a872:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7f9 feef 	bl	800465e <lwip_htonl>
 800a880:	4602      	mov	r2, r0
 800a882:	887b      	ldrh	r3, [r7, #2]
 800a884:	18d1      	adds	r1, r2, r3
 800a886:	7eba      	ldrb	r2, [r7, #26]
 800a888:	7bfb      	ldrb	r3, [r7, #15]
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	460b      	mov	r3, r1
 800a88e:	6939      	ldr	r1, [r7, #16]
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7ff fea7 	bl	800a5e4 <tcp_create_segment>
 800a896:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d063      	beq.n	800a966 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fb fb1e 	bl	8005ee4 <pbuf_clen>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a8b2:	1a9b      	subs	r3, r3, r2
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	6858      	ldr	r0, [r3, #4]
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	891a      	ldrh	r2, [r3, #8]
 800a8c6:	89bb      	ldrh	r3, [r7, #12]
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	f7fb f8fb 	bl	8005ac8 <pbuf_realloc>
  useg->len -= remainder;
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	891a      	ldrh	r2, [r3, #8]
 800a8d6:	89bb      	ldrh	r3, [r7, #12]
 800a8d8:	1ad3      	subs	r3, r2, r3
 800a8da:	b29a      	uxth	r2, r3
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	899b      	ldrh	r3, [r3, #12]
 800a8e6:	b29c      	uxth	r4, r3
 800a8e8:	7efb      	ldrb	r3, [r7, #27]
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7f9 fea1 	bl	8004634 <lwip_htons>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	4322      	orrs	r2, r4
 800a8fc:	b292      	uxth	r2, r2
 800a8fe:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	4618      	mov	r0, r3
 800a906:	f7fb faed 	bl	8005ee4 <pbuf_clen>
 800a90a:	4603      	mov	r3, r0
 800a90c:	461a      	mov	r2, r3
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a914:	4413      	add	r3, r2
 800a916:	b29a      	uxth	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	4618      	mov	r0, r3
 800a924:	f7fb fade 	bl	8005ee4 <pbuf_clen>
 800a928:	4603      	mov	r3, r0
 800a92a:	461a      	mov	r2, r3
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a932:	4413      	add	r3, r2
 800a934:	b29a      	uxth	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	69fa      	ldr	r2, [r7, #28]
 800a948:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d103      	bne.n	800a95a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a95a:	2300      	movs	r3, #0
 800a95c:	e016      	b.n	800a98c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a95e:	bf00      	nop
 800a960:	e002      	b.n	800a968 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a962:	bf00      	nop
 800a964:	e000      	b.n	800a968 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a966:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a968:	69fb      	ldr	r3, [r7, #28]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d006      	beq.n	800a97c <tcp_split_unsent_seg+0x25c>
 800a96e:	4b09      	ldr	r3, [pc, #36]	; (800a994 <tcp_split_unsent_seg+0x274>)
 800a970:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a974:	490d      	ldr	r1, [pc, #52]	; (800a9ac <tcp_split_unsent_seg+0x28c>)
 800a976:	4809      	ldr	r0, [pc, #36]	; (800a99c <tcp_split_unsent_seg+0x27c>)
 800a978:	f004 f9b2 	bl	800ece0 <iprintf>
  if (p != NULL) {
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d002      	beq.n	800a988 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a982:	6938      	ldr	r0, [r7, #16]
 800a984:	f7fb fa26 	bl	8005dd4 <pbuf_free>
  }

  return ERR_MEM;
 800a988:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3724      	adds	r7, #36	; 0x24
 800a990:	46bd      	mov	sp, r7
 800a992:	bd90      	pop	{r4, r7, pc}
 800a994:	08011910 	.word	0x08011910
 800a998:	08011ca4 	.word	0x08011ca4
 800a99c:	08011964 	.word	0x08011964
 800a9a0:	08011cc8 	.word	0x08011cc8
 800a9a4:	08011cec 	.word	0x08011cec
 800a9a8:	08011cfc 	.word	0x08011cfc
 800a9ac:	08011d0c 	.word	0x08011d0c

0800a9b0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a9b0:	b590      	push	{r4, r7, lr}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d106      	bne.n	800a9cc <tcp_send_fin+0x1c>
 800a9be:	4b21      	ldr	r3, [pc, #132]	; (800aa44 <tcp_send_fin+0x94>)
 800a9c0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a9c4:	4920      	ldr	r1, [pc, #128]	; (800aa48 <tcp_send_fin+0x98>)
 800a9c6:	4821      	ldr	r0, [pc, #132]	; (800aa4c <tcp_send_fin+0x9c>)
 800a9c8:	f004 f98a 	bl	800ece0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d02e      	beq.n	800aa32 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9d8:	60fb      	str	r3, [r7, #12]
 800a9da:	e002      	b.n	800a9e2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d1f8      	bne.n	800a9dc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	899b      	ldrh	r3, [r3, #12]
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7f9 fe1e 	bl	8004634 <lwip_htons>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	f003 0307 	and.w	r3, r3, #7
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d116      	bne.n	800aa32 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	899b      	ldrh	r3, [r3, #12]
 800aa0a:	b29c      	uxth	r4, r3
 800aa0c:	2001      	movs	r0, #1
 800aa0e:	f7f9 fe11 	bl	8004634 <lwip_htons>
 800aa12:	4603      	mov	r3, r0
 800aa14:	461a      	mov	r2, r3
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	4322      	orrs	r2, r4
 800aa1c:	b292      	uxth	r2, r2
 800aa1e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	8b5b      	ldrh	r3, [r3, #26]
 800aa24:	f043 0320 	orr.w	r3, r3, #32
 800aa28:	b29a      	uxth	r2, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	e004      	b.n	800aa3c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800aa32:	2101      	movs	r1, #1
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 f80b 	bl	800aa50 <tcp_enqueue_flags>
 800aa3a:	4603      	mov	r3, r0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3714      	adds	r7, #20
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd90      	pop	{r4, r7, pc}
 800aa44:	08011910 	.word	0x08011910
 800aa48:	08011d18 	.word	0x08011d18
 800aa4c:	08011964 	.word	0x08011964

0800aa50 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b08a      	sub	sp, #40	; 0x28
 800aa54:	af02      	add	r7, sp, #8
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800aa60:	2300      	movs	r3, #0
 800aa62:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800aa64:	78fb      	ldrb	r3, [r7, #3]
 800aa66:	f003 0303 	and.w	r3, r3, #3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d106      	bne.n	800aa7c <tcp_enqueue_flags+0x2c>
 800aa6e:	4b67      	ldr	r3, [pc, #412]	; (800ac0c <tcp_enqueue_flags+0x1bc>)
 800aa70:	f240 4211 	movw	r2, #1041	; 0x411
 800aa74:	4966      	ldr	r1, [pc, #408]	; (800ac10 <tcp_enqueue_flags+0x1c0>)
 800aa76:	4867      	ldr	r0, [pc, #412]	; (800ac14 <tcp_enqueue_flags+0x1c4>)
 800aa78:	f004 f932 	bl	800ece0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d106      	bne.n	800aa90 <tcp_enqueue_flags+0x40>
 800aa82:	4b62      	ldr	r3, [pc, #392]	; (800ac0c <tcp_enqueue_flags+0x1bc>)
 800aa84:	f240 4213 	movw	r2, #1043	; 0x413
 800aa88:	4963      	ldr	r1, [pc, #396]	; (800ac18 <tcp_enqueue_flags+0x1c8>)
 800aa8a:	4862      	ldr	r0, [pc, #392]	; (800ac14 <tcp_enqueue_flags+0x1c4>)
 800aa8c:	f004 f928 	bl	800ece0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800aa90:	78fb      	ldrb	r3, [r7, #3]
 800aa92:	f003 0302 	and.w	r3, r3, #2
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d001      	beq.n	800aa9e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800aa9e:	7ffb      	ldrb	r3, [r7, #31]
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	f003 0304 	and.w	r3, r3, #4
 800aaa8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800aaaa:	7dfb      	ldrb	r3, [r7, #23]
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	f44f 7220 	mov.w	r2, #640	; 0x280
 800aab2:	4619      	mov	r1, r3
 800aab4:	2036      	movs	r0, #54	; 0x36
 800aab6:	f7fa fea9 	bl	800580c <pbuf_alloc>
 800aaba:	6138      	str	r0, [r7, #16]
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d109      	bne.n	800aad6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	8b5b      	ldrh	r3, [r3, #26]
 800aac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800aad0:	f04f 33ff 	mov.w	r3, #4294967295
 800aad4:	e095      	b.n	800ac02 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	895a      	ldrh	r2, [r3, #10]
 800aada:	7dfb      	ldrb	r3, [r7, #23]
 800aadc:	b29b      	uxth	r3, r3
 800aade:	429a      	cmp	r2, r3
 800aae0:	d206      	bcs.n	800aaf0 <tcp_enqueue_flags+0xa0>
 800aae2:	4b4a      	ldr	r3, [pc, #296]	; (800ac0c <tcp_enqueue_flags+0x1bc>)
 800aae4:	f240 4239 	movw	r2, #1081	; 0x439
 800aae8:	494c      	ldr	r1, [pc, #304]	; (800ac1c <tcp_enqueue_flags+0x1cc>)
 800aaea:	484a      	ldr	r0, [pc, #296]	; (800ac14 <tcp_enqueue_flags+0x1c4>)
 800aaec:	f004 f8f8 	bl	800ece0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800aaf4:	78fa      	ldrb	r2, [r7, #3]
 800aaf6:	7ffb      	ldrb	r3, [r7, #31]
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	460b      	mov	r3, r1
 800aafc:	6939      	ldr	r1, [r7, #16]
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7ff fd70 	bl	800a5e4 <tcp_create_segment>
 800ab04:	60f8      	str	r0, [r7, #12]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d109      	bne.n	800ab20 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	8b5b      	ldrh	r3, [r3, #26]
 800ab10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab14:	b29a      	uxth	r2, r3
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ab1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab1e:	e070      	b.n	800ac02 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	f003 0303 	and.w	r3, r3, #3
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d006      	beq.n	800ab3a <tcp_enqueue_flags+0xea>
 800ab2c:	4b37      	ldr	r3, [pc, #220]	; (800ac0c <tcp_enqueue_flags+0x1bc>)
 800ab2e:	f240 4242 	movw	r2, #1090	; 0x442
 800ab32:	493b      	ldr	r1, [pc, #236]	; (800ac20 <tcp_enqueue_flags+0x1d0>)
 800ab34:	4837      	ldr	r0, [pc, #220]	; (800ac14 <tcp_enqueue_flags+0x1c4>)
 800ab36:	f004 f8d3 	bl	800ece0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	891b      	ldrh	r3, [r3, #8]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d006      	beq.n	800ab50 <tcp_enqueue_flags+0x100>
 800ab42:	4b32      	ldr	r3, [pc, #200]	; (800ac0c <tcp_enqueue_flags+0x1bc>)
 800ab44:	f240 4243 	movw	r2, #1091	; 0x443
 800ab48:	4936      	ldr	r1, [pc, #216]	; (800ac24 <tcp_enqueue_flags+0x1d4>)
 800ab4a:	4832      	ldr	r0, [pc, #200]	; (800ac14 <tcp_enqueue_flags+0x1c4>)
 800ab4c:	f004 f8c8 	bl	800ece0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d103      	bne.n	800ab60 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	66da      	str	r2, [r3, #108]	; 0x6c
 800ab5e:	e00d      	b.n	800ab7c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab64:	61bb      	str	r3, [r7, #24]
 800ab66:	e002      	b.n	800ab6e <tcp_enqueue_flags+0x11e>
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	61bb      	str	r3, [r7, #24]
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1f8      	bne.n	800ab68 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ab84:	78fb      	ldrb	r3, [r7, #3]
 800ab86:	f003 0302 	and.w	r3, r3, #2
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d104      	bne.n	800ab98 <tcp_enqueue_flags+0x148>
 800ab8e:	78fb      	ldrb	r3, [r7, #3]
 800ab90:	f003 0301 	and.w	r3, r3, #1
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d004      	beq.n	800aba2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab9c:	1c5a      	adds	r2, r3, #1
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800aba2:	78fb      	ldrb	r3, [r7, #3]
 800aba4:	f003 0301 	and.w	r3, r3, #1
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d006      	beq.n	800abba <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	8b5b      	ldrh	r3, [r3, #26]
 800abb0:	f043 0320 	orr.w	r3, r3, #32
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fb f990 	bl	8005ee4 <pbuf_clen>
 800abc4:	4603      	mov	r3, r0
 800abc6:	461a      	mov	r2, r3
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800abce:	4413      	add	r3, r2
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00e      	beq.n	800ac00 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d10a      	bne.n	800ac00 <tcp_enqueue_flags+0x1b0>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d106      	bne.n	800ac00 <tcp_enqueue_flags+0x1b0>
 800abf2:	4b06      	ldr	r3, [pc, #24]	; (800ac0c <tcp_enqueue_flags+0x1bc>)
 800abf4:	f240 4265 	movw	r2, #1125	; 0x465
 800abf8:	490b      	ldr	r1, [pc, #44]	; (800ac28 <tcp_enqueue_flags+0x1d8>)
 800abfa:	4806      	ldr	r0, [pc, #24]	; (800ac14 <tcp_enqueue_flags+0x1c4>)
 800abfc:	f004 f870 	bl	800ece0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3720      	adds	r7, #32
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	08011910 	.word	0x08011910
 800ac10:	08011d34 	.word	0x08011d34
 800ac14:	08011964 	.word	0x08011964
 800ac18:	08011d8c 	.word	0x08011d8c
 800ac1c:	08011dac 	.word	0x08011dac
 800ac20:	08011de8 	.word	0x08011de8
 800ac24:	08011e00 	.word	0x08011e00
 800ac28:	08011e2c 	.word	0x08011e2c

0800ac2c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ac2c:	b5b0      	push	{r4, r5, r7, lr}
 800ac2e:	b08a      	sub	sp, #40	; 0x28
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d106      	bne.n	800ac48 <tcp_output+0x1c>
 800ac3a:	4b8a      	ldr	r3, [pc, #552]	; (800ae64 <tcp_output+0x238>)
 800ac3c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ac40:	4989      	ldr	r1, [pc, #548]	; (800ae68 <tcp_output+0x23c>)
 800ac42:	488a      	ldr	r0, [pc, #552]	; (800ae6c <tcp_output+0x240>)
 800ac44:	f004 f84c 	bl	800ece0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	7d1b      	ldrb	r3, [r3, #20]
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d106      	bne.n	800ac5e <tcp_output+0x32>
 800ac50:	4b84      	ldr	r3, [pc, #528]	; (800ae64 <tcp_output+0x238>)
 800ac52:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ac56:	4986      	ldr	r1, [pc, #536]	; (800ae70 <tcp_output+0x244>)
 800ac58:	4884      	ldr	r0, [pc, #528]	; (800ae6c <tcp_output+0x240>)
 800ac5a:	f004 f841 	bl	800ece0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ac5e:	4b85      	ldr	r3, [pc, #532]	; (800ae74 <tcp_output+0x248>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d101      	bne.n	800ac6c <tcp_output+0x40>
    return ERR_OK;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	e1ce      	b.n	800b00a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	bf28      	it	cs
 800ac7c:	4613      	movcs	r3, r2
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac86:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ac88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d10b      	bne.n	800aca6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	8b5b      	ldrh	r3, [r3, #26]
 800ac92:	f003 0302 	and.w	r3, r3, #2
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	f000 81aa 	beq.w	800aff0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 fdcb 	bl	800b838 <tcp_send_empty_ack>
 800aca2:	4603      	mov	r3, r0
 800aca4:	e1b1      	b.n	800b00a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800aca6:	6879      	ldr	r1, [r7, #4]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	3304      	adds	r3, #4
 800acac:	461a      	mov	r2, r3
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f7ff fc7c 	bl	800a5ac <tcp_route>
 800acb4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d102      	bne.n	800acc2 <tcp_output+0x96>
    return ERR_RTE;
 800acbc:	f06f 0303 	mvn.w	r3, #3
 800acc0:	e1a3      	b.n	800b00a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d003      	beq.n	800acd0 <tcp_output+0xa4>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d111      	bne.n	800acf4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d002      	beq.n	800acdc <tcp_output+0xb0>
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	3304      	adds	r3, #4
 800acda:	e000      	b.n	800acde <tcp_output+0xb2>
 800acdc:	2300      	movs	r3, #0
 800acde:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d102      	bne.n	800acec <tcp_output+0xc0>
      return ERR_RTE;
 800ace6:	f06f 0303 	mvn.w	r3, #3
 800acea:	e18e      	b.n	800b00a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7f9 fcaf 	bl	800465e <lwip_htonl>
 800ad00:	4602      	mov	r2, r0
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad06:	1ad3      	subs	r3, r2, r3
 800ad08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad0a:	8912      	ldrh	r2, [r2, #8]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	69ba      	ldr	r2, [r7, #24]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d227      	bcs.n	800ad64 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	69bb      	ldr	r3, [r7, #24]
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d114      	bne.n	800ad4c <tcp_output+0x120>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d110      	bne.n	800ad4c <tcp_output+0x120>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d10b      	bne.n	800ad4c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	8b5b      	ldrh	r3, [r3, #26]
 800ad50:	f003 0302 	and.w	r3, r3, #2
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f000 814d 	beq.w	800aff4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 fd6c 	bl	800b838 <tcp_send_empty_ack>
 800ad60:	4603      	mov	r3, r0
 800ad62:	e152      	b.n	800b00a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad70:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ad72:	6a3b      	ldr	r3, [r7, #32]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f000 811c 	beq.w	800afb2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ad7a:	e002      	b.n	800ad82 <tcp_output+0x156>
 800ad7c:	6a3b      	ldr	r3, [r7, #32]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	623b      	str	r3, [r7, #32]
 800ad82:	6a3b      	ldr	r3, [r7, #32]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1f8      	bne.n	800ad7c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ad8a:	e112      	b.n	800afb2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	899b      	ldrh	r3, [r3, #12]
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7f9 fc4d 	bl	8004634 <lwip_htons>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	f003 0304 	and.w	r3, r3, #4
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d006      	beq.n	800adb4 <tcp_output+0x188>
 800ada6:	4b2f      	ldr	r3, [pc, #188]	; (800ae64 <tcp_output+0x238>)
 800ada8:	f240 5236 	movw	r2, #1334	; 0x536
 800adac:	4932      	ldr	r1, [pc, #200]	; (800ae78 <tcp_output+0x24c>)
 800adae:	482f      	ldr	r0, [pc, #188]	; (800ae6c <tcp_output+0x240>)
 800adb0:	f003 ff96 	bl	800ece0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d01f      	beq.n	800adfc <tcp_output+0x1d0>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	8b5b      	ldrh	r3, [r3, #26]
 800adc0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d119      	bne.n	800adfc <tcp_output+0x1d0>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d00b      	beq.n	800ade8 <tcp_output+0x1bc>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d110      	bne.n	800adfc <tcp_output+0x1d0>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adde:	891a      	ldrh	r2, [r3, #8]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d209      	bcs.n	800adfc <tcp_output+0x1d0>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d004      	beq.n	800adfc <tcp_output+0x1d0>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800adf8:	2b08      	cmp	r3, #8
 800adfa:	d901      	bls.n	800ae00 <tcp_output+0x1d4>
 800adfc:	2301      	movs	r3, #1
 800adfe:	e000      	b.n	800ae02 <tcp_output+0x1d6>
 800ae00:	2300      	movs	r3, #0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d106      	bne.n	800ae14 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	8b5b      	ldrh	r3, [r3, #26]
 800ae0a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f000 80e4 	beq.w	800afdc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	7d1b      	ldrb	r3, [r3, #20]
 800ae18:	2b02      	cmp	r3, #2
 800ae1a:	d00d      	beq.n	800ae38 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	899b      	ldrh	r3, [r3, #12]
 800ae22:	b29c      	uxth	r4, r3
 800ae24:	2010      	movs	r0, #16
 800ae26:	f7f9 fc05 	bl	8004634 <lwip_htons>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	4322      	orrs	r2, r4
 800ae34:	b292      	uxth	r2, r2
 800ae36:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ae38:	697a      	ldr	r2, [r7, #20]
 800ae3a:	6879      	ldr	r1, [r7, #4]
 800ae3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae3e:	f000 f909 	bl	800b054 <tcp_output_segment>
 800ae42:	4603      	mov	r3, r0
 800ae44:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ae46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d016      	beq.n	800ae7c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	8b5b      	ldrh	r3, [r3, #26]
 800ae52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae56:	b29a      	uxth	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	835a      	strh	r2, [r3, #26]
      return err;
 800ae5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae60:	e0d3      	b.n	800b00a <tcp_output+0x3de>
 800ae62:	bf00      	nop
 800ae64:	08011910 	.word	0x08011910
 800ae68:	08011e54 	.word	0x08011e54
 800ae6c:	08011964 	.word	0x08011964
 800ae70:	08011e6c 	.word	0x08011e6c
 800ae74:	20008374 	.word	0x20008374
 800ae78:	08011e94 	.word	0x08011e94
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ae7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	7d1b      	ldrb	r3, [r3, #20]
 800ae88:	2b02      	cmp	r3, #2
 800ae8a:	d006      	beq.n	800ae9a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	8b5b      	ldrh	r3, [r3, #26]
 800ae90:	f023 0303 	bic.w	r3, r3, #3
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7f9 fbdc 	bl	800465e <lwip_htonl>
 800aea6:	4604      	mov	r4, r0
 800aea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeaa:	891b      	ldrh	r3, [r3, #8]
 800aeac:	461d      	mov	r5, r3
 800aeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb0:	68db      	ldr	r3, [r3, #12]
 800aeb2:	899b      	ldrh	r3, [r3, #12]
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7f9 fbbc 	bl	8004634 <lwip_htons>
 800aebc:	4603      	mov	r3, r0
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	f003 0303 	and.w	r3, r3, #3
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d001      	beq.n	800aecc <tcp_output+0x2a0>
 800aec8:	2301      	movs	r3, #1
 800aeca:	e000      	b.n	800aece <tcp_output+0x2a2>
 800aecc:	2300      	movs	r3, #0
 800aece:	442b      	add	r3, r5
 800aed0:	4423      	add	r3, r4
 800aed2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	1ad3      	subs	r3, r2, r3
 800aedc:	2b00      	cmp	r3, #0
 800aede:	da02      	bge.n	800aee6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800aee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee8:	891b      	ldrh	r3, [r3, #8]
 800aeea:	461c      	mov	r4, r3
 800aeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	899b      	ldrh	r3, [r3, #12]
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7f9 fb9d 	bl	8004634 <lwip_htons>
 800aefa:	4603      	mov	r3, r0
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	f003 0303 	and.w	r3, r3, #3
 800af02:	2b00      	cmp	r3, #0
 800af04:	d001      	beq.n	800af0a <tcp_output+0x2de>
 800af06:	2301      	movs	r3, #1
 800af08:	e000      	b.n	800af0c <tcp_output+0x2e0>
 800af0a:	2300      	movs	r3, #0
 800af0c:	4423      	add	r3, r4
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d049      	beq.n	800afa6 <tcp_output+0x37a>
      seg->next = NULL;
 800af12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af14:	2200      	movs	r2, #0
 800af16:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d105      	bne.n	800af2c <tcp_output+0x300>
        pcb->unacked = seg;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af24:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800af26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af28:	623b      	str	r3, [r7, #32]
 800af2a:	e03f      	b.n	800afac <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800af2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	4618      	mov	r0, r3
 800af34:	f7f9 fb93 	bl	800465e <lwip_htonl>
 800af38:	4604      	mov	r4, r0
 800af3a:	6a3b      	ldr	r3, [r7, #32]
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	4618      	mov	r0, r3
 800af42:	f7f9 fb8c 	bl	800465e <lwip_htonl>
 800af46:	4603      	mov	r3, r0
 800af48:	1ae3      	subs	r3, r4, r3
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	da24      	bge.n	800af98 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	3370      	adds	r3, #112	; 0x70
 800af52:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800af54:	e002      	b.n	800af5c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d011      	beq.n	800af88 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7f9 fb76 	bl	800465e <lwip_htonl>
 800af72:	4604      	mov	r4, r0
 800af74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7f9 fb6f 	bl	800465e <lwip_htonl>
 800af80:	4603      	mov	r3, r0
 800af82:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800af84:	2b00      	cmp	r3, #0
 800af86:	dbe6      	blt.n	800af56 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800af88:	69fb      	ldr	r3, [r7, #28]
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af94:	601a      	str	r2, [r3, #0]
 800af96:	e009      	b.n	800afac <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800af98:	6a3b      	ldr	r3, [r7, #32]
 800af9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af9c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800af9e:	6a3b      	ldr	r3, [r7, #32]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	623b      	str	r3, [r7, #32]
 800afa4:	e002      	b.n	800afac <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800afa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afa8:	f7fc fc3f 	bl	800782a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afb0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800afb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d012      	beq.n	800afde <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800afb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afba:	68db      	ldr	r3, [r3, #12]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7f9 fb4d 	bl	800465e <lwip_htonl>
 800afc4:	4602      	mov	r2, r0
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afca:	1ad3      	subs	r3, r2, r3
 800afcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afce:	8912      	ldrh	r2, [r2, #8]
 800afd0:	4413      	add	r3, r2
  while (seg != NULL &&
 800afd2:	69ba      	ldr	r2, [r7, #24]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	f4bf aed9 	bcs.w	800ad8c <tcp_output+0x160>
 800afda:	e000      	b.n	800afde <tcp_output+0x3b2>
      break;
 800afdc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d108      	bne.n	800aff8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800afee:	e004      	b.n	800affa <tcp_output+0x3ce>
    goto output_done;
 800aff0:	bf00      	nop
 800aff2:	e002      	b.n	800affa <tcp_output+0x3ce>
    goto output_done;
 800aff4:	bf00      	nop
 800aff6:	e000      	b.n	800affa <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800aff8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	8b5b      	ldrh	r3, [r3, #26]
 800affe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b002:	b29a      	uxth	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3728      	adds	r7, #40	; 0x28
 800b00e:	46bd      	mov	sp, r7
 800b010:	bdb0      	pop	{r4, r5, r7, pc}
 800b012:	bf00      	nop

0800b014 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d106      	bne.n	800b030 <tcp_output_segment_busy+0x1c>
 800b022:	4b09      	ldr	r3, [pc, #36]	; (800b048 <tcp_output_segment_busy+0x34>)
 800b024:	f240 529a 	movw	r2, #1434	; 0x59a
 800b028:	4908      	ldr	r1, [pc, #32]	; (800b04c <tcp_output_segment_busy+0x38>)
 800b02a:	4809      	ldr	r0, [pc, #36]	; (800b050 <tcp_output_segment_busy+0x3c>)
 800b02c:	f003 fe58 	bl	800ece0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	7b9b      	ldrb	r3, [r3, #14]
 800b036:	2b01      	cmp	r3, #1
 800b038:	d001      	beq.n	800b03e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b03a:	2301      	movs	r3, #1
 800b03c:	e000      	b.n	800b040 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	08011910 	.word	0x08011910
 800b04c:	08011eac 	.word	0x08011eac
 800b050:	08011964 	.word	0x08011964

0800b054 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b054:	b5b0      	push	{r4, r5, r7, lr}
 800b056:	b08c      	sub	sp, #48	; 0x30
 800b058:	af04      	add	r7, sp, #16
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d106      	bne.n	800b074 <tcp_output_segment+0x20>
 800b066:	4b63      	ldr	r3, [pc, #396]	; (800b1f4 <tcp_output_segment+0x1a0>)
 800b068:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b06c:	4962      	ldr	r1, [pc, #392]	; (800b1f8 <tcp_output_segment+0x1a4>)
 800b06e:	4863      	ldr	r0, [pc, #396]	; (800b1fc <tcp_output_segment+0x1a8>)
 800b070:	f003 fe36 	bl	800ece0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d106      	bne.n	800b088 <tcp_output_segment+0x34>
 800b07a:	4b5e      	ldr	r3, [pc, #376]	; (800b1f4 <tcp_output_segment+0x1a0>)
 800b07c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b080:	495f      	ldr	r1, [pc, #380]	; (800b200 <tcp_output_segment+0x1ac>)
 800b082:	485e      	ldr	r0, [pc, #376]	; (800b1fc <tcp_output_segment+0x1a8>)
 800b084:	f003 fe2c 	bl	800ece0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d106      	bne.n	800b09c <tcp_output_segment+0x48>
 800b08e:	4b59      	ldr	r3, [pc, #356]	; (800b1f4 <tcp_output_segment+0x1a0>)
 800b090:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b094:	495b      	ldr	r1, [pc, #364]	; (800b204 <tcp_output_segment+0x1b0>)
 800b096:	4859      	ldr	r0, [pc, #356]	; (800b1fc <tcp_output_segment+0x1a8>)
 800b098:	f003 fe22 	bl	800ece0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f7ff ffb9 	bl	800b014 <tcp_output_segment_busy>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d001      	beq.n	800b0ac <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	e09f      	b.n	800b1ec <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	68dc      	ldr	r4, [r3, #12]
 800b0b4:	4610      	mov	r0, r2
 800b0b6:	f7f9 fad2 	bl	800465e <lwip_htonl>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	68dc      	ldr	r4, [r3, #12]
 800b0c6:	4610      	mov	r0, r2
 800b0c8:	f7f9 fab4 	bl	8004634 <lwip_htons>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d4:	68ba      	ldr	r2, [r7, #8]
 800b0d6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b0d8:	441a      	add	r2, r3
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	3314      	adds	r3, #20
 800b0e4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	7a9b      	ldrb	r3, [r3, #10]
 800b0ea:	f003 0301 	and.w	r3, r3, #1
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d015      	beq.n	800b11e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	3304      	adds	r3, #4
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	6879      	ldr	r1, [r7, #4]
 800b0fa:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b0fe:	f7fc fe8b 	bl	8007e18 <tcp_eff_send_mss_netif>
 800b102:	4603      	mov	r3, r0
 800b104:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b106:	8b7b      	ldrh	r3, [r7, #26]
 800b108:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7f9 faa6 	bl	800465e <lwip_htonl>
 800b112:	4602      	mov	r2, r0
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	3304      	adds	r3, #4
 800b11c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b124:	2b00      	cmp	r3, #0
 800b126:	da02      	bge.n	800b12e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	2200      	movs	r2, #0
 800b12c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b132:	2b00      	cmp	r3, #0
 800b134:	d10c      	bne.n	800b150 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b136:	4b34      	ldr	r3, [pc, #208]	; (800b208 <tcp_output_segment+0x1b4>)
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	4618      	mov	r0, r3
 800b146:	f7f9 fa8a 	bl	800465e <lwip_htonl>
 800b14a:	4602      	mov	r2, r0
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	68da      	ldr	r2, [r3, #12]
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	1ad3      	subs	r3, r2, r3
 800b15c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	8959      	ldrh	r1, [r3, #10]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	8b3a      	ldrh	r2, [r7, #24]
 800b16a:	1a8a      	subs	r2, r1, r2
 800b16c:	b292      	uxth	r2, r2
 800b16e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	8919      	ldrh	r1, [r3, #8]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	8b3a      	ldrh	r2, [r7, #24]
 800b17c:	1a8a      	subs	r2, r1, r2
 800b17e:	b292      	uxth	r2, r2
 800b180:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	68fa      	ldr	r2, [r7, #12]
 800b188:	68d2      	ldr	r2, [r2, #12]
 800b18a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	2200      	movs	r2, #0
 800b192:	741a      	strb	r2, [r3, #16]
 800b194:	2200      	movs	r2, #0
 800b196:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	f103 0214 	add.w	r2, r3, #20
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	7a9b      	ldrb	r3, [r3, #10]
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	f003 0304 	and.w	r3, r3, #4
 800b1aa:	4413      	add	r3, r2
 800b1ac:	69fa      	ldr	r2, [r7, #28]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d006      	beq.n	800b1c0 <tcp_output_segment+0x16c>
 800b1b2:	4b10      	ldr	r3, [pc, #64]	; (800b1f4 <tcp_output_segment+0x1a0>)
 800b1b4:	f240 621c 	movw	r2, #1564	; 0x61c
 800b1b8:	4914      	ldr	r1, [pc, #80]	; (800b20c <tcp_output_segment+0x1b8>)
 800b1ba:	4810      	ldr	r0, [pc, #64]	; (800b1fc <tcp_output_segment+0x1a8>)
 800b1bc:	f003 fd90 	bl	800ece0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	6858      	ldr	r0, [r3, #4]
 800b1c4:	68b9      	ldr	r1, [r7, #8]
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	1d1c      	adds	r4, r3, #4
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	7add      	ldrb	r5, [r3, #11]
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	7a9b      	ldrb	r3, [r3, #10]
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	9202      	str	r2, [sp, #8]
 800b1d6:	2206      	movs	r2, #6
 800b1d8:	9201      	str	r2, [sp, #4]
 800b1da:	9300      	str	r3, [sp, #0]
 800b1dc:	462b      	mov	r3, r5
 800b1de:	4622      	mov	r2, r4
 800b1e0:	f002 fcec 	bl	800dbbc <ip4_output_if>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b1e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3720      	adds	r7, #32
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bdb0      	pop	{r4, r5, r7, pc}
 800b1f4:	08011910 	.word	0x08011910
 800b1f8:	08011ed4 	.word	0x08011ed4
 800b1fc:	08011964 	.word	0x08011964
 800b200:	08011ef4 	.word	0x08011ef4
 800b204:	08011f14 	.word	0x08011f14
 800b208:	20008328 	.word	0x20008328
 800b20c:	08011f38 	.word	0x08011f38

0800b210 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b210:	b5b0      	push	{r4, r5, r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d106      	bne.n	800b22c <tcp_rexmit_rto_prepare+0x1c>
 800b21e:	4b31      	ldr	r3, [pc, #196]	; (800b2e4 <tcp_rexmit_rto_prepare+0xd4>)
 800b220:	f240 6263 	movw	r2, #1635	; 0x663
 800b224:	4930      	ldr	r1, [pc, #192]	; (800b2e8 <tcp_rexmit_rto_prepare+0xd8>)
 800b226:	4831      	ldr	r0, [pc, #196]	; (800b2ec <tcp_rexmit_rto_prepare+0xdc>)
 800b228:	f003 fd5a 	bl	800ece0 <iprintf>

  if (pcb->unacked == NULL) {
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b230:	2b00      	cmp	r3, #0
 800b232:	d102      	bne.n	800b23a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b234:	f06f 0305 	mvn.w	r3, #5
 800b238:	e050      	b.n	800b2dc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b23e:	60fb      	str	r3, [r7, #12]
 800b240:	e00b      	b.n	800b25a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f7ff fee6 	bl	800b014 <tcp_output_segment_busy>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d002      	beq.n	800b254 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b24e:	f06f 0305 	mvn.w	r3, #5
 800b252:	e043      	b.n	800b2dc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	60fb      	str	r3, [r7, #12]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1ef      	bne.n	800b242 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b262:	68f8      	ldr	r0, [r7, #12]
 800b264:	f7ff fed6 	bl	800b014 <tcp_output_segment_busy>
 800b268:	4603      	mov	r3, r0
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d002      	beq.n	800b274 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b26e:	f06f 0305 	mvn.w	r3, #5
 800b272:	e033      	b.n	800b2dc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	8b5b      	ldrh	r3, [r3, #26]
 800b28e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b292:	b29a      	uxth	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7f9 f9dd 	bl	800465e <lwip_htonl>
 800b2a4:	4604      	mov	r4, r0
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	891b      	ldrh	r3, [r3, #8]
 800b2aa:	461d      	mov	r5, r3
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	899b      	ldrh	r3, [r3, #12]
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7f9 f9bd 	bl	8004634 <lwip_htons>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	f003 0303 	and.w	r3, r3, #3
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d001      	beq.n	800b2ca <tcp_rexmit_rto_prepare+0xba>
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e000      	b.n	800b2cc <tcp_rexmit_rto_prepare+0xbc>
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	442b      	add	r3, r5
 800b2ce:	18e2      	adds	r2, r4, r3
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bdb0      	pop	{r4, r5, r7, pc}
 800b2e4:	08011910 	.word	0x08011910
 800b2e8:	08011f4c 	.word	0x08011f4c
 800b2ec:	08011964 	.word	0x08011964

0800b2f0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d106      	bne.n	800b30c <tcp_rexmit_rto_commit+0x1c>
 800b2fe:	4b0d      	ldr	r3, [pc, #52]	; (800b334 <tcp_rexmit_rto_commit+0x44>)
 800b300:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b304:	490c      	ldr	r1, [pc, #48]	; (800b338 <tcp_rexmit_rto_commit+0x48>)
 800b306:	480d      	ldr	r0, [pc, #52]	; (800b33c <tcp_rexmit_rto_commit+0x4c>)
 800b308:	f003 fcea 	bl	800ece0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b312:	2bff      	cmp	r3, #255	; 0xff
 800b314:	d007      	beq.n	800b326 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b31c:	3301      	adds	r3, #1
 800b31e:	b2da      	uxtb	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f7ff fc80 	bl	800ac2c <tcp_output>
}
 800b32c:	bf00      	nop
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	08011910 	.word	0x08011910
 800b338:	08011f70 	.word	0x08011f70
 800b33c:	08011964 	.word	0x08011964

0800b340 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d106      	bne.n	800b35c <tcp_rexmit_rto+0x1c>
 800b34e:	4b0a      	ldr	r3, [pc, #40]	; (800b378 <tcp_rexmit_rto+0x38>)
 800b350:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b354:	4909      	ldr	r1, [pc, #36]	; (800b37c <tcp_rexmit_rto+0x3c>)
 800b356:	480a      	ldr	r0, [pc, #40]	; (800b380 <tcp_rexmit_rto+0x40>)
 800b358:	f003 fcc2 	bl	800ece0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f7ff ff57 	bl	800b210 <tcp_rexmit_rto_prepare>
 800b362:	4603      	mov	r3, r0
 800b364:	2b00      	cmp	r3, #0
 800b366:	d102      	bne.n	800b36e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f7ff ffc1 	bl	800b2f0 <tcp_rexmit_rto_commit>
  }
}
 800b36e:	bf00      	nop
 800b370:	3708      	adds	r7, #8
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	08011910 	.word	0x08011910
 800b37c:	08011f94 	.word	0x08011f94
 800b380:	08011964 	.word	0x08011964

0800b384 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b384:	b590      	push	{r4, r7, lr}
 800b386:	b085      	sub	sp, #20
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d106      	bne.n	800b3a0 <tcp_rexmit+0x1c>
 800b392:	4b2f      	ldr	r3, [pc, #188]	; (800b450 <tcp_rexmit+0xcc>)
 800b394:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b398:	492e      	ldr	r1, [pc, #184]	; (800b454 <tcp_rexmit+0xd0>)
 800b39a:	482f      	ldr	r0, [pc, #188]	; (800b458 <tcp_rexmit+0xd4>)
 800b39c:	f003 fca0 	bl	800ece0 <iprintf>

  if (pcb->unacked == NULL) {
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d102      	bne.n	800b3ae <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b3a8:	f06f 0305 	mvn.w	r3, #5
 800b3ac:	e04c      	b.n	800b448 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3b2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b3b4:	68b8      	ldr	r0, [r7, #8]
 800b3b6:	f7ff fe2d 	bl	800b014 <tcp_output_segment_busy>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d002      	beq.n	800b3c6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b3c0:	f06f 0305 	mvn.w	r3, #5
 800b3c4:	e040      	b.n	800b448 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	336c      	adds	r3, #108	; 0x6c
 800b3d2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b3d4:	e002      	b.n	800b3dc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d011      	beq.n	800b408 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	68db      	ldr	r3, [r3, #12]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7f9 f936 	bl	800465e <lwip_htonl>
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7f9 f92f 	bl	800465e <lwip_htonl>
 800b400:	4603      	mov	r3, r0
 800b402:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b404:	2b00      	cmp	r3, #0
 800b406:	dbe6      	blt.n	800b3d6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	68ba      	ldr	r2, [r7, #8]
 800b414:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d103      	bne.n	800b426 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b42c:	2bff      	cmp	r3, #255	; 0xff
 800b42e:	d007      	beq.n	800b440 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b436:	3301      	adds	r3, #1
 800b438:	b2da      	uxtb	r2, r3
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b446:	2300      	movs	r3, #0
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3714      	adds	r7, #20
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd90      	pop	{r4, r7, pc}
 800b450:	08011910 	.word	0x08011910
 800b454:	08011fb0 	.word	0x08011fb0
 800b458:	08011964 	.word	0x08011964

0800b45c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d106      	bne.n	800b478 <tcp_rexmit_fast+0x1c>
 800b46a:	4b2a      	ldr	r3, [pc, #168]	; (800b514 <tcp_rexmit_fast+0xb8>)
 800b46c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b470:	4929      	ldr	r1, [pc, #164]	; (800b518 <tcp_rexmit_fast+0xbc>)
 800b472:	482a      	ldr	r0, [pc, #168]	; (800b51c <tcp_rexmit_fast+0xc0>)
 800b474:	f003 fc34 	bl	800ece0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d044      	beq.n	800b50a <tcp_rexmit_fast+0xae>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	8b5b      	ldrh	r3, [r3, #26]
 800b484:	f003 0304 	and.w	r3, r3, #4
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d13e      	bne.n	800b50a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f7ff ff79 	bl	800b384 <tcp_rexmit>
 800b492:	4603      	mov	r3, r0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d138      	bne.n	800b50a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	bf28      	it	cs
 800b4a8:	4613      	movcs	r3, r2
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	0fda      	lsrs	r2, r3, #31
 800b4ae:	4413      	add	r3, r2
 800b4b0:	105b      	asrs	r3, r3, #1
 800b4b2:	b29a      	uxth	r2, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4c6:	005b      	lsls	r3, r3, #1
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d206      	bcs.n	800b4da <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4d0:	005b      	lsls	r3, r3, #1
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	0049      	lsls	r1, r1, #1
 800b4e8:	440b      	add	r3, r1
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	4413      	add	r3, r2
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	8b5b      	ldrh	r3, [r3, #26]
 800b4fa:	f043 0304 	orr.w	r3, r3, #4
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b50a:	bf00      	nop
 800b50c:	3708      	adds	r7, #8
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	08011910 	.word	0x08011910
 800b518:	08011fc8 	.word	0x08011fc8
 800b51c:	08011964 	.word	0x08011964

0800b520 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b086      	sub	sp, #24
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	607b      	str	r3, [r7, #4]
 800b52a:	460b      	mov	r3, r1
 800b52c:	817b      	strh	r3, [r7, #10]
 800b52e:	4613      	mov	r3, r2
 800b530:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b532:	897a      	ldrh	r2, [r7, #10]
 800b534:	893b      	ldrh	r3, [r7, #8]
 800b536:	4413      	add	r3, r2
 800b538:	b29b      	uxth	r3, r3
 800b53a:	3314      	adds	r3, #20
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b542:	4619      	mov	r1, r3
 800b544:	2022      	movs	r0, #34	; 0x22
 800b546:	f7fa f961 	bl	800580c <pbuf_alloc>
 800b54a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d04d      	beq.n	800b5ee <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b552:	897b      	ldrh	r3, [r7, #10]
 800b554:	3313      	adds	r3, #19
 800b556:	697a      	ldr	r2, [r7, #20]
 800b558:	8952      	ldrh	r2, [r2, #10]
 800b55a:	4293      	cmp	r3, r2
 800b55c:	db06      	blt.n	800b56c <tcp_output_alloc_header_common+0x4c>
 800b55e:	4b26      	ldr	r3, [pc, #152]	; (800b5f8 <tcp_output_alloc_header_common+0xd8>)
 800b560:	f240 7223 	movw	r2, #1827	; 0x723
 800b564:	4925      	ldr	r1, [pc, #148]	; (800b5fc <tcp_output_alloc_header_common+0xdc>)
 800b566:	4826      	ldr	r0, [pc, #152]	; (800b600 <tcp_output_alloc_header_common+0xe0>)
 800b568:	f003 fbba 	bl	800ece0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b572:	8c3b      	ldrh	r3, [r7, #32]
 800b574:	4618      	mov	r0, r3
 800b576:	f7f9 f85d 	bl	8004634 <lwip_htons>
 800b57a:	4603      	mov	r3, r0
 800b57c:	461a      	mov	r2, r3
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b582:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b584:	4618      	mov	r0, r3
 800b586:	f7f9 f855 	bl	8004634 <lwip_htons>
 800b58a:	4603      	mov	r3, r0
 800b58c:	461a      	mov	r2, r3
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f7f9 f860 	bl	800465e <lwip_htonl>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b5a4:	897b      	ldrh	r3, [r7, #10]
 800b5a6:	089b      	lsrs	r3, r3, #2
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	3305      	adds	r3, #5
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	031b      	lsls	r3, r3, #12
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7f9 f839 	bl	8004634 <lwip_htons>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b5ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7f9 f831 	bl	8004634 <lwip_htons>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	741a      	strb	r2, [r3, #16]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	749a      	strb	r2, [r3, #18]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b5ee:	697b      	ldr	r3, [r7, #20]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3718      	adds	r7, #24
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	08011910 	.word	0x08011910
 800b5fc:	08011fe8 	.word	0x08011fe8
 800b600:	08011964 	.word	0x08011964

0800b604 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b604:	b5b0      	push	{r4, r5, r7, lr}
 800b606:	b08a      	sub	sp, #40	; 0x28
 800b608:	af04      	add	r7, sp, #16
 800b60a:	60f8      	str	r0, [r7, #12]
 800b60c:	607b      	str	r3, [r7, #4]
 800b60e:	460b      	mov	r3, r1
 800b610:	817b      	strh	r3, [r7, #10]
 800b612:	4613      	mov	r3, r2
 800b614:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d106      	bne.n	800b62a <tcp_output_alloc_header+0x26>
 800b61c:	4b15      	ldr	r3, [pc, #84]	; (800b674 <tcp_output_alloc_header+0x70>)
 800b61e:	f240 7242 	movw	r2, #1858	; 0x742
 800b622:	4915      	ldr	r1, [pc, #84]	; (800b678 <tcp_output_alloc_header+0x74>)
 800b624:	4815      	ldr	r0, [pc, #84]	; (800b67c <tcp_output_alloc_header+0x78>)
 800b626:	f003 fb5b 	bl	800ece0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	8adb      	ldrh	r3, [r3, #22]
 800b632:	68fa      	ldr	r2, [r7, #12]
 800b634:	8b12      	ldrh	r2, [r2, #24]
 800b636:	68f9      	ldr	r1, [r7, #12]
 800b638:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b63a:	893d      	ldrh	r5, [r7, #8]
 800b63c:	897c      	ldrh	r4, [r7, #10]
 800b63e:	9103      	str	r1, [sp, #12]
 800b640:	2110      	movs	r1, #16
 800b642:	9102      	str	r1, [sp, #8]
 800b644:	9201      	str	r2, [sp, #4]
 800b646:	9300      	str	r3, [sp, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	462a      	mov	r2, r5
 800b64c:	4621      	mov	r1, r4
 800b64e:	f7ff ff67 	bl	800b520 <tcp_output_alloc_header_common>
 800b652:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d006      	beq.n	800b668 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b65e:	68fa      	ldr	r2, [r7, #12]
 800b660:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b662:	441a      	add	r2, r3
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b668:	697b      	ldr	r3, [r7, #20]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3718      	adds	r7, #24
 800b66e:	46bd      	mov	sp, r7
 800b670:	bdb0      	pop	{r4, r5, r7, pc}
 800b672:	bf00      	nop
 800b674:	08011910 	.word	0x08011910
 800b678:	08012018 	.word	0x08012018
 800b67c:	08011964 	.word	0x08011964

0800b680 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b088      	sub	sp, #32
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	4611      	mov	r1, r2
 800b68c:	461a      	mov	r2, r3
 800b68e:	460b      	mov	r3, r1
 800b690:	71fb      	strb	r3, [r7, #7]
 800b692:	4613      	mov	r3, r2
 800b694:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b696:	2300      	movs	r3, #0
 800b698:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d106      	bne.n	800b6ae <tcp_output_fill_options+0x2e>
 800b6a0:	4b13      	ldr	r3, [pc, #76]	; (800b6f0 <tcp_output_fill_options+0x70>)
 800b6a2:	f240 7256 	movw	r2, #1878	; 0x756
 800b6a6:	4913      	ldr	r1, [pc, #76]	; (800b6f4 <tcp_output_fill_options+0x74>)
 800b6a8:	4813      	ldr	r0, [pc, #76]	; (800b6f8 <tcp_output_fill_options+0x78>)
 800b6aa:	f003 fb19 	bl	800ece0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	3314      	adds	r3, #20
 800b6b8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	f103 0214 	add.w	r2, r3, #20
 800b6c0:	8bfb      	ldrh	r3, [r7, #30]
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	79fb      	ldrb	r3, [r7, #7]
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	f003 0304 	and.w	r3, r3, #4
 800b6ce:	440b      	add	r3, r1
 800b6d0:	4413      	add	r3, r2
 800b6d2:	697a      	ldr	r2, [r7, #20]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d006      	beq.n	800b6e6 <tcp_output_fill_options+0x66>
 800b6d8:	4b05      	ldr	r3, [pc, #20]	; (800b6f0 <tcp_output_fill_options+0x70>)
 800b6da:	f240 7275 	movw	r2, #1909	; 0x775
 800b6de:	4907      	ldr	r1, [pc, #28]	; (800b6fc <tcp_output_fill_options+0x7c>)
 800b6e0:	4805      	ldr	r0, [pc, #20]	; (800b6f8 <tcp_output_fill_options+0x78>)
 800b6e2:	f003 fafd 	bl	800ece0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b6e6:	bf00      	nop
 800b6e8:	3720      	adds	r7, #32
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	08011910 	.word	0x08011910
 800b6f4:	08012040 	.word	0x08012040
 800b6f8:	08011964 	.word	0x08011964
 800b6fc:	08011f38 	.word	0x08011f38

0800b700 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b08a      	sub	sp, #40	; 0x28
 800b704:	af04      	add	r7, sp, #16
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	60b9      	str	r1, [r7, #8]
 800b70a:	607a      	str	r2, [r7, #4]
 800b70c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d106      	bne.n	800b722 <tcp_output_control_segment+0x22>
 800b714:	4b1c      	ldr	r3, [pc, #112]	; (800b788 <tcp_output_control_segment+0x88>)
 800b716:	f240 7287 	movw	r2, #1927	; 0x787
 800b71a:	491c      	ldr	r1, [pc, #112]	; (800b78c <tcp_output_control_segment+0x8c>)
 800b71c:	481c      	ldr	r0, [pc, #112]	; (800b790 <tcp_output_control_segment+0x90>)
 800b71e:	f003 fadf 	bl	800ece0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	6879      	ldr	r1, [r7, #4]
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f7fe ff40 	bl	800a5ac <tcp_route>
 800b72c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d102      	bne.n	800b73a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b734:	23fc      	movs	r3, #252	; 0xfc
 800b736:	75fb      	strb	r3, [r7, #23]
 800b738:	e01c      	b.n	800b774 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d006      	beq.n	800b74e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	7adb      	ldrb	r3, [r3, #11]
 800b744:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	7a9b      	ldrb	r3, [r3, #10]
 800b74a:	757b      	strb	r3, [r7, #21]
 800b74c:	e003      	b.n	800b756 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b74e:	23ff      	movs	r3, #255	; 0xff
 800b750:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b752:	2300      	movs	r3, #0
 800b754:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b756:	7dba      	ldrb	r2, [r7, #22]
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	9302      	str	r3, [sp, #8]
 800b75c:	2306      	movs	r3, #6
 800b75e:	9301      	str	r3, [sp, #4]
 800b760:	7d7b      	ldrb	r3, [r7, #21]
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	4613      	mov	r3, r2
 800b766:	683a      	ldr	r2, [r7, #0]
 800b768:	6879      	ldr	r1, [r7, #4]
 800b76a:	68b8      	ldr	r0, [r7, #8]
 800b76c:	f002 fa26 	bl	800dbbc <ip4_output_if>
 800b770:	4603      	mov	r3, r0
 800b772:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b774:	68b8      	ldr	r0, [r7, #8]
 800b776:	f7fa fb2d 	bl	8005dd4 <pbuf_free>
  return err;
 800b77a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3718      	adds	r7, #24
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	08011910 	.word	0x08011910
 800b78c:	08012068 	.word	0x08012068
 800b790:	08011964 	.word	0x08011964

0800b794 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b794:	b590      	push	{r4, r7, lr}
 800b796:	b08b      	sub	sp, #44	; 0x2c
 800b798:	af04      	add	r7, sp, #16
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	607a      	str	r2, [r7, #4]
 800b7a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d106      	bne.n	800b7b6 <tcp_rst+0x22>
 800b7a8:	4b1f      	ldr	r3, [pc, #124]	; (800b828 <tcp_rst+0x94>)
 800b7aa:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b7ae:	491f      	ldr	r1, [pc, #124]	; (800b82c <tcp_rst+0x98>)
 800b7b0:	481f      	ldr	r0, [pc, #124]	; (800b830 <tcp_rst+0x9c>)
 800b7b2:	f003 fa95 	bl	800ece0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d106      	bne.n	800b7ca <tcp_rst+0x36>
 800b7bc:	4b1a      	ldr	r3, [pc, #104]	; (800b828 <tcp_rst+0x94>)
 800b7be:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b7c2:	491c      	ldr	r1, [pc, #112]	; (800b834 <tcp_rst+0xa0>)
 800b7c4:	481a      	ldr	r0, [pc, #104]	; (800b830 <tcp_rst+0x9c>)
 800b7c6:	f003 fa8b 	bl	800ece0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b7ce:	f246 0308 	movw	r3, #24584	; 0x6008
 800b7d2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b7d4:	7dfb      	ldrb	r3, [r7, #23]
 800b7d6:	b29c      	uxth	r4, r3
 800b7d8:	68b8      	ldr	r0, [r7, #8]
 800b7da:	f7f8 ff40 	bl	800465e <lwip_htonl>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	8abb      	ldrh	r3, [r7, #20]
 800b7e2:	9303      	str	r3, [sp, #12]
 800b7e4:	2314      	movs	r3, #20
 800b7e6:	9302      	str	r3, [sp, #8]
 800b7e8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b7ea:	9301      	str	r3, [sp, #4]
 800b7ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b7ee:	9300      	str	r3, [sp, #0]
 800b7f0:	4613      	mov	r3, r2
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	4621      	mov	r1, r4
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f7ff fe92 	bl	800b520 <tcp_output_alloc_header_common>
 800b7fc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00c      	beq.n	800b81e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b804:	7dfb      	ldrb	r3, [r7, #23]
 800b806:	2200      	movs	r2, #0
 800b808:	6939      	ldr	r1, [r7, #16]
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	f7ff ff38 	bl	800b680 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b812:	683a      	ldr	r2, [r7, #0]
 800b814:	6939      	ldr	r1, [r7, #16]
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f7ff ff72 	bl	800b700 <tcp_output_control_segment>
 800b81c:	e000      	b.n	800b820 <tcp_rst+0x8c>
    return;
 800b81e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b820:	371c      	adds	r7, #28
 800b822:	46bd      	mov	sp, r7
 800b824:	bd90      	pop	{r4, r7, pc}
 800b826:	bf00      	nop
 800b828:	08011910 	.word	0x08011910
 800b82c:	08012094 	.word	0x08012094
 800b830:	08011964 	.word	0x08011964
 800b834:	080120b0 	.word	0x080120b0

0800b838 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b838:	b590      	push	{r4, r7, lr}
 800b83a:	b087      	sub	sp, #28
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b840:	2300      	movs	r3, #0
 800b842:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b844:	2300      	movs	r3, #0
 800b846:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d106      	bne.n	800b85c <tcp_send_empty_ack+0x24>
 800b84e:	4b28      	ldr	r3, [pc, #160]	; (800b8f0 <tcp_send_empty_ack+0xb8>)
 800b850:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b854:	4927      	ldr	r1, [pc, #156]	; (800b8f4 <tcp_send_empty_ack+0xbc>)
 800b856:	4828      	ldr	r0, [pc, #160]	; (800b8f8 <tcp_send_empty_ack+0xc0>)
 800b858:	f003 fa42 	bl	800ece0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b85c:	7dfb      	ldrb	r3, [r7, #23]
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	b2db      	uxtb	r3, r3
 800b862:	f003 0304 	and.w	r3, r3, #4
 800b866:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b868:	7d7b      	ldrb	r3, [r7, #21]
 800b86a:	b29c      	uxth	r4, r3
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b870:	4618      	mov	r0, r3
 800b872:	f7f8 fef4 	bl	800465e <lwip_htonl>
 800b876:	4603      	mov	r3, r0
 800b878:	2200      	movs	r2, #0
 800b87a:	4621      	mov	r1, r4
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f7ff fec1 	bl	800b604 <tcp_output_alloc_header>
 800b882:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d109      	bne.n	800b89e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	8b5b      	ldrh	r3, [r3, #26]
 800b88e:	f043 0303 	orr.w	r3, r3, #3
 800b892:	b29a      	uxth	r2, r3
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b898:	f06f 0301 	mvn.w	r3, #1
 800b89c:	e023      	b.n	800b8e6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b89e:	7dbb      	ldrb	r3, [r7, #22]
 800b8a0:	7dfa      	ldrb	r2, [r7, #23]
 800b8a2:	6939      	ldr	r1, [r7, #16]
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f7ff feeb 	bl	800b680 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	3304      	adds	r3, #4
 800b8b0:	6939      	ldr	r1, [r7, #16]
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f7ff ff24 	bl	800b700 <tcp_output_control_segment>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b8bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d007      	beq.n	800b8d4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	8b5b      	ldrh	r3, [r3, #26]
 800b8c8:	f043 0303 	orr.w	r3, r3, #3
 800b8cc:	b29a      	uxth	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	835a      	strh	r2, [r3, #26]
 800b8d2:	e006      	b.n	800b8e2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	8b5b      	ldrh	r3, [r3, #26]
 800b8d8:	f023 0303 	bic.w	r3, r3, #3
 800b8dc:	b29a      	uxth	r2, r3
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b8e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	371c      	adds	r7, #28
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd90      	pop	{r4, r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	08011910 	.word	0x08011910
 800b8f4:	080120cc 	.word	0x080120cc
 800b8f8:	08011964 	.word	0x08011964

0800b8fc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b8fc:	b590      	push	{r4, r7, lr}
 800b8fe:	b087      	sub	sp, #28
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b904:	2300      	movs	r3, #0
 800b906:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d106      	bne.n	800b91c <tcp_keepalive+0x20>
 800b90e:	4b18      	ldr	r3, [pc, #96]	; (800b970 <tcp_keepalive+0x74>)
 800b910:	f640 0224 	movw	r2, #2084	; 0x824
 800b914:	4917      	ldr	r1, [pc, #92]	; (800b974 <tcp_keepalive+0x78>)
 800b916:	4818      	ldr	r0, [pc, #96]	; (800b978 <tcp_keepalive+0x7c>)
 800b918:	f003 f9e2 	bl	800ece0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b91c:	7dfb      	ldrb	r3, [r7, #23]
 800b91e:	b29c      	uxth	r4, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b924:	3b01      	subs	r3, #1
 800b926:	4618      	mov	r0, r3
 800b928:	f7f8 fe99 	bl	800465e <lwip_htonl>
 800b92c:	4603      	mov	r3, r0
 800b92e:	2200      	movs	r2, #0
 800b930:	4621      	mov	r1, r4
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f7ff fe66 	bl	800b604 <tcp_output_alloc_header>
 800b938:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d102      	bne.n	800b946 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b940:	f04f 33ff 	mov.w	r3, #4294967295
 800b944:	e010      	b.n	800b968 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b946:	7dfb      	ldrb	r3, [r7, #23]
 800b948:	2200      	movs	r2, #0
 800b94a:	6939      	ldr	r1, [r7, #16]
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f7ff fe97 	bl	800b680 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	3304      	adds	r3, #4
 800b958:	6939      	ldr	r1, [r7, #16]
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f7ff fed0 	bl	800b700 <tcp_output_control_segment>
 800b960:	4603      	mov	r3, r0
 800b962:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b964:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	371c      	adds	r7, #28
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd90      	pop	{r4, r7, pc}
 800b970:	08011910 	.word	0x08011910
 800b974:	080120ec 	.word	0x080120ec
 800b978:	08011964 	.word	0x08011964

0800b97c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b97c:	b590      	push	{r4, r7, lr}
 800b97e:	b08b      	sub	sp, #44	; 0x2c
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b984:	2300      	movs	r3, #0
 800b986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d106      	bne.n	800b99e <tcp_zero_window_probe+0x22>
 800b990:	4b4c      	ldr	r3, [pc, #304]	; (800bac4 <tcp_zero_window_probe+0x148>)
 800b992:	f640 024f 	movw	r2, #2127	; 0x84f
 800b996:	494c      	ldr	r1, [pc, #304]	; (800bac8 <tcp_zero_window_probe+0x14c>)
 800b998:	484c      	ldr	r0, [pc, #304]	; (800bacc <tcp_zero_window_probe+0x150>)
 800b99a:	f003 f9a1 	bl	800ece0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9a2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b9a4:	6a3b      	ldr	r3, [r7, #32]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d101      	bne.n	800b9ae <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	e086      	b.n	800babc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b9b4:	2bff      	cmp	r3, #255	; 0xff
 800b9b6:	d007      	beq.n	800b9c8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b9be:	3301      	adds	r3, #1
 800b9c0:	b2da      	uxtb	r2, r3
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b9c8:	6a3b      	ldr	r3, [r7, #32]
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	899b      	ldrh	r3, [r3, #12]
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7f8 fe2f 	bl	8004634 <lwip_htons>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	f003 0301 	and.w	r3, r3, #1
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d005      	beq.n	800b9ee <tcp_zero_window_probe+0x72>
 800b9e2:	6a3b      	ldr	r3, [r7, #32]
 800b9e4:	891b      	ldrh	r3, [r3, #8]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d101      	bne.n	800b9ee <tcp_zero_window_probe+0x72>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e000      	b.n	800b9f0 <tcp_zero_window_probe+0x74>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b9f2:	7ffb      	ldrb	r3, [r7, #31]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	bf0c      	ite	eq
 800b9f8:	2301      	moveq	r3, #1
 800b9fa:	2300      	movne	r3, #0
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ba00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba04:	b299      	uxth	r1, r3
 800ba06:	6a3b      	ldr	r3, [r7, #32]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	8bba      	ldrh	r2, [r7, #28]
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f7ff fdf8 	bl	800b604 <tcp_output_alloc_header>
 800ba14:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d102      	bne.n	800ba22 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ba1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba20:	e04c      	b.n	800babc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ba28:	7ffb      	ldrb	r3, [r7, #31]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d011      	beq.n	800ba52 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	899b      	ldrh	r3, [r3, #12]
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	b21b      	sxth	r3, r3
 800ba36:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ba3a:	b21c      	sxth	r4, r3
 800ba3c:	2011      	movs	r0, #17
 800ba3e:	f7f8 fdf9 	bl	8004634 <lwip_htons>
 800ba42:	4603      	mov	r3, r0
 800ba44:	b21b      	sxth	r3, r3
 800ba46:	4323      	orrs	r3, r4
 800ba48:	b21b      	sxth	r3, r3
 800ba4a:	b29a      	uxth	r2, r3
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	819a      	strh	r2, [r3, #12]
 800ba50:	e010      	b.n	800ba74 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	3314      	adds	r3, #20
 800ba58:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ba5a:	6a3b      	ldr	r3, [r7, #32]
 800ba5c:	6858      	ldr	r0, [r3, #4]
 800ba5e:	6a3b      	ldr	r3, [r7, #32]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	891a      	ldrh	r2, [r3, #8]
 800ba64:	6a3b      	ldr	r3, [r7, #32]
 800ba66:	891b      	ldrh	r3, [r3, #8]
 800ba68:	1ad3      	subs	r3, r2, r3
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	6939      	ldr	r1, [r7, #16]
 800ba70:	f7fa fbaa 	bl	80061c8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ba74:	6a3b      	ldr	r3, [r7, #32]
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7f8 fdef 	bl	800465e <lwip_htonl>
 800ba80:	4603      	mov	r3, r0
 800ba82:	3301      	adds	r3, #1
 800ba84:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	1ad3      	subs	r3, r2, r3
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	da02      	bge.n	800ba98 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	68fa      	ldr	r2, [r7, #12]
 800ba96:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ba98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	69b9      	ldr	r1, [r7, #24]
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7ff fded 	bl	800b680 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	3304      	adds	r3, #4
 800baac:	69b9      	ldr	r1, [r7, #24]
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f7ff fe26 	bl	800b700 <tcp_output_control_segment>
 800bab4:	4603      	mov	r3, r0
 800bab6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bab8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800babc:	4618      	mov	r0, r3
 800babe:	372c      	adds	r7, #44	; 0x2c
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd90      	pop	{r4, r7, pc}
 800bac4:	08011910 	.word	0x08011910
 800bac8:	08012108 	.word	0x08012108
 800bacc:	08011964 	.word	0x08011964

0800bad0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800bad8:	f7fa ff0c 	bl	80068f4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800badc:	4b0a      	ldr	r3, [pc, #40]	; (800bb08 <tcpip_tcp_timer+0x38>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d103      	bne.n	800baec <tcpip_tcp_timer+0x1c>
 800bae4:	4b09      	ldr	r3, [pc, #36]	; (800bb0c <tcpip_tcp_timer+0x3c>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d005      	beq.n	800baf8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800baec:	2200      	movs	r2, #0
 800baee:	4908      	ldr	r1, [pc, #32]	; (800bb10 <tcpip_tcp_timer+0x40>)
 800baf0:	20fa      	movs	r0, #250	; 0xfa
 800baf2:	f000 f8f3 	bl	800bcdc <sys_timeout>
 800baf6:	e003      	b.n	800bb00 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800baf8:	4b06      	ldr	r3, [pc, #24]	; (800bb14 <tcpip_tcp_timer+0x44>)
 800bafa:	2200      	movs	r2, #0
 800bafc:	601a      	str	r2, [r3, #0]
  }
}
 800bafe:	bf00      	nop
 800bb00:	bf00      	nop
 800bb02:	3708      	adds	r7, #8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	20008334 	.word	0x20008334
 800bb0c:	20008338 	.word	0x20008338
 800bb10:	0800bad1 	.word	0x0800bad1
 800bb14:	20008380 	.word	0x20008380

0800bb18 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bb1c:	4b0a      	ldr	r3, [pc, #40]	; (800bb48 <tcp_timer_needed+0x30>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d10f      	bne.n	800bb44 <tcp_timer_needed+0x2c>
 800bb24:	4b09      	ldr	r3, [pc, #36]	; (800bb4c <tcp_timer_needed+0x34>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d103      	bne.n	800bb34 <tcp_timer_needed+0x1c>
 800bb2c:	4b08      	ldr	r3, [pc, #32]	; (800bb50 <tcp_timer_needed+0x38>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d007      	beq.n	800bb44 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800bb34:	4b04      	ldr	r3, [pc, #16]	; (800bb48 <tcp_timer_needed+0x30>)
 800bb36:	2201      	movs	r2, #1
 800bb38:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	4905      	ldr	r1, [pc, #20]	; (800bb54 <tcp_timer_needed+0x3c>)
 800bb3e:	20fa      	movs	r0, #250	; 0xfa
 800bb40:	f000 f8cc 	bl	800bcdc <sys_timeout>
  }
}
 800bb44:	bf00      	nop
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	20008380 	.word	0x20008380
 800bb4c:	20008334 	.word	0x20008334
 800bb50:	20008338 	.word	0x20008338
 800bb54:	0800bad1 	.word	0x0800bad1

0800bb58 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b086      	sub	sp, #24
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bb64:	2007      	movs	r0, #7
 800bb66:	f7f9 fa4b 	bl	8005000 <memp_malloc>
 800bb6a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d109      	bne.n	800bb86 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d151      	bne.n	800bc1c <sys_timeout_abs+0xc4>
 800bb78:	4b2a      	ldr	r3, [pc, #168]	; (800bc24 <sys_timeout_abs+0xcc>)
 800bb7a:	22be      	movs	r2, #190	; 0xbe
 800bb7c:	492a      	ldr	r1, [pc, #168]	; (800bc28 <sys_timeout_abs+0xd0>)
 800bb7e:	482b      	ldr	r0, [pc, #172]	; (800bc2c <sys_timeout_abs+0xd4>)
 800bb80:	f003 f8ae 	bl	800ece0 <iprintf>
    return;
 800bb84:	e04a      	b.n	800bc1c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800bb9e:	4b24      	ldr	r3, [pc, #144]	; (800bc30 <sys_timeout_abs+0xd8>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d103      	bne.n	800bbae <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800bba6:	4a22      	ldr	r2, [pc, #136]	; (800bc30 <sys_timeout_abs+0xd8>)
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	6013      	str	r3, [r2, #0]
    return;
 800bbac:	e037      	b.n	800bc1e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	685a      	ldr	r2, [r3, #4]
 800bbb2:	4b1f      	ldr	r3, [pc, #124]	; (800bc30 <sys_timeout_abs+0xd8>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	1ad3      	subs	r3, r2, r3
 800bbba:	0fdb      	lsrs	r3, r3, #31
 800bbbc:	f003 0301 	and.w	r3, r3, #1
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d007      	beq.n	800bbd6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800bbc6:	4b1a      	ldr	r3, [pc, #104]	; (800bc30 <sys_timeout_abs+0xd8>)
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800bbce:	4a18      	ldr	r2, [pc, #96]	; (800bc30 <sys_timeout_abs+0xd8>)
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	6013      	str	r3, [r2, #0]
 800bbd4:	e023      	b.n	800bc1e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800bbd6:	4b16      	ldr	r3, [pc, #88]	; (800bc30 <sys_timeout_abs+0xd8>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	617b      	str	r3, [r7, #20]
 800bbdc:	e01a      	b.n	800bc14 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d00b      	beq.n	800bbfe <sys_timeout_abs+0xa6>
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	685a      	ldr	r2, [r3, #4]
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	1ad3      	subs	r3, r2, r3
 800bbf2:	0fdb      	lsrs	r3, r3, #31
 800bbf4:	f003 0301 	and.w	r3, r3, #1
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d007      	beq.n	800bc0e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	693a      	ldr	r2, [r7, #16]
 800bc0a:	601a      	str	r2, [r3, #0]
        break;
 800bc0c:	e007      	b.n	800bc1e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	617b      	str	r3, [r7, #20]
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d1e1      	bne.n	800bbde <sys_timeout_abs+0x86>
 800bc1a:	e000      	b.n	800bc1e <sys_timeout_abs+0xc6>
    return;
 800bc1c:	bf00      	nop
      }
    }
  }
}
 800bc1e:	3718      	adds	r7, #24
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	0801212c 	.word	0x0801212c
 800bc28:	08012160 	.word	0x08012160
 800bc2c:	080121a0 	.word	0x080121a0
 800bc30:	20008378 	.word	0x20008378

0800bc34 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b086      	sub	sp, #24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	4798      	blx	r3

  now = sys_now();
 800bc46:	f7f8 faf5 	bl	8004234 <sys_now>
 800bc4a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	4b0f      	ldr	r3, [pc, #60]	; (800bc90 <lwip_cyclic_timer+0x5c>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4413      	add	r3, r2
 800bc56:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bc58:	68fa      	ldr	r2, [r7, #12]
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	1ad3      	subs	r3, r2, r3
 800bc5e:	0fdb      	lsrs	r3, r3, #31
 800bc60:	f003 0301 	and.w	r3, r3, #1
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d009      	beq.n	800bc7e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	4413      	add	r3, r2
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	4907      	ldr	r1, [pc, #28]	; (800bc94 <lwip_cyclic_timer+0x60>)
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7ff ff6e 	bl	800bb58 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800bc7c:	e004      	b.n	800bc88 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	4904      	ldr	r1, [pc, #16]	; (800bc94 <lwip_cyclic_timer+0x60>)
 800bc82:	68f8      	ldr	r0, [r7, #12]
 800bc84:	f7ff ff68 	bl	800bb58 <sys_timeout_abs>
}
 800bc88:	bf00      	nop
 800bc8a:	3718      	adds	r7, #24
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	2000837c 	.word	0x2000837c
 800bc94:	0800bc35 	.word	0x0800bc35

0800bc98 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bc9e:	2301      	movs	r3, #1
 800bca0:	607b      	str	r3, [r7, #4]
 800bca2:	e00e      	b.n	800bcc2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bca4:	4a0b      	ldr	r2, [pc, #44]	; (800bcd4 <sys_timeouts_init+0x3c>)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	00db      	lsls	r3, r3, #3
 800bcb0:	4a08      	ldr	r2, [pc, #32]	; (800bcd4 <sys_timeouts_init+0x3c>)
 800bcb2:	4413      	add	r3, r2
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	4908      	ldr	r1, [pc, #32]	; (800bcd8 <sys_timeouts_init+0x40>)
 800bcb8:	f000 f810 	bl	800bcdc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	607b      	str	r3, [r7, #4]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2b02      	cmp	r3, #2
 800bcc6:	d9ed      	bls.n	800bca4 <sys_timeouts_init+0xc>
  }
}
 800bcc8:	bf00      	nop
 800bcca:	bf00      	nop
 800bccc:	3708      	adds	r7, #8
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	08012d20 	.word	0x08012d20
 800bcd8:	0800bc35 	.word	0x0800bc35

0800bcdc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b086      	sub	sp, #24
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcee:	d306      	bcc.n	800bcfe <sys_timeout+0x22>
 800bcf0:	4b0a      	ldr	r3, [pc, #40]	; (800bd1c <sys_timeout+0x40>)
 800bcf2:	f240 1229 	movw	r2, #297	; 0x129
 800bcf6:	490a      	ldr	r1, [pc, #40]	; (800bd20 <sys_timeout+0x44>)
 800bcf8:	480a      	ldr	r0, [pc, #40]	; (800bd24 <sys_timeout+0x48>)
 800bcfa:	f002 fff1 	bl	800ece0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bcfe:	f7f8 fa99 	bl	8004234 <sys_now>
 800bd02:	4602      	mov	r2, r0
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	4413      	add	r3, r2
 800bd08:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	68b9      	ldr	r1, [r7, #8]
 800bd0e:	6978      	ldr	r0, [r7, #20]
 800bd10:	f7ff ff22 	bl	800bb58 <sys_timeout_abs>
#endif
}
 800bd14:	bf00      	nop
 800bd16:	3718      	adds	r7, #24
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}
 800bd1c:	0801212c 	.word	0x0801212c
 800bd20:	080121c8 	.word	0x080121c8
 800bd24:	080121a0 	.word	0x080121a0

0800bd28 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bd2e:	f7f8 fa81 	bl	8004234 <sys_now>
 800bd32:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800bd34:	4b1a      	ldr	r3, [pc, #104]	; (800bda0 <sys_check_timeouts+0x78>)
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d001      	beq.n	800bd42 <sys_check_timeouts+0x1a>
 800bd3e:	f7f9 fd0f 	bl	8005760 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800bd42:	4b18      	ldr	r3, [pc, #96]	; (800bda4 <sys_check_timeouts+0x7c>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d022      	beq.n	800bd94 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	68fa      	ldr	r2, [r7, #12]
 800bd54:	1ad3      	subs	r3, r2, r3
 800bd56:	0fdb      	lsrs	r3, r3, #31
 800bd58:	f003 0301 	and.w	r3, r3, #1
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d11a      	bne.n	800bd98 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a0f      	ldr	r2, [pc, #60]	; (800bda4 <sys_check_timeouts+0x7c>)
 800bd68:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	4a0b      	ldr	r2, [pc, #44]	; (800bda8 <sys_check_timeouts+0x80>)
 800bd7c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bd7e:	68b9      	ldr	r1, [r7, #8]
 800bd80:	2007      	movs	r0, #7
 800bd82:	f7f9 f9ad 	bl	80050e0 <memp_free>
    if (handler != NULL) {
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d0d3      	beq.n	800bd34 <sys_check_timeouts+0xc>
      handler(arg);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6838      	ldr	r0, [r7, #0]
 800bd90:	4798      	blx	r3
  do {
 800bd92:	e7cf      	b.n	800bd34 <sys_check_timeouts+0xc>
      return;
 800bd94:	bf00      	nop
 800bd96:	e000      	b.n	800bd9a <sys_check_timeouts+0x72>
      return;
 800bd98:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bd9a:	3710      	adds	r7, #16
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	20008321 	.word	0x20008321
 800bda4:	20008378 	.word	0x20008378
 800bda8:	2000837c 	.word	0x2000837c

0800bdac <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bdb0:	f002 ffae 	bl	800ed10 <rand>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bdc2:	b29a      	uxth	r2, r3
 800bdc4:	4b01      	ldr	r3, [pc, #4]	; (800bdcc <udp_init+0x20>)
 800bdc6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bdc8:	bf00      	nop
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	20000028 	.word	0x20000028

0800bdd0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800bdda:	4b17      	ldr	r3, [pc, #92]	; (800be38 <udp_new_port+0x68>)
 800bddc:	881b      	ldrh	r3, [r3, #0]
 800bdde:	1c5a      	adds	r2, r3, #1
 800bde0:	b291      	uxth	r1, r2
 800bde2:	4a15      	ldr	r2, [pc, #84]	; (800be38 <udp_new_port+0x68>)
 800bde4:	8011      	strh	r1, [r2, #0]
 800bde6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d103      	bne.n	800bdf6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800bdee:	4b12      	ldr	r3, [pc, #72]	; (800be38 <udp_new_port+0x68>)
 800bdf0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800bdf4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bdf6:	4b11      	ldr	r3, [pc, #68]	; (800be3c <udp_new_port+0x6c>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	603b      	str	r3, [r7, #0]
 800bdfc:	e011      	b.n	800be22 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	8a5a      	ldrh	r2, [r3, #18]
 800be02:	4b0d      	ldr	r3, [pc, #52]	; (800be38 <udp_new_port+0x68>)
 800be04:	881b      	ldrh	r3, [r3, #0]
 800be06:	429a      	cmp	r2, r3
 800be08:	d108      	bne.n	800be1c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800be0a:	88fb      	ldrh	r3, [r7, #6]
 800be0c:	3301      	adds	r3, #1
 800be0e:	80fb      	strh	r3, [r7, #6]
 800be10:	88fb      	ldrh	r3, [r7, #6]
 800be12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be16:	d3e0      	bcc.n	800bdda <udp_new_port+0xa>
        return 0;
 800be18:	2300      	movs	r3, #0
 800be1a:	e007      	b.n	800be2c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	68db      	ldr	r3, [r3, #12]
 800be20:	603b      	str	r3, [r7, #0]
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1ea      	bne.n	800bdfe <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800be28:	4b03      	ldr	r3, [pc, #12]	; (800be38 <udp_new_port+0x68>)
 800be2a:	881b      	ldrh	r3, [r3, #0]
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	370c      	adds	r7, #12
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr
 800be38:	20000028 	.word	0x20000028
 800be3c:	20008384 	.word	0x20008384

0800be40 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	4613      	mov	r3, r2
 800be4c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d105      	bne.n	800be60 <udp_input_local_match+0x20>
 800be54:	4b27      	ldr	r3, [pc, #156]	; (800bef4 <udp_input_local_match+0xb4>)
 800be56:	2287      	movs	r2, #135	; 0x87
 800be58:	4927      	ldr	r1, [pc, #156]	; (800bef8 <udp_input_local_match+0xb8>)
 800be5a:	4828      	ldr	r0, [pc, #160]	; (800befc <udp_input_local_match+0xbc>)
 800be5c:	f002 ff40 	bl	800ece0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d105      	bne.n	800be72 <udp_input_local_match+0x32>
 800be66:	4b23      	ldr	r3, [pc, #140]	; (800bef4 <udp_input_local_match+0xb4>)
 800be68:	2288      	movs	r2, #136	; 0x88
 800be6a:	4925      	ldr	r1, [pc, #148]	; (800bf00 <udp_input_local_match+0xc0>)
 800be6c:	4823      	ldr	r0, [pc, #140]	; (800befc <udp_input_local_match+0xbc>)
 800be6e:	f002 ff37 	bl	800ece0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	7a1b      	ldrb	r3, [r3, #8]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d00b      	beq.n	800be92 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	7a1a      	ldrb	r2, [r3, #8]
 800be7e:	4b21      	ldr	r3, [pc, #132]	; (800bf04 <udp_input_local_match+0xc4>)
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be86:	3301      	adds	r3, #1
 800be88:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d001      	beq.n	800be92 <udp_input_local_match+0x52>
    return 0;
 800be8e:	2300      	movs	r3, #0
 800be90:	e02b      	b.n	800beea <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800be92:	79fb      	ldrb	r3, [r7, #7]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d018      	beq.n	800beca <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d013      	beq.n	800bec6 <udp_input_local_match+0x86>
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d00f      	beq.n	800bec6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bea6:	4b17      	ldr	r3, [pc, #92]	; (800bf04 <udp_input_local_match+0xc4>)
 800bea8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800beaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beae:	d00a      	beq.n	800bec6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	4b13      	ldr	r3, [pc, #76]	; (800bf04 <udp_input_local_match+0xc4>)
 800beb6:	695b      	ldr	r3, [r3, #20]
 800beb8:	405a      	eors	r2, r3
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	3308      	adds	r3, #8
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d110      	bne.n	800bee8 <udp_input_local_match+0xa8>
          return 1;
 800bec6:	2301      	movs	r3, #1
 800bec8:	e00f      	b.n	800beea <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d009      	beq.n	800bee4 <udp_input_local_match+0xa4>
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d005      	beq.n	800bee4 <udp_input_local_match+0xa4>
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	4b09      	ldr	r3, [pc, #36]	; (800bf04 <udp_input_local_match+0xc4>)
 800bede:	695b      	ldr	r3, [r3, #20]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d101      	bne.n	800bee8 <udp_input_local_match+0xa8>
        return 1;
 800bee4:	2301      	movs	r3, #1
 800bee6:	e000      	b.n	800beea <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	3710      	adds	r7, #16
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	08012214 	.word	0x08012214
 800bef8:	08012244 	.word	0x08012244
 800befc:	08012268 	.word	0x08012268
 800bf00:	08012290 	.word	0x08012290
 800bf04:	20004d3c 	.word	0x20004d3c

0800bf08 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bf08:	b590      	push	{r4, r7, lr}
 800bf0a:	b08d      	sub	sp, #52	; 0x34
 800bf0c:	af02      	add	r7, sp, #8
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bf12:	2300      	movs	r3, #0
 800bf14:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d105      	bne.n	800bf28 <udp_input+0x20>
 800bf1c:	4b7c      	ldr	r3, [pc, #496]	; (800c110 <udp_input+0x208>)
 800bf1e:	22cf      	movs	r2, #207	; 0xcf
 800bf20:	497c      	ldr	r1, [pc, #496]	; (800c114 <udp_input+0x20c>)
 800bf22:	487d      	ldr	r0, [pc, #500]	; (800c118 <udp_input+0x210>)
 800bf24:	f002 fedc 	bl	800ece0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d105      	bne.n	800bf3a <udp_input+0x32>
 800bf2e:	4b78      	ldr	r3, [pc, #480]	; (800c110 <udp_input+0x208>)
 800bf30:	22d0      	movs	r2, #208	; 0xd0
 800bf32:	497a      	ldr	r1, [pc, #488]	; (800c11c <udp_input+0x214>)
 800bf34:	4878      	ldr	r0, [pc, #480]	; (800c118 <udp_input+0x210>)
 800bf36:	f002 fed3 	bl	800ece0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	895b      	ldrh	r3, [r3, #10]
 800bf3e:	2b07      	cmp	r3, #7
 800bf40:	d803      	bhi.n	800bf4a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f7f9 ff46 	bl	8005dd4 <pbuf_free>
    goto end;
 800bf48:	e0de      	b.n	800c108 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bf50:	4b73      	ldr	r3, [pc, #460]	; (800c120 <udp_input+0x218>)
 800bf52:	695b      	ldr	r3, [r3, #20]
 800bf54:	4a72      	ldr	r2, [pc, #456]	; (800c120 <udp_input+0x218>)
 800bf56:	6812      	ldr	r2, [r2, #0]
 800bf58:	4611      	mov	r1, r2
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f001 ff06 	bl	800dd6c <ip4_addr_isbroadcast_u32>
 800bf60:	4603      	mov	r3, r0
 800bf62:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	881b      	ldrh	r3, [r3, #0]
 800bf68:	b29b      	uxth	r3, r3
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7f8 fb62 	bl	8004634 <lwip_htons>
 800bf70:	4603      	mov	r3, r0
 800bf72:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	885b      	ldrh	r3, [r3, #2]
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7f8 fb5a 	bl	8004634 <lwip_htons>
 800bf80:	4603      	mov	r3, r0
 800bf82:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800bf84:	2300      	movs	r3, #0
 800bf86:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf90:	4b64      	ldr	r3, [pc, #400]	; (800c124 <udp_input+0x21c>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	627b      	str	r3, [r7, #36]	; 0x24
 800bf96:	e054      	b.n	800c042 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800bf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9a:	8a5b      	ldrh	r3, [r3, #18]
 800bf9c:	89fa      	ldrh	r2, [r7, #14]
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d14a      	bne.n	800c038 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800bfa2:	7cfb      	ldrb	r3, [r7, #19]
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfaa:	f7ff ff49 	bl	800be40 <udp_input_local_match>
 800bfae:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d041      	beq.n	800c038 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb6:	7c1b      	ldrb	r3, [r3, #16]
 800bfb8:	f003 0304 	and.w	r3, r3, #4
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d11d      	bne.n	800bffc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800bfc0:	69fb      	ldr	r3, [r7, #28]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d102      	bne.n	800bfcc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800bfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc8:	61fb      	str	r3, [r7, #28]
 800bfca:	e017      	b.n	800bffc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800bfcc:	7cfb      	ldrb	r3, [r7, #19]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d014      	beq.n	800bffc <udp_input+0xf4>
 800bfd2:	4b53      	ldr	r3, [pc, #332]	; (800c120 <udp_input+0x218>)
 800bfd4:	695b      	ldr	r3, [r3, #20]
 800bfd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfda:	d10f      	bne.n	800bffc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800bfdc:	69fb      	ldr	r3, [r7, #28]
 800bfde:	681a      	ldr	r2, [r3, #0]
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	3304      	adds	r3, #4
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d008      	beq.n	800bffc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800bfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	3304      	adds	r3, #4
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d101      	bne.n	800bffc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800bff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800bffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffe:	8a9b      	ldrh	r3, [r3, #20]
 800c000:	8a3a      	ldrh	r2, [r7, #16]
 800c002:	429a      	cmp	r2, r3
 800c004:	d118      	bne.n	800c038 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c008:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d005      	beq.n	800c01a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c010:	685a      	ldr	r2, [r3, #4]
 800c012:	4b43      	ldr	r3, [pc, #268]	; (800c120 <udp_input+0x218>)
 800c014:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c016:	429a      	cmp	r2, r3
 800c018:	d10e      	bne.n	800c038 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c01a:	6a3b      	ldr	r3, [r7, #32]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d014      	beq.n	800c04a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c022:	68da      	ldr	r2, [r3, #12]
 800c024:	6a3b      	ldr	r3, [r7, #32]
 800c026:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c028:	4b3e      	ldr	r3, [pc, #248]	; (800c124 <udp_input+0x21c>)
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c030:	4a3c      	ldr	r2, [pc, #240]	; (800c124 <udp_input+0x21c>)
 800c032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c034:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c036:	e008      	b.n	800c04a <udp_input+0x142>
      }
    }

    prev = pcb;
 800c038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03e:	68db      	ldr	r3, [r3, #12]
 800c040:	627b      	str	r3, [r7, #36]	; 0x24
 800c042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c044:	2b00      	cmp	r3, #0
 800c046:	d1a7      	bne.n	800bf98 <udp_input+0x90>
 800c048:	e000      	b.n	800c04c <udp_input+0x144>
        break;
 800c04a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d101      	bne.n	800c056 <udp_input+0x14e>
    pcb = uncon_pcb;
 800c052:	69fb      	ldr	r3, [r7, #28]
 800c054:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d002      	beq.n	800c062 <udp_input+0x15a>
    for_us = 1;
 800c05c:	2301      	movs	r3, #1
 800c05e:	76fb      	strb	r3, [r7, #27]
 800c060:	e00a      	b.n	800c078 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	3304      	adds	r3, #4
 800c066:	681a      	ldr	r2, [r3, #0]
 800c068:	4b2d      	ldr	r3, [pc, #180]	; (800c120 <udp_input+0x218>)
 800c06a:	695b      	ldr	r3, [r3, #20]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	bf0c      	ite	eq
 800c070:	2301      	moveq	r3, #1
 800c072:	2300      	movne	r3, #0
 800c074:	b2db      	uxtb	r3, r3
 800c076:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c078:	7efb      	ldrb	r3, [r7, #27]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d041      	beq.n	800c102 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c07e:	2108      	movs	r1, #8
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f7f9 fe21 	bl	8005cc8 <pbuf_remove_header>
 800c086:	4603      	mov	r3, r0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00a      	beq.n	800c0a2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c08c:	4b20      	ldr	r3, [pc, #128]	; (800c110 <udp_input+0x208>)
 800c08e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c092:	4925      	ldr	r1, [pc, #148]	; (800c128 <udp_input+0x220>)
 800c094:	4820      	ldr	r0, [pc, #128]	; (800c118 <udp_input+0x210>)
 800c096:	f002 fe23 	bl	800ece0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f7f9 fe9a 	bl	8005dd4 <pbuf_free>
      goto end;
 800c0a0:	e032      	b.n	800c108 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d012      	beq.n	800c0ce <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0aa:	699b      	ldr	r3, [r3, #24]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d00a      	beq.n	800c0c6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b2:	699c      	ldr	r4, [r3, #24]
 800c0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b6:	69d8      	ldr	r0, [r3, #28]
 800c0b8:	8a3b      	ldrh	r3, [r7, #16]
 800c0ba:	9300      	str	r3, [sp, #0]
 800c0bc:	4b1b      	ldr	r3, [pc, #108]	; (800c12c <udp_input+0x224>)
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0c2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c0c4:	e021      	b.n	800c10a <udp_input+0x202>
        pbuf_free(p);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f7f9 fe84 	bl	8005dd4 <pbuf_free>
        goto end;
 800c0cc:	e01c      	b.n	800c108 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c0ce:	7cfb      	ldrb	r3, [r7, #19]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d112      	bne.n	800c0fa <udp_input+0x1f2>
 800c0d4:	4b12      	ldr	r3, [pc, #72]	; (800c120 <udp_input+0x218>)
 800c0d6:	695b      	ldr	r3, [r3, #20]
 800c0d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0dc:	2be0      	cmp	r3, #224	; 0xe0
 800c0de:	d00c      	beq.n	800c0fa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c0e0:	4b0f      	ldr	r3, [pc, #60]	; (800c120 <udp_input+0x218>)
 800c0e2:	899b      	ldrh	r3, [r3, #12]
 800c0e4:	3308      	adds	r3, #8
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	b21b      	sxth	r3, r3
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f7f9 fe5e 	bl	8005dae <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c0f2:	2103      	movs	r1, #3
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f001 fb0d 	bl	800d714 <icmp_dest_unreach>
      pbuf_free(p);
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f7f9 fe6a 	bl	8005dd4 <pbuf_free>
  return;
 800c100:	e003      	b.n	800c10a <udp_input+0x202>
    pbuf_free(p);
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f7f9 fe66 	bl	8005dd4 <pbuf_free>
  return;
 800c108:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c10a:	372c      	adds	r7, #44	; 0x2c
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd90      	pop	{r4, r7, pc}
 800c110:	08012214 	.word	0x08012214
 800c114:	080122b8 	.word	0x080122b8
 800c118:	08012268 	.word	0x08012268
 800c11c:	080122d0 	.word	0x080122d0
 800c120:	20004d3c 	.word	0x20004d3c
 800c124:	20008384 	.word	0x20008384
 800c128:	080122ec 	.word	0x080122ec
 800c12c:	20004d4c 	.word	0x20004d4c

0800c130 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d109      	bne.n	800c154 <udp_send+0x24>
 800c140:	4b11      	ldr	r3, [pc, #68]	; (800c188 <udp_send+0x58>)
 800c142:	f240 12d5 	movw	r2, #469	; 0x1d5
 800c146:	4911      	ldr	r1, [pc, #68]	; (800c18c <udp_send+0x5c>)
 800c148:	4811      	ldr	r0, [pc, #68]	; (800c190 <udp_send+0x60>)
 800c14a:	f002 fdc9 	bl	800ece0 <iprintf>
 800c14e:	f06f 030f 	mvn.w	r3, #15
 800c152:	e015      	b.n	800c180 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d109      	bne.n	800c16e <udp_send+0x3e>
 800c15a:	4b0b      	ldr	r3, [pc, #44]	; (800c188 <udp_send+0x58>)
 800c15c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800c160:	490c      	ldr	r1, [pc, #48]	; (800c194 <udp_send+0x64>)
 800c162:	480b      	ldr	r0, [pc, #44]	; (800c190 <udp_send+0x60>)
 800c164:	f002 fdbc 	bl	800ece0 <iprintf>
 800c168:	f06f 030f 	mvn.w	r3, #15
 800c16c:	e008      	b.n	800c180 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	1d1a      	adds	r2, r3, #4
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	8a9b      	ldrh	r3, [r3, #20]
 800c176:	6839      	ldr	r1, [r7, #0]
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 f80d 	bl	800c198 <udp_sendto>
 800c17e:	4603      	mov	r3, r0
}
 800c180:	4618      	mov	r0, r3
 800c182:	3708      	adds	r7, #8
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	08012214 	.word	0x08012214
 800c18c:	08012308 	.word	0x08012308
 800c190:	08012268 	.word	0x08012268
 800c194:	08012320 	.word	0x08012320

0800c198 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b088      	sub	sp, #32
 800c19c:	af02      	add	r7, sp, #8
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	607a      	str	r2, [r7, #4]
 800c1a4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d109      	bne.n	800c1c0 <udp_sendto+0x28>
 800c1ac:	4b23      	ldr	r3, [pc, #140]	; (800c23c <udp_sendto+0xa4>)
 800c1ae:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c1b2:	4923      	ldr	r1, [pc, #140]	; (800c240 <udp_sendto+0xa8>)
 800c1b4:	4823      	ldr	r0, [pc, #140]	; (800c244 <udp_sendto+0xac>)
 800c1b6:	f002 fd93 	bl	800ece0 <iprintf>
 800c1ba:	f06f 030f 	mvn.w	r3, #15
 800c1be:	e038      	b.n	800c232 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d109      	bne.n	800c1da <udp_sendto+0x42>
 800c1c6:	4b1d      	ldr	r3, [pc, #116]	; (800c23c <udp_sendto+0xa4>)
 800c1c8:	f240 2219 	movw	r2, #537	; 0x219
 800c1cc:	491e      	ldr	r1, [pc, #120]	; (800c248 <udp_sendto+0xb0>)
 800c1ce:	481d      	ldr	r0, [pc, #116]	; (800c244 <udp_sendto+0xac>)
 800c1d0:	f002 fd86 	bl	800ece0 <iprintf>
 800c1d4:	f06f 030f 	mvn.w	r3, #15
 800c1d8:	e02b      	b.n	800c232 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d109      	bne.n	800c1f4 <udp_sendto+0x5c>
 800c1e0:	4b16      	ldr	r3, [pc, #88]	; (800c23c <udp_sendto+0xa4>)
 800c1e2:	f240 221a 	movw	r2, #538	; 0x21a
 800c1e6:	4919      	ldr	r1, [pc, #100]	; (800c24c <udp_sendto+0xb4>)
 800c1e8:	4816      	ldr	r0, [pc, #88]	; (800c244 <udp_sendto+0xac>)
 800c1ea:	f002 fd79 	bl	800ece0 <iprintf>
 800c1ee:	f06f 030f 	mvn.w	r3, #15
 800c1f2:	e01e      	b.n	800c232 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	7a1b      	ldrb	r3, [r3, #8]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d006      	beq.n	800c20a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	7a1b      	ldrb	r3, [r3, #8]
 800c200:	4618      	mov	r0, r3
 800c202:	f7f9 fa87 	bl	8005714 <netif_get_by_index>
 800c206:	6178      	str	r0, [r7, #20]
 800c208:	e003      	b.n	800c212 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f001 fb0c 	bl	800d828 <ip4_route>
 800c210:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d102      	bne.n	800c21e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800c218:	f06f 0303 	mvn.w	r3, #3
 800c21c:	e009      	b.n	800c232 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800c21e:	887a      	ldrh	r2, [r7, #2]
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	9300      	str	r3, [sp, #0]
 800c224:	4613      	mov	r3, r2
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	68b9      	ldr	r1, [r7, #8]
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	f000 f810 	bl	800c250 <udp_sendto_if>
 800c230:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c232:	4618      	mov	r0, r3
 800c234:	3718      	adds	r7, #24
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	08012214 	.word	0x08012214
 800c240:	08012338 	.word	0x08012338
 800c244:	08012268 	.word	0x08012268
 800c248:	08012350 	.word	0x08012350
 800c24c:	0801236c 	.word	0x0801236c

0800c250 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b088      	sub	sp, #32
 800c254:	af02      	add	r7, sp, #8
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
 800c25c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d109      	bne.n	800c278 <udp_sendto_if+0x28>
 800c264:	4b2e      	ldr	r3, [pc, #184]	; (800c320 <udp_sendto_if+0xd0>)
 800c266:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c26a:	492e      	ldr	r1, [pc, #184]	; (800c324 <udp_sendto_if+0xd4>)
 800c26c:	482e      	ldr	r0, [pc, #184]	; (800c328 <udp_sendto_if+0xd8>)
 800c26e:	f002 fd37 	bl	800ece0 <iprintf>
 800c272:	f06f 030f 	mvn.w	r3, #15
 800c276:	e04f      	b.n	800c318 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d109      	bne.n	800c292 <udp_sendto_if+0x42>
 800c27e:	4b28      	ldr	r3, [pc, #160]	; (800c320 <udp_sendto_if+0xd0>)
 800c280:	f240 2281 	movw	r2, #641	; 0x281
 800c284:	4929      	ldr	r1, [pc, #164]	; (800c32c <udp_sendto_if+0xdc>)
 800c286:	4828      	ldr	r0, [pc, #160]	; (800c328 <udp_sendto_if+0xd8>)
 800c288:	f002 fd2a 	bl	800ece0 <iprintf>
 800c28c:	f06f 030f 	mvn.w	r3, #15
 800c290:	e042      	b.n	800c318 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d109      	bne.n	800c2ac <udp_sendto_if+0x5c>
 800c298:	4b21      	ldr	r3, [pc, #132]	; (800c320 <udp_sendto_if+0xd0>)
 800c29a:	f240 2282 	movw	r2, #642	; 0x282
 800c29e:	4924      	ldr	r1, [pc, #144]	; (800c330 <udp_sendto_if+0xe0>)
 800c2a0:	4821      	ldr	r0, [pc, #132]	; (800c328 <udp_sendto_if+0xd8>)
 800c2a2:	f002 fd1d 	bl	800ece0 <iprintf>
 800c2a6:	f06f 030f 	mvn.w	r3, #15
 800c2aa:	e035      	b.n	800c318 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c2ac:	6a3b      	ldr	r3, [r7, #32]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d109      	bne.n	800c2c6 <udp_sendto_if+0x76>
 800c2b2:	4b1b      	ldr	r3, [pc, #108]	; (800c320 <udp_sendto_if+0xd0>)
 800c2b4:	f240 2283 	movw	r2, #643	; 0x283
 800c2b8:	491e      	ldr	r1, [pc, #120]	; (800c334 <udp_sendto_if+0xe4>)
 800c2ba:	481b      	ldr	r0, [pc, #108]	; (800c328 <udp_sendto_if+0xd8>)
 800c2bc:	f002 fd10 	bl	800ece0 <iprintf>
 800c2c0:	f06f 030f 	mvn.w	r3, #15
 800c2c4:	e028      	b.n	800c318 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d009      	beq.n	800c2e0 <udp_sendto_if+0x90>
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d005      	beq.n	800c2e0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c2dc:	2be0      	cmp	r3, #224	; 0xe0
 800c2de:	d103      	bne.n	800c2e8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c2e0:	6a3b      	ldr	r3, [r7, #32]
 800c2e2:	3304      	adds	r3, #4
 800c2e4:	617b      	str	r3, [r7, #20]
 800c2e6:	e00b      	b.n	800c300 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	6a3b      	ldr	r3, [r7, #32]
 800c2ee:	3304      	adds	r3, #4
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d002      	beq.n	800c2fc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c2f6:	f06f 0303 	mvn.w	r3, #3
 800c2fa:	e00d      	b.n	800c318 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c300:	887a      	ldrh	r2, [r7, #2]
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	9301      	str	r3, [sp, #4]
 800c306:	6a3b      	ldr	r3, [r7, #32]
 800c308:	9300      	str	r3, [sp, #0]
 800c30a:	4613      	mov	r3, r2
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	68b9      	ldr	r1, [r7, #8]
 800c310:	68f8      	ldr	r0, [r7, #12]
 800c312:	f000 f811 	bl	800c338 <udp_sendto_if_src>
 800c316:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3718      	adds	r7, #24
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	08012214 	.word	0x08012214
 800c324:	08012388 	.word	0x08012388
 800c328:	08012268 	.word	0x08012268
 800c32c:	080123a4 	.word	0x080123a4
 800c330:	080123c0 	.word	0x080123c0
 800c334:	080123e0 	.word	0x080123e0

0800c338 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b08c      	sub	sp, #48	; 0x30
 800c33c:	af04      	add	r7, sp, #16
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	607a      	str	r2, [r7, #4]
 800c344:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d109      	bne.n	800c360 <udp_sendto_if_src+0x28>
 800c34c:	4b65      	ldr	r3, [pc, #404]	; (800c4e4 <udp_sendto_if_src+0x1ac>)
 800c34e:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c352:	4965      	ldr	r1, [pc, #404]	; (800c4e8 <udp_sendto_if_src+0x1b0>)
 800c354:	4865      	ldr	r0, [pc, #404]	; (800c4ec <udp_sendto_if_src+0x1b4>)
 800c356:	f002 fcc3 	bl	800ece0 <iprintf>
 800c35a:	f06f 030f 	mvn.w	r3, #15
 800c35e:	e0bc      	b.n	800c4da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d109      	bne.n	800c37a <udp_sendto_if_src+0x42>
 800c366:	4b5f      	ldr	r3, [pc, #380]	; (800c4e4 <udp_sendto_if_src+0x1ac>)
 800c368:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c36c:	4960      	ldr	r1, [pc, #384]	; (800c4f0 <udp_sendto_if_src+0x1b8>)
 800c36e:	485f      	ldr	r0, [pc, #380]	; (800c4ec <udp_sendto_if_src+0x1b4>)
 800c370:	f002 fcb6 	bl	800ece0 <iprintf>
 800c374:	f06f 030f 	mvn.w	r3, #15
 800c378:	e0af      	b.n	800c4da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d109      	bne.n	800c394 <udp_sendto_if_src+0x5c>
 800c380:	4b58      	ldr	r3, [pc, #352]	; (800c4e4 <udp_sendto_if_src+0x1ac>)
 800c382:	f240 22d3 	movw	r2, #723	; 0x2d3
 800c386:	495b      	ldr	r1, [pc, #364]	; (800c4f4 <udp_sendto_if_src+0x1bc>)
 800c388:	4858      	ldr	r0, [pc, #352]	; (800c4ec <udp_sendto_if_src+0x1b4>)
 800c38a:	f002 fca9 	bl	800ece0 <iprintf>
 800c38e:	f06f 030f 	mvn.w	r3, #15
 800c392:	e0a2      	b.n	800c4da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c396:	2b00      	cmp	r3, #0
 800c398:	d109      	bne.n	800c3ae <udp_sendto_if_src+0x76>
 800c39a:	4b52      	ldr	r3, [pc, #328]	; (800c4e4 <udp_sendto_if_src+0x1ac>)
 800c39c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c3a0:	4955      	ldr	r1, [pc, #340]	; (800c4f8 <udp_sendto_if_src+0x1c0>)
 800c3a2:	4852      	ldr	r0, [pc, #328]	; (800c4ec <udp_sendto_if_src+0x1b4>)
 800c3a4:	f002 fc9c 	bl	800ece0 <iprintf>
 800c3a8:	f06f 030f 	mvn.w	r3, #15
 800c3ac:	e095      	b.n	800c4da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d109      	bne.n	800c3c8 <udp_sendto_if_src+0x90>
 800c3b4:	4b4b      	ldr	r3, [pc, #300]	; (800c4e4 <udp_sendto_if_src+0x1ac>)
 800c3b6:	f240 22d5 	movw	r2, #725	; 0x2d5
 800c3ba:	4950      	ldr	r1, [pc, #320]	; (800c4fc <udp_sendto_if_src+0x1c4>)
 800c3bc:	484b      	ldr	r0, [pc, #300]	; (800c4ec <udp_sendto_if_src+0x1b4>)
 800c3be:	f002 fc8f 	bl	800ece0 <iprintf>
 800c3c2:	f06f 030f 	mvn.w	r3, #15
 800c3c6:	e088      	b.n	800c4da <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	8a5b      	ldrh	r3, [r3, #18]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d10f      	bne.n	800c3f0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c3d0:	68f9      	ldr	r1, [r7, #12]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	8a5b      	ldrh	r3, [r3, #18]
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	68f8      	ldr	r0, [r7, #12]
 800c3da:	f000 f893 	bl	800c504 <udp_bind>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800c3e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d002      	beq.n	800c3f0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800c3ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c3ee:	e074      	b.n	800c4da <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	891b      	ldrh	r3, [r3, #8]
 800c3f4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d902      	bls.n	800c402 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800c3fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c400:	e06b      	b.n	800c4da <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c402:	2108      	movs	r1, #8
 800c404:	68b8      	ldr	r0, [r7, #8]
 800c406:	f7f9 fc4f 	bl	8005ca8 <pbuf_add_header>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d015      	beq.n	800c43c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c410:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c414:	2108      	movs	r1, #8
 800c416:	2022      	movs	r0, #34	; 0x22
 800c418:	f7f9 f9f8 	bl	800580c <pbuf_alloc>
 800c41c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c41e:	69fb      	ldr	r3, [r7, #28]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d102      	bne.n	800c42a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c424:	f04f 33ff 	mov.w	r3, #4294967295
 800c428:	e057      	b.n	800c4da <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	891b      	ldrh	r3, [r3, #8]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d006      	beq.n	800c440 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c432:	68b9      	ldr	r1, [r7, #8]
 800c434:	69f8      	ldr	r0, [r7, #28]
 800c436:	f7f9 fde5 	bl	8006004 <pbuf_chain>
 800c43a:	e001      	b.n	800c440 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	895b      	ldrh	r3, [r3, #10]
 800c444:	2b07      	cmp	r3, #7
 800c446:	d806      	bhi.n	800c456 <udp_sendto_if_src+0x11e>
 800c448:	4b26      	ldr	r3, [pc, #152]	; (800c4e4 <udp_sendto_if_src+0x1ac>)
 800c44a:	f240 320d 	movw	r2, #781	; 0x30d
 800c44e:	492c      	ldr	r1, [pc, #176]	; (800c500 <udp_sendto_if_src+0x1c8>)
 800c450:	4826      	ldr	r0, [pc, #152]	; (800c4ec <udp_sendto_if_src+0x1b4>)
 800c452:	f002 fc45 	bl	800ece0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c456:	69fb      	ldr	r3, [r7, #28]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	8a5b      	ldrh	r3, [r3, #18]
 800c460:	4618      	mov	r0, r3
 800c462:	f7f8 f8e7 	bl	8004634 <lwip_htons>
 800c466:	4603      	mov	r3, r0
 800c468:	461a      	mov	r2, r3
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c46e:	887b      	ldrh	r3, [r7, #2]
 800c470:	4618      	mov	r0, r3
 800c472:	f7f8 f8df 	bl	8004634 <lwip_htons>
 800c476:	4603      	mov	r3, r0
 800c478:	461a      	mov	r2, r3
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	2200      	movs	r2, #0
 800c482:	719a      	strb	r2, [r3, #6]
 800c484:	2200      	movs	r2, #0
 800c486:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	891b      	ldrh	r3, [r3, #8]
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7f8 f8d1 	bl	8004634 <lwip_htons>
 800c492:	4603      	mov	r3, r0
 800c494:	461a      	mov	r2, r3
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c49a:	2311      	movs	r3, #17
 800c49c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	7adb      	ldrb	r3, [r3, #11]
 800c4a2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	7a9b      	ldrb	r3, [r3, #10]
 800c4a8:	7cb9      	ldrb	r1, [r7, #18]
 800c4aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4ac:	9202      	str	r2, [sp, #8]
 800c4ae:	7cfa      	ldrb	r2, [r7, #19]
 800c4b0:	9201      	str	r2, [sp, #4]
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4ba:	69f8      	ldr	r0, [r7, #28]
 800c4bc:	f001 fba8 	bl	800dc10 <ip4_output_if_src>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800c4c4:	69fa      	ldr	r2, [r7, #28]
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d004      	beq.n	800c4d6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800c4cc:	69f8      	ldr	r0, [r7, #28]
 800c4ce:	f7f9 fc81 	bl	8005dd4 <pbuf_free>
    q = NULL;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800c4d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3720      	adds	r7, #32
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	08012214 	.word	0x08012214
 800c4e8:	08012400 	.word	0x08012400
 800c4ec:	08012268 	.word	0x08012268
 800c4f0:	08012420 	.word	0x08012420
 800c4f4:	08012440 	.word	0x08012440
 800c4f8:	08012464 	.word	0x08012464
 800c4fc:	08012488 	.word	0x08012488
 800c500:	080124ac 	.word	0x080124ac

0800c504 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b086      	sub	sp, #24
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	4613      	mov	r3, r2
 800c510:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d101      	bne.n	800c51c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c518:	4b39      	ldr	r3, [pc, #228]	; (800c600 <udp_bind+0xfc>)
 800c51a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d109      	bne.n	800c536 <udp_bind+0x32>
 800c522:	4b38      	ldr	r3, [pc, #224]	; (800c604 <udp_bind+0x100>)
 800c524:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c528:	4937      	ldr	r1, [pc, #220]	; (800c608 <udp_bind+0x104>)
 800c52a:	4838      	ldr	r0, [pc, #224]	; (800c60c <udp_bind+0x108>)
 800c52c:	f002 fbd8 	bl	800ece0 <iprintf>
 800c530:	f06f 030f 	mvn.w	r3, #15
 800c534:	e060      	b.n	800c5f8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c536:	2300      	movs	r3, #0
 800c538:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c53a:	4b35      	ldr	r3, [pc, #212]	; (800c610 <udp_bind+0x10c>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	617b      	str	r3, [r7, #20]
 800c540:	e009      	b.n	800c556 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c542:	68fa      	ldr	r2, [r7, #12]
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	429a      	cmp	r2, r3
 800c548:	d102      	bne.n	800c550 <udp_bind+0x4c>
      rebind = 1;
 800c54a:	2301      	movs	r3, #1
 800c54c:	74fb      	strb	r3, [r7, #19]
      break;
 800c54e:	e005      	b.n	800c55c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	68db      	ldr	r3, [r3, #12]
 800c554:	617b      	str	r3, [r7, #20]
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d1f2      	bne.n	800c542 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c55c:	88fb      	ldrh	r3, [r7, #6]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d109      	bne.n	800c576 <udp_bind+0x72>
    port = udp_new_port();
 800c562:	f7ff fc35 	bl	800bdd0 <udp_new_port>
 800c566:	4603      	mov	r3, r0
 800c568:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c56a:	88fb      	ldrh	r3, [r7, #6]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d12c      	bne.n	800c5ca <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c570:	f06f 0307 	mvn.w	r3, #7
 800c574:	e040      	b.n	800c5f8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c576:	4b26      	ldr	r3, [pc, #152]	; (800c610 <udp_bind+0x10c>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	617b      	str	r3, [r7, #20]
 800c57c:	e022      	b.n	800c5c4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	429a      	cmp	r2, r3
 800c584:	d01b      	beq.n	800c5be <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	8a5b      	ldrh	r3, [r3, #18]
 800c58a:	88fa      	ldrh	r2, [r7, #6]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d116      	bne.n	800c5be <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c598:	429a      	cmp	r2, r3
 800c59a:	d00d      	beq.n	800c5b8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d00a      	beq.n	800c5b8 <udp_bind+0xb4>
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d006      	beq.n	800c5b8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c5aa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d003      	beq.n	800c5b8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d102      	bne.n	800c5be <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c5b8:	f06f 0307 	mvn.w	r3, #7
 800c5bc:	e01c      	b.n	800c5f8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	617b      	str	r3, [r7, #20]
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d1d9      	bne.n	800c57e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d002      	beq.n	800c5d6 <udp_bind+0xd2>
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	e000      	b.n	800c5d8 <udp_bind+0xd4>
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	88fa      	ldrh	r2, [r7, #6]
 800c5e0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c5e2:	7cfb      	ldrb	r3, [r7, #19]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d106      	bne.n	800c5f6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c5e8:	4b09      	ldr	r3, [pc, #36]	; (800c610 <udp_bind+0x10c>)
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c5f0:	4a07      	ldr	r2, [pc, #28]	; (800c610 <udp_bind+0x10c>)
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c5f6:	2300      	movs	r3, #0
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3718      	adds	r7, #24
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	08012d38 	.word	0x08012d38
 800c604:	08012214 	.word	0x08012214
 800c608:	080124dc 	.word	0x080124dc
 800c60c:	08012268 	.word	0x08012268
 800c610:	20008384 	.word	0x20008384

0800c614 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c614:	b480      	push	{r7}
 800c616:	b085      	sub	sp, #20
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d01e      	beq.n	800c662 <udp_netif_ip_addr_changed+0x4e>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d01a      	beq.n	800c662 <udp_netif_ip_addr_changed+0x4e>
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d017      	beq.n	800c662 <udp_netif_ip_addr_changed+0x4e>
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d013      	beq.n	800c662 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c63a:	4b0d      	ldr	r3, [pc, #52]	; (800c670 <udp_netif_ip_addr_changed+0x5c>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	60fb      	str	r3, [r7, #12]
 800c640:	e00c      	b.n	800c65c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d103      	bne.n	800c656 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	68db      	ldr	r3, [r3, #12]
 800c65a:	60fb      	str	r3, [r7, #12]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d1ef      	bne.n	800c642 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c662:	bf00      	nop
 800c664:	3714      	adds	r7, #20
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr
 800c66e:	bf00      	nop
 800c670:	20008384 	.word	0x20008384

0800c674 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c67c:	4915      	ldr	r1, [pc, #84]	; (800c6d4 <etharp_free_entry+0x60>)
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	4613      	mov	r3, r2
 800c682:	005b      	lsls	r3, r3, #1
 800c684:	4413      	add	r3, r2
 800c686:	00db      	lsls	r3, r3, #3
 800c688:	440b      	add	r3, r1
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d013      	beq.n	800c6b8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c690:	4910      	ldr	r1, [pc, #64]	; (800c6d4 <etharp_free_entry+0x60>)
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	4613      	mov	r3, r2
 800c696:	005b      	lsls	r3, r3, #1
 800c698:	4413      	add	r3, r2
 800c69a:	00db      	lsls	r3, r3, #3
 800c69c:	440b      	add	r3, r1
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7f9 fb97 	bl	8005dd4 <pbuf_free>
    arp_table[i].q = NULL;
 800c6a6:	490b      	ldr	r1, [pc, #44]	; (800c6d4 <etharp_free_entry+0x60>)
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	005b      	lsls	r3, r3, #1
 800c6ae:	4413      	add	r3, r2
 800c6b0:	00db      	lsls	r3, r3, #3
 800c6b2:	440b      	add	r3, r1
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c6b8:	4906      	ldr	r1, [pc, #24]	; (800c6d4 <etharp_free_entry+0x60>)
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	4613      	mov	r3, r2
 800c6be:	005b      	lsls	r3, r3, #1
 800c6c0:	4413      	add	r3, r2
 800c6c2:	00db      	lsls	r3, r3, #3
 800c6c4:	440b      	add	r3, r1
 800c6c6:	3314      	adds	r3, #20
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c6cc:	bf00      	nop
 800c6ce:	3708      	adds	r7, #8
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	20008388 	.word	0x20008388

0800c6d8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c6de:	2300      	movs	r3, #0
 800c6e0:	607b      	str	r3, [r7, #4]
 800c6e2:	e096      	b.n	800c812 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c6e4:	494f      	ldr	r1, [pc, #316]	; (800c824 <etharp_tmr+0x14c>)
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	4613      	mov	r3, r2
 800c6ea:	005b      	lsls	r3, r3, #1
 800c6ec:	4413      	add	r3, r2
 800c6ee:	00db      	lsls	r3, r3, #3
 800c6f0:	440b      	add	r3, r1
 800c6f2:	3314      	adds	r3, #20
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c6f8:	78fb      	ldrb	r3, [r7, #3]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	f000 8086 	beq.w	800c80c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c700:	4948      	ldr	r1, [pc, #288]	; (800c824 <etharp_tmr+0x14c>)
 800c702:	687a      	ldr	r2, [r7, #4]
 800c704:	4613      	mov	r3, r2
 800c706:	005b      	lsls	r3, r3, #1
 800c708:	4413      	add	r3, r2
 800c70a:	00db      	lsls	r3, r3, #3
 800c70c:	440b      	add	r3, r1
 800c70e:	3312      	adds	r3, #18
 800c710:	881b      	ldrh	r3, [r3, #0]
 800c712:	3301      	adds	r3, #1
 800c714:	b298      	uxth	r0, r3
 800c716:	4943      	ldr	r1, [pc, #268]	; (800c824 <etharp_tmr+0x14c>)
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	4613      	mov	r3, r2
 800c71c:	005b      	lsls	r3, r3, #1
 800c71e:	4413      	add	r3, r2
 800c720:	00db      	lsls	r3, r3, #3
 800c722:	440b      	add	r3, r1
 800c724:	3312      	adds	r3, #18
 800c726:	4602      	mov	r2, r0
 800c728:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c72a:	493e      	ldr	r1, [pc, #248]	; (800c824 <etharp_tmr+0x14c>)
 800c72c:	687a      	ldr	r2, [r7, #4]
 800c72e:	4613      	mov	r3, r2
 800c730:	005b      	lsls	r3, r3, #1
 800c732:	4413      	add	r3, r2
 800c734:	00db      	lsls	r3, r3, #3
 800c736:	440b      	add	r3, r1
 800c738:	3312      	adds	r3, #18
 800c73a:	881b      	ldrh	r3, [r3, #0]
 800c73c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c740:	d215      	bcs.n	800c76e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c742:	4938      	ldr	r1, [pc, #224]	; (800c824 <etharp_tmr+0x14c>)
 800c744:	687a      	ldr	r2, [r7, #4]
 800c746:	4613      	mov	r3, r2
 800c748:	005b      	lsls	r3, r3, #1
 800c74a:	4413      	add	r3, r2
 800c74c:	00db      	lsls	r3, r3, #3
 800c74e:	440b      	add	r3, r1
 800c750:	3314      	adds	r3, #20
 800c752:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c754:	2b01      	cmp	r3, #1
 800c756:	d10e      	bne.n	800c776 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c758:	4932      	ldr	r1, [pc, #200]	; (800c824 <etharp_tmr+0x14c>)
 800c75a:	687a      	ldr	r2, [r7, #4]
 800c75c:	4613      	mov	r3, r2
 800c75e:	005b      	lsls	r3, r3, #1
 800c760:	4413      	add	r3, r2
 800c762:	00db      	lsls	r3, r3, #3
 800c764:	440b      	add	r3, r1
 800c766:	3312      	adds	r3, #18
 800c768:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c76a:	2b04      	cmp	r3, #4
 800c76c:	d903      	bls.n	800c776 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f7ff ff80 	bl	800c674 <etharp_free_entry>
 800c774:	e04a      	b.n	800c80c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c776:	492b      	ldr	r1, [pc, #172]	; (800c824 <etharp_tmr+0x14c>)
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	4613      	mov	r3, r2
 800c77c:	005b      	lsls	r3, r3, #1
 800c77e:	4413      	add	r3, r2
 800c780:	00db      	lsls	r3, r3, #3
 800c782:	440b      	add	r3, r1
 800c784:	3314      	adds	r3, #20
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	2b03      	cmp	r3, #3
 800c78a:	d10a      	bne.n	800c7a2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c78c:	4925      	ldr	r1, [pc, #148]	; (800c824 <etharp_tmr+0x14c>)
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	4613      	mov	r3, r2
 800c792:	005b      	lsls	r3, r3, #1
 800c794:	4413      	add	r3, r2
 800c796:	00db      	lsls	r3, r3, #3
 800c798:	440b      	add	r3, r1
 800c79a:	3314      	adds	r3, #20
 800c79c:	2204      	movs	r2, #4
 800c79e:	701a      	strb	r2, [r3, #0]
 800c7a0:	e034      	b.n	800c80c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c7a2:	4920      	ldr	r1, [pc, #128]	; (800c824 <etharp_tmr+0x14c>)
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	4613      	mov	r3, r2
 800c7a8:	005b      	lsls	r3, r3, #1
 800c7aa:	4413      	add	r3, r2
 800c7ac:	00db      	lsls	r3, r3, #3
 800c7ae:	440b      	add	r3, r1
 800c7b0:	3314      	adds	r3, #20
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	2b04      	cmp	r3, #4
 800c7b6:	d10a      	bne.n	800c7ce <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c7b8:	491a      	ldr	r1, [pc, #104]	; (800c824 <etharp_tmr+0x14c>)
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	4613      	mov	r3, r2
 800c7be:	005b      	lsls	r3, r3, #1
 800c7c0:	4413      	add	r3, r2
 800c7c2:	00db      	lsls	r3, r3, #3
 800c7c4:	440b      	add	r3, r1
 800c7c6:	3314      	adds	r3, #20
 800c7c8:	2202      	movs	r2, #2
 800c7ca:	701a      	strb	r2, [r3, #0]
 800c7cc:	e01e      	b.n	800c80c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c7ce:	4915      	ldr	r1, [pc, #84]	; (800c824 <etharp_tmr+0x14c>)
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	005b      	lsls	r3, r3, #1
 800c7d6:	4413      	add	r3, r2
 800c7d8:	00db      	lsls	r3, r3, #3
 800c7da:	440b      	add	r3, r1
 800c7dc:	3314      	adds	r3, #20
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d113      	bne.n	800c80c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c7e4:	490f      	ldr	r1, [pc, #60]	; (800c824 <etharp_tmr+0x14c>)
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	4613      	mov	r3, r2
 800c7ea:	005b      	lsls	r3, r3, #1
 800c7ec:	4413      	add	r3, r2
 800c7ee:	00db      	lsls	r3, r3, #3
 800c7f0:	440b      	add	r3, r1
 800c7f2:	3308      	adds	r3, #8
 800c7f4:	6818      	ldr	r0, [r3, #0]
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	4613      	mov	r3, r2
 800c7fa:	005b      	lsls	r3, r3, #1
 800c7fc:	4413      	add	r3, r2
 800c7fe:	00db      	lsls	r3, r3, #3
 800c800:	4a08      	ldr	r2, [pc, #32]	; (800c824 <etharp_tmr+0x14c>)
 800c802:	4413      	add	r3, r2
 800c804:	3304      	adds	r3, #4
 800c806:	4619      	mov	r1, r3
 800c808:	f000 fe6e 	bl	800d4e8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	3301      	adds	r3, #1
 800c810:	607b      	str	r3, [r7, #4]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2b09      	cmp	r3, #9
 800c816:	f77f af65 	ble.w	800c6e4 <etharp_tmr+0xc>
      }
    }
  }
}
 800c81a:	bf00      	nop
 800c81c:	bf00      	nop
 800c81e:	3708      	adds	r7, #8
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	20008388 	.word	0x20008388

0800c828 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b08a      	sub	sp, #40	; 0x28
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	460b      	mov	r3, r1
 800c832:	607a      	str	r2, [r7, #4]
 800c834:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c836:	230a      	movs	r3, #10
 800c838:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c83a:	230a      	movs	r3, #10
 800c83c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c83e:	230a      	movs	r3, #10
 800c840:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c842:	2300      	movs	r3, #0
 800c844:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c846:	230a      	movs	r3, #10
 800c848:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c84a:	2300      	movs	r3, #0
 800c84c:	83bb      	strh	r3, [r7, #28]
 800c84e:	2300      	movs	r3, #0
 800c850:	837b      	strh	r3, [r7, #26]
 800c852:	2300      	movs	r3, #0
 800c854:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c856:	2300      	movs	r3, #0
 800c858:	843b      	strh	r3, [r7, #32]
 800c85a:	e0ae      	b.n	800c9ba <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c85c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c860:	49a6      	ldr	r1, [pc, #664]	; (800cafc <etharp_find_entry+0x2d4>)
 800c862:	4613      	mov	r3, r2
 800c864:	005b      	lsls	r3, r3, #1
 800c866:	4413      	add	r3, r2
 800c868:	00db      	lsls	r3, r3, #3
 800c86a:	440b      	add	r3, r1
 800c86c:	3314      	adds	r3, #20
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c872:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c876:	2b0a      	cmp	r3, #10
 800c878:	d105      	bne.n	800c886 <etharp_find_entry+0x5e>
 800c87a:	7dfb      	ldrb	r3, [r7, #23]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d102      	bne.n	800c886 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c880:	8c3b      	ldrh	r3, [r7, #32]
 800c882:	847b      	strh	r3, [r7, #34]	; 0x22
 800c884:	e095      	b.n	800c9b2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c886:	7dfb      	ldrb	r3, [r7, #23]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	f000 8092 	beq.w	800c9b2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c88e:	7dfb      	ldrb	r3, [r7, #23]
 800c890:	2b01      	cmp	r3, #1
 800c892:	d009      	beq.n	800c8a8 <etharp_find_entry+0x80>
 800c894:	7dfb      	ldrb	r3, [r7, #23]
 800c896:	2b01      	cmp	r3, #1
 800c898:	d806      	bhi.n	800c8a8 <etharp_find_entry+0x80>
 800c89a:	4b99      	ldr	r3, [pc, #612]	; (800cb00 <etharp_find_entry+0x2d8>)
 800c89c:	f240 1223 	movw	r2, #291	; 0x123
 800c8a0:	4998      	ldr	r1, [pc, #608]	; (800cb04 <etharp_find_entry+0x2dc>)
 800c8a2:	4899      	ldr	r0, [pc, #612]	; (800cb08 <etharp_find_entry+0x2e0>)
 800c8a4:	f002 fa1c 	bl	800ece0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d020      	beq.n	800c8f0 <etharp_find_entry+0xc8>
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6819      	ldr	r1, [r3, #0]
 800c8b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8b6:	4891      	ldr	r0, [pc, #580]	; (800cafc <etharp_find_entry+0x2d4>)
 800c8b8:	4613      	mov	r3, r2
 800c8ba:	005b      	lsls	r3, r3, #1
 800c8bc:	4413      	add	r3, r2
 800c8be:	00db      	lsls	r3, r3, #3
 800c8c0:	4403      	add	r3, r0
 800c8c2:	3304      	adds	r3, #4
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4299      	cmp	r1, r3
 800c8c8:	d112      	bne.n	800c8f0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d00c      	beq.n	800c8ea <etharp_find_entry+0xc2>
 800c8d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8d4:	4989      	ldr	r1, [pc, #548]	; (800cafc <etharp_find_entry+0x2d4>)
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	005b      	lsls	r3, r3, #1
 800c8da:	4413      	add	r3, r2
 800c8dc:	00db      	lsls	r3, r3, #3
 800c8de:	440b      	add	r3, r1
 800c8e0:	3308      	adds	r3, #8
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d102      	bne.n	800c8f0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c8ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c8ee:	e100      	b.n	800caf2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c8f0:	7dfb      	ldrb	r3, [r7, #23]
 800c8f2:	2b01      	cmp	r3, #1
 800c8f4:	d140      	bne.n	800c978 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c8f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8fa:	4980      	ldr	r1, [pc, #512]	; (800cafc <etharp_find_entry+0x2d4>)
 800c8fc:	4613      	mov	r3, r2
 800c8fe:	005b      	lsls	r3, r3, #1
 800c900:	4413      	add	r3, r2
 800c902:	00db      	lsls	r3, r3, #3
 800c904:	440b      	add	r3, r1
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d01a      	beq.n	800c942 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c90c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c910:	497a      	ldr	r1, [pc, #488]	; (800cafc <etharp_find_entry+0x2d4>)
 800c912:	4613      	mov	r3, r2
 800c914:	005b      	lsls	r3, r3, #1
 800c916:	4413      	add	r3, r2
 800c918:	00db      	lsls	r3, r3, #3
 800c91a:	440b      	add	r3, r1
 800c91c:	3312      	adds	r3, #18
 800c91e:	881b      	ldrh	r3, [r3, #0]
 800c920:	8bba      	ldrh	r2, [r7, #28]
 800c922:	429a      	cmp	r2, r3
 800c924:	d845      	bhi.n	800c9b2 <etharp_find_entry+0x18a>
            old_queue = i;
 800c926:	8c3b      	ldrh	r3, [r7, #32]
 800c928:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c92a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c92e:	4973      	ldr	r1, [pc, #460]	; (800cafc <etharp_find_entry+0x2d4>)
 800c930:	4613      	mov	r3, r2
 800c932:	005b      	lsls	r3, r3, #1
 800c934:	4413      	add	r3, r2
 800c936:	00db      	lsls	r3, r3, #3
 800c938:	440b      	add	r3, r1
 800c93a:	3312      	adds	r3, #18
 800c93c:	881b      	ldrh	r3, [r3, #0]
 800c93e:	83bb      	strh	r3, [r7, #28]
 800c940:	e037      	b.n	800c9b2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c942:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c946:	496d      	ldr	r1, [pc, #436]	; (800cafc <etharp_find_entry+0x2d4>)
 800c948:	4613      	mov	r3, r2
 800c94a:	005b      	lsls	r3, r3, #1
 800c94c:	4413      	add	r3, r2
 800c94e:	00db      	lsls	r3, r3, #3
 800c950:	440b      	add	r3, r1
 800c952:	3312      	adds	r3, #18
 800c954:	881b      	ldrh	r3, [r3, #0]
 800c956:	8b7a      	ldrh	r2, [r7, #26]
 800c958:	429a      	cmp	r2, r3
 800c95a:	d82a      	bhi.n	800c9b2 <etharp_find_entry+0x18a>
            old_pending = i;
 800c95c:	8c3b      	ldrh	r3, [r7, #32]
 800c95e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c960:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c964:	4965      	ldr	r1, [pc, #404]	; (800cafc <etharp_find_entry+0x2d4>)
 800c966:	4613      	mov	r3, r2
 800c968:	005b      	lsls	r3, r3, #1
 800c96a:	4413      	add	r3, r2
 800c96c:	00db      	lsls	r3, r3, #3
 800c96e:	440b      	add	r3, r1
 800c970:	3312      	adds	r3, #18
 800c972:	881b      	ldrh	r3, [r3, #0]
 800c974:	837b      	strh	r3, [r7, #26]
 800c976:	e01c      	b.n	800c9b2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c978:	7dfb      	ldrb	r3, [r7, #23]
 800c97a:	2b01      	cmp	r3, #1
 800c97c:	d919      	bls.n	800c9b2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c97e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c982:	495e      	ldr	r1, [pc, #376]	; (800cafc <etharp_find_entry+0x2d4>)
 800c984:	4613      	mov	r3, r2
 800c986:	005b      	lsls	r3, r3, #1
 800c988:	4413      	add	r3, r2
 800c98a:	00db      	lsls	r3, r3, #3
 800c98c:	440b      	add	r3, r1
 800c98e:	3312      	adds	r3, #18
 800c990:	881b      	ldrh	r3, [r3, #0]
 800c992:	8b3a      	ldrh	r2, [r7, #24]
 800c994:	429a      	cmp	r2, r3
 800c996:	d80c      	bhi.n	800c9b2 <etharp_find_entry+0x18a>
            old_stable = i;
 800c998:	8c3b      	ldrh	r3, [r7, #32]
 800c99a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c99c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9a0:	4956      	ldr	r1, [pc, #344]	; (800cafc <etharp_find_entry+0x2d4>)
 800c9a2:	4613      	mov	r3, r2
 800c9a4:	005b      	lsls	r3, r3, #1
 800c9a6:	4413      	add	r3, r2
 800c9a8:	00db      	lsls	r3, r3, #3
 800c9aa:	440b      	add	r3, r1
 800c9ac:	3312      	adds	r3, #18
 800c9ae:	881b      	ldrh	r3, [r3, #0]
 800c9b0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c9b2:	8c3b      	ldrh	r3, [r7, #32]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	843b      	strh	r3, [r7, #32]
 800c9ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c9be:	2b09      	cmp	r3, #9
 800c9c0:	f77f af4c 	ble.w	800c85c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c9c4:	7afb      	ldrb	r3, [r7, #11]
 800c9c6:	f003 0302 	and.w	r3, r3, #2
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d108      	bne.n	800c9e0 <etharp_find_entry+0x1b8>
 800c9ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c9d2:	2b0a      	cmp	r3, #10
 800c9d4:	d107      	bne.n	800c9e6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c9d6:	7afb      	ldrb	r3, [r7, #11]
 800c9d8:	f003 0301 	and.w	r3, r3, #1
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d102      	bne.n	800c9e6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c9e4:	e085      	b.n	800caf2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c9e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c9ea:	2b09      	cmp	r3, #9
 800c9ec:	dc02      	bgt.n	800c9f4 <etharp_find_entry+0x1cc>
    i = empty;
 800c9ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c9f0:	843b      	strh	r3, [r7, #32]
 800c9f2:	e039      	b.n	800ca68 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c9f4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c9f8:	2b09      	cmp	r3, #9
 800c9fa:	dc14      	bgt.n	800ca26 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c9fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9fe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ca00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca04:	493d      	ldr	r1, [pc, #244]	; (800cafc <etharp_find_entry+0x2d4>)
 800ca06:	4613      	mov	r3, r2
 800ca08:	005b      	lsls	r3, r3, #1
 800ca0a:	4413      	add	r3, r2
 800ca0c:	00db      	lsls	r3, r3, #3
 800ca0e:	440b      	add	r3, r1
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d018      	beq.n	800ca48 <etharp_find_entry+0x220>
 800ca16:	4b3a      	ldr	r3, [pc, #232]	; (800cb00 <etharp_find_entry+0x2d8>)
 800ca18:	f240 126d 	movw	r2, #365	; 0x16d
 800ca1c:	493b      	ldr	r1, [pc, #236]	; (800cb0c <etharp_find_entry+0x2e4>)
 800ca1e:	483a      	ldr	r0, [pc, #232]	; (800cb08 <etharp_find_entry+0x2e0>)
 800ca20:	f002 f95e 	bl	800ece0 <iprintf>
 800ca24:	e010      	b.n	800ca48 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ca26:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ca2a:	2b09      	cmp	r3, #9
 800ca2c:	dc02      	bgt.n	800ca34 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ca2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ca30:	843b      	strh	r3, [r7, #32]
 800ca32:	e009      	b.n	800ca48 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ca34:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ca38:	2b09      	cmp	r3, #9
 800ca3a:	dc02      	bgt.n	800ca42 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ca3c:	8bfb      	ldrh	r3, [r7, #30]
 800ca3e:	843b      	strh	r3, [r7, #32]
 800ca40:	e002      	b.n	800ca48 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ca42:	f04f 33ff 	mov.w	r3, #4294967295
 800ca46:	e054      	b.n	800caf2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ca48:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ca4c:	2b09      	cmp	r3, #9
 800ca4e:	dd06      	ble.n	800ca5e <etharp_find_entry+0x236>
 800ca50:	4b2b      	ldr	r3, [pc, #172]	; (800cb00 <etharp_find_entry+0x2d8>)
 800ca52:	f240 127f 	movw	r2, #383	; 0x17f
 800ca56:	492e      	ldr	r1, [pc, #184]	; (800cb10 <etharp_find_entry+0x2e8>)
 800ca58:	482b      	ldr	r0, [pc, #172]	; (800cb08 <etharp_find_entry+0x2e0>)
 800ca5a:	f002 f941 	bl	800ece0 <iprintf>
    etharp_free_entry(i);
 800ca5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7ff fe06 	bl	800c674 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ca68:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ca6c:	2b09      	cmp	r3, #9
 800ca6e:	dd06      	ble.n	800ca7e <etharp_find_entry+0x256>
 800ca70:	4b23      	ldr	r3, [pc, #140]	; (800cb00 <etharp_find_entry+0x2d8>)
 800ca72:	f240 1283 	movw	r2, #387	; 0x183
 800ca76:	4926      	ldr	r1, [pc, #152]	; (800cb10 <etharp_find_entry+0x2e8>)
 800ca78:	4823      	ldr	r0, [pc, #140]	; (800cb08 <etharp_find_entry+0x2e0>)
 800ca7a:	f002 f931 	bl	800ece0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ca7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca82:	491e      	ldr	r1, [pc, #120]	; (800cafc <etharp_find_entry+0x2d4>)
 800ca84:	4613      	mov	r3, r2
 800ca86:	005b      	lsls	r3, r3, #1
 800ca88:	4413      	add	r3, r2
 800ca8a:	00db      	lsls	r3, r3, #3
 800ca8c:	440b      	add	r3, r1
 800ca8e:	3314      	adds	r3, #20
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d006      	beq.n	800caa4 <etharp_find_entry+0x27c>
 800ca96:	4b1a      	ldr	r3, [pc, #104]	; (800cb00 <etharp_find_entry+0x2d8>)
 800ca98:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ca9c:	491d      	ldr	r1, [pc, #116]	; (800cb14 <etharp_find_entry+0x2ec>)
 800ca9e:	481a      	ldr	r0, [pc, #104]	; (800cb08 <etharp_find_entry+0x2e0>)
 800caa0:	f002 f91e 	bl	800ece0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d00b      	beq.n	800cac2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800caaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	6819      	ldr	r1, [r3, #0]
 800cab2:	4812      	ldr	r0, [pc, #72]	; (800cafc <etharp_find_entry+0x2d4>)
 800cab4:	4613      	mov	r3, r2
 800cab6:	005b      	lsls	r3, r3, #1
 800cab8:	4413      	add	r3, r2
 800caba:	00db      	lsls	r3, r3, #3
 800cabc:	4403      	add	r3, r0
 800cabe:	3304      	adds	r3, #4
 800cac0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800cac2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cac6:	490d      	ldr	r1, [pc, #52]	; (800cafc <etharp_find_entry+0x2d4>)
 800cac8:	4613      	mov	r3, r2
 800caca:	005b      	lsls	r3, r3, #1
 800cacc:	4413      	add	r3, r2
 800cace:	00db      	lsls	r3, r3, #3
 800cad0:	440b      	add	r3, r1
 800cad2:	3312      	adds	r3, #18
 800cad4:	2200      	movs	r2, #0
 800cad6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800cad8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cadc:	4907      	ldr	r1, [pc, #28]	; (800cafc <etharp_find_entry+0x2d4>)
 800cade:	4613      	mov	r3, r2
 800cae0:	005b      	lsls	r3, r3, #1
 800cae2:	4413      	add	r3, r2
 800cae4:	00db      	lsls	r3, r3, #3
 800cae6:	440b      	add	r3, r1
 800cae8:	3308      	adds	r3, #8
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800caee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3728      	adds	r7, #40	; 0x28
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	20008388 	.word	0x20008388
 800cb00:	08012578 	.word	0x08012578
 800cb04:	080125b0 	.word	0x080125b0
 800cb08:	080125f0 	.word	0x080125f0
 800cb0c:	08012618 	.word	0x08012618
 800cb10:	08012630 	.word	0x08012630
 800cb14:	08012644 	.word	0x08012644

0800cb18 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b088      	sub	sp, #32
 800cb1c:	af02      	add	r7, sp, #8
 800cb1e:	60f8      	str	r0, [r7, #12]
 800cb20:	60b9      	str	r1, [r7, #8]
 800cb22:	607a      	str	r2, [r7, #4]
 800cb24:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cb2c:	2b06      	cmp	r3, #6
 800cb2e:	d006      	beq.n	800cb3e <etharp_update_arp_entry+0x26>
 800cb30:	4b48      	ldr	r3, [pc, #288]	; (800cc54 <etharp_update_arp_entry+0x13c>)
 800cb32:	f240 12a9 	movw	r2, #425	; 0x1a9
 800cb36:	4948      	ldr	r1, [pc, #288]	; (800cc58 <etharp_update_arp_entry+0x140>)
 800cb38:	4848      	ldr	r0, [pc, #288]	; (800cc5c <etharp_update_arp_entry+0x144>)
 800cb3a:	f002 f8d1 	bl	800ece0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d012      	beq.n	800cb6a <etharp_update_arp_entry+0x52>
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d00e      	beq.n	800cb6a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	68f9      	ldr	r1, [r7, #12]
 800cb52:	4618      	mov	r0, r3
 800cb54:	f001 f90a 	bl	800dd6c <ip4_addr_isbroadcast_u32>
 800cb58:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d105      	bne.n	800cb6a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cb66:	2be0      	cmp	r3, #224	; 0xe0
 800cb68:	d102      	bne.n	800cb70 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cb6a:	f06f 030f 	mvn.w	r3, #15
 800cb6e:	e06c      	b.n	800cc4a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800cb70:	78fb      	ldrb	r3, [r7, #3]
 800cb72:	68fa      	ldr	r2, [r7, #12]
 800cb74:	4619      	mov	r1, r3
 800cb76:	68b8      	ldr	r0, [r7, #8]
 800cb78:	f7ff fe56 	bl	800c828 <etharp_find_entry>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800cb80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	da02      	bge.n	800cb8e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800cb88:	8afb      	ldrh	r3, [r7, #22]
 800cb8a:	b25b      	sxtb	r3, r3
 800cb8c:	e05d      	b.n	800cc4a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800cb8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cb92:	4933      	ldr	r1, [pc, #204]	; (800cc60 <etharp_update_arp_entry+0x148>)
 800cb94:	4613      	mov	r3, r2
 800cb96:	005b      	lsls	r3, r3, #1
 800cb98:	4413      	add	r3, r2
 800cb9a:	00db      	lsls	r3, r3, #3
 800cb9c:	440b      	add	r3, r1
 800cb9e:	3314      	adds	r3, #20
 800cba0:	2202      	movs	r2, #2
 800cba2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800cba4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cba8:	492d      	ldr	r1, [pc, #180]	; (800cc60 <etharp_update_arp_entry+0x148>)
 800cbaa:	4613      	mov	r3, r2
 800cbac:	005b      	lsls	r3, r3, #1
 800cbae:	4413      	add	r3, r2
 800cbb0:	00db      	lsls	r3, r3, #3
 800cbb2:	440b      	add	r3, r1
 800cbb4:	3308      	adds	r3, #8
 800cbb6:	68fa      	ldr	r2, [r7, #12]
 800cbb8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800cbba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	005b      	lsls	r3, r3, #1
 800cbc2:	4413      	add	r3, r2
 800cbc4:	00db      	lsls	r3, r3, #3
 800cbc6:	3308      	adds	r3, #8
 800cbc8:	4a25      	ldr	r2, [pc, #148]	; (800cc60 <etharp_update_arp_entry+0x148>)
 800cbca:	4413      	add	r3, r2
 800cbcc:	3304      	adds	r3, #4
 800cbce:	2206      	movs	r2, #6
 800cbd0:	6879      	ldr	r1, [r7, #4]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f002 f854 	bl	800ec80 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800cbd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cbdc:	4920      	ldr	r1, [pc, #128]	; (800cc60 <etharp_update_arp_entry+0x148>)
 800cbde:	4613      	mov	r3, r2
 800cbe0:	005b      	lsls	r3, r3, #1
 800cbe2:	4413      	add	r3, r2
 800cbe4:	00db      	lsls	r3, r3, #3
 800cbe6:	440b      	add	r3, r1
 800cbe8:	3312      	adds	r3, #18
 800cbea:	2200      	movs	r2, #0
 800cbec:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800cbee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cbf2:	491b      	ldr	r1, [pc, #108]	; (800cc60 <etharp_update_arp_entry+0x148>)
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	005b      	lsls	r3, r3, #1
 800cbf8:	4413      	add	r3, r2
 800cbfa:	00db      	lsls	r3, r3, #3
 800cbfc:	440b      	add	r3, r1
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d021      	beq.n	800cc48 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800cc04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cc08:	4915      	ldr	r1, [pc, #84]	; (800cc60 <etharp_update_arp_entry+0x148>)
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	005b      	lsls	r3, r3, #1
 800cc0e:	4413      	add	r3, r2
 800cc10:	00db      	lsls	r3, r3, #3
 800cc12:	440b      	add	r3, r1
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800cc18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cc1c:	4910      	ldr	r1, [pc, #64]	; (800cc60 <etharp_update_arp_entry+0x148>)
 800cc1e:	4613      	mov	r3, r2
 800cc20:	005b      	lsls	r3, r3, #1
 800cc22:	4413      	add	r3, r2
 800cc24:	00db      	lsls	r3, r3, #3
 800cc26:	440b      	add	r3, r1
 800cc28:	2200      	movs	r2, #0
 800cc2a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cc32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc36:	9300      	str	r3, [sp, #0]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6939      	ldr	r1, [r7, #16]
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	f001 ffa3 	bl	800eb88 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800cc42:	6938      	ldr	r0, [r7, #16]
 800cc44:	f7f9 f8c6 	bl	8005dd4 <pbuf_free>
  }
  return ERR_OK;
 800cc48:	2300      	movs	r3, #0
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3718      	adds	r7, #24
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	08012578 	.word	0x08012578
 800cc58:	08012670 	.word	0x08012670
 800cc5c:	080125f0 	.word	0x080125f0
 800cc60:	20008388 	.word	0x20008388

0800cc64 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	60fb      	str	r3, [r7, #12]
 800cc70:	e01e      	b.n	800ccb0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800cc72:	4913      	ldr	r1, [pc, #76]	; (800ccc0 <etharp_cleanup_netif+0x5c>)
 800cc74:	68fa      	ldr	r2, [r7, #12]
 800cc76:	4613      	mov	r3, r2
 800cc78:	005b      	lsls	r3, r3, #1
 800cc7a:	4413      	add	r3, r2
 800cc7c:	00db      	lsls	r3, r3, #3
 800cc7e:	440b      	add	r3, r1
 800cc80:	3314      	adds	r3, #20
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800cc86:	7afb      	ldrb	r3, [r7, #11]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d00e      	beq.n	800ccaa <etharp_cleanup_netif+0x46>
 800cc8c:	490c      	ldr	r1, [pc, #48]	; (800ccc0 <etharp_cleanup_netif+0x5c>)
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	4613      	mov	r3, r2
 800cc92:	005b      	lsls	r3, r3, #1
 800cc94:	4413      	add	r3, r2
 800cc96:	00db      	lsls	r3, r3, #3
 800cc98:	440b      	add	r3, r1
 800cc9a:	3308      	adds	r3, #8
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d102      	bne.n	800ccaa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f7ff fce5 	bl	800c674 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	3301      	adds	r3, #1
 800ccae:	60fb      	str	r3, [r7, #12]
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2b09      	cmp	r3, #9
 800ccb4:	dddd      	ble.n	800cc72 <etharp_cleanup_netif+0xe>
    }
  }
}
 800ccb6:	bf00      	nop
 800ccb8:	bf00      	nop
 800ccba:	3710      	adds	r7, #16
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	20008388 	.word	0x20008388

0800ccc4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ccc4:	b5b0      	push	{r4, r5, r7, lr}
 800ccc6:	b08a      	sub	sp, #40	; 0x28
 800ccc8:	af04      	add	r7, sp, #16
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d107      	bne.n	800cce4 <etharp_input+0x20>
 800ccd4:	4b3d      	ldr	r3, [pc, #244]	; (800cdcc <etharp_input+0x108>)
 800ccd6:	f240 228a 	movw	r2, #650	; 0x28a
 800ccda:	493d      	ldr	r1, [pc, #244]	; (800cdd0 <etharp_input+0x10c>)
 800ccdc:	483d      	ldr	r0, [pc, #244]	; (800cdd4 <etharp_input+0x110>)
 800ccde:	f001 ffff 	bl	800ece0 <iprintf>
 800cce2:	e06f      	b.n	800cdc4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	685b      	ldr	r3, [r3, #4]
 800cce8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	881b      	ldrh	r3, [r3, #0]
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccf4:	d10c      	bne.n	800cd10 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ccfa:	2b06      	cmp	r3, #6
 800ccfc:	d108      	bne.n	800cd10 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cd02:	2b04      	cmp	r3, #4
 800cd04:	d104      	bne.n	800cd10 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	885b      	ldrh	r3, [r3, #2]
 800cd0a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cd0c:	2b08      	cmp	r3, #8
 800cd0e:	d003      	beq.n	800cd18 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f7f9 f85f 	bl	8005dd4 <pbuf_free>
    return;
 800cd16:	e055      	b.n	800cdc4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	330e      	adds	r3, #14
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	3318      	adds	r3, #24
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	3304      	adds	r3, #4
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d102      	bne.n	800cd38 <etharp_input+0x74>
    for_us = 0;
 800cd32:	2300      	movs	r3, #0
 800cd34:	75fb      	strb	r3, [r7, #23]
 800cd36:	e009      	b.n	800cd4c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800cd38:	68ba      	ldr	r2, [r7, #8]
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	3304      	adds	r3, #4
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	429a      	cmp	r2, r3
 800cd42:	bf0c      	ite	eq
 800cd44:	2301      	moveq	r3, #1
 800cd46:	2300      	movne	r3, #0
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	f103 0208 	add.w	r2, r3, #8
 800cd52:	7dfb      	ldrb	r3, [r7, #23]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d001      	beq.n	800cd5c <etharp_input+0x98>
 800cd58:	2301      	movs	r3, #1
 800cd5a:	e000      	b.n	800cd5e <etharp_input+0x9a>
 800cd5c:	2302      	movs	r3, #2
 800cd5e:	f107 010c 	add.w	r1, r7, #12
 800cd62:	6838      	ldr	r0, [r7, #0]
 800cd64:	f7ff fed8 	bl	800cb18 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	88db      	ldrh	r3, [r3, #6]
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd72:	d003      	beq.n	800cd7c <etharp_input+0xb8>
 800cd74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd78:	d01e      	beq.n	800cdb8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800cd7a:	e020      	b.n	800cdbe <etharp_input+0xfa>
      if (for_us) {
 800cd7c:	7dfb      	ldrb	r3, [r7, #23]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d01c      	beq.n	800cdbc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800cd98:	693a      	ldr	r2, [r7, #16]
 800cd9a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800cd9c:	2102      	movs	r1, #2
 800cd9e:	9103      	str	r1, [sp, #12]
 800cda0:	f107 010c 	add.w	r1, r7, #12
 800cda4:	9102      	str	r1, [sp, #8]
 800cda6:	9201      	str	r2, [sp, #4]
 800cda8:	9300      	str	r3, [sp, #0]
 800cdaa:	462b      	mov	r3, r5
 800cdac:	4622      	mov	r2, r4
 800cdae:	4601      	mov	r1, r0
 800cdb0:	6838      	ldr	r0, [r7, #0]
 800cdb2:	f000 faeb 	bl	800d38c <etharp_raw>
      break;
 800cdb6:	e001      	b.n	800cdbc <etharp_input+0xf8>
      break;
 800cdb8:	bf00      	nop
 800cdba:	e000      	b.n	800cdbe <etharp_input+0xfa>
      break;
 800cdbc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7f9 f808 	bl	8005dd4 <pbuf_free>
}
 800cdc4:	3718      	adds	r7, #24
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bdb0      	pop	{r4, r5, r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	08012578 	.word	0x08012578
 800cdd0:	080126c8 	.word	0x080126c8
 800cdd4:	080125f0 	.word	0x080125f0

0800cdd8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b086      	sub	sp, #24
 800cddc:	af02      	add	r7, sp, #8
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	4613      	mov	r3, r2
 800cde4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800cde6:	79fa      	ldrb	r2, [r7, #7]
 800cde8:	4944      	ldr	r1, [pc, #272]	; (800cefc <etharp_output_to_arp_index+0x124>)
 800cdea:	4613      	mov	r3, r2
 800cdec:	005b      	lsls	r3, r3, #1
 800cdee:	4413      	add	r3, r2
 800cdf0:	00db      	lsls	r3, r3, #3
 800cdf2:	440b      	add	r3, r1
 800cdf4:	3314      	adds	r3, #20
 800cdf6:	781b      	ldrb	r3, [r3, #0]
 800cdf8:	2b01      	cmp	r3, #1
 800cdfa:	d806      	bhi.n	800ce0a <etharp_output_to_arp_index+0x32>
 800cdfc:	4b40      	ldr	r3, [pc, #256]	; (800cf00 <etharp_output_to_arp_index+0x128>)
 800cdfe:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ce02:	4940      	ldr	r1, [pc, #256]	; (800cf04 <etharp_output_to_arp_index+0x12c>)
 800ce04:	4840      	ldr	r0, [pc, #256]	; (800cf08 <etharp_output_to_arp_index+0x130>)
 800ce06:	f001 ff6b 	bl	800ece0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ce0a:	79fa      	ldrb	r2, [r7, #7]
 800ce0c:	493b      	ldr	r1, [pc, #236]	; (800cefc <etharp_output_to_arp_index+0x124>)
 800ce0e:	4613      	mov	r3, r2
 800ce10:	005b      	lsls	r3, r3, #1
 800ce12:	4413      	add	r3, r2
 800ce14:	00db      	lsls	r3, r3, #3
 800ce16:	440b      	add	r3, r1
 800ce18:	3314      	adds	r3, #20
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	d153      	bne.n	800cec8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ce20:	79fa      	ldrb	r2, [r7, #7]
 800ce22:	4936      	ldr	r1, [pc, #216]	; (800cefc <etharp_output_to_arp_index+0x124>)
 800ce24:	4613      	mov	r3, r2
 800ce26:	005b      	lsls	r3, r3, #1
 800ce28:	4413      	add	r3, r2
 800ce2a:	00db      	lsls	r3, r3, #3
 800ce2c:	440b      	add	r3, r1
 800ce2e:	3312      	adds	r3, #18
 800ce30:	881b      	ldrh	r3, [r3, #0]
 800ce32:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800ce36:	d919      	bls.n	800ce6c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800ce38:	79fa      	ldrb	r2, [r7, #7]
 800ce3a:	4613      	mov	r3, r2
 800ce3c:	005b      	lsls	r3, r3, #1
 800ce3e:	4413      	add	r3, r2
 800ce40:	00db      	lsls	r3, r3, #3
 800ce42:	4a2e      	ldr	r2, [pc, #184]	; (800cefc <etharp_output_to_arp_index+0x124>)
 800ce44:	4413      	add	r3, r2
 800ce46:	3304      	adds	r3, #4
 800ce48:	4619      	mov	r1, r3
 800ce4a:	68f8      	ldr	r0, [r7, #12]
 800ce4c:	f000 fb4c 	bl	800d4e8 <etharp_request>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d138      	bne.n	800cec8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ce56:	79fa      	ldrb	r2, [r7, #7]
 800ce58:	4928      	ldr	r1, [pc, #160]	; (800cefc <etharp_output_to_arp_index+0x124>)
 800ce5a:	4613      	mov	r3, r2
 800ce5c:	005b      	lsls	r3, r3, #1
 800ce5e:	4413      	add	r3, r2
 800ce60:	00db      	lsls	r3, r3, #3
 800ce62:	440b      	add	r3, r1
 800ce64:	3314      	adds	r3, #20
 800ce66:	2203      	movs	r2, #3
 800ce68:	701a      	strb	r2, [r3, #0]
 800ce6a:	e02d      	b.n	800cec8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ce6c:	79fa      	ldrb	r2, [r7, #7]
 800ce6e:	4923      	ldr	r1, [pc, #140]	; (800cefc <etharp_output_to_arp_index+0x124>)
 800ce70:	4613      	mov	r3, r2
 800ce72:	005b      	lsls	r3, r3, #1
 800ce74:	4413      	add	r3, r2
 800ce76:	00db      	lsls	r3, r3, #3
 800ce78:	440b      	add	r3, r1
 800ce7a:	3312      	adds	r3, #18
 800ce7c:	881b      	ldrh	r3, [r3, #0]
 800ce7e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ce82:	d321      	bcc.n	800cec8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ce84:	79fa      	ldrb	r2, [r7, #7]
 800ce86:	4613      	mov	r3, r2
 800ce88:	005b      	lsls	r3, r3, #1
 800ce8a:	4413      	add	r3, r2
 800ce8c:	00db      	lsls	r3, r3, #3
 800ce8e:	4a1b      	ldr	r2, [pc, #108]	; (800cefc <etharp_output_to_arp_index+0x124>)
 800ce90:	4413      	add	r3, r2
 800ce92:	1d19      	adds	r1, r3, #4
 800ce94:	79fa      	ldrb	r2, [r7, #7]
 800ce96:	4613      	mov	r3, r2
 800ce98:	005b      	lsls	r3, r3, #1
 800ce9a:	4413      	add	r3, r2
 800ce9c:	00db      	lsls	r3, r3, #3
 800ce9e:	3308      	adds	r3, #8
 800cea0:	4a16      	ldr	r2, [pc, #88]	; (800cefc <etharp_output_to_arp_index+0x124>)
 800cea2:	4413      	add	r3, r2
 800cea4:	3304      	adds	r3, #4
 800cea6:	461a      	mov	r2, r3
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f000 fafb 	bl	800d4a4 <etharp_request_dst>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d109      	bne.n	800cec8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ceb4:	79fa      	ldrb	r2, [r7, #7]
 800ceb6:	4911      	ldr	r1, [pc, #68]	; (800cefc <etharp_output_to_arp_index+0x124>)
 800ceb8:	4613      	mov	r3, r2
 800ceba:	005b      	lsls	r3, r3, #1
 800cebc:	4413      	add	r3, r2
 800cebe:	00db      	lsls	r3, r3, #3
 800cec0:	440b      	add	r3, r1
 800cec2:	3314      	adds	r3, #20
 800cec4:	2203      	movs	r2, #3
 800cec6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800cece:	79fa      	ldrb	r2, [r7, #7]
 800ced0:	4613      	mov	r3, r2
 800ced2:	005b      	lsls	r3, r3, #1
 800ced4:	4413      	add	r3, r2
 800ced6:	00db      	lsls	r3, r3, #3
 800ced8:	3308      	adds	r3, #8
 800ceda:	4a08      	ldr	r2, [pc, #32]	; (800cefc <etharp_output_to_arp_index+0x124>)
 800cedc:	4413      	add	r3, r2
 800cede:	3304      	adds	r3, #4
 800cee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cee4:	9200      	str	r2, [sp, #0]
 800cee6:	460a      	mov	r2, r1
 800cee8:	68b9      	ldr	r1, [r7, #8]
 800ceea:	68f8      	ldr	r0, [r7, #12]
 800ceec:	f001 fe4c 	bl	800eb88 <ethernet_output>
 800cef0:	4603      	mov	r3, r0
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	20008388 	.word	0x20008388
 800cf00:	08012578 	.word	0x08012578
 800cf04:	080126e8 	.word	0x080126e8
 800cf08:	080125f0 	.word	0x080125f0

0800cf0c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b08a      	sub	sp, #40	; 0x28
 800cf10:	af02      	add	r7, sp, #8
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d106      	bne.n	800cf30 <etharp_output+0x24>
 800cf22:	4b73      	ldr	r3, [pc, #460]	; (800d0f0 <etharp_output+0x1e4>)
 800cf24:	f240 321e 	movw	r2, #798	; 0x31e
 800cf28:	4972      	ldr	r1, [pc, #456]	; (800d0f4 <etharp_output+0x1e8>)
 800cf2a:	4873      	ldr	r0, [pc, #460]	; (800d0f8 <etharp_output+0x1ec>)
 800cf2c:	f001 fed8 	bl	800ece0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d106      	bne.n	800cf44 <etharp_output+0x38>
 800cf36:	4b6e      	ldr	r3, [pc, #440]	; (800d0f0 <etharp_output+0x1e4>)
 800cf38:	f240 321f 	movw	r2, #799	; 0x31f
 800cf3c:	496f      	ldr	r1, [pc, #444]	; (800d0fc <etharp_output+0x1f0>)
 800cf3e:	486e      	ldr	r0, [pc, #440]	; (800d0f8 <etharp_output+0x1ec>)
 800cf40:	f001 fece 	bl	800ece0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d106      	bne.n	800cf58 <etharp_output+0x4c>
 800cf4a:	4b69      	ldr	r3, [pc, #420]	; (800d0f0 <etharp_output+0x1e4>)
 800cf4c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cf50:	496b      	ldr	r1, [pc, #428]	; (800d100 <etharp_output+0x1f4>)
 800cf52:	4869      	ldr	r0, [pc, #420]	; (800d0f8 <etharp_output+0x1ec>)
 800cf54:	f001 fec4 	bl	800ece0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	68f9      	ldr	r1, [r7, #12]
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f000 ff04 	bl	800dd6c <ip4_addr_isbroadcast_u32>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d002      	beq.n	800cf70 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800cf6a:	4b66      	ldr	r3, [pc, #408]	; (800d104 <etharp_output+0x1f8>)
 800cf6c:	61fb      	str	r3, [r7, #28]
 800cf6e:	e0af      	b.n	800d0d0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf78:	2be0      	cmp	r3, #224	; 0xe0
 800cf7a:	d118      	bne.n	800cfae <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cf80:	2300      	movs	r3, #0
 800cf82:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cf84:	235e      	movs	r3, #94	; 0x5e
 800cf86:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	3302      	adds	r3, #2
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	3303      	adds	r3, #3
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800cfa6:	f107 0310 	add.w	r3, r7, #16
 800cfaa:	61fb      	str	r3, [r7, #28]
 800cfac:	e090      	b.n	800d0d0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681a      	ldr	r2, [r3, #0]
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	3304      	adds	r3, #4
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	405a      	eors	r2, r3
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	3308      	adds	r3, #8
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4013      	ands	r3, r2
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d012      	beq.n	800cfec <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cfcc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d00b      	beq.n	800cfec <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	330c      	adds	r3, #12
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d003      	beq.n	800cfe6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	330c      	adds	r3, #12
 800cfe2:	61bb      	str	r3, [r7, #24]
 800cfe4:	e002      	b.n	800cfec <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800cfe6:	f06f 0303 	mvn.w	r3, #3
 800cfea:	e07d      	b.n	800d0e8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cfec:	4b46      	ldr	r3, [pc, #280]	; (800d108 <etharp_output+0x1fc>)
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	4619      	mov	r1, r3
 800cff2:	4a46      	ldr	r2, [pc, #280]	; (800d10c <etharp_output+0x200>)
 800cff4:	460b      	mov	r3, r1
 800cff6:	005b      	lsls	r3, r3, #1
 800cff8:	440b      	add	r3, r1
 800cffa:	00db      	lsls	r3, r3, #3
 800cffc:	4413      	add	r3, r2
 800cffe:	3314      	adds	r3, #20
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	2b01      	cmp	r3, #1
 800d004:	d925      	bls.n	800d052 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d006:	4b40      	ldr	r3, [pc, #256]	; (800d108 <etharp_output+0x1fc>)
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	4619      	mov	r1, r3
 800d00c:	4a3f      	ldr	r2, [pc, #252]	; (800d10c <etharp_output+0x200>)
 800d00e:	460b      	mov	r3, r1
 800d010:	005b      	lsls	r3, r3, #1
 800d012:	440b      	add	r3, r1
 800d014:	00db      	lsls	r3, r3, #3
 800d016:	4413      	add	r3, r2
 800d018:	3308      	adds	r3, #8
 800d01a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d01c:	68fa      	ldr	r2, [r7, #12]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d117      	bne.n	800d052 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	4b38      	ldr	r3, [pc, #224]	; (800d108 <etharp_output+0x1fc>)
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	4618      	mov	r0, r3
 800d02c:	4937      	ldr	r1, [pc, #220]	; (800d10c <etharp_output+0x200>)
 800d02e:	4603      	mov	r3, r0
 800d030:	005b      	lsls	r3, r3, #1
 800d032:	4403      	add	r3, r0
 800d034:	00db      	lsls	r3, r3, #3
 800d036:	440b      	add	r3, r1
 800d038:	3304      	adds	r3, #4
 800d03a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d108      	bne.n	800d052 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d040:	4b31      	ldr	r3, [pc, #196]	; (800d108 <etharp_output+0x1fc>)
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	461a      	mov	r2, r3
 800d046:	68b9      	ldr	r1, [r7, #8]
 800d048:	68f8      	ldr	r0, [r7, #12]
 800d04a:	f7ff fec5 	bl	800cdd8 <etharp_output_to_arp_index>
 800d04e:	4603      	mov	r3, r0
 800d050:	e04a      	b.n	800d0e8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d052:	2300      	movs	r3, #0
 800d054:	75fb      	strb	r3, [r7, #23]
 800d056:	e031      	b.n	800d0bc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d058:	7dfa      	ldrb	r2, [r7, #23]
 800d05a:	492c      	ldr	r1, [pc, #176]	; (800d10c <etharp_output+0x200>)
 800d05c:	4613      	mov	r3, r2
 800d05e:	005b      	lsls	r3, r3, #1
 800d060:	4413      	add	r3, r2
 800d062:	00db      	lsls	r3, r3, #3
 800d064:	440b      	add	r3, r1
 800d066:	3314      	adds	r3, #20
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	2b01      	cmp	r3, #1
 800d06c:	d923      	bls.n	800d0b6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d06e:	7dfa      	ldrb	r2, [r7, #23]
 800d070:	4926      	ldr	r1, [pc, #152]	; (800d10c <etharp_output+0x200>)
 800d072:	4613      	mov	r3, r2
 800d074:	005b      	lsls	r3, r3, #1
 800d076:	4413      	add	r3, r2
 800d078:	00db      	lsls	r3, r3, #3
 800d07a:	440b      	add	r3, r1
 800d07c:	3308      	adds	r3, #8
 800d07e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d080:	68fa      	ldr	r2, [r7, #12]
 800d082:	429a      	cmp	r2, r3
 800d084:	d117      	bne.n	800d0b6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d086:	69bb      	ldr	r3, [r7, #24]
 800d088:	6819      	ldr	r1, [r3, #0]
 800d08a:	7dfa      	ldrb	r2, [r7, #23]
 800d08c:	481f      	ldr	r0, [pc, #124]	; (800d10c <etharp_output+0x200>)
 800d08e:	4613      	mov	r3, r2
 800d090:	005b      	lsls	r3, r3, #1
 800d092:	4413      	add	r3, r2
 800d094:	00db      	lsls	r3, r3, #3
 800d096:	4403      	add	r3, r0
 800d098:	3304      	adds	r3, #4
 800d09a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d09c:	4299      	cmp	r1, r3
 800d09e:	d10a      	bne.n	800d0b6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d0a0:	4a19      	ldr	r2, [pc, #100]	; (800d108 <etharp_output+0x1fc>)
 800d0a2:	7dfb      	ldrb	r3, [r7, #23]
 800d0a4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d0a6:	7dfb      	ldrb	r3, [r7, #23]
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	68b9      	ldr	r1, [r7, #8]
 800d0ac:	68f8      	ldr	r0, [r7, #12]
 800d0ae:	f7ff fe93 	bl	800cdd8 <etharp_output_to_arp_index>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	e018      	b.n	800d0e8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d0b6:	7dfb      	ldrb	r3, [r7, #23]
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	75fb      	strb	r3, [r7, #23]
 800d0bc:	7dfb      	ldrb	r3, [r7, #23]
 800d0be:	2b09      	cmp	r3, #9
 800d0c0:	d9ca      	bls.n	800d058 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d0c2:	68ba      	ldr	r2, [r7, #8]
 800d0c4:	69b9      	ldr	r1, [r7, #24]
 800d0c6:	68f8      	ldr	r0, [r7, #12]
 800d0c8:	f000 f822 	bl	800d110 <etharp_query>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	e00b      	b.n	800d0e8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d0d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d0da:	9300      	str	r3, [sp, #0]
 800d0dc:	69fb      	ldr	r3, [r7, #28]
 800d0de:	68b9      	ldr	r1, [r7, #8]
 800d0e0:	68f8      	ldr	r0, [r7, #12]
 800d0e2:	f001 fd51 	bl	800eb88 <ethernet_output>
 800d0e6:	4603      	mov	r3, r0
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3720      	adds	r7, #32
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	08012578 	.word	0x08012578
 800d0f4:	080126c8 	.word	0x080126c8
 800d0f8:	080125f0 	.word	0x080125f0
 800d0fc:	08012718 	.word	0x08012718
 800d100:	080126b8 	.word	0x080126b8
 800d104:	08012d3c 	.word	0x08012d3c
 800d108:	20008478 	.word	0x20008478
 800d10c:	20008388 	.word	0x20008388

0800d110 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b08c      	sub	sp, #48	; 0x30
 800d114:	af02      	add	r7, sp, #8
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	3326      	adds	r3, #38	; 0x26
 800d120:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d122:	23ff      	movs	r3, #255	; 0xff
 800d124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d128:	2300      	movs	r3, #0
 800d12a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	68f9      	ldr	r1, [r7, #12]
 800d132:	4618      	mov	r0, r3
 800d134:	f000 fe1a 	bl	800dd6c <ip4_addr_isbroadcast_u32>
 800d138:	4603      	mov	r3, r0
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d10c      	bne.n	800d158 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d146:	2be0      	cmp	r3, #224	; 0xe0
 800d148:	d006      	beq.n	800d158 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d003      	beq.n	800d158 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d102      	bne.n	800d15e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d158:	f06f 030f 	mvn.w	r3, #15
 800d15c:	e101      	b.n	800d362 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d15e:	68fa      	ldr	r2, [r7, #12]
 800d160:	2101      	movs	r1, #1
 800d162:	68b8      	ldr	r0, [r7, #8]
 800d164:	f7ff fb60 	bl	800c828 <etharp_find_entry>
 800d168:	4603      	mov	r3, r0
 800d16a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d16c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d170:	2b00      	cmp	r3, #0
 800d172:	da02      	bge.n	800d17a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d174:	8a7b      	ldrh	r3, [r7, #18]
 800d176:	b25b      	sxtb	r3, r3
 800d178:	e0f3      	b.n	800d362 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d17a:	8a7b      	ldrh	r3, [r7, #18]
 800d17c:	2b7e      	cmp	r3, #126	; 0x7e
 800d17e:	d906      	bls.n	800d18e <etharp_query+0x7e>
 800d180:	4b7a      	ldr	r3, [pc, #488]	; (800d36c <etharp_query+0x25c>)
 800d182:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d186:	497a      	ldr	r1, [pc, #488]	; (800d370 <etharp_query+0x260>)
 800d188:	487a      	ldr	r0, [pc, #488]	; (800d374 <etharp_query+0x264>)
 800d18a:	f001 fda9 	bl	800ece0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d18e:	8a7b      	ldrh	r3, [r7, #18]
 800d190:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d192:	7c7a      	ldrb	r2, [r7, #17]
 800d194:	4978      	ldr	r1, [pc, #480]	; (800d378 <etharp_query+0x268>)
 800d196:	4613      	mov	r3, r2
 800d198:	005b      	lsls	r3, r3, #1
 800d19a:	4413      	add	r3, r2
 800d19c:	00db      	lsls	r3, r3, #3
 800d19e:	440b      	add	r3, r1
 800d1a0:	3314      	adds	r3, #20
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d115      	bne.n	800d1d4 <etharp_query+0xc4>
    is_new_entry = 1;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d1ac:	7c7a      	ldrb	r2, [r7, #17]
 800d1ae:	4972      	ldr	r1, [pc, #456]	; (800d378 <etharp_query+0x268>)
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	005b      	lsls	r3, r3, #1
 800d1b4:	4413      	add	r3, r2
 800d1b6:	00db      	lsls	r3, r3, #3
 800d1b8:	440b      	add	r3, r1
 800d1ba:	3314      	adds	r3, #20
 800d1bc:	2201      	movs	r2, #1
 800d1be:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d1c0:	7c7a      	ldrb	r2, [r7, #17]
 800d1c2:	496d      	ldr	r1, [pc, #436]	; (800d378 <etharp_query+0x268>)
 800d1c4:	4613      	mov	r3, r2
 800d1c6:	005b      	lsls	r3, r3, #1
 800d1c8:	4413      	add	r3, r2
 800d1ca:	00db      	lsls	r3, r3, #3
 800d1cc:	440b      	add	r3, r1
 800d1ce:	3308      	adds	r3, #8
 800d1d0:	68fa      	ldr	r2, [r7, #12]
 800d1d2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d1d4:	7c7a      	ldrb	r2, [r7, #17]
 800d1d6:	4968      	ldr	r1, [pc, #416]	; (800d378 <etharp_query+0x268>)
 800d1d8:	4613      	mov	r3, r2
 800d1da:	005b      	lsls	r3, r3, #1
 800d1dc:	4413      	add	r3, r2
 800d1de:	00db      	lsls	r3, r3, #3
 800d1e0:	440b      	add	r3, r1
 800d1e2:	3314      	adds	r3, #20
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	2b01      	cmp	r3, #1
 800d1e8:	d011      	beq.n	800d20e <etharp_query+0xfe>
 800d1ea:	7c7a      	ldrb	r2, [r7, #17]
 800d1ec:	4962      	ldr	r1, [pc, #392]	; (800d378 <etharp_query+0x268>)
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	005b      	lsls	r3, r3, #1
 800d1f2:	4413      	add	r3, r2
 800d1f4:	00db      	lsls	r3, r3, #3
 800d1f6:	440b      	add	r3, r1
 800d1f8:	3314      	adds	r3, #20
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d806      	bhi.n	800d20e <etharp_query+0xfe>
 800d200:	4b5a      	ldr	r3, [pc, #360]	; (800d36c <etharp_query+0x25c>)
 800d202:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d206:	495d      	ldr	r1, [pc, #372]	; (800d37c <etharp_query+0x26c>)
 800d208:	485a      	ldr	r0, [pc, #360]	; (800d374 <etharp_query+0x264>)
 800d20a:	f001 fd69 	bl	800ece0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d20e:	6a3b      	ldr	r3, [r7, #32]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d102      	bne.n	800d21a <etharp_query+0x10a>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d10c      	bne.n	800d234 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d21a:	68b9      	ldr	r1, [r7, #8]
 800d21c:	68f8      	ldr	r0, [r7, #12]
 800d21e:	f000 f963 	bl	800d4e8 <etharp_request>
 800d222:	4603      	mov	r3, r0
 800d224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d102      	bne.n	800d234 <etharp_query+0x124>
      return result;
 800d22e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d232:	e096      	b.n	800d362 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d106      	bne.n	800d248 <etharp_query+0x138>
 800d23a:	4b4c      	ldr	r3, [pc, #304]	; (800d36c <etharp_query+0x25c>)
 800d23c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d240:	494f      	ldr	r1, [pc, #316]	; (800d380 <etharp_query+0x270>)
 800d242:	484c      	ldr	r0, [pc, #304]	; (800d374 <etharp_query+0x264>)
 800d244:	f001 fd4c 	bl	800ece0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d248:	7c7a      	ldrb	r2, [r7, #17]
 800d24a:	494b      	ldr	r1, [pc, #300]	; (800d378 <etharp_query+0x268>)
 800d24c:	4613      	mov	r3, r2
 800d24e:	005b      	lsls	r3, r3, #1
 800d250:	4413      	add	r3, r2
 800d252:	00db      	lsls	r3, r3, #3
 800d254:	440b      	add	r3, r1
 800d256:	3314      	adds	r3, #20
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d917      	bls.n	800d28e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d25e:	4a49      	ldr	r2, [pc, #292]	; (800d384 <etharp_query+0x274>)
 800d260:	7c7b      	ldrb	r3, [r7, #17]
 800d262:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d264:	7c7a      	ldrb	r2, [r7, #17]
 800d266:	4613      	mov	r3, r2
 800d268:	005b      	lsls	r3, r3, #1
 800d26a:	4413      	add	r3, r2
 800d26c:	00db      	lsls	r3, r3, #3
 800d26e:	3308      	adds	r3, #8
 800d270:	4a41      	ldr	r2, [pc, #260]	; (800d378 <etharp_query+0x268>)
 800d272:	4413      	add	r3, r2
 800d274:	3304      	adds	r3, #4
 800d276:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d27a:	9200      	str	r2, [sp, #0]
 800d27c:	697a      	ldr	r2, [r7, #20]
 800d27e:	6879      	ldr	r1, [r7, #4]
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	f001 fc81 	bl	800eb88 <ethernet_output>
 800d286:	4603      	mov	r3, r0
 800d288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d28c:	e067      	b.n	800d35e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d28e:	7c7a      	ldrb	r2, [r7, #17]
 800d290:	4939      	ldr	r1, [pc, #228]	; (800d378 <etharp_query+0x268>)
 800d292:	4613      	mov	r3, r2
 800d294:	005b      	lsls	r3, r3, #1
 800d296:	4413      	add	r3, r2
 800d298:	00db      	lsls	r3, r3, #3
 800d29a:	440b      	add	r3, r1
 800d29c:	3314      	adds	r3, #20
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	d15c      	bne.n	800d35e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d2ac:	e01c      	b.n	800d2e8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	895a      	ldrh	r2, [r3, #10]
 800d2b2:	69fb      	ldr	r3, [r7, #28]
 800d2b4:	891b      	ldrh	r3, [r3, #8]
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d10a      	bne.n	800d2d0 <etharp_query+0x1c0>
 800d2ba:	69fb      	ldr	r3, [r7, #28]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d006      	beq.n	800d2d0 <etharp_query+0x1c0>
 800d2c2:	4b2a      	ldr	r3, [pc, #168]	; (800d36c <etharp_query+0x25c>)
 800d2c4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d2c8:	492f      	ldr	r1, [pc, #188]	; (800d388 <etharp_query+0x278>)
 800d2ca:	482a      	ldr	r0, [pc, #168]	; (800d374 <etharp_query+0x264>)
 800d2cc:	f001 fd08 	bl	800ece0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d2d0:	69fb      	ldr	r3, [r7, #28]
 800d2d2:	7b1b      	ldrb	r3, [r3, #12]
 800d2d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d002      	beq.n	800d2e2 <etharp_query+0x1d2>
        copy_needed = 1;
 800d2dc:	2301      	movs	r3, #1
 800d2de:	61bb      	str	r3, [r7, #24]
        break;
 800d2e0:	e005      	b.n	800d2ee <etharp_query+0x1de>
      }
      p = p->next;
 800d2e2:	69fb      	ldr	r3, [r7, #28]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d2e8:	69fb      	ldr	r3, [r7, #28]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d1df      	bne.n	800d2ae <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d2ee:	69bb      	ldr	r3, [r7, #24]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d007      	beq.n	800d304 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d2fa:	200e      	movs	r0, #14
 800d2fc:	f7f9 f868 	bl	80063d0 <pbuf_clone>
 800d300:	61f8      	str	r0, [r7, #28]
 800d302:	e004      	b.n	800d30e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d308:	69f8      	ldr	r0, [r7, #28]
 800d30a:	f7f8 fe03 	bl	8005f14 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d30e:	69fb      	ldr	r3, [r7, #28]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d021      	beq.n	800d358 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d314:	7c7a      	ldrb	r2, [r7, #17]
 800d316:	4918      	ldr	r1, [pc, #96]	; (800d378 <etharp_query+0x268>)
 800d318:	4613      	mov	r3, r2
 800d31a:	005b      	lsls	r3, r3, #1
 800d31c:	4413      	add	r3, r2
 800d31e:	00db      	lsls	r3, r3, #3
 800d320:	440b      	add	r3, r1
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d00a      	beq.n	800d33e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d328:	7c7a      	ldrb	r2, [r7, #17]
 800d32a:	4913      	ldr	r1, [pc, #76]	; (800d378 <etharp_query+0x268>)
 800d32c:	4613      	mov	r3, r2
 800d32e:	005b      	lsls	r3, r3, #1
 800d330:	4413      	add	r3, r2
 800d332:	00db      	lsls	r3, r3, #3
 800d334:	440b      	add	r3, r1
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4618      	mov	r0, r3
 800d33a:	f7f8 fd4b 	bl	8005dd4 <pbuf_free>
      }
      arp_table[i].q = p;
 800d33e:	7c7a      	ldrb	r2, [r7, #17]
 800d340:	490d      	ldr	r1, [pc, #52]	; (800d378 <etharp_query+0x268>)
 800d342:	4613      	mov	r3, r2
 800d344:	005b      	lsls	r3, r3, #1
 800d346:	4413      	add	r3, r2
 800d348:	00db      	lsls	r3, r3, #3
 800d34a:	440b      	add	r3, r1
 800d34c:	69fa      	ldr	r2, [r7, #28]
 800d34e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d350:	2300      	movs	r3, #0
 800d352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d356:	e002      	b.n	800d35e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d358:	23ff      	movs	r3, #255	; 0xff
 800d35a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d35e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d362:	4618      	mov	r0, r3
 800d364:	3728      	adds	r7, #40	; 0x28
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	08012578 	.word	0x08012578
 800d370:	08012724 	.word	0x08012724
 800d374:	080125f0 	.word	0x080125f0
 800d378:	20008388 	.word	0x20008388
 800d37c:	08012734 	.word	0x08012734
 800d380:	08012718 	.word	0x08012718
 800d384:	20008478 	.word	0x20008478
 800d388:	0801275c 	.word	0x0801275c

0800d38c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b08a      	sub	sp, #40	; 0x28
 800d390:	af02      	add	r7, sp, #8
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	607a      	str	r2, [r7, #4]
 800d398:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d39a:	2300      	movs	r3, #0
 800d39c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d106      	bne.n	800d3b2 <etharp_raw+0x26>
 800d3a4:	4b3a      	ldr	r3, [pc, #232]	; (800d490 <etharp_raw+0x104>)
 800d3a6:	f240 4257 	movw	r2, #1111	; 0x457
 800d3aa:	493a      	ldr	r1, [pc, #232]	; (800d494 <etharp_raw+0x108>)
 800d3ac:	483a      	ldr	r0, [pc, #232]	; (800d498 <etharp_raw+0x10c>)
 800d3ae:	f001 fc97 	bl	800ece0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d3b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d3b6:	211c      	movs	r1, #28
 800d3b8:	200e      	movs	r0, #14
 800d3ba:	f7f8 fa27 	bl	800580c <pbuf_alloc>
 800d3be:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d102      	bne.n	800d3cc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d3c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d3ca:	e05d      	b.n	800d488 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d3cc:	69bb      	ldr	r3, [r7, #24]
 800d3ce:	895b      	ldrh	r3, [r3, #10]
 800d3d0:	2b1b      	cmp	r3, #27
 800d3d2:	d806      	bhi.n	800d3e2 <etharp_raw+0x56>
 800d3d4:	4b2e      	ldr	r3, [pc, #184]	; (800d490 <etharp_raw+0x104>)
 800d3d6:	f240 4262 	movw	r2, #1122	; 0x462
 800d3da:	4930      	ldr	r1, [pc, #192]	; (800d49c <etharp_raw+0x110>)
 800d3dc:	482e      	ldr	r0, [pc, #184]	; (800d498 <etharp_raw+0x10c>)
 800d3de:	f001 fc7f 	bl	800ece0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d3e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7f7 f922 	bl	8004634 <lwip_htons>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d3fe:	2b06      	cmp	r3, #6
 800d400:	d006      	beq.n	800d410 <etharp_raw+0x84>
 800d402:	4b23      	ldr	r3, [pc, #140]	; (800d490 <etharp_raw+0x104>)
 800d404:	f240 4269 	movw	r2, #1129	; 0x469
 800d408:	4925      	ldr	r1, [pc, #148]	; (800d4a0 <etharp_raw+0x114>)
 800d40a:	4823      	ldr	r0, [pc, #140]	; (800d498 <etharp_raw+0x10c>)
 800d40c:	f001 fc68 	bl	800ece0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	3308      	adds	r3, #8
 800d414:	2206      	movs	r2, #6
 800d416:	6839      	ldr	r1, [r7, #0]
 800d418:	4618      	mov	r0, r3
 800d41a:	f001 fc31 	bl	800ec80 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	3312      	adds	r3, #18
 800d422:	2206      	movs	r2, #6
 800d424:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d426:	4618      	mov	r0, r3
 800d428:	f001 fc2a 	bl	800ec80 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	330e      	adds	r3, #14
 800d430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d432:	6812      	ldr	r2, [r2, #0]
 800d434:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	3318      	adds	r3, #24
 800d43a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d43c:	6812      	ldr	r2, [r2, #0]
 800d43e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	2200      	movs	r2, #0
 800d444:	701a      	strb	r2, [r3, #0]
 800d446:	2200      	movs	r2, #0
 800d448:	f042 0201 	orr.w	r2, r2, #1
 800d44c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	2200      	movs	r2, #0
 800d452:	f042 0208 	orr.w	r2, r2, #8
 800d456:	709a      	strb	r2, [r3, #2]
 800d458:	2200      	movs	r2, #0
 800d45a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	2206      	movs	r2, #6
 800d460:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	2204      	movs	r2, #4
 800d466:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d468:	f640 0306 	movw	r3, #2054	; 0x806
 800d46c:	9300      	str	r3, [sp, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	68ba      	ldr	r2, [r7, #8]
 800d472:	69b9      	ldr	r1, [r7, #24]
 800d474:	68f8      	ldr	r0, [r7, #12]
 800d476:	f001 fb87 	bl	800eb88 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d47a:	69b8      	ldr	r0, [r7, #24]
 800d47c:	f7f8 fcaa 	bl	8005dd4 <pbuf_free>
  p = NULL;
 800d480:	2300      	movs	r3, #0
 800d482:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d484:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3720      	adds	r7, #32
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}
 800d490:	08012578 	.word	0x08012578
 800d494:	080126c8 	.word	0x080126c8
 800d498:	080125f0 	.word	0x080125f0
 800d49c:	08012778 	.word	0x08012778
 800d4a0:	080127ac 	.word	0x080127ac

0800d4a4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b088      	sub	sp, #32
 800d4a8:	af04      	add	r7, sp, #16
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	9203      	str	r2, [sp, #12]
 800d4c4:	68ba      	ldr	r2, [r7, #8]
 800d4c6:	9202      	str	r2, [sp, #8]
 800d4c8:	4a06      	ldr	r2, [pc, #24]	; (800d4e4 <etharp_request_dst+0x40>)
 800d4ca:	9201      	str	r2, [sp, #4]
 800d4cc:	9300      	str	r3, [sp, #0]
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	687a      	ldr	r2, [r7, #4]
 800d4d2:	68f8      	ldr	r0, [r7, #12]
 800d4d4:	f7ff ff5a 	bl	800d38c <etharp_raw>
 800d4d8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3710      	adds	r7, #16
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	08012d44 	.word	0x08012d44

0800d4e8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b082      	sub	sp, #8
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d4f2:	4a05      	ldr	r2, [pc, #20]	; (800d508 <etharp_request+0x20>)
 800d4f4:	6839      	ldr	r1, [r7, #0]
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f7ff ffd4 	bl	800d4a4 <etharp_request_dst>
 800d4fc:	4603      	mov	r3, r0
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3708      	adds	r7, #8
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	08012d3c 	.word	0x08012d3c

0800d50c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b08e      	sub	sp, #56	; 0x38
 800d510:	af04      	add	r7, sp, #16
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d516:	4b79      	ldr	r3, [pc, #484]	; (800d6fc <icmp_input+0x1f0>)
 800d518:	689b      	ldr	r3, [r3, #8]
 800d51a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	f003 030f 	and.w	r3, r3, #15
 800d524:	b2db      	uxtb	r3, r3
 800d526:	009b      	lsls	r3, r3, #2
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d52c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d52e:	2b13      	cmp	r3, #19
 800d530:	f240 80cd 	bls.w	800d6ce <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	895b      	ldrh	r3, [r3, #10]
 800d538:	2b03      	cmp	r3, #3
 800d53a:	f240 80ca 	bls.w	800d6d2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d548:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	f000 80b7 	beq.w	800d6c0 <icmp_input+0x1b4>
 800d552:	2b08      	cmp	r3, #8
 800d554:	f040 80b7 	bne.w	800d6c6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d558:	4b69      	ldr	r3, [pc, #420]	; (800d700 <icmp_input+0x1f4>)
 800d55a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d55c:	4b67      	ldr	r3, [pc, #412]	; (800d6fc <icmp_input+0x1f0>)
 800d55e:	695b      	ldr	r3, [r3, #20]
 800d560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d564:	2be0      	cmp	r3, #224	; 0xe0
 800d566:	f000 80bb 	beq.w	800d6e0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d56a:	4b64      	ldr	r3, [pc, #400]	; (800d6fc <icmp_input+0x1f0>)
 800d56c:	695b      	ldr	r3, [r3, #20]
 800d56e:	4a63      	ldr	r2, [pc, #396]	; (800d6fc <icmp_input+0x1f0>)
 800d570:	6812      	ldr	r2, [r2, #0]
 800d572:	4611      	mov	r1, r2
 800d574:	4618      	mov	r0, r3
 800d576:	f000 fbf9 	bl	800dd6c <ip4_addr_isbroadcast_u32>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	f040 80b1 	bne.w	800d6e4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	891b      	ldrh	r3, [r3, #8]
 800d586:	2b07      	cmp	r3, #7
 800d588:	f240 80a5 	bls.w	800d6d6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d58c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d58e:	330e      	adds	r3, #14
 800d590:	4619      	mov	r1, r3
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f7f8 fb88 	bl	8005ca8 <pbuf_add_header>
 800d598:	4603      	mov	r3, r0
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d04b      	beq.n	800d636 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	891a      	ldrh	r2, [r3, #8]
 800d5a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5a4:	4413      	add	r3, r2
 800d5a6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	891b      	ldrh	r3, [r3, #8]
 800d5ac:	8b7a      	ldrh	r2, [r7, #26]
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	f0c0 809a 	bcc.w	800d6e8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d5b4:	8b7b      	ldrh	r3, [r7, #26]
 800d5b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	200e      	movs	r0, #14
 800d5be:	f7f8 f925 	bl	800580c <pbuf_alloc>
 800d5c2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	f000 8090 	beq.w	800d6ec <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	895b      	ldrh	r3, [r3, #10]
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5d4:	3308      	adds	r3, #8
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d203      	bcs.n	800d5e2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d5da:	6978      	ldr	r0, [r7, #20]
 800d5dc:	f7f8 fbfa 	bl	8005dd4 <pbuf_free>
          goto icmperr;
 800d5e0:	e085      	b.n	800d6ee <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d5e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f001 fb48 	bl	800ec80 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d5f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	6978      	ldr	r0, [r7, #20]
 800d5f6:	f7f8 fb67 	bl	8005cc8 <pbuf_remove_header>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d009      	beq.n	800d614 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d600:	4b40      	ldr	r3, [pc, #256]	; (800d704 <icmp_input+0x1f8>)
 800d602:	22b6      	movs	r2, #182	; 0xb6
 800d604:	4940      	ldr	r1, [pc, #256]	; (800d708 <icmp_input+0x1fc>)
 800d606:	4841      	ldr	r0, [pc, #260]	; (800d70c <icmp_input+0x200>)
 800d608:	f001 fb6a 	bl	800ece0 <iprintf>
          pbuf_free(r);
 800d60c:	6978      	ldr	r0, [r7, #20]
 800d60e:	f7f8 fbe1 	bl	8005dd4 <pbuf_free>
          goto icmperr;
 800d612:	e06c      	b.n	800d6ee <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d614:	6879      	ldr	r1, [r7, #4]
 800d616:	6978      	ldr	r0, [r7, #20]
 800d618:	f7f8 fd04 	bl	8006024 <pbuf_copy>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d003      	beq.n	800d62a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d622:	6978      	ldr	r0, [r7, #20]
 800d624:	f7f8 fbd6 	bl	8005dd4 <pbuf_free>
          goto icmperr;
 800d628:	e061      	b.n	800d6ee <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f7f8 fbd2 	bl	8005dd4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	607b      	str	r3, [r7, #4]
 800d634:	e00f      	b.n	800d656 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d636:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d638:	330e      	adds	r3, #14
 800d63a:	4619      	mov	r1, r3
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7f8 fb43 	bl	8005cc8 <pbuf_remove_header>
 800d642:	4603      	mov	r3, r0
 800d644:	2b00      	cmp	r3, #0
 800d646:	d006      	beq.n	800d656 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d648:	4b2e      	ldr	r3, [pc, #184]	; (800d704 <icmp_input+0x1f8>)
 800d64a:	22c7      	movs	r2, #199	; 0xc7
 800d64c:	4930      	ldr	r1, [pc, #192]	; (800d710 <icmp_input+0x204>)
 800d64e:	482f      	ldr	r0, [pc, #188]	; (800d70c <icmp_input+0x200>)
 800d650:	f001 fb46 	bl	800ece0 <iprintf>
          goto icmperr;
 800d654:	e04b      	b.n	800d6ee <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	685b      	ldr	r3, [r3, #4]
 800d65a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d65c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d65e:	4619      	mov	r1, r3
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f7f8 fb21 	bl	8005ca8 <pbuf_add_header>
 800d666:	4603      	mov	r3, r0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d12b      	bne.n	800d6c4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d67a:	4b20      	ldr	r3, [pc, #128]	; (800d6fc <icmp_input+0x1f0>)
 800d67c:	691a      	ldr	r2, [r3, #16]
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	2200      	movs	r2, #0
 800d686:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	2200      	movs	r2, #0
 800d68c:	709a      	strb	r2, [r3, #2]
 800d68e:	2200      	movs	r2, #0
 800d690:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	22ff      	movs	r2, #255	; 0xff
 800d696:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2200      	movs	r2, #0
 800d69c:	729a      	strb	r2, [r3, #10]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	9302      	str	r3, [sp, #8]
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	9301      	str	r3, [sp, #4]
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	9300      	str	r3, [sp, #0]
 800d6ae:	23ff      	movs	r3, #255	; 0xff
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	69f9      	ldr	r1, [r7, #28]
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 fa81 	bl	800dbbc <ip4_output_if>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d6be:	e001      	b.n	800d6c4 <icmp_input+0x1b8>
      break;
 800d6c0:	bf00      	nop
 800d6c2:	e000      	b.n	800d6c6 <icmp_input+0x1ba>
      break;
 800d6c4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f7f8 fb84 	bl	8005dd4 <pbuf_free>
  return;
 800d6cc:	e013      	b.n	800d6f6 <icmp_input+0x1ea>
    goto lenerr;
 800d6ce:	bf00      	nop
 800d6d0:	e002      	b.n	800d6d8 <icmp_input+0x1cc>
    goto lenerr;
 800d6d2:	bf00      	nop
 800d6d4:	e000      	b.n	800d6d8 <icmp_input+0x1cc>
        goto lenerr;
 800d6d6:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f7f8 fb7b 	bl	8005dd4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d6de:	e00a      	b.n	800d6f6 <icmp_input+0x1ea>
        goto icmperr;
 800d6e0:	bf00      	nop
 800d6e2:	e004      	b.n	800d6ee <icmp_input+0x1e2>
        goto icmperr;
 800d6e4:	bf00      	nop
 800d6e6:	e002      	b.n	800d6ee <icmp_input+0x1e2>
          goto icmperr;
 800d6e8:	bf00      	nop
 800d6ea:	e000      	b.n	800d6ee <icmp_input+0x1e2>
          goto icmperr;
 800d6ec:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f7f8 fb70 	bl	8005dd4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d6f4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d6f6:	3728      	adds	r7, #40	; 0x28
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	20004d3c 	.word	0x20004d3c
 800d700:	20004d50 	.word	0x20004d50
 800d704:	080127f0 	.word	0x080127f0
 800d708:	08012828 	.word	0x08012828
 800d70c:	08012860 	.word	0x08012860
 800d710:	08012888 	.word	0x08012888

0800d714 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	460b      	mov	r3, r1
 800d71e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d720:	78fb      	ldrb	r3, [r7, #3]
 800d722:	461a      	mov	r2, r3
 800d724:	2103      	movs	r1, #3
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 f814 	bl	800d754 <icmp_send_response>
}
 800d72c:	bf00      	nop
 800d72e:	3708      	adds	r7, #8
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	460b      	mov	r3, r1
 800d73e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d740:	78fb      	ldrb	r3, [r7, #3]
 800d742:	461a      	mov	r2, r3
 800d744:	210b      	movs	r1, #11
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f000 f804 	bl	800d754 <icmp_send_response>
}
 800d74c:	bf00      	nop
 800d74e:	3708      	adds	r7, #8
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b08c      	sub	sp, #48	; 0x30
 800d758:	af04      	add	r7, sp, #16
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	460b      	mov	r3, r1
 800d75e:	70fb      	strb	r3, [r7, #3]
 800d760:	4613      	mov	r3, r2
 800d762:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d764:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d768:	2124      	movs	r1, #36	; 0x24
 800d76a:	2022      	movs	r0, #34	; 0x22
 800d76c:	f7f8 f84e 	bl	800580c <pbuf_alloc>
 800d770:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d772:	69fb      	ldr	r3, [r7, #28]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d04c      	beq.n	800d812 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	895b      	ldrh	r3, [r3, #10]
 800d77c:	2b23      	cmp	r3, #35	; 0x23
 800d77e:	d806      	bhi.n	800d78e <icmp_send_response+0x3a>
 800d780:	4b26      	ldr	r3, [pc, #152]	; (800d81c <icmp_send_response+0xc8>)
 800d782:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d786:	4926      	ldr	r1, [pc, #152]	; (800d820 <icmp_send_response+0xcc>)
 800d788:	4826      	ldr	r0, [pc, #152]	; (800d824 <icmp_send_response+0xd0>)
 800d78a:	f001 faa9 	bl	800ece0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	78fa      	ldrb	r2, [r7, #3]
 800d79e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	78ba      	ldrb	r2, [r7, #2]
 800d7a4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	711a      	strb	r2, [r3, #4]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	719a      	strb	r2, [r3, #6]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	f103 0008 	add.w	r0, r3, #8
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	221c      	movs	r2, #28
 800d7c8:	4619      	mov	r1, r3
 800d7ca:	f001 fa59 	bl	800ec80 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	68db      	ldr	r3, [r3, #12]
 800d7d2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d7d4:	f107 030c 	add.w	r3, r7, #12
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f000 f825 	bl	800d828 <ip4_route>
 800d7de:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d011      	beq.n	800d80a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	709a      	strb	r2, [r3, #2]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d7f0:	f107 020c 	add.w	r2, r7, #12
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	9302      	str	r3, [sp, #8]
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	9301      	str	r3, [sp, #4]
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	9300      	str	r3, [sp, #0]
 800d800:	23ff      	movs	r3, #255	; 0xff
 800d802:	2100      	movs	r1, #0
 800d804:	69f8      	ldr	r0, [r7, #28]
 800d806:	f000 f9d9 	bl	800dbbc <ip4_output_if>
  }
  pbuf_free(q);
 800d80a:	69f8      	ldr	r0, [r7, #28]
 800d80c:	f7f8 fae2 	bl	8005dd4 <pbuf_free>
 800d810:	e000      	b.n	800d814 <icmp_send_response+0xc0>
    return;
 800d812:	bf00      	nop
}
 800d814:	3720      	adds	r7, #32
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop
 800d81c:	080127f0 	.word	0x080127f0
 800d820:	080128bc 	.word	0x080128bc
 800d824:	08012860 	.word	0x08012860

0800d828 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d828:	b480      	push	{r7}
 800d82a:	b085      	sub	sp, #20
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d830:	4b33      	ldr	r3, [pc, #204]	; (800d900 <ip4_route+0xd8>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	60fb      	str	r3, [r7, #12]
 800d836:	e036      	b.n	800d8a6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d83e:	f003 0301 	and.w	r3, r3, #1
 800d842:	b2db      	uxtb	r3, r3
 800d844:	2b00      	cmp	r3, #0
 800d846:	d02b      	beq.n	800d8a0 <ip4_route+0x78>
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d84e:	089b      	lsrs	r3, r3, #2
 800d850:	f003 0301 	and.w	r3, r3, #1
 800d854:	b2db      	uxtb	r3, r3
 800d856:	2b00      	cmp	r3, #0
 800d858:	d022      	beq.n	800d8a0 <ip4_route+0x78>
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	3304      	adds	r3, #4
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d01d      	beq.n	800d8a0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681a      	ldr	r2, [r3, #0]
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	3304      	adds	r3, #4
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	405a      	eors	r2, r3
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	3308      	adds	r3, #8
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4013      	ands	r3, r2
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d101      	bne.n	800d880 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	e038      	b.n	800d8f2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d886:	f003 0302 	and.w	r3, r3, #2
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d108      	bne.n	800d8a0 <ip4_route+0x78>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681a      	ldr	r2, [r3, #0]
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	330c      	adds	r3, #12
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d101      	bne.n	800d8a0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	e028      	b.n	800d8f2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	60fb      	str	r3, [r7, #12]
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d1c5      	bne.n	800d838 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d8ac:	4b15      	ldr	r3, [pc, #84]	; (800d904 <ip4_route+0xdc>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d01a      	beq.n	800d8ea <ip4_route+0xc2>
 800d8b4:	4b13      	ldr	r3, [pc, #76]	; (800d904 <ip4_route+0xdc>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8bc:	f003 0301 	and.w	r3, r3, #1
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d012      	beq.n	800d8ea <ip4_route+0xc2>
 800d8c4:	4b0f      	ldr	r3, [pc, #60]	; (800d904 <ip4_route+0xdc>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8cc:	f003 0304 	and.w	r3, r3, #4
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d00a      	beq.n	800d8ea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d8d4:	4b0b      	ldr	r3, [pc, #44]	; (800d904 <ip4_route+0xdc>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	3304      	adds	r3, #4
 800d8da:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d004      	beq.n	800d8ea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	2b7f      	cmp	r3, #127	; 0x7f
 800d8e8:	d101      	bne.n	800d8ee <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	e001      	b.n	800d8f2 <ip4_route+0xca>
  }

  return netif_default;
 800d8ee:	4b05      	ldr	r3, [pc, #20]	; (800d904 <ip4_route+0xdc>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3714      	adds	r7, #20
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr
 800d8fe:	bf00      	nop
 800d900:	20008318 	.word	0x20008318
 800d904:	2000831c 	.word	0x2000831c

0800d908 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d916:	f003 0301 	and.w	r3, r3, #1
 800d91a:	b2db      	uxtb	r3, r3
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d016      	beq.n	800d94e <ip4_input_accept+0x46>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	3304      	adds	r3, #4
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d011      	beq.n	800d94e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d92a:	4b0b      	ldr	r3, [pc, #44]	; (800d958 <ip4_input_accept+0x50>)
 800d92c:	695a      	ldr	r2, [r3, #20]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	3304      	adds	r3, #4
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	429a      	cmp	r2, r3
 800d936:	d008      	beq.n	800d94a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d938:	4b07      	ldr	r3, [pc, #28]	; (800d958 <ip4_input_accept+0x50>)
 800d93a:	695b      	ldr	r3, [r3, #20]
 800d93c:	6879      	ldr	r1, [r7, #4]
 800d93e:	4618      	mov	r0, r3
 800d940:	f000 fa14 	bl	800dd6c <ip4_addr_isbroadcast_u32>
 800d944:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d946:	2b00      	cmp	r3, #0
 800d948:	d001      	beq.n	800d94e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d94a:	2301      	movs	r3, #1
 800d94c:	e000      	b.n	800d950 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d94e:	2300      	movs	r3, #0
}
 800d950:	4618      	mov	r0, r3
 800d952:	3708      	adds	r7, #8
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}
 800d958:	20004d3c 	.word	0x20004d3c

0800d95c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b086      	sub	sp, #24
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	685b      	ldr	r3, [r3, #4]
 800d96a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	091b      	lsrs	r3, r3, #4
 800d972:	b2db      	uxtb	r3, r3
 800d974:	2b04      	cmp	r3, #4
 800d976:	d004      	beq.n	800d982 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f7f8 fa2b 	bl	8005dd4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d97e:	2300      	movs	r3, #0
 800d980:	e114      	b.n	800dbac <ip4_input+0x250>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	f003 030f 	and.w	r3, r3, #15
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	885b      	ldrh	r3, [r3, #2]
 800d996:	b29b      	uxth	r3, r3
 800d998:	4618      	mov	r0, r3
 800d99a:	f7f6 fe4b 	bl	8004634 <lwip_htons>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	891b      	ldrh	r3, [r3, #8]
 800d9a6:	89ba      	ldrh	r2, [r7, #12]
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d204      	bcs.n	800d9b6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d9ac:	89bb      	ldrh	r3, [r7, #12]
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f7f8 f889 	bl	8005ac8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	895b      	ldrh	r3, [r3, #10]
 800d9ba:	89fa      	ldrh	r2, [r7, #14]
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d807      	bhi.n	800d9d0 <ip4_input+0x74>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	891b      	ldrh	r3, [r3, #8]
 800d9c4:	89ba      	ldrh	r2, [r7, #12]
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d802      	bhi.n	800d9d0 <ip4_input+0x74>
 800d9ca:	89fb      	ldrh	r3, [r7, #14]
 800d9cc:	2b13      	cmp	r3, #19
 800d9ce:	d804      	bhi.n	800d9da <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f7f8 f9ff 	bl	8005dd4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	e0e8      	b.n	800dbac <ip4_input+0x250>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	691b      	ldr	r3, [r3, #16]
 800d9de:	4a75      	ldr	r2, [pc, #468]	; (800dbb4 <ip4_input+0x258>)
 800d9e0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	68db      	ldr	r3, [r3, #12]
 800d9e6:	4a73      	ldr	r2, [pc, #460]	; (800dbb4 <ip4_input+0x258>)
 800d9e8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d9ea:	4b72      	ldr	r3, [pc, #456]	; (800dbb4 <ip4_input+0x258>)
 800d9ec:	695b      	ldr	r3, [r3, #20]
 800d9ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d9f2:	2be0      	cmp	r3, #224	; 0xe0
 800d9f4:	d112      	bne.n	800da1c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d9fc:	f003 0301 	and.w	r3, r3, #1
 800da00:	b2db      	uxtb	r3, r3
 800da02:	2b00      	cmp	r3, #0
 800da04:	d007      	beq.n	800da16 <ip4_input+0xba>
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	3304      	adds	r3, #4
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d002      	beq.n	800da16 <ip4_input+0xba>
      netif = inp;
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	613b      	str	r3, [r7, #16]
 800da14:	e02a      	b.n	800da6c <ip4_input+0x110>
    } else {
      netif = NULL;
 800da16:	2300      	movs	r3, #0
 800da18:	613b      	str	r3, [r7, #16]
 800da1a:	e027      	b.n	800da6c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800da1c:	6838      	ldr	r0, [r7, #0]
 800da1e:	f7ff ff73 	bl	800d908 <ip4_input_accept>
 800da22:	4603      	mov	r3, r0
 800da24:	2b00      	cmp	r3, #0
 800da26:	d002      	beq.n	800da2e <ip4_input+0xd2>
      netif = inp;
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	613b      	str	r3, [r7, #16]
 800da2c:	e01e      	b.n	800da6c <ip4_input+0x110>
    } else {
      netif = NULL;
 800da2e:	2300      	movs	r3, #0
 800da30:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800da32:	4b60      	ldr	r3, [pc, #384]	; (800dbb4 <ip4_input+0x258>)
 800da34:	695b      	ldr	r3, [r3, #20]
 800da36:	b2db      	uxtb	r3, r3
 800da38:	2b7f      	cmp	r3, #127	; 0x7f
 800da3a:	d017      	beq.n	800da6c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800da3c:	4b5e      	ldr	r3, [pc, #376]	; (800dbb8 <ip4_input+0x25c>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	613b      	str	r3, [r7, #16]
 800da42:	e00e      	b.n	800da62 <ip4_input+0x106>
          if (netif == inp) {
 800da44:	693a      	ldr	r2, [r7, #16]
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	429a      	cmp	r2, r3
 800da4a:	d006      	beq.n	800da5a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800da4c:	6938      	ldr	r0, [r7, #16]
 800da4e:	f7ff ff5b 	bl	800d908 <ip4_input_accept>
 800da52:	4603      	mov	r3, r0
 800da54:	2b00      	cmp	r3, #0
 800da56:	d108      	bne.n	800da6a <ip4_input+0x10e>
 800da58:	e000      	b.n	800da5c <ip4_input+0x100>
            continue;
 800da5a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	613b      	str	r3, [r7, #16]
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d1ed      	bne.n	800da44 <ip4_input+0xe8>
 800da68:	e000      	b.n	800da6c <ip4_input+0x110>
            break;
 800da6a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800da6c:	4b51      	ldr	r3, [pc, #324]	; (800dbb4 <ip4_input+0x258>)
 800da6e:	691b      	ldr	r3, [r3, #16]
 800da70:	6839      	ldr	r1, [r7, #0]
 800da72:	4618      	mov	r0, r3
 800da74:	f000 f97a 	bl	800dd6c <ip4_addr_isbroadcast_u32>
 800da78:	4603      	mov	r3, r0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d105      	bne.n	800da8a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800da7e:	4b4d      	ldr	r3, [pc, #308]	; (800dbb4 <ip4_input+0x258>)
 800da80:	691b      	ldr	r3, [r3, #16]
 800da82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800da86:	2be0      	cmp	r3, #224	; 0xe0
 800da88:	d104      	bne.n	800da94 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f7f8 f9a2 	bl	8005dd4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800da90:	2300      	movs	r3, #0
 800da92:	e08b      	b.n	800dbac <ip4_input+0x250>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d104      	bne.n	800daa4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f7f8 f99a 	bl	8005dd4 <pbuf_free>
    return ERR_OK;
 800daa0:	2300      	movs	r3, #0
 800daa2:	e083      	b.n	800dbac <ip4_input+0x250>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	88db      	ldrh	r3, [r3, #6]
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	461a      	mov	r2, r3
 800daac:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800dab0:	4013      	ands	r3, r2
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d00b      	beq.n	800dace <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 fc9e 	bl	800e3f8 <ip4_reass>
 800dabc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d101      	bne.n	800dac8 <ip4_input+0x16c>
      return ERR_OK;
 800dac4:	2300      	movs	r3, #0
 800dac6:	e071      	b.n	800dbac <ip4_input+0x250>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	685b      	ldr	r3, [r3, #4]
 800dacc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800dace:	4a39      	ldr	r2, [pc, #228]	; (800dbb4 <ip4_input+0x258>)
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800dad4:	4a37      	ldr	r2, [pc, #220]	; (800dbb4 <ip4_input+0x258>)
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800dada:	4a36      	ldr	r2, [pc, #216]	; (800dbb4 <ip4_input+0x258>)
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	f003 030f 	and.w	r3, r3, #15
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	009b      	lsls	r3, r3, #2
 800daec:	b2db      	uxtb	r3, r3
 800daee:	b29a      	uxth	r2, r3
 800daf0:	4b30      	ldr	r3, [pc, #192]	; (800dbb4 <ip4_input+0x258>)
 800daf2:	819a      	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 800daf4:	6839      	ldr	r1, [r7, #0]
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f7f8 fcd6 	bl	80064a8 <raw_input>
 800dafc:	4603      	mov	r3, r0
 800dafe:	72fb      	strb	r3, [r7, #11]
  if (raw_status != RAW_INPUT_EATEN)
 800db00:	7afb      	ldrb	r3, [r7, #11]
 800db02:	2b01      	cmp	r3, #1
 800db04:	d03e      	beq.n	800db84 <ip4_input+0x228>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800db06:	89fb      	ldrh	r3, [r7, #14]
 800db08:	4619      	mov	r1, r3
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f7f8 f8dc 	bl	8005cc8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	7a5b      	ldrb	r3, [r3, #9]
 800db14:	2b11      	cmp	r3, #17
 800db16:	d006      	beq.n	800db26 <ip4_input+0x1ca>
 800db18:	2b11      	cmp	r3, #17
 800db1a:	dc13      	bgt.n	800db44 <ip4_input+0x1e8>
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d00c      	beq.n	800db3a <ip4_input+0x1de>
 800db20:	2b06      	cmp	r3, #6
 800db22:	d005      	beq.n	800db30 <ip4_input+0x1d4>
 800db24:	e00e      	b.n	800db44 <ip4_input+0x1e8>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800db26:	6839      	ldr	r1, [r7, #0]
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f7fe f9ed 	bl	800bf08 <udp_input>
        break;
 800db2e:	e02a      	b.n	800db86 <ip4_input+0x22a>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800db30:	6839      	ldr	r1, [r7, #0]
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7fa fa2e 	bl	8007f94 <tcp_input>
        break;
 800db38:	e025      	b.n	800db86 <ip4_input+0x22a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800db3a:	6839      	ldr	r1, [r7, #0]
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f7ff fce5 	bl	800d50c <icmp_input>
        break;
 800db42:	e020      	b.n	800db86 <ip4_input+0x22a>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 800db44:	7afb      	ldrb	r3, [r7, #11]
 800db46:	2b02      	cmp	r3, #2
 800db48:	d018      	beq.n	800db7c <ip4_input+0x220>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800db4a:	4b1a      	ldr	r3, [pc, #104]	; (800dbb4 <ip4_input+0x258>)
 800db4c:	695b      	ldr	r3, [r3, #20]
 800db4e:	6939      	ldr	r1, [r7, #16]
 800db50:	4618      	mov	r0, r3
 800db52:	f000 f90b 	bl	800dd6c <ip4_addr_isbroadcast_u32>
 800db56:	4603      	mov	r3, r0
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d10f      	bne.n	800db7c <ip4_input+0x220>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800db5c:	4b15      	ldr	r3, [pc, #84]	; (800dbb4 <ip4_input+0x258>)
 800db5e:	695b      	ldr	r3, [r3, #20]
 800db60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800db64:	2be0      	cmp	r3, #224	; 0xe0
 800db66:	d009      	beq.n	800db7c <ip4_input+0x220>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800db68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800db6c:	4619      	mov	r1, r3
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f7f8 f91d 	bl	8005dae <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800db74:	2102      	movs	r1, #2
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f7ff fdcc 	bl	800d714 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f7f8 f929 	bl	8005dd4 <pbuf_free>
        break;
 800db82:	e000      	b.n	800db86 <ip4_input+0x22a>
    }
  }
 800db84:	bf00      	nop

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800db86:	4b0b      	ldr	r3, [pc, #44]	; (800dbb4 <ip4_input+0x258>)
 800db88:	2200      	movs	r2, #0
 800db8a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800db8c:	4b09      	ldr	r3, [pc, #36]	; (800dbb4 <ip4_input+0x258>)
 800db8e:	2200      	movs	r2, #0
 800db90:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800db92:	4b08      	ldr	r3, [pc, #32]	; (800dbb4 <ip4_input+0x258>)
 800db94:	2200      	movs	r2, #0
 800db96:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800db98:	4b06      	ldr	r3, [pc, #24]	; (800dbb4 <ip4_input+0x258>)
 800db9a:	2200      	movs	r2, #0
 800db9c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800db9e:	4b05      	ldr	r3, [pc, #20]	; (800dbb4 <ip4_input+0x258>)
 800dba0:	2200      	movs	r2, #0
 800dba2:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800dba4:	4b03      	ldr	r3, [pc, #12]	; (800dbb4 <ip4_input+0x258>)
 800dba6:	2200      	movs	r2, #0
 800dba8:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800dbaa:	2300      	movs	r3, #0
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3718      	adds	r7, #24
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	20004d3c 	.word	0x20004d3c
 800dbb8:	20008318 	.word	0x20008318

0800dbbc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b08a      	sub	sp, #40	; 0x28
 800dbc0:	af04      	add	r7, sp, #16
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	60b9      	str	r1, [r7, #8]
 800dbc6:	607a      	str	r2, [r7, #4]
 800dbc8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d009      	beq.n	800dbe8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d003      	beq.n	800dbe2 <ip4_output_if+0x26>
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d102      	bne.n	800dbe8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800dbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe4:	3304      	adds	r3, #4
 800dbe6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800dbe8:	78fa      	ldrb	r2, [r7, #3]
 800dbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbec:	9302      	str	r3, [sp, #8]
 800dbee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dbf2:	9301      	str	r3, [sp, #4]
 800dbf4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dbf8:	9300      	str	r3, [sp, #0]
 800dbfa:	4613      	mov	r3, r2
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	6979      	ldr	r1, [r7, #20]
 800dc00:	68f8      	ldr	r0, [r7, #12]
 800dc02:	f000 f805 	bl	800dc10 <ip4_output_if_src>
 800dc06:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3718      	adds	r7, #24
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b088      	sub	sp, #32
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	60b9      	str	r1, [r7, #8]
 800dc1a:	607a      	str	r2, [r7, #4]
 800dc1c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	7b9b      	ldrb	r3, [r3, #14]
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	d006      	beq.n	800dc34 <ip4_output_if_src+0x24>
 800dc26:	4b4b      	ldr	r3, [pc, #300]	; (800dd54 <ip4_output_if_src+0x144>)
 800dc28:	f44f 7255 	mov.w	r2, #852	; 0x354
 800dc2c:	494a      	ldr	r1, [pc, #296]	; (800dd58 <ip4_output_if_src+0x148>)
 800dc2e:	484b      	ldr	r0, [pc, #300]	; (800dd5c <ip4_output_if_src+0x14c>)
 800dc30:	f001 f856 	bl	800ece0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d060      	beq.n	800dcfc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800dc3a:	2314      	movs	r3, #20
 800dc3c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800dc3e:	2114      	movs	r1, #20
 800dc40:	68f8      	ldr	r0, [r7, #12]
 800dc42:	f7f8 f831 	bl	8005ca8 <pbuf_add_header>
 800dc46:	4603      	mov	r3, r0
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d002      	beq.n	800dc52 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dc4c:	f06f 0301 	mvn.w	r3, #1
 800dc50:	e07c      	b.n	800dd4c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	895b      	ldrh	r3, [r3, #10]
 800dc5c:	2b13      	cmp	r3, #19
 800dc5e:	d806      	bhi.n	800dc6e <ip4_output_if_src+0x5e>
 800dc60:	4b3c      	ldr	r3, [pc, #240]	; (800dd54 <ip4_output_if_src+0x144>)
 800dc62:	f44f 7262 	mov.w	r2, #904	; 0x388
 800dc66:	493e      	ldr	r1, [pc, #248]	; (800dd60 <ip4_output_if_src+0x150>)
 800dc68:	483c      	ldr	r0, [pc, #240]	; (800dd5c <ip4_output_if_src+0x14c>)
 800dc6a:	f001 f839 	bl	800ece0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800dc6e:	69fb      	ldr	r3, [r7, #28]
 800dc70:	78fa      	ldrb	r2, [r7, #3]
 800dc72:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800dc74:	69fb      	ldr	r3, [r7, #28]
 800dc76:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800dc7a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681a      	ldr	r2, [r3, #0]
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800dc84:	8b7b      	ldrh	r3, [r7, #26]
 800dc86:	089b      	lsrs	r3, r3, #2
 800dc88:	b29b      	uxth	r3, r3
 800dc8a:	b2db      	uxtb	r3, r3
 800dc8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc90:	b2da      	uxtb	r2, r3
 800dc92:	69fb      	ldr	r3, [r7, #28]
 800dc94:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800dc96:	69fb      	ldr	r3, [r7, #28]
 800dc98:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800dc9c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	891b      	ldrh	r3, [r3, #8]
 800dca2:	4618      	mov	r0, r3
 800dca4:	f7f6 fcc6 	bl	8004634 <lwip_htons>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	461a      	mov	r2, r3
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	719a      	strb	r2, [r3, #6]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800dcba:	4b2a      	ldr	r3, [pc, #168]	; (800dd64 <ip4_output_if_src+0x154>)
 800dcbc:	881b      	ldrh	r3, [r3, #0]
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7f6 fcb8 	bl	8004634 <lwip_htons>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	461a      	mov	r2, r3
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800dccc:	4b25      	ldr	r3, [pc, #148]	; (800dd64 <ip4_output_if_src+0x154>)
 800dcce:	881b      	ldrh	r3, [r3, #0]
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	b29a      	uxth	r2, r3
 800dcd4:	4b23      	ldr	r3, [pc, #140]	; (800dd64 <ip4_output_if_src+0x154>)
 800dcd6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d104      	bne.n	800dce8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800dcde:	4b22      	ldr	r3, [pc, #136]	; (800dd68 <ip4_output_if_src+0x158>)
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	69fb      	ldr	r3, [r7, #28]
 800dce4:	60da      	str	r2, [r3, #12]
 800dce6:	e003      	b.n	800dcf0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	681a      	ldr	r2, [r3, #0]
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800dcf0:	69fb      	ldr	r3, [r7, #28]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	729a      	strb	r2, [r3, #10]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	72da      	strb	r2, [r3, #11]
 800dcfa:	e00f      	b.n	800dd1c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	895b      	ldrh	r3, [r3, #10]
 800dd00:	2b13      	cmp	r3, #19
 800dd02:	d802      	bhi.n	800dd0a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dd04:	f06f 0301 	mvn.w	r3, #1
 800dd08:	e020      	b.n	800dd4c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	691b      	ldr	r3, [r3, #16]
 800dd14:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800dd16:	f107 0314 	add.w	r3, r7, #20
 800dd1a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800dd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d00c      	beq.n	800dd3e <ip4_output_if_src+0x12e>
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	891a      	ldrh	r2, [r3, #8]
 800dd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d906      	bls.n	800dd3e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dd34:	68f8      	ldr	r0, [r7, #12]
 800dd36:	f000 fd53 	bl	800e7e0 <ip4_frag>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	e006      	b.n	800dd4c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800dd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd40:	695b      	ldr	r3, [r3, #20]
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	68f9      	ldr	r1, [r7, #12]
 800dd46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd48:	4798      	blx	r3
 800dd4a:	4603      	mov	r3, r0
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3720      	adds	r7, #32
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}
 800dd54:	080128e8 	.word	0x080128e8
 800dd58:	0801291c 	.word	0x0801291c
 800dd5c:	08012928 	.word	0x08012928
 800dd60:	08012950 	.word	0x08012950
 800dd64:	2000847a 	.word	0x2000847a
 800dd68:	08012d38 	.word	0x08012d38

0800dd6c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b085      	sub	sp, #20
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd80:	d002      	beq.n	800dd88 <ip4_addr_isbroadcast_u32+0x1c>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d101      	bne.n	800dd8c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800dd88:	2301      	movs	r3, #1
 800dd8a:	e02a      	b.n	800dde2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd92:	f003 0302 	and.w	r3, r3, #2
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d101      	bne.n	800dd9e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	e021      	b.n	800dde2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	3304      	adds	r3, #4
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d101      	bne.n	800ddae <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	e019      	b.n	800dde2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ddae:	68fa      	ldr	r2, [r7, #12]
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	3304      	adds	r3, #4
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	405a      	eors	r2, r3
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	3308      	adds	r3, #8
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	4013      	ands	r3, r2
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d10d      	bne.n	800dde0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	3308      	adds	r3, #8
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	43da      	mvns	r2, r3
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	3308      	adds	r3, #8
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d101      	bne.n	800dde0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800dddc:	2301      	movs	r3, #1
 800ddde:	e000      	b.n	800dde2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800dde0:	2300      	movs	r3, #0
  }
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3714      	adds	r7, #20
 800dde6:	46bd      	mov	sp, r7
 800dde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddec:	4770      	bx	lr
	...

0800ddf0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ddfa:	4b12      	ldr	r3, [pc, #72]	; (800de44 <ip_reass_tmr+0x54>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800de00:	e018      	b.n	800de34 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	7fdb      	ldrb	r3, [r3, #31]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d00b      	beq.n	800de22 <ip_reass_tmr+0x32>
      r->timer--;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	7fdb      	ldrb	r3, [r3, #31]
 800de0e:	3b01      	subs	r3, #1
 800de10:	b2da      	uxtb	r2, r3
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	60fb      	str	r3, [r7, #12]
 800de20:	e008      	b.n	800de34 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800de2c:	68b9      	ldr	r1, [r7, #8]
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f000 f80a 	bl	800de48 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d1e3      	bne.n	800de02 <ip_reass_tmr+0x12>
    }
  }
}
 800de3a:	bf00      	nop
 800de3c:	bf00      	nop
 800de3e:	3710      	adds	r7, #16
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}
 800de44:	2000847c 	.word	0x2000847c

0800de48 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b088      	sub	sp, #32
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800de52:	2300      	movs	r3, #0
 800de54:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800de56:	683a      	ldr	r2, [r7, #0]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d105      	bne.n	800de6a <ip_reass_free_complete_datagram+0x22>
 800de5e:	4b45      	ldr	r3, [pc, #276]	; (800df74 <ip_reass_free_complete_datagram+0x12c>)
 800de60:	22ab      	movs	r2, #171	; 0xab
 800de62:	4945      	ldr	r1, [pc, #276]	; (800df78 <ip_reass_free_complete_datagram+0x130>)
 800de64:	4845      	ldr	r0, [pc, #276]	; (800df7c <ip_reass_free_complete_datagram+0x134>)
 800de66:	f000 ff3b 	bl	800ece0 <iprintf>
  if (prev != NULL) {
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d00a      	beq.n	800de86 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	687a      	ldr	r2, [r7, #4]
 800de76:	429a      	cmp	r2, r3
 800de78:	d005      	beq.n	800de86 <ip_reass_free_complete_datagram+0x3e>
 800de7a:	4b3e      	ldr	r3, [pc, #248]	; (800df74 <ip_reass_free_complete_datagram+0x12c>)
 800de7c:	22ad      	movs	r2, #173	; 0xad
 800de7e:	4940      	ldr	r1, [pc, #256]	; (800df80 <ip_reass_free_complete_datagram+0x138>)
 800de80:	483e      	ldr	r0, [pc, #248]	; (800df7c <ip_reass_free_complete_datagram+0x134>)
 800de82:	f000 ff2d 	bl	800ece0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	685b      	ldr	r3, [r3, #4]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	889b      	ldrh	r3, [r3, #4]
 800de92:	b29b      	uxth	r3, r3
 800de94:	2b00      	cmp	r3, #0
 800de96:	d12a      	bne.n	800deee <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	685b      	ldr	r3, [r3, #4]
 800de9c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800dea6:	69bb      	ldr	r3, [r7, #24]
 800dea8:	6858      	ldr	r0, [r3, #4]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	3308      	adds	r3, #8
 800deae:	2214      	movs	r2, #20
 800deb0:	4619      	mov	r1, r3
 800deb2:	f000 fee5 	bl	800ec80 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800deb6:	2101      	movs	r1, #1
 800deb8:	69b8      	ldr	r0, [r7, #24]
 800deba:	f7ff fc3b 	bl	800d734 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800debe:	69b8      	ldr	r0, [r7, #24]
 800dec0:	f7f8 f810 	bl	8005ee4 <pbuf_clen>
 800dec4:	4603      	mov	r3, r0
 800dec6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dec8:	8bfa      	ldrh	r2, [r7, #30]
 800deca:	8a7b      	ldrh	r3, [r7, #18]
 800decc:	4413      	add	r3, r2
 800dece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ded2:	db05      	blt.n	800dee0 <ip_reass_free_complete_datagram+0x98>
 800ded4:	4b27      	ldr	r3, [pc, #156]	; (800df74 <ip_reass_free_complete_datagram+0x12c>)
 800ded6:	22bc      	movs	r2, #188	; 0xbc
 800ded8:	492a      	ldr	r1, [pc, #168]	; (800df84 <ip_reass_free_complete_datagram+0x13c>)
 800deda:	4828      	ldr	r0, [pc, #160]	; (800df7c <ip_reass_free_complete_datagram+0x134>)
 800dedc:	f000 ff00 	bl	800ece0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800dee0:	8bfa      	ldrh	r2, [r7, #30]
 800dee2:	8a7b      	ldrh	r3, [r7, #18]
 800dee4:	4413      	add	r3, r2
 800dee6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800dee8:	69b8      	ldr	r0, [r7, #24]
 800deea:	f7f7 ff73 	bl	8005dd4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	685b      	ldr	r3, [r3, #4]
 800def2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800def4:	e01f      	b.n	800df36 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800def6:	69bb      	ldr	r3, [r7, #24]
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	617b      	str	r3, [r7, #20]
    pcur = p;
 800defc:	69bb      	ldr	r3, [r7, #24]
 800defe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f7f7 ffec 	bl	8005ee4 <pbuf_clen>
 800df0c:	4603      	mov	r3, r0
 800df0e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800df10:	8bfa      	ldrh	r2, [r7, #30]
 800df12:	8a7b      	ldrh	r3, [r7, #18]
 800df14:	4413      	add	r3, r2
 800df16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df1a:	db05      	blt.n	800df28 <ip_reass_free_complete_datagram+0xe0>
 800df1c:	4b15      	ldr	r3, [pc, #84]	; (800df74 <ip_reass_free_complete_datagram+0x12c>)
 800df1e:	22cc      	movs	r2, #204	; 0xcc
 800df20:	4918      	ldr	r1, [pc, #96]	; (800df84 <ip_reass_free_complete_datagram+0x13c>)
 800df22:	4816      	ldr	r0, [pc, #88]	; (800df7c <ip_reass_free_complete_datagram+0x134>)
 800df24:	f000 fedc 	bl	800ece0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800df28:	8bfa      	ldrh	r2, [r7, #30]
 800df2a:	8a7b      	ldrh	r3, [r7, #18]
 800df2c:	4413      	add	r3, r2
 800df2e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800df30:	68f8      	ldr	r0, [r7, #12]
 800df32:	f7f7 ff4f 	bl	8005dd4 <pbuf_free>
  while (p != NULL) {
 800df36:	69bb      	ldr	r3, [r7, #24]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d1dc      	bne.n	800def6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800df3c:	6839      	ldr	r1, [r7, #0]
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f000 f8c2 	bl	800e0c8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800df44:	4b10      	ldr	r3, [pc, #64]	; (800df88 <ip_reass_free_complete_datagram+0x140>)
 800df46:	881b      	ldrh	r3, [r3, #0]
 800df48:	8bfa      	ldrh	r2, [r7, #30]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d905      	bls.n	800df5a <ip_reass_free_complete_datagram+0x112>
 800df4e:	4b09      	ldr	r3, [pc, #36]	; (800df74 <ip_reass_free_complete_datagram+0x12c>)
 800df50:	22d2      	movs	r2, #210	; 0xd2
 800df52:	490e      	ldr	r1, [pc, #56]	; (800df8c <ip_reass_free_complete_datagram+0x144>)
 800df54:	4809      	ldr	r0, [pc, #36]	; (800df7c <ip_reass_free_complete_datagram+0x134>)
 800df56:	f000 fec3 	bl	800ece0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800df5a:	4b0b      	ldr	r3, [pc, #44]	; (800df88 <ip_reass_free_complete_datagram+0x140>)
 800df5c:	881a      	ldrh	r2, [r3, #0]
 800df5e:	8bfb      	ldrh	r3, [r7, #30]
 800df60:	1ad3      	subs	r3, r2, r3
 800df62:	b29a      	uxth	r2, r3
 800df64:	4b08      	ldr	r3, [pc, #32]	; (800df88 <ip_reass_free_complete_datagram+0x140>)
 800df66:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800df68:	8bfb      	ldrh	r3, [r7, #30]
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3720      	adds	r7, #32
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
 800df72:	bf00      	nop
 800df74:	08012980 	.word	0x08012980
 800df78:	080129bc 	.word	0x080129bc
 800df7c:	080129c8 	.word	0x080129c8
 800df80:	080129f0 	.word	0x080129f0
 800df84:	08012a04 	.word	0x08012a04
 800df88:	20008480 	.word	0x20008480
 800df8c:	08012a24 	.word	0x08012a24

0800df90 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b08a      	sub	sp, #40	; 0x28
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800df9a:	2300      	movs	r3, #0
 800df9c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800dfae:	4b28      	ldr	r3, [pc, #160]	; (800e050 <ip_reass_remove_oldest_datagram+0xc0>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dfb4:	e030      	b.n	800e018 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800dfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb8:	695a      	ldr	r2, [r3, #20]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	68db      	ldr	r3, [r3, #12]
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d10c      	bne.n	800dfdc <ip_reass_remove_oldest_datagram+0x4c>
 800dfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc4:	699a      	ldr	r2, [r3, #24]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	691b      	ldr	r3, [r3, #16]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d106      	bne.n	800dfdc <ip_reass_remove_oldest_datagram+0x4c>
 800dfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd0:	899a      	ldrh	r2, [r3, #12]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	889b      	ldrh	r3, [r3, #4]
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d014      	beq.n	800e006 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	3301      	adds	r3, #1
 800dfe0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800dfe2:	6a3b      	ldr	r3, [r7, #32]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d104      	bne.n	800dff2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800dfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfea:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dfec:	69fb      	ldr	r3, [r7, #28]
 800dfee:	61bb      	str	r3, [r7, #24]
 800dff0:	e009      	b.n	800e006 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800dff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff4:	7fda      	ldrb	r2, [r3, #31]
 800dff6:	6a3b      	ldr	r3, [r7, #32]
 800dff8:	7fdb      	ldrb	r3, [r3, #31]
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d803      	bhi.n	800e006 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800dffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e000:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e002:	69fb      	ldr	r3, [r7, #28]
 800e004:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d001      	beq.n	800e012 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e010:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d1cb      	bne.n	800dfb6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e01e:	6a3b      	ldr	r3, [r7, #32]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d008      	beq.n	800e036 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e024:	69b9      	ldr	r1, [r7, #24]
 800e026:	6a38      	ldr	r0, [r7, #32]
 800e028:	f7ff ff0e 	bl	800de48 <ip_reass_free_complete_datagram>
 800e02c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e02e:	697a      	ldr	r2, [r7, #20]
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	4413      	add	r3, r2
 800e034:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e036:	697a      	ldr	r2, [r7, #20]
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	429a      	cmp	r2, r3
 800e03c:	da02      	bge.n	800e044 <ip_reass_remove_oldest_datagram+0xb4>
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	2b01      	cmp	r3, #1
 800e042:	dcac      	bgt.n	800df9e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e044:	697b      	ldr	r3, [r7, #20]
}
 800e046:	4618      	mov	r0, r3
 800e048:	3728      	adds	r7, #40	; 0x28
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop
 800e050:	2000847c 	.word	0x2000847c

0800e054 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b084      	sub	sp, #16
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e05e:	2005      	movs	r0, #5
 800e060:	f7f6 ffce 	bl	8005000 <memp_malloc>
 800e064:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d110      	bne.n	800e08e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e06c:	6839      	ldr	r1, [r7, #0]
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f7ff ff8e 	bl	800df90 <ip_reass_remove_oldest_datagram>
 800e074:	4602      	mov	r2, r0
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	4293      	cmp	r3, r2
 800e07a:	dc03      	bgt.n	800e084 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e07c:	2005      	movs	r0, #5
 800e07e:	f7f6 ffbf 	bl	8005000 <memp_malloc>
 800e082:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d101      	bne.n	800e08e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e08a:	2300      	movs	r3, #0
 800e08c:	e016      	b.n	800e0bc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e08e:	2220      	movs	r2, #32
 800e090:	2100      	movs	r1, #0
 800e092:	68f8      	ldr	r0, [r7, #12]
 800e094:	f000 fe1c 	bl	800ecd0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	220f      	movs	r2, #15
 800e09c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e09e:	4b09      	ldr	r3, [pc, #36]	; (800e0c4 <ip_reass_enqueue_new_datagram+0x70>)
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e0a6:	4a07      	ldr	r2, [pc, #28]	; (800e0c4 <ip_reass_enqueue_new_datagram+0x70>)
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	3308      	adds	r3, #8
 800e0b0:	2214      	movs	r2, #20
 800e0b2:	6879      	ldr	r1, [r7, #4]
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f000 fde3 	bl	800ec80 <memcpy>
  return ipr;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3710      	adds	r7, #16
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}
 800e0c4:	2000847c 	.word	0x2000847c

0800e0c8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b082      	sub	sp, #8
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e0d2:	4b10      	ldr	r3, [pc, #64]	; (800e114 <ip_reass_dequeue_datagram+0x4c>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	687a      	ldr	r2, [r7, #4]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d104      	bne.n	800e0e6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4a0c      	ldr	r2, [pc, #48]	; (800e114 <ip_reass_dequeue_datagram+0x4c>)
 800e0e2:	6013      	str	r3, [r2, #0]
 800e0e4:	e00d      	b.n	800e102 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d106      	bne.n	800e0fa <ip_reass_dequeue_datagram+0x32>
 800e0ec:	4b0a      	ldr	r3, [pc, #40]	; (800e118 <ip_reass_dequeue_datagram+0x50>)
 800e0ee:	f240 1245 	movw	r2, #325	; 0x145
 800e0f2:	490a      	ldr	r1, [pc, #40]	; (800e11c <ip_reass_dequeue_datagram+0x54>)
 800e0f4:	480a      	ldr	r0, [pc, #40]	; (800e120 <ip_reass_dequeue_datagram+0x58>)
 800e0f6:	f000 fdf3 	bl	800ece0 <iprintf>
    prev->next = ipr->next;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681a      	ldr	r2, [r3, #0]
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e102:	6879      	ldr	r1, [r7, #4]
 800e104:	2005      	movs	r0, #5
 800e106:	f7f6 ffeb 	bl	80050e0 <memp_free>
}
 800e10a:	bf00      	nop
 800e10c:	3708      	adds	r7, #8
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
 800e112:	bf00      	nop
 800e114:	2000847c 	.word	0x2000847c
 800e118:	08012980 	.word	0x08012980
 800e11c:	08012a48 	.word	0x08012a48
 800e120:	080129c8 	.word	0x080129c8

0800e124 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b08c      	sub	sp, #48	; 0x30
 800e128:	af00      	add	r7, sp, #0
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	60b9      	str	r1, [r7, #8]
 800e12e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e130:	2300      	movs	r3, #0
 800e132:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e134:	2301      	movs	r3, #1
 800e136:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	885b      	ldrh	r3, [r3, #2]
 800e142:	b29b      	uxth	r3, r3
 800e144:	4618      	mov	r0, r3
 800e146:	f7f6 fa75 	bl	8004634 <lwip_htons>
 800e14a:	4603      	mov	r3, r0
 800e14c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e14e:	69fb      	ldr	r3, [r7, #28]
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	f003 030f 	and.w	r3, r3, #15
 800e156:	b2db      	uxtb	r3, r3
 800e158:	009b      	lsls	r3, r3, #2
 800e15a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e15c:	7e7b      	ldrb	r3, [r7, #25]
 800e15e:	b29b      	uxth	r3, r3
 800e160:	8b7a      	ldrh	r2, [r7, #26]
 800e162:	429a      	cmp	r2, r3
 800e164:	d202      	bcs.n	800e16c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e166:	f04f 33ff 	mov.w	r3, #4294967295
 800e16a:	e135      	b.n	800e3d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e16c:	7e7b      	ldrb	r3, [r7, #25]
 800e16e:	b29b      	uxth	r3, r3
 800e170:	8b7a      	ldrh	r2, [r7, #26]
 800e172:	1ad3      	subs	r3, r2, r3
 800e174:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e176:	69fb      	ldr	r3, [r7, #28]
 800e178:	88db      	ldrh	r3, [r3, #6]
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7f6 fa59 	bl	8004634 <lwip_htons>
 800e182:	4603      	mov	r3, r0
 800e184:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e188:	b29b      	uxth	r3, r3
 800e18a:	00db      	lsls	r3, r3, #3
 800e18c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e196:	2200      	movs	r2, #0
 800e198:	701a      	strb	r2, [r3, #0]
 800e19a:	2200      	movs	r2, #0
 800e19c:	705a      	strb	r2, [r3, #1]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	709a      	strb	r2, [r3, #2]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a8:	8afa      	ldrh	r2, [r7, #22]
 800e1aa:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e1ac:	8afa      	ldrh	r2, [r7, #22]
 800e1ae:	8b7b      	ldrh	r3, [r7, #26]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	b29a      	uxth	r2, r3
 800e1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ba:	88db      	ldrh	r3, [r3, #6]
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	8afa      	ldrh	r2, [r7, #22]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d902      	bls.n	800e1ca <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e1c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e1c8:	e106      	b.n	800e3d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	627b      	str	r3, [r7, #36]	; 0x24
 800e1d0:	e068      	b.n	800e2a4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1da:	889b      	ldrh	r3, [r3, #4]
 800e1dc:	b29a      	uxth	r2, r3
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	889b      	ldrh	r3, [r3, #4]
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d235      	bcs.n	800e254 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1ec:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d020      	beq.n	800e236 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f6:	889b      	ldrh	r3, [r3, #4]
 800e1f8:	b29a      	uxth	r2, r3
 800e1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1fc:	88db      	ldrh	r3, [r3, #6]
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	429a      	cmp	r2, r3
 800e202:	d307      	bcc.n	800e214 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e206:	88db      	ldrh	r3, [r3, #6]
 800e208:	b29a      	uxth	r2, r3
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	889b      	ldrh	r3, [r3, #4]
 800e20e:	b29b      	uxth	r3, r3
 800e210:	429a      	cmp	r2, r3
 800e212:	d902      	bls.n	800e21a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e214:	f04f 33ff 	mov.w	r3, #4294967295
 800e218:	e0de      	b.n	800e3d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e21c:	68ba      	ldr	r2, [r7, #8]
 800e21e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e222:	88db      	ldrh	r3, [r3, #6]
 800e224:	b29a      	uxth	r2, r3
 800e226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e228:	889b      	ldrh	r3, [r3, #4]
 800e22a:	b29b      	uxth	r3, r3
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d03d      	beq.n	800e2ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e230:	2300      	movs	r3, #0
 800e232:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e234:	e03a      	b.n	800e2ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e238:	88db      	ldrh	r3, [r3, #6]
 800e23a:	b29a      	uxth	r2, r3
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	889b      	ldrh	r3, [r3, #4]
 800e240:	b29b      	uxth	r3, r3
 800e242:	429a      	cmp	r2, r3
 800e244:	d902      	bls.n	800e24c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e246:	f04f 33ff 	mov.w	r3, #4294967295
 800e24a:	e0c5      	b.n	800e3d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	68ba      	ldr	r2, [r7, #8]
 800e250:	605a      	str	r2, [r3, #4]
      break;
 800e252:	e02b      	b.n	800e2ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e256:	889b      	ldrh	r3, [r3, #4]
 800e258:	b29a      	uxth	r2, r3
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	889b      	ldrh	r3, [r3, #4]
 800e25e:	b29b      	uxth	r3, r3
 800e260:	429a      	cmp	r2, r3
 800e262:	d102      	bne.n	800e26a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e264:	f04f 33ff 	mov.w	r3, #4294967295
 800e268:	e0b6      	b.n	800e3d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26c:	889b      	ldrh	r3, [r3, #4]
 800e26e:	b29a      	uxth	r2, r3
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	88db      	ldrh	r3, [r3, #6]
 800e274:	b29b      	uxth	r3, r3
 800e276:	429a      	cmp	r2, r3
 800e278:	d202      	bcs.n	800e280 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e27a:	f04f 33ff 	mov.w	r3, #4294967295
 800e27e:	e0ab      	b.n	800e3d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e282:	2b00      	cmp	r3, #0
 800e284:	d009      	beq.n	800e29a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e288:	88db      	ldrh	r3, [r3, #6]
 800e28a:	b29a      	uxth	r2, r3
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	889b      	ldrh	r3, [r3, #4]
 800e290:	b29b      	uxth	r3, r3
 800e292:	429a      	cmp	r2, r3
 800e294:	d001      	beq.n	800e29a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e296:	2300      	movs	r3, #0
 800e298:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d193      	bne.n	800e1d2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e2aa:	e000      	b.n	800e2ae <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e2ac:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d12d      	bne.n	800e310 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d01c      	beq.n	800e2f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2bc:	88db      	ldrh	r3, [r3, #6]
 800e2be:	b29a      	uxth	r2, r3
 800e2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c2:	889b      	ldrh	r3, [r3, #4]
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d906      	bls.n	800e2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e2ca:	4b45      	ldr	r3, [pc, #276]	; (800e3e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e2cc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e2d0:	4944      	ldr	r1, [pc, #272]	; (800e3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e2d2:	4845      	ldr	r0, [pc, #276]	; (800e3e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e2d4:	f000 fd04 	bl	800ece0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2da:	68ba      	ldr	r2, [r7, #8]
 800e2dc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e0:	88db      	ldrh	r3, [r3, #6]
 800e2e2:	b29a      	uxth	r2, r3
 800e2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e6:	889b      	ldrh	r3, [r3, #4]
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d010      	beq.n	800e310 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	623b      	str	r3, [r7, #32]
 800e2f2:	e00d      	b.n	800e310 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d006      	beq.n	800e30a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e2fc:	4b38      	ldr	r3, [pc, #224]	; (800e3e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e2fe:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e302:	493a      	ldr	r1, [pc, #232]	; (800e3ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e304:	4838      	ldr	r0, [pc, #224]	; (800e3e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e306:	f000 fceb 	bl	800ece0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	68ba      	ldr	r2, [r7, #8]
 800e30e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d105      	bne.n	800e322 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	7f9b      	ldrb	r3, [r3, #30]
 800e31a:	f003 0301 	and.w	r3, r3, #1
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d059      	beq.n	800e3d6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e322:	6a3b      	ldr	r3, [r7, #32]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d04f      	beq.n	800e3c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	685b      	ldr	r3, [r3, #4]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d006      	beq.n	800e33e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	889b      	ldrh	r3, [r3, #4]
 800e338:	b29b      	uxth	r3, r3
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d002      	beq.n	800e344 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e33e:	2300      	movs	r3, #0
 800e340:	623b      	str	r3, [r7, #32]
 800e342:	e041      	b.n	800e3c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e346:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e34e:	e012      	b.n	800e376 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e352:	685b      	ldr	r3, [r3, #4]
 800e354:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e358:	88db      	ldrh	r3, [r3, #6]
 800e35a:	b29a      	uxth	r2, r3
 800e35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35e:	889b      	ldrh	r3, [r3, #4]
 800e360:	b29b      	uxth	r3, r3
 800e362:	429a      	cmp	r2, r3
 800e364:	d002      	beq.n	800e36c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e366:	2300      	movs	r3, #0
 800e368:	623b      	str	r3, [r7, #32]
            break;
 800e36a:	e007      	b.n	800e37c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d1e9      	bne.n	800e350 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e37c:	6a3b      	ldr	r3, [r7, #32]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d022      	beq.n	800e3c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d106      	bne.n	800e398 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e38a:	4b15      	ldr	r3, [pc, #84]	; (800e3e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e38c:	f240 12df 	movw	r2, #479	; 0x1df
 800e390:	4917      	ldr	r1, [pc, #92]	; (800e3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e392:	4815      	ldr	r0, [pc, #84]	; (800e3e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e394:	f000 fca4 	bl	800ece0 <iprintf>
          LWIP_ASSERT("sanity check",
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d106      	bne.n	800e3b2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e3a4:	4b0e      	ldr	r3, [pc, #56]	; (800e3e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e3a6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e3aa:	4911      	ldr	r1, [pc, #68]	; (800e3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e3ac:	480e      	ldr	r0, [pc, #56]	; (800e3e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e3ae:	f000 fc97 	bl	800ece0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d006      	beq.n	800e3c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e3ba:	4b09      	ldr	r3, [pc, #36]	; (800e3e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e3bc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e3c0:	490c      	ldr	r1, [pc, #48]	; (800e3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e3c2:	4809      	ldr	r0, [pc, #36]	; (800e3e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e3c4:	f000 fc8c 	bl	800ece0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e3c8:	6a3b      	ldr	r3, [r7, #32]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	bf14      	ite	ne
 800e3ce:	2301      	movne	r3, #1
 800e3d0:	2300      	moveq	r3, #0
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	e000      	b.n	800e3d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e3d6:	2300      	movs	r3, #0
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3730      	adds	r7, #48	; 0x30
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	08012980 	.word	0x08012980
 800e3e4:	08012a64 	.word	0x08012a64
 800e3e8:	080129c8 	.word	0x080129c8
 800e3ec:	08012a84 	.word	0x08012a84
 800e3f0:	08012abc 	.word	0x08012abc
 800e3f4:	08012acc 	.word	0x08012acc

0800e3f8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b08e      	sub	sp, #56	; 0x38
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	f003 030f 	and.w	r3, r3, #15
 800e40e:	b2db      	uxtb	r3, r3
 800e410:	009b      	lsls	r3, r3, #2
 800e412:	b2db      	uxtb	r3, r3
 800e414:	2b14      	cmp	r3, #20
 800e416:	f040 8171 	bne.w	800e6fc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41c:	88db      	ldrh	r3, [r3, #6]
 800e41e:	b29b      	uxth	r3, r3
 800e420:	4618      	mov	r0, r3
 800e422:	f7f6 f907 	bl	8004634 <lwip_htons>
 800e426:	4603      	mov	r3, r0
 800e428:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	00db      	lsls	r3, r3, #3
 800e430:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e434:	885b      	ldrh	r3, [r3, #2]
 800e436:	b29b      	uxth	r3, r3
 800e438:	4618      	mov	r0, r3
 800e43a:	f7f6 f8fb 	bl	8004634 <lwip_htons>
 800e43e:	4603      	mov	r3, r0
 800e440:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	f003 030f 	and.w	r3, r3, #15
 800e44a:	b2db      	uxtb	r3, r3
 800e44c:	009b      	lsls	r3, r3, #2
 800e44e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e452:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e456:	b29b      	uxth	r3, r3
 800e458:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e45a:	429a      	cmp	r2, r3
 800e45c:	f0c0 8150 	bcc.w	800e700 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e460:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e464:	b29b      	uxth	r3, r3
 800e466:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e468:	1ad3      	subs	r3, r2, r3
 800e46a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f7f7 fd39 	bl	8005ee4 <pbuf_clen>
 800e472:	4603      	mov	r3, r0
 800e474:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e476:	4b8c      	ldr	r3, [pc, #560]	; (800e6a8 <ip4_reass+0x2b0>)
 800e478:	881b      	ldrh	r3, [r3, #0]
 800e47a:	461a      	mov	r2, r3
 800e47c:	8c3b      	ldrh	r3, [r7, #32]
 800e47e:	4413      	add	r3, r2
 800e480:	2b0a      	cmp	r3, #10
 800e482:	dd10      	ble.n	800e4a6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e484:	8c3b      	ldrh	r3, [r7, #32]
 800e486:	4619      	mov	r1, r3
 800e488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e48a:	f7ff fd81 	bl	800df90 <ip_reass_remove_oldest_datagram>
 800e48e:	4603      	mov	r3, r0
 800e490:	2b00      	cmp	r3, #0
 800e492:	f000 8137 	beq.w	800e704 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e496:	4b84      	ldr	r3, [pc, #528]	; (800e6a8 <ip4_reass+0x2b0>)
 800e498:	881b      	ldrh	r3, [r3, #0]
 800e49a:	461a      	mov	r2, r3
 800e49c:	8c3b      	ldrh	r3, [r7, #32]
 800e49e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e4a0:	2b0a      	cmp	r3, #10
 800e4a2:	f300 812f 	bgt.w	800e704 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e4a6:	4b81      	ldr	r3, [pc, #516]	; (800e6ac <ip4_reass+0x2b4>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	633b      	str	r3, [r7, #48]	; 0x30
 800e4ac:	e015      	b.n	800e4da <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b0:	695a      	ldr	r2, [r3, #20]
 800e4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b4:	68db      	ldr	r3, [r3, #12]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d10c      	bne.n	800e4d4 <ip4_reass+0xdc>
 800e4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4bc:	699a      	ldr	r2, [r3, #24]
 800e4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c0:	691b      	ldr	r3, [r3, #16]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d106      	bne.n	800e4d4 <ip4_reass+0xdc>
 800e4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4c8:	899a      	ldrh	r2, [r3, #12]
 800e4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4cc:	889b      	ldrh	r3, [r3, #4]
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d006      	beq.n	800e4e2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	633b      	str	r3, [r7, #48]	; 0x30
 800e4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d1e6      	bne.n	800e4ae <ip4_reass+0xb6>
 800e4e0:	e000      	b.n	800e4e4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e4e2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d109      	bne.n	800e4fe <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e4ea:	8c3b      	ldrh	r3, [r7, #32]
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4f0:	f7ff fdb0 	bl	800e054 <ip_reass_enqueue_new_datagram>
 800e4f4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d11c      	bne.n	800e536 <ip4_reass+0x13e>
      goto nullreturn;
 800e4fc:	e105      	b.n	800e70a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e500:	88db      	ldrh	r3, [r3, #6]
 800e502:	b29b      	uxth	r3, r3
 800e504:	4618      	mov	r0, r3
 800e506:	f7f6 f895 	bl	8004634 <lwip_htons>
 800e50a:	4603      	mov	r3, r0
 800e50c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e510:	2b00      	cmp	r3, #0
 800e512:	d110      	bne.n	800e536 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e516:	89db      	ldrh	r3, [r3, #14]
 800e518:	4618      	mov	r0, r3
 800e51a:	f7f6 f88b 	bl	8004634 <lwip_htons>
 800e51e:	4603      	mov	r3, r0
 800e520:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e524:	2b00      	cmp	r3, #0
 800e526:	d006      	beq.n	800e536 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e52a:	3308      	adds	r3, #8
 800e52c:	2214      	movs	r2, #20
 800e52e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e530:	4618      	mov	r0, r3
 800e532:	f000 fba5 	bl	800ec80 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e538:	88db      	ldrh	r3, [r3, #6]
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	f003 0320 	and.w	r3, r3, #32
 800e540:	2b00      	cmp	r3, #0
 800e542:	bf0c      	ite	eq
 800e544:	2301      	moveq	r3, #1
 800e546:	2300      	movne	r3, #0
 800e548:	b2db      	uxtb	r3, r3
 800e54a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d00e      	beq.n	800e570 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e552:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e554:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e556:	4413      	add	r3, r2
 800e558:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e55a:	8b7a      	ldrh	r2, [r7, #26]
 800e55c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e55e:	429a      	cmp	r2, r3
 800e560:	f0c0 80a0 	bcc.w	800e6a4 <ip4_reass+0x2ac>
 800e564:	8b7b      	ldrh	r3, [r7, #26]
 800e566:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e56a:	4293      	cmp	r3, r2
 800e56c:	f200 809a 	bhi.w	800e6a4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e570:	69fa      	ldr	r2, [r7, #28]
 800e572:	6879      	ldr	r1, [r7, #4]
 800e574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e576:	f7ff fdd5 	bl	800e124 <ip_reass_chain_frag_into_datagram_and_validate>
 800e57a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e582:	f000 809b 	beq.w	800e6bc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e586:	4b48      	ldr	r3, [pc, #288]	; (800e6a8 <ip4_reass+0x2b0>)
 800e588:	881a      	ldrh	r2, [r3, #0]
 800e58a:	8c3b      	ldrh	r3, [r7, #32]
 800e58c:	4413      	add	r3, r2
 800e58e:	b29a      	uxth	r2, r3
 800e590:	4b45      	ldr	r3, [pc, #276]	; (800e6a8 <ip4_reass+0x2b0>)
 800e592:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d00d      	beq.n	800e5b6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e59a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e59c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e59e:	4413      	add	r3, r2
 800e5a0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5a4:	8a7a      	ldrh	r2, [r7, #18]
 800e5a6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5aa:	7f9b      	ldrb	r3, [r3, #30]
 800e5ac:	f043 0301 	orr.w	r3, r3, #1
 800e5b0:	b2da      	uxtb	r2, r3
 800e5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d171      	bne.n	800e6a0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5be:	8b9b      	ldrh	r3, [r3, #28]
 800e5c0:	3314      	adds	r3, #20
 800e5c2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	685b      	ldr	r3, [r3, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5d8:	3308      	adds	r3, #8
 800e5da:	2214      	movs	r2, #20
 800e5dc:	4619      	mov	r1, r3
 800e5de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5e0:	f000 fb4e 	bl	800ec80 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e5e4:	8a3b      	ldrh	r3, [r7, #16]
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7f6 f824 	bl	8004634 <lwip_htons>
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	719a      	strb	r2, [r3, #6]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e600:	2200      	movs	r2, #0
 800e602:	729a      	strb	r2, [r3, #10]
 800e604:	2200      	movs	r2, #0
 800e606:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e60e:	e00d      	b.n	800e62c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e616:	2114      	movs	r1, #20
 800e618:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e61a:	f7f7 fb55 	bl	8005cc8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e61e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f7f7 fc99 	bl	8005f58 <pbuf_cat>
      r = iprh->next_pbuf;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d1ee      	bne.n	800e610 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e632:	4b1e      	ldr	r3, [pc, #120]	; (800e6ac <ip4_reass+0x2b4>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e638:	429a      	cmp	r2, r3
 800e63a:	d102      	bne.n	800e642 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e63c:	2300      	movs	r3, #0
 800e63e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e640:	e010      	b.n	800e664 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e642:	4b1a      	ldr	r3, [pc, #104]	; (800e6ac <ip4_reass+0x2b4>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e648:	e007      	b.n	800e65a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e650:	429a      	cmp	r2, r3
 800e652:	d006      	beq.n	800e662 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d1f4      	bne.n	800e64a <ip4_reass+0x252>
 800e660:	e000      	b.n	800e664 <ip4_reass+0x26c>
          break;
 800e662:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e664:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e666:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e668:	f7ff fd2e 	bl	800e0c8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f7f7 fc39 	bl	8005ee4 <pbuf_clen>
 800e672:	4603      	mov	r3, r0
 800e674:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e676:	4b0c      	ldr	r3, [pc, #48]	; (800e6a8 <ip4_reass+0x2b0>)
 800e678:	881b      	ldrh	r3, [r3, #0]
 800e67a:	8c3a      	ldrh	r2, [r7, #32]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d906      	bls.n	800e68e <ip4_reass+0x296>
 800e680:	4b0b      	ldr	r3, [pc, #44]	; (800e6b0 <ip4_reass+0x2b8>)
 800e682:	f240 229b 	movw	r2, #667	; 0x29b
 800e686:	490b      	ldr	r1, [pc, #44]	; (800e6b4 <ip4_reass+0x2bc>)
 800e688:	480b      	ldr	r0, [pc, #44]	; (800e6b8 <ip4_reass+0x2c0>)
 800e68a:	f000 fb29 	bl	800ece0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e68e:	4b06      	ldr	r3, [pc, #24]	; (800e6a8 <ip4_reass+0x2b0>)
 800e690:	881a      	ldrh	r2, [r3, #0]
 800e692:	8c3b      	ldrh	r3, [r7, #32]
 800e694:	1ad3      	subs	r3, r2, r3
 800e696:	b29a      	uxth	r2, r3
 800e698:	4b03      	ldr	r3, [pc, #12]	; (800e6a8 <ip4_reass+0x2b0>)
 800e69a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	e038      	b.n	800e712 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	e036      	b.n	800e712 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e6a4:	bf00      	nop
 800e6a6:	e00a      	b.n	800e6be <ip4_reass+0x2c6>
 800e6a8:	20008480 	.word	0x20008480
 800e6ac:	2000847c 	.word	0x2000847c
 800e6b0:	08012980 	.word	0x08012980
 800e6b4:	08012af0 	.word	0x08012af0
 800e6b8:	080129c8 	.word	0x080129c8
    goto nullreturn_ipr;
 800e6bc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d106      	bne.n	800e6d2 <ip4_reass+0x2da>
 800e6c4:	4b15      	ldr	r3, [pc, #84]	; (800e71c <ip4_reass+0x324>)
 800e6c6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e6ca:	4915      	ldr	r1, [pc, #84]	; (800e720 <ip4_reass+0x328>)
 800e6cc:	4815      	ldr	r0, [pc, #84]	; (800e724 <ip4_reass+0x32c>)
 800e6ce:	f000 fb07 	bl	800ece0 <iprintf>
  if (ipr->p == NULL) {
 800e6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d116      	bne.n	800e708 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e6da:	4b13      	ldr	r3, [pc, #76]	; (800e728 <ip4_reass+0x330>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d006      	beq.n	800e6f2 <ip4_reass+0x2fa>
 800e6e4:	4b0d      	ldr	r3, [pc, #52]	; (800e71c <ip4_reass+0x324>)
 800e6e6:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e6ea:	4910      	ldr	r1, [pc, #64]	; (800e72c <ip4_reass+0x334>)
 800e6ec:	480d      	ldr	r0, [pc, #52]	; (800e724 <ip4_reass+0x32c>)
 800e6ee:	f000 faf7 	bl	800ece0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e6f2:	2100      	movs	r1, #0
 800e6f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6f6:	f7ff fce7 	bl	800e0c8 <ip_reass_dequeue_datagram>
 800e6fa:	e006      	b.n	800e70a <ip4_reass+0x312>
    goto nullreturn;
 800e6fc:	bf00      	nop
 800e6fe:	e004      	b.n	800e70a <ip4_reass+0x312>
    goto nullreturn;
 800e700:	bf00      	nop
 800e702:	e002      	b.n	800e70a <ip4_reass+0x312>
      goto nullreturn;
 800e704:	bf00      	nop
 800e706:	e000      	b.n	800e70a <ip4_reass+0x312>
  }

nullreturn:
 800e708:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f7f7 fb62 	bl	8005dd4 <pbuf_free>
  return NULL;
 800e710:	2300      	movs	r3, #0
}
 800e712:	4618      	mov	r0, r3
 800e714:	3738      	adds	r7, #56	; 0x38
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
 800e71a:	bf00      	nop
 800e71c:	08012980 	.word	0x08012980
 800e720:	08012b0c 	.word	0x08012b0c
 800e724:	080129c8 	.word	0x080129c8
 800e728:	2000847c 	.word	0x2000847c
 800e72c:	08012b18 	.word	0x08012b18

0800e730 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e734:	2006      	movs	r0, #6
 800e736:	f7f6 fc63 	bl	8005000 <memp_malloc>
 800e73a:	4603      	mov	r3, r0
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	bd80      	pop	{r7, pc}

0800e740 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b082      	sub	sp, #8
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d106      	bne.n	800e75c <ip_frag_free_pbuf_custom_ref+0x1c>
 800e74e:	4b07      	ldr	r3, [pc, #28]	; (800e76c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e750:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e754:	4906      	ldr	r1, [pc, #24]	; (800e770 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e756:	4807      	ldr	r0, [pc, #28]	; (800e774 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e758:	f000 fac2 	bl	800ece0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e75c:	6879      	ldr	r1, [r7, #4]
 800e75e:	2006      	movs	r0, #6
 800e760:	f7f6 fcbe 	bl	80050e0 <memp_free>
}
 800e764:	bf00      	nop
 800e766:	3708      	adds	r7, #8
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	08012980 	.word	0x08012980
 800e770:	08012b38 	.word	0x08012b38
 800e774:	080129c8 	.word	0x080129c8

0800e778 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b084      	sub	sp, #16
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d106      	bne.n	800e798 <ipfrag_free_pbuf_custom+0x20>
 800e78a:	4b11      	ldr	r3, [pc, #68]	; (800e7d0 <ipfrag_free_pbuf_custom+0x58>)
 800e78c:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e790:	4910      	ldr	r1, [pc, #64]	; (800e7d4 <ipfrag_free_pbuf_custom+0x5c>)
 800e792:	4811      	ldr	r0, [pc, #68]	; (800e7d8 <ipfrag_free_pbuf_custom+0x60>)
 800e794:	f000 faa4 	bl	800ece0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e798:	68fa      	ldr	r2, [r7, #12]
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d006      	beq.n	800e7ae <ipfrag_free_pbuf_custom+0x36>
 800e7a0:	4b0b      	ldr	r3, [pc, #44]	; (800e7d0 <ipfrag_free_pbuf_custom+0x58>)
 800e7a2:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e7a6:	490d      	ldr	r1, [pc, #52]	; (800e7dc <ipfrag_free_pbuf_custom+0x64>)
 800e7a8:	480b      	ldr	r0, [pc, #44]	; (800e7d8 <ipfrag_free_pbuf_custom+0x60>)
 800e7aa:	f000 fa99 	bl	800ece0 <iprintf>
  if (pcr->original != NULL) {
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	695b      	ldr	r3, [r3, #20]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d004      	beq.n	800e7c0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	695b      	ldr	r3, [r3, #20]
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7f7 fb0a 	bl	8005dd4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e7c0:	68f8      	ldr	r0, [r7, #12]
 800e7c2:	f7ff ffbd 	bl	800e740 <ip_frag_free_pbuf_custom_ref>
}
 800e7c6:	bf00      	nop
 800e7c8:	3710      	adds	r7, #16
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
 800e7ce:	bf00      	nop
 800e7d0:	08012980 	.word	0x08012980
 800e7d4:	08012b44 	.word	0x08012b44
 800e7d8:	080129c8 	.word	0x080129c8
 800e7dc:	08012b50 	.word	0x08012b50

0800e7e0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b094      	sub	sp, #80	; 0x50
 800e7e4:	af02      	add	r7, sp, #8
 800e7e6:	60f8      	str	r0, [r7, #12]
 800e7e8:	60b9      	str	r1, [r7, #8]
 800e7ea:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e7f6:	3b14      	subs	r3, #20
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	da00      	bge.n	800e7fe <ip4_frag+0x1e>
 800e7fc:	3307      	adds	r3, #7
 800e7fe:	10db      	asrs	r3, r3, #3
 800e800:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e802:	2314      	movs	r3, #20
 800e804:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	685b      	ldr	r3, [r3, #4]
 800e80a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e80c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e80e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e812:	781b      	ldrb	r3, [r3, #0]
 800e814:	f003 030f 	and.w	r3, r3, #15
 800e818:	b2db      	uxtb	r3, r3
 800e81a:	009b      	lsls	r3, r3, #2
 800e81c:	b2db      	uxtb	r3, r3
 800e81e:	2b14      	cmp	r3, #20
 800e820:	d002      	beq.n	800e828 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e822:	f06f 0305 	mvn.w	r3, #5
 800e826:	e110      	b.n	800ea4a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	895b      	ldrh	r3, [r3, #10]
 800e82c:	2b13      	cmp	r3, #19
 800e82e:	d809      	bhi.n	800e844 <ip4_frag+0x64>
 800e830:	4b88      	ldr	r3, [pc, #544]	; (800ea54 <ip4_frag+0x274>)
 800e832:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e836:	4988      	ldr	r1, [pc, #544]	; (800ea58 <ip4_frag+0x278>)
 800e838:	4888      	ldr	r0, [pc, #544]	; (800ea5c <ip4_frag+0x27c>)
 800e83a:	f000 fa51 	bl	800ece0 <iprintf>
 800e83e:	f06f 0305 	mvn.w	r3, #5
 800e842:	e102      	b.n	800ea4a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e846:	88db      	ldrh	r3, [r3, #6]
 800e848:	b29b      	uxth	r3, r3
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7f5 fef2 	bl	8004634 <lwip_htons>
 800e850:	4603      	mov	r3, r0
 800e852:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e854:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e856:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e85a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e85e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e860:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e864:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	891b      	ldrh	r3, [r3, #8]
 800e86a:	3b14      	subs	r3, #20
 800e86c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e870:	e0e1      	b.n	800ea36 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e872:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e874:	00db      	lsls	r3, r3, #3
 800e876:	b29b      	uxth	r3, r3
 800e878:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e87c:	4293      	cmp	r3, r2
 800e87e:	bf28      	it	cs
 800e880:	4613      	movcs	r3, r2
 800e882:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e884:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e888:	2114      	movs	r1, #20
 800e88a:	200e      	movs	r0, #14
 800e88c:	f7f6 ffbe 	bl	800580c <pbuf_alloc>
 800e890:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e894:	2b00      	cmp	r3, #0
 800e896:	f000 80d5 	beq.w	800ea44 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89c:	895b      	ldrh	r3, [r3, #10]
 800e89e:	2b13      	cmp	r3, #19
 800e8a0:	d806      	bhi.n	800e8b0 <ip4_frag+0xd0>
 800e8a2:	4b6c      	ldr	r3, [pc, #432]	; (800ea54 <ip4_frag+0x274>)
 800e8a4:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e8a8:	496d      	ldr	r1, [pc, #436]	; (800ea60 <ip4_frag+0x280>)
 800e8aa:	486c      	ldr	r0, [pc, #432]	; (800ea5c <ip4_frag+0x27c>)
 800e8ac:	f000 fa18 	bl	800ece0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	2214      	movs	r2, #20
 800e8b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f000 f9e1 	bl	800ec80 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c0:	685b      	ldr	r3, [r3, #4]
 800e8c2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e8c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e8c6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e8ca:	e064      	b.n	800e996 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	895a      	ldrh	r2, [r3, #10]
 800e8d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e8d2:	1ad3      	subs	r3, r2, r3
 800e8d4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	895b      	ldrh	r3, [r3, #10]
 800e8da:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e8dc:	429a      	cmp	r2, r3
 800e8de:	d906      	bls.n	800e8ee <ip4_frag+0x10e>
 800e8e0:	4b5c      	ldr	r3, [pc, #368]	; (800ea54 <ip4_frag+0x274>)
 800e8e2:	f240 322d 	movw	r2, #813	; 0x32d
 800e8e6:	495f      	ldr	r1, [pc, #380]	; (800ea64 <ip4_frag+0x284>)
 800e8e8:	485c      	ldr	r0, [pc, #368]	; (800ea5c <ip4_frag+0x27c>)
 800e8ea:	f000 f9f9 	bl	800ece0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e8ee:	8bfa      	ldrh	r2, [r7, #30]
 800e8f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	bf28      	it	cs
 800e8f8:	4613      	movcs	r3, r2
 800e8fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e8fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e902:	2b00      	cmp	r3, #0
 800e904:	d105      	bne.n	800e912 <ip4_frag+0x132>
        poff = 0;
 800e906:	2300      	movs	r3, #0
 800e908:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	60fb      	str	r3, [r7, #12]
        continue;
 800e910:	e041      	b.n	800e996 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e912:	f7ff ff0d 	bl	800e730 <ip_frag_alloc_pbuf_custom_ref>
 800e916:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e918:	69bb      	ldr	r3, [r7, #24]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d103      	bne.n	800e926 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e91e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e920:	f7f7 fa58 	bl	8005dd4 <pbuf_free>
        goto memerr;
 800e924:	e08f      	b.n	800ea46 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e926:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e92c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e92e:	4413      	add	r3, r2
 800e930:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e934:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e938:	9201      	str	r2, [sp, #4]
 800e93a:	9300      	str	r3, [sp, #0]
 800e93c:	4603      	mov	r3, r0
 800e93e:	2241      	movs	r2, #65	; 0x41
 800e940:	2000      	movs	r0, #0
 800e942:	f7f7 f88d 	bl	8005a60 <pbuf_alloced_custom>
 800e946:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d106      	bne.n	800e95c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e94e:	69b8      	ldr	r0, [r7, #24]
 800e950:	f7ff fef6 	bl	800e740 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e956:	f7f7 fa3d 	bl	8005dd4 <pbuf_free>
        goto memerr;
 800e95a:	e074      	b.n	800ea46 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f7f7 fad9 	bl	8005f14 <pbuf_ref>
      pcr->original = p;
 800e962:	69bb      	ldr	r3, [r7, #24]
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	4a3f      	ldr	r2, [pc, #252]	; (800ea68 <ip4_frag+0x288>)
 800e96c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e96e:	6979      	ldr	r1, [r7, #20]
 800e970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e972:	f7f7 faf1 	bl	8005f58 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e976:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e97a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e97e:	1ad3      	subs	r3, r2, r3
 800e980:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e984:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d004      	beq.n	800e996 <ip4_frag+0x1b6>
        poff = 0;
 800e98c:	2300      	movs	r3, #0
 800e98e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e996:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d196      	bne.n	800e8cc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e99e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e9a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e9a4:	4413      	add	r3, r2
 800e9a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e9ac:	f1a3 0213 	sub.w	r2, r3, #19
 800e9b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	bfcc      	ite	gt
 800e9b8:	2301      	movgt	r3, #1
 800e9ba:	2300      	movle	r3, #0
 800e9bc:	b2db      	uxtb	r3, r3
 800e9be:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e9c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e9c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e9c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e9ca:	6a3b      	ldr	r3, [r7, #32]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d002      	beq.n	800e9d6 <ip4_frag+0x1f6>
 800e9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d003      	beq.n	800e9de <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e9d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e9d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e9dc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e9de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f7f5 fe27 	bl	8004634 <lwip_htons>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	461a      	mov	r2, r3
 800e9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ec:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e9ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e9f0:	3314      	adds	r3, #20
 800e9f2:	b29b      	uxth	r3, r3
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f7f5 fe1d 	bl	8004634 <lwip_htons>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	461a      	mov	r2, r3
 800e9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea00:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ea02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea04:	2200      	movs	r2, #0
 800ea06:	729a      	strb	r2, [r3, #10]
 800ea08:	2200      	movs	r2, #0
 800ea0a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	695b      	ldr	r3, [r3, #20]
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ea14:	68b8      	ldr	r0, [r7, #8]
 800ea16:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ea18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea1a:	f7f7 f9db 	bl	8005dd4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800ea1e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ea22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea24:	1ad3      	subs	r3, r2, r3
 800ea26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800ea2a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ea2e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ea30:	4413      	add	r3, r2
 800ea32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800ea36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	f47f af19 	bne.w	800e872 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ea40:	2300      	movs	r3, #0
 800ea42:	e002      	b.n	800ea4a <ip4_frag+0x26a>
      goto memerr;
 800ea44:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ea46:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3748      	adds	r7, #72	; 0x48
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	08012980 	.word	0x08012980
 800ea58:	08012b5c 	.word	0x08012b5c
 800ea5c:	080129c8 	.word	0x080129c8
 800ea60:	08012b78 	.word	0x08012b78
 800ea64:	08012b98 	.word	0x08012b98
 800ea68:	0800e779 	.word	0x0800e779

0800ea6c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b086      	sub	sp, #24
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ea76:	230e      	movs	r3, #14
 800ea78:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	895b      	ldrh	r3, [r3, #10]
 800ea7e:	2b0e      	cmp	r3, #14
 800ea80:	d96e      	bls.n	800eb60 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	7bdb      	ldrb	r3, [r3, #15]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d106      	bne.n	800ea98 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ea90:	3301      	adds	r3, #1
 800ea92:	b2da      	uxtb	r2, r3
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	685b      	ldr	r3, [r3, #4]
 800ea9c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	7b1a      	ldrb	r2, [r3, #12]
 800eaa2:	7b5b      	ldrb	r3, [r3, #13]
 800eaa4:	021b      	lsls	r3, r3, #8
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	f003 0301 	and.w	r3, r3, #1
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d023      	beq.n	800eafe <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d10f      	bne.n	800eade <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	785b      	ldrb	r3, [r3, #1]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d11b      	bne.n	800eafe <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800eaca:	2b5e      	cmp	r3, #94	; 0x5e
 800eacc:	d117      	bne.n	800eafe <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	7b5b      	ldrb	r3, [r3, #13]
 800ead2:	f043 0310 	orr.w	r3, r3, #16
 800ead6:	b2da      	uxtb	r2, r3
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	735a      	strb	r2, [r3, #13]
 800eadc:	e00f      	b.n	800eafe <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	2206      	movs	r2, #6
 800eae2:	4928      	ldr	r1, [pc, #160]	; (800eb84 <ethernet_input+0x118>)
 800eae4:	4618      	mov	r0, r3
 800eae6:	f000 f8bb 	bl	800ec60 <memcmp>
 800eaea:	4603      	mov	r3, r0
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d106      	bne.n	800eafe <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	7b5b      	ldrb	r3, [r3, #13]
 800eaf4:	f043 0308 	orr.w	r3, r3, #8
 800eaf8:	b2da      	uxtb	r2, r3
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800eafe:	89fb      	ldrh	r3, [r7, #14]
 800eb00:	2b08      	cmp	r3, #8
 800eb02:	d003      	beq.n	800eb0c <ethernet_input+0xa0>
 800eb04:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800eb08:	d014      	beq.n	800eb34 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800eb0a:	e032      	b.n	800eb72 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eb12:	f003 0308 	and.w	r3, r3, #8
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d024      	beq.n	800eb64 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800eb1a:	8afb      	ldrh	r3, [r7, #22]
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f7f7 f8d2 	bl	8005cc8 <pbuf_remove_header>
 800eb24:	4603      	mov	r3, r0
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d11e      	bne.n	800eb68 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800eb2a:	6839      	ldr	r1, [r7, #0]
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f7fe ff15 	bl	800d95c <ip4_input>
      break;
 800eb32:	e013      	b.n	800eb5c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eb3a:	f003 0308 	and.w	r3, r3, #8
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d014      	beq.n	800eb6c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800eb42:	8afb      	ldrh	r3, [r7, #22]
 800eb44:	4619      	mov	r1, r3
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f7f7 f8be 	bl	8005cc8 <pbuf_remove_header>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d10e      	bne.n	800eb70 <ethernet_input+0x104>
        etharp_input(p, netif);
 800eb52:	6839      	ldr	r1, [r7, #0]
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f7fe f8b5 	bl	800ccc4 <etharp_input>
      break;
 800eb5a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	e00c      	b.n	800eb7a <ethernet_input+0x10e>
    goto free_and_return;
 800eb60:	bf00      	nop
 800eb62:	e006      	b.n	800eb72 <ethernet_input+0x106>
        goto free_and_return;
 800eb64:	bf00      	nop
 800eb66:	e004      	b.n	800eb72 <ethernet_input+0x106>
        goto free_and_return;
 800eb68:	bf00      	nop
 800eb6a:	e002      	b.n	800eb72 <ethernet_input+0x106>
        goto free_and_return;
 800eb6c:	bf00      	nop
 800eb6e:	e000      	b.n	800eb72 <ethernet_input+0x106>
        goto free_and_return;
 800eb70:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f7f7 f92e 	bl	8005dd4 <pbuf_free>
  return ERR_OK;
 800eb78:	2300      	movs	r3, #0
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3718      	adds	r7, #24
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	08012d3c 	.word	0x08012d3c

0800eb88 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b086      	sub	sp, #24
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	607a      	str	r2, [r7, #4]
 800eb94:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800eb96:	8c3b      	ldrh	r3, [r7, #32]
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7f5 fd4b 	bl	8004634 <lwip_htons>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800eba2:	210e      	movs	r1, #14
 800eba4:	68b8      	ldr	r0, [r7, #8]
 800eba6:	f7f7 f87f 	bl	8005ca8 <pbuf_add_header>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d125      	bne.n	800ebfc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	685b      	ldr	r3, [r3, #4]
 800ebb4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	8afa      	ldrh	r2, [r7, #22]
 800ebba:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	2206      	movs	r2, #6
 800ebc0:	6839      	ldr	r1, [r7, #0]
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f000 f85c 	bl	800ec80 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	3306      	adds	r3, #6
 800ebcc:	2206      	movs	r2, #6
 800ebce:	6879      	ldr	r1, [r7, #4]
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f000 f855 	bl	800ec80 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ebdc:	2b06      	cmp	r3, #6
 800ebde:	d006      	beq.n	800ebee <ethernet_output+0x66>
 800ebe0:	4b0a      	ldr	r3, [pc, #40]	; (800ec0c <ethernet_output+0x84>)
 800ebe2:	f44f 7299 	mov.w	r2, #306	; 0x132
 800ebe6:	490a      	ldr	r1, [pc, #40]	; (800ec10 <ethernet_output+0x88>)
 800ebe8:	480a      	ldr	r0, [pc, #40]	; (800ec14 <ethernet_output+0x8c>)
 800ebea:	f000 f879 	bl	800ece0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	699b      	ldr	r3, [r3, #24]
 800ebf2:	68b9      	ldr	r1, [r7, #8]
 800ebf4:	68f8      	ldr	r0, [r7, #12]
 800ebf6:	4798      	blx	r3
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	e002      	b.n	800ec02 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800ebfc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800ebfe:	f06f 0301 	mvn.w	r3, #1
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3718      	adds	r7, #24
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}
 800ec0a:	bf00      	nop
 800ec0c:	08012ba8 	.word	0x08012ba8
 800ec10:	08012be0 	.word	0x08012be0
 800ec14:	08012c14 	.word	0x08012c14

0800ec18 <__libc_init_array>:
 800ec18:	b570      	push	{r4, r5, r6, lr}
 800ec1a:	4d0d      	ldr	r5, [pc, #52]	; (800ec50 <__libc_init_array+0x38>)
 800ec1c:	4c0d      	ldr	r4, [pc, #52]	; (800ec54 <__libc_init_array+0x3c>)
 800ec1e:	1b64      	subs	r4, r4, r5
 800ec20:	10a4      	asrs	r4, r4, #2
 800ec22:	2600      	movs	r6, #0
 800ec24:	42a6      	cmp	r6, r4
 800ec26:	d109      	bne.n	800ec3c <__libc_init_array+0x24>
 800ec28:	4d0b      	ldr	r5, [pc, #44]	; (800ec58 <__libc_init_array+0x40>)
 800ec2a:	4c0c      	ldr	r4, [pc, #48]	; (800ec5c <__libc_init_array+0x44>)
 800ec2c:	f001 fa5c 	bl	80100e8 <_init>
 800ec30:	1b64      	subs	r4, r4, r5
 800ec32:	10a4      	asrs	r4, r4, #2
 800ec34:	2600      	movs	r6, #0
 800ec36:	42a6      	cmp	r6, r4
 800ec38:	d105      	bne.n	800ec46 <__libc_init_array+0x2e>
 800ec3a:	bd70      	pop	{r4, r5, r6, pc}
 800ec3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec40:	4798      	blx	r3
 800ec42:	3601      	adds	r6, #1
 800ec44:	e7ee      	b.n	800ec24 <__libc_init_array+0xc>
 800ec46:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec4a:	4798      	blx	r3
 800ec4c:	3601      	adds	r6, #1
 800ec4e:	e7f2      	b.n	800ec36 <__libc_init_array+0x1e>
 800ec50:	08012e9c 	.word	0x08012e9c
 800ec54:	08012e9c 	.word	0x08012e9c
 800ec58:	08012e9c 	.word	0x08012e9c
 800ec5c:	08012ea0 	.word	0x08012ea0

0800ec60 <memcmp>:
 800ec60:	b510      	push	{r4, lr}
 800ec62:	3901      	subs	r1, #1
 800ec64:	4402      	add	r2, r0
 800ec66:	4290      	cmp	r0, r2
 800ec68:	d101      	bne.n	800ec6e <memcmp+0xe>
 800ec6a:	2000      	movs	r0, #0
 800ec6c:	e005      	b.n	800ec7a <memcmp+0x1a>
 800ec6e:	7803      	ldrb	r3, [r0, #0]
 800ec70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ec74:	42a3      	cmp	r3, r4
 800ec76:	d001      	beq.n	800ec7c <memcmp+0x1c>
 800ec78:	1b18      	subs	r0, r3, r4
 800ec7a:	bd10      	pop	{r4, pc}
 800ec7c:	3001      	adds	r0, #1
 800ec7e:	e7f2      	b.n	800ec66 <memcmp+0x6>

0800ec80 <memcpy>:
 800ec80:	440a      	add	r2, r1
 800ec82:	4291      	cmp	r1, r2
 800ec84:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec88:	d100      	bne.n	800ec8c <memcpy+0xc>
 800ec8a:	4770      	bx	lr
 800ec8c:	b510      	push	{r4, lr}
 800ec8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec96:	4291      	cmp	r1, r2
 800ec98:	d1f9      	bne.n	800ec8e <memcpy+0xe>
 800ec9a:	bd10      	pop	{r4, pc}

0800ec9c <memmove>:
 800ec9c:	4288      	cmp	r0, r1
 800ec9e:	b510      	push	{r4, lr}
 800eca0:	eb01 0402 	add.w	r4, r1, r2
 800eca4:	d902      	bls.n	800ecac <memmove+0x10>
 800eca6:	4284      	cmp	r4, r0
 800eca8:	4623      	mov	r3, r4
 800ecaa:	d807      	bhi.n	800ecbc <memmove+0x20>
 800ecac:	1e43      	subs	r3, r0, #1
 800ecae:	42a1      	cmp	r1, r4
 800ecb0:	d008      	beq.n	800ecc4 <memmove+0x28>
 800ecb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ecb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ecba:	e7f8      	b.n	800ecae <memmove+0x12>
 800ecbc:	4402      	add	r2, r0
 800ecbe:	4601      	mov	r1, r0
 800ecc0:	428a      	cmp	r2, r1
 800ecc2:	d100      	bne.n	800ecc6 <memmove+0x2a>
 800ecc4:	bd10      	pop	{r4, pc}
 800ecc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ecca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ecce:	e7f7      	b.n	800ecc0 <memmove+0x24>

0800ecd0 <memset>:
 800ecd0:	4402      	add	r2, r0
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	4293      	cmp	r3, r2
 800ecd6:	d100      	bne.n	800ecda <memset+0xa>
 800ecd8:	4770      	bx	lr
 800ecda:	f803 1b01 	strb.w	r1, [r3], #1
 800ecde:	e7f9      	b.n	800ecd4 <memset+0x4>

0800ece0 <iprintf>:
 800ece0:	b40f      	push	{r0, r1, r2, r3}
 800ece2:	4b0a      	ldr	r3, [pc, #40]	; (800ed0c <iprintf+0x2c>)
 800ece4:	b513      	push	{r0, r1, r4, lr}
 800ece6:	681c      	ldr	r4, [r3, #0]
 800ece8:	b124      	cbz	r4, 800ecf4 <iprintf+0x14>
 800ecea:	69a3      	ldr	r3, [r4, #24]
 800ecec:	b913      	cbnz	r3, 800ecf4 <iprintf+0x14>
 800ecee:	4620      	mov	r0, r4
 800ecf0:	f000 f8e2 	bl	800eeb8 <__sinit>
 800ecf4:	ab05      	add	r3, sp, #20
 800ecf6:	9a04      	ldr	r2, [sp, #16]
 800ecf8:	68a1      	ldr	r1, [r4, #8]
 800ecfa:	9301      	str	r3, [sp, #4]
 800ecfc:	4620      	mov	r0, r4
 800ecfe:	f000 fbfb 	bl	800f4f8 <_vfiprintf_r>
 800ed02:	b002      	add	sp, #8
 800ed04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed08:	b004      	add	sp, #16
 800ed0a:	4770      	bx	lr
 800ed0c:	2000002c 	.word	0x2000002c

0800ed10 <rand>:
 800ed10:	4b16      	ldr	r3, [pc, #88]	; (800ed6c <rand+0x5c>)
 800ed12:	b510      	push	{r4, lr}
 800ed14:	681c      	ldr	r4, [r3, #0]
 800ed16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ed18:	b9b3      	cbnz	r3, 800ed48 <rand+0x38>
 800ed1a:	2018      	movs	r0, #24
 800ed1c:	f000 f97e 	bl	800f01c <malloc>
 800ed20:	63a0      	str	r0, [r4, #56]	; 0x38
 800ed22:	b928      	cbnz	r0, 800ed30 <rand+0x20>
 800ed24:	4602      	mov	r2, r0
 800ed26:	4b12      	ldr	r3, [pc, #72]	; (800ed70 <rand+0x60>)
 800ed28:	4812      	ldr	r0, [pc, #72]	; (800ed74 <rand+0x64>)
 800ed2a:	214e      	movs	r1, #78	; 0x4e
 800ed2c:	f000 f84e 	bl	800edcc <__assert_func>
 800ed30:	4a11      	ldr	r2, [pc, #68]	; (800ed78 <rand+0x68>)
 800ed32:	4b12      	ldr	r3, [pc, #72]	; (800ed7c <rand+0x6c>)
 800ed34:	e9c0 2300 	strd	r2, r3, [r0]
 800ed38:	4b11      	ldr	r3, [pc, #68]	; (800ed80 <rand+0x70>)
 800ed3a:	6083      	str	r3, [r0, #8]
 800ed3c:	230b      	movs	r3, #11
 800ed3e:	8183      	strh	r3, [r0, #12]
 800ed40:	2201      	movs	r2, #1
 800ed42:	2300      	movs	r3, #0
 800ed44:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ed48:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800ed4a:	4a0e      	ldr	r2, [pc, #56]	; (800ed84 <rand+0x74>)
 800ed4c:	6920      	ldr	r0, [r4, #16]
 800ed4e:	6963      	ldr	r3, [r4, #20]
 800ed50:	490d      	ldr	r1, [pc, #52]	; (800ed88 <rand+0x78>)
 800ed52:	4342      	muls	r2, r0
 800ed54:	fb01 2203 	mla	r2, r1, r3, r2
 800ed58:	fba0 0101 	umull	r0, r1, r0, r1
 800ed5c:	1c43      	adds	r3, r0, #1
 800ed5e:	eb42 0001 	adc.w	r0, r2, r1
 800ed62:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800ed66:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ed6a:	bd10      	pop	{r4, pc}
 800ed6c:	2000002c 	.word	0x2000002c
 800ed70:	08012d50 	.word	0x08012d50
 800ed74:	08012d67 	.word	0x08012d67
 800ed78:	abcd330e 	.word	0xabcd330e
 800ed7c:	e66d1234 	.word	0xe66d1234
 800ed80:	0005deec 	.word	0x0005deec
 800ed84:	5851f42d 	.word	0x5851f42d
 800ed88:	4c957f2d 	.word	0x4c957f2d

0800ed8c <siprintf>:
 800ed8c:	b40e      	push	{r1, r2, r3}
 800ed8e:	b500      	push	{lr}
 800ed90:	b09c      	sub	sp, #112	; 0x70
 800ed92:	ab1d      	add	r3, sp, #116	; 0x74
 800ed94:	9002      	str	r0, [sp, #8]
 800ed96:	9006      	str	r0, [sp, #24]
 800ed98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ed9c:	4809      	ldr	r0, [pc, #36]	; (800edc4 <siprintf+0x38>)
 800ed9e:	9107      	str	r1, [sp, #28]
 800eda0:	9104      	str	r1, [sp, #16]
 800eda2:	4909      	ldr	r1, [pc, #36]	; (800edc8 <siprintf+0x3c>)
 800eda4:	f853 2b04 	ldr.w	r2, [r3], #4
 800eda8:	9105      	str	r1, [sp, #20]
 800edaa:	6800      	ldr	r0, [r0, #0]
 800edac:	9301      	str	r3, [sp, #4]
 800edae:	a902      	add	r1, sp, #8
 800edb0:	f000 fa78 	bl	800f2a4 <_svfiprintf_r>
 800edb4:	9b02      	ldr	r3, [sp, #8]
 800edb6:	2200      	movs	r2, #0
 800edb8:	701a      	strb	r2, [r3, #0]
 800edba:	b01c      	add	sp, #112	; 0x70
 800edbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800edc0:	b003      	add	sp, #12
 800edc2:	4770      	bx	lr
 800edc4:	2000002c 	.word	0x2000002c
 800edc8:	ffff0208 	.word	0xffff0208

0800edcc <__assert_func>:
 800edcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800edce:	4614      	mov	r4, r2
 800edd0:	461a      	mov	r2, r3
 800edd2:	4b09      	ldr	r3, [pc, #36]	; (800edf8 <__assert_func+0x2c>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	4605      	mov	r5, r0
 800edd8:	68d8      	ldr	r0, [r3, #12]
 800edda:	b14c      	cbz	r4, 800edf0 <__assert_func+0x24>
 800eddc:	4b07      	ldr	r3, [pc, #28]	; (800edfc <__assert_func+0x30>)
 800edde:	9100      	str	r1, [sp, #0]
 800ede0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ede4:	4906      	ldr	r1, [pc, #24]	; (800ee00 <__assert_func+0x34>)
 800ede6:	462b      	mov	r3, r5
 800ede8:	f000 f8e4 	bl	800efb4 <fiprintf>
 800edec:	f000 ff6e 	bl	800fccc <abort>
 800edf0:	4b04      	ldr	r3, [pc, #16]	; (800ee04 <__assert_func+0x38>)
 800edf2:	461c      	mov	r4, r3
 800edf4:	e7f3      	b.n	800edde <__assert_func+0x12>
 800edf6:	bf00      	nop
 800edf8:	2000002c 	.word	0x2000002c
 800edfc:	08012dc2 	.word	0x08012dc2
 800ee00:	08012dcf 	.word	0x08012dcf
 800ee04:	08012dfd 	.word	0x08012dfd

0800ee08 <std>:
 800ee08:	2300      	movs	r3, #0
 800ee0a:	b510      	push	{r4, lr}
 800ee0c:	4604      	mov	r4, r0
 800ee0e:	e9c0 3300 	strd	r3, r3, [r0]
 800ee12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee16:	6083      	str	r3, [r0, #8]
 800ee18:	8181      	strh	r1, [r0, #12]
 800ee1a:	6643      	str	r3, [r0, #100]	; 0x64
 800ee1c:	81c2      	strh	r2, [r0, #14]
 800ee1e:	6183      	str	r3, [r0, #24]
 800ee20:	4619      	mov	r1, r3
 800ee22:	2208      	movs	r2, #8
 800ee24:	305c      	adds	r0, #92	; 0x5c
 800ee26:	f7ff ff53 	bl	800ecd0 <memset>
 800ee2a:	4b05      	ldr	r3, [pc, #20]	; (800ee40 <std+0x38>)
 800ee2c:	6263      	str	r3, [r4, #36]	; 0x24
 800ee2e:	4b05      	ldr	r3, [pc, #20]	; (800ee44 <std+0x3c>)
 800ee30:	62a3      	str	r3, [r4, #40]	; 0x28
 800ee32:	4b05      	ldr	r3, [pc, #20]	; (800ee48 <std+0x40>)
 800ee34:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ee36:	4b05      	ldr	r3, [pc, #20]	; (800ee4c <std+0x44>)
 800ee38:	6224      	str	r4, [r4, #32]
 800ee3a:	6323      	str	r3, [r4, #48]	; 0x30
 800ee3c:	bd10      	pop	{r4, pc}
 800ee3e:	bf00      	nop
 800ee40:	0800faa1 	.word	0x0800faa1
 800ee44:	0800fac3 	.word	0x0800fac3
 800ee48:	0800fafb 	.word	0x0800fafb
 800ee4c:	0800fb1f 	.word	0x0800fb1f

0800ee50 <_cleanup_r>:
 800ee50:	4901      	ldr	r1, [pc, #4]	; (800ee58 <_cleanup_r+0x8>)
 800ee52:	f000 b8c1 	b.w	800efd8 <_fwalk_reent>
 800ee56:	bf00      	nop
 800ee58:	0800fe09 	.word	0x0800fe09

0800ee5c <__sfmoreglue>:
 800ee5c:	b570      	push	{r4, r5, r6, lr}
 800ee5e:	2268      	movs	r2, #104	; 0x68
 800ee60:	1e4d      	subs	r5, r1, #1
 800ee62:	4355      	muls	r5, r2
 800ee64:	460e      	mov	r6, r1
 800ee66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ee6a:	f000 f94b 	bl	800f104 <_malloc_r>
 800ee6e:	4604      	mov	r4, r0
 800ee70:	b140      	cbz	r0, 800ee84 <__sfmoreglue+0x28>
 800ee72:	2100      	movs	r1, #0
 800ee74:	e9c0 1600 	strd	r1, r6, [r0]
 800ee78:	300c      	adds	r0, #12
 800ee7a:	60a0      	str	r0, [r4, #8]
 800ee7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ee80:	f7ff ff26 	bl	800ecd0 <memset>
 800ee84:	4620      	mov	r0, r4
 800ee86:	bd70      	pop	{r4, r5, r6, pc}

0800ee88 <__sfp_lock_acquire>:
 800ee88:	4801      	ldr	r0, [pc, #4]	; (800ee90 <__sfp_lock_acquire+0x8>)
 800ee8a:	f000 b8c5 	b.w	800f018 <__retarget_lock_acquire_recursive>
 800ee8e:	bf00      	nop
 800ee90:	20008489 	.word	0x20008489

0800ee94 <__sfp_lock_release>:
 800ee94:	4801      	ldr	r0, [pc, #4]	; (800ee9c <__sfp_lock_release+0x8>)
 800ee96:	f000 b8c0 	b.w	800f01a <__retarget_lock_release_recursive>
 800ee9a:	bf00      	nop
 800ee9c:	20008489 	.word	0x20008489

0800eea0 <__sinit_lock_acquire>:
 800eea0:	4801      	ldr	r0, [pc, #4]	; (800eea8 <__sinit_lock_acquire+0x8>)
 800eea2:	f000 b8b9 	b.w	800f018 <__retarget_lock_acquire_recursive>
 800eea6:	bf00      	nop
 800eea8:	2000848a 	.word	0x2000848a

0800eeac <__sinit_lock_release>:
 800eeac:	4801      	ldr	r0, [pc, #4]	; (800eeb4 <__sinit_lock_release+0x8>)
 800eeae:	f000 b8b4 	b.w	800f01a <__retarget_lock_release_recursive>
 800eeb2:	bf00      	nop
 800eeb4:	2000848a 	.word	0x2000848a

0800eeb8 <__sinit>:
 800eeb8:	b510      	push	{r4, lr}
 800eeba:	4604      	mov	r4, r0
 800eebc:	f7ff fff0 	bl	800eea0 <__sinit_lock_acquire>
 800eec0:	69a3      	ldr	r3, [r4, #24]
 800eec2:	b11b      	cbz	r3, 800eecc <__sinit+0x14>
 800eec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eec8:	f7ff bff0 	b.w	800eeac <__sinit_lock_release>
 800eecc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eed0:	6523      	str	r3, [r4, #80]	; 0x50
 800eed2:	4b13      	ldr	r3, [pc, #76]	; (800ef20 <__sinit+0x68>)
 800eed4:	4a13      	ldr	r2, [pc, #76]	; (800ef24 <__sinit+0x6c>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	62a2      	str	r2, [r4, #40]	; 0x28
 800eeda:	42a3      	cmp	r3, r4
 800eedc:	bf04      	itt	eq
 800eede:	2301      	moveq	r3, #1
 800eee0:	61a3      	streq	r3, [r4, #24]
 800eee2:	4620      	mov	r0, r4
 800eee4:	f000 f820 	bl	800ef28 <__sfp>
 800eee8:	6060      	str	r0, [r4, #4]
 800eeea:	4620      	mov	r0, r4
 800eeec:	f000 f81c 	bl	800ef28 <__sfp>
 800eef0:	60a0      	str	r0, [r4, #8]
 800eef2:	4620      	mov	r0, r4
 800eef4:	f000 f818 	bl	800ef28 <__sfp>
 800eef8:	2200      	movs	r2, #0
 800eefa:	60e0      	str	r0, [r4, #12]
 800eefc:	2104      	movs	r1, #4
 800eefe:	6860      	ldr	r0, [r4, #4]
 800ef00:	f7ff ff82 	bl	800ee08 <std>
 800ef04:	68a0      	ldr	r0, [r4, #8]
 800ef06:	2201      	movs	r2, #1
 800ef08:	2109      	movs	r1, #9
 800ef0a:	f7ff ff7d 	bl	800ee08 <std>
 800ef0e:	68e0      	ldr	r0, [r4, #12]
 800ef10:	2202      	movs	r2, #2
 800ef12:	2112      	movs	r1, #18
 800ef14:	f7ff ff78 	bl	800ee08 <std>
 800ef18:	2301      	movs	r3, #1
 800ef1a:	61a3      	str	r3, [r4, #24]
 800ef1c:	e7d2      	b.n	800eec4 <__sinit+0xc>
 800ef1e:	bf00      	nop
 800ef20:	08012d4c 	.word	0x08012d4c
 800ef24:	0800ee51 	.word	0x0800ee51

0800ef28 <__sfp>:
 800ef28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef2a:	4607      	mov	r7, r0
 800ef2c:	f7ff ffac 	bl	800ee88 <__sfp_lock_acquire>
 800ef30:	4b1e      	ldr	r3, [pc, #120]	; (800efac <__sfp+0x84>)
 800ef32:	681e      	ldr	r6, [r3, #0]
 800ef34:	69b3      	ldr	r3, [r6, #24]
 800ef36:	b913      	cbnz	r3, 800ef3e <__sfp+0x16>
 800ef38:	4630      	mov	r0, r6
 800ef3a:	f7ff ffbd 	bl	800eeb8 <__sinit>
 800ef3e:	3648      	adds	r6, #72	; 0x48
 800ef40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ef44:	3b01      	subs	r3, #1
 800ef46:	d503      	bpl.n	800ef50 <__sfp+0x28>
 800ef48:	6833      	ldr	r3, [r6, #0]
 800ef4a:	b30b      	cbz	r3, 800ef90 <__sfp+0x68>
 800ef4c:	6836      	ldr	r6, [r6, #0]
 800ef4e:	e7f7      	b.n	800ef40 <__sfp+0x18>
 800ef50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ef54:	b9d5      	cbnz	r5, 800ef8c <__sfp+0x64>
 800ef56:	4b16      	ldr	r3, [pc, #88]	; (800efb0 <__sfp+0x88>)
 800ef58:	60e3      	str	r3, [r4, #12]
 800ef5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ef5e:	6665      	str	r5, [r4, #100]	; 0x64
 800ef60:	f000 f859 	bl	800f016 <__retarget_lock_init_recursive>
 800ef64:	f7ff ff96 	bl	800ee94 <__sfp_lock_release>
 800ef68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ef6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ef70:	6025      	str	r5, [r4, #0]
 800ef72:	61a5      	str	r5, [r4, #24]
 800ef74:	2208      	movs	r2, #8
 800ef76:	4629      	mov	r1, r5
 800ef78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ef7c:	f7ff fea8 	bl	800ecd0 <memset>
 800ef80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ef84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ef88:	4620      	mov	r0, r4
 800ef8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef8c:	3468      	adds	r4, #104	; 0x68
 800ef8e:	e7d9      	b.n	800ef44 <__sfp+0x1c>
 800ef90:	2104      	movs	r1, #4
 800ef92:	4638      	mov	r0, r7
 800ef94:	f7ff ff62 	bl	800ee5c <__sfmoreglue>
 800ef98:	4604      	mov	r4, r0
 800ef9a:	6030      	str	r0, [r6, #0]
 800ef9c:	2800      	cmp	r0, #0
 800ef9e:	d1d5      	bne.n	800ef4c <__sfp+0x24>
 800efa0:	f7ff ff78 	bl	800ee94 <__sfp_lock_release>
 800efa4:	230c      	movs	r3, #12
 800efa6:	603b      	str	r3, [r7, #0]
 800efa8:	e7ee      	b.n	800ef88 <__sfp+0x60>
 800efaa:	bf00      	nop
 800efac:	08012d4c 	.word	0x08012d4c
 800efb0:	ffff0001 	.word	0xffff0001

0800efb4 <fiprintf>:
 800efb4:	b40e      	push	{r1, r2, r3}
 800efb6:	b503      	push	{r0, r1, lr}
 800efb8:	4601      	mov	r1, r0
 800efba:	ab03      	add	r3, sp, #12
 800efbc:	4805      	ldr	r0, [pc, #20]	; (800efd4 <fiprintf+0x20>)
 800efbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800efc2:	6800      	ldr	r0, [r0, #0]
 800efc4:	9301      	str	r3, [sp, #4]
 800efc6:	f000 fa97 	bl	800f4f8 <_vfiprintf_r>
 800efca:	b002      	add	sp, #8
 800efcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800efd0:	b003      	add	sp, #12
 800efd2:	4770      	bx	lr
 800efd4:	2000002c 	.word	0x2000002c

0800efd8 <_fwalk_reent>:
 800efd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efdc:	4606      	mov	r6, r0
 800efde:	4688      	mov	r8, r1
 800efe0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800efe4:	2700      	movs	r7, #0
 800efe6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800efea:	f1b9 0901 	subs.w	r9, r9, #1
 800efee:	d505      	bpl.n	800effc <_fwalk_reent+0x24>
 800eff0:	6824      	ldr	r4, [r4, #0]
 800eff2:	2c00      	cmp	r4, #0
 800eff4:	d1f7      	bne.n	800efe6 <_fwalk_reent+0xe>
 800eff6:	4638      	mov	r0, r7
 800eff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800effc:	89ab      	ldrh	r3, [r5, #12]
 800effe:	2b01      	cmp	r3, #1
 800f000:	d907      	bls.n	800f012 <_fwalk_reent+0x3a>
 800f002:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f006:	3301      	adds	r3, #1
 800f008:	d003      	beq.n	800f012 <_fwalk_reent+0x3a>
 800f00a:	4629      	mov	r1, r5
 800f00c:	4630      	mov	r0, r6
 800f00e:	47c0      	blx	r8
 800f010:	4307      	orrs	r7, r0
 800f012:	3568      	adds	r5, #104	; 0x68
 800f014:	e7e9      	b.n	800efea <_fwalk_reent+0x12>

0800f016 <__retarget_lock_init_recursive>:
 800f016:	4770      	bx	lr

0800f018 <__retarget_lock_acquire_recursive>:
 800f018:	4770      	bx	lr

0800f01a <__retarget_lock_release_recursive>:
 800f01a:	4770      	bx	lr

0800f01c <malloc>:
 800f01c:	4b02      	ldr	r3, [pc, #8]	; (800f028 <malloc+0xc>)
 800f01e:	4601      	mov	r1, r0
 800f020:	6818      	ldr	r0, [r3, #0]
 800f022:	f000 b86f 	b.w	800f104 <_malloc_r>
 800f026:	bf00      	nop
 800f028:	2000002c 	.word	0x2000002c

0800f02c <_free_r>:
 800f02c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f02e:	2900      	cmp	r1, #0
 800f030:	d044      	beq.n	800f0bc <_free_r+0x90>
 800f032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f036:	9001      	str	r0, [sp, #4]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	f1a1 0404 	sub.w	r4, r1, #4
 800f03e:	bfb8      	it	lt
 800f040:	18e4      	addlt	r4, r4, r3
 800f042:	f000 ff95 	bl	800ff70 <__malloc_lock>
 800f046:	4a1e      	ldr	r2, [pc, #120]	; (800f0c0 <_free_r+0x94>)
 800f048:	9801      	ldr	r0, [sp, #4]
 800f04a:	6813      	ldr	r3, [r2, #0]
 800f04c:	b933      	cbnz	r3, 800f05c <_free_r+0x30>
 800f04e:	6063      	str	r3, [r4, #4]
 800f050:	6014      	str	r4, [r2, #0]
 800f052:	b003      	add	sp, #12
 800f054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f058:	f000 bf90 	b.w	800ff7c <__malloc_unlock>
 800f05c:	42a3      	cmp	r3, r4
 800f05e:	d908      	bls.n	800f072 <_free_r+0x46>
 800f060:	6825      	ldr	r5, [r4, #0]
 800f062:	1961      	adds	r1, r4, r5
 800f064:	428b      	cmp	r3, r1
 800f066:	bf01      	itttt	eq
 800f068:	6819      	ldreq	r1, [r3, #0]
 800f06a:	685b      	ldreq	r3, [r3, #4]
 800f06c:	1949      	addeq	r1, r1, r5
 800f06e:	6021      	streq	r1, [r4, #0]
 800f070:	e7ed      	b.n	800f04e <_free_r+0x22>
 800f072:	461a      	mov	r2, r3
 800f074:	685b      	ldr	r3, [r3, #4]
 800f076:	b10b      	cbz	r3, 800f07c <_free_r+0x50>
 800f078:	42a3      	cmp	r3, r4
 800f07a:	d9fa      	bls.n	800f072 <_free_r+0x46>
 800f07c:	6811      	ldr	r1, [r2, #0]
 800f07e:	1855      	adds	r5, r2, r1
 800f080:	42a5      	cmp	r5, r4
 800f082:	d10b      	bne.n	800f09c <_free_r+0x70>
 800f084:	6824      	ldr	r4, [r4, #0]
 800f086:	4421      	add	r1, r4
 800f088:	1854      	adds	r4, r2, r1
 800f08a:	42a3      	cmp	r3, r4
 800f08c:	6011      	str	r1, [r2, #0]
 800f08e:	d1e0      	bne.n	800f052 <_free_r+0x26>
 800f090:	681c      	ldr	r4, [r3, #0]
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	6053      	str	r3, [r2, #4]
 800f096:	4421      	add	r1, r4
 800f098:	6011      	str	r1, [r2, #0]
 800f09a:	e7da      	b.n	800f052 <_free_r+0x26>
 800f09c:	d902      	bls.n	800f0a4 <_free_r+0x78>
 800f09e:	230c      	movs	r3, #12
 800f0a0:	6003      	str	r3, [r0, #0]
 800f0a2:	e7d6      	b.n	800f052 <_free_r+0x26>
 800f0a4:	6825      	ldr	r5, [r4, #0]
 800f0a6:	1961      	adds	r1, r4, r5
 800f0a8:	428b      	cmp	r3, r1
 800f0aa:	bf04      	itt	eq
 800f0ac:	6819      	ldreq	r1, [r3, #0]
 800f0ae:	685b      	ldreq	r3, [r3, #4]
 800f0b0:	6063      	str	r3, [r4, #4]
 800f0b2:	bf04      	itt	eq
 800f0b4:	1949      	addeq	r1, r1, r5
 800f0b6:	6021      	streq	r1, [r4, #0]
 800f0b8:	6054      	str	r4, [r2, #4]
 800f0ba:	e7ca      	b.n	800f052 <_free_r+0x26>
 800f0bc:	b003      	add	sp, #12
 800f0be:	bd30      	pop	{r4, r5, pc}
 800f0c0:	2000848c 	.word	0x2000848c

0800f0c4 <sbrk_aligned>:
 800f0c4:	b570      	push	{r4, r5, r6, lr}
 800f0c6:	4e0e      	ldr	r6, [pc, #56]	; (800f100 <sbrk_aligned+0x3c>)
 800f0c8:	460c      	mov	r4, r1
 800f0ca:	6831      	ldr	r1, [r6, #0]
 800f0cc:	4605      	mov	r5, r0
 800f0ce:	b911      	cbnz	r1, 800f0d6 <sbrk_aligned+0x12>
 800f0d0:	f000 fcd6 	bl	800fa80 <_sbrk_r>
 800f0d4:	6030      	str	r0, [r6, #0]
 800f0d6:	4621      	mov	r1, r4
 800f0d8:	4628      	mov	r0, r5
 800f0da:	f000 fcd1 	bl	800fa80 <_sbrk_r>
 800f0de:	1c43      	adds	r3, r0, #1
 800f0e0:	d00a      	beq.n	800f0f8 <sbrk_aligned+0x34>
 800f0e2:	1cc4      	adds	r4, r0, #3
 800f0e4:	f024 0403 	bic.w	r4, r4, #3
 800f0e8:	42a0      	cmp	r0, r4
 800f0ea:	d007      	beq.n	800f0fc <sbrk_aligned+0x38>
 800f0ec:	1a21      	subs	r1, r4, r0
 800f0ee:	4628      	mov	r0, r5
 800f0f0:	f000 fcc6 	bl	800fa80 <_sbrk_r>
 800f0f4:	3001      	adds	r0, #1
 800f0f6:	d101      	bne.n	800f0fc <sbrk_aligned+0x38>
 800f0f8:	f04f 34ff 	mov.w	r4, #4294967295
 800f0fc:	4620      	mov	r0, r4
 800f0fe:	bd70      	pop	{r4, r5, r6, pc}
 800f100:	20008490 	.word	0x20008490

0800f104 <_malloc_r>:
 800f104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f108:	1ccd      	adds	r5, r1, #3
 800f10a:	f025 0503 	bic.w	r5, r5, #3
 800f10e:	3508      	adds	r5, #8
 800f110:	2d0c      	cmp	r5, #12
 800f112:	bf38      	it	cc
 800f114:	250c      	movcc	r5, #12
 800f116:	2d00      	cmp	r5, #0
 800f118:	4607      	mov	r7, r0
 800f11a:	db01      	blt.n	800f120 <_malloc_r+0x1c>
 800f11c:	42a9      	cmp	r1, r5
 800f11e:	d905      	bls.n	800f12c <_malloc_r+0x28>
 800f120:	230c      	movs	r3, #12
 800f122:	603b      	str	r3, [r7, #0]
 800f124:	2600      	movs	r6, #0
 800f126:	4630      	mov	r0, r6
 800f128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f12c:	4e2e      	ldr	r6, [pc, #184]	; (800f1e8 <_malloc_r+0xe4>)
 800f12e:	f000 ff1f 	bl	800ff70 <__malloc_lock>
 800f132:	6833      	ldr	r3, [r6, #0]
 800f134:	461c      	mov	r4, r3
 800f136:	bb34      	cbnz	r4, 800f186 <_malloc_r+0x82>
 800f138:	4629      	mov	r1, r5
 800f13a:	4638      	mov	r0, r7
 800f13c:	f7ff ffc2 	bl	800f0c4 <sbrk_aligned>
 800f140:	1c43      	adds	r3, r0, #1
 800f142:	4604      	mov	r4, r0
 800f144:	d14d      	bne.n	800f1e2 <_malloc_r+0xde>
 800f146:	6834      	ldr	r4, [r6, #0]
 800f148:	4626      	mov	r6, r4
 800f14a:	2e00      	cmp	r6, #0
 800f14c:	d140      	bne.n	800f1d0 <_malloc_r+0xcc>
 800f14e:	6823      	ldr	r3, [r4, #0]
 800f150:	4631      	mov	r1, r6
 800f152:	4638      	mov	r0, r7
 800f154:	eb04 0803 	add.w	r8, r4, r3
 800f158:	f000 fc92 	bl	800fa80 <_sbrk_r>
 800f15c:	4580      	cmp	r8, r0
 800f15e:	d13a      	bne.n	800f1d6 <_malloc_r+0xd2>
 800f160:	6821      	ldr	r1, [r4, #0]
 800f162:	3503      	adds	r5, #3
 800f164:	1a6d      	subs	r5, r5, r1
 800f166:	f025 0503 	bic.w	r5, r5, #3
 800f16a:	3508      	adds	r5, #8
 800f16c:	2d0c      	cmp	r5, #12
 800f16e:	bf38      	it	cc
 800f170:	250c      	movcc	r5, #12
 800f172:	4629      	mov	r1, r5
 800f174:	4638      	mov	r0, r7
 800f176:	f7ff ffa5 	bl	800f0c4 <sbrk_aligned>
 800f17a:	3001      	adds	r0, #1
 800f17c:	d02b      	beq.n	800f1d6 <_malloc_r+0xd2>
 800f17e:	6823      	ldr	r3, [r4, #0]
 800f180:	442b      	add	r3, r5
 800f182:	6023      	str	r3, [r4, #0]
 800f184:	e00e      	b.n	800f1a4 <_malloc_r+0xa0>
 800f186:	6822      	ldr	r2, [r4, #0]
 800f188:	1b52      	subs	r2, r2, r5
 800f18a:	d41e      	bmi.n	800f1ca <_malloc_r+0xc6>
 800f18c:	2a0b      	cmp	r2, #11
 800f18e:	d916      	bls.n	800f1be <_malloc_r+0xba>
 800f190:	1961      	adds	r1, r4, r5
 800f192:	42a3      	cmp	r3, r4
 800f194:	6025      	str	r5, [r4, #0]
 800f196:	bf18      	it	ne
 800f198:	6059      	strne	r1, [r3, #4]
 800f19a:	6863      	ldr	r3, [r4, #4]
 800f19c:	bf08      	it	eq
 800f19e:	6031      	streq	r1, [r6, #0]
 800f1a0:	5162      	str	r2, [r4, r5]
 800f1a2:	604b      	str	r3, [r1, #4]
 800f1a4:	4638      	mov	r0, r7
 800f1a6:	f104 060b 	add.w	r6, r4, #11
 800f1aa:	f000 fee7 	bl	800ff7c <__malloc_unlock>
 800f1ae:	f026 0607 	bic.w	r6, r6, #7
 800f1b2:	1d23      	adds	r3, r4, #4
 800f1b4:	1af2      	subs	r2, r6, r3
 800f1b6:	d0b6      	beq.n	800f126 <_malloc_r+0x22>
 800f1b8:	1b9b      	subs	r3, r3, r6
 800f1ba:	50a3      	str	r3, [r4, r2]
 800f1bc:	e7b3      	b.n	800f126 <_malloc_r+0x22>
 800f1be:	6862      	ldr	r2, [r4, #4]
 800f1c0:	42a3      	cmp	r3, r4
 800f1c2:	bf0c      	ite	eq
 800f1c4:	6032      	streq	r2, [r6, #0]
 800f1c6:	605a      	strne	r2, [r3, #4]
 800f1c8:	e7ec      	b.n	800f1a4 <_malloc_r+0xa0>
 800f1ca:	4623      	mov	r3, r4
 800f1cc:	6864      	ldr	r4, [r4, #4]
 800f1ce:	e7b2      	b.n	800f136 <_malloc_r+0x32>
 800f1d0:	4634      	mov	r4, r6
 800f1d2:	6876      	ldr	r6, [r6, #4]
 800f1d4:	e7b9      	b.n	800f14a <_malloc_r+0x46>
 800f1d6:	230c      	movs	r3, #12
 800f1d8:	603b      	str	r3, [r7, #0]
 800f1da:	4638      	mov	r0, r7
 800f1dc:	f000 fece 	bl	800ff7c <__malloc_unlock>
 800f1e0:	e7a1      	b.n	800f126 <_malloc_r+0x22>
 800f1e2:	6025      	str	r5, [r4, #0]
 800f1e4:	e7de      	b.n	800f1a4 <_malloc_r+0xa0>
 800f1e6:	bf00      	nop
 800f1e8:	2000848c 	.word	0x2000848c

0800f1ec <__ssputs_r>:
 800f1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1f0:	688e      	ldr	r6, [r1, #8]
 800f1f2:	429e      	cmp	r6, r3
 800f1f4:	4682      	mov	sl, r0
 800f1f6:	460c      	mov	r4, r1
 800f1f8:	4690      	mov	r8, r2
 800f1fa:	461f      	mov	r7, r3
 800f1fc:	d838      	bhi.n	800f270 <__ssputs_r+0x84>
 800f1fe:	898a      	ldrh	r2, [r1, #12]
 800f200:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f204:	d032      	beq.n	800f26c <__ssputs_r+0x80>
 800f206:	6825      	ldr	r5, [r4, #0]
 800f208:	6909      	ldr	r1, [r1, #16]
 800f20a:	eba5 0901 	sub.w	r9, r5, r1
 800f20e:	6965      	ldr	r5, [r4, #20]
 800f210:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f214:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f218:	3301      	adds	r3, #1
 800f21a:	444b      	add	r3, r9
 800f21c:	106d      	asrs	r5, r5, #1
 800f21e:	429d      	cmp	r5, r3
 800f220:	bf38      	it	cc
 800f222:	461d      	movcc	r5, r3
 800f224:	0553      	lsls	r3, r2, #21
 800f226:	d531      	bpl.n	800f28c <__ssputs_r+0xa0>
 800f228:	4629      	mov	r1, r5
 800f22a:	f7ff ff6b 	bl	800f104 <_malloc_r>
 800f22e:	4606      	mov	r6, r0
 800f230:	b950      	cbnz	r0, 800f248 <__ssputs_r+0x5c>
 800f232:	230c      	movs	r3, #12
 800f234:	f8ca 3000 	str.w	r3, [sl]
 800f238:	89a3      	ldrh	r3, [r4, #12]
 800f23a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f23e:	81a3      	strh	r3, [r4, #12]
 800f240:	f04f 30ff 	mov.w	r0, #4294967295
 800f244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f248:	6921      	ldr	r1, [r4, #16]
 800f24a:	464a      	mov	r2, r9
 800f24c:	f7ff fd18 	bl	800ec80 <memcpy>
 800f250:	89a3      	ldrh	r3, [r4, #12]
 800f252:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f25a:	81a3      	strh	r3, [r4, #12]
 800f25c:	6126      	str	r6, [r4, #16]
 800f25e:	6165      	str	r5, [r4, #20]
 800f260:	444e      	add	r6, r9
 800f262:	eba5 0509 	sub.w	r5, r5, r9
 800f266:	6026      	str	r6, [r4, #0]
 800f268:	60a5      	str	r5, [r4, #8]
 800f26a:	463e      	mov	r6, r7
 800f26c:	42be      	cmp	r6, r7
 800f26e:	d900      	bls.n	800f272 <__ssputs_r+0x86>
 800f270:	463e      	mov	r6, r7
 800f272:	6820      	ldr	r0, [r4, #0]
 800f274:	4632      	mov	r2, r6
 800f276:	4641      	mov	r1, r8
 800f278:	f7ff fd10 	bl	800ec9c <memmove>
 800f27c:	68a3      	ldr	r3, [r4, #8]
 800f27e:	1b9b      	subs	r3, r3, r6
 800f280:	60a3      	str	r3, [r4, #8]
 800f282:	6823      	ldr	r3, [r4, #0]
 800f284:	4433      	add	r3, r6
 800f286:	6023      	str	r3, [r4, #0]
 800f288:	2000      	movs	r0, #0
 800f28a:	e7db      	b.n	800f244 <__ssputs_r+0x58>
 800f28c:	462a      	mov	r2, r5
 800f28e:	f000 fe7b 	bl	800ff88 <_realloc_r>
 800f292:	4606      	mov	r6, r0
 800f294:	2800      	cmp	r0, #0
 800f296:	d1e1      	bne.n	800f25c <__ssputs_r+0x70>
 800f298:	6921      	ldr	r1, [r4, #16]
 800f29a:	4650      	mov	r0, sl
 800f29c:	f7ff fec6 	bl	800f02c <_free_r>
 800f2a0:	e7c7      	b.n	800f232 <__ssputs_r+0x46>
	...

0800f2a4 <_svfiprintf_r>:
 800f2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a8:	4698      	mov	r8, r3
 800f2aa:	898b      	ldrh	r3, [r1, #12]
 800f2ac:	061b      	lsls	r3, r3, #24
 800f2ae:	b09d      	sub	sp, #116	; 0x74
 800f2b0:	4607      	mov	r7, r0
 800f2b2:	460d      	mov	r5, r1
 800f2b4:	4614      	mov	r4, r2
 800f2b6:	d50e      	bpl.n	800f2d6 <_svfiprintf_r+0x32>
 800f2b8:	690b      	ldr	r3, [r1, #16]
 800f2ba:	b963      	cbnz	r3, 800f2d6 <_svfiprintf_r+0x32>
 800f2bc:	2140      	movs	r1, #64	; 0x40
 800f2be:	f7ff ff21 	bl	800f104 <_malloc_r>
 800f2c2:	6028      	str	r0, [r5, #0]
 800f2c4:	6128      	str	r0, [r5, #16]
 800f2c6:	b920      	cbnz	r0, 800f2d2 <_svfiprintf_r+0x2e>
 800f2c8:	230c      	movs	r3, #12
 800f2ca:	603b      	str	r3, [r7, #0]
 800f2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f2d0:	e0d1      	b.n	800f476 <_svfiprintf_r+0x1d2>
 800f2d2:	2340      	movs	r3, #64	; 0x40
 800f2d4:	616b      	str	r3, [r5, #20]
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	9309      	str	r3, [sp, #36]	; 0x24
 800f2da:	2320      	movs	r3, #32
 800f2dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f2e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2e4:	2330      	movs	r3, #48	; 0x30
 800f2e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f490 <_svfiprintf_r+0x1ec>
 800f2ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f2ee:	f04f 0901 	mov.w	r9, #1
 800f2f2:	4623      	mov	r3, r4
 800f2f4:	469a      	mov	sl, r3
 800f2f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2fa:	b10a      	cbz	r2, 800f300 <_svfiprintf_r+0x5c>
 800f2fc:	2a25      	cmp	r2, #37	; 0x25
 800f2fe:	d1f9      	bne.n	800f2f4 <_svfiprintf_r+0x50>
 800f300:	ebba 0b04 	subs.w	fp, sl, r4
 800f304:	d00b      	beq.n	800f31e <_svfiprintf_r+0x7a>
 800f306:	465b      	mov	r3, fp
 800f308:	4622      	mov	r2, r4
 800f30a:	4629      	mov	r1, r5
 800f30c:	4638      	mov	r0, r7
 800f30e:	f7ff ff6d 	bl	800f1ec <__ssputs_r>
 800f312:	3001      	adds	r0, #1
 800f314:	f000 80aa 	beq.w	800f46c <_svfiprintf_r+0x1c8>
 800f318:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f31a:	445a      	add	r2, fp
 800f31c:	9209      	str	r2, [sp, #36]	; 0x24
 800f31e:	f89a 3000 	ldrb.w	r3, [sl]
 800f322:	2b00      	cmp	r3, #0
 800f324:	f000 80a2 	beq.w	800f46c <_svfiprintf_r+0x1c8>
 800f328:	2300      	movs	r3, #0
 800f32a:	f04f 32ff 	mov.w	r2, #4294967295
 800f32e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f332:	f10a 0a01 	add.w	sl, sl, #1
 800f336:	9304      	str	r3, [sp, #16]
 800f338:	9307      	str	r3, [sp, #28]
 800f33a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f33e:	931a      	str	r3, [sp, #104]	; 0x68
 800f340:	4654      	mov	r4, sl
 800f342:	2205      	movs	r2, #5
 800f344:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f348:	4851      	ldr	r0, [pc, #324]	; (800f490 <_svfiprintf_r+0x1ec>)
 800f34a:	f7f0 ff41 	bl	80001d0 <memchr>
 800f34e:	9a04      	ldr	r2, [sp, #16]
 800f350:	b9d8      	cbnz	r0, 800f38a <_svfiprintf_r+0xe6>
 800f352:	06d0      	lsls	r0, r2, #27
 800f354:	bf44      	itt	mi
 800f356:	2320      	movmi	r3, #32
 800f358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f35c:	0711      	lsls	r1, r2, #28
 800f35e:	bf44      	itt	mi
 800f360:	232b      	movmi	r3, #43	; 0x2b
 800f362:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f366:	f89a 3000 	ldrb.w	r3, [sl]
 800f36a:	2b2a      	cmp	r3, #42	; 0x2a
 800f36c:	d015      	beq.n	800f39a <_svfiprintf_r+0xf6>
 800f36e:	9a07      	ldr	r2, [sp, #28]
 800f370:	4654      	mov	r4, sl
 800f372:	2000      	movs	r0, #0
 800f374:	f04f 0c0a 	mov.w	ip, #10
 800f378:	4621      	mov	r1, r4
 800f37a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f37e:	3b30      	subs	r3, #48	; 0x30
 800f380:	2b09      	cmp	r3, #9
 800f382:	d94e      	bls.n	800f422 <_svfiprintf_r+0x17e>
 800f384:	b1b0      	cbz	r0, 800f3b4 <_svfiprintf_r+0x110>
 800f386:	9207      	str	r2, [sp, #28]
 800f388:	e014      	b.n	800f3b4 <_svfiprintf_r+0x110>
 800f38a:	eba0 0308 	sub.w	r3, r0, r8
 800f38e:	fa09 f303 	lsl.w	r3, r9, r3
 800f392:	4313      	orrs	r3, r2
 800f394:	9304      	str	r3, [sp, #16]
 800f396:	46a2      	mov	sl, r4
 800f398:	e7d2      	b.n	800f340 <_svfiprintf_r+0x9c>
 800f39a:	9b03      	ldr	r3, [sp, #12]
 800f39c:	1d19      	adds	r1, r3, #4
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	9103      	str	r1, [sp, #12]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	bfbb      	ittet	lt
 800f3a6:	425b      	neglt	r3, r3
 800f3a8:	f042 0202 	orrlt.w	r2, r2, #2
 800f3ac:	9307      	strge	r3, [sp, #28]
 800f3ae:	9307      	strlt	r3, [sp, #28]
 800f3b0:	bfb8      	it	lt
 800f3b2:	9204      	strlt	r2, [sp, #16]
 800f3b4:	7823      	ldrb	r3, [r4, #0]
 800f3b6:	2b2e      	cmp	r3, #46	; 0x2e
 800f3b8:	d10c      	bne.n	800f3d4 <_svfiprintf_r+0x130>
 800f3ba:	7863      	ldrb	r3, [r4, #1]
 800f3bc:	2b2a      	cmp	r3, #42	; 0x2a
 800f3be:	d135      	bne.n	800f42c <_svfiprintf_r+0x188>
 800f3c0:	9b03      	ldr	r3, [sp, #12]
 800f3c2:	1d1a      	adds	r2, r3, #4
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	9203      	str	r2, [sp, #12]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	bfb8      	it	lt
 800f3cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800f3d0:	3402      	adds	r4, #2
 800f3d2:	9305      	str	r3, [sp, #20]
 800f3d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f4a0 <_svfiprintf_r+0x1fc>
 800f3d8:	7821      	ldrb	r1, [r4, #0]
 800f3da:	2203      	movs	r2, #3
 800f3dc:	4650      	mov	r0, sl
 800f3de:	f7f0 fef7 	bl	80001d0 <memchr>
 800f3e2:	b140      	cbz	r0, 800f3f6 <_svfiprintf_r+0x152>
 800f3e4:	2340      	movs	r3, #64	; 0x40
 800f3e6:	eba0 000a 	sub.w	r0, r0, sl
 800f3ea:	fa03 f000 	lsl.w	r0, r3, r0
 800f3ee:	9b04      	ldr	r3, [sp, #16]
 800f3f0:	4303      	orrs	r3, r0
 800f3f2:	3401      	adds	r4, #1
 800f3f4:	9304      	str	r3, [sp, #16]
 800f3f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3fa:	4826      	ldr	r0, [pc, #152]	; (800f494 <_svfiprintf_r+0x1f0>)
 800f3fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f400:	2206      	movs	r2, #6
 800f402:	f7f0 fee5 	bl	80001d0 <memchr>
 800f406:	2800      	cmp	r0, #0
 800f408:	d038      	beq.n	800f47c <_svfiprintf_r+0x1d8>
 800f40a:	4b23      	ldr	r3, [pc, #140]	; (800f498 <_svfiprintf_r+0x1f4>)
 800f40c:	bb1b      	cbnz	r3, 800f456 <_svfiprintf_r+0x1b2>
 800f40e:	9b03      	ldr	r3, [sp, #12]
 800f410:	3307      	adds	r3, #7
 800f412:	f023 0307 	bic.w	r3, r3, #7
 800f416:	3308      	adds	r3, #8
 800f418:	9303      	str	r3, [sp, #12]
 800f41a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f41c:	4433      	add	r3, r6
 800f41e:	9309      	str	r3, [sp, #36]	; 0x24
 800f420:	e767      	b.n	800f2f2 <_svfiprintf_r+0x4e>
 800f422:	fb0c 3202 	mla	r2, ip, r2, r3
 800f426:	460c      	mov	r4, r1
 800f428:	2001      	movs	r0, #1
 800f42a:	e7a5      	b.n	800f378 <_svfiprintf_r+0xd4>
 800f42c:	2300      	movs	r3, #0
 800f42e:	3401      	adds	r4, #1
 800f430:	9305      	str	r3, [sp, #20]
 800f432:	4619      	mov	r1, r3
 800f434:	f04f 0c0a 	mov.w	ip, #10
 800f438:	4620      	mov	r0, r4
 800f43a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f43e:	3a30      	subs	r2, #48	; 0x30
 800f440:	2a09      	cmp	r2, #9
 800f442:	d903      	bls.n	800f44c <_svfiprintf_r+0x1a8>
 800f444:	2b00      	cmp	r3, #0
 800f446:	d0c5      	beq.n	800f3d4 <_svfiprintf_r+0x130>
 800f448:	9105      	str	r1, [sp, #20]
 800f44a:	e7c3      	b.n	800f3d4 <_svfiprintf_r+0x130>
 800f44c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f450:	4604      	mov	r4, r0
 800f452:	2301      	movs	r3, #1
 800f454:	e7f0      	b.n	800f438 <_svfiprintf_r+0x194>
 800f456:	ab03      	add	r3, sp, #12
 800f458:	9300      	str	r3, [sp, #0]
 800f45a:	462a      	mov	r2, r5
 800f45c:	4b0f      	ldr	r3, [pc, #60]	; (800f49c <_svfiprintf_r+0x1f8>)
 800f45e:	a904      	add	r1, sp, #16
 800f460:	4638      	mov	r0, r7
 800f462:	f3af 8000 	nop.w
 800f466:	1c42      	adds	r2, r0, #1
 800f468:	4606      	mov	r6, r0
 800f46a:	d1d6      	bne.n	800f41a <_svfiprintf_r+0x176>
 800f46c:	89ab      	ldrh	r3, [r5, #12]
 800f46e:	065b      	lsls	r3, r3, #25
 800f470:	f53f af2c 	bmi.w	800f2cc <_svfiprintf_r+0x28>
 800f474:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f476:	b01d      	add	sp, #116	; 0x74
 800f478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f47c:	ab03      	add	r3, sp, #12
 800f47e:	9300      	str	r3, [sp, #0]
 800f480:	462a      	mov	r2, r5
 800f482:	4b06      	ldr	r3, [pc, #24]	; (800f49c <_svfiprintf_r+0x1f8>)
 800f484:	a904      	add	r1, sp, #16
 800f486:	4638      	mov	r0, r7
 800f488:	f000 f9d4 	bl	800f834 <_printf_i>
 800f48c:	e7eb      	b.n	800f466 <_svfiprintf_r+0x1c2>
 800f48e:	bf00      	nop
 800f490:	08012e60 	.word	0x08012e60
 800f494:	08012e6a 	.word	0x08012e6a
 800f498:	00000000 	.word	0x00000000
 800f49c:	0800f1ed 	.word	0x0800f1ed
 800f4a0:	08012e66 	.word	0x08012e66

0800f4a4 <__sfputc_r>:
 800f4a4:	6893      	ldr	r3, [r2, #8]
 800f4a6:	3b01      	subs	r3, #1
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	b410      	push	{r4}
 800f4ac:	6093      	str	r3, [r2, #8]
 800f4ae:	da08      	bge.n	800f4c2 <__sfputc_r+0x1e>
 800f4b0:	6994      	ldr	r4, [r2, #24]
 800f4b2:	42a3      	cmp	r3, r4
 800f4b4:	db01      	blt.n	800f4ba <__sfputc_r+0x16>
 800f4b6:	290a      	cmp	r1, #10
 800f4b8:	d103      	bne.n	800f4c2 <__sfputc_r+0x1e>
 800f4ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4be:	f000 bb33 	b.w	800fb28 <__swbuf_r>
 800f4c2:	6813      	ldr	r3, [r2, #0]
 800f4c4:	1c58      	adds	r0, r3, #1
 800f4c6:	6010      	str	r0, [r2, #0]
 800f4c8:	7019      	strb	r1, [r3, #0]
 800f4ca:	4608      	mov	r0, r1
 800f4cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4d0:	4770      	bx	lr

0800f4d2 <__sfputs_r>:
 800f4d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4d4:	4606      	mov	r6, r0
 800f4d6:	460f      	mov	r7, r1
 800f4d8:	4614      	mov	r4, r2
 800f4da:	18d5      	adds	r5, r2, r3
 800f4dc:	42ac      	cmp	r4, r5
 800f4de:	d101      	bne.n	800f4e4 <__sfputs_r+0x12>
 800f4e0:	2000      	movs	r0, #0
 800f4e2:	e007      	b.n	800f4f4 <__sfputs_r+0x22>
 800f4e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4e8:	463a      	mov	r2, r7
 800f4ea:	4630      	mov	r0, r6
 800f4ec:	f7ff ffda 	bl	800f4a4 <__sfputc_r>
 800f4f0:	1c43      	adds	r3, r0, #1
 800f4f2:	d1f3      	bne.n	800f4dc <__sfputs_r+0xa>
 800f4f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f4f8 <_vfiprintf_r>:
 800f4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4fc:	460d      	mov	r5, r1
 800f4fe:	b09d      	sub	sp, #116	; 0x74
 800f500:	4614      	mov	r4, r2
 800f502:	4698      	mov	r8, r3
 800f504:	4606      	mov	r6, r0
 800f506:	b118      	cbz	r0, 800f510 <_vfiprintf_r+0x18>
 800f508:	6983      	ldr	r3, [r0, #24]
 800f50a:	b90b      	cbnz	r3, 800f510 <_vfiprintf_r+0x18>
 800f50c:	f7ff fcd4 	bl	800eeb8 <__sinit>
 800f510:	4b89      	ldr	r3, [pc, #548]	; (800f738 <_vfiprintf_r+0x240>)
 800f512:	429d      	cmp	r5, r3
 800f514:	d11b      	bne.n	800f54e <_vfiprintf_r+0x56>
 800f516:	6875      	ldr	r5, [r6, #4]
 800f518:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f51a:	07d9      	lsls	r1, r3, #31
 800f51c:	d405      	bmi.n	800f52a <_vfiprintf_r+0x32>
 800f51e:	89ab      	ldrh	r3, [r5, #12]
 800f520:	059a      	lsls	r2, r3, #22
 800f522:	d402      	bmi.n	800f52a <_vfiprintf_r+0x32>
 800f524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f526:	f7ff fd77 	bl	800f018 <__retarget_lock_acquire_recursive>
 800f52a:	89ab      	ldrh	r3, [r5, #12]
 800f52c:	071b      	lsls	r3, r3, #28
 800f52e:	d501      	bpl.n	800f534 <_vfiprintf_r+0x3c>
 800f530:	692b      	ldr	r3, [r5, #16]
 800f532:	b9eb      	cbnz	r3, 800f570 <_vfiprintf_r+0x78>
 800f534:	4629      	mov	r1, r5
 800f536:	4630      	mov	r0, r6
 800f538:	f000 fb5a 	bl	800fbf0 <__swsetup_r>
 800f53c:	b1c0      	cbz	r0, 800f570 <_vfiprintf_r+0x78>
 800f53e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f540:	07dc      	lsls	r4, r3, #31
 800f542:	d50e      	bpl.n	800f562 <_vfiprintf_r+0x6a>
 800f544:	f04f 30ff 	mov.w	r0, #4294967295
 800f548:	b01d      	add	sp, #116	; 0x74
 800f54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f54e:	4b7b      	ldr	r3, [pc, #492]	; (800f73c <_vfiprintf_r+0x244>)
 800f550:	429d      	cmp	r5, r3
 800f552:	d101      	bne.n	800f558 <_vfiprintf_r+0x60>
 800f554:	68b5      	ldr	r5, [r6, #8]
 800f556:	e7df      	b.n	800f518 <_vfiprintf_r+0x20>
 800f558:	4b79      	ldr	r3, [pc, #484]	; (800f740 <_vfiprintf_r+0x248>)
 800f55a:	429d      	cmp	r5, r3
 800f55c:	bf08      	it	eq
 800f55e:	68f5      	ldreq	r5, [r6, #12]
 800f560:	e7da      	b.n	800f518 <_vfiprintf_r+0x20>
 800f562:	89ab      	ldrh	r3, [r5, #12]
 800f564:	0598      	lsls	r0, r3, #22
 800f566:	d4ed      	bmi.n	800f544 <_vfiprintf_r+0x4c>
 800f568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f56a:	f7ff fd56 	bl	800f01a <__retarget_lock_release_recursive>
 800f56e:	e7e9      	b.n	800f544 <_vfiprintf_r+0x4c>
 800f570:	2300      	movs	r3, #0
 800f572:	9309      	str	r3, [sp, #36]	; 0x24
 800f574:	2320      	movs	r3, #32
 800f576:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f57a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f57e:	2330      	movs	r3, #48	; 0x30
 800f580:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f744 <_vfiprintf_r+0x24c>
 800f584:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f588:	f04f 0901 	mov.w	r9, #1
 800f58c:	4623      	mov	r3, r4
 800f58e:	469a      	mov	sl, r3
 800f590:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f594:	b10a      	cbz	r2, 800f59a <_vfiprintf_r+0xa2>
 800f596:	2a25      	cmp	r2, #37	; 0x25
 800f598:	d1f9      	bne.n	800f58e <_vfiprintf_r+0x96>
 800f59a:	ebba 0b04 	subs.w	fp, sl, r4
 800f59e:	d00b      	beq.n	800f5b8 <_vfiprintf_r+0xc0>
 800f5a0:	465b      	mov	r3, fp
 800f5a2:	4622      	mov	r2, r4
 800f5a4:	4629      	mov	r1, r5
 800f5a6:	4630      	mov	r0, r6
 800f5a8:	f7ff ff93 	bl	800f4d2 <__sfputs_r>
 800f5ac:	3001      	adds	r0, #1
 800f5ae:	f000 80aa 	beq.w	800f706 <_vfiprintf_r+0x20e>
 800f5b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5b4:	445a      	add	r2, fp
 800f5b6:	9209      	str	r2, [sp, #36]	; 0x24
 800f5b8:	f89a 3000 	ldrb.w	r3, [sl]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	f000 80a2 	beq.w	800f706 <_vfiprintf_r+0x20e>
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800f5c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5cc:	f10a 0a01 	add.w	sl, sl, #1
 800f5d0:	9304      	str	r3, [sp, #16]
 800f5d2:	9307      	str	r3, [sp, #28]
 800f5d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f5d8:	931a      	str	r3, [sp, #104]	; 0x68
 800f5da:	4654      	mov	r4, sl
 800f5dc:	2205      	movs	r2, #5
 800f5de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5e2:	4858      	ldr	r0, [pc, #352]	; (800f744 <_vfiprintf_r+0x24c>)
 800f5e4:	f7f0 fdf4 	bl	80001d0 <memchr>
 800f5e8:	9a04      	ldr	r2, [sp, #16]
 800f5ea:	b9d8      	cbnz	r0, 800f624 <_vfiprintf_r+0x12c>
 800f5ec:	06d1      	lsls	r1, r2, #27
 800f5ee:	bf44      	itt	mi
 800f5f0:	2320      	movmi	r3, #32
 800f5f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5f6:	0713      	lsls	r3, r2, #28
 800f5f8:	bf44      	itt	mi
 800f5fa:	232b      	movmi	r3, #43	; 0x2b
 800f5fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f600:	f89a 3000 	ldrb.w	r3, [sl]
 800f604:	2b2a      	cmp	r3, #42	; 0x2a
 800f606:	d015      	beq.n	800f634 <_vfiprintf_r+0x13c>
 800f608:	9a07      	ldr	r2, [sp, #28]
 800f60a:	4654      	mov	r4, sl
 800f60c:	2000      	movs	r0, #0
 800f60e:	f04f 0c0a 	mov.w	ip, #10
 800f612:	4621      	mov	r1, r4
 800f614:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f618:	3b30      	subs	r3, #48	; 0x30
 800f61a:	2b09      	cmp	r3, #9
 800f61c:	d94e      	bls.n	800f6bc <_vfiprintf_r+0x1c4>
 800f61e:	b1b0      	cbz	r0, 800f64e <_vfiprintf_r+0x156>
 800f620:	9207      	str	r2, [sp, #28]
 800f622:	e014      	b.n	800f64e <_vfiprintf_r+0x156>
 800f624:	eba0 0308 	sub.w	r3, r0, r8
 800f628:	fa09 f303 	lsl.w	r3, r9, r3
 800f62c:	4313      	orrs	r3, r2
 800f62e:	9304      	str	r3, [sp, #16]
 800f630:	46a2      	mov	sl, r4
 800f632:	e7d2      	b.n	800f5da <_vfiprintf_r+0xe2>
 800f634:	9b03      	ldr	r3, [sp, #12]
 800f636:	1d19      	adds	r1, r3, #4
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	9103      	str	r1, [sp, #12]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	bfbb      	ittet	lt
 800f640:	425b      	neglt	r3, r3
 800f642:	f042 0202 	orrlt.w	r2, r2, #2
 800f646:	9307      	strge	r3, [sp, #28]
 800f648:	9307      	strlt	r3, [sp, #28]
 800f64a:	bfb8      	it	lt
 800f64c:	9204      	strlt	r2, [sp, #16]
 800f64e:	7823      	ldrb	r3, [r4, #0]
 800f650:	2b2e      	cmp	r3, #46	; 0x2e
 800f652:	d10c      	bne.n	800f66e <_vfiprintf_r+0x176>
 800f654:	7863      	ldrb	r3, [r4, #1]
 800f656:	2b2a      	cmp	r3, #42	; 0x2a
 800f658:	d135      	bne.n	800f6c6 <_vfiprintf_r+0x1ce>
 800f65a:	9b03      	ldr	r3, [sp, #12]
 800f65c:	1d1a      	adds	r2, r3, #4
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	9203      	str	r2, [sp, #12]
 800f662:	2b00      	cmp	r3, #0
 800f664:	bfb8      	it	lt
 800f666:	f04f 33ff 	movlt.w	r3, #4294967295
 800f66a:	3402      	adds	r4, #2
 800f66c:	9305      	str	r3, [sp, #20]
 800f66e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f754 <_vfiprintf_r+0x25c>
 800f672:	7821      	ldrb	r1, [r4, #0]
 800f674:	2203      	movs	r2, #3
 800f676:	4650      	mov	r0, sl
 800f678:	f7f0 fdaa 	bl	80001d0 <memchr>
 800f67c:	b140      	cbz	r0, 800f690 <_vfiprintf_r+0x198>
 800f67e:	2340      	movs	r3, #64	; 0x40
 800f680:	eba0 000a 	sub.w	r0, r0, sl
 800f684:	fa03 f000 	lsl.w	r0, r3, r0
 800f688:	9b04      	ldr	r3, [sp, #16]
 800f68a:	4303      	orrs	r3, r0
 800f68c:	3401      	adds	r4, #1
 800f68e:	9304      	str	r3, [sp, #16]
 800f690:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f694:	482c      	ldr	r0, [pc, #176]	; (800f748 <_vfiprintf_r+0x250>)
 800f696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f69a:	2206      	movs	r2, #6
 800f69c:	f7f0 fd98 	bl	80001d0 <memchr>
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	d03f      	beq.n	800f724 <_vfiprintf_r+0x22c>
 800f6a4:	4b29      	ldr	r3, [pc, #164]	; (800f74c <_vfiprintf_r+0x254>)
 800f6a6:	bb1b      	cbnz	r3, 800f6f0 <_vfiprintf_r+0x1f8>
 800f6a8:	9b03      	ldr	r3, [sp, #12]
 800f6aa:	3307      	adds	r3, #7
 800f6ac:	f023 0307 	bic.w	r3, r3, #7
 800f6b0:	3308      	adds	r3, #8
 800f6b2:	9303      	str	r3, [sp, #12]
 800f6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6b6:	443b      	add	r3, r7
 800f6b8:	9309      	str	r3, [sp, #36]	; 0x24
 800f6ba:	e767      	b.n	800f58c <_vfiprintf_r+0x94>
 800f6bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800f6c0:	460c      	mov	r4, r1
 800f6c2:	2001      	movs	r0, #1
 800f6c4:	e7a5      	b.n	800f612 <_vfiprintf_r+0x11a>
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	3401      	adds	r4, #1
 800f6ca:	9305      	str	r3, [sp, #20]
 800f6cc:	4619      	mov	r1, r3
 800f6ce:	f04f 0c0a 	mov.w	ip, #10
 800f6d2:	4620      	mov	r0, r4
 800f6d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6d8:	3a30      	subs	r2, #48	; 0x30
 800f6da:	2a09      	cmp	r2, #9
 800f6dc:	d903      	bls.n	800f6e6 <_vfiprintf_r+0x1ee>
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d0c5      	beq.n	800f66e <_vfiprintf_r+0x176>
 800f6e2:	9105      	str	r1, [sp, #20]
 800f6e4:	e7c3      	b.n	800f66e <_vfiprintf_r+0x176>
 800f6e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f6ea:	4604      	mov	r4, r0
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	e7f0      	b.n	800f6d2 <_vfiprintf_r+0x1da>
 800f6f0:	ab03      	add	r3, sp, #12
 800f6f2:	9300      	str	r3, [sp, #0]
 800f6f4:	462a      	mov	r2, r5
 800f6f6:	4b16      	ldr	r3, [pc, #88]	; (800f750 <_vfiprintf_r+0x258>)
 800f6f8:	a904      	add	r1, sp, #16
 800f6fa:	4630      	mov	r0, r6
 800f6fc:	f3af 8000 	nop.w
 800f700:	4607      	mov	r7, r0
 800f702:	1c78      	adds	r0, r7, #1
 800f704:	d1d6      	bne.n	800f6b4 <_vfiprintf_r+0x1bc>
 800f706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f708:	07d9      	lsls	r1, r3, #31
 800f70a:	d405      	bmi.n	800f718 <_vfiprintf_r+0x220>
 800f70c:	89ab      	ldrh	r3, [r5, #12]
 800f70e:	059a      	lsls	r2, r3, #22
 800f710:	d402      	bmi.n	800f718 <_vfiprintf_r+0x220>
 800f712:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f714:	f7ff fc81 	bl	800f01a <__retarget_lock_release_recursive>
 800f718:	89ab      	ldrh	r3, [r5, #12]
 800f71a:	065b      	lsls	r3, r3, #25
 800f71c:	f53f af12 	bmi.w	800f544 <_vfiprintf_r+0x4c>
 800f720:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f722:	e711      	b.n	800f548 <_vfiprintf_r+0x50>
 800f724:	ab03      	add	r3, sp, #12
 800f726:	9300      	str	r3, [sp, #0]
 800f728:	462a      	mov	r2, r5
 800f72a:	4b09      	ldr	r3, [pc, #36]	; (800f750 <_vfiprintf_r+0x258>)
 800f72c:	a904      	add	r1, sp, #16
 800f72e:	4630      	mov	r0, r6
 800f730:	f000 f880 	bl	800f834 <_printf_i>
 800f734:	e7e4      	b.n	800f700 <_vfiprintf_r+0x208>
 800f736:	bf00      	nop
 800f738:	08012e20 	.word	0x08012e20
 800f73c:	08012e40 	.word	0x08012e40
 800f740:	08012e00 	.word	0x08012e00
 800f744:	08012e60 	.word	0x08012e60
 800f748:	08012e6a 	.word	0x08012e6a
 800f74c:	00000000 	.word	0x00000000
 800f750:	0800f4d3 	.word	0x0800f4d3
 800f754:	08012e66 	.word	0x08012e66

0800f758 <_printf_common>:
 800f758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f75c:	4616      	mov	r6, r2
 800f75e:	4699      	mov	r9, r3
 800f760:	688a      	ldr	r2, [r1, #8]
 800f762:	690b      	ldr	r3, [r1, #16]
 800f764:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f768:	4293      	cmp	r3, r2
 800f76a:	bfb8      	it	lt
 800f76c:	4613      	movlt	r3, r2
 800f76e:	6033      	str	r3, [r6, #0]
 800f770:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f774:	4607      	mov	r7, r0
 800f776:	460c      	mov	r4, r1
 800f778:	b10a      	cbz	r2, 800f77e <_printf_common+0x26>
 800f77a:	3301      	adds	r3, #1
 800f77c:	6033      	str	r3, [r6, #0]
 800f77e:	6823      	ldr	r3, [r4, #0]
 800f780:	0699      	lsls	r1, r3, #26
 800f782:	bf42      	ittt	mi
 800f784:	6833      	ldrmi	r3, [r6, #0]
 800f786:	3302      	addmi	r3, #2
 800f788:	6033      	strmi	r3, [r6, #0]
 800f78a:	6825      	ldr	r5, [r4, #0]
 800f78c:	f015 0506 	ands.w	r5, r5, #6
 800f790:	d106      	bne.n	800f7a0 <_printf_common+0x48>
 800f792:	f104 0a19 	add.w	sl, r4, #25
 800f796:	68e3      	ldr	r3, [r4, #12]
 800f798:	6832      	ldr	r2, [r6, #0]
 800f79a:	1a9b      	subs	r3, r3, r2
 800f79c:	42ab      	cmp	r3, r5
 800f79e:	dc26      	bgt.n	800f7ee <_printf_common+0x96>
 800f7a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f7a4:	1e13      	subs	r3, r2, #0
 800f7a6:	6822      	ldr	r2, [r4, #0]
 800f7a8:	bf18      	it	ne
 800f7aa:	2301      	movne	r3, #1
 800f7ac:	0692      	lsls	r2, r2, #26
 800f7ae:	d42b      	bmi.n	800f808 <_printf_common+0xb0>
 800f7b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f7b4:	4649      	mov	r1, r9
 800f7b6:	4638      	mov	r0, r7
 800f7b8:	47c0      	blx	r8
 800f7ba:	3001      	adds	r0, #1
 800f7bc:	d01e      	beq.n	800f7fc <_printf_common+0xa4>
 800f7be:	6823      	ldr	r3, [r4, #0]
 800f7c0:	68e5      	ldr	r5, [r4, #12]
 800f7c2:	6832      	ldr	r2, [r6, #0]
 800f7c4:	f003 0306 	and.w	r3, r3, #6
 800f7c8:	2b04      	cmp	r3, #4
 800f7ca:	bf08      	it	eq
 800f7cc:	1aad      	subeq	r5, r5, r2
 800f7ce:	68a3      	ldr	r3, [r4, #8]
 800f7d0:	6922      	ldr	r2, [r4, #16]
 800f7d2:	bf0c      	ite	eq
 800f7d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f7d8:	2500      	movne	r5, #0
 800f7da:	4293      	cmp	r3, r2
 800f7dc:	bfc4      	itt	gt
 800f7de:	1a9b      	subgt	r3, r3, r2
 800f7e0:	18ed      	addgt	r5, r5, r3
 800f7e2:	2600      	movs	r6, #0
 800f7e4:	341a      	adds	r4, #26
 800f7e6:	42b5      	cmp	r5, r6
 800f7e8:	d11a      	bne.n	800f820 <_printf_common+0xc8>
 800f7ea:	2000      	movs	r0, #0
 800f7ec:	e008      	b.n	800f800 <_printf_common+0xa8>
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	4652      	mov	r2, sl
 800f7f2:	4649      	mov	r1, r9
 800f7f4:	4638      	mov	r0, r7
 800f7f6:	47c0      	blx	r8
 800f7f8:	3001      	adds	r0, #1
 800f7fa:	d103      	bne.n	800f804 <_printf_common+0xac>
 800f7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f804:	3501      	adds	r5, #1
 800f806:	e7c6      	b.n	800f796 <_printf_common+0x3e>
 800f808:	18e1      	adds	r1, r4, r3
 800f80a:	1c5a      	adds	r2, r3, #1
 800f80c:	2030      	movs	r0, #48	; 0x30
 800f80e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f812:	4422      	add	r2, r4
 800f814:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f818:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f81c:	3302      	adds	r3, #2
 800f81e:	e7c7      	b.n	800f7b0 <_printf_common+0x58>
 800f820:	2301      	movs	r3, #1
 800f822:	4622      	mov	r2, r4
 800f824:	4649      	mov	r1, r9
 800f826:	4638      	mov	r0, r7
 800f828:	47c0      	blx	r8
 800f82a:	3001      	adds	r0, #1
 800f82c:	d0e6      	beq.n	800f7fc <_printf_common+0xa4>
 800f82e:	3601      	adds	r6, #1
 800f830:	e7d9      	b.n	800f7e6 <_printf_common+0x8e>
	...

0800f834 <_printf_i>:
 800f834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f838:	7e0f      	ldrb	r7, [r1, #24]
 800f83a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f83c:	2f78      	cmp	r7, #120	; 0x78
 800f83e:	4691      	mov	r9, r2
 800f840:	4680      	mov	r8, r0
 800f842:	460c      	mov	r4, r1
 800f844:	469a      	mov	sl, r3
 800f846:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f84a:	d807      	bhi.n	800f85c <_printf_i+0x28>
 800f84c:	2f62      	cmp	r7, #98	; 0x62
 800f84e:	d80a      	bhi.n	800f866 <_printf_i+0x32>
 800f850:	2f00      	cmp	r7, #0
 800f852:	f000 80d8 	beq.w	800fa06 <_printf_i+0x1d2>
 800f856:	2f58      	cmp	r7, #88	; 0x58
 800f858:	f000 80a3 	beq.w	800f9a2 <_printf_i+0x16e>
 800f85c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f860:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f864:	e03a      	b.n	800f8dc <_printf_i+0xa8>
 800f866:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f86a:	2b15      	cmp	r3, #21
 800f86c:	d8f6      	bhi.n	800f85c <_printf_i+0x28>
 800f86e:	a101      	add	r1, pc, #4	; (adr r1, 800f874 <_printf_i+0x40>)
 800f870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f874:	0800f8cd 	.word	0x0800f8cd
 800f878:	0800f8e1 	.word	0x0800f8e1
 800f87c:	0800f85d 	.word	0x0800f85d
 800f880:	0800f85d 	.word	0x0800f85d
 800f884:	0800f85d 	.word	0x0800f85d
 800f888:	0800f85d 	.word	0x0800f85d
 800f88c:	0800f8e1 	.word	0x0800f8e1
 800f890:	0800f85d 	.word	0x0800f85d
 800f894:	0800f85d 	.word	0x0800f85d
 800f898:	0800f85d 	.word	0x0800f85d
 800f89c:	0800f85d 	.word	0x0800f85d
 800f8a0:	0800f9ed 	.word	0x0800f9ed
 800f8a4:	0800f911 	.word	0x0800f911
 800f8a8:	0800f9cf 	.word	0x0800f9cf
 800f8ac:	0800f85d 	.word	0x0800f85d
 800f8b0:	0800f85d 	.word	0x0800f85d
 800f8b4:	0800fa0f 	.word	0x0800fa0f
 800f8b8:	0800f85d 	.word	0x0800f85d
 800f8bc:	0800f911 	.word	0x0800f911
 800f8c0:	0800f85d 	.word	0x0800f85d
 800f8c4:	0800f85d 	.word	0x0800f85d
 800f8c8:	0800f9d7 	.word	0x0800f9d7
 800f8cc:	682b      	ldr	r3, [r5, #0]
 800f8ce:	1d1a      	adds	r2, r3, #4
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	602a      	str	r2, [r5, #0]
 800f8d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f8d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f8dc:	2301      	movs	r3, #1
 800f8de:	e0a3      	b.n	800fa28 <_printf_i+0x1f4>
 800f8e0:	6820      	ldr	r0, [r4, #0]
 800f8e2:	6829      	ldr	r1, [r5, #0]
 800f8e4:	0606      	lsls	r6, r0, #24
 800f8e6:	f101 0304 	add.w	r3, r1, #4
 800f8ea:	d50a      	bpl.n	800f902 <_printf_i+0xce>
 800f8ec:	680e      	ldr	r6, [r1, #0]
 800f8ee:	602b      	str	r3, [r5, #0]
 800f8f0:	2e00      	cmp	r6, #0
 800f8f2:	da03      	bge.n	800f8fc <_printf_i+0xc8>
 800f8f4:	232d      	movs	r3, #45	; 0x2d
 800f8f6:	4276      	negs	r6, r6
 800f8f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8fc:	485e      	ldr	r0, [pc, #376]	; (800fa78 <_printf_i+0x244>)
 800f8fe:	230a      	movs	r3, #10
 800f900:	e019      	b.n	800f936 <_printf_i+0x102>
 800f902:	680e      	ldr	r6, [r1, #0]
 800f904:	602b      	str	r3, [r5, #0]
 800f906:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f90a:	bf18      	it	ne
 800f90c:	b236      	sxthne	r6, r6
 800f90e:	e7ef      	b.n	800f8f0 <_printf_i+0xbc>
 800f910:	682b      	ldr	r3, [r5, #0]
 800f912:	6820      	ldr	r0, [r4, #0]
 800f914:	1d19      	adds	r1, r3, #4
 800f916:	6029      	str	r1, [r5, #0]
 800f918:	0601      	lsls	r1, r0, #24
 800f91a:	d501      	bpl.n	800f920 <_printf_i+0xec>
 800f91c:	681e      	ldr	r6, [r3, #0]
 800f91e:	e002      	b.n	800f926 <_printf_i+0xf2>
 800f920:	0646      	lsls	r6, r0, #25
 800f922:	d5fb      	bpl.n	800f91c <_printf_i+0xe8>
 800f924:	881e      	ldrh	r6, [r3, #0]
 800f926:	4854      	ldr	r0, [pc, #336]	; (800fa78 <_printf_i+0x244>)
 800f928:	2f6f      	cmp	r7, #111	; 0x6f
 800f92a:	bf0c      	ite	eq
 800f92c:	2308      	moveq	r3, #8
 800f92e:	230a      	movne	r3, #10
 800f930:	2100      	movs	r1, #0
 800f932:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f936:	6865      	ldr	r5, [r4, #4]
 800f938:	60a5      	str	r5, [r4, #8]
 800f93a:	2d00      	cmp	r5, #0
 800f93c:	bfa2      	ittt	ge
 800f93e:	6821      	ldrge	r1, [r4, #0]
 800f940:	f021 0104 	bicge.w	r1, r1, #4
 800f944:	6021      	strge	r1, [r4, #0]
 800f946:	b90e      	cbnz	r6, 800f94c <_printf_i+0x118>
 800f948:	2d00      	cmp	r5, #0
 800f94a:	d04d      	beq.n	800f9e8 <_printf_i+0x1b4>
 800f94c:	4615      	mov	r5, r2
 800f94e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f952:	fb03 6711 	mls	r7, r3, r1, r6
 800f956:	5dc7      	ldrb	r7, [r0, r7]
 800f958:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f95c:	4637      	mov	r7, r6
 800f95e:	42bb      	cmp	r3, r7
 800f960:	460e      	mov	r6, r1
 800f962:	d9f4      	bls.n	800f94e <_printf_i+0x11a>
 800f964:	2b08      	cmp	r3, #8
 800f966:	d10b      	bne.n	800f980 <_printf_i+0x14c>
 800f968:	6823      	ldr	r3, [r4, #0]
 800f96a:	07de      	lsls	r6, r3, #31
 800f96c:	d508      	bpl.n	800f980 <_printf_i+0x14c>
 800f96e:	6923      	ldr	r3, [r4, #16]
 800f970:	6861      	ldr	r1, [r4, #4]
 800f972:	4299      	cmp	r1, r3
 800f974:	bfde      	ittt	le
 800f976:	2330      	movle	r3, #48	; 0x30
 800f978:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f97c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f980:	1b52      	subs	r2, r2, r5
 800f982:	6122      	str	r2, [r4, #16]
 800f984:	f8cd a000 	str.w	sl, [sp]
 800f988:	464b      	mov	r3, r9
 800f98a:	aa03      	add	r2, sp, #12
 800f98c:	4621      	mov	r1, r4
 800f98e:	4640      	mov	r0, r8
 800f990:	f7ff fee2 	bl	800f758 <_printf_common>
 800f994:	3001      	adds	r0, #1
 800f996:	d14c      	bne.n	800fa32 <_printf_i+0x1fe>
 800f998:	f04f 30ff 	mov.w	r0, #4294967295
 800f99c:	b004      	add	sp, #16
 800f99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9a2:	4835      	ldr	r0, [pc, #212]	; (800fa78 <_printf_i+0x244>)
 800f9a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f9a8:	6829      	ldr	r1, [r5, #0]
 800f9aa:	6823      	ldr	r3, [r4, #0]
 800f9ac:	f851 6b04 	ldr.w	r6, [r1], #4
 800f9b0:	6029      	str	r1, [r5, #0]
 800f9b2:	061d      	lsls	r5, r3, #24
 800f9b4:	d514      	bpl.n	800f9e0 <_printf_i+0x1ac>
 800f9b6:	07df      	lsls	r7, r3, #31
 800f9b8:	bf44      	itt	mi
 800f9ba:	f043 0320 	orrmi.w	r3, r3, #32
 800f9be:	6023      	strmi	r3, [r4, #0]
 800f9c0:	b91e      	cbnz	r6, 800f9ca <_printf_i+0x196>
 800f9c2:	6823      	ldr	r3, [r4, #0]
 800f9c4:	f023 0320 	bic.w	r3, r3, #32
 800f9c8:	6023      	str	r3, [r4, #0]
 800f9ca:	2310      	movs	r3, #16
 800f9cc:	e7b0      	b.n	800f930 <_printf_i+0xfc>
 800f9ce:	6823      	ldr	r3, [r4, #0]
 800f9d0:	f043 0320 	orr.w	r3, r3, #32
 800f9d4:	6023      	str	r3, [r4, #0]
 800f9d6:	2378      	movs	r3, #120	; 0x78
 800f9d8:	4828      	ldr	r0, [pc, #160]	; (800fa7c <_printf_i+0x248>)
 800f9da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f9de:	e7e3      	b.n	800f9a8 <_printf_i+0x174>
 800f9e0:	0659      	lsls	r1, r3, #25
 800f9e2:	bf48      	it	mi
 800f9e4:	b2b6      	uxthmi	r6, r6
 800f9e6:	e7e6      	b.n	800f9b6 <_printf_i+0x182>
 800f9e8:	4615      	mov	r5, r2
 800f9ea:	e7bb      	b.n	800f964 <_printf_i+0x130>
 800f9ec:	682b      	ldr	r3, [r5, #0]
 800f9ee:	6826      	ldr	r6, [r4, #0]
 800f9f0:	6961      	ldr	r1, [r4, #20]
 800f9f2:	1d18      	adds	r0, r3, #4
 800f9f4:	6028      	str	r0, [r5, #0]
 800f9f6:	0635      	lsls	r5, r6, #24
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	d501      	bpl.n	800fa00 <_printf_i+0x1cc>
 800f9fc:	6019      	str	r1, [r3, #0]
 800f9fe:	e002      	b.n	800fa06 <_printf_i+0x1d2>
 800fa00:	0670      	lsls	r0, r6, #25
 800fa02:	d5fb      	bpl.n	800f9fc <_printf_i+0x1c8>
 800fa04:	8019      	strh	r1, [r3, #0]
 800fa06:	2300      	movs	r3, #0
 800fa08:	6123      	str	r3, [r4, #16]
 800fa0a:	4615      	mov	r5, r2
 800fa0c:	e7ba      	b.n	800f984 <_printf_i+0x150>
 800fa0e:	682b      	ldr	r3, [r5, #0]
 800fa10:	1d1a      	adds	r2, r3, #4
 800fa12:	602a      	str	r2, [r5, #0]
 800fa14:	681d      	ldr	r5, [r3, #0]
 800fa16:	6862      	ldr	r2, [r4, #4]
 800fa18:	2100      	movs	r1, #0
 800fa1a:	4628      	mov	r0, r5
 800fa1c:	f7f0 fbd8 	bl	80001d0 <memchr>
 800fa20:	b108      	cbz	r0, 800fa26 <_printf_i+0x1f2>
 800fa22:	1b40      	subs	r0, r0, r5
 800fa24:	6060      	str	r0, [r4, #4]
 800fa26:	6863      	ldr	r3, [r4, #4]
 800fa28:	6123      	str	r3, [r4, #16]
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa30:	e7a8      	b.n	800f984 <_printf_i+0x150>
 800fa32:	6923      	ldr	r3, [r4, #16]
 800fa34:	462a      	mov	r2, r5
 800fa36:	4649      	mov	r1, r9
 800fa38:	4640      	mov	r0, r8
 800fa3a:	47d0      	blx	sl
 800fa3c:	3001      	adds	r0, #1
 800fa3e:	d0ab      	beq.n	800f998 <_printf_i+0x164>
 800fa40:	6823      	ldr	r3, [r4, #0]
 800fa42:	079b      	lsls	r3, r3, #30
 800fa44:	d413      	bmi.n	800fa6e <_printf_i+0x23a>
 800fa46:	68e0      	ldr	r0, [r4, #12]
 800fa48:	9b03      	ldr	r3, [sp, #12]
 800fa4a:	4298      	cmp	r0, r3
 800fa4c:	bfb8      	it	lt
 800fa4e:	4618      	movlt	r0, r3
 800fa50:	e7a4      	b.n	800f99c <_printf_i+0x168>
 800fa52:	2301      	movs	r3, #1
 800fa54:	4632      	mov	r2, r6
 800fa56:	4649      	mov	r1, r9
 800fa58:	4640      	mov	r0, r8
 800fa5a:	47d0      	blx	sl
 800fa5c:	3001      	adds	r0, #1
 800fa5e:	d09b      	beq.n	800f998 <_printf_i+0x164>
 800fa60:	3501      	adds	r5, #1
 800fa62:	68e3      	ldr	r3, [r4, #12]
 800fa64:	9903      	ldr	r1, [sp, #12]
 800fa66:	1a5b      	subs	r3, r3, r1
 800fa68:	42ab      	cmp	r3, r5
 800fa6a:	dcf2      	bgt.n	800fa52 <_printf_i+0x21e>
 800fa6c:	e7eb      	b.n	800fa46 <_printf_i+0x212>
 800fa6e:	2500      	movs	r5, #0
 800fa70:	f104 0619 	add.w	r6, r4, #25
 800fa74:	e7f5      	b.n	800fa62 <_printf_i+0x22e>
 800fa76:	bf00      	nop
 800fa78:	08012e71 	.word	0x08012e71
 800fa7c:	08012e82 	.word	0x08012e82

0800fa80 <_sbrk_r>:
 800fa80:	b538      	push	{r3, r4, r5, lr}
 800fa82:	4d06      	ldr	r5, [pc, #24]	; (800fa9c <_sbrk_r+0x1c>)
 800fa84:	2300      	movs	r3, #0
 800fa86:	4604      	mov	r4, r0
 800fa88:	4608      	mov	r0, r1
 800fa8a:	602b      	str	r3, [r5, #0]
 800fa8c:	f7f1 f91c 	bl	8000cc8 <_sbrk>
 800fa90:	1c43      	adds	r3, r0, #1
 800fa92:	d102      	bne.n	800fa9a <_sbrk_r+0x1a>
 800fa94:	682b      	ldr	r3, [r5, #0]
 800fa96:	b103      	cbz	r3, 800fa9a <_sbrk_r+0x1a>
 800fa98:	6023      	str	r3, [r4, #0]
 800fa9a:	bd38      	pop	{r3, r4, r5, pc}
 800fa9c:	20008484 	.word	0x20008484

0800faa0 <__sread>:
 800faa0:	b510      	push	{r4, lr}
 800faa2:	460c      	mov	r4, r1
 800faa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faa8:	f000 fa9e 	bl	800ffe8 <_read_r>
 800faac:	2800      	cmp	r0, #0
 800faae:	bfab      	itete	ge
 800fab0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fab2:	89a3      	ldrhlt	r3, [r4, #12]
 800fab4:	181b      	addge	r3, r3, r0
 800fab6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800faba:	bfac      	ite	ge
 800fabc:	6563      	strge	r3, [r4, #84]	; 0x54
 800fabe:	81a3      	strhlt	r3, [r4, #12]
 800fac0:	bd10      	pop	{r4, pc}

0800fac2 <__swrite>:
 800fac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fac6:	461f      	mov	r7, r3
 800fac8:	898b      	ldrh	r3, [r1, #12]
 800faca:	05db      	lsls	r3, r3, #23
 800facc:	4605      	mov	r5, r0
 800face:	460c      	mov	r4, r1
 800fad0:	4616      	mov	r6, r2
 800fad2:	d505      	bpl.n	800fae0 <__swrite+0x1e>
 800fad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fad8:	2302      	movs	r3, #2
 800fada:	2200      	movs	r2, #0
 800fadc:	f000 f9d0 	bl	800fe80 <_lseek_r>
 800fae0:	89a3      	ldrh	r3, [r4, #12]
 800fae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fae6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800faea:	81a3      	strh	r3, [r4, #12]
 800faec:	4632      	mov	r2, r6
 800faee:	463b      	mov	r3, r7
 800faf0:	4628      	mov	r0, r5
 800faf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800faf6:	f000 b869 	b.w	800fbcc <_write_r>

0800fafa <__sseek>:
 800fafa:	b510      	push	{r4, lr}
 800fafc:	460c      	mov	r4, r1
 800fafe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb02:	f000 f9bd 	bl	800fe80 <_lseek_r>
 800fb06:	1c43      	adds	r3, r0, #1
 800fb08:	89a3      	ldrh	r3, [r4, #12]
 800fb0a:	bf15      	itete	ne
 800fb0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800fb0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fb12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fb16:	81a3      	strheq	r3, [r4, #12]
 800fb18:	bf18      	it	ne
 800fb1a:	81a3      	strhne	r3, [r4, #12]
 800fb1c:	bd10      	pop	{r4, pc}

0800fb1e <__sclose>:
 800fb1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb22:	f000 b8db 	b.w	800fcdc <_close_r>
	...

0800fb28 <__swbuf_r>:
 800fb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb2a:	460e      	mov	r6, r1
 800fb2c:	4614      	mov	r4, r2
 800fb2e:	4605      	mov	r5, r0
 800fb30:	b118      	cbz	r0, 800fb3a <__swbuf_r+0x12>
 800fb32:	6983      	ldr	r3, [r0, #24]
 800fb34:	b90b      	cbnz	r3, 800fb3a <__swbuf_r+0x12>
 800fb36:	f7ff f9bf 	bl	800eeb8 <__sinit>
 800fb3a:	4b21      	ldr	r3, [pc, #132]	; (800fbc0 <__swbuf_r+0x98>)
 800fb3c:	429c      	cmp	r4, r3
 800fb3e:	d12b      	bne.n	800fb98 <__swbuf_r+0x70>
 800fb40:	686c      	ldr	r4, [r5, #4]
 800fb42:	69a3      	ldr	r3, [r4, #24]
 800fb44:	60a3      	str	r3, [r4, #8]
 800fb46:	89a3      	ldrh	r3, [r4, #12]
 800fb48:	071a      	lsls	r2, r3, #28
 800fb4a:	d52f      	bpl.n	800fbac <__swbuf_r+0x84>
 800fb4c:	6923      	ldr	r3, [r4, #16]
 800fb4e:	b36b      	cbz	r3, 800fbac <__swbuf_r+0x84>
 800fb50:	6923      	ldr	r3, [r4, #16]
 800fb52:	6820      	ldr	r0, [r4, #0]
 800fb54:	1ac0      	subs	r0, r0, r3
 800fb56:	6963      	ldr	r3, [r4, #20]
 800fb58:	b2f6      	uxtb	r6, r6
 800fb5a:	4283      	cmp	r3, r0
 800fb5c:	4637      	mov	r7, r6
 800fb5e:	dc04      	bgt.n	800fb6a <__swbuf_r+0x42>
 800fb60:	4621      	mov	r1, r4
 800fb62:	4628      	mov	r0, r5
 800fb64:	f000 f950 	bl	800fe08 <_fflush_r>
 800fb68:	bb30      	cbnz	r0, 800fbb8 <__swbuf_r+0x90>
 800fb6a:	68a3      	ldr	r3, [r4, #8]
 800fb6c:	3b01      	subs	r3, #1
 800fb6e:	60a3      	str	r3, [r4, #8]
 800fb70:	6823      	ldr	r3, [r4, #0]
 800fb72:	1c5a      	adds	r2, r3, #1
 800fb74:	6022      	str	r2, [r4, #0]
 800fb76:	701e      	strb	r6, [r3, #0]
 800fb78:	6963      	ldr	r3, [r4, #20]
 800fb7a:	3001      	adds	r0, #1
 800fb7c:	4283      	cmp	r3, r0
 800fb7e:	d004      	beq.n	800fb8a <__swbuf_r+0x62>
 800fb80:	89a3      	ldrh	r3, [r4, #12]
 800fb82:	07db      	lsls	r3, r3, #31
 800fb84:	d506      	bpl.n	800fb94 <__swbuf_r+0x6c>
 800fb86:	2e0a      	cmp	r6, #10
 800fb88:	d104      	bne.n	800fb94 <__swbuf_r+0x6c>
 800fb8a:	4621      	mov	r1, r4
 800fb8c:	4628      	mov	r0, r5
 800fb8e:	f000 f93b 	bl	800fe08 <_fflush_r>
 800fb92:	b988      	cbnz	r0, 800fbb8 <__swbuf_r+0x90>
 800fb94:	4638      	mov	r0, r7
 800fb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb98:	4b0a      	ldr	r3, [pc, #40]	; (800fbc4 <__swbuf_r+0x9c>)
 800fb9a:	429c      	cmp	r4, r3
 800fb9c:	d101      	bne.n	800fba2 <__swbuf_r+0x7a>
 800fb9e:	68ac      	ldr	r4, [r5, #8]
 800fba0:	e7cf      	b.n	800fb42 <__swbuf_r+0x1a>
 800fba2:	4b09      	ldr	r3, [pc, #36]	; (800fbc8 <__swbuf_r+0xa0>)
 800fba4:	429c      	cmp	r4, r3
 800fba6:	bf08      	it	eq
 800fba8:	68ec      	ldreq	r4, [r5, #12]
 800fbaa:	e7ca      	b.n	800fb42 <__swbuf_r+0x1a>
 800fbac:	4621      	mov	r1, r4
 800fbae:	4628      	mov	r0, r5
 800fbb0:	f000 f81e 	bl	800fbf0 <__swsetup_r>
 800fbb4:	2800      	cmp	r0, #0
 800fbb6:	d0cb      	beq.n	800fb50 <__swbuf_r+0x28>
 800fbb8:	f04f 37ff 	mov.w	r7, #4294967295
 800fbbc:	e7ea      	b.n	800fb94 <__swbuf_r+0x6c>
 800fbbe:	bf00      	nop
 800fbc0:	08012e20 	.word	0x08012e20
 800fbc4:	08012e40 	.word	0x08012e40
 800fbc8:	08012e00 	.word	0x08012e00

0800fbcc <_write_r>:
 800fbcc:	b538      	push	{r3, r4, r5, lr}
 800fbce:	4d07      	ldr	r5, [pc, #28]	; (800fbec <_write_r+0x20>)
 800fbd0:	4604      	mov	r4, r0
 800fbd2:	4608      	mov	r0, r1
 800fbd4:	4611      	mov	r1, r2
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	602a      	str	r2, [r5, #0]
 800fbda:	461a      	mov	r2, r3
 800fbdc:	f7f1 f823 	bl	8000c26 <_write>
 800fbe0:	1c43      	adds	r3, r0, #1
 800fbe2:	d102      	bne.n	800fbea <_write_r+0x1e>
 800fbe4:	682b      	ldr	r3, [r5, #0]
 800fbe6:	b103      	cbz	r3, 800fbea <_write_r+0x1e>
 800fbe8:	6023      	str	r3, [r4, #0]
 800fbea:	bd38      	pop	{r3, r4, r5, pc}
 800fbec:	20008484 	.word	0x20008484

0800fbf0 <__swsetup_r>:
 800fbf0:	4b32      	ldr	r3, [pc, #200]	; (800fcbc <__swsetup_r+0xcc>)
 800fbf2:	b570      	push	{r4, r5, r6, lr}
 800fbf4:	681d      	ldr	r5, [r3, #0]
 800fbf6:	4606      	mov	r6, r0
 800fbf8:	460c      	mov	r4, r1
 800fbfa:	b125      	cbz	r5, 800fc06 <__swsetup_r+0x16>
 800fbfc:	69ab      	ldr	r3, [r5, #24]
 800fbfe:	b913      	cbnz	r3, 800fc06 <__swsetup_r+0x16>
 800fc00:	4628      	mov	r0, r5
 800fc02:	f7ff f959 	bl	800eeb8 <__sinit>
 800fc06:	4b2e      	ldr	r3, [pc, #184]	; (800fcc0 <__swsetup_r+0xd0>)
 800fc08:	429c      	cmp	r4, r3
 800fc0a:	d10f      	bne.n	800fc2c <__swsetup_r+0x3c>
 800fc0c:	686c      	ldr	r4, [r5, #4]
 800fc0e:	89a3      	ldrh	r3, [r4, #12]
 800fc10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fc14:	0719      	lsls	r1, r3, #28
 800fc16:	d42c      	bmi.n	800fc72 <__swsetup_r+0x82>
 800fc18:	06dd      	lsls	r5, r3, #27
 800fc1a:	d411      	bmi.n	800fc40 <__swsetup_r+0x50>
 800fc1c:	2309      	movs	r3, #9
 800fc1e:	6033      	str	r3, [r6, #0]
 800fc20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fc24:	81a3      	strh	r3, [r4, #12]
 800fc26:	f04f 30ff 	mov.w	r0, #4294967295
 800fc2a:	e03e      	b.n	800fcaa <__swsetup_r+0xba>
 800fc2c:	4b25      	ldr	r3, [pc, #148]	; (800fcc4 <__swsetup_r+0xd4>)
 800fc2e:	429c      	cmp	r4, r3
 800fc30:	d101      	bne.n	800fc36 <__swsetup_r+0x46>
 800fc32:	68ac      	ldr	r4, [r5, #8]
 800fc34:	e7eb      	b.n	800fc0e <__swsetup_r+0x1e>
 800fc36:	4b24      	ldr	r3, [pc, #144]	; (800fcc8 <__swsetup_r+0xd8>)
 800fc38:	429c      	cmp	r4, r3
 800fc3a:	bf08      	it	eq
 800fc3c:	68ec      	ldreq	r4, [r5, #12]
 800fc3e:	e7e6      	b.n	800fc0e <__swsetup_r+0x1e>
 800fc40:	0758      	lsls	r0, r3, #29
 800fc42:	d512      	bpl.n	800fc6a <__swsetup_r+0x7a>
 800fc44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc46:	b141      	cbz	r1, 800fc5a <__swsetup_r+0x6a>
 800fc48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc4c:	4299      	cmp	r1, r3
 800fc4e:	d002      	beq.n	800fc56 <__swsetup_r+0x66>
 800fc50:	4630      	mov	r0, r6
 800fc52:	f7ff f9eb 	bl	800f02c <_free_r>
 800fc56:	2300      	movs	r3, #0
 800fc58:	6363      	str	r3, [r4, #52]	; 0x34
 800fc5a:	89a3      	ldrh	r3, [r4, #12]
 800fc5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fc60:	81a3      	strh	r3, [r4, #12]
 800fc62:	2300      	movs	r3, #0
 800fc64:	6063      	str	r3, [r4, #4]
 800fc66:	6923      	ldr	r3, [r4, #16]
 800fc68:	6023      	str	r3, [r4, #0]
 800fc6a:	89a3      	ldrh	r3, [r4, #12]
 800fc6c:	f043 0308 	orr.w	r3, r3, #8
 800fc70:	81a3      	strh	r3, [r4, #12]
 800fc72:	6923      	ldr	r3, [r4, #16]
 800fc74:	b94b      	cbnz	r3, 800fc8a <__swsetup_r+0x9a>
 800fc76:	89a3      	ldrh	r3, [r4, #12]
 800fc78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fc7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc80:	d003      	beq.n	800fc8a <__swsetup_r+0x9a>
 800fc82:	4621      	mov	r1, r4
 800fc84:	4630      	mov	r0, r6
 800fc86:	f000 f933 	bl	800fef0 <__smakebuf_r>
 800fc8a:	89a0      	ldrh	r0, [r4, #12]
 800fc8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fc90:	f010 0301 	ands.w	r3, r0, #1
 800fc94:	d00a      	beq.n	800fcac <__swsetup_r+0xbc>
 800fc96:	2300      	movs	r3, #0
 800fc98:	60a3      	str	r3, [r4, #8]
 800fc9a:	6963      	ldr	r3, [r4, #20]
 800fc9c:	425b      	negs	r3, r3
 800fc9e:	61a3      	str	r3, [r4, #24]
 800fca0:	6923      	ldr	r3, [r4, #16]
 800fca2:	b943      	cbnz	r3, 800fcb6 <__swsetup_r+0xc6>
 800fca4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fca8:	d1ba      	bne.n	800fc20 <__swsetup_r+0x30>
 800fcaa:	bd70      	pop	{r4, r5, r6, pc}
 800fcac:	0781      	lsls	r1, r0, #30
 800fcae:	bf58      	it	pl
 800fcb0:	6963      	ldrpl	r3, [r4, #20]
 800fcb2:	60a3      	str	r3, [r4, #8]
 800fcb4:	e7f4      	b.n	800fca0 <__swsetup_r+0xb0>
 800fcb6:	2000      	movs	r0, #0
 800fcb8:	e7f7      	b.n	800fcaa <__swsetup_r+0xba>
 800fcba:	bf00      	nop
 800fcbc:	2000002c 	.word	0x2000002c
 800fcc0:	08012e20 	.word	0x08012e20
 800fcc4:	08012e40 	.word	0x08012e40
 800fcc8:	08012e00 	.word	0x08012e00

0800fccc <abort>:
 800fccc:	b508      	push	{r3, lr}
 800fcce:	2006      	movs	r0, #6
 800fcd0:	f000 f9c4 	bl	801005c <raise>
 800fcd4:	2001      	movs	r0, #1
 800fcd6:	f7f0 ff7f 	bl	8000bd8 <_exit>
	...

0800fcdc <_close_r>:
 800fcdc:	b538      	push	{r3, r4, r5, lr}
 800fcde:	4d06      	ldr	r5, [pc, #24]	; (800fcf8 <_close_r+0x1c>)
 800fce0:	2300      	movs	r3, #0
 800fce2:	4604      	mov	r4, r0
 800fce4:	4608      	mov	r0, r1
 800fce6:	602b      	str	r3, [r5, #0]
 800fce8:	f7f0 ffb9 	bl	8000c5e <_close>
 800fcec:	1c43      	adds	r3, r0, #1
 800fcee:	d102      	bne.n	800fcf6 <_close_r+0x1a>
 800fcf0:	682b      	ldr	r3, [r5, #0]
 800fcf2:	b103      	cbz	r3, 800fcf6 <_close_r+0x1a>
 800fcf4:	6023      	str	r3, [r4, #0]
 800fcf6:	bd38      	pop	{r3, r4, r5, pc}
 800fcf8:	20008484 	.word	0x20008484

0800fcfc <__sflush_r>:
 800fcfc:	898a      	ldrh	r2, [r1, #12]
 800fcfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd02:	4605      	mov	r5, r0
 800fd04:	0710      	lsls	r0, r2, #28
 800fd06:	460c      	mov	r4, r1
 800fd08:	d458      	bmi.n	800fdbc <__sflush_r+0xc0>
 800fd0a:	684b      	ldr	r3, [r1, #4]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	dc05      	bgt.n	800fd1c <__sflush_r+0x20>
 800fd10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	dc02      	bgt.n	800fd1c <__sflush_r+0x20>
 800fd16:	2000      	movs	r0, #0
 800fd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd1e:	2e00      	cmp	r6, #0
 800fd20:	d0f9      	beq.n	800fd16 <__sflush_r+0x1a>
 800fd22:	2300      	movs	r3, #0
 800fd24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fd28:	682f      	ldr	r7, [r5, #0]
 800fd2a:	602b      	str	r3, [r5, #0]
 800fd2c:	d032      	beq.n	800fd94 <__sflush_r+0x98>
 800fd2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fd30:	89a3      	ldrh	r3, [r4, #12]
 800fd32:	075a      	lsls	r2, r3, #29
 800fd34:	d505      	bpl.n	800fd42 <__sflush_r+0x46>
 800fd36:	6863      	ldr	r3, [r4, #4]
 800fd38:	1ac0      	subs	r0, r0, r3
 800fd3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fd3c:	b10b      	cbz	r3, 800fd42 <__sflush_r+0x46>
 800fd3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd40:	1ac0      	subs	r0, r0, r3
 800fd42:	2300      	movs	r3, #0
 800fd44:	4602      	mov	r2, r0
 800fd46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd48:	6a21      	ldr	r1, [r4, #32]
 800fd4a:	4628      	mov	r0, r5
 800fd4c:	47b0      	blx	r6
 800fd4e:	1c43      	adds	r3, r0, #1
 800fd50:	89a3      	ldrh	r3, [r4, #12]
 800fd52:	d106      	bne.n	800fd62 <__sflush_r+0x66>
 800fd54:	6829      	ldr	r1, [r5, #0]
 800fd56:	291d      	cmp	r1, #29
 800fd58:	d82c      	bhi.n	800fdb4 <__sflush_r+0xb8>
 800fd5a:	4a2a      	ldr	r2, [pc, #168]	; (800fe04 <__sflush_r+0x108>)
 800fd5c:	40ca      	lsrs	r2, r1
 800fd5e:	07d6      	lsls	r6, r2, #31
 800fd60:	d528      	bpl.n	800fdb4 <__sflush_r+0xb8>
 800fd62:	2200      	movs	r2, #0
 800fd64:	6062      	str	r2, [r4, #4]
 800fd66:	04d9      	lsls	r1, r3, #19
 800fd68:	6922      	ldr	r2, [r4, #16]
 800fd6a:	6022      	str	r2, [r4, #0]
 800fd6c:	d504      	bpl.n	800fd78 <__sflush_r+0x7c>
 800fd6e:	1c42      	adds	r2, r0, #1
 800fd70:	d101      	bne.n	800fd76 <__sflush_r+0x7a>
 800fd72:	682b      	ldr	r3, [r5, #0]
 800fd74:	b903      	cbnz	r3, 800fd78 <__sflush_r+0x7c>
 800fd76:	6560      	str	r0, [r4, #84]	; 0x54
 800fd78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd7a:	602f      	str	r7, [r5, #0]
 800fd7c:	2900      	cmp	r1, #0
 800fd7e:	d0ca      	beq.n	800fd16 <__sflush_r+0x1a>
 800fd80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd84:	4299      	cmp	r1, r3
 800fd86:	d002      	beq.n	800fd8e <__sflush_r+0x92>
 800fd88:	4628      	mov	r0, r5
 800fd8a:	f7ff f94f 	bl	800f02c <_free_r>
 800fd8e:	2000      	movs	r0, #0
 800fd90:	6360      	str	r0, [r4, #52]	; 0x34
 800fd92:	e7c1      	b.n	800fd18 <__sflush_r+0x1c>
 800fd94:	6a21      	ldr	r1, [r4, #32]
 800fd96:	2301      	movs	r3, #1
 800fd98:	4628      	mov	r0, r5
 800fd9a:	47b0      	blx	r6
 800fd9c:	1c41      	adds	r1, r0, #1
 800fd9e:	d1c7      	bne.n	800fd30 <__sflush_r+0x34>
 800fda0:	682b      	ldr	r3, [r5, #0]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d0c4      	beq.n	800fd30 <__sflush_r+0x34>
 800fda6:	2b1d      	cmp	r3, #29
 800fda8:	d001      	beq.n	800fdae <__sflush_r+0xb2>
 800fdaa:	2b16      	cmp	r3, #22
 800fdac:	d101      	bne.n	800fdb2 <__sflush_r+0xb6>
 800fdae:	602f      	str	r7, [r5, #0]
 800fdb0:	e7b1      	b.n	800fd16 <__sflush_r+0x1a>
 800fdb2:	89a3      	ldrh	r3, [r4, #12]
 800fdb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdb8:	81a3      	strh	r3, [r4, #12]
 800fdba:	e7ad      	b.n	800fd18 <__sflush_r+0x1c>
 800fdbc:	690f      	ldr	r7, [r1, #16]
 800fdbe:	2f00      	cmp	r7, #0
 800fdc0:	d0a9      	beq.n	800fd16 <__sflush_r+0x1a>
 800fdc2:	0793      	lsls	r3, r2, #30
 800fdc4:	680e      	ldr	r6, [r1, #0]
 800fdc6:	bf08      	it	eq
 800fdc8:	694b      	ldreq	r3, [r1, #20]
 800fdca:	600f      	str	r7, [r1, #0]
 800fdcc:	bf18      	it	ne
 800fdce:	2300      	movne	r3, #0
 800fdd0:	eba6 0807 	sub.w	r8, r6, r7
 800fdd4:	608b      	str	r3, [r1, #8]
 800fdd6:	f1b8 0f00 	cmp.w	r8, #0
 800fdda:	dd9c      	ble.n	800fd16 <__sflush_r+0x1a>
 800fddc:	6a21      	ldr	r1, [r4, #32]
 800fdde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fde0:	4643      	mov	r3, r8
 800fde2:	463a      	mov	r2, r7
 800fde4:	4628      	mov	r0, r5
 800fde6:	47b0      	blx	r6
 800fde8:	2800      	cmp	r0, #0
 800fdea:	dc06      	bgt.n	800fdfa <__sflush_r+0xfe>
 800fdec:	89a3      	ldrh	r3, [r4, #12]
 800fdee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdf2:	81a3      	strh	r3, [r4, #12]
 800fdf4:	f04f 30ff 	mov.w	r0, #4294967295
 800fdf8:	e78e      	b.n	800fd18 <__sflush_r+0x1c>
 800fdfa:	4407      	add	r7, r0
 800fdfc:	eba8 0800 	sub.w	r8, r8, r0
 800fe00:	e7e9      	b.n	800fdd6 <__sflush_r+0xda>
 800fe02:	bf00      	nop
 800fe04:	20400001 	.word	0x20400001

0800fe08 <_fflush_r>:
 800fe08:	b538      	push	{r3, r4, r5, lr}
 800fe0a:	690b      	ldr	r3, [r1, #16]
 800fe0c:	4605      	mov	r5, r0
 800fe0e:	460c      	mov	r4, r1
 800fe10:	b913      	cbnz	r3, 800fe18 <_fflush_r+0x10>
 800fe12:	2500      	movs	r5, #0
 800fe14:	4628      	mov	r0, r5
 800fe16:	bd38      	pop	{r3, r4, r5, pc}
 800fe18:	b118      	cbz	r0, 800fe22 <_fflush_r+0x1a>
 800fe1a:	6983      	ldr	r3, [r0, #24]
 800fe1c:	b90b      	cbnz	r3, 800fe22 <_fflush_r+0x1a>
 800fe1e:	f7ff f84b 	bl	800eeb8 <__sinit>
 800fe22:	4b14      	ldr	r3, [pc, #80]	; (800fe74 <_fflush_r+0x6c>)
 800fe24:	429c      	cmp	r4, r3
 800fe26:	d11b      	bne.n	800fe60 <_fflush_r+0x58>
 800fe28:	686c      	ldr	r4, [r5, #4]
 800fe2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d0ef      	beq.n	800fe12 <_fflush_r+0xa>
 800fe32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fe34:	07d0      	lsls	r0, r2, #31
 800fe36:	d404      	bmi.n	800fe42 <_fflush_r+0x3a>
 800fe38:	0599      	lsls	r1, r3, #22
 800fe3a:	d402      	bmi.n	800fe42 <_fflush_r+0x3a>
 800fe3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe3e:	f7ff f8eb 	bl	800f018 <__retarget_lock_acquire_recursive>
 800fe42:	4628      	mov	r0, r5
 800fe44:	4621      	mov	r1, r4
 800fe46:	f7ff ff59 	bl	800fcfc <__sflush_r>
 800fe4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe4c:	07da      	lsls	r2, r3, #31
 800fe4e:	4605      	mov	r5, r0
 800fe50:	d4e0      	bmi.n	800fe14 <_fflush_r+0xc>
 800fe52:	89a3      	ldrh	r3, [r4, #12]
 800fe54:	059b      	lsls	r3, r3, #22
 800fe56:	d4dd      	bmi.n	800fe14 <_fflush_r+0xc>
 800fe58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe5a:	f7ff f8de 	bl	800f01a <__retarget_lock_release_recursive>
 800fe5e:	e7d9      	b.n	800fe14 <_fflush_r+0xc>
 800fe60:	4b05      	ldr	r3, [pc, #20]	; (800fe78 <_fflush_r+0x70>)
 800fe62:	429c      	cmp	r4, r3
 800fe64:	d101      	bne.n	800fe6a <_fflush_r+0x62>
 800fe66:	68ac      	ldr	r4, [r5, #8]
 800fe68:	e7df      	b.n	800fe2a <_fflush_r+0x22>
 800fe6a:	4b04      	ldr	r3, [pc, #16]	; (800fe7c <_fflush_r+0x74>)
 800fe6c:	429c      	cmp	r4, r3
 800fe6e:	bf08      	it	eq
 800fe70:	68ec      	ldreq	r4, [r5, #12]
 800fe72:	e7da      	b.n	800fe2a <_fflush_r+0x22>
 800fe74:	08012e20 	.word	0x08012e20
 800fe78:	08012e40 	.word	0x08012e40
 800fe7c:	08012e00 	.word	0x08012e00

0800fe80 <_lseek_r>:
 800fe80:	b538      	push	{r3, r4, r5, lr}
 800fe82:	4d07      	ldr	r5, [pc, #28]	; (800fea0 <_lseek_r+0x20>)
 800fe84:	4604      	mov	r4, r0
 800fe86:	4608      	mov	r0, r1
 800fe88:	4611      	mov	r1, r2
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	602a      	str	r2, [r5, #0]
 800fe8e:	461a      	mov	r2, r3
 800fe90:	f7f0 ff0c 	bl	8000cac <_lseek>
 800fe94:	1c43      	adds	r3, r0, #1
 800fe96:	d102      	bne.n	800fe9e <_lseek_r+0x1e>
 800fe98:	682b      	ldr	r3, [r5, #0]
 800fe9a:	b103      	cbz	r3, 800fe9e <_lseek_r+0x1e>
 800fe9c:	6023      	str	r3, [r4, #0]
 800fe9e:	bd38      	pop	{r3, r4, r5, pc}
 800fea0:	20008484 	.word	0x20008484

0800fea4 <__swhatbuf_r>:
 800fea4:	b570      	push	{r4, r5, r6, lr}
 800fea6:	460e      	mov	r6, r1
 800fea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feac:	2900      	cmp	r1, #0
 800feae:	b096      	sub	sp, #88	; 0x58
 800feb0:	4614      	mov	r4, r2
 800feb2:	461d      	mov	r5, r3
 800feb4:	da08      	bge.n	800fec8 <__swhatbuf_r+0x24>
 800feb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800feba:	2200      	movs	r2, #0
 800febc:	602a      	str	r2, [r5, #0]
 800febe:	061a      	lsls	r2, r3, #24
 800fec0:	d410      	bmi.n	800fee4 <__swhatbuf_r+0x40>
 800fec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fec6:	e00e      	b.n	800fee6 <__swhatbuf_r+0x42>
 800fec8:	466a      	mov	r2, sp
 800feca:	f000 f8e3 	bl	8010094 <_fstat_r>
 800fece:	2800      	cmp	r0, #0
 800fed0:	dbf1      	blt.n	800feb6 <__swhatbuf_r+0x12>
 800fed2:	9a01      	ldr	r2, [sp, #4]
 800fed4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fed8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fedc:	425a      	negs	r2, r3
 800fede:	415a      	adcs	r2, r3
 800fee0:	602a      	str	r2, [r5, #0]
 800fee2:	e7ee      	b.n	800fec2 <__swhatbuf_r+0x1e>
 800fee4:	2340      	movs	r3, #64	; 0x40
 800fee6:	2000      	movs	r0, #0
 800fee8:	6023      	str	r3, [r4, #0]
 800feea:	b016      	add	sp, #88	; 0x58
 800feec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fef0 <__smakebuf_r>:
 800fef0:	898b      	ldrh	r3, [r1, #12]
 800fef2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fef4:	079d      	lsls	r5, r3, #30
 800fef6:	4606      	mov	r6, r0
 800fef8:	460c      	mov	r4, r1
 800fefa:	d507      	bpl.n	800ff0c <__smakebuf_r+0x1c>
 800fefc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ff00:	6023      	str	r3, [r4, #0]
 800ff02:	6123      	str	r3, [r4, #16]
 800ff04:	2301      	movs	r3, #1
 800ff06:	6163      	str	r3, [r4, #20]
 800ff08:	b002      	add	sp, #8
 800ff0a:	bd70      	pop	{r4, r5, r6, pc}
 800ff0c:	ab01      	add	r3, sp, #4
 800ff0e:	466a      	mov	r2, sp
 800ff10:	f7ff ffc8 	bl	800fea4 <__swhatbuf_r>
 800ff14:	9900      	ldr	r1, [sp, #0]
 800ff16:	4605      	mov	r5, r0
 800ff18:	4630      	mov	r0, r6
 800ff1a:	f7ff f8f3 	bl	800f104 <_malloc_r>
 800ff1e:	b948      	cbnz	r0, 800ff34 <__smakebuf_r+0x44>
 800ff20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff24:	059a      	lsls	r2, r3, #22
 800ff26:	d4ef      	bmi.n	800ff08 <__smakebuf_r+0x18>
 800ff28:	f023 0303 	bic.w	r3, r3, #3
 800ff2c:	f043 0302 	orr.w	r3, r3, #2
 800ff30:	81a3      	strh	r3, [r4, #12]
 800ff32:	e7e3      	b.n	800fefc <__smakebuf_r+0xc>
 800ff34:	4b0d      	ldr	r3, [pc, #52]	; (800ff6c <__smakebuf_r+0x7c>)
 800ff36:	62b3      	str	r3, [r6, #40]	; 0x28
 800ff38:	89a3      	ldrh	r3, [r4, #12]
 800ff3a:	6020      	str	r0, [r4, #0]
 800ff3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff40:	81a3      	strh	r3, [r4, #12]
 800ff42:	9b00      	ldr	r3, [sp, #0]
 800ff44:	6163      	str	r3, [r4, #20]
 800ff46:	9b01      	ldr	r3, [sp, #4]
 800ff48:	6120      	str	r0, [r4, #16]
 800ff4a:	b15b      	cbz	r3, 800ff64 <__smakebuf_r+0x74>
 800ff4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff50:	4630      	mov	r0, r6
 800ff52:	f000 f8b1 	bl	80100b8 <_isatty_r>
 800ff56:	b128      	cbz	r0, 800ff64 <__smakebuf_r+0x74>
 800ff58:	89a3      	ldrh	r3, [r4, #12]
 800ff5a:	f023 0303 	bic.w	r3, r3, #3
 800ff5e:	f043 0301 	orr.w	r3, r3, #1
 800ff62:	81a3      	strh	r3, [r4, #12]
 800ff64:	89a0      	ldrh	r0, [r4, #12]
 800ff66:	4305      	orrs	r5, r0
 800ff68:	81a5      	strh	r5, [r4, #12]
 800ff6a:	e7cd      	b.n	800ff08 <__smakebuf_r+0x18>
 800ff6c:	0800ee51 	.word	0x0800ee51

0800ff70 <__malloc_lock>:
 800ff70:	4801      	ldr	r0, [pc, #4]	; (800ff78 <__malloc_lock+0x8>)
 800ff72:	f7ff b851 	b.w	800f018 <__retarget_lock_acquire_recursive>
 800ff76:	bf00      	nop
 800ff78:	20008488 	.word	0x20008488

0800ff7c <__malloc_unlock>:
 800ff7c:	4801      	ldr	r0, [pc, #4]	; (800ff84 <__malloc_unlock+0x8>)
 800ff7e:	f7ff b84c 	b.w	800f01a <__retarget_lock_release_recursive>
 800ff82:	bf00      	nop
 800ff84:	20008488 	.word	0x20008488

0800ff88 <_realloc_r>:
 800ff88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff8c:	4680      	mov	r8, r0
 800ff8e:	4614      	mov	r4, r2
 800ff90:	460e      	mov	r6, r1
 800ff92:	b921      	cbnz	r1, 800ff9e <_realloc_r+0x16>
 800ff94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff98:	4611      	mov	r1, r2
 800ff9a:	f7ff b8b3 	b.w	800f104 <_malloc_r>
 800ff9e:	b92a      	cbnz	r2, 800ffac <_realloc_r+0x24>
 800ffa0:	f7ff f844 	bl	800f02c <_free_r>
 800ffa4:	4625      	mov	r5, r4
 800ffa6:	4628      	mov	r0, r5
 800ffa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffac:	f000 f894 	bl	80100d8 <_malloc_usable_size_r>
 800ffb0:	4284      	cmp	r4, r0
 800ffb2:	4607      	mov	r7, r0
 800ffb4:	d802      	bhi.n	800ffbc <_realloc_r+0x34>
 800ffb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ffba:	d812      	bhi.n	800ffe2 <_realloc_r+0x5a>
 800ffbc:	4621      	mov	r1, r4
 800ffbe:	4640      	mov	r0, r8
 800ffc0:	f7ff f8a0 	bl	800f104 <_malloc_r>
 800ffc4:	4605      	mov	r5, r0
 800ffc6:	2800      	cmp	r0, #0
 800ffc8:	d0ed      	beq.n	800ffa6 <_realloc_r+0x1e>
 800ffca:	42bc      	cmp	r4, r7
 800ffcc:	4622      	mov	r2, r4
 800ffce:	4631      	mov	r1, r6
 800ffd0:	bf28      	it	cs
 800ffd2:	463a      	movcs	r2, r7
 800ffd4:	f7fe fe54 	bl	800ec80 <memcpy>
 800ffd8:	4631      	mov	r1, r6
 800ffda:	4640      	mov	r0, r8
 800ffdc:	f7ff f826 	bl	800f02c <_free_r>
 800ffe0:	e7e1      	b.n	800ffa6 <_realloc_r+0x1e>
 800ffe2:	4635      	mov	r5, r6
 800ffe4:	e7df      	b.n	800ffa6 <_realloc_r+0x1e>
	...

0800ffe8 <_read_r>:
 800ffe8:	b538      	push	{r3, r4, r5, lr}
 800ffea:	4d07      	ldr	r5, [pc, #28]	; (8010008 <_read_r+0x20>)
 800ffec:	4604      	mov	r4, r0
 800ffee:	4608      	mov	r0, r1
 800fff0:	4611      	mov	r1, r2
 800fff2:	2200      	movs	r2, #0
 800fff4:	602a      	str	r2, [r5, #0]
 800fff6:	461a      	mov	r2, r3
 800fff8:	f7f0 fdf8 	bl	8000bec <_read>
 800fffc:	1c43      	adds	r3, r0, #1
 800fffe:	d102      	bne.n	8010006 <_read_r+0x1e>
 8010000:	682b      	ldr	r3, [r5, #0]
 8010002:	b103      	cbz	r3, 8010006 <_read_r+0x1e>
 8010004:	6023      	str	r3, [r4, #0]
 8010006:	bd38      	pop	{r3, r4, r5, pc}
 8010008:	20008484 	.word	0x20008484

0801000c <_raise_r>:
 801000c:	291f      	cmp	r1, #31
 801000e:	b538      	push	{r3, r4, r5, lr}
 8010010:	4604      	mov	r4, r0
 8010012:	460d      	mov	r5, r1
 8010014:	d904      	bls.n	8010020 <_raise_r+0x14>
 8010016:	2316      	movs	r3, #22
 8010018:	6003      	str	r3, [r0, #0]
 801001a:	f04f 30ff 	mov.w	r0, #4294967295
 801001e:	bd38      	pop	{r3, r4, r5, pc}
 8010020:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010022:	b112      	cbz	r2, 801002a <_raise_r+0x1e>
 8010024:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010028:	b94b      	cbnz	r3, 801003e <_raise_r+0x32>
 801002a:	4620      	mov	r0, r4
 801002c:	f000 f830 	bl	8010090 <_getpid_r>
 8010030:	462a      	mov	r2, r5
 8010032:	4601      	mov	r1, r0
 8010034:	4620      	mov	r0, r4
 8010036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801003a:	f000 b817 	b.w	801006c <_kill_r>
 801003e:	2b01      	cmp	r3, #1
 8010040:	d00a      	beq.n	8010058 <_raise_r+0x4c>
 8010042:	1c59      	adds	r1, r3, #1
 8010044:	d103      	bne.n	801004e <_raise_r+0x42>
 8010046:	2316      	movs	r3, #22
 8010048:	6003      	str	r3, [r0, #0]
 801004a:	2001      	movs	r0, #1
 801004c:	e7e7      	b.n	801001e <_raise_r+0x12>
 801004e:	2400      	movs	r4, #0
 8010050:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010054:	4628      	mov	r0, r5
 8010056:	4798      	blx	r3
 8010058:	2000      	movs	r0, #0
 801005a:	e7e0      	b.n	801001e <_raise_r+0x12>

0801005c <raise>:
 801005c:	4b02      	ldr	r3, [pc, #8]	; (8010068 <raise+0xc>)
 801005e:	4601      	mov	r1, r0
 8010060:	6818      	ldr	r0, [r3, #0]
 8010062:	f7ff bfd3 	b.w	801000c <_raise_r>
 8010066:	bf00      	nop
 8010068:	2000002c 	.word	0x2000002c

0801006c <_kill_r>:
 801006c:	b538      	push	{r3, r4, r5, lr}
 801006e:	4d07      	ldr	r5, [pc, #28]	; (801008c <_kill_r+0x20>)
 8010070:	2300      	movs	r3, #0
 8010072:	4604      	mov	r4, r0
 8010074:	4608      	mov	r0, r1
 8010076:	4611      	mov	r1, r2
 8010078:	602b      	str	r3, [r5, #0]
 801007a:	f7f0 fd9b 	bl	8000bb4 <_kill>
 801007e:	1c43      	adds	r3, r0, #1
 8010080:	d102      	bne.n	8010088 <_kill_r+0x1c>
 8010082:	682b      	ldr	r3, [r5, #0]
 8010084:	b103      	cbz	r3, 8010088 <_kill_r+0x1c>
 8010086:	6023      	str	r3, [r4, #0]
 8010088:	bd38      	pop	{r3, r4, r5, pc}
 801008a:	bf00      	nop
 801008c:	20008484 	.word	0x20008484

08010090 <_getpid_r>:
 8010090:	f7f0 bd88 	b.w	8000ba4 <_getpid>

08010094 <_fstat_r>:
 8010094:	b538      	push	{r3, r4, r5, lr}
 8010096:	4d07      	ldr	r5, [pc, #28]	; (80100b4 <_fstat_r+0x20>)
 8010098:	2300      	movs	r3, #0
 801009a:	4604      	mov	r4, r0
 801009c:	4608      	mov	r0, r1
 801009e:	4611      	mov	r1, r2
 80100a0:	602b      	str	r3, [r5, #0]
 80100a2:	f7f0 fde8 	bl	8000c76 <_fstat>
 80100a6:	1c43      	adds	r3, r0, #1
 80100a8:	d102      	bne.n	80100b0 <_fstat_r+0x1c>
 80100aa:	682b      	ldr	r3, [r5, #0]
 80100ac:	b103      	cbz	r3, 80100b0 <_fstat_r+0x1c>
 80100ae:	6023      	str	r3, [r4, #0]
 80100b0:	bd38      	pop	{r3, r4, r5, pc}
 80100b2:	bf00      	nop
 80100b4:	20008484 	.word	0x20008484

080100b8 <_isatty_r>:
 80100b8:	b538      	push	{r3, r4, r5, lr}
 80100ba:	4d06      	ldr	r5, [pc, #24]	; (80100d4 <_isatty_r+0x1c>)
 80100bc:	2300      	movs	r3, #0
 80100be:	4604      	mov	r4, r0
 80100c0:	4608      	mov	r0, r1
 80100c2:	602b      	str	r3, [r5, #0]
 80100c4:	f7f0 fde7 	bl	8000c96 <_isatty>
 80100c8:	1c43      	adds	r3, r0, #1
 80100ca:	d102      	bne.n	80100d2 <_isatty_r+0x1a>
 80100cc:	682b      	ldr	r3, [r5, #0]
 80100ce:	b103      	cbz	r3, 80100d2 <_isatty_r+0x1a>
 80100d0:	6023      	str	r3, [r4, #0]
 80100d2:	bd38      	pop	{r3, r4, r5, pc}
 80100d4:	20008484 	.word	0x20008484

080100d8 <_malloc_usable_size_r>:
 80100d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100dc:	1f18      	subs	r0, r3, #4
 80100de:	2b00      	cmp	r3, #0
 80100e0:	bfbc      	itt	lt
 80100e2:	580b      	ldrlt	r3, [r1, r0]
 80100e4:	18c0      	addlt	r0, r0, r3
 80100e6:	4770      	bx	lr

080100e8 <_init>:
 80100e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ea:	bf00      	nop
 80100ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100ee:	bc08      	pop	{r3}
 80100f0:	469e      	mov	lr, r3
 80100f2:	4770      	bx	lr

080100f4 <_fini>:
 80100f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100f6:	bf00      	nop
 80100f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100fa:	bc08      	pop	{r3}
 80100fc:	469e      	mov	lr, r3
 80100fe:	4770      	bx	lr
