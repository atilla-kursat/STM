
ethernet_api.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010460  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002da0  080105f0  080105f0  000205f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013390  08013390  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08013390  08013390  00023390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013398  08013398  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013398  08013398  00023398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801339c  0801339c  0002339c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080133a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          00008494  20000090  20000090  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008524  20008524  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f50d  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053ce  00000000  00000000  0004f5cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d8  00000000  00000000  000549a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001708  00000000  00000000  00056178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dd34  00000000  00000000  00057880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026196  00000000  00000000  000855b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1b00  00000000  00000000  000ab74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018d24a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c70  00000000  00000000  0018d29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080105d8 	.word	0x080105d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080105d8 	.word	0x080105d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <udpClient_connect>:
static struct raw_pcb *ping_pcb;
u32_t ping_time;
u32_t ping_seq_num;
struct pbuf *buf;

void udpClient_connect(){
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0

	err_t err;
	upcb = udp_new();
 800057a:	f00c fa07 	bl	800c98c <udp_new>
 800057e:	4603      	mov	r3, r0
 8000580:	4a11      	ldr	r2, [pc, #68]	; (80005c8 <udpClient_connect+0x54>)
 8000582:	6013      	str	r3, [r2, #0]
	udp_bind(upcb, &myIP, 8);
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <udpClient_connect+0x54>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2208      	movs	r2, #8
 800058a:	4910      	ldr	r1, [pc, #64]	; (80005cc <udpClient_connect+0x58>)
 800058c:	4618      	mov	r0, r3
 800058e:	f00c f8e7 	bl	800c760 <udp_bind>
	err = udp_connect(upcb, &destIP,7);
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <udpClient_connect+0x54>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2207      	movs	r2, #7
 8000598:	490d      	ldr	r1, [pc, #52]	; (80005d0 <udpClient_connect+0x5c>)
 800059a:	4618      	mov	r0, r3
 800059c:	f00c f968 	bl	800c870 <udp_connect>
 80005a0:	4603      	mov	r3, r0
 80005a2:	71fb      	strb	r3, [r7, #7]
	if(err == ERR_OK){
 80005a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d108      	bne.n	80005be <udpClient_connect+0x4a>
		udpClient_send();
 80005ac:	f000 f814 	bl	80005d8 <udpClient_send>
		udp_recv(upcb, udp_receive_callback, NULL);
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <udpClient_connect+0x54>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2200      	movs	r2, #0
 80005b6:	4907      	ldr	r1, [pc, #28]	; (80005d4 <udpClient_connect+0x60>)
 80005b8:	4618      	mov	r0, r3
 80005ba:	f00c f9c7 	bl	800c94c <udp_recv>
	}


}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000f8 	.word	0x200000f8
 80005cc:	20000174 	.word	0x20000174
 80005d0:	20000178 	.word	0x20000178
 80005d4:	0800063d 	.word	0x0800063d

080005d8 <udpClient_send>:

void udpClient_connect_to(){

}

void udpClient_send(){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b09c      	sub	sp, #112	; 0x70
 80005dc:	af00      	add	r7, sp, #0
	struct pbuf *txBuf;
	char data[100];
	int len = sprintf(data,"Sent ping Count is %d \n Reply Count is",counter);
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <udpClient_send+0x58>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	4913      	ldr	r1, [pc, #76]	; (8000634 <udpClient_send+0x5c>)
 80005e8:	4618      	mov	r0, r3
 80005ea:	f00e fe33 	bl	800f254 <siprintf>
 80005ee:	66f8      	str	r0, [r7, #108]	; 0x6c
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 80005f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80005f8:	4619      	mov	r1, r3
 80005fa:	2036      	movs	r0, #54	; 0x36
 80005fc:	f005 fa22 	bl	8005a44 <pbuf_alloc>
 8000600:	66b8      	str	r0, [r7, #104]	; 0x68

	if(txBuf != NULL){
 8000602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000604:	2b00      	cmp	r3, #0
 8000606:	d00f      	beq.n	8000628 <udpClient_send+0x50>
		pbuf_take(txBuf,data,len);
 8000608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800060a:	b29a      	uxth	r2, r3
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	4619      	mov	r1, r3
 8000610:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000612:	f005 ff79 	bl	8006508 <pbuf_take>
		udp_send(upcb,txBuf);
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <udpClient_send+0x60>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800061c:	4618      	mov	r0, r3
 800061e:	f00b feb5 	bl	800c38c <udp_send>
		pbuf_free(txBuf);
 8000622:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000624:	f005 fd04 	bl	8006030 <pbuf_free>
	}


}
 8000628:	bf00      	nop
 800062a:	3770      	adds	r7, #112	; 0x70
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200000f4 	.word	0x200000f4
 8000634:	080105f0 	.word	0x080105f0
 8000638:	200000f8 	.word	0x200000f8

0800063c <udp_receive_callback>:

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port){
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
 8000648:	603b      	str	r3, [r7, #0]

	sprintf(incoming_ip,"%s",ipaddr_ntoa(((const ip_addr_t *)&addr->addr)));
 800064a:	6838      	ldr	r0, [r7, #0]
 800064c:	f00d fda4 	bl	800e198 <ip4addr_ntoa>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	4947      	ldr	r1, [pc, #284]	; (8000774 <udp_receive_callback+0x138>)
 8000656:	4848      	ldr	r0, [pc, #288]	; (8000778 <udp_receive_callback+0x13c>)
 8000658:	f00e fdfc 	bl	800f254 <siprintf>
	strncpy (buffer, (char *)p->payload, p->len);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6859      	ldr	r1, [r3, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	895b      	ldrh	r3, [r3, #10]
 8000664:	461a      	mov	r2, r3
 8000666:	4845      	ldr	r0, [pc, #276]	; (800077c <udp_receive_callback+0x140>)
 8000668:	f00e fe14 	bl	800f294 <strncpy>
	counter++;
 800066c:	4b44      	ldr	r3, [pc, #272]	; (8000780 <udp_receive_callback+0x144>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	3301      	adds	r3, #1
 8000672:	b2da      	uxtb	r2, r3
 8000674:	4b42      	ldr	r3, [pc, #264]	; (8000780 <udp_receive_callback+0x144>)
 8000676:	701a      	strb	r2, [r3, #0]
	switch (buffer[0]){
 8000678:	4b40      	ldr	r3, [pc, #256]	; (800077c <udp_receive_callback+0x140>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	3b02      	subs	r3, #2
 800067e:	2b03      	cmp	r3, #3
 8000680:	d870      	bhi.n	8000764 <udp_receive_callback+0x128>
 8000682:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <udp_receive_callback+0x4c>)
 8000684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000688:	08000699 	.word	0x08000699
 800068c:	08000765 	.word	0x08000765
 8000690:	080006b7 	.word	0x080006b7
 8000694:	08000765 	.word	0x08000765

	case 2:
		ping_raw_init();
 8000698:	f000 f950 	bl	800093c <ping_raw_init>
		ping_send_now();
 800069c:	f000 f886 	bl	80007ac <ping_send_now>
		ping_recv(0, ping_pcb, buf, &destIP);
 80006a0:	4b38      	ldr	r3, [pc, #224]	; (8000784 <udp_receive_callback+0x148>)
 80006a2:	6819      	ldr	r1, [r3, #0]
 80006a4:	4b38      	ldr	r3, [pc, #224]	; (8000788 <udp_receive_callback+0x14c>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b38      	ldr	r3, [pc, #224]	; (800078c <udp_receive_callback+0x150>)
 80006aa:	2000      	movs	r0, #0
 80006ac:	f000 f96a 	bl	8000984 <ping_recv>
		udpClient_connect();
 80006b0:	f7ff ff60 	bl	8000574 <udpClient_connect>
		break;
 80006b4:	e056      	b.n	8000764 <udp_receive_callback+0x128>
	case 3:

		break;

	case 4:
		IP_ADDR4(&custdestIP,buffer[1],buffer[2],buffer[3],buffer[4]);
 80006b6:	4b31      	ldr	r3, [pc, #196]	; (800077c <udp_receive_callback+0x140>)
 80006b8:	785b      	ldrb	r3, [r3, #1]
 80006ba:	061a      	lsls	r2, r3, #24
 80006bc:	4b2f      	ldr	r3, [pc, #188]	; (800077c <udp_receive_callback+0x140>)
 80006be:	789b      	ldrb	r3, [r3, #2]
 80006c0:	041b      	lsls	r3, r3, #16
 80006c2:	431a      	orrs	r2, r3
 80006c4:	4b2d      	ldr	r3, [pc, #180]	; (800077c <udp_receive_callback+0x140>)
 80006c6:	78db      	ldrb	r3, [r3, #3]
 80006c8:	021b      	lsls	r3, r3, #8
 80006ca:	4313      	orrs	r3, r2
 80006cc:	4a2b      	ldr	r2, [pc, #172]	; (800077c <udp_receive_callback+0x140>)
 80006ce:	7912      	ldrb	r2, [r2, #4]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	061a      	lsls	r2, r3, #24
 80006d4:	4b29      	ldr	r3, [pc, #164]	; (800077c <udp_receive_callback+0x140>)
 80006d6:	785b      	ldrb	r3, [r3, #1]
 80006d8:	0619      	lsls	r1, r3, #24
 80006da:	4b28      	ldr	r3, [pc, #160]	; (800077c <udp_receive_callback+0x140>)
 80006dc:	789b      	ldrb	r3, [r3, #2]
 80006de:	041b      	lsls	r3, r3, #16
 80006e0:	4319      	orrs	r1, r3
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <udp_receive_callback+0x140>)
 80006e4:	78db      	ldrb	r3, [r3, #3]
 80006e6:	021b      	lsls	r3, r3, #8
 80006e8:	430b      	orrs	r3, r1
 80006ea:	4924      	ldr	r1, [pc, #144]	; (800077c <udp_receive_callback+0x140>)
 80006ec:	7909      	ldrb	r1, [r1, #4]
 80006ee:	430b      	orrs	r3, r1
 80006f0:	021b      	lsls	r3, r3, #8
 80006f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4b20      	ldr	r3, [pc, #128]	; (800077c <udp_receive_callback+0x140>)
 80006fa:	785b      	ldrb	r3, [r3, #1]
 80006fc:	0619      	lsls	r1, r3, #24
 80006fe:	4b1f      	ldr	r3, [pc, #124]	; (800077c <udp_receive_callback+0x140>)
 8000700:	789b      	ldrb	r3, [r3, #2]
 8000702:	041b      	lsls	r3, r3, #16
 8000704:	4319      	orrs	r1, r3
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <udp_receive_callback+0x140>)
 8000708:	78db      	ldrb	r3, [r3, #3]
 800070a:	021b      	lsls	r3, r3, #8
 800070c:	430b      	orrs	r3, r1
 800070e:	491b      	ldr	r1, [pc, #108]	; (800077c <udp_receive_callback+0x140>)
 8000710:	7909      	ldrb	r1, [r1, #4]
 8000712:	430b      	orrs	r3, r1
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800071a:	431a      	orrs	r2, r3
 800071c:	4b17      	ldr	r3, [pc, #92]	; (800077c <udp_receive_callback+0x140>)
 800071e:	785b      	ldrb	r3, [r3, #1]
 8000720:	0619      	lsls	r1, r3, #24
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <udp_receive_callback+0x140>)
 8000724:	789b      	ldrb	r3, [r3, #2]
 8000726:	041b      	lsls	r3, r3, #16
 8000728:	4319      	orrs	r1, r3
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <udp_receive_callback+0x140>)
 800072c:	78db      	ldrb	r3, [r3, #3]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	430b      	orrs	r3, r1
 8000732:	4912      	ldr	r1, [pc, #72]	; (800077c <udp_receive_callback+0x140>)
 8000734:	7909      	ldrb	r1, [r1, #4]
 8000736:	430b      	orrs	r3, r1
 8000738:	0e1b      	lsrs	r3, r3, #24
 800073a:	4313      	orrs	r3, r2
 800073c:	4a14      	ldr	r2, [pc, #80]	; (8000790 <udp_receive_callback+0x154>)
 800073e:	6013      	str	r3, [r2, #0]
		customflag=1;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <udp_receive_callback+0x158>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
		ping_raw_init();
 8000746:	f000 f8f9 	bl	800093c <ping_raw_init>
		ping_send_now();
 800074a:	f000 f82f 	bl	80007ac <ping_send_now>
		ping_recv(0, ping_pcb, buf, &custdestIP);
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <udp_receive_callback+0x148>)
 8000750:	6819      	ldr	r1, [r3, #0]
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <udp_receive_callback+0x14c>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <udp_receive_callback+0x154>)
 8000758:	2000      	movs	r0, #0
 800075a:	f000 f913 	bl	8000984 <ping_recv>
		udpClient_connect();
 800075e:	f7ff ff09 	bl	8000574 <udpClient_connect>
		break;
 8000762:	bf00      	nop


		break;
	}

	pbuf_free(p);
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f005 fc63 	bl	8006030 <pbuf_free>
}
 800076a:	bf00      	nop
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	08010618 	.word	0x08010618
 8000778:	20000160 	.word	0x20000160
 800077c:	200000fc 	.word	0x200000fc
 8000780:	200000f4 	.word	0x200000f4
 8000784:	20000180 	.word	0x20000180
 8000788:	2000018c 	.word	0x2000018c
 800078c:	20000178 	.word	0x20000178
 8000790:	2000017c 	.word	0x2000017c
 8000794:	200000f5 	.word	0x200000f5

08000798 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	udpClient_send();
 80007a0:	f7ff ff1a 	bl	80005d8 <udpClient_send>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <ping_send_now>:

void ping_send_now(){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  if(customflag == 0){
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <ping_send_now+0x44>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d104      	bne.n	80007c2 <ping_send_now+0x16>
      ping_target = destIP;
 80007b8:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <ping_send_now+0x48>)
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <ping_send_now+0x4c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	e003      	b.n	80007ca <ping_send_now+0x1e>
}
  else{
	  ping_target = custdestIP;
 80007c2:	4a0c      	ldr	r2, [pc, #48]	; (80007f4 <ping_send_now+0x48>)
 80007c4:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <ping_send_now+0x50>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	6013      	str	r3, [r2, #0]
  }
  LWIP_ASSERT("ping_pcb != NULL", ping_pcb != NULL);
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <ping_send_now+0x54>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d105      	bne.n	80007de <ping_send_now+0x32>
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <ping_send_now+0x58>)
 80007d4:	22b3      	movs	r2, #179	; 0xb3
 80007d6:	490c      	ldr	r1, [pc, #48]	; (8000808 <ping_send_now+0x5c>)
 80007d8:	480c      	ldr	r0, [pc, #48]	; (800080c <ping_send_now+0x60>)
 80007da:	f00e fce5 	bl	800f1a8 <iprintf>
  ping_send(ping_pcb, &ping_target);
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <ping_send_now+0x54>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4904      	ldr	r1, [pc, #16]	; (80007f4 <ping_send_now+0x48>)
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f813 	bl	8000810 <ping_send>
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000f5 	.word	0x200000f5
 80007f4:	20000170 	.word	0x20000170
 80007f8:	20000178 	.word	0x20000178
 80007fc:	2000017c 	.word	0x2000017c
 8000800:	20000180 	.word	0x20000180
 8000804:	0801061c 	.word	0x0801061c
 8000808:	08010630 	.word	0x08010630
 800080c:	08010644 	.word	0x08010644

08000810 <ping_send>:

static void ping_send(struct raw_pcb *raw, ip_addr_t *addr)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  struct pbuf *p;
  struct icmp_echo_hdr *iecho;
  size_t ping_size = sizeof(struct icmp_echo_hdr) + 32;
 800081a:	2328      	movs	r3, #40	; 0x28
 800081c:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF( PING_DEBUG, ("ping: send "));
  ip_addr_debug_print(PING_DEBUG, addr);
  LWIP_DEBUGF( PING_DEBUG, ("\n"));
  LWIP_ASSERT("ping_size <= 0xffff", ping_size <= 0xffff);
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000824:	d305      	bcc.n	8000832 <ping_send+0x22>
 8000826:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <ping_send+0x84>)
 8000828:	22c0      	movs	r2, #192	; 0xc0
 800082a:	491b      	ldr	r1, [pc, #108]	; (8000898 <ping_send+0x88>)
 800082c:	481b      	ldr	r0, [pc, #108]	; (800089c <ping_send+0x8c>)
 800082e:	f00e fcbb 	bl	800f1a8 <iprintf>

  p = pbuf_alloc(PBUF_IP, (u16_t)ping_size, PBUF_RAM);
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	b29b      	uxth	r3, r3
 8000836:	f44f 7220 	mov.w	r2, #640	; 0x280
 800083a:	4619      	mov	r1, r3
 800083c:	2022      	movs	r0, #34	; 0x22
 800083e:	f005 f901 	bl	8005a44 <pbuf_alloc>
 8000842:	6138      	str	r0, [r7, #16]
  if (!p) {
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d020      	beq.n	800088c <ping_send+0x7c>
    return;
  }
  if ((p->len == p->tot_len) && (p->next == NULL)) {
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	895a      	ldrh	r2, [r3, #10]
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	891b      	ldrh	r3, [r3, #8]
 8000852:	429a      	cmp	r2, r3
 8000854:	d116      	bne.n	8000884 <ping_send+0x74>
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d112      	bne.n	8000884 <ping_send+0x74>
    iecho = (struct icmp_echo_hdr *)p->payload;
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	60fb      	str	r3, [r7, #12]

    ping_prepare_echo(iecho, (u16_t)ping_size);
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	b29b      	uxth	r3, r3
 8000868:	4619      	mov	r1, r3
 800086a:	68f8      	ldr	r0, [r7, #12]
 800086c:	f000 f81a 	bl	80008a4 <ping_prepare_echo>

    raw_sendto(raw, p, addr);
 8000870:	683a      	ldr	r2, [r7, #0]
 8000872:	6939      	ldr	r1, [r7, #16]
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f005 ffe5 	bl	8006844 <raw_sendto>
    ping_time = sys_now();
 800087a:	f003 fdf7 	bl	800446c <sys_now>
 800087e:	4603      	mov	r3, r0
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <ping_send+0x90>)
 8000882:	6013      	str	r3, [r2, #0]
  }
  pbuf_free(p);
 8000884:	6938      	ldr	r0, [r7, #16]
 8000886:	f005 fbd3 	bl	8006030 <pbuf_free>
 800088a:	e000      	b.n	800088e <ping_send+0x7e>
    return;
 800088c:	bf00      	nop
}
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	0801061c 	.word	0x0801061c
 8000898:	0801066c 	.word	0x0801066c
 800089c:	08010644 	.word	0x08010644
 80008a0:	20000184 	.word	0x20000184

080008a4 <ping_prepare_echo>:

static void ping_prepare_echo( struct icmp_echo_hdr *iecho, u16_t len)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	807b      	strh	r3, [r7, #2]
  size_t i;
  size_t data_len = len - sizeof(struct icmp_echo_hdr);
 80008b0:	887b      	ldrh	r3, [r7, #2]
 80008b2:	3b08      	subs	r3, #8
 80008b4:	60bb      	str	r3, [r7, #8]

  ICMPH_TYPE_SET(iecho, ICMP_ECHO);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2208      	movs	r2, #8
 80008ba:	701a      	strb	r2, [r3, #0]
  ICMPH_CODE_SET(iecho, 0);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2200      	movs	r2, #0
 80008c0:	705a      	strb	r2, [r3, #1]
  iecho->chksum = 0;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2200      	movs	r2, #0
 80008c6:	709a      	strb	r2, [r3, #2]
 80008c8:	2200      	movs	r2, #0
 80008ca:	70da      	strb	r2, [r3, #3]
  iecho->id     = 0xAFAF;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	f062 0250 	orn	r2, r2, #80	; 0x50
 80008d4:	711a      	strb	r2, [r3, #4]
 80008d6:	2200      	movs	r2, #0
 80008d8:	f062 0250 	orn	r2, r2, #80	; 0x50
 80008dc:	715a      	strb	r2, [r3, #5]
  iecho->seqno  = htons(++ping_seq_num);
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <ping_prepare_echo+0x94>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	3301      	adds	r3, #1
 80008e4:	4a14      	ldr	r2, [pc, #80]	; (8000938 <ping_prepare_echo+0x94>)
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <ping_prepare_echo+0x94>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f003 ffbc 	bl	800486c <lwip_htons>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461a      	mov	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	80da      	strh	r2, [r3, #6]

  /* fill the additional data buffer with some data */
  for(i = 0; i < data_len; i++) {
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	e009      	b.n	8000916 <ping_prepare_echo+0x72>
    ((char*)iecho)[sizeof(struct icmp_echo_hdr) + i] = (char)i;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	3308      	adds	r3, #8
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < data_len; i++) {
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3301      	adds	r3, #1
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	429a      	cmp	r2, r3
 800091c:	d3f1      	bcc.n	8000902 <ping_prepare_echo+0x5e>
  }

  iecho->chksum = inet_chksum(iecho, len);
 800091e:	887b      	ldrh	r3, [r7, #2]
 8000920:	4619      	mov	r1, r3
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f004 f82d 	bl	8004982 <inet_chksum>
 8000928:	4603      	mov	r3, r0
 800092a:	461a      	mov	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	805a      	strh	r2, [r3, #2]
}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000188 	.word	0x20000188

0800093c <ping_raw_init>:

static void ping_raw_init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  ping_pcb = raw_new(IP_PROTO_ICMP);
 8000940:	2001      	movs	r0, #1
 8000942:	f006 f865 	bl	8006a10 <raw_new>
 8000946:	4603      	mov	r3, r0
 8000948:	4a09      	ldr	r2, [pc, #36]	; (8000970 <ping_raw_init+0x34>)
 800094a:	6013      	str	r3, [r2, #0]
  LWIP_ASSERT("ping_pcb != NULL", ping_pcb != NULL);
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <ping_raw_init+0x34>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d105      	bne.n	8000960 <ping_raw_init+0x24>
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <ping_raw_init+0x38>)
 8000956:	22e7      	movs	r2, #231	; 0xe7
 8000958:	4907      	ldr	r1, [pc, #28]	; (8000978 <ping_raw_init+0x3c>)
 800095a:	4808      	ldr	r0, [pc, #32]	; (800097c <ping_raw_init+0x40>)
 800095c:	f00e fc24 	bl	800f1a8 <iprintf>


  raw_bind(ping_pcb, &myIP);
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <ping_raw_init+0x34>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4906      	ldr	r1, [pc, #24]	; (8000980 <ping_raw_init+0x44>)
 8000966:	4618      	mov	r0, r3
 8000968:	f005 ff4e 	bl	8006808 <raw_bind>

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000180 	.word	0x20000180
 8000974:	0801061c 	.word	0x0801061c
 8000978:	08010630 	.word	0x08010630
 800097c:	08010644 	.word	0x08010644
 8000980:	20000174 	.word	0x20000174

08000984 <ping_recv>:



static u8_t ping_recv(void *arg, struct raw_pcb *pcb, struct pbuf *p, ip_addr_t *addr)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b087      	sub	sp, #28
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
  struct icmp_echo_hdr *iecho;
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_ASSERT("p != NULL", p != NULL);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d105      	bne.n	80009a4 <ping_recv+0x20>
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <ping_recv+0x70>)
 800099a:	22f6      	movs	r2, #246	; 0xf6
 800099c:	4916      	ldr	r1, [pc, #88]	; (80009f8 <ping_recv+0x74>)
 800099e:	4817      	ldr	r0, [pc, #92]	; (80009fc <ping_recv+0x78>)
 80009a0:	f00e fc02 	bl	800f1a8 <iprintf>

  if (pbuf_header( p, -PBUF_IP_HLEN)==0) {
 80009a4:	f06f 0113 	mvn.w	r1, #19
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f005 fb1c 	bl	8005fe6 <pbuf_header>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d11a      	bne.n	80009ea <ping_recv+0x66>
    iecho = (struct icmp_echo_hdr *)p->payload;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	617b      	str	r3, [r7, #20]

    if ((iecho->id == PING_ID) && (iecho->seqno == htons(ping_seq_num))) {
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	889b      	ldrh	r3, [r3, #4]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	f64a 72af 	movw	r2, #44975	; 0xafaf
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d110      	bne.n	80009ea <ping_recv+0x66>
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	88db      	ldrh	r3, [r3, #6]
 80009cc:	b29c      	uxth	r4, r3
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <ping_recv+0x7c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	4618      	mov	r0, r3
 80009d6:	f003 ff49 	bl	800486c <lwip_htons>
 80009da:	4603      	mov	r3, r0
 80009dc:	429c      	cmp	r4, r3
 80009de:	d104      	bne.n	80009ea <ping_recv+0x66>
      ip_addr_debug_print(PING_DEBUG, addr);
      LWIP_DEBUGF( PING_DEBUG, (" %"U32_F" ms\n", (sys_now()-ping_time)));

      /* do some ping result processing */
      PING_RESULT(1);
      pbuf_free(p);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f005 fb25 	bl	8006030 <pbuf_free>
      return 1; /* eat the packet */
 80009e6:	2301      	movs	r3, #1
 80009e8:	e000      	b.n	80009ec <ping_recv+0x68>
    }
  }

  return 0; /* don't eat the packet */
 80009ea:	2300      	movs	r3, #0
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	371c      	adds	r7, #28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd90      	pop	{r4, r7, pc}
 80009f4:	0801061c 	.word	0x0801061c
 80009f8:	08010680 	.word	0x08010680
 80009fc:	08010644 	.word	0x08010644
 8000a00:	20000188 	.word	0x20000188

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a08:	f000 fc4e 	bl	80012a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0c:	f000 f828 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a10:	f000 f8e2 	bl	8000bd8 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000a14:	f003 fa2a 	bl	8003e6c <MX_LWIP_Init>
  MX_TIM1_Init();
 8000a18:	f000 f88c 	bl	8000b34 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  sys_timeouts_init();
 8000a1c:	f00b fa6a 	bl	800bef4 <sys_timeouts_init>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000a20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a24:	4809      	ldr	r0, [pc, #36]	; (8000a4c <main+0x48>)
 8000a26:	f002 f986 	bl	8002d36 <HAL_GPIO_TogglePin>


  IP_ADDR4(&myIP,192,168,1,111);
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <main+0x4c>)
 8000a2c:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <main+0x50>)
 8000a2e:	601a      	str	r2, [r3, #0]
  IP_ADDR4(&destIP,192,168,1,50);
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <main+0x54>)
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <main+0x58>)
 8000a34:	601a      	str	r2, [r3, #0]
  udpClient_connect();
 8000a36:	f7ff fd9d 	bl	8000574 <udpClient_connect>
  //ping_raw_init();
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a3e:	4803      	ldr	r0, [pc, #12]	; (8000a4c <main+0x48>)
 8000a40:	f002 f979 	bl	8002d36 <HAL_GPIO_TogglePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 8000a44:	f003 fb5e 	bl	8004104 <MX_LWIP_Process>
 8000a48:	e7fc      	b.n	8000a44 <main+0x40>
 8000a4a:	bf00      	nop
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	20000174 	.word	0x20000174
 8000a54:	6f01a8c0 	.word	0x6f01a8c0
 8000a58:	20000178 	.word	0x20000178
 8000a5c:	3201a8c0 	.word	0x3201a8c0

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b094      	sub	sp, #80	; 0x50
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	2230      	movs	r2, #48	; 0x30
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f00e fb92 	bl	800f198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <SystemClock_Config+0xcc>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	4a27      	ldr	r2, [pc, #156]	; (8000b2c <SystemClock_Config+0xcc>)
 8000a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a92:	6413      	str	r3, [r2, #64]	; 0x40
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <SystemClock_Config+0xcc>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <SystemClock_Config+0xd0>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <SystemClock_Config+0xd0>)
 8000aaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <SystemClock_Config+0xd0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000abc:	2301      	movs	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ad4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ad8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ade:	2307      	movs	r3, #7
 8000ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae2:	f107 0320 	add.w	r3, r7, #32
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 f940 	bl	8002d6c <HAL_RCC_OscConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000af2:	f000 f8df 	bl	8000cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af6:	230f      	movs	r3, #15
 8000af8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afa:	2302      	movs	r3, #2
 8000afc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	2105      	movs	r1, #5
 8000b14:	4618      	mov	r0, r3
 8000b16:	f002 fba1 	bl	800325c <HAL_RCC_ClockConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b20:	f000 f8c8 	bl	8000cb4 <Error_Handler>
  }
}
 8000b24:	bf00      	nop
 8000b26:	3750      	adds	r7, #80	; 0x50
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40007000 	.word	0x40007000

08000b34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3a:	f107 0308 	add.w	r3, r7, #8
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b48:	463b      	mov	r3, r7
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <MX_TIM1_Init+0x9c>)
 8000b52:	4a20      	ldr	r2, [pc, #128]	; (8000bd4 <MX_TIM1_Init+0xa0>)
 8000b54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <MX_TIM1_Init+0x9c>)
 8000b58:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000b5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_TIM1_Init+0x9c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <MX_TIM1_Init+0x9c>)
 8000b66:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_TIM1_Init+0x9c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_TIM1_Init+0x9c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <MX_TIM1_Init+0x9c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b7e:	4814      	ldr	r0, [pc, #80]	; (8000bd0 <MX_TIM1_Init+0x9c>)
 8000b80:	f002 fd64 	bl	800364c <HAL_TIM_Base_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000b8a:	f000 f893 	bl	8000cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <MX_TIM1_Init+0x9c>)
 8000b9c:	f002 fead 	bl	80038fa <HAL_TIM_ConfigClockSource>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ba6:	f000 f885 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <MX_TIM1_Init+0x9c>)
 8000bb8:	f003 f8c8 	bl	8003d4c <HAL_TIMEx_MasterConfigSynchronization>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000bc2:	f000 f877 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200000ac 	.word	0x200000ac
 8000bd4:	40010000 	.word	0x40010000

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a2d      	ldr	r2, [pc, #180]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b27      	ldr	r3, [pc, #156]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a26      	ldr	r2, [pc, #152]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b24      	ldr	r3, [pc, #144]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	4b20      	ldr	r3, [pc, #128]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a1f      	ldr	r2, [pc, #124]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a18      	ldr	r2, [pc, #96]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a11      	ldr	r2, [pc, #68]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000c68:	f043 0308 	orr.w	r3, r3, #8
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0308 	and.w	r3, r3, #8
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c80:	480b      	ldr	r0, [pc, #44]	; (8000cb0 <MX_GPIO_Init+0xd8>)
 8000c82:	f002 f83f 	bl	8002d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000c86:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_GPIO_Init+0xd8>)
 8000ca0:	f001 fe94 	bl	80029cc <HAL_GPIO_Init>

}
 8000ca4:	bf00      	nop
 8000ca6:	3728      	adds	r7, #40	; 0x28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020c00 	.word	0x40020c00

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <Error_Handler+0x8>
	...

08000cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <HAL_MspInit+0x4c>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_MspInit+0x4c>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cfe:	2007      	movs	r0, #7
 8000d00:	f000 fc38 	bl	8001574 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40023800 	.word	0x40023800

08000d10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <HAL_TIM_Base_MspInit+0x48>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d115      	bne.n	8000d4e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <HAL_TIM_Base_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a0c      	ldr	r2, [pc, #48]	; (8000d5c <HAL_TIM_Base_MspInit+0x4c>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_TIM_Base_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	2019      	movs	r0, #25
 8000d44:	f000 fc21 	bl	800158a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d48:	2019      	movs	r0, #25
 8000d4a:	f000 fc3a 	bl	80015c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40010000 	.word	0x40010000
 8000d5c:	40023800 	.word	0x40023800

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dac:	f000 face 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000dba:	f002 fc96 	bl	80036ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000ac 	.word	0x200000ac

08000dc8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <ETH_IRQHandler+0x10>)
 8000dce:	f000 ff15 	bl	8001bfc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20004cb4 	.word	0x20004cb4

08000ddc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return 1;
 8000de0:	2301      	movs	r3, #1
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <_kill>:

int _kill(int pid, int sig)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <_kill+0x20>)
 8000df8:	2216      	movs	r2, #22
 8000dfa:	601a      	str	r2, [r3, #0]
	return -1;
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	20008514 	.word	0x20008514

08000e10 <_exit>:

void _exit (int status)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ffe5 	bl	8000dec <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e22:	e7fe      	b.n	8000e22 <_exit+0x12>

08000e24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	e00a      	b.n	8000e4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e36:	f3af 8000 	nop.w
 8000e3a:	4601      	mov	r1, r0
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	60ba      	str	r2, [r7, #8]
 8000e42:	b2ca      	uxtb	r2, r1
 8000e44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dbf0      	blt.n	8000e36 <_read+0x12>
	}

return len;
 8000e54:	687b      	ldr	r3, [r7, #4]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	e009      	b.n	8000e84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	60ba      	str	r2, [r7, #8]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbf1      	blt.n	8000e70 <_write+0x12>
	}
	return len;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_close>:

int _close(int file)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ebe:	605a      	str	r2, [r3, #4]
	return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_isatty>:

int _isatty(int file)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
	return 0;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b087      	sub	sp, #28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f08:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <_sbrk+0x5c>)
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <_sbrk+0x60>)
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <_sbrk+0x64>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <_sbrk+0x68>)
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d205      	bcs.n	8000f3c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <_sbrk+0x6c>)
 8000f32:	220c      	movs	r2, #12
 8000f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	e009      	b.n	8000f50 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <_sbrk+0x64>)
 8000f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	371c      	adds	r7, #28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	20020000 	.word	0x20020000
 8000f60:	00000400 	.word	0x00000400
 8000f64:	20000190 	.word	0x20000190
 8000f68:	20008528 	.word	0x20008528
 8000f6c:	20008514 	.word	0x20008514

08000f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <SystemInit+0x20>)
 8000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <SystemInit+0x20>)
 8000f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f9a:	490e      	ldr	r1, [pc, #56]	; (8000fd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fb0:	4c0b      	ldr	r4, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fbe:	f7ff ffd7 	bl	8000f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f00e f88d 	bl	800f0e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc6:	f7ff fd1d 	bl	8000a04 <main>
  bx  lr    
 8000fca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000fd8:	080133a0 	.word	0x080133a0
  ldr r2, =_sbss
 8000fdc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000fe0:	20008524 	.word	0x20008524

08000fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC_IRQHandler>

08000fe6 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00b      	beq.n	800100e <DP83848_RegisterBusIO+0x28>
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d007      	beq.n	800100e <DP83848_RegisterBusIO+0x28>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <DP83848_RegisterBusIO+0x28>
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d102      	bne.n	8001014 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	e014      	b.n	800103e <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	691a      	ldr	r2, [r3, #16]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d17c      	bne.n	8001164 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d002      	beq.n	8001078 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2220      	movs	r2, #32
 800107c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	e01c      	b.n	80010be <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	f107 0208 	add.w	r2, r7, #8
 800108c:	2119      	movs	r1, #25
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	4798      	blx	r3
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	da03      	bge.n	80010a0 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8001098:	f06f 0304 	mvn.w	r3, #4
 800109c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800109e:	e00b      	b.n	80010b8 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	f003 031f 	and.w	r3, r3, #31
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d105      	bne.n	80010b8 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
         break;
 80010b6:	e005      	b.n	80010c4 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	3301      	adds	r3, #1
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	2b1f      	cmp	r3, #31
 80010c2:	d9df      	bls.n	8001084 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b1f      	cmp	r3, #31
 80010ca:	d902      	bls.n	80010d2 <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 80010cc:	f06f 0302 	mvn.w	r3, #2
 80010d0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d145      	bne.n	8001164 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	6810      	ldr	r0, [r2, #0]
 80010e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010e4:	2100      	movs	r1, #0
 80010e6:	4798      	blx	r3
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db37      	blt.n	800115e <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	6810      	ldr	r0, [r2, #0]
 80010f6:	f107 0208 	add.w	r2, r7, #8
 80010fa:	2100      	movs	r1, #0
 80010fc:	4798      	blx	r3
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	db28      	blt.n	8001156 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4798      	blx	r3
 800110a:	4603      	mov	r3, r0
 800110c:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 800110e:	e01c      	b.n	800114a <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4798      	blx	r3
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001122:	d80e      	bhi.n	8001142 <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	6810      	ldr	r0, [r2, #0]
 800112c:	f107 0208 	add.w	r2, r7, #8
 8001130:	2100      	movs	r1, #0
 8001132:	4798      	blx	r3
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	da07      	bge.n	800114a <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 800113a:	f06f 0304 	mvn.w	r3, #4
 800113e:	613b      	str	r3, [r7, #16]
                 break;
 8001140:	e010      	b.n	8001164 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8001142:	f06f 0301 	mvn.w	r3, #1
 8001146:	613b      	str	r3, [r7, #16]
               break;
 8001148:	e00c      	b.n	8001164 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1dd      	bne.n	8001110 <DP83848_Init+0xc6>
 8001154:	e006      	b.n	8001164 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8001156:	f06f 0304 	mvn.w	r3, #4
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	e002      	b.n	8001164 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 800115e:	f06f 0303 	mvn.w	r3, #3
 8001162:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d112      	bne.n	8001190 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	4798      	blx	r3
 8001170:	4603      	mov	r3, r0
 8001172:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8001174:	bf00      	nop
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	4798      	blx	r3
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001188:	d9f5      	bls.n	8001176 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001190:	693b      	ldr	r3, [r7, #16]
 }
 8001192:	4618      	mov	r0, r3
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b084      	sub	sp, #16
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	6810      	ldr	r0, [r2, #0]
 80011ae:	f107 020c 	add.w	r2, r7, #12
 80011b2:	2101      	movs	r1, #1
 80011b4:	4798      	blx	r3
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	da02      	bge.n	80011c2 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 80011bc:	f06f 0304 	mvn.w	r3, #4
 80011c0:	e06e      	b.n	80012a0 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6810      	ldr	r0, [r2, #0]
 80011ca:	f107 020c 	add.w	r2, r7, #12
 80011ce:	2101      	movs	r1, #1
 80011d0:	4798      	blx	r3
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	da02      	bge.n	80011de <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 80011d8:	f06f 0304 	mvn.w	r3, #4
 80011dc:	e060      	b.n	80012a0 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e059      	b.n	80012a0 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6810      	ldr	r0, [r2, #0]
 80011f4:	f107 020c 	add.w	r2, r7, #12
 80011f8:	2100      	movs	r1, #0
 80011fa:	4798      	blx	r3
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	da02      	bge.n	8001208 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8001202:	f06f 0304 	mvn.w	r3, #4
 8001206:	e04b      	b.n	80012a0 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d11b      	bne.n	800124a <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d006      	beq.n	800122a <DP83848_GetLinkState+0x90>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001226:	2302      	movs	r3, #2
 8001228:	e03a      	b.n	80012a0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8001234:	2303      	movs	r3, #3
 8001236:	e033      	b.n	80012a0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8001242:	2304      	movs	r3, #4
 8001244:	e02c      	b.n	80012a0 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001246:	2305      	movs	r3, #5
 8001248:	e02a      	b.n	80012a0 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	6810      	ldr	r0, [r2, #0]
 8001252:	f107 020c 	add.w	r2, r7, #12
 8001256:	2110      	movs	r1, #16
 8001258:	4798      	blx	r3
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	da02      	bge.n	8001266 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8001260:	f06f 0304 	mvn.w	r3, #4
 8001264:	e01c      	b.n	80012a0 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126c:	2b00      	cmp	r3, #0
 800126e:	d101      	bne.n	8001274 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8001270:	2306      	movs	r3, #6
 8001272:	e015      	b.n	80012a0 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 0306 	and.w	r3, r3, #6
 800127a:	2b04      	cmp	r3, #4
 800127c:	d101      	bne.n	8001282 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 800127e:	2302      	movs	r3, #2
 8001280:	e00e      	b.n	80012a0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f003 0306 	and.w	r3, r3, #6
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 800128c:	2303      	movs	r3, #3
 800128e:	e007      	b.n	80012a0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0306 	and.w	r3, r3, #6
 8001296:	2b06      	cmp	r3, #6
 8001298:	d101      	bne.n	800129e <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800129a:	2304      	movs	r3, #4
 800129c:	e000      	b.n	80012a0 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 800129e:	2305      	movs	r3, #5
    }
  }
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <HAL_Init+0x40>)
 80012b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <HAL_Init+0x40>)
 80012be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HAL_Init+0x40>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_Init+0x40>)
 80012ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d0:	2003      	movs	r0, #3
 80012d2:	f000 f94f 	bl	8001574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f000 f808 	bl	80012ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012dc:	f7ff fcf0 	bl	8000cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023c00 	.word	0x40023c00

080012ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_InitTick+0x54>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x58>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	fbb3 f3f1 	udiv	r3, r3, r1
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f000 f967 	bl	80015de <HAL_SYSTICK_Config>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e00e      	b.n	8001338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	d80a      	bhi.n	8001336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001320:	2200      	movs	r2, #0
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f000 f92f 	bl	800158a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <HAL_InitTick+0x5c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000000 	.word	0x20000000
 8001344:	20000008 	.word	0x20000008
 8001348:	20000004 	.word	0x20000004

0800134c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x20>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x24>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_IncTick+0x24>)
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000008 	.word	0x20000008
 8001370:	20000194 	.word	0x20000194

08001374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <HAL_GetTick+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000194 	.word	0x20000194

0800138c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff ffee 	bl	8001374 <HAL_GetTick>
 8001398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a4:	d005      	beq.n	80013b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_Delay+0x44>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013b2:	bf00      	nop
 80013b4:	f7ff ffde 	bl	8001374 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d8f7      	bhi.n	80013b4 <HAL_Delay+0x28>
  {
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000008 	.word	0x20000008

080013d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f0:	4013      	ands	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001406:	4a04      	ldr	r2, [pc, #16]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	60d3      	str	r3, [r2, #12]
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <__NVIC_GetPriorityGrouping+0x18>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	f003 0307 	and.w	r3, r3, #7
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db0b      	blt.n	8001462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	4907      	ldr	r1, [pc, #28]	; (8001470 <__NVIC_EnableIRQ+0x38>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000e100 	.word	0xe000e100

08001474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	db0a      	blt.n	800149e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	490c      	ldr	r1, [pc, #48]	; (80014c0 <__NVIC_SetPriority+0x4c>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	0112      	lsls	r2, r2, #4
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	440b      	add	r3, r1
 8001498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800149c:	e00a      	b.n	80014b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <__NVIC_SetPriority+0x50>)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	3b04      	subs	r3, #4
 80014ac:	0112      	lsls	r2, r2, #4
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	440b      	add	r3, r1
 80014b2:	761a      	strb	r2, [r3, #24]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000e100 	.word	0xe000e100
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f1c3 0307 	rsb	r3, r3, #7
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	bf28      	it	cs
 80014e6:	2304      	movcs	r3, #4
 80014e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3304      	adds	r3, #4
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d902      	bls.n	80014f8 <NVIC_EncodePriority+0x30>
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3b03      	subs	r3, #3
 80014f6:	e000      	b.n	80014fa <NVIC_EncodePriority+0x32>
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	401a      	ands	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001510:	f04f 31ff 	mov.w	r1, #4294967295
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43d9      	mvns	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	4313      	orrs	r3, r2
         );
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001540:	d301      	bcc.n	8001546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001542:	2301      	movs	r3, #1
 8001544:	e00f      	b.n	8001566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <SysTick_Config+0x40>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154e:	210f      	movs	r1, #15
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f7ff ff8e 	bl	8001474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <SysTick_Config+0x40>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <SysTick_Config+0x40>)
 8001560:	2207      	movs	r2, #7
 8001562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	e000e010 	.word	0xe000e010

08001574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ff29 	bl	80013d4 <__NVIC_SetPriorityGrouping>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800159c:	f7ff ff3e 	bl	800141c <__NVIC_GetPriorityGrouping>
 80015a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	6978      	ldr	r0, [r7, #20]
 80015a8:	f7ff ff8e 	bl	80014c8 <NVIC_EncodePriority>
 80015ac:	4602      	mov	r2, r0
 80015ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff5d 	bl	8001474 <__NVIC_SetPriority>
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff31 	bl	8001438 <__NVIC_EnableIRQ>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ffa2 	bl	8001530 <SysTick_Config>
 80015ec:	4603      	mov	r3, r0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e06c      	b.n	80016e4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001610:	2b00      	cmp	r3, #0
 8001612:	d106      	bne.n	8001622 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2223      	movs	r2, #35	; 0x23
 8001618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f002 ff2d 	bl	800447c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	4b31      	ldr	r3, [pc, #196]	; (80016ec <HAL_ETH_Init+0xf4>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	4a30      	ldr	r2, [pc, #192]	; (80016ec <HAL_ETH_Init+0xf4>)
 800162c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001630:	6453      	str	r3, [r2, #68]	; 0x44
 8001632:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <HAL_ETH_Init+0xf4>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800163e:	4b2c      	ldr	r3, [pc, #176]	; (80016f0 <HAL_ETH_Init+0xf8>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4a2b      	ldr	r2, [pc, #172]	; (80016f0 <HAL_ETH_Init+0xf8>)
 8001644:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001648:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800164a:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <HAL_ETH_Init+0xf8>)
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	4927      	ldr	r1, [pc, #156]	; (80016f0 <HAL_ETH_Init+0xf8>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001658:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <HAL_ETH_Init+0xf8>)
 800165a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001672:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001674:	f7ff fe7e 	bl	8001374 <HAL_GetTick>
 8001678:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800167a:	e011      	b.n	80016a0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800167c:	f7ff fe7a 	bl	8001374 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800168a:	d909      	bls.n	80016a0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2204      	movs	r2, #4
 8001690:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	22e0      	movs	r2, #224	; 0xe0
 8001698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e021      	b.n	80016e4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1e4      	bne.n	800167c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 fee4 	bl	8002480 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 ff8b 	bl	80025d4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 ffe1 	bl	8002686 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	461a      	mov	r2, r3
 80016ca:	2100      	movs	r1, #0
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 ff49 	bl	8002564 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2210      	movs	r2, #16
 80016de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40013800 	.word	0x40013800

080016f4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001702:	2b10      	cmp	r3, #16
 8001704:	d150      	bne.n	80017a8 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2223      	movs	r2, #35	; 0x23
 800170a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2204      	movs	r2, #4
 8001712:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f9fd 	bl	8001b14 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f042 0208 	orr.w	r2, r2, #8
 8001728:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001732:	2001      	movs	r0, #1
 8001734:	f7ff fe2a 	bl	800138c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0204 	orr.w	r2, r2, #4
 800174e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001758:	2001      	movs	r0, #1
 800175a:	f7ff fe17 	bl	800138c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 fd2a 	bl	80021c0 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800177e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001782:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	f043 0302 	orr.w	r3, r3, #2
 8001796:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800179a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2223      	movs	r2, #35	; 0x23
 80017a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	e000      	b.n	80017aa <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
  }
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b084      	sub	sp, #16
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017c0:	2b23      	cmp	r3, #35	; 0x23
 80017c2:	d14a      	bne.n	800185a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2223      	movs	r2, #35	; 0x23
 80017c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017e2:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	f023 0302 	bic.w	r3, r3, #2
 80017f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017fa:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0204 	bic.w	r2, r2, #4
 800180a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001814:	2001      	movs	r0, #1
 8001816:	f7ff fdb9 	bl	800138c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 fccc 	bl	80021c0 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0208 	bic.w	r2, r2, #8
 8001836:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001840:	2001      	movs	r0, #1
 8001842:	f7ff fda3 	bl	800138c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2210      	movs	r2, #16
 8001852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
  }
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d109      	bne.n	800188a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800187c:	f043 0201 	orr.w	r2, r3, #1
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e07c      	b.n	8001984 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001890:	2b23      	cmp	r3, #35	; 0x23
 8001892:	d176      	bne.n	8001982 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001894:	2200      	movs	r2, #0
 8001896:	68b9      	ldr	r1, [r7, #8]
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 ff61 	bl	8002760 <ETH_Prepare_Tx_Descriptors>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d009      	beq.n	80018b8 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018aa:	f043 0202 	orr.w	r2, r3, #2
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e065      	b.n	8001984 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018b8:	f3bf 8f4f 	dsb	sy
}
 80018bc:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	3206      	adds	r2, #6
 80018c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ca:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	1c5a      	adds	r2, r3, #1
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	629a      	str	r2, [r3, #40]	; 0x28
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d904      	bls.n	80018e8 <HAL_ETH_Transmit+0x84>
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	1f1a      	subs	r2, r3, #4
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	3106      	adds	r1, #6
 80018f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018fc:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80018fe:	f7ff fd39 	bl	8001374 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001904:	e037      	b.n	8001976 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d011      	beq.n	800193c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800191e:	f043 0208 	orr.w	r2, r3, #8
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001930:	695a      	ldr	r2, [r3, #20]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e023      	b.n	8001984 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001942:	d018      	beq.n	8001976 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001944:	f7ff fd16 	bl	8001374 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	429a      	cmp	r2, r3
 8001952:	d302      	bcc.n	800195a <HAL_ETH_Transmit+0xf6>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10d      	bne.n	8001976 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001960:	f043 0204 	orr.w	r2, r3, #4
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001970:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e006      	b.n	8001984 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	dbc3      	blt.n	8001906 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e000      	b.n	8001984 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
  }
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d109      	bne.n	80019b8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019aa:	f043 0201 	orr.w	r2, r3, #1
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0a8      	b.n	8001b0a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019be:	2b23      	cmp	r3, #35	; 0x23
 80019c0:	d001      	beq.n	80019c6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e0a1      	b.n	8001b0a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ca:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	3212      	adds	r2, #18
 80019d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019dc:	f1c3 0304 	rsb	r3, r3, #4
 80019e0:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019e2:	e06a      	b.n	8001aba <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d007      	beq.n	8001a00 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	699a      	ldr	r2, [r3, #24]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	69da      	ldr	r2, [r3, #28]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d103      	bne.n	8001a14 <HAL_ETH_ReadData+0x88>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d040      	beq.n	8001a96 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00c      	beq.n	8001a58 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	0c1b      	lsrs	r3, r3, #16
 8001a44:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a48:	3b04      	subs	r3, #4
 8001a4a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001a54:	2301      	movs	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a70:	461a      	mov	r2, r3
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	f002 feb9 	bl	80047ec <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	441a      	add	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	2200      	movs	r2, #0
 8001a94:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d902      	bls.n	8001aa8 <HAL_ETH_ReadData+0x11c>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3b04      	subs	r3, #4
 8001aa6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	3212      	adds	r2, #18
 8001aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	db06      	blt.n	8001ad0 <HAL_ETH_ReadData+0x144>
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d202      	bcs.n	8001ad0 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d089      	beq.n	80019e4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	441a      	add	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f815 	bl	8001b14 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69fa      	ldr	r2, [r7, #28]
 8001aee:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d108      	bne.n	8001b08 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	e000      	b.n	8001b0a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3720      	adds	r7, #32
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001b20:	2301      	movs	r3, #1
 8001b22:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b28:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69fa      	ldr	r2, [r7, #28]
 8001b2e:	3212      	adds	r2, #18
 8001b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b34:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b3a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001b3c:	e040      	b.n	8001bc0 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d112      	bne.n	8001b6c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 fe1e 	bl	800478c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d102      	bne.n	8001b5c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	74fb      	strb	r3, [r7, #19]
 8001b5a:	e007      	b.n	8001b6c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	461a      	mov	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001b6c:	7cfb      	ldrb	r3, [r7, #19]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d026      	beq.n	8001bc0 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d103      	bne.n	8001b82 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	4a1e      	ldr	r2, [pc, #120]	; (8001bf8 <ETH_UpdateDescriptor+0xe4>)
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	e003      	b.n	8001b8a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001b88:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b8a:	f3bf 8f5f 	dmb	sy
}
 8001b8e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d902      	bls.n	8001bae <ETH_UpdateDescriptor+0x9a>
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	3b04      	subs	r3, #4
 8001bac:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	3212      	adds	r2, #18
 8001bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb8:	617b      	str	r3, [r7, #20]
      desccount--;
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <ETH_UpdateDescriptor+0xb8>
 8001bc6:	7cfb      	ldrb	r3, [r7, #19]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1b8      	bne.n	8001b3e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d00c      	beq.n	8001bf0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bde:	461a      	mov	r2, r3
 8001be0:	2300      	movs	r3, #0
 8001be2:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69fa      	ldr	r2, [r7, #28]
 8001be8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	800045f8 	.word	0x800045f8

08001bfc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c12:	2b40      	cmp	r3, #64	; 0x40
 8001c14:	d112      	bne.n	8001c3c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c24:	2b40      	cmp	r3, #64	; 0x40
 8001c26:	d109      	bne.n	8001c3c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <HAL_ETH_IRQHandler+0x178>)
 8001c34:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f8ac 	bl	8001d94 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d113      	bne.n	8001c76 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d10a      	bne.n	8001c76 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c68:	461a      	mov	r2, r3
 8001c6a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001c6e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f885 	bl	8001d80 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c88:	d14c      	bne.n	8001d24 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c9c:	d142      	bne.n	8001d24 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca4:	f043 0208 	orr.w	r2, r3, #8
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc0:	d11a      	bne.n	8001cf8 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <HAL_ETH_IRQHandler+0x17c>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001ce8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cec:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	22e0      	movs	r2, #224	; 0xe0
 8001cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001cf6:	e012      	b.n	8001d1e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d00:	695a      	ldr	r2, [r3, #20]
 8001d02:	f248 6380 	movw	r3, #34432	; 0x8680
 8001d06:	4013      	ands	r3, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d16:	461a      	mov	r2, r3
 8001d18:	f248 6380 	movw	r3, #34432	; 0x8680
 8001d1c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f842 	bl	8001da8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d10e      	bne.n	8001d50 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f83a 	bl	8001dbc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_ETH_IRQHandler+0x180>)
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d006      	beq.n	8001d6a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001d5c:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <HAL_ETH_IRQHandler+0x180>)
 8001d5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d62:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f833 	bl	8001dd0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	00010040 	.word	0x00010040
 8001d78:	007e2000 	.word	0x007e2000
 8001d7c:	40013c00 	.word	0x40013c00

08001d80 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f003 031c 	and.w	r3, r3, #28
 8001e00:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	02db      	lsls	r3, r3, #11
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	019b      	lsls	r3, r3, #6
 8001e12:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f023 0302 	bic.w	r3, r3, #2
 8001e22:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001e34:	f7ff fa9e 	bl	8001374 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e3a:	e00d      	b.n	8001e58 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001e3c:	f7ff fa9a 	bl	8001374 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e4a:	d301      	bcc.n	8001e50 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e010      	b.n	8001e72 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1ec      	bne.n	8001e3c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 031c 	and.w	r3, r3, #28
 8001e96:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	02db      	lsls	r3, r3, #11
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	019b      	lsls	r3, r3, #6
 8001ea8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ed4:	f7ff fa4e 	bl	8001374 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001eda:	e00d      	b.n	8001ef8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001edc:	f7ff fa4a 	bl	8001374 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eea:	d301      	bcc.n	8001ef0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e009      	b.n	8001f04 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1ec      	bne.n	8001edc <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0d9      	b.n	80020d4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	bf14      	ite	ne
 8001f2e:	2301      	movne	r3, #1
 8001f30:	2300      	moveq	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf0c      	ite	eq
 8001f58:	2301      	moveq	r3, #1
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf14      	ite	ne
 8001f74:	2301      	movne	r3, #1
 8001f76:	2300      	moveq	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	bf0c      	ite	eq
 8001f8e:	2301      	moveq	r3, #1
 8001f90:	2300      	movne	r3, #0
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf14      	ite	ne
 8001fa8:	2301      	movne	r3, #1
 8001faa:	2300      	moveq	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	461a      	mov	r2, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	bf0c      	ite	eq
 8001fde:	2301      	moveq	r3, #1
 8001fe0:	2300      	movne	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200e:	2b00      	cmp	r3, #0
 8002010:	bf14      	ite	ne
 8002012:	2301      	movne	r3, #1
 8002014:	2300      	moveq	r3, #0
 8002016:	b2db      	uxtb	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002036:	2b00      	cmp	r3, #0
 8002038:	bf14      	ite	ne
 800203a:	2301      	movne	r3, #1
 800203c:	2300      	moveq	r3, #0
 800203e:	b2db      	uxtb	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	bf14      	ite	ne
 8002054:	2301      	movne	r3, #1
 8002056:	2300      	moveq	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	461a      	mov	r2, r3
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf0c      	ite	eq
 8002070:	2301      	moveq	r3, #1
 8002072:	2300      	movne	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	461a      	mov	r2, r3
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	0c1b      	lsrs	r3, r3, #16
 8002094:	b29a      	uxth	r2, r3
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf14      	ite	ne
 80020a8:	2301      	movne	r3, #1
 80020aa:	2300      	moveq	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf14      	ite	ne
 80020c4:	2301      	movne	r3, #1
 80020c6:	2300      	moveq	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e00b      	b.n	800210c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020fa:	2b10      	cmp	r3, #16
 80020fc:	d105      	bne.n	800210a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80020fe:	6839      	ldr	r1, [r7, #0]
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f883 	bl	800220c <ETH_SetMACConfig>

    return HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	e000      	b.n	800210c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
  }
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f023 031c 	bic.w	r3, r3, #28
 800212a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800212c:	f001 fa82 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 8002130:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <HAL_ETH_SetMDIOClockRange+0x98>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d908      	bls.n	800214c <HAL_ETH_SetMDIOClockRange+0x38>
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	4a1c      	ldr	r2, [pc, #112]	; (80021b0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d804      	bhi.n	800214c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f043 0308 	orr.w	r3, r3, #8
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	e027      	b.n	800219c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	4a18      	ldr	r2, [pc, #96]	; (80021b0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d908      	bls.n	8002166 <HAL_ETH_SetMDIOClockRange+0x52>
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4a17      	ldr	r2, [pc, #92]	; (80021b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d204      	bcs.n	8002166 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f043 030c 	orr.w	r3, r3, #12
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	e01a      	b.n	800219c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	4a12      	ldr	r2, [pc, #72]	; (80021b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d303      	bcc.n	8002176 <HAL_ETH_SetMDIOClockRange+0x62>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	4a11      	ldr	r2, [pc, #68]	; (80021b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d911      	bls.n	800219a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	4a0f      	ldr	r2, [pc, #60]	; (80021b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d908      	bls.n	8002190 <HAL_ETH_SetMDIOClockRange+0x7c>
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d804      	bhi.n	8002190 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	e005      	b.n	800219c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f043 0310 	orr.w	r3, r3, #16
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	e000      	b.n	800219c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800219a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	611a      	str	r2, [r3, #16]
}
 80021a4:	bf00      	nop
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	01312cff 	.word	0x01312cff
 80021b0:	02160ebf 	.word	0x02160ebf
 80021b4:	03938700 	.word	0x03938700
 80021b8:	05f5e0ff 	.word	0x05f5e0ff
 80021bc:	08f0d17f 	.word	0x08f0d17f

080021c0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021e2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021f0:	2001      	movs	r0, #1
 80021f2:	f7ff f8cb 	bl	800138c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002200:	6193      	str	r3, [r2, #24]
}
 8002202:	bf00      	nop
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4b51      	ldr	r3, [pc, #324]	; (8002368 <ETH_SetMACConfig+0x15c>)
 8002222:	4013      	ands	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	7c1b      	ldrb	r3, [r3, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d102      	bne.n	8002234 <ETH_SetMACConfig+0x28>
 800222e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002232:	e000      	b.n	8002236 <ETH_SetMACConfig+0x2a>
 8002234:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	7c5b      	ldrb	r3, [r3, #17]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <ETH_SetMACConfig+0x38>
 800223e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002242:	e000      	b.n	8002246 <ETH_SetMACConfig+0x3a>
 8002244:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002246:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800224c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	7fdb      	ldrb	r3, [r3, #31]
 8002252:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002254:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800225a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	7f92      	ldrb	r2, [r2, #30]
 8002260:	2a00      	cmp	r2, #0
 8002262:	d102      	bne.n	800226a <ETH_SetMACConfig+0x5e>
 8002264:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002268:	e000      	b.n	800226c <ETH_SetMACConfig+0x60>
 800226a:	2200      	movs	r2, #0
                        macconf->Speed |
 800226c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	7f1b      	ldrb	r3, [r3, #28]
 8002272:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002274:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800227a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	791b      	ldrb	r3, [r3, #4]
 8002280:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002282:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	f892 2020 	ldrb.w	r2, [r2, #32]
 800228a:	2a00      	cmp	r2, #0
 800228c:	d102      	bne.n	8002294 <ETH_SetMACConfig+0x88>
 800228e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002292:	e000      	b.n	8002296 <ETH_SetMACConfig+0x8a>
 8002294:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002296:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	7bdb      	ldrb	r3, [r3, #15]
 800229c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800229e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022ac:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022ae:	4313      	orrs	r3, r2
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022c6:	2001      	movs	r0, #1
 80022c8:	f7ff f860 	bl	800138c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	f64f 7341 	movw	r3, #65345	; 0xff41
 80022e2:	4013      	ands	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ea:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80022f2:	2a00      	cmp	r2, #0
 80022f4:	d101      	bne.n	80022fa <ETH_SetMACConfig+0xee>
 80022f6:	2280      	movs	r2, #128	; 0x80
 80022f8:	e000      	b.n	80022fc <ETH_SetMACConfig+0xf0>
 80022fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022fc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002302:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800230a:	2a01      	cmp	r2, #1
 800230c:	d101      	bne.n	8002312 <ETH_SetMACConfig+0x106>
 800230e:	2208      	movs	r2, #8
 8002310:	e000      	b.n	8002314 <ETH_SetMACConfig+0x108>
 8002312:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002314:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800231c:	2a01      	cmp	r2, #1
 800231e:	d101      	bne.n	8002324 <ETH_SetMACConfig+0x118>
 8002320:	2204      	movs	r2, #4
 8002322:	e000      	b.n	8002326 <ETH_SetMACConfig+0x11a>
 8002324:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002326:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800232e:	2a01      	cmp	r2, #1
 8002330:	d101      	bne.n	8002336 <ETH_SetMACConfig+0x12a>
 8002332:	2202      	movs	r2, #2
 8002334:	e000      	b.n	8002338 <ETH_SetMACConfig+0x12c>
 8002336:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002338:	4313      	orrs	r3, r2
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4313      	orrs	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002350:	2001      	movs	r0, #1
 8002352:	f7ff f81b 	bl	800138c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	619a      	str	r2, [r3, #24]
}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	ff20810f 	.word	0xff20810f

0800236c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4b3d      	ldr	r3, [pc, #244]	; (800247c <ETH_SetDMAConfig+0x110>)
 8002386:	4013      	ands	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	7b1b      	ldrb	r3, [r3, #12]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d102      	bne.n	8002398 <ETH_SetDMAConfig+0x2c>
 8002392:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002396:	e000      	b.n	800239a <ETH_SetDMAConfig+0x2e>
 8002398:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	7b5b      	ldrb	r3, [r3, #13]
 800239e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023a0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	7f52      	ldrb	r2, [r2, #29]
 80023a6:	2a00      	cmp	r2, #0
 80023a8:	d102      	bne.n	80023b0 <ETH_SetDMAConfig+0x44>
 80023aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80023ae:	e000      	b.n	80023b2 <ETH_SetDMAConfig+0x46>
 80023b0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023b2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	7b9b      	ldrb	r3, [r3, #14]
 80023b8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023ba:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023c0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	7f1b      	ldrb	r3, [r3, #28]
 80023c6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80023c8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	7f9b      	ldrb	r3, [r3, #30]
 80023ce:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80023d0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80023d6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023de:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023e0:	4313      	orrs	r3, r2
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f0:	461a      	mov	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002402:	2001      	movs	r0, #1
 8002404:	f7fe ffc2 	bl	800138c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002410:	461a      	mov	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	791b      	ldrb	r3, [r3, #4]
 800241a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002420:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002426:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800242c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002434:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002436:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800243e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002444:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800244e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002452:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002460:	2001      	movs	r0, #1
 8002462:	f7fe ff93 	bl	800138c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246e:	461a      	mov	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6013      	str	r3, [r2, #0]
}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	f8de3f23 	.word	0xf8de3f23

08002480 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b0a6      	sub	sp, #152	; 0x98
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002488:	2301      	movs	r3, #1
 800248a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800248e:	2301      	movs	r3, #1
 8002490:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002494:	2300      	movs	r3, #0
 8002496:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002498:	2300      	movs	r3, #0
 800249a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800249e:	2301      	movs	r3, #1
 80024a0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80024aa:	2301      	movs	r3, #1
 80024ac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80024bc:	2300      	movs	r3, #0
 80024be:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80024e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024e6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80024f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024f8:	4619      	mov	r1, r3
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff fe86 	bl	800220c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002500:	2301      	movs	r3, #1
 8002502:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002504:	2301      	movs	r3, #1
 8002506:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002508:	2301      	movs	r3, #1
 800250a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800250e:	2301      	movs	r3, #1
 8002510:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002516:	2300      	movs	r3, #0
 8002518:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800251c:	2300      	movs	r3, #0
 800251e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002522:	2300      	movs	r3, #0
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002526:	2301      	movs	r3, #1
 8002528:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800252c:	2301      	movs	r3, #1
 800252e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002534:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002536:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800253a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800253c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002540:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002542:	2301      	movs	r3, #1
 8002544:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002548:	2300      	movs	r3, #0
 800254a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800254c:	2300      	movs	r3, #0
 800254e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002550:	f107 0308 	add.w	r3, r7, #8
 8002554:	4619      	mov	r1, r3
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ff08 	bl	800236c <ETH_SetDMAConfig>
}
 800255c:	bf00      	nop
 800255e:	3798      	adds	r7, #152	; 0x98
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3305      	adds	r3, #5
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	021b      	lsls	r3, r3, #8
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	3204      	adds	r2, #4
 800257c:	7812      	ldrb	r2, [r2, #0]
 800257e:	4313      	orrs	r3, r2
 8002580:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <ETH_MACAddressConfig+0x68>)
 8002586:	4413      	add	r3, r2
 8002588:	461a      	mov	r2, r3
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3303      	adds	r3, #3
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	061a      	lsls	r2, r3, #24
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3302      	adds	r3, #2
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	041b      	lsls	r3, r3, #16
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3301      	adds	r3, #1
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	021b      	lsls	r3, r3, #8
 80025a8:	4313      	orrs	r3, r2
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	7812      	ldrb	r2, [r2, #0]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <ETH_MACAddressConfig+0x6c>)
 80025b6:	4413      	add	r3, r2
 80025b8:	461a      	mov	r2, r3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	6013      	str	r3, [r2, #0]
}
 80025be:	bf00      	nop
 80025c0:	371c      	adds	r7, #28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40028040 	.word	0x40028040
 80025d0:	40028044 	.word	0x40028044

080025d4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	e03e      	b.n	8002660 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68d9      	ldr	r1, [r3, #12]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	440b      	add	r3, r1
 80025f2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2200      	movs	r2, #0
 80025fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2200      	movs	r2, #0
 800260a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	3206      	adds	r2, #6
 8002614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d80c      	bhi.n	8002644 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68d9      	ldr	r1, [r3, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	440b      	add	r3, r1
 800263c:	461a      	mov	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	e004      	b.n	800264e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	461a      	mov	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3301      	adds	r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b03      	cmp	r3, #3
 8002664:	d9bd      	bls.n	80025e2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002678:	611a      	str	r2, [r3, #16]
}
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002686:	b480      	push	{r7}
 8002688:	b085      	sub	sp, #20
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	e046      	b.n	8002722 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6919      	ldr	r1, [r3, #16]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	440b      	add	r3, r1
 80026a4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2200      	movs	r2, #0
 80026b0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2200      	movs	r2, #0
 80026bc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2200      	movs	r2, #0
 80026c2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2200      	movs	r2, #0
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80026d0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80026d8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80026e6:	68b9      	ldr	r1, [r7, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	3212      	adds	r2, #18
 80026ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d80c      	bhi.n	8002712 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6919      	ldr	r1, [r3, #16]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	440b      	add	r3, r1
 800270a:	461a      	mov	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	60da      	str	r2, [r3, #12]
 8002710:	e004      	b.n	800271c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	461a      	mov	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3301      	adds	r3, #1
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d9b5      	bls.n	8002694 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002752:	60da      	str	r2, [r3, #12]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002760:	b480      	push	{r7}
 8002762:	b08d      	sub	sp, #52	; 0x34
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	3318      	adds	r3, #24
 8002770:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800278a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800279e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027a2:	d007      	beq.n	80027b4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a8:	3304      	adds	r3, #4
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80027b4:	2302      	movs	r3, #2
 80027b6:	e103      	b.n	80029c0 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	3301      	adds	r3, #1
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80027d0:	f023 031f 	bic.w	r3, r3, #31
 80027d4:	69fa      	ldr	r2, [r7, #28]
 80027d6:	6852      	ldr	r2, [r2, #4]
 80027d8:	431a      	orrs	r2, r3
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d008      	beq.n	80027fc <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	431a      	orrs	r2, r3
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800283e:	f3bf 8f5f 	dmb	sy
}
 8002842:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002850:	e084      	b.n	800295c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d006      	beq.n	8002872 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	e005      	b.n	800287e <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800287e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002880:	3301      	adds	r3, #1
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002886:	2b03      	cmp	r3, #3
 8002888:	d902      	bls.n	8002890 <ETH_Prepare_Tx_Descriptors+0x130>
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	3b04      	subs	r3, #4
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002898:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028b2:	d007      	beq.n	80028c4 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b8:	3304      	adds	r3, #4
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d029      	beq.n	8002918 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028d6:	e019      	b.n	800290c <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80028d8:	f3bf 8f5f 	dmb	sy
}
 80028dc:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80028ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ec:	3301      	adds	r3, #1
 80028ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d902      	bls.n	80028fc <ETH_Prepare_Tx_Descriptors+0x19c>
 80028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f8:	3b04      	subs	r3, #4
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002904:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002908:	3301      	adds	r3, #1
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
 800290c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	429a      	cmp	r2, r3
 8002912:	d3e1      	bcc.n	80028d8 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002914:	2302      	movs	r3, #2
 8002916:	e053      	b.n	80029c0 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	3301      	adds	r3, #1
 800291c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002936:	f023 031f 	bic.w	r3, r3, #31
 800293a:	69fa      	ldr	r2, [r7, #28]
 800293c:	6852      	ldr	r2, [r2, #4]
 800293e:	431a      	orrs	r2, r3
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	3301      	adds	r3, #1
 8002948:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800294a:	f3bf 8f5f 	dmb	sy
}
 800294e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	f47f af76 	bne.w	8002852 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d006      	beq.n	800297a <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	e005      	b.n	8002986 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002996:	6979      	ldr	r1, [r7, #20]
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	3304      	adds	r3, #4
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029a6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80029a8:	b672      	cpsid	i
}
 80029aa:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	4413      	add	r3, r2
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80029ba:	b662      	cpsie	i
}
 80029bc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3734      	adds	r7, #52	; 0x34
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	; 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	e16b      	b.n	8002cc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029e8:	2201      	movs	r2, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	f040 815a 	bne.w	8002cba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d005      	beq.n	8002a1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d130      	bne.n	8002a80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	2203      	movs	r2, #3
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a54:	2201      	movs	r2, #1
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 0201 	and.w	r2, r3, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d017      	beq.n	8002abc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d123      	bne.n	8002b10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	08da      	lsrs	r2, r3, #3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3208      	adds	r2, #8
 8002ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	220f      	movs	r2, #15
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	08da      	lsrs	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3208      	adds	r2, #8
 8002b0a:	69b9      	ldr	r1, [r7, #24]
 8002b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0203 	and.w	r2, r3, #3
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80b4 	beq.w	8002cba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	4b60      	ldr	r3, [pc, #384]	; (8002cd8 <HAL_GPIO_Init+0x30c>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	4a5f      	ldr	r2, [pc, #380]	; (8002cd8 <HAL_GPIO_Init+0x30c>)
 8002b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b60:	6453      	str	r3, [r2, #68]	; 0x44
 8002b62:	4b5d      	ldr	r3, [pc, #372]	; (8002cd8 <HAL_GPIO_Init+0x30c>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b6e:	4a5b      	ldr	r2, [pc, #364]	; (8002cdc <HAL_GPIO_Init+0x310>)
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	089b      	lsrs	r3, r3, #2
 8002b74:	3302      	adds	r3, #2
 8002b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	220f      	movs	r2, #15
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a52      	ldr	r2, [pc, #328]	; (8002ce0 <HAL_GPIO_Init+0x314>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d02b      	beq.n	8002bf2 <HAL_GPIO_Init+0x226>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a51      	ldr	r2, [pc, #324]	; (8002ce4 <HAL_GPIO_Init+0x318>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d025      	beq.n	8002bee <HAL_GPIO_Init+0x222>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a50      	ldr	r2, [pc, #320]	; (8002ce8 <HAL_GPIO_Init+0x31c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d01f      	beq.n	8002bea <HAL_GPIO_Init+0x21e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a4f      	ldr	r2, [pc, #316]	; (8002cec <HAL_GPIO_Init+0x320>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d019      	beq.n	8002be6 <HAL_GPIO_Init+0x21a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a4e      	ldr	r2, [pc, #312]	; (8002cf0 <HAL_GPIO_Init+0x324>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d013      	beq.n	8002be2 <HAL_GPIO_Init+0x216>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a4d      	ldr	r2, [pc, #308]	; (8002cf4 <HAL_GPIO_Init+0x328>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d00d      	beq.n	8002bde <HAL_GPIO_Init+0x212>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4c      	ldr	r2, [pc, #304]	; (8002cf8 <HAL_GPIO_Init+0x32c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d007      	beq.n	8002bda <HAL_GPIO_Init+0x20e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a4b      	ldr	r2, [pc, #300]	; (8002cfc <HAL_GPIO_Init+0x330>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d101      	bne.n	8002bd6 <HAL_GPIO_Init+0x20a>
 8002bd2:	2307      	movs	r3, #7
 8002bd4:	e00e      	b.n	8002bf4 <HAL_GPIO_Init+0x228>
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	e00c      	b.n	8002bf4 <HAL_GPIO_Init+0x228>
 8002bda:	2306      	movs	r3, #6
 8002bdc:	e00a      	b.n	8002bf4 <HAL_GPIO_Init+0x228>
 8002bde:	2305      	movs	r3, #5
 8002be0:	e008      	b.n	8002bf4 <HAL_GPIO_Init+0x228>
 8002be2:	2304      	movs	r3, #4
 8002be4:	e006      	b.n	8002bf4 <HAL_GPIO_Init+0x228>
 8002be6:	2303      	movs	r3, #3
 8002be8:	e004      	b.n	8002bf4 <HAL_GPIO_Init+0x228>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e002      	b.n	8002bf4 <HAL_GPIO_Init+0x228>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <HAL_GPIO_Init+0x228>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	69fa      	ldr	r2, [r7, #28]
 8002bf6:	f002 0203 	and.w	r2, r2, #3
 8002bfa:	0092      	lsls	r2, r2, #2
 8002bfc:	4093      	lsls	r3, r2
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c04:	4935      	ldr	r1, [pc, #212]	; (8002cdc <HAL_GPIO_Init+0x310>)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	089b      	lsrs	r3, r3, #2
 8002c0a:	3302      	adds	r3, #2
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c12:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HAL_GPIO_Init+0x334>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c36:	4a32      	ldr	r2, [pc, #200]	; (8002d00 <HAL_GPIO_Init+0x334>)
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c3c:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <HAL_GPIO_Init+0x334>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c60:	4a27      	ldr	r2, [pc, #156]	; (8002d00 <HAL_GPIO_Init+0x334>)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c66:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <HAL_GPIO_Init+0x334>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c8a:	4a1d      	ldr	r2, [pc, #116]	; (8002d00 <HAL_GPIO_Init+0x334>)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_GPIO_Init+0x334>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cb4:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <HAL_GPIO_Init+0x334>)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	61fb      	str	r3, [r7, #28]
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	2b0f      	cmp	r3, #15
 8002cc4:	f67f ae90 	bls.w	80029e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	3724      	adds	r7, #36	; 0x24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40013800 	.word	0x40013800
 8002ce0:	40020000 	.word	0x40020000
 8002ce4:	40020400 	.word	0x40020400
 8002ce8:	40020800 	.word	0x40020800
 8002cec:	40020c00 	.word	0x40020c00
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40021400 	.word	0x40021400
 8002cf8:	40021800 	.word	0x40021800
 8002cfc:	40021c00 	.word	0x40021c00
 8002d00:	40013c00 	.word	0x40013c00

08002d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	807b      	strh	r3, [r7, #2]
 8002d10:	4613      	mov	r3, r2
 8002d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d14:	787b      	ldrb	r3, [r7, #1]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d1a:	887a      	ldrh	r2, [r7, #2]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d20:	e003      	b.n	8002d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d22:	887b      	ldrh	r3, [r7, #2]
 8002d24:	041a      	lsls	r2, r3, #16
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	619a      	str	r2, [r3, #24]
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d48:	887a      	ldrh	r2, [r7, #2]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	041a      	lsls	r2, r3, #16
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	43d9      	mvns	r1, r3
 8002d54:	887b      	ldrh	r3, [r7, #2]
 8002d56:	400b      	ands	r3, r1
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	619a      	str	r2, [r3, #24]
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
	...

08002d6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e267      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d075      	beq.n	8002e76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d8a:	4b88      	ldr	r3, [pc, #544]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d00c      	beq.n	8002db0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d96:	4b85      	ldr	r3, [pc, #532]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d112      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da2:	4b82      	ldr	r3, [pc, #520]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dae:	d10b      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	4b7e      	ldr	r3, [pc, #504]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d05b      	beq.n	8002e74 <HAL_RCC_OscConfig+0x108>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d157      	bne.n	8002e74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e242      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd0:	d106      	bne.n	8002de0 <HAL_RCC_OscConfig+0x74>
 8002dd2:	4b76      	ldr	r3, [pc, #472]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a75      	ldr	r2, [pc, #468]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e01d      	b.n	8002e1c <HAL_RCC_OscConfig+0xb0>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x98>
 8002dea:	4b70      	ldr	r3, [pc, #448]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a6f      	ldr	r2, [pc, #444]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	4b6d      	ldr	r3, [pc, #436]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a6c      	ldr	r2, [pc, #432]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e00b      	b.n	8002e1c <HAL_RCC_OscConfig+0xb0>
 8002e04:	4b69      	ldr	r3, [pc, #420]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a68      	ldr	r2, [pc, #416]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	4b66      	ldr	r3, [pc, #408]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a65      	ldr	r2, [pc, #404]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d013      	beq.n	8002e4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fe faa6 	bl	8001374 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e2c:	f7fe faa2 	bl	8001374 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e207      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	4b5b      	ldr	r3, [pc, #364]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0xc0>
 8002e4a:	e014      	b.n	8002e76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fa92 	bl	8001374 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e54:	f7fe fa8e 	bl	8001374 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	; 0x64
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e1f3      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e66:	4b51      	ldr	r3, [pc, #324]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0xe8>
 8002e72:	e000      	b.n	8002e76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d063      	beq.n	8002f4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e82:	4b4a      	ldr	r3, [pc, #296]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00b      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8e:	4b47      	ldr	r3, [pc, #284]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d11c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9a:	4b44      	ldr	r3, [pc, #272]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d116      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea6:	4b41      	ldr	r3, [pc, #260]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <HAL_RCC_OscConfig+0x152>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d001      	beq.n	8002ebe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e1c7      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebe:	4b3b      	ldr	r3, [pc, #236]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4937      	ldr	r1, [pc, #220]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed2:	e03a      	b.n	8002f4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d020      	beq.n	8002f1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002edc:	4b34      	ldr	r3, [pc, #208]	; (8002fb0 <HAL_RCC_OscConfig+0x244>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee2:	f7fe fa47 	bl	8001374 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eea:	f7fe fa43 	bl	8001374 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e1a8      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efc:	4b2b      	ldr	r3, [pc, #172]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f08:	4b28      	ldr	r3, [pc, #160]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4925      	ldr	r1, [pc, #148]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	600b      	str	r3, [r1, #0]
 8002f1c:	e015      	b.n	8002f4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1e:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <HAL_RCC_OscConfig+0x244>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe fa26 	bl	8001374 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f2c:	f7fe fa22 	bl	8001374 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e187      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3e:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d036      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d016      	beq.n	8002f8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5e:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <HAL_RCC_OscConfig+0x248>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f64:	f7fe fa06 	bl	8001374 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f6c:	f7fe fa02 	bl	8001374 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e167      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x200>
 8002f8a:	e01b      	b.n	8002fc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <HAL_RCC_OscConfig+0x248>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f92:	f7fe f9ef 	bl	8001374 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f98:	e00e      	b.n	8002fb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f9a:	f7fe f9eb 	bl	8001374 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d907      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e150      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	42470000 	.word	0x42470000
 8002fb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb8:	4b88      	ldr	r3, [pc, #544]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8002fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1ea      	bne.n	8002f9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 8097 	beq.w	8003100 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd6:	4b81      	ldr	r3, [pc, #516]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	4b7d      	ldr	r3, [pc, #500]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a7c      	ldr	r2, [pc, #496]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b7a      	ldr	r3, [pc, #488]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffe:	2301      	movs	r3, #1
 8003000:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003002:	4b77      	ldr	r3, [pc, #476]	; (80031e0 <HAL_RCC_OscConfig+0x474>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d118      	bne.n	8003040 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300e:	4b74      	ldr	r3, [pc, #464]	; (80031e0 <HAL_RCC_OscConfig+0x474>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a73      	ldr	r2, [pc, #460]	; (80031e0 <HAL_RCC_OscConfig+0x474>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301a:	f7fe f9ab 	bl	8001374 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7fe f9a7 	bl	8001374 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e10c      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003034:	4b6a      	ldr	r3, [pc, #424]	; (80031e0 <HAL_RCC_OscConfig+0x474>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d106      	bne.n	8003056 <HAL_RCC_OscConfig+0x2ea>
 8003048:	4b64      	ldr	r3, [pc, #400]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	4a63      	ldr	r2, [pc, #396]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6713      	str	r3, [r2, #112]	; 0x70
 8003054:	e01c      	b.n	8003090 <HAL_RCC_OscConfig+0x324>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b05      	cmp	r3, #5
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x30c>
 800305e:	4b5f      	ldr	r3, [pc, #380]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	4a5e      	ldr	r2, [pc, #376]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003064:	f043 0304 	orr.w	r3, r3, #4
 8003068:	6713      	str	r3, [r2, #112]	; 0x70
 800306a:	4b5c      	ldr	r3, [pc, #368]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	4a5b      	ldr	r2, [pc, #364]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	6713      	str	r3, [r2, #112]	; 0x70
 8003076:	e00b      	b.n	8003090 <HAL_RCC_OscConfig+0x324>
 8003078:	4b58      	ldr	r3, [pc, #352]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307c:	4a57      	ldr	r2, [pc, #348]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	6713      	str	r3, [r2, #112]	; 0x70
 8003084:	4b55      	ldr	r3, [pc, #340]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003088:	4a54      	ldr	r2, [pc, #336]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800308a:	f023 0304 	bic.w	r3, r3, #4
 800308e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d015      	beq.n	80030c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003098:	f7fe f96c 	bl	8001374 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309e:	e00a      	b.n	80030b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a0:	f7fe f968 	bl	8001374 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e0cb      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b6:	4b49      	ldr	r3, [pc, #292]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0ee      	beq.n	80030a0 <HAL_RCC_OscConfig+0x334>
 80030c2:	e014      	b.n	80030ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c4:	f7fe f956 	bl	8001374 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ca:	e00a      	b.n	80030e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030cc:	f7fe f952 	bl	8001374 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e0b5      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e2:	4b3e      	ldr	r3, [pc, #248]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 80030e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1ee      	bne.n	80030cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ee:	7dfb      	ldrb	r3, [r7, #23]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d105      	bne.n	8003100 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f4:	4b39      	ldr	r3, [pc, #228]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	4a38      	ldr	r2, [pc, #224]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 80030fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80a1 	beq.w	800324c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800310a:	4b34      	ldr	r3, [pc, #208]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b08      	cmp	r3, #8
 8003114:	d05c      	beq.n	80031d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d141      	bne.n	80031a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311e:	4b31      	ldr	r3, [pc, #196]	; (80031e4 <HAL_RCC_OscConfig+0x478>)
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003124:	f7fe f926 	bl	8001374 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800312c:	f7fe f922 	bl	8001374 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e087      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313e:	4b27      	ldr	r3, [pc, #156]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69da      	ldr	r2, [r3, #28]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	019b      	lsls	r3, r3, #6
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	085b      	lsrs	r3, r3, #1
 8003162:	3b01      	subs	r3, #1
 8003164:	041b      	lsls	r3, r3, #16
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	061b      	lsls	r3, r3, #24
 800316e:	491b      	ldr	r1, [pc, #108]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003170:	4313      	orrs	r3, r2
 8003172:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003174:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <HAL_RCC_OscConfig+0x478>)
 8003176:	2201      	movs	r2, #1
 8003178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317a:	f7fe f8fb 	bl	8001374 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003182:	f7fe f8f7 	bl	8001374 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e05c      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x416>
 80031a0:	e054      	b.n	800324c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <HAL_RCC_OscConfig+0x478>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a8:	f7fe f8e4 	bl	8001374 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fe f8e0 	bl	8001374 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e045      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x444>
 80031ce:	e03d      	b.n	800324c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d107      	bne.n	80031e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e038      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40007000 	.word	0x40007000
 80031e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031e8:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <HAL_RCC_OscConfig+0x4ec>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d028      	beq.n	8003248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003200:	429a      	cmp	r2, r3
 8003202:	d121      	bne.n	8003248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d11a      	bne.n	8003248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003218:	4013      	ands	r3, r2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800321e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003220:	4293      	cmp	r3, r2
 8003222:	d111      	bne.n	8003248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	3b01      	subs	r3, #1
 8003232:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d107      	bne.n	8003248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800

0800325c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0cc      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003270:	4b68      	ldr	r3, [pc, #416]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d90c      	bls.n	8003298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b65      	ldr	r3, [pc, #404]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	4b63      	ldr	r3, [pc, #396]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0b8      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d020      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b0:	4b59      	ldr	r3, [pc, #356]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	4a58      	ldr	r2, [pc, #352]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c8:	4b53      	ldr	r3, [pc, #332]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4a52      	ldr	r2, [pc, #328]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d4:	4b50      	ldr	r3, [pc, #320]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	494d      	ldr	r1, [pc, #308]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d044      	beq.n	800337c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d107      	bne.n	800330a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fa:	4b47      	ldr	r3, [pc, #284]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d119      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e07f      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d003      	beq.n	800331a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003316:	2b03      	cmp	r3, #3
 8003318:	d107      	bne.n	800332a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331a:	4b3f      	ldr	r3, [pc, #252]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e06f      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332a:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e067      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800333a:	4b37      	ldr	r3, [pc, #220]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f023 0203 	bic.w	r2, r3, #3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4934      	ldr	r1, [pc, #208]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	4313      	orrs	r3, r2
 800334a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800334c:	f7fe f812 	bl	8001374 <HAL_GetTick>
 8003350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	e00a      	b.n	800336a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003354:	f7fe f80e 	bl	8001374 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e04f      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336a:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 020c 	and.w	r2, r3, #12
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	429a      	cmp	r2, r3
 800337a:	d1eb      	bne.n	8003354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800337c:	4b25      	ldr	r3, [pc, #148]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d20c      	bcs.n	80033a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338a:	4b22      	ldr	r3, [pc, #136]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e032      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b0:	4b19      	ldr	r3, [pc, #100]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4916      	ldr	r1, [pc, #88]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	490e      	ldr	r1, [pc, #56]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033e2:	f000 f821 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 80033e6:	4602      	mov	r2, r0
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	490a      	ldr	r1, [pc, #40]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 80033f4:	5ccb      	ldrb	r3, [r1, r3]
 80033f6:	fa22 f303 	lsr.w	r3, r2, r3
 80033fa:	4a09      	ldr	r2, [pc, #36]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033fe:	4b09      	ldr	r3, [pc, #36]	; (8003424 <HAL_RCC_ClockConfig+0x1c8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7fd ff72 	bl	80012ec <HAL_InitTick>

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023c00 	.word	0x40023c00
 8003418:	40023800 	.word	0x40023800
 800341c:	08013138 	.word	0x08013138
 8003420:	20000000 	.word	0x20000000
 8003424:	20000004 	.word	0x20000004

08003428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800342c:	b094      	sub	sp, #80	; 0x50
 800342e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	647b      	str	r3, [r7, #68]	; 0x44
 8003434:	2300      	movs	r3, #0
 8003436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003438:	2300      	movs	r3, #0
 800343a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003440:	4b79      	ldr	r3, [pc, #484]	; (8003628 <HAL_RCC_GetSysClockFreq+0x200>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b08      	cmp	r3, #8
 800344a:	d00d      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x40>
 800344c:	2b08      	cmp	r3, #8
 800344e:	f200 80e1 	bhi.w	8003614 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x34>
 8003456:	2b04      	cmp	r3, #4
 8003458:	d003      	beq.n	8003462 <HAL_RCC_GetSysClockFreq+0x3a>
 800345a:	e0db      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b73      	ldr	r3, [pc, #460]	; (800362c <HAL_RCC_GetSysClockFreq+0x204>)
 800345e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003460:	e0db      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003462:	4b73      	ldr	r3, [pc, #460]	; (8003630 <HAL_RCC_GetSysClockFreq+0x208>)
 8003464:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003466:	e0d8      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003468:	4b6f      	ldr	r3, [pc, #444]	; (8003628 <HAL_RCC_GetSysClockFreq+0x200>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003470:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003472:	4b6d      	ldr	r3, [pc, #436]	; (8003628 <HAL_RCC_GetSysClockFreq+0x200>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d063      	beq.n	8003546 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347e:	4b6a      	ldr	r3, [pc, #424]	; (8003628 <HAL_RCC_GetSysClockFreq+0x200>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	099b      	lsrs	r3, r3, #6
 8003484:	2200      	movs	r2, #0
 8003486:	63bb      	str	r3, [r7, #56]	; 0x38
 8003488:	63fa      	str	r2, [r7, #60]	; 0x3c
 800348a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003490:	633b      	str	r3, [r7, #48]	; 0x30
 8003492:	2300      	movs	r3, #0
 8003494:	637b      	str	r3, [r7, #52]	; 0x34
 8003496:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800349a:	4622      	mov	r2, r4
 800349c:	462b      	mov	r3, r5
 800349e:	f04f 0000 	mov.w	r0, #0
 80034a2:	f04f 0100 	mov.w	r1, #0
 80034a6:	0159      	lsls	r1, r3, #5
 80034a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ac:	0150      	lsls	r0, r2, #5
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	4621      	mov	r1, r4
 80034b4:	1a51      	subs	r1, r2, r1
 80034b6:	6139      	str	r1, [r7, #16]
 80034b8:	4629      	mov	r1, r5
 80034ba:	eb63 0301 	sbc.w	r3, r3, r1
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034cc:	4659      	mov	r1, fp
 80034ce:	018b      	lsls	r3, r1, #6
 80034d0:	4651      	mov	r1, sl
 80034d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034d6:	4651      	mov	r1, sl
 80034d8:	018a      	lsls	r2, r1, #6
 80034da:	4651      	mov	r1, sl
 80034dc:	ebb2 0801 	subs.w	r8, r2, r1
 80034e0:	4659      	mov	r1, fp
 80034e2:	eb63 0901 	sbc.w	r9, r3, r1
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034fa:	4690      	mov	r8, r2
 80034fc:	4699      	mov	r9, r3
 80034fe:	4623      	mov	r3, r4
 8003500:	eb18 0303 	adds.w	r3, r8, r3
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	462b      	mov	r3, r5
 8003508:	eb49 0303 	adc.w	r3, r9, r3
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800351a:	4629      	mov	r1, r5
 800351c:	024b      	lsls	r3, r1, #9
 800351e:	4621      	mov	r1, r4
 8003520:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003524:	4621      	mov	r1, r4
 8003526:	024a      	lsls	r2, r1, #9
 8003528:	4610      	mov	r0, r2
 800352a:	4619      	mov	r1, r3
 800352c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800352e:	2200      	movs	r2, #0
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
 8003532:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003534:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003538:	f7fc fe9a 	bl	8000270 <__aeabi_uldivmod>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4613      	mov	r3, r2
 8003542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003544:	e058      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003546:	4b38      	ldr	r3, [pc, #224]	; (8003628 <HAL_RCC_GetSysClockFreq+0x200>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	099b      	lsrs	r3, r3, #6
 800354c:	2200      	movs	r2, #0
 800354e:	4618      	mov	r0, r3
 8003550:	4611      	mov	r1, r2
 8003552:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003556:	623b      	str	r3, [r7, #32]
 8003558:	2300      	movs	r3, #0
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
 800355c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003560:	4642      	mov	r2, r8
 8003562:	464b      	mov	r3, r9
 8003564:	f04f 0000 	mov.w	r0, #0
 8003568:	f04f 0100 	mov.w	r1, #0
 800356c:	0159      	lsls	r1, r3, #5
 800356e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003572:	0150      	lsls	r0, r2, #5
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4641      	mov	r1, r8
 800357a:	ebb2 0a01 	subs.w	sl, r2, r1
 800357e:	4649      	mov	r1, r9
 8003580:	eb63 0b01 	sbc.w	fp, r3, r1
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003590:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003594:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003598:	ebb2 040a 	subs.w	r4, r2, sl
 800359c:	eb63 050b 	sbc.w	r5, r3, fp
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	00eb      	lsls	r3, r5, #3
 80035aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ae:	00e2      	lsls	r2, r4, #3
 80035b0:	4614      	mov	r4, r2
 80035b2:	461d      	mov	r5, r3
 80035b4:	4643      	mov	r3, r8
 80035b6:	18e3      	adds	r3, r4, r3
 80035b8:	603b      	str	r3, [r7, #0]
 80035ba:	464b      	mov	r3, r9
 80035bc:	eb45 0303 	adc.w	r3, r5, r3
 80035c0:	607b      	str	r3, [r7, #4]
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ce:	4629      	mov	r1, r5
 80035d0:	028b      	lsls	r3, r1, #10
 80035d2:	4621      	mov	r1, r4
 80035d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035d8:	4621      	mov	r1, r4
 80035da:	028a      	lsls	r2, r1, #10
 80035dc:	4610      	mov	r0, r2
 80035de:	4619      	mov	r1, r3
 80035e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e2:	2200      	movs	r2, #0
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	61fa      	str	r2, [r7, #28]
 80035e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ec:	f7fc fe40 	bl	8000270 <__aeabi_uldivmod>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4613      	mov	r3, r2
 80035f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCC_GetSysClockFreq+0x200>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	0c1b      	lsrs	r3, r3, #16
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	3301      	adds	r3, #1
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003608:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800360a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800360c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003610:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003612:	e002      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <HAL_RCC_GetSysClockFreq+0x204>)
 8003616:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800361a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800361c:	4618      	mov	r0, r3
 800361e:	3750      	adds	r7, #80	; 0x50
 8003620:	46bd      	mov	sp, r7
 8003622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800
 800362c:	00f42400 	.word	0x00f42400
 8003630:	007a1200 	.word	0x007a1200

08003634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003638:	4b03      	ldr	r3, [pc, #12]	; (8003648 <HAL_RCC_GetHCLKFreq+0x14>)
 800363a:	681b      	ldr	r3, [r3, #0]
}
 800363c:	4618      	mov	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000000 	.word	0x20000000

0800364c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e041      	b.n	80036e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fd fb4c 	bl	8000d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3304      	adds	r3, #4
 8003688:	4619      	mov	r1, r3
 800368a:	4610      	mov	r0, r2
 800368c:	f000 fa24 	bl	8003ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d122      	bne.n	8003746 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b02      	cmp	r3, #2
 800370c:	d11b      	bne.n	8003746 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f06f 0202 	mvn.w	r2, #2
 8003716:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f9b5 	bl	8003a9c <HAL_TIM_IC_CaptureCallback>
 8003732:	e005      	b.n	8003740 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f9a7 	bl	8003a88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f9b8 	bl	8003ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b04      	cmp	r3, #4
 8003752:	d122      	bne.n	800379a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b04      	cmp	r3, #4
 8003760:	d11b      	bne.n	800379a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f06f 0204 	mvn.w	r2, #4
 800376a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f98b 	bl	8003a9c <HAL_TIM_IC_CaptureCallback>
 8003786:	e005      	b.n	8003794 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f97d 	bl	8003a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f98e 	bl	8003ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d122      	bne.n	80037ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d11b      	bne.n	80037ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f06f 0208 	mvn.w	r2, #8
 80037be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2204      	movs	r2, #4
 80037c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f961 	bl	8003a9c <HAL_TIM_IC_CaptureCallback>
 80037da:	e005      	b.n	80037e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f953 	bl	8003a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f964 	bl	8003ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d122      	bne.n	8003842 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b10      	cmp	r3, #16
 8003808:	d11b      	bne.n	8003842 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f06f 0210 	mvn.w	r2, #16
 8003812:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2208      	movs	r2, #8
 8003818:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f937 	bl	8003a9c <HAL_TIM_IC_CaptureCallback>
 800382e:	e005      	b.n	800383c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f929 	bl	8003a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f93a 	bl	8003ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	d10e      	bne.n	800386e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b01      	cmp	r3, #1
 800385c:	d107      	bne.n	800386e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f06f 0201 	mvn.w	r2, #1
 8003866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7fc ff95 	bl	8000798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003878:	2b80      	cmp	r3, #128	; 0x80
 800387a:	d10e      	bne.n	800389a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003886:	2b80      	cmp	r3, #128	; 0x80
 8003888:	d107      	bne.n	800389a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fadf 	bl	8003e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a4:	2b40      	cmp	r3, #64	; 0x40
 80038a6:	d10e      	bne.n	80038c6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b2:	2b40      	cmp	r3, #64	; 0x40
 80038b4:	d107      	bne.n	80038c6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f8ff 	bl	8003ac4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d10e      	bne.n	80038f2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b20      	cmp	r3, #32
 80038e0:	d107      	bne.n	80038f2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f06f 0220 	mvn.w	r2, #32
 80038ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 faa9 	bl	8003e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_TIM_ConfigClockSource+0x1c>
 8003912:	2302      	movs	r3, #2
 8003914:	e0b4      	b.n	8003a80 <HAL_TIM_ConfigClockSource+0x186>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2202      	movs	r2, #2
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003934:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800393c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800394e:	d03e      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0xd4>
 8003950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003954:	f200 8087 	bhi.w	8003a66 <HAL_TIM_ConfigClockSource+0x16c>
 8003958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395c:	f000 8086 	beq.w	8003a6c <HAL_TIM_ConfigClockSource+0x172>
 8003960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003964:	d87f      	bhi.n	8003a66 <HAL_TIM_ConfigClockSource+0x16c>
 8003966:	2b70      	cmp	r3, #112	; 0x70
 8003968:	d01a      	beq.n	80039a0 <HAL_TIM_ConfigClockSource+0xa6>
 800396a:	2b70      	cmp	r3, #112	; 0x70
 800396c:	d87b      	bhi.n	8003a66 <HAL_TIM_ConfigClockSource+0x16c>
 800396e:	2b60      	cmp	r3, #96	; 0x60
 8003970:	d050      	beq.n	8003a14 <HAL_TIM_ConfigClockSource+0x11a>
 8003972:	2b60      	cmp	r3, #96	; 0x60
 8003974:	d877      	bhi.n	8003a66 <HAL_TIM_ConfigClockSource+0x16c>
 8003976:	2b50      	cmp	r3, #80	; 0x50
 8003978:	d03c      	beq.n	80039f4 <HAL_TIM_ConfigClockSource+0xfa>
 800397a:	2b50      	cmp	r3, #80	; 0x50
 800397c:	d873      	bhi.n	8003a66 <HAL_TIM_ConfigClockSource+0x16c>
 800397e:	2b40      	cmp	r3, #64	; 0x40
 8003980:	d058      	beq.n	8003a34 <HAL_TIM_ConfigClockSource+0x13a>
 8003982:	2b40      	cmp	r3, #64	; 0x40
 8003984:	d86f      	bhi.n	8003a66 <HAL_TIM_ConfigClockSource+0x16c>
 8003986:	2b30      	cmp	r3, #48	; 0x30
 8003988:	d064      	beq.n	8003a54 <HAL_TIM_ConfigClockSource+0x15a>
 800398a:	2b30      	cmp	r3, #48	; 0x30
 800398c:	d86b      	bhi.n	8003a66 <HAL_TIM_ConfigClockSource+0x16c>
 800398e:	2b20      	cmp	r3, #32
 8003990:	d060      	beq.n	8003a54 <HAL_TIM_ConfigClockSource+0x15a>
 8003992:	2b20      	cmp	r3, #32
 8003994:	d867      	bhi.n	8003a66 <HAL_TIM_ConfigClockSource+0x16c>
 8003996:	2b00      	cmp	r3, #0
 8003998:	d05c      	beq.n	8003a54 <HAL_TIM_ConfigClockSource+0x15a>
 800399a:	2b10      	cmp	r3, #16
 800399c:	d05a      	beq.n	8003a54 <HAL_TIM_ConfigClockSource+0x15a>
 800399e:	e062      	b.n	8003a66 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6818      	ldr	r0, [r3, #0]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	6899      	ldr	r1, [r3, #8]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f000 f9ac 	bl	8003d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	609a      	str	r2, [r3, #8]
      break;
 80039cc:	e04f      	b.n	8003a6e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	6899      	ldr	r1, [r3, #8]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f000 f995 	bl	8003d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039f0:	609a      	str	r2, [r3, #8]
      break;
 80039f2:	e03c      	b.n	8003a6e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6818      	ldr	r0, [r3, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	6859      	ldr	r1, [r3, #4]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	461a      	mov	r2, r3
 8003a02:	f000 f909 	bl	8003c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2150      	movs	r1, #80	; 0x50
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 f962 	bl	8003cd6 <TIM_ITRx_SetConfig>
      break;
 8003a12:	e02c      	b.n	8003a6e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	6859      	ldr	r1, [r3, #4]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	461a      	mov	r2, r3
 8003a22:	f000 f928 	bl	8003c76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2160      	movs	r1, #96	; 0x60
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 f952 	bl	8003cd6 <TIM_ITRx_SetConfig>
      break;
 8003a32:	e01c      	b.n	8003a6e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	6859      	ldr	r1, [r3, #4]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	461a      	mov	r2, r3
 8003a42:	f000 f8e9 	bl	8003c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2140      	movs	r1, #64	; 0x40
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 f942 	bl	8003cd6 <TIM_ITRx_SetConfig>
      break;
 8003a52:	e00c      	b.n	8003a6e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4610      	mov	r0, r2
 8003a60:	f000 f939 	bl	8003cd6 <TIM_ITRx_SetConfig>
      break;
 8003a64:	e003      	b.n	8003a6e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
      break;
 8003a6a:	e000      	b.n	8003a6e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a40      	ldr	r2, [pc, #256]	; (8003bec <TIM_Base_SetConfig+0x114>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d013      	beq.n	8003b18 <TIM_Base_SetConfig+0x40>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af6:	d00f      	beq.n	8003b18 <TIM_Base_SetConfig+0x40>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a3d      	ldr	r2, [pc, #244]	; (8003bf0 <TIM_Base_SetConfig+0x118>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00b      	beq.n	8003b18 <TIM_Base_SetConfig+0x40>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a3c      	ldr	r2, [pc, #240]	; (8003bf4 <TIM_Base_SetConfig+0x11c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d007      	beq.n	8003b18 <TIM_Base_SetConfig+0x40>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a3b      	ldr	r2, [pc, #236]	; (8003bf8 <TIM_Base_SetConfig+0x120>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d003      	beq.n	8003b18 <TIM_Base_SetConfig+0x40>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a3a      	ldr	r2, [pc, #232]	; (8003bfc <TIM_Base_SetConfig+0x124>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d108      	bne.n	8003b2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a2f      	ldr	r2, [pc, #188]	; (8003bec <TIM_Base_SetConfig+0x114>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d02b      	beq.n	8003b8a <TIM_Base_SetConfig+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b38:	d027      	beq.n	8003b8a <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a2c      	ldr	r2, [pc, #176]	; (8003bf0 <TIM_Base_SetConfig+0x118>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d023      	beq.n	8003b8a <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a2b      	ldr	r2, [pc, #172]	; (8003bf4 <TIM_Base_SetConfig+0x11c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d01f      	beq.n	8003b8a <TIM_Base_SetConfig+0xb2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a2a      	ldr	r2, [pc, #168]	; (8003bf8 <TIM_Base_SetConfig+0x120>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d01b      	beq.n	8003b8a <TIM_Base_SetConfig+0xb2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a29      	ldr	r2, [pc, #164]	; (8003bfc <TIM_Base_SetConfig+0x124>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d017      	beq.n	8003b8a <TIM_Base_SetConfig+0xb2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a28      	ldr	r2, [pc, #160]	; (8003c00 <TIM_Base_SetConfig+0x128>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d013      	beq.n	8003b8a <TIM_Base_SetConfig+0xb2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a27      	ldr	r2, [pc, #156]	; (8003c04 <TIM_Base_SetConfig+0x12c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00f      	beq.n	8003b8a <TIM_Base_SetConfig+0xb2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a26      	ldr	r2, [pc, #152]	; (8003c08 <TIM_Base_SetConfig+0x130>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00b      	beq.n	8003b8a <TIM_Base_SetConfig+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a25      	ldr	r2, [pc, #148]	; (8003c0c <TIM_Base_SetConfig+0x134>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d007      	beq.n	8003b8a <TIM_Base_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a24      	ldr	r2, [pc, #144]	; (8003c10 <TIM_Base_SetConfig+0x138>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d003      	beq.n	8003b8a <TIM_Base_SetConfig+0xb2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a23      	ldr	r2, [pc, #140]	; (8003c14 <TIM_Base_SetConfig+0x13c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d108      	bne.n	8003b9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	; (8003bec <TIM_Base_SetConfig+0x114>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d003      	beq.n	8003bd0 <TIM_Base_SetConfig+0xf8>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <TIM_Base_SetConfig+0x124>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d103      	bne.n	8003bd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	615a      	str	r2, [r3, #20]
}
 8003bde:	bf00      	nop
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40010000 	.word	0x40010000
 8003bf0:	40000400 	.word	0x40000400
 8003bf4:	40000800 	.word	0x40000800
 8003bf8:	40000c00 	.word	0x40000c00
 8003bfc:	40010400 	.word	0x40010400
 8003c00:	40014000 	.word	0x40014000
 8003c04:	40014400 	.word	0x40014400
 8003c08:	40014800 	.word	0x40014800
 8003c0c:	40001800 	.word	0x40001800
 8003c10:	40001c00 	.word	0x40001c00
 8003c14:	40002000 	.word	0x40002000

08003c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	f023 0201 	bic.w	r2, r3, #1
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f023 030a 	bic.w	r3, r3, #10
 8003c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	621a      	str	r2, [r3, #32]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b087      	sub	sp, #28
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	f023 0210 	bic.w	r2, r3, #16
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	031b      	lsls	r3, r3, #12
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	621a      	str	r2, [r3, #32]
}
 8003cca:	bf00      	nop
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b085      	sub	sp, #20
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f043 0307 	orr.w	r3, r3, #7
 8003cf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	609a      	str	r2, [r3, #8]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	021a      	lsls	r2, r3, #8
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	609a      	str	r2, [r3, #8]
}
 8003d40:	bf00      	nop
 8003d42:	371c      	adds	r7, #28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e05a      	b.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a21      	ldr	r2, [pc, #132]	; (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d022      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db0:	d01d      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d018      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1b      	ldr	r2, [pc, #108]	; (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d013      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1a      	ldr	r2, [pc, #104]	; (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00e      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a18      	ldr	r2, [pc, #96]	; (8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d009      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a17      	ldr	r2, [pc, #92]	; (8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d004      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a15      	ldr	r2, [pc, #84]	; (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d10c      	bne.n	8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003df4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40010000 	.word	0x40010000
 8003e2c:	40000400 	.word	0x40000400
 8003e30:	40000800 	.word	0x40000800
 8003e34:	40000c00 	.word	0x40000c00
 8003e38:	40010400 	.word	0x40010400
 8003e3c:	40014000 	.word	0x40014000
 8003e40:	40001800 	.word	0x40001800

08003e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003e72:	4b8d      	ldr	r3, [pc, #564]	; (80040a8 <MX_LWIP_Init+0x23c>)
 8003e74:	22c0      	movs	r2, #192	; 0xc0
 8003e76:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003e78:	4b8b      	ldr	r3, [pc, #556]	; (80040a8 <MX_LWIP_Init+0x23c>)
 8003e7a:	22a8      	movs	r2, #168	; 0xa8
 8003e7c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8003e7e:	4b8a      	ldr	r3, [pc, #552]	; (80040a8 <MX_LWIP_Init+0x23c>)
 8003e80:	2201      	movs	r2, #1
 8003e82:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8003e84:	4b88      	ldr	r3, [pc, #544]	; (80040a8 <MX_LWIP_Init+0x23c>)
 8003e86:	226f      	movs	r2, #111	; 0x6f
 8003e88:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003e8a:	4b88      	ldr	r3, [pc, #544]	; (80040ac <MX_LWIP_Init+0x240>)
 8003e8c:	22ff      	movs	r2, #255	; 0xff
 8003e8e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003e90:	4b86      	ldr	r3, [pc, #536]	; (80040ac <MX_LWIP_Init+0x240>)
 8003e92:	22ff      	movs	r2, #255	; 0xff
 8003e94:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003e96:	4b85      	ldr	r3, [pc, #532]	; (80040ac <MX_LWIP_Init+0x240>)
 8003e98:	22ff      	movs	r2, #255	; 0xff
 8003e9a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003e9c:	4b83      	ldr	r3, [pc, #524]	; (80040ac <MX_LWIP_Init+0x240>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003ea2:	4b83      	ldr	r3, [pc, #524]	; (80040b0 <MX_LWIP_Init+0x244>)
 8003ea4:	22c0      	movs	r2, #192	; 0xc0
 8003ea6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003ea8:	4b81      	ldr	r3, [pc, #516]	; (80040b0 <MX_LWIP_Init+0x244>)
 8003eaa:	22a8      	movs	r2, #168	; 0xa8
 8003eac:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8003eae:	4b80      	ldr	r3, [pc, #512]	; (80040b0 <MX_LWIP_Init+0x244>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 111;
 8003eb4:	4b7e      	ldr	r3, [pc, #504]	; (80040b0 <MX_LWIP_Init+0x244>)
 8003eb6:	226f      	movs	r2, #111	; 0x6f
 8003eb8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003eba:	f000 fd74 	bl	80049a6 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003ebe:	4b7a      	ldr	r3, [pc, #488]	; (80040a8 <MX_LWIP_Init+0x23c>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	061a      	lsls	r2, r3, #24
 8003ec4:	4b78      	ldr	r3, [pc, #480]	; (80040a8 <MX_LWIP_Init+0x23c>)
 8003ec6:	785b      	ldrb	r3, [r3, #1]
 8003ec8:	041b      	lsls	r3, r3, #16
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	4b76      	ldr	r3, [pc, #472]	; (80040a8 <MX_LWIP_Init+0x23c>)
 8003ece:	789b      	ldrb	r3, [r3, #2]
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	4a74      	ldr	r2, [pc, #464]	; (80040a8 <MX_LWIP_Init+0x23c>)
 8003ed6:	78d2      	ldrb	r2, [r2, #3]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	061a      	lsls	r2, r3, #24
 8003edc:	4b72      	ldr	r3, [pc, #456]	; (80040a8 <MX_LWIP_Init+0x23c>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	0619      	lsls	r1, r3, #24
 8003ee2:	4b71      	ldr	r3, [pc, #452]	; (80040a8 <MX_LWIP_Init+0x23c>)
 8003ee4:	785b      	ldrb	r3, [r3, #1]
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	4319      	orrs	r1, r3
 8003eea:	4b6f      	ldr	r3, [pc, #444]	; (80040a8 <MX_LWIP_Init+0x23c>)
 8003eec:	789b      	ldrb	r3, [r3, #2]
 8003eee:	021b      	lsls	r3, r3, #8
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	496d      	ldr	r1, [pc, #436]	; (80040a8 <MX_LWIP_Init+0x23c>)
 8003ef4:	78c9      	ldrb	r1, [r1, #3]
 8003ef6:	430b      	orrs	r3, r1
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003efe:	431a      	orrs	r2, r3
 8003f00:	4b69      	ldr	r3, [pc, #420]	; (80040a8 <MX_LWIP_Init+0x23c>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	0619      	lsls	r1, r3, #24
 8003f06:	4b68      	ldr	r3, [pc, #416]	; (80040a8 <MX_LWIP_Init+0x23c>)
 8003f08:	785b      	ldrb	r3, [r3, #1]
 8003f0a:	041b      	lsls	r3, r3, #16
 8003f0c:	4319      	orrs	r1, r3
 8003f0e:	4b66      	ldr	r3, [pc, #408]	; (80040a8 <MX_LWIP_Init+0x23c>)
 8003f10:	789b      	ldrb	r3, [r3, #2]
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	430b      	orrs	r3, r1
 8003f16:	4964      	ldr	r1, [pc, #400]	; (80040a8 <MX_LWIP_Init+0x23c>)
 8003f18:	78c9      	ldrb	r1, [r1, #3]
 8003f1a:	430b      	orrs	r3, r1
 8003f1c:	0a1b      	lsrs	r3, r3, #8
 8003f1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f22:	431a      	orrs	r2, r3
 8003f24:	4b60      	ldr	r3, [pc, #384]	; (80040a8 <MX_LWIP_Init+0x23c>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	0619      	lsls	r1, r3, #24
 8003f2a:	4b5f      	ldr	r3, [pc, #380]	; (80040a8 <MX_LWIP_Init+0x23c>)
 8003f2c:	785b      	ldrb	r3, [r3, #1]
 8003f2e:	041b      	lsls	r3, r3, #16
 8003f30:	4319      	orrs	r1, r3
 8003f32:	4b5d      	ldr	r3, [pc, #372]	; (80040a8 <MX_LWIP_Init+0x23c>)
 8003f34:	789b      	ldrb	r3, [r3, #2]
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	495b      	ldr	r1, [pc, #364]	; (80040a8 <MX_LWIP_Init+0x23c>)
 8003f3c:	78c9      	ldrb	r1, [r1, #3]
 8003f3e:	430b      	orrs	r3, r1
 8003f40:	0e1b      	lsrs	r3, r3, #24
 8003f42:	4313      	orrs	r3, r2
 8003f44:	4a5b      	ldr	r2, [pc, #364]	; (80040b4 <MX_LWIP_Init+0x248>)
 8003f46:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003f48:	4b58      	ldr	r3, [pc, #352]	; (80040ac <MX_LWIP_Init+0x240>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	061a      	lsls	r2, r3, #24
 8003f4e:	4b57      	ldr	r3, [pc, #348]	; (80040ac <MX_LWIP_Init+0x240>)
 8003f50:	785b      	ldrb	r3, [r3, #1]
 8003f52:	041b      	lsls	r3, r3, #16
 8003f54:	431a      	orrs	r2, r3
 8003f56:	4b55      	ldr	r3, [pc, #340]	; (80040ac <MX_LWIP_Init+0x240>)
 8003f58:	789b      	ldrb	r3, [r3, #2]
 8003f5a:	021b      	lsls	r3, r3, #8
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	4a53      	ldr	r2, [pc, #332]	; (80040ac <MX_LWIP_Init+0x240>)
 8003f60:	78d2      	ldrb	r2, [r2, #3]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	061a      	lsls	r2, r3, #24
 8003f66:	4b51      	ldr	r3, [pc, #324]	; (80040ac <MX_LWIP_Init+0x240>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	0619      	lsls	r1, r3, #24
 8003f6c:	4b4f      	ldr	r3, [pc, #316]	; (80040ac <MX_LWIP_Init+0x240>)
 8003f6e:	785b      	ldrb	r3, [r3, #1]
 8003f70:	041b      	lsls	r3, r3, #16
 8003f72:	4319      	orrs	r1, r3
 8003f74:	4b4d      	ldr	r3, [pc, #308]	; (80040ac <MX_LWIP_Init+0x240>)
 8003f76:	789b      	ldrb	r3, [r3, #2]
 8003f78:	021b      	lsls	r3, r3, #8
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	494b      	ldr	r1, [pc, #300]	; (80040ac <MX_LWIP_Init+0x240>)
 8003f7e:	78c9      	ldrb	r1, [r1, #3]
 8003f80:	430b      	orrs	r3, r1
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	4b48      	ldr	r3, [pc, #288]	; (80040ac <MX_LWIP_Init+0x240>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	0619      	lsls	r1, r3, #24
 8003f90:	4b46      	ldr	r3, [pc, #280]	; (80040ac <MX_LWIP_Init+0x240>)
 8003f92:	785b      	ldrb	r3, [r3, #1]
 8003f94:	041b      	lsls	r3, r3, #16
 8003f96:	4319      	orrs	r1, r3
 8003f98:	4b44      	ldr	r3, [pc, #272]	; (80040ac <MX_LWIP_Init+0x240>)
 8003f9a:	789b      	ldrb	r3, [r3, #2]
 8003f9c:	021b      	lsls	r3, r3, #8
 8003f9e:	430b      	orrs	r3, r1
 8003fa0:	4942      	ldr	r1, [pc, #264]	; (80040ac <MX_LWIP_Init+0x240>)
 8003fa2:	78c9      	ldrb	r1, [r1, #3]
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	0a1b      	lsrs	r3, r3, #8
 8003fa8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003fac:	431a      	orrs	r2, r3
 8003fae:	4b3f      	ldr	r3, [pc, #252]	; (80040ac <MX_LWIP_Init+0x240>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	0619      	lsls	r1, r3, #24
 8003fb4:	4b3d      	ldr	r3, [pc, #244]	; (80040ac <MX_LWIP_Init+0x240>)
 8003fb6:	785b      	ldrb	r3, [r3, #1]
 8003fb8:	041b      	lsls	r3, r3, #16
 8003fba:	4319      	orrs	r1, r3
 8003fbc:	4b3b      	ldr	r3, [pc, #236]	; (80040ac <MX_LWIP_Init+0x240>)
 8003fbe:	789b      	ldrb	r3, [r3, #2]
 8003fc0:	021b      	lsls	r3, r3, #8
 8003fc2:	430b      	orrs	r3, r1
 8003fc4:	4939      	ldr	r1, [pc, #228]	; (80040ac <MX_LWIP_Init+0x240>)
 8003fc6:	78c9      	ldrb	r1, [r1, #3]
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	0e1b      	lsrs	r3, r3, #24
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	4a3a      	ldr	r2, [pc, #232]	; (80040b8 <MX_LWIP_Init+0x24c>)
 8003fd0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003fd2:	4b37      	ldr	r3, [pc, #220]	; (80040b0 <MX_LWIP_Init+0x244>)
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	061a      	lsls	r2, r3, #24
 8003fd8:	4b35      	ldr	r3, [pc, #212]	; (80040b0 <MX_LWIP_Init+0x244>)
 8003fda:	785b      	ldrb	r3, [r3, #1]
 8003fdc:	041b      	lsls	r3, r3, #16
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	4b33      	ldr	r3, [pc, #204]	; (80040b0 <MX_LWIP_Init+0x244>)
 8003fe2:	789b      	ldrb	r3, [r3, #2]
 8003fe4:	021b      	lsls	r3, r3, #8
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	4a31      	ldr	r2, [pc, #196]	; (80040b0 <MX_LWIP_Init+0x244>)
 8003fea:	78d2      	ldrb	r2, [r2, #3]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	061a      	lsls	r2, r3, #24
 8003ff0:	4b2f      	ldr	r3, [pc, #188]	; (80040b0 <MX_LWIP_Init+0x244>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	0619      	lsls	r1, r3, #24
 8003ff6:	4b2e      	ldr	r3, [pc, #184]	; (80040b0 <MX_LWIP_Init+0x244>)
 8003ff8:	785b      	ldrb	r3, [r3, #1]
 8003ffa:	041b      	lsls	r3, r3, #16
 8003ffc:	4319      	orrs	r1, r3
 8003ffe:	4b2c      	ldr	r3, [pc, #176]	; (80040b0 <MX_LWIP_Init+0x244>)
 8004000:	789b      	ldrb	r3, [r3, #2]
 8004002:	021b      	lsls	r3, r3, #8
 8004004:	430b      	orrs	r3, r1
 8004006:	492a      	ldr	r1, [pc, #168]	; (80040b0 <MX_LWIP_Init+0x244>)
 8004008:	78c9      	ldrb	r1, [r1, #3]
 800400a:	430b      	orrs	r3, r1
 800400c:	021b      	lsls	r3, r3, #8
 800400e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004012:	431a      	orrs	r2, r3
 8004014:	4b26      	ldr	r3, [pc, #152]	; (80040b0 <MX_LWIP_Init+0x244>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	0619      	lsls	r1, r3, #24
 800401a:	4b25      	ldr	r3, [pc, #148]	; (80040b0 <MX_LWIP_Init+0x244>)
 800401c:	785b      	ldrb	r3, [r3, #1]
 800401e:	041b      	lsls	r3, r3, #16
 8004020:	4319      	orrs	r1, r3
 8004022:	4b23      	ldr	r3, [pc, #140]	; (80040b0 <MX_LWIP_Init+0x244>)
 8004024:	789b      	ldrb	r3, [r3, #2]
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	430b      	orrs	r3, r1
 800402a:	4921      	ldr	r1, [pc, #132]	; (80040b0 <MX_LWIP_Init+0x244>)
 800402c:	78c9      	ldrb	r1, [r1, #3]
 800402e:	430b      	orrs	r3, r1
 8004030:	0a1b      	lsrs	r3, r3, #8
 8004032:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004036:	431a      	orrs	r2, r3
 8004038:	4b1d      	ldr	r3, [pc, #116]	; (80040b0 <MX_LWIP_Init+0x244>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	0619      	lsls	r1, r3, #24
 800403e:	4b1c      	ldr	r3, [pc, #112]	; (80040b0 <MX_LWIP_Init+0x244>)
 8004040:	785b      	ldrb	r3, [r3, #1]
 8004042:	041b      	lsls	r3, r3, #16
 8004044:	4319      	orrs	r1, r3
 8004046:	4b1a      	ldr	r3, [pc, #104]	; (80040b0 <MX_LWIP_Init+0x244>)
 8004048:	789b      	ldrb	r3, [r3, #2]
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	430b      	orrs	r3, r1
 800404e:	4918      	ldr	r1, [pc, #96]	; (80040b0 <MX_LWIP_Init+0x244>)
 8004050:	78c9      	ldrb	r1, [r1, #3]
 8004052:	430b      	orrs	r3, r1
 8004054:	0e1b      	lsrs	r3, r3, #24
 8004056:	4313      	orrs	r3, r2
 8004058:	4a18      	ldr	r2, [pc, #96]	; (80040bc <MX_LWIP_Init+0x250>)
 800405a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800405c:	4b18      	ldr	r3, [pc, #96]	; (80040c0 <MX_LWIP_Init+0x254>)
 800405e:	9302      	str	r3, [sp, #8]
 8004060:	4b18      	ldr	r3, [pc, #96]	; (80040c4 <MX_LWIP_Init+0x258>)
 8004062:	9301      	str	r3, [sp, #4]
 8004064:	2300      	movs	r3, #0
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	4b14      	ldr	r3, [pc, #80]	; (80040bc <MX_LWIP_Init+0x250>)
 800406a:	4a13      	ldr	r2, [pc, #76]	; (80040b8 <MX_LWIP_Init+0x24c>)
 800406c:	4911      	ldr	r1, [pc, #68]	; (80040b4 <MX_LWIP_Init+0x248>)
 800406e:	4816      	ldr	r0, [pc, #88]	; (80040c8 <MX_LWIP_Init+0x25c>)
 8004070:	f001 f984 	bl	800537c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004074:	4814      	ldr	r0, [pc, #80]	; (80040c8 <MX_LWIP_Init+0x25c>)
 8004076:	f001 fb37 	bl	80056e8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800407a:	4b13      	ldr	r3, [pc, #76]	; (80040c8 <MX_LWIP_Init+0x25c>)
 800407c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004080:	089b      	lsrs	r3, r3, #2
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800408c:	480e      	ldr	r0, [pc, #56]	; (80040c8 <MX_LWIP_Init+0x25c>)
 800408e:	f001 fb3b 	bl	8005708 <netif_set_up>
 8004092:	e002      	b.n	800409a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004094:	480c      	ldr	r0, [pc, #48]	; (80040c8 <MX_LWIP_Init+0x25c>)
 8004096:	f001 fba3 	bl	80057e0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800409a:	490c      	ldr	r1, [pc, #48]	; (80040cc <MX_LWIP_Init+0x260>)
 800409c:	480a      	ldr	r0, [pc, #40]	; (80040c8 <MX_LWIP_Init+0x25c>)
 800409e:	f001 fc35 	bl	800590c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80040a2:	bf00      	nop
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	200001dc 	.word	0x200001dc
 80040ac:	200001e0 	.word	0x200001e0
 80040b0:	200001e4 	.word	0x200001e4
 80040b4:	200001d0 	.word	0x200001d0
 80040b8:	200001d4 	.word	0x200001d4
 80040bc:	200001d8 	.word	0x200001d8
 80040c0:	0800ef35 	.word	0x0800ef35
 80040c4:	080043dd 	.word	0x080043dd
 80040c8:	2000019c 	.word	0x2000019c
 80040cc:	08004121 	.word	0x08004121

080040d0 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80040d8:	f7fd f94c 	bl	8001374 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	4b08      	ldr	r3, [pc, #32]	; (8004100 <Ethernet_Link_Periodic_Handle+0x30>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b63      	cmp	r3, #99	; 0x63
 80040e6:	d907      	bls.n	80040f8 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80040e8:	f7fd f944 	bl	8001374 <HAL_GetTick>
 80040ec:	4603      	mov	r3, r0
 80040ee:	4a04      	ldr	r2, [pc, #16]	; (8004100 <Ethernet_Link_Periodic_Handle+0x30>)
 80040f0:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fabe 	bl	8004674 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20000198 	.word	0x20000198

08004104 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004108:	4804      	ldr	r0, [pc, #16]	; (800411c <MX_LWIP_Process+0x18>)
 800410a:	f000 f947 	bl	800439c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800410e:	f007 ff39 	bl	800bf84 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8004112:	4802      	ldr	r0, [pc, #8]	; (800411c <MX_LWIP_Process+0x18>)
 8004114:	f7ff ffdc 	bl	80040d0 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004118:	bf00      	nop
 800411a:	bd80      	pop	{r7, pc}
 800411c:	2000019c 	.word	0x2000019c

08004120 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004140:	4b40      	ldr	r3, [pc, #256]	; (8004244 <low_level_init+0x110>)
 8004142:	4a41      	ldr	r2, [pc, #260]	; (8004248 <low_level_init+0x114>)
 8004144:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004146:	2300      	movs	r3, #0
 8004148:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800414a:	2380      	movs	r3, #128	; 0x80
 800414c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800414e:	23e1      	movs	r3, #225	; 0xe1
 8004150:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0xDF;
 8004152:	23df      	movs	r3, #223	; 0xdf
 8004154:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0xB0;
 8004156:	23b0      	movs	r3, #176	; 0xb0
 8004158:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0xC2;
 800415a:	23c2      	movs	r3, #194	; 0xc2
 800415c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800415e:	4a39      	ldr	r2, [pc, #228]	; (8004244 <low_level_init+0x110>)
 8004160:	f107 0308 	add.w	r3, r7, #8
 8004164:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004166:	4b37      	ldr	r3, [pc, #220]	; (8004244 <low_level_init+0x110>)
 8004168:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800416c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800416e:	4b35      	ldr	r3, [pc, #212]	; (8004244 <low_level_init+0x110>)
 8004170:	4a36      	ldr	r2, [pc, #216]	; (800424c <low_level_init+0x118>)
 8004172:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004174:	4b33      	ldr	r3, [pc, #204]	; (8004244 <low_level_init+0x110>)
 8004176:	4a36      	ldr	r2, [pc, #216]	; (8004250 <low_level_init+0x11c>)
 8004178:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800417a:	4b32      	ldr	r3, [pc, #200]	; (8004244 <low_level_init+0x110>)
 800417c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004180:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004182:	4830      	ldr	r0, [pc, #192]	; (8004244 <low_level_init+0x110>)
 8004184:	f7fd fa38 	bl	80015f8 <HAL_ETH_Init>
 8004188:	4603      	mov	r3, r0
 800418a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800418c:	2238      	movs	r2, #56	; 0x38
 800418e:	2100      	movs	r1, #0
 8004190:	4830      	ldr	r0, [pc, #192]	; (8004254 <low_level_init+0x120>)
 8004192:	f00b f801 	bl	800f198 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004196:	4b2f      	ldr	r3, [pc, #188]	; (8004254 <low_level_init+0x120>)
 8004198:	2221      	movs	r2, #33	; 0x21
 800419a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800419c:	4b2d      	ldr	r3, [pc, #180]	; (8004254 <low_level_init+0x120>)
 800419e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80041a2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80041a4:	4b2b      	ldr	r3, [pc, #172]	; (8004254 <low_level_init+0x120>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80041aa:	482b      	ldr	r0, [pc, #172]	; (8004258 <low_level_init+0x124>)
 80041ac:	f000 ffae 	bl	800510c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2206      	movs	r2, #6
 80041b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80041b8:	4b22      	ldr	r3, [pc, #136]	; (8004244 <low_level_init+0x110>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	781a      	ldrb	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80041c4:	4b1f      	ldr	r3, [pc, #124]	; (8004244 <low_level_init+0x110>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	785a      	ldrb	r2, [r3, #1]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80041d0:	4b1c      	ldr	r3, [pc, #112]	; (8004244 <low_level_init+0x110>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	789a      	ldrb	r2, [r3, #2]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80041dc:	4b19      	ldr	r3, [pc, #100]	; (8004244 <low_level_init+0x110>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	78da      	ldrb	r2, [r3, #3]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80041e8:	4b16      	ldr	r3, [pc, #88]	; (8004244 <low_level_init+0x110>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	791a      	ldrb	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80041f4:	4b13      	ldr	r3, [pc, #76]	; (8004244 <low_level_init+0x110>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	795a      	ldrb	r2, [r3, #5]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004206:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800420e:	f043 030a 	orr.w	r3, r3, #10
 8004212:	b2da      	uxtb	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 800421a:	4910      	ldr	r1, [pc, #64]	; (800425c <low_level_init+0x128>)
 800421c:	4810      	ldr	r0, [pc, #64]	; (8004260 <low_level_init+0x12c>)
 800421e:	f7fc fee2 	bl	8000fe6 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 8004222:	480f      	ldr	r0, [pc, #60]	; (8004260 <low_level_init+0x12c>)
 8004224:	f7fc ff11 	bl	800104a <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d103      	bne.n	8004236 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fa20 	bl	8004674 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004234:	e001      	b.n	800423a <low_level_init+0x106>
    Error_Handler();
 8004236:	f7fc fd3d 	bl	8000cb4 <Error_Handler>
}
 800423a:	bf00      	nop
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20004cb4 	.word	0x20004cb4
 8004248:	40028000 	.word	0x40028000
 800424c:	20004c14 	.word	0x20004c14
 8004250:	20004b74 	.word	0x20004b74
 8004254:	20004d64 	.word	0x20004d64
 8004258:	08013148 	.word	0x08013148
 800425c:	2000000c 	.word	0x2000000c
 8004260:	20004d9c 	.word	0x20004d9c

08004264 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b092      	sub	sp, #72	; 0x48
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004272:	2300      	movs	r3, #0
 8004274:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800427c:	f107 030c 	add.w	r3, r7, #12
 8004280:	2230      	movs	r2, #48	; 0x30
 8004282:	2100      	movs	r1, #0
 8004284:	4618      	mov	r0, r3
 8004286:	f00a ff87 	bl	800f198 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800428a:	f107 030c 	add.w	r3, r7, #12
 800428e:	2230      	movs	r2, #48	; 0x30
 8004290:	2100      	movs	r1, #0
 8004292:	4618      	mov	r0, r3
 8004294:	f00a ff80 	bl	800f198 <memset>

  for(q = p; q != NULL; q = q->next)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	643b      	str	r3, [r7, #64]	; 0x40
 800429c:	e045      	b.n	800432a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800429e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d902      	bls.n	80042aa <low_level_output+0x46>
      return ERR_IF;
 80042a4:	f06f 030b 	mvn.w	r3, #11
 80042a8:	e055      	b.n	8004356 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80042aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ac:	6859      	ldr	r1, [r3, #4]
 80042ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042b0:	4613      	mov	r3, r2
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	3348      	adds	r3, #72	; 0x48
 80042ba:	443b      	add	r3, r7
 80042bc:	3b3c      	subs	r3, #60	; 0x3c
 80042be:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80042c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042c2:	895b      	ldrh	r3, [r3, #10]
 80042c4:	4619      	mov	r1, r3
 80042c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042c8:	4613      	mov	r3, r2
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	3348      	adds	r3, #72	; 0x48
 80042d2:	443b      	add	r3, r7
 80042d4:	3b38      	subs	r3, #56	; 0x38
 80042d6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80042d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d011      	beq.n	8004302 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80042de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042e0:	1e5a      	subs	r2, r3, #1
 80042e2:	f107 000c 	add.w	r0, r7, #12
 80042e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042e8:	460b      	mov	r3, r1
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	440b      	add	r3, r1
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	18c1      	adds	r1, r0, r3
 80042f2:	4613      	mov	r3, r2
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	3348      	adds	r3, #72	; 0x48
 80042fc:	443b      	add	r3, r7
 80042fe:	3b34      	subs	r3, #52	; 0x34
 8004300:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800430a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800430c:	4613      	mov	r3, r2
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	3348      	adds	r3, #72	; 0x48
 8004316:	443b      	add	r3, r7
 8004318:	3b34      	subs	r3, #52	; 0x34
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800431e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004320:	3301      	adds	r3, #1
 8004322:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	643b      	str	r3, [r7, #64]	; 0x40
 800432a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1b6      	bne.n	800429e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	891b      	ldrh	r3, [r3, #8]
 8004334:	461a      	mov	r2, r3
 8004336:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <low_level_output+0xfc>)
 8004338:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800433a:	4a09      	ldr	r2, [pc, #36]	; (8004360 <low_level_output+0xfc>)
 800433c:	f107 030c 	add.w	r3, r7, #12
 8004340:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004342:	4a07      	ldr	r2, [pc, #28]	; (8004360 <low_level_output+0xfc>)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004348:	2214      	movs	r2, #20
 800434a:	4905      	ldr	r1, [pc, #20]	; (8004360 <low_level_output+0xfc>)
 800434c:	4805      	ldr	r0, [pc, #20]	; (8004364 <low_level_output+0x100>)
 800434e:	f7fd fa89 	bl	8001864 <HAL_ETH_Transmit>

  return errval;
 8004352:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004356:	4618      	mov	r0, r3
 8004358:	3748      	adds	r7, #72	; 0x48
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20004d64 	.word	0x20004d64
 8004364:	20004cb4 	.word	0x20004cb4

08004368 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004374:	4b07      	ldr	r3, [pc, #28]	; (8004394 <low_level_input+0x2c>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d105      	bne.n	8004388 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800437c:	f107 030c 	add.w	r3, r7, #12
 8004380:	4619      	mov	r1, r3
 8004382:	4805      	ldr	r0, [pc, #20]	; (8004398 <low_level_input+0x30>)
 8004384:	f7fd fb02 	bl	800198c <HAL_ETH_ReadData>
  }

  return p;
 8004388:	68fb      	ldr	r3, [r7, #12]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20004b70 	.word	0x20004b70
 8004398:	20004cb4 	.word	0x20004cb4

0800439c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7ff ffdd 	bl	8004368 <low_level_input>
 80043ae:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	4798      	blx	r3
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f001 fe32 	bl	8006030 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1ea      	bne.n	80043a8 <ethernetif_input+0xc>
}
 80043d2:	bf00      	nop
 80043d4:	bf00      	nop
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <ethernetif_init+0x1c>
 80043ea:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <ethernetif_init+0x48>)
 80043ec:	f240 126b 	movw	r2, #363	; 0x16b
 80043f0:	490d      	ldr	r1, [pc, #52]	; (8004428 <ethernetif_init+0x4c>)
 80043f2:	480e      	ldr	r0, [pc, #56]	; (800442c <ethernetif_init+0x50>)
 80043f4:	f00a fed8 	bl	800f1a8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2273      	movs	r2, #115	; 0x73
 80043fc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2274      	movs	r2, #116	; 0x74
 8004404:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a09      	ldr	r2, [pc, #36]	; (8004430 <ethernetif_init+0x54>)
 800440c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a08      	ldr	r2, [pc, #32]	; (8004434 <ethernetif_init+0x58>)
 8004412:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7ff fe8d 	bl	8004134 <low_level_init>

  return ERR_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	0801068c 	.word	0x0801068c
 8004428:	080106a8 	.word	0x080106a8
 800442c:	080106b8 	.word	0x080106b8
 8004430:	0800d2b5 	.word	0x0800d2b5
 8004434:	08004265 	.word	0x08004265

08004438 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004444:	68f9      	ldr	r1, [r7, #12]
 8004446:	4807      	ldr	r0, [pc, #28]	; (8004464 <pbuf_free_custom+0x2c>)
 8004448:	f000 ff42 	bl	80052d0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800444c:	4b06      	ldr	r3, [pc, #24]	; (8004468 <pbuf_free_custom+0x30>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d102      	bne.n	800445a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004454:	4b04      	ldr	r3, [pc, #16]	; (8004468 <pbuf_free_custom+0x30>)
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]
  }
}
 800445a:	bf00      	nop
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	08013148 	.word	0x08013148
 8004468:	20004b70 	.word	0x20004b70

0800446c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004470:	f7fc ff80 	bl	8001374 <HAL_GetTick>
 8004474:	4603      	mov	r3, r0
}
 8004476:	4618      	mov	r0, r3
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08e      	sub	sp, #56	; 0x38
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	605a      	str	r2, [r3, #4]
 800448e:	609a      	str	r2, [r3, #8]
 8004490:	60da      	str	r2, [r3, #12]
 8004492:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a4a      	ldr	r2, [pc, #296]	; (80045c4 <HAL_ETH_MspInit+0x148>)
 800449a:	4293      	cmp	r3, r2
 800449c:	f040 808d 	bne.w	80045ba <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80044a0:	2300      	movs	r3, #0
 80044a2:	623b      	str	r3, [r7, #32]
 80044a4:	4b48      	ldr	r3, [pc, #288]	; (80045c8 <HAL_ETH_MspInit+0x14c>)
 80044a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a8:	4a47      	ldr	r2, [pc, #284]	; (80045c8 <HAL_ETH_MspInit+0x14c>)
 80044aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044ae:	6313      	str	r3, [r2, #48]	; 0x30
 80044b0:	4b45      	ldr	r3, [pc, #276]	; (80045c8 <HAL_ETH_MspInit+0x14c>)
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b8:	623b      	str	r3, [r7, #32]
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	2300      	movs	r3, #0
 80044be:	61fb      	str	r3, [r7, #28]
 80044c0:	4b41      	ldr	r3, [pc, #260]	; (80045c8 <HAL_ETH_MspInit+0x14c>)
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	4a40      	ldr	r2, [pc, #256]	; (80045c8 <HAL_ETH_MspInit+0x14c>)
 80044c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044ca:	6313      	str	r3, [r2, #48]	; 0x30
 80044cc:	4b3e      	ldr	r3, [pc, #248]	; (80045c8 <HAL_ETH_MspInit+0x14c>)
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	2300      	movs	r3, #0
 80044da:	61bb      	str	r3, [r7, #24]
 80044dc:	4b3a      	ldr	r3, [pc, #232]	; (80045c8 <HAL_ETH_MspInit+0x14c>)
 80044de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e0:	4a39      	ldr	r2, [pc, #228]	; (80045c8 <HAL_ETH_MspInit+0x14c>)
 80044e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044e6:	6313      	str	r3, [r2, #48]	; 0x30
 80044e8:	4b37      	ldr	r3, [pc, #220]	; (80045c8 <HAL_ETH_MspInit+0x14c>)
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	4b33      	ldr	r3, [pc, #204]	; (80045c8 <HAL_ETH_MspInit+0x14c>)
 80044fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fc:	4a32      	ldr	r2, [pc, #200]	; (80045c8 <HAL_ETH_MspInit+0x14c>)
 80044fe:	f043 0304 	orr.w	r3, r3, #4
 8004502:	6313      	str	r3, [r2, #48]	; 0x30
 8004504:	4b30      	ldr	r3, [pc, #192]	; (80045c8 <HAL_ETH_MspInit+0x14c>)
 8004506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004510:	2300      	movs	r3, #0
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	4b2c      	ldr	r3, [pc, #176]	; (80045c8 <HAL_ETH_MspInit+0x14c>)
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	4a2b      	ldr	r2, [pc, #172]	; (80045c8 <HAL_ETH_MspInit+0x14c>)
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	6313      	str	r3, [r2, #48]	; 0x30
 8004520:	4b29      	ldr	r3, [pc, #164]	; (80045c8 <HAL_ETH_MspInit+0x14c>)
 8004522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800452c:	2300      	movs	r3, #0
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	4b25      	ldr	r3, [pc, #148]	; (80045c8 <HAL_ETH_MspInit+0x14c>)
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	4a24      	ldr	r2, [pc, #144]	; (80045c8 <HAL_ETH_MspInit+0x14c>)
 8004536:	f043 0302 	orr.w	r3, r3, #2
 800453a:	6313      	str	r3, [r2, #48]	; 0x30
 800453c:	4b22      	ldr	r3, [pc, #136]	; (80045c8 <HAL_ETH_MspInit+0x14c>)
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004548:	2332      	movs	r3, #50	; 0x32
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800454c:	2302      	movs	r3, #2
 800454e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004550:	2300      	movs	r3, #0
 8004552:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004554:	2303      	movs	r3, #3
 8004556:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004558:	230b      	movs	r3, #11
 800455a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800455c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004560:	4619      	mov	r1, r3
 8004562:	481a      	ldr	r0, [pc, #104]	; (80045cc <HAL_ETH_MspInit+0x150>)
 8004564:	f7fe fa32 	bl	80029cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004568:	2386      	movs	r3, #134	; 0x86
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456c:	2302      	movs	r3, #2
 800456e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004570:	2300      	movs	r3, #0
 8004572:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004574:	2303      	movs	r3, #3
 8004576:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004578:	230b      	movs	r3, #11
 800457a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800457c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004580:	4619      	mov	r1, r3
 8004582:	4813      	ldr	r0, [pc, #76]	; (80045d0 <HAL_ETH_MspInit+0x154>)
 8004584:	f7fe fa22 	bl	80029cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004588:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800458e:	2302      	movs	r3, #2
 8004590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004592:	2300      	movs	r3, #0
 8004594:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004596:	2303      	movs	r3, #3
 8004598:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800459a:	230b      	movs	r3, #11
 800459c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800459e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045a2:	4619      	mov	r1, r3
 80045a4:	480b      	ldr	r0, [pc, #44]	; (80045d4 <HAL_ETH_MspInit+0x158>)
 80045a6:	f7fe fa11 	bl	80029cc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80045aa:	2200      	movs	r2, #0
 80045ac:	2100      	movs	r1, #0
 80045ae:	203d      	movs	r0, #61	; 0x3d
 80045b0:	f7fc ffeb 	bl	800158a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80045b4:	203d      	movs	r0, #61	; 0x3d
 80045b6:	f7fd f804 	bl	80015c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80045ba:	bf00      	nop
 80045bc:	3738      	adds	r7, #56	; 0x38
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40028000 	.word	0x40028000
 80045c8:	40023800 	.word	0x40023800
 80045cc:	40020800 	.word	0x40020800
 80045d0:	40020000 	.word	0x40020000
 80045d4:	40020400 	.word	0x40020400

080045d8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80045dc:	4802      	ldr	r0, [pc, #8]	; (80045e8 <ETH_PHY_IO_Init+0x10>)
 80045de:	f7fd fd99 	bl	8002114 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	20004cb4 	.word	0x20004cb4

080045ec <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  return 0;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	68f9      	ldr	r1, [r7, #12]
 800460e:	4807      	ldr	r0, [pc, #28]	; (800462c <ETH_PHY_IO_ReadReg+0x30>)
 8004610:	f7fd fbe8 	bl	8001de4 <HAL_ETH_ReadPHYRegister>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800461a:	f04f 33ff 	mov.w	r3, #4294967295
 800461e:	e000      	b.n	8004622 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	20004cb4 	.word	0x20004cb4

08004630 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	68f9      	ldr	r1, [r7, #12]
 8004642:	4807      	ldr	r0, [pc, #28]	; (8004660 <ETH_PHY_IO_WriteReg+0x30>)
 8004644:	f7fd fc19 	bl	8001e7a <HAL_ETH_WritePHYRegister>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800464e:	f04f 33ff 	mov.w	r3, #4294967295
 8004652:	e000      	b.n	8004656 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	20004cb4 	.word	0x20004cb4

08004664 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004668:	f7fc fe84 	bl	8001374 <HAL_GetTick>
 800466c:	4603      	mov	r3, r0
}
 800466e:	4618      	mov	r0, r3
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b0a0      	sub	sp, #128	; 0x80
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800467c:	f107 030c 	add.w	r3, r7, #12
 8004680:	2264      	movs	r2, #100	; 0x64
 8004682:	2100      	movs	r1, #0
 8004684:	4618      	mov	r0, r3
 8004686:	f00a fd87 	bl	800f198 <memset>
  int32_t PHYLinkState = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004692:	2300      	movs	r3, #0
 8004694:	67bb      	str	r3, [r7, #120]	; 0x78
 8004696:	2300      	movs	r3, #0
 8004698:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 800469a:	483a      	ldr	r0, [pc, #232]	; (8004784 <ethernet_link_check_state+0x110>)
 800469c:	f7fc fd7d 	bl	800119a <DP83848_GetLinkState>
 80046a0:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80046a8:	089b      	lsrs	r3, r3, #2
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00c      	beq.n	80046ce <ethernet_link_check_state+0x5a>
 80046b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	dc09      	bgt.n	80046ce <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80046ba:	4833      	ldr	r0, [pc, #204]	; (8004788 <ethernet_link_check_state+0x114>)
 80046bc:	f7fd f879 	bl	80017b2 <HAL_ETH_Stop>
    netif_set_down(netif);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f001 f88d 	bl	80057e0 <netif_set_down>
    netif_set_link_down(netif);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f001 f8f0 	bl	80058ac <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80046cc:	e055      	b.n	800477a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d14e      	bne.n	800477a <ethernet_link_check_state+0x106>
 80046dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046de:	2b01      	cmp	r3, #1
 80046e0:	dd4b      	ble.n	800477a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80046e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046e4:	3b02      	subs	r3, #2
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d82a      	bhi.n	8004740 <ethernet_link_check_state+0xcc>
 80046ea:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <ethernet_link_check_state+0x7c>)
 80046ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f0:	08004701 	.word	0x08004701
 80046f4:	08004713 	.word	0x08004713
 80046f8:	08004723 	.word	0x08004723
 80046fc:	08004733 	.word	0x08004733
      duplex = ETH_FULLDUPLEX_MODE;
 8004700:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004704:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004706:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800470a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800470c:	2301      	movs	r3, #1
 800470e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004710:	e017      	b.n	8004742 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004712:	2300      	movs	r3, #0
 8004714:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004716:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800471a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800471c:	2301      	movs	r3, #1
 800471e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004720:	e00f      	b.n	8004742 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004722:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004726:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004728:	2300      	movs	r3, #0
 800472a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800472c:	2301      	movs	r3, #1
 800472e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004730:	e007      	b.n	8004742 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004732:	2300      	movs	r3, #0
 8004734:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004736:	2300      	movs	r3, #0
 8004738:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800473a:	2301      	movs	r3, #1
 800473c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800473e:	e000      	b.n	8004742 <ethernet_link_check_state+0xce>
      break;
 8004740:	bf00      	nop
    if(linkchanged)
 8004742:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004744:	2b00      	cmp	r3, #0
 8004746:	d018      	beq.n	800477a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004748:	f107 030c 	add.w	r3, r7, #12
 800474c:	4619      	mov	r1, r3
 800474e:	480e      	ldr	r0, [pc, #56]	; (8004788 <ethernet_link_check_state+0x114>)
 8004750:	f7fd fbdc 	bl	8001f0c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004754:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8004758:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800475a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800475c:	f107 030c 	add.w	r3, r7, #12
 8004760:	4619      	mov	r1, r3
 8004762:	4809      	ldr	r0, [pc, #36]	; (8004788 <ethernet_link_check_state+0x114>)
 8004764:	f7fd fcbc 	bl	80020e0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004768:	4807      	ldr	r0, [pc, #28]	; (8004788 <ethernet_link_check_state+0x114>)
 800476a:	f7fc ffc3 	bl	80016f4 <HAL_ETH_Start>
      netif_set_up(netif);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 ffca 	bl	8005708 <netif_set_up>
      netif_set_link_up(netif);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f001 f865 	bl	8005844 <netif_set_link_up>
}
 800477a:	bf00      	nop
 800477c:	3780      	adds	r7, #128	; 0x80
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20004d9c 	.word	0x20004d9c
 8004788:	20004cb4 	.word	0x20004cb4

0800478c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af02      	add	r7, sp, #8
 8004792:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004794:	4812      	ldr	r0, [pc, #72]	; (80047e0 <HAL_ETH_RxAllocateCallback+0x54>)
 8004796:	f000 fd2d 	bl	80051f4 <memp_malloc_pool>
 800479a:	60f8      	str	r0, [r7, #12]
  if (p)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d014      	beq.n	80047cc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f103 0220 	add.w	r2, r3, #32
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4a0d      	ldr	r2, [pc, #52]	; (80047e4 <HAL_ETH_RxAllocateCallback+0x58>)
 80047b0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80047ba:	9201      	str	r2, [sp, #4]
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2241      	movs	r2, #65	; 0x41
 80047c2:	2100      	movs	r1, #0
 80047c4:	2000      	movs	r0, #0
 80047c6:	f001 fa67 	bl	8005c98 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80047ca:	e005      	b.n	80047d8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80047cc:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <HAL_ETH_RxAllocateCallback+0x5c>)
 80047ce:	2201      	movs	r2, #1
 80047d0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]
}
 80047d8:	bf00      	nop
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	08013148 	.word	0x08013148
 80047e4:	08004439 	.word	0x08004439
 80047e8:	20004b70 	.word	0x20004b70

080047ec <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b089      	sub	sp, #36	; 0x24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
 80047f8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	3b20      	subs	r3, #32
 800480a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	2200      	movs	r2, #0
 8004816:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	887a      	ldrh	r2, [r7, #2]
 800481c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d103      	bne.n	800482e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	e003      	b.n	8004836 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	69fa      	ldr	r2, [r7, #28]
 800483a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	61fb      	str	r3, [r7, #28]
 8004842:	e009      	b.n	8004858 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	891a      	ldrh	r2, [r3, #8]
 8004848:	887b      	ldrh	r3, [r7, #2]
 800484a:	4413      	add	r3, r2
 800484c:	b29a      	uxth	r2, r3
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	61fb      	str	r3, [r7, #28]
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f2      	bne.n	8004844 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800485e:	bf00      	nop
 8004860:	bf00      	nop
 8004862:	3724      	adds	r7, #36	; 0x24
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	021b      	lsls	r3, r3, #8
 800487a:	b21a      	sxth	r2, r3
 800487c:	88fb      	ldrh	r3, [r7, #6]
 800487e:	0a1b      	lsrs	r3, r3, #8
 8004880:	b29b      	uxth	r3, r3
 8004882:	b21b      	sxth	r3, r3
 8004884:	4313      	orrs	r3, r2
 8004886:	b21b      	sxth	r3, r3
 8004888:	b29b      	uxth	r3, r3
}
 800488a:	4618      	mov	r0, r3
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	061a      	lsls	r2, r3, #24
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	021b      	lsls	r3, r3, #8
 80048a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	0a1b      	lsrs	r3, r3, #8
 80048b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	0e1b      	lsrs	r3, r3, #24
 80048ba:	4313      	orrs	r3, r2
}
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b089      	sub	sp, #36	; 0x24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00d      	beq.n	8004908 <lwip_standard_chksum+0x40>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	dd0a      	ble.n	8004908 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80048f2:	69fa      	ldr	r2, [r7, #28]
 80048f4:	1c53      	adds	r3, r2, #1
 80048f6:	61fb      	str	r3, [r7, #28]
 80048f8:	f107 030e 	add.w	r3, r7, #14
 80048fc:	3301      	adds	r3, #1
 80048fe:	7812      	ldrb	r2, [r2, #0]
 8004900:	701a      	strb	r2, [r3, #0]
    len--;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	3b01      	subs	r3, #1
 8004906:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800490c:	e00a      	b.n	8004924 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	1c9a      	adds	r2, r3, #2
 8004912:	61ba      	str	r2, [r7, #24]
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	4413      	add	r3, r2
 800491c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	3b02      	subs	r3, #2
 8004922:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b01      	cmp	r3, #1
 8004928:	dcf1      	bgt.n	800490e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	dd04      	ble.n	800493a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8004930:	f107 030e 	add.w	r3, r7, #14
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	7812      	ldrb	r2, [r2, #0]
 8004938:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800493a:	89fb      	ldrh	r3, [r7, #14]
 800493c:	461a      	mov	r2, r3
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	4413      	add	r3, r2
 8004942:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	0c1a      	lsrs	r2, r3, #16
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	b29b      	uxth	r3, r3
 800494c:	4413      	add	r3, r2
 800494e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	0c1a      	lsrs	r2, r3, #16
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	b29b      	uxth	r3, r3
 8004958:	4413      	add	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	b29a      	uxth	r2, r3
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	0a1b      	lsrs	r3, r3, #8
 800496c:	b2db      	uxtb	r3, r3
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	b29b      	uxth	r3, r3
}
 8004976:	4618      	mov	r0, r3
 8004978:	3724      	adds	r7, #36	; 0x24
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	460b      	mov	r3, r1
 800498c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800498e:	887b      	ldrh	r3, [r7, #2]
 8004990:	4619      	mov	r1, r3
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff ff98 	bl	80048c8 <lwip_standard_chksum>
 8004998:	4603      	mov	r3, r0
 800499a:	43db      	mvns	r3, r3
 800499c:	b29b      	uxth	r3, r3
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b082      	sub	sp, #8
 80049aa:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80049b0:	f000 f8d4 	bl	8004b5c <mem_init>
  memp_init();
 80049b4:	f000 fbda 	bl	800516c <memp_init>
  pbuf_init();
  netif_init();
 80049b8:	f000 fcd8 	bl	800536c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80049bc:	f007 fb24 	bl	800c008 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80049c0:	f002 f87c 	bl	8006abc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80049c4:	f007 fa96 	bl	800bef4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80049c8:	bf00      	nop
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <ptr_to_mem+0x20>)
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	88fb      	ldrh	r3, [r7, #6]
 80049e0:	4413      	add	r3, r2
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	20005428 	.word	0x20005428

080049f4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <mem_to_ptr+0x20>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	b29b      	uxth	r3, r3
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	20005428 	.word	0x20005428

08004a18 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004a18:	b590      	push	{r4, r7, lr}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004a20:	4b45      	ldr	r3, [pc, #276]	; (8004b38 <plug_holes+0x120>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d206      	bcs.n	8004a38 <plug_holes+0x20>
 8004a2a:	4b44      	ldr	r3, [pc, #272]	; (8004b3c <plug_holes+0x124>)
 8004a2c:	f240 12df 	movw	r2, #479	; 0x1df
 8004a30:	4943      	ldr	r1, [pc, #268]	; (8004b40 <plug_holes+0x128>)
 8004a32:	4844      	ldr	r0, [pc, #272]	; (8004b44 <plug_holes+0x12c>)
 8004a34:	f00a fbb8 	bl	800f1a8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004a38:	4b43      	ldr	r3, [pc, #268]	; (8004b48 <plug_holes+0x130>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d306      	bcc.n	8004a50 <plug_holes+0x38>
 8004a42:	4b3e      	ldr	r3, [pc, #248]	; (8004b3c <plug_holes+0x124>)
 8004a44:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004a48:	4940      	ldr	r1, [pc, #256]	; (8004b4c <plug_holes+0x134>)
 8004a4a:	483e      	ldr	r0, [pc, #248]	; (8004b44 <plug_holes+0x12c>)
 8004a4c:	f00a fbac 	bl	800f1a8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	791b      	ldrb	r3, [r3, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d006      	beq.n	8004a66 <plug_holes+0x4e>
 8004a58:	4b38      	ldr	r3, [pc, #224]	; (8004b3c <plug_holes+0x124>)
 8004a5a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004a5e:	493c      	ldr	r1, [pc, #240]	; (8004b50 <plug_holes+0x138>)
 8004a60:	4838      	ldr	r0, [pc, #224]	; (8004b44 <plug_holes+0x12c>)
 8004a62:	f00a fba1 	bl	800f1a8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a6e:	d906      	bls.n	8004a7e <plug_holes+0x66>
 8004a70:	4b32      	ldr	r3, [pc, #200]	; (8004b3c <plug_holes+0x124>)
 8004a72:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004a76:	4937      	ldr	r1, [pc, #220]	; (8004b54 <plug_holes+0x13c>)
 8004a78:	4832      	ldr	r0, [pc, #200]	; (8004b44 <plug_holes+0x12c>)
 8004a7a:	f00a fb95 	bl	800f1a8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7ff ffa4 	bl	80049d0 <ptr_to_mem>
 8004a88:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d024      	beq.n	8004adc <plug_holes+0xc4>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	791b      	ldrb	r3, [r3, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d120      	bne.n	8004adc <plug_holes+0xc4>
 8004a9a:	4b2b      	ldr	r3, [pc, #172]	; (8004b48 <plug_holes+0x130>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d01b      	beq.n	8004adc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004aa4:	4b2c      	ldr	r3, [pc, #176]	; (8004b58 <plug_holes+0x140>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d102      	bne.n	8004ab4 <plug_holes+0x9c>
      lfree = mem;
 8004aae:	4a2a      	ldr	r2, [pc, #168]	; (8004b58 <plug_holes+0x140>)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	881a      	ldrh	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ac4:	d00a      	beq.n	8004adc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff ff80 	bl	80049d0 <ptr_to_mem>
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7ff ff8e 	bl	80049f4 <mem_to_ptr>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	885b      	ldrh	r3, [r3, #2]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff ff75 	bl	80049d0 <ptr_to_mem>
 8004ae6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d01f      	beq.n	8004b30 <plug_holes+0x118>
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	791b      	ldrb	r3, [r3, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d11b      	bne.n	8004b30 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004af8:	4b17      	ldr	r3, [pc, #92]	; (8004b58 <plug_holes+0x140>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d102      	bne.n	8004b08 <plug_holes+0xf0>
      lfree = pmem;
 8004b02:	4a15      	ldr	r2, [pc, #84]	; (8004b58 <plug_holes+0x140>)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	881a      	ldrh	r2, [r3, #0]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b18:	d00a      	beq.n	8004b30 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff ff56 	bl	80049d0 <ptr_to_mem>
 8004b24:	4604      	mov	r4, r0
 8004b26:	68b8      	ldr	r0, [r7, #8]
 8004b28:	f7ff ff64 	bl	80049f4 <mem_to_ptr>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004b30:	bf00      	nop
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd90      	pop	{r4, r7, pc}
 8004b38:	20005428 	.word	0x20005428
 8004b3c:	080106e0 	.word	0x080106e0
 8004b40:	08010710 	.word	0x08010710
 8004b44:	08010728 	.word	0x08010728
 8004b48:	2000542c 	.word	0x2000542c
 8004b4c:	08010750 	.word	0x08010750
 8004b50:	0801076c 	.word	0x0801076c
 8004b54:	08010788 	.word	0x08010788
 8004b58:	20005430 	.word	0x20005430

08004b5c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004b62:	4b18      	ldr	r3, [pc, #96]	; (8004bc4 <mem_init+0x68>)
 8004b64:	3303      	adds	r3, #3
 8004b66:	f023 0303 	bic.w	r3, r3, #3
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	4b16      	ldr	r3, [pc, #88]	; (8004bc8 <mem_init+0x6c>)
 8004b6e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004b70:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <mem_init+0x6c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b7c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004b8a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004b8e:	f7ff ff1f 	bl	80049d0 <ptr_to_mem>
 8004b92:	4603      	mov	r3, r0
 8004b94:	4a0d      	ldr	r2, [pc, #52]	; (8004bcc <mem_init+0x70>)
 8004b96:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004b98:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <mem_init+0x70>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <mem_init+0x70>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004ba8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004baa:	4b08      	ldr	r3, [pc, #32]	; (8004bcc <mem_init+0x70>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004bb2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004bb4:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <mem_init+0x6c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a05      	ldr	r2, [pc, #20]	; (8004bd0 <mem_init+0x74>)
 8004bba:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004bbc:	bf00      	nop
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	20004dd4 	.word	0x20004dd4
 8004bc8:	20005428 	.word	0x20005428
 8004bcc:	2000542c 	.word	0x2000542c
 8004bd0:	20005430 	.word	0x20005430

08004bd4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff ff09 	bl	80049f4 <mem_to_ptr>
 8004be2:	4603      	mov	r3, r0
 8004be4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff fef0 	bl	80049d0 <ptr_to_mem>
 8004bf0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	885b      	ldrh	r3, [r3, #2]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7ff feea 	bl	80049d0 <ptr_to_mem>
 8004bfc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c06:	d818      	bhi.n	8004c3a <mem_link_valid+0x66>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	885b      	ldrh	r3, [r3, #2]
 8004c0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c10:	d813      	bhi.n	8004c3a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004c16:	8afa      	ldrh	r2, [r7, #22]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d004      	beq.n	8004c26 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	8afa      	ldrh	r2, [r7, #22]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d109      	bne.n	8004c3a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004c26:	4b08      	ldr	r3, [pc, #32]	; (8004c48 <mem_link_valid+0x74>)
 8004c28:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d006      	beq.n	8004c3e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	885b      	ldrh	r3, [r3, #2]
 8004c34:	8afa      	ldrh	r2, [r7, #22]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d001      	beq.n	8004c3e <mem_link_valid+0x6a>
    return 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e000      	b.n	8004c40 <mem_link_valid+0x6c>
  }
  return 1;
 8004c3e:	2301      	movs	r3, #1
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	2000542c 	.word	0x2000542c

08004c4c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d04c      	beq.n	8004cf4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f003 0303 	and.w	r3, r3, #3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004c64:	4b25      	ldr	r3, [pc, #148]	; (8004cfc <mem_free+0xb0>)
 8004c66:	f240 2273 	movw	r2, #627	; 0x273
 8004c6a:	4925      	ldr	r1, [pc, #148]	; (8004d00 <mem_free+0xb4>)
 8004c6c:	4825      	ldr	r0, [pc, #148]	; (8004d04 <mem_free+0xb8>)
 8004c6e:	f00a fa9b 	bl	800f1a8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004c72:	e040      	b.n	8004cf6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3b08      	subs	r3, #8
 8004c78:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004c7a:	4b23      	ldr	r3, [pc, #140]	; (8004d08 <mem_free+0xbc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d306      	bcc.n	8004c92 <mem_free+0x46>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f103 020c 	add.w	r2, r3, #12
 8004c8a:	4b20      	ldr	r3, [pc, #128]	; (8004d0c <mem_free+0xc0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d907      	bls.n	8004ca2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004c92:	4b1a      	ldr	r3, [pc, #104]	; (8004cfc <mem_free+0xb0>)
 8004c94:	f240 227f 	movw	r2, #639	; 0x27f
 8004c98:	491d      	ldr	r1, [pc, #116]	; (8004d10 <mem_free+0xc4>)
 8004c9a:	481a      	ldr	r0, [pc, #104]	; (8004d04 <mem_free+0xb8>)
 8004c9c:	f00a fa84 	bl	800f1a8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004ca0:	e029      	b.n	8004cf6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	791b      	ldrb	r3, [r3, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d107      	bne.n	8004cba <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004caa:	4b14      	ldr	r3, [pc, #80]	; (8004cfc <mem_free+0xb0>)
 8004cac:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004cb0:	4918      	ldr	r1, [pc, #96]	; (8004d14 <mem_free+0xc8>)
 8004cb2:	4814      	ldr	r0, [pc, #80]	; (8004d04 <mem_free+0xb8>)
 8004cb4:	f00a fa78 	bl	800f1a8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004cb8:	e01d      	b.n	8004cf6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f7ff ff8a 	bl	8004bd4 <mem_link_valid>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d107      	bne.n	8004cd6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004cc6:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <mem_free+0xb0>)
 8004cc8:	f240 2295 	movw	r2, #661	; 0x295
 8004ccc:	4912      	ldr	r1, [pc, #72]	; (8004d18 <mem_free+0xcc>)
 8004cce:	480d      	ldr	r0, [pc, #52]	; (8004d04 <mem_free+0xb8>)
 8004cd0:	f00a fa6a 	bl	800f1a8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004cd4:	e00f      	b.n	8004cf6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004cdc:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <mem_free+0xd0>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d202      	bcs.n	8004cec <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004ce6:	4a0d      	ldr	r2, [pc, #52]	; (8004d1c <mem_free+0xd0>)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f7ff fe93 	bl	8004a18 <plug_holes>
 8004cf2:	e000      	b.n	8004cf6 <mem_free+0xaa>
    return;
 8004cf4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	080106e0 	.word	0x080106e0
 8004d00:	080107b4 	.word	0x080107b4
 8004d04:	08010728 	.word	0x08010728
 8004d08:	20005428 	.word	0x20005428
 8004d0c:	2000542c 	.word	0x2000542c
 8004d10:	080107d8 	.word	0x080107d8
 8004d14:	080107f4 	.word	0x080107f4
 8004d18:	0801081c 	.word	0x0801081c
 8004d1c:	20005430 	.word	0x20005430

08004d20 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004d2c:	887b      	ldrh	r3, [r7, #2]
 8004d2e:	3303      	adds	r3, #3
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	f023 0303 	bic.w	r3, r3, #3
 8004d36:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004d38:	8bfb      	ldrh	r3, [r7, #30]
 8004d3a:	2b0b      	cmp	r3, #11
 8004d3c:	d801      	bhi.n	8004d42 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004d3e:	230c      	movs	r3, #12
 8004d40:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004d42:	8bfb      	ldrh	r3, [r7, #30]
 8004d44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d48:	d803      	bhi.n	8004d52 <mem_trim+0x32>
 8004d4a:	8bfa      	ldrh	r2, [r7, #30]
 8004d4c:	887b      	ldrh	r3, [r7, #2]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d201      	bcs.n	8004d56 <mem_trim+0x36>
    return NULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	e0cc      	b.n	8004ef0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004d56:	4b68      	ldr	r3, [pc, #416]	; (8004ef8 <mem_trim+0x1d8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d304      	bcc.n	8004d6a <mem_trim+0x4a>
 8004d60:	4b66      	ldr	r3, [pc, #408]	; (8004efc <mem_trim+0x1dc>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d306      	bcc.n	8004d78 <mem_trim+0x58>
 8004d6a:	4b65      	ldr	r3, [pc, #404]	; (8004f00 <mem_trim+0x1e0>)
 8004d6c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004d70:	4964      	ldr	r1, [pc, #400]	; (8004f04 <mem_trim+0x1e4>)
 8004d72:	4865      	ldr	r0, [pc, #404]	; (8004f08 <mem_trim+0x1e8>)
 8004d74:	f00a fa18 	bl	800f1a8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004d78:	4b5f      	ldr	r3, [pc, #380]	; (8004ef8 <mem_trim+0x1d8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d304      	bcc.n	8004d8c <mem_trim+0x6c>
 8004d82:	4b5e      	ldr	r3, [pc, #376]	; (8004efc <mem_trim+0x1dc>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d301      	bcc.n	8004d90 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	e0af      	b.n	8004ef0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3b08      	subs	r3, #8
 8004d94:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004d96:	69b8      	ldr	r0, [r7, #24]
 8004d98:	f7ff fe2c 	bl	80049f4 <mem_to_ptr>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	881a      	ldrh	r2, [r3, #0]
 8004da4:	8afb      	ldrh	r3, [r7, #22]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	3b08      	subs	r3, #8
 8004dac:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004dae:	8bfa      	ldrh	r2, [r7, #30]
 8004db0:	8abb      	ldrh	r3, [r7, #20]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d906      	bls.n	8004dc4 <mem_trim+0xa4>
 8004db6:	4b52      	ldr	r3, [pc, #328]	; (8004f00 <mem_trim+0x1e0>)
 8004db8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004dbc:	4953      	ldr	r1, [pc, #332]	; (8004f0c <mem_trim+0x1ec>)
 8004dbe:	4852      	ldr	r0, [pc, #328]	; (8004f08 <mem_trim+0x1e8>)
 8004dc0:	f00a f9f2 	bl	800f1a8 <iprintf>
  if (newsize > size) {
 8004dc4:	8bfa      	ldrh	r2, [r7, #30]
 8004dc6:	8abb      	ldrh	r3, [r7, #20]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d901      	bls.n	8004dd0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	e08f      	b.n	8004ef0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004dd0:	8bfa      	ldrh	r2, [r7, #30]
 8004dd2:	8abb      	ldrh	r3, [r7, #20]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d101      	bne.n	8004ddc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	e089      	b.n	8004ef0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7ff fdf5 	bl	80049d0 <ptr_to_mem>
 8004de6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	791b      	ldrb	r3, [r3, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d13f      	bne.n	8004e70 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004df8:	d106      	bne.n	8004e08 <mem_trim+0xe8>
 8004dfa:	4b41      	ldr	r3, [pc, #260]	; (8004f00 <mem_trim+0x1e0>)
 8004dfc:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004e00:	4943      	ldr	r1, [pc, #268]	; (8004f10 <mem_trim+0x1f0>)
 8004e02:	4841      	ldr	r0, [pc, #260]	; (8004f08 <mem_trim+0x1e8>)
 8004e04:	f00a f9d0 	bl	800f1a8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004e0e:	8afa      	ldrh	r2, [r7, #22]
 8004e10:	8bfb      	ldrh	r3, [r7, #30]
 8004e12:	4413      	add	r3, r2
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3308      	adds	r3, #8
 8004e18:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004e1a:	4b3e      	ldr	r3, [pc, #248]	; (8004f14 <mem_trim+0x1f4>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d106      	bne.n	8004e32 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004e24:	89fb      	ldrh	r3, [r7, #14]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff fdd2 	bl	80049d0 <ptr_to_mem>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	4a39      	ldr	r2, [pc, #228]	; (8004f14 <mem_trim+0x1f4>)
 8004e30:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004e32:	89fb      	ldrh	r3, [r7, #14]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fdcb 	bl	80049d0 <ptr_to_mem>
 8004e3a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	89ba      	ldrh	r2, [r7, #12]
 8004e46:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	8afa      	ldrh	r2, [r7, #22]
 8004e4c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	89fa      	ldrh	r2, [r7, #14]
 8004e52:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e5c:	d047      	beq.n	8004eee <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff fdb4 	bl	80049d0 <ptr_to_mem>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	89fb      	ldrh	r3, [r7, #14]
 8004e6c:	8053      	strh	r3, [r2, #2]
 8004e6e:	e03e      	b.n	8004eee <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004e70:	8bfb      	ldrh	r3, [r7, #30]
 8004e72:	f103 0214 	add.w	r2, r3, #20
 8004e76:	8abb      	ldrh	r3, [r7, #20]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d838      	bhi.n	8004eee <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004e7c:	8afa      	ldrh	r2, [r7, #22]
 8004e7e:	8bfb      	ldrh	r3, [r7, #30]
 8004e80:	4413      	add	r3, r2
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3308      	adds	r3, #8
 8004e86:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e90:	d106      	bne.n	8004ea0 <mem_trim+0x180>
 8004e92:	4b1b      	ldr	r3, [pc, #108]	; (8004f00 <mem_trim+0x1e0>)
 8004e94:	f240 3216 	movw	r2, #790	; 0x316
 8004e98:	491d      	ldr	r1, [pc, #116]	; (8004f10 <mem_trim+0x1f0>)
 8004e9a:	481b      	ldr	r0, [pc, #108]	; (8004f08 <mem_trim+0x1e8>)
 8004e9c:	f00a f984 	bl	800f1a8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004ea0:	89fb      	ldrh	r3, [r7, #14]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7ff fd94 	bl	80049d0 <ptr_to_mem>
 8004ea8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004eaa:	4b1a      	ldr	r3, [pc, #104]	; (8004f14 <mem_trim+0x1f4>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d202      	bcs.n	8004eba <mem_trim+0x19a>
      lfree = mem2;
 8004eb4:	4a17      	ldr	r2, [pc, #92]	; (8004f14 <mem_trim+0x1f4>)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	881a      	ldrh	r2, [r3, #0]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	8afa      	ldrh	r2, [r7, #22]
 8004ecc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	89fa      	ldrh	r2, [r7, #14]
 8004ed2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004edc:	d007      	beq.n	8004eee <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff fd74 	bl	80049d0 <ptr_to_mem>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	89fb      	ldrh	r3, [r7, #14]
 8004eec:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004eee:	687b      	ldr	r3, [r7, #4]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3720      	adds	r7, #32
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	20005428 	.word	0x20005428
 8004efc:	2000542c 	.word	0x2000542c
 8004f00:	080106e0 	.word	0x080106e0
 8004f04:	08010850 	.word	0x08010850
 8004f08:	08010728 	.word	0x08010728
 8004f0c:	08010868 	.word	0x08010868
 8004f10:	08010888 	.word	0x08010888
 8004f14:	20005430 	.word	0x20005430

08004f18 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004f22:	88fb      	ldrh	r3, [r7, #6]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <mem_malloc+0x14>
    return NULL;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	e0d9      	b.n	80050e0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004f2c:	88fb      	ldrh	r3, [r7, #6]
 8004f2e:	3303      	adds	r3, #3
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	f023 0303 	bic.w	r3, r3, #3
 8004f36:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004f38:	8bbb      	ldrh	r3, [r7, #28]
 8004f3a:	2b0b      	cmp	r3, #11
 8004f3c:	d801      	bhi.n	8004f42 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004f3e:	230c      	movs	r3, #12
 8004f40:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004f42:	8bbb      	ldrh	r3, [r7, #28]
 8004f44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f48:	d803      	bhi.n	8004f52 <mem_malloc+0x3a>
 8004f4a:	8bba      	ldrh	r2, [r7, #28]
 8004f4c:	88fb      	ldrh	r3, [r7, #6]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d201      	bcs.n	8004f56 <mem_malloc+0x3e>
    return NULL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	e0c4      	b.n	80050e0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004f56:	4b64      	ldr	r3, [pc, #400]	; (80050e8 <mem_malloc+0x1d0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff fd4a 	bl	80049f4 <mem_to_ptr>
 8004f60:	4603      	mov	r3, r0
 8004f62:	83fb      	strh	r3, [r7, #30]
 8004f64:	e0b4      	b.n	80050d0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004f66:	8bfb      	ldrh	r3, [r7, #30]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff fd31 	bl	80049d0 <ptr_to_mem>
 8004f6e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	791b      	ldrb	r3, [r3, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f040 80a4 	bne.w	80050c2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	8bfb      	ldrh	r3, [r7, #30]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	f1a3 0208 	sub.w	r2, r3, #8
 8004f88:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	f0c0 8099 	bcc.w	80050c2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	461a      	mov	r2, r3
 8004f96:	8bfb      	ldrh	r3, [r7, #30]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f1a3 0208 	sub.w	r2, r3, #8
 8004f9e:	8bbb      	ldrh	r3, [r7, #28]
 8004fa0:	3314      	adds	r3, #20
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d333      	bcc.n	800500e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004fa6:	8bfa      	ldrh	r2, [r7, #30]
 8004fa8:	8bbb      	ldrh	r3, [r7, #28]
 8004faa:	4413      	add	r3, r2
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	3308      	adds	r3, #8
 8004fb0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004fb2:	8a7b      	ldrh	r3, [r7, #18]
 8004fb4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004fb8:	d106      	bne.n	8004fc8 <mem_malloc+0xb0>
 8004fba:	4b4c      	ldr	r3, [pc, #304]	; (80050ec <mem_malloc+0x1d4>)
 8004fbc:	f240 3287 	movw	r2, #903	; 0x387
 8004fc0:	494b      	ldr	r1, [pc, #300]	; (80050f0 <mem_malloc+0x1d8>)
 8004fc2:	484c      	ldr	r0, [pc, #304]	; (80050f4 <mem_malloc+0x1dc>)
 8004fc4:	f00a f8f0 	bl	800f1a8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004fc8:	8a7b      	ldrh	r3, [r7, #18]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff fd00 	bl	80049d0 <ptr_to_mem>
 8004fd0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	881a      	ldrh	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8bfa      	ldrh	r2, [r7, #30]
 8004fe4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	8a7a      	ldrh	r2, [r7, #18]
 8004fea:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ffa:	d00b      	beq.n	8005014 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff fce5 	bl	80049d0 <ptr_to_mem>
 8005006:	4602      	mov	r2, r0
 8005008:	8a7b      	ldrh	r3, [r7, #18]
 800500a:	8053      	strh	r3, [r2, #2]
 800500c:	e002      	b.n	8005014 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2201      	movs	r2, #1
 8005012:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005014:	4b34      	ldr	r3, [pc, #208]	; (80050e8 <mem_malloc+0x1d0>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	429a      	cmp	r2, r3
 800501c:	d127      	bne.n	800506e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800501e:	4b32      	ldr	r3, [pc, #200]	; (80050e8 <mem_malloc+0x1d0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005024:	e005      	b.n	8005032 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff fcd0 	bl	80049d0 <ptr_to_mem>
 8005030:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	791b      	ldrb	r3, [r3, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d004      	beq.n	8005044 <mem_malloc+0x12c>
 800503a:	4b2f      	ldr	r3, [pc, #188]	; (80050f8 <mem_malloc+0x1e0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	429a      	cmp	r2, r3
 8005042:	d1f0      	bne.n	8005026 <mem_malloc+0x10e>
          }
          lfree = cur;
 8005044:	4a28      	ldr	r2, [pc, #160]	; (80050e8 <mem_malloc+0x1d0>)
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800504a:	4b27      	ldr	r3, [pc, #156]	; (80050e8 <mem_malloc+0x1d0>)
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	4b2a      	ldr	r3, [pc, #168]	; (80050f8 <mem_malloc+0x1e0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d00b      	beq.n	800506e <mem_malloc+0x156>
 8005056:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <mem_malloc+0x1d0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	791b      	ldrb	r3, [r3, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d006      	beq.n	800506e <mem_malloc+0x156>
 8005060:	4b22      	ldr	r3, [pc, #136]	; (80050ec <mem_malloc+0x1d4>)
 8005062:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005066:	4925      	ldr	r1, [pc, #148]	; (80050fc <mem_malloc+0x1e4>)
 8005068:	4822      	ldr	r0, [pc, #136]	; (80050f4 <mem_malloc+0x1dc>)
 800506a:	f00a f89d 	bl	800f1a8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800506e:	8bba      	ldrh	r2, [r7, #28]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	4413      	add	r3, r2
 8005074:	3308      	adds	r3, #8
 8005076:	4a20      	ldr	r2, [pc, #128]	; (80050f8 <mem_malloc+0x1e0>)
 8005078:	6812      	ldr	r2, [r2, #0]
 800507a:	4293      	cmp	r3, r2
 800507c:	d906      	bls.n	800508c <mem_malloc+0x174>
 800507e:	4b1b      	ldr	r3, [pc, #108]	; (80050ec <mem_malloc+0x1d4>)
 8005080:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005084:	491e      	ldr	r1, [pc, #120]	; (8005100 <mem_malloc+0x1e8>)
 8005086:	481b      	ldr	r0, [pc, #108]	; (80050f4 <mem_malloc+0x1dc>)
 8005088:	f00a f88e 	bl	800f1a8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d006      	beq.n	80050a4 <mem_malloc+0x18c>
 8005096:	4b15      	ldr	r3, [pc, #84]	; (80050ec <mem_malloc+0x1d4>)
 8005098:	f240 32bb 	movw	r2, #955	; 0x3bb
 800509c:	4919      	ldr	r1, [pc, #100]	; (8005104 <mem_malloc+0x1ec>)
 800509e:	4815      	ldr	r0, [pc, #84]	; (80050f4 <mem_malloc+0x1dc>)
 80050a0:	f00a f882 	bl	800f1a8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d006      	beq.n	80050bc <mem_malloc+0x1a4>
 80050ae:	4b0f      	ldr	r3, [pc, #60]	; (80050ec <mem_malloc+0x1d4>)
 80050b0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80050b4:	4914      	ldr	r1, [pc, #80]	; (8005108 <mem_malloc+0x1f0>)
 80050b6:	480f      	ldr	r0, [pc, #60]	; (80050f4 <mem_malloc+0x1dc>)
 80050b8:	f00a f876 	bl	800f1a8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	3308      	adds	r3, #8
 80050c0:	e00e      	b.n	80050e0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80050c2:	8bfb      	ldrh	r3, [r7, #30]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7ff fc83 	bl	80049d0 <ptr_to_mem>
 80050ca:	4603      	mov	r3, r0
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80050d0:	8bfa      	ldrh	r2, [r7, #30]
 80050d2:	8bbb      	ldrh	r3, [r7, #28]
 80050d4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80050d8:	429a      	cmp	r2, r3
 80050da:	f4ff af44 	bcc.w	8004f66 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3720      	adds	r7, #32
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	20005430 	.word	0x20005430
 80050ec:	080106e0 	.word	0x080106e0
 80050f0:	08010888 	.word	0x08010888
 80050f4:	08010728 	.word	0x08010728
 80050f8:	2000542c 	.word	0x2000542c
 80050fc:	0801089c 	.word	0x0801089c
 8005100:	080108b8 	.word	0x080108b8
 8005104:	080108e8 	.word	0x080108e8
 8005108:	08010918 	.word	0x08010918

0800510c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	3303      	adds	r3, #3
 8005122:	f023 0303 	bic.w	r3, r3, #3
 8005126:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005128:	2300      	movs	r3, #0
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	e011      	b.n	8005152 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	4413      	add	r3, r2
 800514a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3301      	adds	r3, #1
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	885b      	ldrh	r3, [r3, #2]
 8005156:	461a      	mov	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4293      	cmp	r3, r2
 800515c:	dbe7      	blt.n	800512e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800515e:	bf00      	nop
 8005160:	bf00      	nop
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005172:	2300      	movs	r3, #0
 8005174:	80fb      	strh	r3, [r7, #6]
 8005176:	e009      	b.n	800518c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005178:	88fb      	ldrh	r3, [r7, #6]
 800517a:	4a08      	ldr	r2, [pc, #32]	; (800519c <memp_init+0x30>)
 800517c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff ffc3 	bl	800510c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005186:	88fb      	ldrh	r3, [r7, #6]
 8005188:	3301      	adds	r3, #1
 800518a:	80fb      	strh	r3, [r7, #6]
 800518c:	88fb      	ldrh	r3, [r7, #6]
 800518e:	2b09      	cmp	r3, #9
 8005190:	d9f2      	bls.n	8005178 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005192:	bf00      	nop
 8005194:	bf00      	nop
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	080131cc 	.word	0x080131cc

080051a0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d012      	beq.n	80051dc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d006      	beq.n	80051d8 <do_memp_malloc_pool+0x38>
 80051ca:	4b07      	ldr	r3, [pc, #28]	; (80051e8 <do_memp_malloc_pool+0x48>)
 80051cc:	f44f 728c 	mov.w	r2, #280	; 0x118
 80051d0:	4906      	ldr	r1, [pc, #24]	; (80051ec <do_memp_malloc_pool+0x4c>)
 80051d2:	4807      	ldr	r0, [pc, #28]	; (80051f0 <do_memp_malloc_pool+0x50>)
 80051d4:	f009 ffe8 	bl	800f1a8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	e000      	b.n	80051de <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	0801093c 	.word	0x0801093c
 80051ec:	0801096c 	.word	0x0801096c
 80051f0:	08010990 	.word	0x08010990

080051f4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <memp_malloc_pool+0x1c>
 8005202:	4b0a      	ldr	r3, [pc, #40]	; (800522c <memp_malloc_pool+0x38>)
 8005204:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8005208:	4909      	ldr	r1, [pc, #36]	; (8005230 <memp_malloc_pool+0x3c>)
 800520a:	480a      	ldr	r0, [pc, #40]	; (8005234 <memp_malloc_pool+0x40>)
 800520c:	f009 ffcc 	bl	800f1a8 <iprintf>
  if (desc == NULL) {
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <memp_malloc_pool+0x26>
    return NULL;
 8005216:	2300      	movs	r3, #0
 8005218:	e003      	b.n	8005222 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff ffc0 	bl	80051a0 <do_memp_malloc_pool>
 8005220:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005222:	4618      	mov	r0, r3
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	0801093c 	.word	0x0801093c
 8005230:	080109b8 	.word	0x080109b8
 8005234:	08010990 	.word	0x08010990

08005238 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	4603      	mov	r3, r0
 8005240:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005242:	79fb      	ldrb	r3, [r7, #7]
 8005244:	2b09      	cmp	r3, #9
 8005246:	d908      	bls.n	800525a <memp_malloc+0x22>
 8005248:	4b0a      	ldr	r3, [pc, #40]	; (8005274 <memp_malloc+0x3c>)
 800524a:	f240 1257 	movw	r2, #343	; 0x157
 800524e:	490a      	ldr	r1, [pc, #40]	; (8005278 <memp_malloc+0x40>)
 8005250:	480a      	ldr	r0, [pc, #40]	; (800527c <memp_malloc+0x44>)
 8005252:	f009 ffa9 	bl	800f1a8 <iprintf>
 8005256:	2300      	movs	r3, #0
 8005258:	e008      	b.n	800526c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	4a08      	ldr	r2, [pc, #32]	; (8005280 <memp_malloc+0x48>)
 800525e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff ff9c 	bl	80051a0 <do_memp_malloc_pool>
 8005268:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800526a:	68fb      	ldr	r3, [r7, #12]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	0801093c 	.word	0x0801093c
 8005278:	080109cc 	.word	0x080109cc
 800527c:	08010990 	.word	0x08010990
 8005280:	080131cc 	.word	0x080131cc

08005284 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	f003 0303 	and.w	r3, r3, #3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d006      	beq.n	80052a6 <do_memp_free_pool+0x22>
 8005298:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <do_memp_free_pool+0x40>)
 800529a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800529e:	490a      	ldr	r1, [pc, #40]	; (80052c8 <do_memp_free_pool+0x44>)
 80052a0:	480a      	ldr	r0, [pc, #40]	; (80052cc <do_memp_free_pool+0x48>)
 80052a2:	f009 ff81 	bl	800f1a8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80052bc:	bf00      	nop
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	0801093c 	.word	0x0801093c
 80052c8:	080109ec 	.word	0x080109ec
 80052cc:	08010990 	.word	0x08010990

080052d0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d106      	bne.n	80052ee <memp_free_pool+0x1e>
 80052e0:	4b0a      	ldr	r3, [pc, #40]	; (800530c <memp_free_pool+0x3c>)
 80052e2:	f240 1295 	movw	r2, #405	; 0x195
 80052e6:	490a      	ldr	r1, [pc, #40]	; (8005310 <memp_free_pool+0x40>)
 80052e8:	480a      	ldr	r0, [pc, #40]	; (8005314 <memp_free_pool+0x44>)
 80052ea:	f009 ff5d 	bl	800f1a8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d007      	beq.n	8005304 <memp_free_pool+0x34>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d004      	beq.n	8005304 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80052fa:	6839      	ldr	r1, [r7, #0]
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff ffc1 	bl	8005284 <do_memp_free_pool>
 8005302:	e000      	b.n	8005306 <memp_free_pool+0x36>
    return;
 8005304:	bf00      	nop
}
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	0801093c 	.word	0x0801093c
 8005310:	080109b8 	.word	0x080109b8
 8005314:	08010990 	.word	0x08010990

08005318 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	4603      	mov	r3, r0
 8005320:	6039      	str	r1, [r7, #0]
 8005322:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	2b09      	cmp	r3, #9
 8005328:	d907      	bls.n	800533a <memp_free+0x22>
 800532a:	4b0c      	ldr	r3, [pc, #48]	; (800535c <memp_free+0x44>)
 800532c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005330:	490b      	ldr	r1, [pc, #44]	; (8005360 <memp_free+0x48>)
 8005332:	480c      	ldr	r0, [pc, #48]	; (8005364 <memp_free+0x4c>)
 8005334:	f009 ff38 	bl	800f1a8 <iprintf>
 8005338:	e00c      	b.n	8005354 <memp_free+0x3c>

  if (mem == NULL) {
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d008      	beq.n	8005352 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005340:	79fb      	ldrb	r3, [r7, #7]
 8005342:	4a09      	ldr	r2, [pc, #36]	; (8005368 <memp_free+0x50>)
 8005344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff ff9a 	bl	8005284 <do_memp_free_pool>
 8005350:	e000      	b.n	8005354 <memp_free+0x3c>
    return;
 8005352:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	0801093c 	.word	0x0801093c
 8005360:	08010a0c 	.word	0x08010a0c
 8005364:	08010990 	.word	0x08010990
 8005368:	080131cc 	.word	0x080131cc

0800536c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005370:	bf00      	nop
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
	...

0800537c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d108      	bne.n	80053a2 <netif_add+0x26>
 8005390:	4b57      	ldr	r3, [pc, #348]	; (80054f0 <netif_add+0x174>)
 8005392:	f240 1227 	movw	r2, #295	; 0x127
 8005396:	4957      	ldr	r1, [pc, #348]	; (80054f4 <netif_add+0x178>)
 8005398:	4857      	ldr	r0, [pc, #348]	; (80054f8 <netif_add+0x17c>)
 800539a:	f009 ff05 	bl	800f1a8 <iprintf>
 800539e:	2300      	movs	r3, #0
 80053a0:	e0a2      	b.n	80054e8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d108      	bne.n	80053ba <netif_add+0x3e>
 80053a8:	4b51      	ldr	r3, [pc, #324]	; (80054f0 <netif_add+0x174>)
 80053aa:	f44f 7294 	mov.w	r2, #296	; 0x128
 80053ae:	4953      	ldr	r1, [pc, #332]	; (80054fc <netif_add+0x180>)
 80053b0:	4851      	ldr	r0, [pc, #324]	; (80054f8 <netif_add+0x17c>)
 80053b2:	f009 fef9 	bl	800f1a8 <iprintf>
 80053b6:	2300      	movs	r3, #0
 80053b8:	e096      	b.n	80054e8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80053c0:	4b4f      	ldr	r3, [pc, #316]	; (8005500 <netif_add+0x184>)
 80053c2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80053ca:	4b4d      	ldr	r3, [pc, #308]	; (8005500 <netif_add+0x184>)
 80053cc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80053d4:	4b4a      	ldr	r3, [pc, #296]	; (8005500 <netif_add+0x184>)
 80053d6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4a45      	ldr	r2, [pc, #276]	; (8005504 <netif_add+0x188>)
 80053ee:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a3a      	ldr	r2, [r7, #32]
 8005408:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800540a:	4b3f      	ldr	r3, [pc, #252]	; (8005508 <netif_add+0x18c>)
 800540c:	781a      	ldrb	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005418:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 f917 	bl	8005654 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	4798      	blx	r3
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <netif_add+0xba>
    return NULL;
 8005432:	2300      	movs	r3, #0
 8005434:	e058      	b.n	80054e8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800543c:	2bff      	cmp	r3, #255	; 0xff
 800543e:	d103      	bne.n	8005448 <netif_add+0xcc>
        netif->num = 0;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005448:	2300      	movs	r3, #0
 800544a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800544c:	4b2f      	ldr	r3, [pc, #188]	; (800550c <netif_add+0x190>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	617b      	str	r3, [r7, #20]
 8005452:	e02b      	b.n	80054ac <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	429a      	cmp	r2, r3
 800545a:	d106      	bne.n	800546a <netif_add+0xee>
 800545c:	4b24      	ldr	r3, [pc, #144]	; (80054f0 <netif_add+0x174>)
 800545e:	f240 128b 	movw	r2, #395	; 0x18b
 8005462:	492b      	ldr	r1, [pc, #172]	; (8005510 <netif_add+0x194>)
 8005464:	4824      	ldr	r0, [pc, #144]	; (80054f8 <netif_add+0x17c>)
 8005466:	f009 fe9f 	bl	800f1a8 <iprintf>
        num_netifs++;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	3301      	adds	r3, #1
 800546e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2bff      	cmp	r3, #255	; 0xff
 8005474:	dd06      	ble.n	8005484 <netif_add+0x108>
 8005476:	4b1e      	ldr	r3, [pc, #120]	; (80054f0 <netif_add+0x174>)
 8005478:	f240 128d 	movw	r2, #397	; 0x18d
 800547c:	4925      	ldr	r1, [pc, #148]	; (8005514 <netif_add+0x198>)
 800547e:	481e      	ldr	r0, [pc, #120]	; (80054f8 <netif_add+0x17c>)
 8005480:	f009 fe92 	bl	800f1a8 <iprintf>
        if (netif2->num == netif->num) {
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005490:	429a      	cmp	r2, r3
 8005492:	d108      	bne.n	80054a6 <netif_add+0x12a>
          netif->num++;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800549a:	3301      	adds	r3, #1
 800549c:	b2da      	uxtb	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80054a4:	e005      	b.n	80054b2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1d0      	bne.n	8005454 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1be      	bne.n	8005436 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054be:	2bfe      	cmp	r3, #254	; 0xfe
 80054c0:	d103      	bne.n	80054ca <netif_add+0x14e>
    netif_num = 0;
 80054c2:	4b11      	ldr	r3, [pc, #68]	; (8005508 <netif_add+0x18c>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	701a      	strb	r2, [r3, #0]
 80054c8:	e006      	b.n	80054d8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054d0:	3301      	adds	r3, #1
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <netif_add+0x18c>)
 80054d6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80054d8:	4b0c      	ldr	r3, [pc, #48]	; (800550c <netif_add+0x190>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80054e0:	4a0a      	ldr	r2, [pc, #40]	; (800550c <netif_add+0x190>)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80054e6:	68fb      	ldr	r3, [r7, #12]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	08010a28 	.word	0x08010a28
 80054f4:	08010abc 	.word	0x08010abc
 80054f8:	08010a78 	.word	0x08010a78
 80054fc:	08010ad8 	.word	0x08010ad8
 8005500:	08013234 	.word	0x08013234
 8005504:	0800592f 	.word	0x0800592f
 8005508:	200083a0 	.word	0x200083a0
 800550c:	20008398 	.word	0x20008398
 8005510:	08010afc 	.word	0x08010afc
 8005514:	08010b10 	.word	0x08010b10

08005518 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f002 fe11 	bl	800814c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800552a:	6839      	ldr	r1, [r7, #0]
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f007 fa45 	bl	800c9bc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
 8005532:	6839      	ldr	r1, [r7, #0]
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f001 fa91 	bl	8006a5c <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
}
 800553a:	bf00      	nop
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
	...

08005544 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <netif_do_set_ipaddr+0x20>
 8005556:	4b1d      	ldr	r3, [pc, #116]	; (80055cc <netif_do_set_ipaddr+0x88>)
 8005558:	f240 12cb 	movw	r2, #459	; 0x1cb
 800555c:	491c      	ldr	r1, [pc, #112]	; (80055d0 <netif_do_set_ipaddr+0x8c>)
 800555e:	481d      	ldr	r0, [pc, #116]	; (80055d4 <netif_do_set_ipaddr+0x90>)
 8005560:	f009 fe22 	bl	800f1a8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <netif_do_set_ipaddr+0x34>
 800556a:	4b18      	ldr	r3, [pc, #96]	; (80055cc <netif_do_set_ipaddr+0x88>)
 800556c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005570:	4917      	ldr	r1, [pc, #92]	; (80055d0 <netif_do_set_ipaddr+0x8c>)
 8005572:	4818      	ldr	r0, [pc, #96]	; (80055d4 <netif_do_set_ipaddr+0x90>)
 8005574:	f009 fe18 	bl	800f1a8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3304      	adds	r3, #4
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d01c      	beq.n	80055c0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3304      	adds	r3, #4
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005596:	f107 0314 	add.w	r3, r7, #20
 800559a:	4619      	mov	r1, r3
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7ff ffbb 	bl	8005518 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <netif_do_set_ipaddr+0x6a>
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	e000      	b.n	80055b0 <netif_do_set_ipaddr+0x6c>
 80055ae:	2300      	movs	r3, #0
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80055b4:	2101      	movs	r1, #1
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 f8d2 	bl	8005760 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80055bc:	2301      	movs	r3, #1
 80055be:	e000      	b.n	80055c2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3718      	adds	r7, #24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	08010a28 	.word	0x08010a28
 80055d0:	08010b40 	.word	0x08010b40
 80055d4:	08010a78 	.word	0x08010a78

080055d8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	3308      	adds	r3, #8
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d00a      	beq.n	8005608 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <netif_do_set_netmask+0x26>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	e000      	b.n	8005600 <netif_do_set_netmask+0x28>
 80055fe:	2300      	movs	r3, #0
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005604:	2301      	movs	r3, #1
 8005606:	e000      	b.n	800560a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005616:	b480      	push	{r7}
 8005618:	b085      	sub	sp, #20
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	330c      	adds	r3, #12
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d00a      	beq.n	8005646 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <netif_do_set_gw+0x26>
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	e000      	b.n	800563e <netif_do_set_gw+0x28>
 800563c:	2300      	movs	r3, #0
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005642:	2301      	movs	r3, #1
 8005644:	e000      	b.n	8005648 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005662:	2300      	movs	r3, #0
 8005664:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005670:	4b1c      	ldr	r3, [pc, #112]	; (80056e4 <netif_set_addr+0x90>)
 8005672:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800567a:	4b1a      	ldr	r3, [pc, #104]	; (80056e4 <netif_set_addr+0x90>)
 800567c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005684:	4b17      	ldr	r3, [pc, #92]	; (80056e4 <netif_set_addr+0x90>)
 8005686:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <netif_set_addr+0x42>
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <netif_set_addr+0x46>
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <netif_set_addr+0x48>
 800569a:	2300      	movs	r3, #0
 800569c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d006      	beq.n	80056b2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80056a4:	f107 0310 	add.w	r3, r7, #16
 80056a8:	461a      	mov	r2, r3
 80056aa:	68b9      	ldr	r1, [r7, #8]
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f7ff ff49 	bl	8005544 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	6879      	ldr	r1, [r7, #4]
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f7ff ff8e 	bl	80055d8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	6839      	ldr	r1, [r7, #0]
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f7ff ffa8 	bl	8005616 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d106      	bne.n	80056da <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80056cc:	f107 0310 	add.w	r3, r7, #16
 80056d0:	461a      	mov	r2, r3
 80056d2:	68b9      	ldr	r1, [r7, #8]
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f7ff ff35 	bl	8005544 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80056da:	bf00      	nop
 80056dc:	3720      	adds	r7, #32
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	08013234 	.word	0x08013234

080056e8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80056f0:	4a04      	ldr	r2, [pc, #16]	; (8005704 <netif_set_default+0x1c>)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	2000839c 	.word	0x2000839c

08005708 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d107      	bne.n	8005726 <netif_set_up+0x1e>
 8005716:	4b0f      	ldr	r3, [pc, #60]	; (8005754 <netif_set_up+0x4c>)
 8005718:	f44f 7254 	mov.w	r2, #848	; 0x350
 800571c:	490e      	ldr	r1, [pc, #56]	; (8005758 <netif_set_up+0x50>)
 800571e:	480f      	ldr	r0, [pc, #60]	; (800575c <netif_set_up+0x54>)
 8005720:	f009 fd42 	bl	800f1a8 <iprintf>
 8005724:	e013      	b.n	800574e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10c      	bne.n	800574e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800573a:	f043 0301 	orr.w	r3, r3, #1
 800573e:	b2da      	uxtb	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005746:	2103      	movs	r1, #3
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f809 	bl	8005760 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	08010a28 	.word	0x08010a28
 8005758:	08010bb0 	.word	0x08010bb0
 800575c:	08010a78 	.word	0x08010a78

08005760 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	460b      	mov	r3, r1
 800576a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d106      	bne.n	8005780 <netif_issue_reports+0x20>
 8005772:	4b18      	ldr	r3, [pc, #96]	; (80057d4 <netif_issue_reports+0x74>)
 8005774:	f240 326d 	movw	r2, #877	; 0x36d
 8005778:	4917      	ldr	r1, [pc, #92]	; (80057d8 <netif_issue_reports+0x78>)
 800577a:	4818      	ldr	r0, [pc, #96]	; (80057dc <netif_issue_reports+0x7c>)
 800577c:	f009 fd14 	bl	800f1a8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005786:	f003 0304 	and.w	r3, r3, #4
 800578a:	2b00      	cmp	r3, #0
 800578c:	d01e      	beq.n	80057cc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005794:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005798:	2b00      	cmp	r3, #0
 800579a:	d017      	beq.n	80057cc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d013      	beq.n	80057ce <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3304      	adds	r3, #4
 80057aa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00e      	beq.n	80057ce <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80057b6:	f003 0308 	and.w	r3, r3, #8
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3304      	adds	r3, #4
 80057c2:	4619      	mov	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f008 f863 	bl	800d890 <etharp_request>
 80057ca:	e000      	b.n	80057ce <netif_issue_reports+0x6e>
    return;
 80057cc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	08010a28 	.word	0x08010a28
 80057d8:	08010bcc 	.word	0x08010bcc
 80057dc:	08010a78 	.word	0x08010a78

080057e0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d107      	bne.n	80057fe <netif_set_down+0x1e>
 80057ee:	4b12      	ldr	r3, [pc, #72]	; (8005838 <netif_set_down+0x58>)
 80057f0:	f240 329b 	movw	r2, #923	; 0x39b
 80057f4:	4911      	ldr	r1, [pc, #68]	; (800583c <netif_set_down+0x5c>)
 80057f6:	4812      	ldr	r0, [pc, #72]	; (8005840 <netif_set_down+0x60>)
 80057f8:	f009 fcd6 	bl	800f1a8 <iprintf>
 80057fc:	e019      	b.n	8005832 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d012      	beq.n	8005832 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005812:	f023 0301 	bic.w	r3, r3, #1
 8005816:	b2da      	uxtb	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f007 fbed 	bl	800d00c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	08010a28 	.word	0x08010a28
 800583c:	08010bf0 	.word	0x08010bf0
 8005840:	08010a78 	.word	0x08010a78

08005844 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d107      	bne.n	8005862 <netif_set_link_up+0x1e>
 8005852:	4b13      	ldr	r3, [pc, #76]	; (80058a0 <netif_set_link_up+0x5c>)
 8005854:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8005858:	4912      	ldr	r1, [pc, #72]	; (80058a4 <netif_set_link_up+0x60>)
 800585a:	4813      	ldr	r0, [pc, #76]	; (80058a8 <netif_set_link_up+0x64>)
 800585c:	f009 fca4 	bl	800f1a8 <iprintf>
 8005860:	e01b      	b.n	800589a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b00      	cmp	r3, #0
 800586e:	d114      	bne.n	800589a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005876:	f043 0304 	orr.w	r3, r3, #4
 800587a:	b2da      	uxtb	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005882:	2103      	movs	r1, #3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff ff6b 	bl	8005760 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <netif_set_link_up+0x56>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	08010a28 	.word	0x08010a28
 80058a4:	08010c10 	.word	0x08010c10
 80058a8:	08010a78 	.word	0x08010a78

080058ac <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d107      	bne.n	80058ca <netif_set_link_down+0x1e>
 80058ba:	4b11      	ldr	r3, [pc, #68]	; (8005900 <netif_set_link_down+0x54>)
 80058bc:	f240 4206 	movw	r2, #1030	; 0x406
 80058c0:	4910      	ldr	r1, [pc, #64]	; (8005904 <netif_set_link_down+0x58>)
 80058c2:	4811      	ldr	r0, [pc, #68]	; (8005908 <netif_set_link_down+0x5c>)
 80058c4:	f009 fc70 	bl	800f1a8 <iprintf>
 80058c8:	e017      	b.n	80058fa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d010      	beq.n	80058fa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058de:	f023 0304 	bic.w	r3, r3, #4
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <netif_set_link_down+0x4e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	08010a28 	.word	0x08010a28
 8005904:	08010c34 	.word	0x08010c34
 8005908:	08010a78 	.word	0x08010a78

0800590c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	61da      	str	r2, [r3, #28]
  }
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800592e:	b480      	push	{r7}
 8005930:	b085      	sub	sp, #20
 8005932:	af00      	add	r7, sp, #0
 8005934:	60f8      	str	r0, [r7, #12]
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800593a:	f06f 030b 	mvn.w	r3, #11
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
	...

0800594c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	4603      	mov	r3, r0
 8005954:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005956:	79fb      	ldrb	r3, [r7, #7]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d013      	beq.n	8005984 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800595c:	4b0d      	ldr	r3, [pc, #52]	; (8005994 <netif_get_by_index+0x48>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	60fb      	str	r3, [r7, #12]
 8005962:	e00c      	b.n	800597e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800596a:	3301      	adds	r3, #1
 800596c:	b2db      	uxtb	r3, r3
 800596e:	79fa      	ldrb	r2, [r7, #7]
 8005970:	429a      	cmp	r2, r3
 8005972:	d101      	bne.n	8005978 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	e006      	b.n	8005986 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1ef      	bne.n	8005964 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	20008398 	.word	0x20008398

08005998 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800599e:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <pbuf_free_ooseq+0x38>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80059a4:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <pbuf_free_ooseq+0x3c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	607b      	str	r3, [r7, #4]
 80059aa:	e00a      	b.n	80059c2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f002 fc07 	bl	80081c8 <tcp_free_ooseq>
      return;
 80059ba:	e005      	b.n	80059c8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	607b      	str	r3, [r7, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1f1      	bne.n	80059ac <pbuf_free_ooseq+0x14>
    }
  }
}
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	200083a1 	.word	0x200083a1
 80059d4:	200083b4 	.word	0x200083b4

080059d8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80059dc:	4b03      	ldr	r3, [pc, #12]	; (80059ec <pbuf_pool_is_empty+0x14>)
 80059de:	2201      	movs	r2, #1
 80059e0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80059e2:	bf00      	nop
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	200083a1 	.word	0x200083a1

080059f0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	4611      	mov	r1, r2
 80059fc:	461a      	mov	r2, r3
 80059fe:	460b      	mov	r3, r1
 8005a00:	80fb      	strh	r3, [r7, #6]
 8005a02:	4613      	mov	r3, r2
 8005a04:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	88fa      	ldrh	r2, [r7, #6]
 8005a16:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	88ba      	ldrh	r2, [r7, #4]
 8005a1c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005a1e:	8b3b      	ldrh	r3, [r7, #24]
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	7f3a      	ldrb	r2, [r7, #28]
 8005a2a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	73da      	strb	r2, [r3, #15]
}
 8005a38:	bf00      	nop
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08c      	sub	sp, #48	; 0x30
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	71fb      	strb	r3, [r7, #7]
 8005a4e:	460b      	mov	r3, r1
 8005a50:	80bb      	strh	r3, [r7, #4]
 8005a52:	4613      	mov	r3, r2
 8005a54:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005a56:	79fb      	ldrb	r3, [r7, #7]
 8005a58:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005a5a:	887b      	ldrh	r3, [r7, #2]
 8005a5c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005a60:	d07f      	beq.n	8005b62 <pbuf_alloc+0x11e>
 8005a62:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005a66:	f300 80c8 	bgt.w	8005bfa <pbuf_alloc+0x1b6>
 8005a6a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005a6e:	d010      	beq.n	8005a92 <pbuf_alloc+0x4e>
 8005a70:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005a74:	f300 80c1 	bgt.w	8005bfa <pbuf_alloc+0x1b6>
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d002      	beq.n	8005a82 <pbuf_alloc+0x3e>
 8005a7c:	2b41      	cmp	r3, #65	; 0x41
 8005a7e:	f040 80bc 	bne.w	8005bfa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005a82:	887a      	ldrh	r2, [r7, #2]
 8005a84:	88bb      	ldrh	r3, [r7, #4]
 8005a86:	4619      	mov	r1, r3
 8005a88:	2000      	movs	r0, #0
 8005a8a:	f000 f8d1 	bl	8005c30 <pbuf_alloc_reference>
 8005a8e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005a90:	e0bd      	b.n	8005c0e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005a92:	2300      	movs	r3, #0
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005a9a:	88bb      	ldrh	r3, [r7, #4]
 8005a9c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005a9e:	2009      	movs	r0, #9
 8005aa0:	f7ff fbca 	bl	8005238 <memp_malloc>
 8005aa4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d109      	bne.n	8005ac0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005aac:	f7ff ff94 	bl	80059d8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <pbuf_alloc+0x78>
            pbuf_free(p);
 8005ab6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ab8:	f000 faba 	bl	8006030 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005abc:	2300      	movs	r3, #0
 8005abe:	e0a7      	b.n	8005c10 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005ac0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ac2:	3303      	adds	r3, #3
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	f023 0303 	bic.w	r3, r3, #3
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	8b7a      	ldrh	r2, [r7, #26]
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	bf28      	it	cs
 8005ad8:	4613      	movcs	r3, r2
 8005ada:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005adc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ade:	3310      	adds	r3, #16
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	3303      	adds	r3, #3
 8005ae6:	f023 0303 	bic.w	r3, r3, #3
 8005aea:	4618      	mov	r0, r3
 8005aec:	89f9      	ldrh	r1, [r7, #14]
 8005aee:	8b7a      	ldrh	r2, [r7, #26]
 8005af0:	2300      	movs	r3, #0
 8005af2:	9301      	str	r3, [sp, #4]
 8005af4:	887b      	ldrh	r3, [r7, #2]
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	460b      	mov	r3, r1
 8005afa:	4601      	mov	r1, r0
 8005afc:	6938      	ldr	r0, [r7, #16]
 8005afe:	f7ff ff77 	bl	80059f0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f003 0303 	and.w	r3, r3, #3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d006      	beq.n	8005b1c <pbuf_alloc+0xd8>
 8005b0e:	4b42      	ldr	r3, [pc, #264]	; (8005c18 <pbuf_alloc+0x1d4>)
 8005b10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b14:	4941      	ldr	r1, [pc, #260]	; (8005c1c <pbuf_alloc+0x1d8>)
 8005b16:	4842      	ldr	r0, [pc, #264]	; (8005c20 <pbuf_alloc+0x1dc>)
 8005b18:	f009 fb46 	bl	800f1a8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005b1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b1e:	3303      	adds	r3, #3
 8005b20:	f023 0303 	bic.w	r3, r3, #3
 8005b24:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005b28:	d106      	bne.n	8005b38 <pbuf_alloc+0xf4>
 8005b2a:	4b3b      	ldr	r3, [pc, #236]	; (8005c18 <pbuf_alloc+0x1d4>)
 8005b2c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005b30:	493c      	ldr	r1, [pc, #240]	; (8005c24 <pbuf_alloc+0x1e0>)
 8005b32:	483b      	ldr	r0, [pc, #236]	; (8005c20 <pbuf_alloc+0x1dc>)
 8005b34:	f009 fb38 	bl	800f1a8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d102      	bne.n	8005b44 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
 8005b42:	e002      	b.n	8005b4a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005b4e:	8b7a      	ldrh	r2, [r7, #26]
 8005b50:	89fb      	ldrh	r3, [r7, #14]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005b5a:	8b7b      	ldrh	r3, [r7, #26]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d19e      	bne.n	8005a9e <pbuf_alloc+0x5a>
      break;
 8005b60:	e055      	b.n	8005c0e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005b62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b64:	3303      	adds	r3, #3
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	f023 0303 	bic.w	r3, r3, #3
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	88bb      	ldrh	r3, [r7, #4]
 8005b70:	3303      	adds	r3, #3
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	f023 0303 	bic.w	r3, r3, #3
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	4413      	add	r3, r2
 8005b7c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005b7e:	8b3b      	ldrh	r3, [r7, #24]
 8005b80:	3310      	adds	r3, #16
 8005b82:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005b84:	8b3a      	ldrh	r2, [r7, #24]
 8005b86:	88bb      	ldrh	r3, [r7, #4]
 8005b88:	3303      	adds	r3, #3
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d306      	bcc.n	8005ba0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005b92:	8afa      	ldrh	r2, [r7, #22]
 8005b94:	88bb      	ldrh	r3, [r7, #4]
 8005b96:	3303      	adds	r3, #3
 8005b98:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d201      	bcs.n	8005ba4 <pbuf_alloc+0x160>
        return NULL;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e035      	b.n	8005c10 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005ba4:	8afb      	ldrh	r3, [r7, #22]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff f9b6 	bl	8004f18 <mem_malloc>
 8005bac:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <pbuf_alloc+0x174>
        return NULL;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	e02b      	b.n	8005c10 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005bb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005bba:	3310      	adds	r3, #16
 8005bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bbe:	4413      	add	r3, r2
 8005bc0:	3303      	adds	r3, #3
 8005bc2:	f023 0303 	bic.w	r3, r3, #3
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	88b9      	ldrh	r1, [r7, #4]
 8005bca:	88ba      	ldrh	r2, [r7, #4]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	9301      	str	r3, [sp, #4]
 8005bd0:	887b      	ldrh	r3, [r7, #2]
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	4601      	mov	r1, r0
 8005bd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bda:	f7ff ff09 	bl	80059f0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d010      	beq.n	8005c0c <pbuf_alloc+0x1c8>
 8005bea:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <pbuf_alloc+0x1d4>)
 8005bec:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005bf0:	490d      	ldr	r1, [pc, #52]	; (8005c28 <pbuf_alloc+0x1e4>)
 8005bf2:	480b      	ldr	r0, [pc, #44]	; (8005c20 <pbuf_alloc+0x1dc>)
 8005bf4:	f009 fad8 	bl	800f1a8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005bf8:	e008      	b.n	8005c0c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005bfa:	4b07      	ldr	r3, [pc, #28]	; (8005c18 <pbuf_alloc+0x1d4>)
 8005bfc:	f240 1227 	movw	r2, #295	; 0x127
 8005c00:	490a      	ldr	r1, [pc, #40]	; (8005c2c <pbuf_alloc+0x1e8>)
 8005c02:	4807      	ldr	r0, [pc, #28]	; (8005c20 <pbuf_alloc+0x1dc>)
 8005c04:	f009 fad0 	bl	800f1a8 <iprintf>
      return NULL;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	e001      	b.n	8005c10 <pbuf_alloc+0x1cc>
      break;
 8005c0c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3728      	adds	r7, #40	; 0x28
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	08010c58 	.word	0x08010c58
 8005c1c:	08010c88 	.word	0x08010c88
 8005c20:	08010cb8 	.word	0x08010cb8
 8005c24:	08010ce0 	.word	0x08010ce0
 8005c28:	08010d14 	.word	0x08010d14
 8005c2c:	08010d40 	.word	0x08010d40

08005c30 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	807b      	strh	r3, [r7, #2]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005c40:	883b      	ldrh	r3, [r7, #0]
 8005c42:	2b41      	cmp	r3, #65	; 0x41
 8005c44:	d009      	beq.n	8005c5a <pbuf_alloc_reference+0x2a>
 8005c46:	883b      	ldrh	r3, [r7, #0]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d006      	beq.n	8005c5a <pbuf_alloc_reference+0x2a>
 8005c4c:	4b0f      	ldr	r3, [pc, #60]	; (8005c8c <pbuf_alloc_reference+0x5c>)
 8005c4e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005c52:	490f      	ldr	r1, [pc, #60]	; (8005c90 <pbuf_alloc_reference+0x60>)
 8005c54:	480f      	ldr	r0, [pc, #60]	; (8005c94 <pbuf_alloc_reference+0x64>)
 8005c56:	f009 faa7 	bl	800f1a8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005c5a:	2008      	movs	r0, #8
 8005c5c:	f7ff faec 	bl	8005238 <memp_malloc>
 8005c60:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e00b      	b.n	8005c84 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005c6c:	8879      	ldrh	r1, [r7, #2]
 8005c6e:	887a      	ldrh	r2, [r7, #2]
 8005c70:	2300      	movs	r3, #0
 8005c72:	9301      	str	r3, [sp, #4]
 8005c74:	883b      	ldrh	r3, [r7, #0]
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	460b      	mov	r3, r1
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f7ff feb7 	bl	80059f0 <pbuf_init_alloced_pbuf>
  return p;
 8005c82:	68fb      	ldr	r3, [r7, #12]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	08010c58 	.word	0x08010c58
 8005c90:	08010d5c 	.word	0x08010d5c
 8005c94:	08010cb8 	.word	0x08010cb8

08005c98 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af02      	add	r7, sp, #8
 8005c9e:	607b      	str	r3, [r7, #4]
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	73fb      	strb	r3, [r7, #15]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	81bb      	strh	r3, [r7, #12]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005cb0:	8a7b      	ldrh	r3, [r7, #18]
 8005cb2:	3303      	adds	r3, #3
 8005cb4:	f023 0203 	bic.w	r2, r3, #3
 8005cb8:	89bb      	ldrh	r3, [r7, #12]
 8005cba:	441a      	add	r2, r3
 8005cbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d901      	bls.n	8005cc6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e018      	b.n	8005cf8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d007      	beq.n	8005cdc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005ccc:	8a7b      	ldrh	r3, [r7, #18]
 8005cce:	3303      	adds	r3, #3
 8005cd0:	f023 0303 	bic.w	r3, r3, #3
 8005cd4:	6a3a      	ldr	r2, [r7, #32]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	e001      	b.n	8005ce0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	89b9      	ldrh	r1, [r7, #12]
 8005ce4:	89ba      	ldrh	r2, [r7, #12]
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	9301      	str	r3, [sp, #4]
 8005cea:	897b      	ldrh	r3, [r7, #10]
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	6979      	ldr	r1, [r7, #20]
 8005cf2:	f7ff fe7d 	bl	80059f0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005cf6:	687b      	ldr	r3, [r7, #4]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <pbuf_realloc+0x20>
 8005d12:	4b3a      	ldr	r3, [pc, #232]	; (8005dfc <pbuf_realloc+0xfc>)
 8005d14:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005d18:	4939      	ldr	r1, [pc, #228]	; (8005e00 <pbuf_realloc+0x100>)
 8005d1a:	483a      	ldr	r0, [pc, #232]	; (8005e04 <pbuf_realloc+0x104>)
 8005d1c:	f009 fa44 	bl	800f1a8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	891b      	ldrh	r3, [r3, #8]
 8005d24:	887a      	ldrh	r2, [r7, #2]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d263      	bcs.n	8005df2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	891a      	ldrh	r2, [r3, #8]
 8005d2e:	887b      	ldrh	r3, [r7, #2]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005d34:	887b      	ldrh	r3, [r7, #2]
 8005d36:	817b      	strh	r3, [r7, #10]
  q = p;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005d3c:	e018      	b.n	8005d70 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	895b      	ldrh	r3, [r3, #10]
 8005d42:	897a      	ldrh	r2, [r7, #10]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	891a      	ldrh	r2, [r3, #8]
 8005d4c:	893b      	ldrh	r3, [r7, #8]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d106      	bne.n	8005d70 <pbuf_realloc+0x70>
 8005d62:	4b26      	ldr	r3, [pc, #152]	; (8005dfc <pbuf_realloc+0xfc>)
 8005d64:	f240 12af 	movw	r2, #431	; 0x1af
 8005d68:	4927      	ldr	r1, [pc, #156]	; (8005e08 <pbuf_realloc+0x108>)
 8005d6a:	4826      	ldr	r0, [pc, #152]	; (8005e04 <pbuf_realloc+0x104>)
 8005d6c:	f009 fa1c 	bl	800f1a8 <iprintf>
  while (rem_len > q->len) {
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	895b      	ldrh	r3, [r3, #10]
 8005d74:	897a      	ldrh	r2, [r7, #10]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d8e1      	bhi.n	8005d3e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	7b1b      	ldrb	r3, [r3, #12]
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d121      	bne.n	8005dca <pbuf_realloc+0xca>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	895b      	ldrh	r3, [r3, #10]
 8005d8a:	897a      	ldrh	r2, [r7, #10]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d01c      	beq.n	8005dca <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	7b5b      	ldrb	r3, [r3, #13]
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d116      	bne.n	8005dca <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	897b      	ldrh	r3, [r7, #10]
 8005da8:	4413      	add	r3, r2
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	4619      	mov	r1, r3
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f7fe ffb6 	bl	8004d20 <mem_trim>
 8005db4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d106      	bne.n	8005dca <pbuf_realloc+0xca>
 8005dbc:	4b0f      	ldr	r3, [pc, #60]	; (8005dfc <pbuf_realloc+0xfc>)
 8005dbe:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005dc2:	4912      	ldr	r1, [pc, #72]	; (8005e0c <pbuf_realloc+0x10c>)
 8005dc4:	480f      	ldr	r0, [pc, #60]	; (8005e04 <pbuf_realloc+0x104>)
 8005dc6:	f009 f9ef 	bl	800f1a8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	897a      	ldrh	r2, [r7, #10]
 8005dce:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	895a      	ldrh	r2, [r3, #10]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d004      	beq.n	8005dea <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 f923 	bl	8006030 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	e000      	b.n	8005df4 <pbuf_realloc+0xf4>
    return;
 8005df2:	bf00      	nop

}
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	08010c58 	.word	0x08010c58
 8005e00:	08010d70 	.word	0x08010d70
 8005e04:	08010cb8 	.word	0x08010cb8
 8005e08:	08010d88 	.word	0x08010d88
 8005e0c:	08010da0 	.word	0x08010da0

08005e10 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d106      	bne.n	8005e32 <pbuf_add_header_impl+0x22>
 8005e24:	4b2b      	ldr	r3, [pc, #172]	; (8005ed4 <pbuf_add_header_impl+0xc4>)
 8005e26:	f240 12df 	movw	r2, #479	; 0x1df
 8005e2a:	492b      	ldr	r1, [pc, #172]	; (8005ed8 <pbuf_add_header_impl+0xc8>)
 8005e2c:	482b      	ldr	r0, [pc, #172]	; (8005edc <pbuf_add_header_impl+0xcc>)
 8005e2e:	f009 f9bb 	bl	800f1a8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <pbuf_add_header_impl+0x30>
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e3e:	d301      	bcc.n	8005e44 <pbuf_add_header_impl+0x34>
    return 1;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e043      	b.n	8005ecc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <pbuf_add_header_impl+0x3e>
    return 0;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	e03e      	b.n	8005ecc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	891a      	ldrh	r2, [r3, #8]
 8005e56:	8a7b      	ldrh	r3, [r7, #18]
 8005e58:	4413      	add	r3, r2
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	8a7a      	ldrh	r2, [r7, #18]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d901      	bls.n	8005e66 <pbuf_add_header_impl+0x56>
    return 1;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e032      	b.n	8005ecc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	7b1b      	ldrb	r3, [r3, #12]
 8005e6a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005e6c:	8a3b      	ldrh	r3, [r7, #16]
 8005e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00c      	beq.n	8005e90 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	425b      	negs	r3, r3
 8005e7e:	4413      	add	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3310      	adds	r3, #16
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d20d      	bcs.n	8005ea8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e01d      	b.n	8005ecc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005e90:	79fb      	ldrb	r3, [r7, #7]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d006      	beq.n	8005ea4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	425b      	negs	r3, r3
 8005e9e:	4413      	add	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]
 8005ea2:	e001      	b.n	8005ea8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e011      	b.n	8005ecc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	895a      	ldrh	r2, [r3, #10]
 8005eb2:	8a7b      	ldrh	r3, [r7, #18]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	891a      	ldrh	r2, [r3, #8]
 8005ec0:	8a7b      	ldrh	r3, [r7, #18]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	811a      	strh	r2, [r3, #8]


  return 0;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3718      	adds	r7, #24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	08010c58 	.word	0x08010c58
 8005ed8:	08010dbc 	.word	0x08010dbc
 8005edc:	08010cb8 	.word	0x08010cb8

08005ee0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005eea:	2200      	movs	r2, #0
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7ff ff8e 	bl	8005e10 <pbuf_add_header_impl>
 8005ef4:	4603      	mov	r3, r0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
	...

08005f00 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d106      	bne.n	8005f1e <pbuf_remove_header+0x1e>
 8005f10:	4b20      	ldr	r3, [pc, #128]	; (8005f94 <pbuf_remove_header+0x94>)
 8005f12:	f240 224b 	movw	r2, #587	; 0x24b
 8005f16:	4920      	ldr	r1, [pc, #128]	; (8005f98 <pbuf_remove_header+0x98>)
 8005f18:	4820      	ldr	r0, [pc, #128]	; (8005f9c <pbuf_remove_header+0x9c>)
 8005f1a:	f009 f945 	bl	800f1a8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d003      	beq.n	8005f2c <pbuf_remove_header+0x2c>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f2a:	d301      	bcc.n	8005f30 <pbuf_remove_header+0x30>
    return 1;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e02c      	b.n	8005f8a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <pbuf_remove_header+0x3a>
    return 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	e027      	b.n	8005f8a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	895b      	ldrh	r3, [r3, #10]
 8005f42:	89fa      	ldrh	r2, [r7, #14]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d908      	bls.n	8005f5a <pbuf_remove_header+0x5a>
 8005f48:	4b12      	ldr	r3, [pc, #72]	; (8005f94 <pbuf_remove_header+0x94>)
 8005f4a:	f240 2255 	movw	r2, #597	; 0x255
 8005f4e:	4914      	ldr	r1, [pc, #80]	; (8005fa0 <pbuf_remove_header+0xa0>)
 8005f50:	4812      	ldr	r0, [pc, #72]	; (8005f9c <pbuf_remove_header+0x9c>)
 8005f52:	f009 f929 	bl	800f1a8 <iprintf>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e017      	b.n	8005f8a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	441a      	add	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	895a      	ldrh	r2, [r3, #10]
 8005f70:	89fb      	ldrh	r3, [r7, #14]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	891a      	ldrh	r2, [r3, #8]
 8005f7e:	89fb      	ldrh	r3, [r7, #14]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	08010c58 	.word	0x08010c58
 8005f98:	08010dbc 	.word	0x08010dbc
 8005f9c:	08010cb8 	.word	0x08010cb8
 8005fa0:	08010dc8 	.word	0x08010dc8

08005fa4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	807b      	strh	r3, [r7, #2]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005fb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	da08      	bge.n	8005fce <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005fbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fc0:	425b      	negs	r3, r3
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7ff ff9b 	bl	8005f00 <pbuf_remove_header>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	e007      	b.n	8005fde <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005fce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fd2:	787a      	ldrb	r2, [r7, #1]
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff ff1a 	bl	8005e10 <pbuf_add_header_impl>
 8005fdc:	4603      	mov	r3, r0
  }
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b082      	sub	sp, #8
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 0);
 8005ff2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff ffd2 	bl	8005fa4 <pbuf_header_impl>
 8006000:	4603      	mov	r3, r0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b082      	sub	sp, #8
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	460b      	mov	r3, r1
 8006014:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006016:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800601a:	2201      	movs	r2, #1
 800601c:	4619      	mov	r1, r3
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7ff ffc0 	bl	8005fa4 <pbuf_header_impl>
 8006024:	4603      	mov	r3, r0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
	...

08006030 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10b      	bne.n	8006056 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d106      	bne.n	8006052 <pbuf_free+0x22>
 8006044:	4b38      	ldr	r3, [pc, #224]	; (8006128 <pbuf_free+0xf8>)
 8006046:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800604a:	4938      	ldr	r1, [pc, #224]	; (800612c <pbuf_free+0xfc>)
 800604c:	4838      	ldr	r0, [pc, #224]	; (8006130 <pbuf_free+0x100>)
 800604e:	f009 f8ab 	bl	800f1a8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006052:	2300      	movs	r3, #0
 8006054:	e063      	b.n	800611e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006056:	2300      	movs	r3, #0
 8006058:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800605a:	e05c      	b.n	8006116 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	7b9b      	ldrb	r3, [r3, #14]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d106      	bne.n	8006072 <pbuf_free+0x42>
 8006064:	4b30      	ldr	r3, [pc, #192]	; (8006128 <pbuf_free+0xf8>)
 8006066:	f240 22f1 	movw	r2, #753	; 0x2f1
 800606a:	4932      	ldr	r1, [pc, #200]	; (8006134 <pbuf_free+0x104>)
 800606c:	4830      	ldr	r0, [pc, #192]	; (8006130 <pbuf_free+0x100>)
 800606e:	f009 f89b 	bl	800f1a8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	7b9b      	ldrb	r3, [r3, #14]
 8006076:	3b01      	subs	r3, #1
 8006078:	b2da      	uxtb	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	739a      	strb	r2, [r3, #14]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	7b9b      	ldrb	r3, [r3, #14]
 8006082:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006084:	7dbb      	ldrb	r3, [r7, #22]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d143      	bne.n	8006112 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	7b1b      	ldrb	r3, [r3, #12]
 8006094:	f003 030f 	and.w	r3, r3, #15
 8006098:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	7b5b      	ldrb	r3, [r3, #13]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d011      	beq.n	80060ca <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d106      	bne.n	80060c0 <pbuf_free+0x90>
 80060b2:	4b1d      	ldr	r3, [pc, #116]	; (8006128 <pbuf_free+0xf8>)
 80060b4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80060b8:	491f      	ldr	r1, [pc, #124]	; (8006138 <pbuf_free+0x108>)
 80060ba:	481d      	ldr	r0, [pc, #116]	; (8006130 <pbuf_free+0x100>)
 80060bc:	f009 f874 	bl	800f1a8 <iprintf>
        pc->custom_free_function(p);
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	4798      	blx	r3
 80060c8:	e01d      	b.n	8006106 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80060ca:	7bfb      	ldrb	r3, [r7, #15]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d104      	bne.n	80060da <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	2009      	movs	r0, #9
 80060d4:	f7ff f920 	bl	8005318 <memp_free>
 80060d8:	e015      	b.n	8006106 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80060da:	7bfb      	ldrb	r3, [r7, #15]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d104      	bne.n	80060ea <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80060e0:	6879      	ldr	r1, [r7, #4]
 80060e2:	2008      	movs	r0, #8
 80060e4:	f7ff f918 	bl	8005318 <memp_free>
 80060e8:	e00d      	b.n	8006106 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d103      	bne.n	80060f8 <pbuf_free+0xc8>
          mem_free(p);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7fe fdab 	bl	8004c4c <mem_free>
 80060f6:	e006      	b.n	8006106 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80060f8:	4b0b      	ldr	r3, [pc, #44]	; (8006128 <pbuf_free+0xf8>)
 80060fa:	f240 320f 	movw	r2, #783	; 0x30f
 80060fe:	490f      	ldr	r1, [pc, #60]	; (800613c <pbuf_free+0x10c>)
 8006100:	480b      	ldr	r0, [pc, #44]	; (8006130 <pbuf_free+0x100>)
 8006102:	f009 f851 	bl	800f1a8 <iprintf>
        }
      }
      count++;
 8006106:	7dfb      	ldrb	r3, [r7, #23]
 8006108:	3301      	adds	r3, #1
 800610a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	607b      	str	r3, [r7, #4]
 8006110:	e001      	b.n	8006116 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006112:	2300      	movs	r3, #0
 8006114:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d19f      	bne.n	800605c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800611c:	7dfb      	ldrb	r3, [r7, #23]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	08010c58 	.word	0x08010c58
 800612c:	08010dbc 	.word	0x08010dbc
 8006130:	08010cb8 	.word	0x08010cb8
 8006134:	08010de8 	.word	0x08010de8
 8006138:	08010e00 	.word	0x08010e00
 800613c:	08010e24 	.word	0x08010e24

08006140 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006148:	2300      	movs	r3, #0
 800614a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800614c:	e005      	b.n	800615a <pbuf_clen+0x1a>
    ++len;
 800614e:	89fb      	ldrh	r3, [r7, #14]
 8006150:	3301      	adds	r3, #1
 8006152:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1f6      	bne.n	800614e <pbuf_clen+0xe>
  }
  return len;
 8006160:	89fb      	ldrh	r3, [r7, #14]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
	...

08006170 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d010      	beq.n	80061a0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	7b9b      	ldrb	r3, [r3, #14]
 8006182:	3301      	adds	r3, #1
 8006184:	b2da      	uxtb	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	7b9b      	ldrb	r3, [r3, #14]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d106      	bne.n	80061a0 <pbuf_ref+0x30>
 8006192:	4b05      	ldr	r3, [pc, #20]	; (80061a8 <pbuf_ref+0x38>)
 8006194:	f240 3242 	movw	r2, #834	; 0x342
 8006198:	4904      	ldr	r1, [pc, #16]	; (80061ac <pbuf_ref+0x3c>)
 800619a:	4805      	ldr	r0, [pc, #20]	; (80061b0 <pbuf_ref+0x40>)
 800619c:	f009 f804 	bl	800f1a8 <iprintf>
  }
}
 80061a0:	bf00      	nop
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	08010c58 	.word	0x08010c58
 80061ac:	08010e38 	.word	0x08010e38
 80061b0:	08010cb8 	.word	0x08010cb8

080061b4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <pbuf_cat+0x16>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d107      	bne.n	80061da <pbuf_cat+0x26>
 80061ca:	4b20      	ldr	r3, [pc, #128]	; (800624c <pbuf_cat+0x98>)
 80061cc:	f240 3259 	movw	r2, #857	; 0x359
 80061d0:	491f      	ldr	r1, [pc, #124]	; (8006250 <pbuf_cat+0x9c>)
 80061d2:	4820      	ldr	r0, [pc, #128]	; (8006254 <pbuf_cat+0xa0>)
 80061d4:	f008 ffe8 	bl	800f1a8 <iprintf>
 80061d8:	e034      	b.n	8006244 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	e00a      	b.n	80061f6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	891a      	ldrh	r2, [r3, #8]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	891b      	ldrh	r3, [r3, #8]
 80061e8:	4413      	add	r3, r2
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1f0      	bne.n	80061e0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	891a      	ldrh	r2, [r3, #8]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	895b      	ldrh	r3, [r3, #10]
 8006206:	429a      	cmp	r2, r3
 8006208:	d006      	beq.n	8006218 <pbuf_cat+0x64>
 800620a:	4b10      	ldr	r3, [pc, #64]	; (800624c <pbuf_cat+0x98>)
 800620c:	f240 3262 	movw	r2, #866	; 0x362
 8006210:	4911      	ldr	r1, [pc, #68]	; (8006258 <pbuf_cat+0xa4>)
 8006212:	4810      	ldr	r0, [pc, #64]	; (8006254 <pbuf_cat+0xa0>)
 8006214:	f008 ffc8 	bl	800f1a8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d006      	beq.n	800622e <pbuf_cat+0x7a>
 8006220:	4b0a      	ldr	r3, [pc, #40]	; (800624c <pbuf_cat+0x98>)
 8006222:	f240 3263 	movw	r2, #867	; 0x363
 8006226:	490d      	ldr	r1, [pc, #52]	; (800625c <pbuf_cat+0xa8>)
 8006228:	480a      	ldr	r0, [pc, #40]	; (8006254 <pbuf_cat+0xa0>)
 800622a:	f008 ffbd 	bl	800f1a8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	891a      	ldrh	r2, [r3, #8]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	891b      	ldrh	r3, [r3, #8]
 8006236:	4413      	add	r3, r2
 8006238:	b29a      	uxth	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	08010c58 	.word	0x08010c58
 8006250:	08010e4c 	.word	0x08010e4c
 8006254:	08010cb8 	.word	0x08010cb8
 8006258:	08010e84 	.word	0x08010e84
 800625c:	08010eb4 	.word	0x08010eb4

08006260 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800626a:	6839      	ldr	r1, [r7, #0]
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff ffa1 	bl	80061b4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006272:	6838      	ldr	r0, [r7, #0]
 8006274:	f7ff ff7c 	bl	8006170 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006278:	bf00      	nop
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800628a:	2300      	movs	r3, #0
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	2300      	movs	r3, #0
 8006290:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d008      	beq.n	80062aa <pbuf_copy+0x2a>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d005      	beq.n	80062aa <pbuf_copy+0x2a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	891a      	ldrh	r2, [r3, #8]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	891b      	ldrh	r3, [r3, #8]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d209      	bcs.n	80062be <pbuf_copy+0x3e>
 80062aa:	4b57      	ldr	r3, [pc, #348]	; (8006408 <pbuf_copy+0x188>)
 80062ac:	f240 32c9 	movw	r2, #969	; 0x3c9
 80062b0:	4956      	ldr	r1, [pc, #344]	; (800640c <pbuf_copy+0x18c>)
 80062b2:	4857      	ldr	r0, [pc, #348]	; (8006410 <pbuf_copy+0x190>)
 80062b4:	f008 ff78 	bl	800f1a8 <iprintf>
 80062b8:	f06f 030f 	mvn.w	r3, #15
 80062bc:	e09f      	b.n	80063fe <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	895b      	ldrh	r3, [r3, #10]
 80062c2:	461a      	mov	r2, r3
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	1ad2      	subs	r2, r2, r3
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	895b      	ldrh	r3, [r3, #10]
 80062cc:	4619      	mov	r1, r3
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1acb      	subs	r3, r1, r3
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d306      	bcc.n	80062e4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	895b      	ldrh	r3, [r3, #10]
 80062da:	461a      	mov	r2, r3
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	60fb      	str	r3, [r7, #12]
 80062e2:	e005      	b.n	80062f0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	895b      	ldrh	r3, [r3, #10]
 80062e8:	461a      	mov	r2, r3
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	18d0      	adds	r0, r2, r3
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	4413      	add	r3, r2
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4619      	mov	r1, r3
 8006304:	f008 ff20 	bl	800f148 <memcpy>
    offset_to += len;
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4413      	add	r3, r2
 800630e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4413      	add	r3, r2
 8006316:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	895b      	ldrh	r3, [r3, #10]
 800631c:	461a      	mov	r2, r3
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	4293      	cmp	r3, r2
 8006322:	d906      	bls.n	8006332 <pbuf_copy+0xb2>
 8006324:	4b38      	ldr	r3, [pc, #224]	; (8006408 <pbuf_copy+0x188>)
 8006326:	f240 32d9 	movw	r2, #985	; 0x3d9
 800632a:	493a      	ldr	r1, [pc, #232]	; (8006414 <pbuf_copy+0x194>)
 800632c:	4838      	ldr	r0, [pc, #224]	; (8006410 <pbuf_copy+0x190>)
 800632e:	f008 ff3b 	bl	800f1a8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	895b      	ldrh	r3, [r3, #10]
 8006336:	461a      	mov	r2, r3
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	4293      	cmp	r3, r2
 800633c:	d906      	bls.n	800634c <pbuf_copy+0xcc>
 800633e:	4b32      	ldr	r3, [pc, #200]	; (8006408 <pbuf_copy+0x188>)
 8006340:	f240 32da 	movw	r2, #986	; 0x3da
 8006344:	4934      	ldr	r1, [pc, #208]	; (8006418 <pbuf_copy+0x198>)
 8006346:	4832      	ldr	r0, [pc, #200]	; (8006410 <pbuf_copy+0x190>)
 8006348:	f008 ff2e 	bl	800f1a8 <iprintf>
    if (offset_from >= p_from->len) {
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	895b      	ldrh	r3, [r3, #10]
 8006350:	461a      	mov	r2, r3
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	4293      	cmp	r3, r2
 8006356:	d304      	bcc.n	8006362 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006358:	2300      	movs	r3, #0
 800635a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	895b      	ldrh	r3, [r3, #10]
 8006366:	461a      	mov	r2, r3
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	4293      	cmp	r3, r2
 800636c:	d114      	bne.n	8006398 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10c      	bne.n	8006398 <pbuf_copy+0x118>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d009      	beq.n	8006398 <pbuf_copy+0x118>
 8006384:	4b20      	ldr	r3, [pc, #128]	; (8006408 <pbuf_copy+0x188>)
 8006386:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800638a:	4924      	ldr	r1, [pc, #144]	; (800641c <pbuf_copy+0x19c>)
 800638c:	4820      	ldr	r0, [pc, #128]	; (8006410 <pbuf_copy+0x190>)
 800638e:	f008 ff0b 	bl	800f1a8 <iprintf>
 8006392:	f06f 030f 	mvn.w	r3, #15
 8006396:	e032      	b.n	80063fe <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d013      	beq.n	80063c6 <pbuf_copy+0x146>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	895a      	ldrh	r2, [r3, #10]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	891b      	ldrh	r3, [r3, #8]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d10d      	bne.n	80063c6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d009      	beq.n	80063c6 <pbuf_copy+0x146>
 80063b2:	4b15      	ldr	r3, [pc, #84]	; (8006408 <pbuf_copy+0x188>)
 80063b4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80063b8:	4919      	ldr	r1, [pc, #100]	; (8006420 <pbuf_copy+0x1a0>)
 80063ba:	4815      	ldr	r0, [pc, #84]	; (8006410 <pbuf_copy+0x190>)
 80063bc:	f008 fef4 	bl	800f1a8 <iprintf>
 80063c0:	f06f 0305 	mvn.w	r3, #5
 80063c4:	e01b      	b.n	80063fe <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d013      	beq.n	80063f4 <pbuf_copy+0x174>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	895a      	ldrh	r2, [r3, #10]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	891b      	ldrh	r3, [r3, #8]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d10d      	bne.n	80063f4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d009      	beq.n	80063f4 <pbuf_copy+0x174>
 80063e0:	4b09      	ldr	r3, [pc, #36]	; (8006408 <pbuf_copy+0x188>)
 80063e2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80063e6:	490e      	ldr	r1, [pc, #56]	; (8006420 <pbuf_copy+0x1a0>)
 80063e8:	4809      	ldr	r0, [pc, #36]	; (8006410 <pbuf_copy+0x190>)
 80063ea:	f008 fedd 	bl	800f1a8 <iprintf>
 80063ee:	f06f 0305 	mvn.w	r3, #5
 80063f2:	e004      	b.n	80063fe <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f47f af61 	bne.w	80062be <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3718      	adds	r7, #24
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	08010c58 	.word	0x08010c58
 800640c:	08010f00 	.word	0x08010f00
 8006410:	08010cb8 	.word	0x08010cb8
 8006414:	08010f30 	.word	0x08010f30
 8006418:	08010f48 	.word	0x08010f48
 800641c:	08010f64 	.word	0x08010f64
 8006420:	08010f74 	.word	0x08010f74

08006424 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	4611      	mov	r1, r2
 8006430:	461a      	mov	r2, r3
 8006432:	460b      	mov	r3, r1
 8006434:	80fb      	strh	r3, [r7, #6]
 8006436:	4613      	mov	r3, r2
 8006438:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800643a:	2300      	movs	r3, #0
 800643c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800643e:	2300      	movs	r3, #0
 8006440:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d108      	bne.n	800645a <pbuf_copy_partial+0x36>
 8006448:	4b2b      	ldr	r3, [pc, #172]	; (80064f8 <pbuf_copy_partial+0xd4>)
 800644a:	f240 420a 	movw	r2, #1034	; 0x40a
 800644e:	492b      	ldr	r1, [pc, #172]	; (80064fc <pbuf_copy_partial+0xd8>)
 8006450:	482b      	ldr	r0, [pc, #172]	; (8006500 <pbuf_copy_partial+0xdc>)
 8006452:	f008 fea9 	bl	800f1a8 <iprintf>
 8006456:	2300      	movs	r3, #0
 8006458:	e04a      	b.n	80064f0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d108      	bne.n	8006472 <pbuf_copy_partial+0x4e>
 8006460:	4b25      	ldr	r3, [pc, #148]	; (80064f8 <pbuf_copy_partial+0xd4>)
 8006462:	f240 420b 	movw	r2, #1035	; 0x40b
 8006466:	4927      	ldr	r1, [pc, #156]	; (8006504 <pbuf_copy_partial+0xe0>)
 8006468:	4825      	ldr	r0, [pc, #148]	; (8006500 <pbuf_copy_partial+0xdc>)
 800646a:	f008 fe9d 	bl	800f1a8 <iprintf>
 800646e:	2300      	movs	r3, #0
 8006470:	e03e      	b.n	80064f0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	61fb      	str	r3, [r7, #28]
 8006476:	e034      	b.n	80064e2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006478:	88bb      	ldrh	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <pbuf_copy_partial+0x70>
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	895b      	ldrh	r3, [r3, #10]
 8006482:	88ba      	ldrh	r2, [r7, #4]
 8006484:	429a      	cmp	r2, r3
 8006486:	d305      	bcc.n	8006494 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	895b      	ldrh	r3, [r3, #10]
 800648c:	88ba      	ldrh	r2, [r7, #4]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	80bb      	strh	r3, [r7, #4]
 8006492:	e023      	b.n	80064dc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	895a      	ldrh	r2, [r3, #10]
 8006498:	88bb      	ldrh	r3, [r7, #4]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800649e:	8b3a      	ldrh	r2, [r7, #24]
 80064a0:	88fb      	ldrh	r3, [r7, #6]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d901      	bls.n	80064aa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80064a6:	88fb      	ldrh	r3, [r7, #6]
 80064a8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80064aa:	8b7b      	ldrh	r3, [r7, #26]
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	18d0      	adds	r0, r2, r3
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	88bb      	ldrh	r3, [r7, #4]
 80064b6:	4413      	add	r3, r2
 80064b8:	8b3a      	ldrh	r2, [r7, #24]
 80064ba:	4619      	mov	r1, r3
 80064bc:	f008 fe44 	bl	800f148 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80064c0:	8afa      	ldrh	r2, [r7, #22]
 80064c2:	8b3b      	ldrh	r3, [r7, #24]
 80064c4:	4413      	add	r3, r2
 80064c6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80064c8:	8b7a      	ldrh	r2, [r7, #26]
 80064ca:	8b3b      	ldrh	r3, [r7, #24]
 80064cc:	4413      	add	r3, r2
 80064ce:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80064d0:	88fa      	ldrh	r2, [r7, #6]
 80064d2:	8b3b      	ldrh	r3, [r7, #24]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80064d8:	2300      	movs	r3, #0
 80064da:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	61fb      	str	r3, [r7, #28]
 80064e2:	88fb      	ldrh	r3, [r7, #6]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <pbuf_copy_partial+0xca>
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1c4      	bne.n	8006478 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80064ee:	8afb      	ldrh	r3, [r7, #22]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3720      	adds	r7, #32
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	08010c58 	.word	0x08010c58
 80064fc:	08010fa0 	.word	0x08010fa0
 8006500:	08010cb8 	.word	0x08010cb8
 8006504:	08010fc0 	.word	0x08010fc0

08006508 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b088      	sub	sp, #32
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	4613      	mov	r3, r2
 8006514:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8006516:	88fb      	ldrh	r3, [r7, #6]
 8006518:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800651a:	2300      	movs	r3, #0
 800651c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d109      	bne.n	8006538 <pbuf_take+0x30>
 8006524:	4b3a      	ldr	r3, [pc, #232]	; (8006610 <pbuf_take+0x108>)
 8006526:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800652a:	493a      	ldr	r1, [pc, #232]	; (8006614 <pbuf_take+0x10c>)
 800652c:	483a      	ldr	r0, [pc, #232]	; (8006618 <pbuf_take+0x110>)
 800652e:	f008 fe3b 	bl	800f1a8 <iprintf>
 8006532:	f06f 030f 	mvn.w	r3, #15
 8006536:	e067      	b.n	8006608 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d109      	bne.n	8006552 <pbuf_take+0x4a>
 800653e:	4b34      	ldr	r3, [pc, #208]	; (8006610 <pbuf_take+0x108>)
 8006540:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8006544:	4935      	ldr	r1, [pc, #212]	; (800661c <pbuf_take+0x114>)
 8006546:	4834      	ldr	r0, [pc, #208]	; (8006618 <pbuf_take+0x110>)
 8006548:	f008 fe2e 	bl	800f1a8 <iprintf>
 800654c:	f06f 030f 	mvn.w	r3, #15
 8006550:	e05a      	b.n	8006608 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	891b      	ldrh	r3, [r3, #8]
 8006556:	88fa      	ldrh	r2, [r7, #6]
 8006558:	429a      	cmp	r2, r3
 800655a:	d909      	bls.n	8006570 <pbuf_take+0x68>
 800655c:	4b2c      	ldr	r3, [pc, #176]	; (8006610 <pbuf_take+0x108>)
 800655e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8006562:	492f      	ldr	r1, [pc, #188]	; (8006620 <pbuf_take+0x118>)
 8006564:	482c      	ldr	r0, [pc, #176]	; (8006618 <pbuf_take+0x110>)
 8006566:	f008 fe1f 	bl	800f1a8 <iprintf>
 800656a:	f04f 33ff 	mov.w	r3, #4294967295
 800656e:	e04b      	b.n	8006608 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d007      	beq.n	8006586 <pbuf_take+0x7e>
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d004      	beq.n	8006586 <pbuf_take+0x7e>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	891b      	ldrh	r3, [r3, #8]
 8006580:	88fa      	ldrh	r2, [r7, #6]
 8006582:	429a      	cmp	r2, r3
 8006584:	d902      	bls.n	800658c <pbuf_take+0x84>
    return ERR_ARG;
 8006586:	f06f 030f 	mvn.w	r3, #15
 800658a:	e03d      	b.n	8006608 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	61fb      	str	r3, [r7, #28]
 8006590:	e028      	b.n	80065e4 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d106      	bne.n	80065a6 <pbuf_take+0x9e>
 8006598:	4b1d      	ldr	r3, [pc, #116]	; (8006610 <pbuf_take+0x108>)
 800659a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800659e:	4921      	ldr	r1, [pc, #132]	; (8006624 <pbuf_take+0x11c>)
 80065a0:	481d      	ldr	r0, [pc, #116]	; (8006618 <pbuf_take+0x110>)
 80065a2:	f008 fe01 	bl	800f1a8 <iprintf>
    buf_copy_len = total_copy_len;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	895b      	ldrh	r3, [r3, #10]
 80065ae:	461a      	mov	r2, r3
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d902      	bls.n	80065bc <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	895b      	ldrh	r3, [r3, #10]
 80065ba:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	6858      	ldr	r0, [r3, #4]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	4413      	add	r3, r2
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	4619      	mov	r1, r3
 80065ca:	f008 fdbd 	bl	800f148 <memcpy>
    total_copy_len -= buf_copy_len;
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	4413      	add	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	61fb      	str	r3, [r7, #28]
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1d3      	bne.n	8006592 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d103      	bne.n	80065f8 <pbuf_take+0xf0>
 80065f0:	88fb      	ldrh	r3, [r7, #6]
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d006      	beq.n	8006606 <pbuf_take+0xfe>
 80065f8:	4b05      	ldr	r3, [pc, #20]	; (8006610 <pbuf_take+0x108>)
 80065fa:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80065fe:	490a      	ldr	r1, [pc, #40]	; (8006628 <pbuf_take+0x120>)
 8006600:	4805      	ldr	r0, [pc, #20]	; (8006618 <pbuf_take+0x110>)
 8006602:	f008 fdd1 	bl	800f1a8 <iprintf>
  return ERR_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3720      	adds	r7, #32
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	08010c58 	.word	0x08010c58
 8006614:	08011030 	.word	0x08011030
 8006618:	08010cb8 	.word	0x08010cb8
 800661c:	08011048 	.word	0x08011048
 8006620:	08011064 	.word	0x08011064
 8006624:	08011084 	.word	0x08011084
 8006628:	0801109c 	.word	0x0801109c

0800662c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	4603      	mov	r3, r0
 8006634:	603a      	str	r2, [r7, #0]
 8006636:	71fb      	strb	r3, [r7, #7]
 8006638:	460b      	mov	r3, r1
 800663a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	8919      	ldrh	r1, [r3, #8]
 8006640:	88ba      	ldrh	r2, [r7, #4]
 8006642:	79fb      	ldrb	r3, [r7, #7]
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff f9fd 	bl	8005a44 <pbuf_alloc>
 800664a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <pbuf_clone+0x2a>
    return NULL;
 8006652:	2300      	movs	r3, #0
 8006654:	e011      	b.n	800667a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006656:	6839      	ldr	r1, [r7, #0]
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f7ff fe11 	bl	8006280 <pbuf_copy>
 800665e:	4603      	mov	r3, r0
 8006660:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006662:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d006      	beq.n	8006678 <pbuf_clone+0x4c>
 800666a:	4b06      	ldr	r3, [pc, #24]	; (8006684 <pbuf_clone+0x58>)
 800666c:	f240 5224 	movw	r2, #1316	; 0x524
 8006670:	4905      	ldr	r1, [pc, #20]	; (8006688 <pbuf_clone+0x5c>)
 8006672:	4806      	ldr	r0, [pc, #24]	; (800668c <pbuf_clone+0x60>)
 8006674:	f008 fd98 	bl	800f1a8 <iprintf>
  return q;
 8006678:	68fb      	ldr	r3, [r7, #12]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	08010c58 	.word	0x08010c58
 8006688:	080110cc 	.word	0x080110cc
 800668c:	08010cb8 	.word	0x08010cb8

08006690 <raw_input_local_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_local_match(struct raw_pcb *pcb, u8_t broadcast)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	7a1b      	ldrb	r3, [r3, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00b      	beq.n	80066bc <raw_input_local_match+0x2c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	7a1a      	ldrb	r2, [r3, #8]
 80066a8:	4b15      	ldr	r3, [pc, #84]	; (8006700 <raw_input_local_match+0x70>)
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80066b0:	3301      	adds	r3, #1
 80066b2:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d001      	beq.n	80066bc <raw_input_local_match+0x2c>
    return 0;
 80066b8:	2300      	movs	r3, #0
 80066ba:	e01b      	b.n	80066f4 <raw_input_local_match+0x64>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80066bc:	78fb      	ldrb	r3, [r7, #3]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d008      	beq.n	80066d4 <raw_input_local_match+0x44>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d003      	beq.n	80066d0 <raw_input_local_match+0x40>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d110      	bne.n	80066f2 <raw_input_local_match+0x62>
          return 1;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e00f      	b.n	80066f4 <raw_input_local_match+0x64>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: catch all or exact match */
      if (ip_addr_isany(&pcb->local_ip) ||
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d009      	beq.n	80066ee <raw_input_local_match+0x5e>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d005      	beq.n	80066ee <raw_input_local_match+0x5e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	4b06      	ldr	r3, [pc, #24]	; (8006700 <raw_input_local_match+0x70>)
 80066e8:	695b      	ldr	r3, [r3, #20]
      if (ip_addr_isany(&pcb->local_ip) ||
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d101      	bne.n	80066f2 <raw_input_local_match+0x62>
        return 1;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e000      	b.n	80066f4 <raw_input_local_match+0x64>
      }
  }

  return 0;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	20004dbc 	.word	0x20004dbc

08006704 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 8006704:	b590      	push	{r4, r7, lr}
 8006706:	b089      	sub	sp, #36	; 0x24
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
 800670e:	2300      	movs	r3, #0
 8006710:	75fb      	strb	r3, [r7, #23]
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8006712:	4b37      	ldr	r3, [pc, #220]	; (80067f0 <raw_input+0xec>)
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	4a36      	ldr	r2, [pc, #216]	; (80067f0 <raw_input+0xec>)
 8006718:	6812      	ldr	r2, [r2, #0]
 800671a:	4611      	mov	r1, r2
 800671c:	4618      	mov	r0, r3
 800671e:	f007 fcf9 	bl	800e114 <ip4_addr_isbroadcast_u32>
 8006722:	4603      	mov	r3, r0
 8006724:	75bb      	strb	r3, [r7, #22]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	7a5b      	ldrb	r3, [r3, #9]
 800672c:	82bb      	strh	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
 800672e:	2300      	movs	r3, #0
 8006730:	61bb      	str	r3, [r7, #24]
  pcb = raw_pcbs;
 8006732:	4b30      	ldr	r3, [pc, #192]	; (80067f4 <raw_input+0xf0>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	61fb      	str	r3, [r7, #28]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 8006738:	e052      	b.n	80067e0 <raw_input+0xdc>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	7c1b      	ldrb	r3, [r3, #16]
 800673e:	461a      	mov	r2, r3
 8006740:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006744:	429a      	cmp	r2, r3
 8006746:	d146      	bne.n	80067d6 <raw_input+0xd2>
 8006748:	7dbb      	ldrb	r3, [r7, #22]
 800674a:	4619      	mov	r1, r3
 800674c:	69f8      	ldr	r0, [r7, #28]
 800674e:	f7ff ff9f 	bl	8006690 <raw_input_local_match>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d03e      	beq.n	80067d6 <raw_input+0xd2>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	7c5b      	ldrb	r3, [r3, #17]
 800675c:	f003 0301 	and.w	r3, r3, #1
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8006760:	2b00      	cmp	r3, #0
 8006762:	d005      	beq.n	8006770 <raw_input+0x6c>
         ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	4b21      	ldr	r3, [pc, #132]	; (80067f0 <raw_input+0xec>)
 800676a:	691b      	ldr	r3, [r3, #16]
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 800676c:	429a      	cmp	r2, r3
 800676e:	d132      	bne.n	80067d6 <raw_input+0xd2>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d02e      	beq.n	80067d6 <raw_input+0xd2>
        u8_t eaten;
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	613b      	str	r3, [r7, #16]
#endif
        ret = RAW_INPUT_DELIVERED;
 800677e:	2302      	movs	r3, #2
 8006780:	75fb      	strb	r3, [r7, #23]
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	695c      	ldr	r4, [r3, #20]
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	6998      	ldr	r0, [r3, #24]
 800678a:	4b1b      	ldr	r3, [pc, #108]	; (80067f8 <raw_input+0xf4>)
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	69f9      	ldr	r1, [r7, #28]
 8006790:	47a0      	blx	r4
 8006792:	4603      	mov	r3, r0
 8006794:	73fb      	strb	r3, [r7, #15]
        if (eaten != 0) {
 8006796:	7bfb      	ldrb	r3, [r7, #15]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d011      	beq.n	80067c0 <raw_input+0xbc>
          /* receive function ate the packet */
          p = NULL;
 800679c:	2300      	movs	r3, #0
 800679e:	607b      	str	r3, [r7, #4]
          if (prev != NULL) {
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <raw_input+0xb8>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
            prev->next = pcb->next;
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	60da      	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
 80067ae:	4b11      	ldr	r3, [pc, #68]	; (80067f4 <raw_input+0xf0>)
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	60da      	str	r2, [r3, #12]
            raw_pcbs = pcb;
 80067b6:	4a0f      	ldr	r2, [pc, #60]	; (80067f4 <raw_input+0xf0>)
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	6013      	str	r3, [r2, #0]
          }
          return RAW_INPUT_EATEN;
 80067bc:	2301      	movs	r3, #1
 80067be:	e013      	b.n	80067e8 <raw_input+0xe4>
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d005      	beq.n	80067d6 <raw_input+0xd2>
 80067ca:	4b0c      	ldr	r3, [pc, #48]	; (80067fc <raw_input+0xf8>)
 80067cc:	22c0      	movs	r2, #192	; 0xc0
 80067ce:	490c      	ldr	r1, [pc, #48]	; (8006800 <raw_input+0xfc>)
 80067d0:	480c      	ldr	r0, [pc, #48]	; (8006804 <raw_input+0x100>)
 80067d2:	f008 fce9 	bl	800f1a8 <iprintf>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	61bb      	str	r3, [r7, #24]
    pcb = pcb->next;
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1a9      	bne.n	800673a <raw_input+0x36>
  }
  return ret;
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3724      	adds	r7, #36	; 0x24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd90      	pop	{r4, r7, pc}
 80067f0:	20004dbc 	.word	0x20004dbc
 80067f4:	200083a4 	.word	0x200083a4
 80067f8:	20004dcc 	.word	0x20004dcc
 80067fc:	080110e0 	.word	0x080110e0
 8006800:	08011110 	.word	0x08011110
 8006804:	0801115c 	.word	0x0801115c

08006808 <raw_bind>:
 *
 * @see raw_disconnect()
 */
err_t
raw_bind(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <raw_bind+0x16>
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d102      	bne.n	8006824 <raw_bind+0x1c>
    return ERR_VAL;
 800681e:	f06f 0305 	mvn.w	r3, #5
 8006822:	e009      	b.n	8006838 <raw_bind+0x30>
  }
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <raw_bind+0x28>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	e000      	b.n	8006832 <raw_bind+0x2a>
 8006830:	2300      	movs	r3, #0
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	6013      	str	r3, [r2, #0]
  if (IP_IS_V6(&pcb->local_ip) &&
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->local_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->local_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */
  return ERR_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <raw_sendto>:
 * @param ipaddr the destination address of the IP packet
 *
 */
err_t
raw_sendto(struct raw_pcb *pcb, struct pbuf *p, const ip_addr_t *ipaddr)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af02      	add	r7, sp, #8
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
  struct netif *netif;
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (ipaddr == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <raw_sendto+0x18>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d102      	bne.n	8006862 <raw_sendto+0x1e>
    return ERR_VAL;
 800685c:	f06f 0305 	mvn.w	r3, #5
 8006860:	e035      	b.n	80068ce <raw_sendto+0x8a>
  }

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_sendto\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	7a1b      	ldrb	r3, [r3, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d006      	beq.n	8006878 <raw_sendto+0x34>
    netif = netif_get_by_index(pcb->netif_idx);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	7a1b      	ldrb	r3, [r3, #8]
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff f86c 	bl	800594c <netif_get_by_index>
 8006874:	6178      	str	r0, [r7, #20]
 8006876:	e003      	b.n	8006880 <raw_sendto+0x3c>
    }

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      netif = ip_route(&pcb->local_ip, ipaddr);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f007 f9a9 	bl	800dbd0 <ip4_route>
 800687e:	6178      	str	r0, [r7, #20]
    }
  }

  if (netif == NULL) {
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d102      	bne.n	800688c <raw_sendto+0x48>
    LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: No route to "));
    ip_addr_debug_print(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ipaddr);
    return ERR_RTE;
 8006886:	f06f 0303 	mvn.w	r3, #3
 800688a:	e020      	b.n	80068ce <raw_sendto+0x8a>
  }

  if (ip_addr_isany(&pcb->local_ip) || ip_addr_ismulticast(&pcb->local_ip)) {
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d009      	beq.n	80068a6 <raw_sendto+0x62>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d005      	beq.n	80068a6 <raw_sendto+0x62>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068a2:	2be0      	cmp	r3, #224	; 0xe0
 80068a4:	d108      	bne.n	80068b8 <raw_sendto+0x74>
    /* use outgoing network interface IP address as source address */
    src_ip = ip_netif_get_local_ip(netif, ipaddr);
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <raw_sendto+0x6e>
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	3304      	adds	r3, #4
 80068b0:	e000      	b.n	80068b4 <raw_sendto+0x70>
 80068b2:	2300      	movs	r3, #0
 80068b4:	613b      	str	r3, [r7, #16]
 80068b6:	e001      	b.n	80068bc <raw_sendto+0x78>
      return ERR_RTE;
    }
#endif /* LWIP_IPV6 */
  } else {
    /* use RAW PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	613b      	str	r3, [r7, #16]
  }

  return raw_sendto_if_src(pcb, p, ipaddr, netif, src_ip);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	68b9      	ldr	r1, [r7, #8]
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f000 f806 	bl	80068d8 <raw_sendto_if_src>
 80068cc:	4603      	mov	r3, r0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
	...

080068d8 <raw_sendto_if_src>:
 * @param src_ip source IP address
 */
err_t
raw_sendto_if_src(struct raw_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  struct netif *netif, const ip_addr_t *src_ip)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08a      	sub	sp, #40	; 0x28
 80068dc:	af04      	add	r7, sp, #16
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	603b      	str	r3, [r7, #0]
  u16_t header_size;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  if ((pcb == NULL) || (dst_ip == NULL) || (netif == NULL) || (src_ip == NULL) ||
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d008      	beq.n	80068fe <raw_sendto_if_src+0x26>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d005      	beq.n	80068fe <raw_sendto_if_src+0x26>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <raw_sendto_if_src+0x26>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d102      	bne.n	8006904 <raw_sendto_if_src+0x2c>
    return ERR_VAL;
 80068fe:	f06f 0305 	mvn.w	r3, #5
 8006902:	e07b      	b.n	80069fc <raw_sendto_if_src+0x124>
  }

  header_size = (
 8006904:	2314      	movs	r3, #20
 8006906:	827b      	strh	r3, [r7, #18]
                  IP6_HLEN);
#endif

  /* Handle the HDRINCL option as an exception: none of the code below applies
   * to this case, and sending the packet needs to be done differently too. */
  if (pcb->flags & RAW_FLAGS_HDRINCL) {
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	7c5b      	ldrb	r3, [r3, #17]
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d018      	beq.n	8006946 <raw_sendto_if_src+0x6e>
    /* A full header *must* be present in the first pbuf of the chain, as the
     * output routines may access its fields directly. */
    if (p->len < header_size) {
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	895b      	ldrh	r3, [r3, #10]
 8006918:	8a7a      	ldrh	r2, [r7, #18]
 800691a:	429a      	cmp	r2, r3
 800691c:	d902      	bls.n	8006924 <raw_sendto_if_src+0x4c>
      return ERR_VAL;
 800691e:	f06f 0305 	mvn.w	r3, #5
 8006922:	e06b      	b.n	80069fc <raw_sendto_if_src+0x124>
    }
    /* @todo multicast loop support, if at all desired for this scenario.. */
    NETIF_SET_HINTS(netif, &pcb->netif_hints);
    err = ip_output_if_hdrincl(p, src_ip, dst_ip, netif);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	9302      	str	r3, [sp, #8]
 8006928:	2300      	movs	r3, #0
 800692a:	9301      	str	r3, [sp, #4]
 800692c:	2300      	movs	r3, #0
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	2300      	movs	r3, #0
 8006932:	2200      	movs	r2, #0
 8006934:	6a39      	ldr	r1, [r7, #32]
 8006936:	68b8      	ldr	r0, [r7, #8]
 8006938:	f007 fb14 	bl	800df64 <ip4_output_if>
 800693c:	4603      	mov	r3, r0
 800693e:	743b      	strb	r3, [r7, #16]
    NETIF_RESET_HINTS(netif);
    return err;
 8006940:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8006944:	e05a      	b.n	80069fc <raw_sendto_if_src+0x124>
  }

  /* packet too large to add an IP header without causing an overflow? */
  if ((u16_t)(p->tot_len + header_size) < p->tot_len) {
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	891a      	ldrh	r2, [r3, #8]
 800694a:	8a7b      	ldrh	r3, [r7, #18]
 800694c:	4413      	add	r3, r2
 800694e:	b29a      	uxth	r2, r3
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	891b      	ldrh	r3, [r3, #8]
 8006954:	429a      	cmp	r2, r3
 8006956:	d202      	bcs.n	800695e <raw_sendto_if_src+0x86>
    return ERR_MEM;
 8006958:	f04f 33ff 	mov.w	r3, #4294967295
 800695c:	e04e      	b.n	80069fc <raw_sendto_if_src+0x124>
  }
  /* not enough space to add an IP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, header_size)) {
 800695e:	8a7b      	ldrh	r3, [r7, #18]
 8006960:	4619      	mov	r1, r3
 8006962:	68b8      	ldr	r0, [r7, #8]
 8006964:	f7ff fabc 	bl	8005ee0 <pbuf_add_header>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d015      	beq.n	800699a <raw_sendto_if_src+0xc2>
    /* allocate header in new pbuf */
    q = pbuf_alloc(PBUF_IP, 0, PBUF_RAM);
 800696e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006972:	2100      	movs	r1, #0
 8006974:	2022      	movs	r0, #34	; 0x22
 8006976:	f7ff f865 	bl	8005a44 <pbuf_alloc>
 800697a:	6178      	str	r0, [r7, #20]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d102      	bne.n	8006988 <raw_sendto_if_src+0xb0>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("raw_sendto: could not allocate header\n"));
      return ERR_MEM;
 8006982:	f04f 33ff 	mov.w	r3, #4294967295
 8006986:	e039      	b.n	80069fc <raw_sendto_if_src+0x124>
    }
    if (p->tot_len != 0) {
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	891b      	ldrh	r3, [r3, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d018      	beq.n	80069c2 <raw_sendto_if_src+0xea>
      /* chain header q in front of given pbuf p */
      pbuf_chain(q, p);
 8006990:	68b9      	ldr	r1, [r7, #8]
 8006992:	6978      	ldr	r0, [r7, #20]
 8006994:	f7ff fc64 	bl	8006260 <pbuf_chain>
 8006998:	e013      	b.n	80069c2 <raw_sendto_if_src+0xea>
    }
    /* { first pbuf q points to header pbuf } */
    LWIP_DEBUGF(RAW_DEBUG, ("raw_sendto: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* first pbuf q equals given pbuf */
    q = p;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	617b      	str	r3, [r7, #20]
    if (pbuf_remove_header(q, header_size)) {
 800699e:	8a7b      	ldrh	r3, [r7, #18]
 80069a0:	4619      	mov	r1, r3
 80069a2:	6978      	ldr	r0, [r7, #20]
 80069a4:	f7ff faac 	bl	8005f00 <pbuf_remove_header>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d009      	beq.n	80069c2 <raw_sendto_if_src+0xea>
      LWIP_ASSERT("Can't restore header we just removed!", 0);
 80069ae:	4b15      	ldr	r3, [pc, #84]	; (8006a04 <raw_sendto_if_src+0x12c>)
 80069b0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80069b4:	4914      	ldr	r1, [pc, #80]	; (8006a08 <raw_sendto_if_src+0x130>)
 80069b6:	4815      	ldr	r0, [pc, #84]	; (8006a0c <raw_sendto_if_src+0x134>)
 80069b8:	f008 fbf6 	bl	800f1a8 <iprintf>
      return ERR_MEM;
 80069bc:	f04f 33ff 	mov.w	r3, #4294967295
 80069c0:	e01c      	b.n	80069fc <raw_sendto_if_src+0x124>

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? raw_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	7adb      	ldrb	r3, [r3, #11]
 80069c6:	747b      	strb	r3, [r7, #17]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  NETIF_SET_HINTS(netif, &pcb->netif_hints);
  err = ip_output_if(q, src_ip, dst_ip, ttl, pcb->tos, pcb->protocol, netif);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	7a9b      	ldrb	r3, [r3, #10]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	7c12      	ldrb	r2, [r2, #16]
 80069d0:	7c78      	ldrb	r0, [r7, #17]
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	9102      	str	r1, [sp, #8]
 80069d6:	9201      	str	r2, [sp, #4]
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	4603      	mov	r3, r0
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	6a39      	ldr	r1, [r7, #32]
 80069e0:	6978      	ldr	r0, [r7, #20]
 80069e2:	f007 fabf 	bl	800df64 <ip4_output_if>
 80069e6:	4603      	mov	r3, r0
 80069e8:	743b      	strb	r3, [r7, #16]
  NETIF_RESET_HINTS(netif);

  /* did we chain a header earlier? */
  if (q != p) {
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d002      	beq.n	80069f8 <raw_sendto_if_src+0x120>
    /* free the header */
    pbuf_free(q);
 80069f2:	6978      	ldr	r0, [r7, #20]
 80069f4:	f7ff fb1c 	bl	8006030 <pbuf_free>
  }
  return err;
 80069f8:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3718      	adds	r7, #24
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	080110e0 	.word	0x080110e0
 8006a08:	08011184 	.word	0x08011184
 8006a0c:	0801115c 	.word	0x0801115c

08006a10 <raw_new>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new(u8_t proto)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	4603      	mov	r3, r0
 8006a18:	71fb      	strb	r3, [r7, #7]
  struct raw_pcb *pcb;

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_new\n"));
  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct raw_pcb *)memp_malloc(MEMP_RAW_PCB);
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	f7fe fc0c 	bl	8005238 <memp_malloc>
 8006a20:	60f8      	str	r0, [r7, #12]
  /* could allocate RAW PCB? */
  if (pcb != NULL) {
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d011      	beq.n	8006a4c <raw_new+0x3c>
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct raw_pcb));
 8006a28:	221c      	movs	r2, #28
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f008 fbb3 	bl	800f198 <memset>
    pcb->protocol = proto;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	79fa      	ldrb	r2, [r7, #7]
 8006a36:	741a      	strb	r2, [r3, #16]
    pcb->ttl = RAW_TTL;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	22ff      	movs	r2, #255	; 0xff
 8006a3c:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    raw_set_multicast_ttl(pcb, RAW_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    pcb->next = raw_pcbs;
 8006a3e:	4b06      	ldr	r3, [pc, #24]	; (8006a58 <raw_new+0x48>)
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	60da      	str	r2, [r3, #12]
    raw_pcbs = pcb;
 8006a46:	4a04      	ldr	r2, [pc, #16]	; (8006a58 <raw_new+0x48>)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6013      	str	r3, [r2, #0]
  }
  return pcb;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	200083a4 	.word	0x200083a4

08006a5c <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d01e      	beq.n	8006aaa <raw_netif_ip_addr_changed+0x4e>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01a      	beq.n	8006aaa <raw_netif_ip_addr_changed+0x4e>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d017      	beq.n	8006aaa <raw_netif_ip_addr_changed+0x4e>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d013      	beq.n	8006aaa <raw_netif_ip_addr_changed+0x4e>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8006a82:	4b0d      	ldr	r3, [pc, #52]	; (8006ab8 <raw_netif_ip_addr_changed+0x5c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	e00c      	b.n	8006aa4 <raw_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d103      	bne.n	8006a9e <raw_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	60fb      	str	r3, [r7, #12]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1ef      	bne.n	8006a8a <raw_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8006aaa:	bf00      	nop
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	200083a4 	.word	0x200083a4

08006abc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006ac0:	f008 fb8a 	bl	800f1d8 <rand>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	4b01      	ldr	r3, [pc, #4]	; (8006adc <tcp_init+0x20>)
 8006ad6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006ad8:	bf00      	nop
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20000020 	.word	0x20000020

08006ae0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	7d1b      	ldrb	r3, [r3, #20]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d105      	bne.n	8006afc <tcp_free+0x1c>
 8006af0:	4b06      	ldr	r3, [pc, #24]	; (8006b0c <tcp_free+0x2c>)
 8006af2:	22d4      	movs	r2, #212	; 0xd4
 8006af4:	4906      	ldr	r1, [pc, #24]	; (8006b10 <tcp_free+0x30>)
 8006af6:	4807      	ldr	r0, [pc, #28]	; (8006b14 <tcp_free+0x34>)
 8006af8:	f008 fb56 	bl	800f1a8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006afc:	6879      	ldr	r1, [r7, #4]
 8006afe:	2002      	movs	r0, #2
 8006b00:	f7fe fc0a 	bl	8005318 <memp_free>
}
 8006b04:	bf00      	nop
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	08011224 	.word	0x08011224
 8006b10:	08011254 	.word	0x08011254
 8006b14:	08011268 	.word	0x08011268

08006b18 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	7d1b      	ldrb	r3, [r3, #20]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d105      	bne.n	8006b34 <tcp_free_listen+0x1c>
 8006b28:	4b06      	ldr	r3, [pc, #24]	; (8006b44 <tcp_free_listen+0x2c>)
 8006b2a:	22df      	movs	r2, #223	; 0xdf
 8006b2c:	4906      	ldr	r1, [pc, #24]	; (8006b48 <tcp_free_listen+0x30>)
 8006b2e:	4807      	ldr	r0, [pc, #28]	; (8006b4c <tcp_free_listen+0x34>)
 8006b30:	f008 fb3a 	bl	800f1a8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006b34:	6879      	ldr	r1, [r7, #4]
 8006b36:	2003      	movs	r0, #3
 8006b38:	f7fe fbee 	bl	8005318 <memp_free>
}
 8006b3c:	bf00      	nop
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	08011224 	.word	0x08011224
 8006b48:	08011290 	.word	0x08011290
 8006b4c:	08011268 	.word	0x08011268

08006b50 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006b54:	f000 fea2 	bl	800789c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006b58:	4b07      	ldr	r3, [pc, #28]	; (8006b78 <tcp_tmr+0x28>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	4b05      	ldr	r3, [pc, #20]	; (8006b78 <tcp_tmr+0x28>)
 8006b62:	701a      	strb	r2, [r3, #0]
 8006b64:	4b04      	ldr	r3, [pc, #16]	; (8006b78 <tcp_tmr+0x28>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006b70:	f000 fb54 	bl	800721c <tcp_slowtmr>
  }
}
 8006b74:	bf00      	nop
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	200083bd 	.word	0x200083bd

08006b7c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d105      	bne.n	8006b98 <tcp_remove_listener+0x1c>
 8006b8c:	4b0d      	ldr	r3, [pc, #52]	; (8006bc4 <tcp_remove_listener+0x48>)
 8006b8e:	22ff      	movs	r2, #255	; 0xff
 8006b90:	490d      	ldr	r1, [pc, #52]	; (8006bc8 <tcp_remove_listener+0x4c>)
 8006b92:	480e      	ldr	r0, [pc, #56]	; (8006bcc <tcp_remove_listener+0x50>)
 8006b94:	f008 fb08 	bl	800f1a8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	e00a      	b.n	8006bb4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d102      	bne.n	8006bae <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1f1      	bne.n	8006b9e <tcp_remove_listener+0x22>
    }
  }
}
 8006bba:	bf00      	nop
 8006bbc:	bf00      	nop
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	08011224 	.word	0x08011224
 8006bc8:	080112ac 	.word	0x080112ac
 8006bcc:	08011268 	.word	0x08011268

08006bd0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d106      	bne.n	8006bec <tcp_listen_closed+0x1c>
 8006bde:	4b14      	ldr	r3, [pc, #80]	; (8006c30 <tcp_listen_closed+0x60>)
 8006be0:	f240 1211 	movw	r2, #273	; 0x111
 8006be4:	4913      	ldr	r1, [pc, #76]	; (8006c34 <tcp_listen_closed+0x64>)
 8006be6:	4814      	ldr	r0, [pc, #80]	; (8006c38 <tcp_listen_closed+0x68>)
 8006be8:	f008 fade 	bl	800f1a8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	7d1b      	ldrb	r3, [r3, #20]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d006      	beq.n	8006c02 <tcp_listen_closed+0x32>
 8006bf4:	4b0e      	ldr	r3, [pc, #56]	; (8006c30 <tcp_listen_closed+0x60>)
 8006bf6:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006bfa:	4910      	ldr	r1, [pc, #64]	; (8006c3c <tcp_listen_closed+0x6c>)
 8006bfc:	480e      	ldr	r0, [pc, #56]	; (8006c38 <tcp_listen_closed+0x68>)
 8006bfe:	f008 fad3 	bl	800f1a8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006c02:	2301      	movs	r3, #1
 8006c04:	60fb      	str	r3, [r7, #12]
 8006c06:	e00b      	b.n	8006c20 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006c08:	4a0d      	ldr	r2, [pc, #52]	; (8006c40 <tcp_listen_closed+0x70>)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6879      	ldr	r1, [r7, #4]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7ff ffb1 	bl	8006b7c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d9f0      	bls.n	8006c08 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006c26:	bf00      	nop
 8006c28:	bf00      	nop
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	08011224 	.word	0x08011224
 8006c34:	080112d4 	.word	0x080112d4
 8006c38:	08011268 	.word	0x08011268
 8006c3c:	080112e0 	.word	0x080112e0
 8006c40:	0801320c 	.word	0x0801320c

08006c44 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006c44:	b5b0      	push	{r4, r5, r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af04      	add	r7, sp, #16
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d106      	bne.n	8006c64 <tcp_close_shutdown+0x20>
 8006c56:	4b63      	ldr	r3, [pc, #396]	; (8006de4 <tcp_close_shutdown+0x1a0>)
 8006c58:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006c5c:	4962      	ldr	r1, [pc, #392]	; (8006de8 <tcp_close_shutdown+0x1a4>)
 8006c5e:	4863      	ldr	r0, [pc, #396]	; (8006dec <tcp_close_shutdown+0x1a8>)
 8006c60:	f008 faa2 	bl	800f1a8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006c64:	78fb      	ldrb	r3, [r7, #3]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d066      	beq.n	8006d38 <tcp_close_shutdown+0xf4>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	7d1b      	ldrb	r3, [r3, #20]
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d003      	beq.n	8006c7a <tcp_close_shutdown+0x36>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	7d1b      	ldrb	r3, [r3, #20]
 8006c76:	2b07      	cmp	r3, #7
 8006c78:	d15e      	bne.n	8006d38 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d104      	bne.n	8006c8c <tcp_close_shutdown+0x48>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c86:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006c8a:	d055      	beq.n	8006d38 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	8b5b      	ldrh	r3, [r3, #26]
 8006c90:	f003 0310 	and.w	r3, r3, #16
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d106      	bne.n	8006ca6 <tcp_close_shutdown+0x62>
 8006c98:	4b52      	ldr	r3, [pc, #328]	; (8006de4 <tcp_close_shutdown+0x1a0>)
 8006c9a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006c9e:	4954      	ldr	r1, [pc, #336]	; (8006df0 <tcp_close_shutdown+0x1ac>)
 8006ca0:	4852      	ldr	r0, [pc, #328]	; (8006dec <tcp_close_shutdown+0x1a8>)
 8006ca2:	f008 fa81 	bl	800f1a8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006cae:	687d      	ldr	r5, [r7, #4]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	8ad2      	ldrh	r2, [r2, #22]
 8006cb8:	6879      	ldr	r1, [r7, #4]
 8006cba:	8b09      	ldrh	r1, [r1, #24]
 8006cbc:	9102      	str	r1, [sp, #8]
 8006cbe:	9201      	str	r2, [sp, #4]
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	462b      	mov	r3, r5
 8006cc4:	4622      	mov	r2, r4
 8006cc6:	4601      	mov	r1, r0
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f004 fe91 	bl	800b9f0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 f8c6 	bl	8007e60 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006cd4:	4b47      	ldr	r3, [pc, #284]	; (8006df4 <tcp_close_shutdown+0x1b0>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d105      	bne.n	8006cea <tcp_close_shutdown+0xa6>
 8006cde:	4b45      	ldr	r3, [pc, #276]	; (8006df4 <tcp_close_shutdown+0x1b0>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	4a43      	ldr	r2, [pc, #268]	; (8006df4 <tcp_close_shutdown+0x1b0>)
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	e013      	b.n	8006d12 <tcp_close_shutdown+0xce>
 8006cea:	4b42      	ldr	r3, [pc, #264]	; (8006df4 <tcp_close_shutdown+0x1b0>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	e00c      	b.n	8006d0c <tcp_close_shutdown+0xc8>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d104      	bne.n	8006d06 <tcp_close_shutdown+0xc2>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	68da      	ldr	r2, [r3, #12]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	60da      	str	r2, [r3, #12]
 8006d04:	e005      	b.n	8006d12 <tcp_close_shutdown+0xce>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1ef      	bne.n	8006cf2 <tcp_close_shutdown+0xae>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	60da      	str	r2, [r3, #12]
 8006d18:	4b37      	ldr	r3, [pc, #220]	; (8006df8 <tcp_close_shutdown+0x1b4>)
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006d1e:	4b37      	ldr	r3, [pc, #220]	; (8006dfc <tcp_close_shutdown+0x1b8>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d102      	bne.n	8006d2e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006d28:	f003 fd5e 	bl	800a7e8 <tcp_trigger_input_pcb_close>
 8006d2c:	e002      	b.n	8006d34 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7ff fed6 	bl	8006ae0 <tcp_free>
      }
      return ERR_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	e050      	b.n	8006dda <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	7d1b      	ldrb	r3, [r3, #20]
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d03b      	beq.n	8006db8 <tcp_close_shutdown+0x174>
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	dc44      	bgt.n	8006dce <tcp_close_shutdown+0x18a>
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d002      	beq.n	8006d4e <tcp_close_shutdown+0x10a>
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d02a      	beq.n	8006da2 <tcp_close_shutdown+0x15e>
 8006d4c:	e03f      	b.n	8006dce <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	8adb      	ldrh	r3, [r3, #22]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d021      	beq.n	8006d9a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006d56:	4b2a      	ldr	r3, [pc, #168]	; (8006e00 <tcp_close_shutdown+0x1bc>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d105      	bne.n	8006d6c <tcp_close_shutdown+0x128>
 8006d60:	4b27      	ldr	r3, [pc, #156]	; (8006e00 <tcp_close_shutdown+0x1bc>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	4a26      	ldr	r2, [pc, #152]	; (8006e00 <tcp_close_shutdown+0x1bc>)
 8006d68:	6013      	str	r3, [r2, #0]
 8006d6a:	e013      	b.n	8006d94 <tcp_close_shutdown+0x150>
 8006d6c:	4b24      	ldr	r3, [pc, #144]	; (8006e00 <tcp_close_shutdown+0x1bc>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	60bb      	str	r3, [r7, #8]
 8006d72:	e00c      	b.n	8006d8e <tcp_close_shutdown+0x14a>
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d104      	bne.n	8006d88 <tcp_close_shutdown+0x144>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68da      	ldr	r2, [r3, #12]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	60da      	str	r2, [r3, #12]
 8006d86:	e005      	b.n	8006d94 <tcp_close_shutdown+0x150>
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	60bb      	str	r3, [r7, #8]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1ef      	bne.n	8006d74 <tcp_close_shutdown+0x130>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7ff fea0 	bl	8006ae0 <tcp_free>
      break;
 8006da0:	e01a      	b.n	8006dd8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7ff ff14 	bl	8006bd0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006da8:	6879      	ldr	r1, [r7, #4]
 8006daa:	4816      	ldr	r0, [pc, #88]	; (8006e04 <tcp_close_shutdown+0x1c0>)
 8006dac:	f001 f8a8 	bl	8007f00 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7ff feb1 	bl	8006b18 <tcp_free_listen>
      break;
 8006db6:	e00f      	b.n	8006dd8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	480e      	ldr	r0, [pc, #56]	; (8006df4 <tcp_close_shutdown+0x1b0>)
 8006dbc:	f001 f8a0 	bl	8007f00 <tcp_pcb_remove>
 8006dc0:	4b0d      	ldr	r3, [pc, #52]	; (8006df8 <tcp_close_shutdown+0x1b4>)
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7ff fe8a 	bl	8006ae0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006dcc:	e004      	b.n	8006dd8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f81a 	bl	8006e08 <tcp_close_shutdown_fin>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	e000      	b.n	8006dda <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bdb0      	pop	{r4, r5, r7, pc}
 8006de2:	bf00      	nop
 8006de4:	08011224 	.word	0x08011224
 8006de8:	080112f8 	.word	0x080112f8
 8006dec:	08011268 	.word	0x08011268
 8006df0:	08011318 	.word	0x08011318
 8006df4:	200083b4 	.word	0x200083b4
 8006df8:	200083bc 	.word	0x200083bc
 8006dfc:	200083f4 	.word	0x200083f4
 8006e00:	200083ac 	.word	0x200083ac
 8006e04:	200083b0 	.word	0x200083b0

08006e08 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d106      	bne.n	8006e24 <tcp_close_shutdown_fin+0x1c>
 8006e16:	4b2e      	ldr	r3, [pc, #184]	; (8006ed0 <tcp_close_shutdown_fin+0xc8>)
 8006e18:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006e1c:	492d      	ldr	r1, [pc, #180]	; (8006ed4 <tcp_close_shutdown_fin+0xcc>)
 8006e1e:	482e      	ldr	r0, [pc, #184]	; (8006ed8 <tcp_close_shutdown_fin+0xd0>)
 8006e20:	f008 f9c2 	bl	800f1a8 <iprintf>

  switch (pcb->state) {
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	7d1b      	ldrb	r3, [r3, #20]
 8006e28:	2b07      	cmp	r3, #7
 8006e2a:	d020      	beq.n	8006e6e <tcp_close_shutdown_fin+0x66>
 8006e2c:	2b07      	cmp	r3, #7
 8006e2e:	dc2b      	bgt.n	8006e88 <tcp_close_shutdown_fin+0x80>
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d002      	beq.n	8006e3a <tcp_close_shutdown_fin+0x32>
 8006e34:	2b04      	cmp	r3, #4
 8006e36:	d00d      	beq.n	8006e54 <tcp_close_shutdown_fin+0x4c>
 8006e38:	e026      	b.n	8006e88 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f003 fee6 	bl	800ac0c <tcp_send_fin>
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d11f      	bne.n	8006e8c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2205      	movs	r2, #5
 8006e50:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006e52:	e01b      	b.n	8006e8c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f003 fed9 	bl	800ac0c <tcp_send_fin>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d114      	bne.n	8006e90 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2205      	movs	r2, #5
 8006e6a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006e6c:	e010      	b.n	8006e90 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f003 fecc 	bl	800ac0c <tcp_send_fin>
 8006e74:	4603      	mov	r3, r0
 8006e76:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d109      	bne.n	8006e94 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2209      	movs	r2, #9
 8006e84:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006e86:	e005      	b.n	8006e94 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	e01c      	b.n	8006ec6 <tcp_close_shutdown_fin+0xbe>
      break;
 8006e8c:	bf00      	nop
 8006e8e:	e002      	b.n	8006e96 <tcp_close_shutdown_fin+0x8e>
      break;
 8006e90:	bf00      	nop
 8006e92:	e000      	b.n	8006e96 <tcp_close_shutdown_fin+0x8e>
      break;
 8006e94:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d103      	bne.n	8006ea6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f003 fff2 	bl	800ae88 <tcp_output>
 8006ea4:	e00d      	b.n	8006ec2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eae:	d108      	bne.n	8006ec2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	8b5b      	ldrh	r3, [r3, #26]
 8006eb4:	f043 0308 	orr.w	r3, r3, #8
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	e001      	b.n	8006ec6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	08011224 	.word	0x08011224
 8006ed4:	080112d4 	.word	0x080112d4
 8006ed8:	08011268 	.word	0x08011268

08006edc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d109      	bne.n	8006efe <tcp_close+0x22>
 8006eea:	4b0f      	ldr	r3, [pc, #60]	; (8006f28 <tcp_close+0x4c>)
 8006eec:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006ef0:	490e      	ldr	r1, [pc, #56]	; (8006f2c <tcp_close+0x50>)
 8006ef2:	480f      	ldr	r0, [pc, #60]	; (8006f30 <tcp_close+0x54>)
 8006ef4:	f008 f958 	bl	800f1a8 <iprintf>
 8006ef8:	f06f 030f 	mvn.w	r3, #15
 8006efc:	e00f      	b.n	8006f1e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	7d1b      	ldrb	r3, [r3, #20]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d006      	beq.n	8006f14 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	8b5b      	ldrh	r3, [r3, #26]
 8006f0a:	f043 0310 	orr.w	r3, r3, #16
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006f14:	2101      	movs	r1, #1
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7ff fe94 	bl	8006c44 <tcp_close_shutdown>
 8006f1c:	4603      	mov	r3, r0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	08011224 	.word	0x08011224
 8006f2c:	08011334 	.word	0x08011334
 8006f30:	08011268 	.word	0x08011268

08006f34 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b08e      	sub	sp, #56	; 0x38
 8006f38:	af04      	add	r7, sp, #16
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d107      	bne.n	8006f54 <tcp_abandon+0x20>
 8006f44:	4b52      	ldr	r3, [pc, #328]	; (8007090 <tcp_abandon+0x15c>)
 8006f46:	f240 223d 	movw	r2, #573	; 0x23d
 8006f4a:	4952      	ldr	r1, [pc, #328]	; (8007094 <tcp_abandon+0x160>)
 8006f4c:	4852      	ldr	r0, [pc, #328]	; (8007098 <tcp_abandon+0x164>)
 8006f4e:	f008 f92b 	bl	800f1a8 <iprintf>
 8006f52:	e099      	b.n	8007088 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	7d1b      	ldrb	r3, [r3, #20]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d106      	bne.n	8006f6a <tcp_abandon+0x36>
 8006f5c:	4b4c      	ldr	r3, [pc, #304]	; (8007090 <tcp_abandon+0x15c>)
 8006f5e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006f62:	494e      	ldr	r1, [pc, #312]	; (800709c <tcp_abandon+0x168>)
 8006f64:	484c      	ldr	r0, [pc, #304]	; (8007098 <tcp_abandon+0x164>)
 8006f66:	f008 f91f 	bl	800f1a8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	7d1b      	ldrb	r3, [r3, #20]
 8006f6e:	2b0a      	cmp	r3, #10
 8006f70:	d107      	bne.n	8006f82 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	484a      	ldr	r0, [pc, #296]	; (80070a0 <tcp_abandon+0x16c>)
 8006f76:	f000 ffc3 	bl	8007f00 <tcp_pcb_remove>
    tcp_free(pcb);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7ff fdb0 	bl	8006ae0 <tcp_free>
 8006f80:	e082      	b.n	8007088 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006f82:	2300      	movs	r3, #0
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006f86:	2300      	movs	r3, #0
 8006f88:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f8e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f9c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	7d1b      	ldrb	r3, [r3, #20]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d126      	bne.n	8006ffa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	8adb      	ldrh	r3, [r3, #22]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d02e      	beq.n	8007012 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006fb4:	4b3b      	ldr	r3, [pc, #236]	; (80070a4 <tcp_abandon+0x170>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d105      	bne.n	8006fca <tcp_abandon+0x96>
 8006fbe:	4b39      	ldr	r3, [pc, #228]	; (80070a4 <tcp_abandon+0x170>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	4a37      	ldr	r2, [pc, #220]	; (80070a4 <tcp_abandon+0x170>)
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	e013      	b.n	8006ff2 <tcp_abandon+0xbe>
 8006fca:	4b36      	ldr	r3, [pc, #216]	; (80070a4 <tcp_abandon+0x170>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	61fb      	str	r3, [r7, #28]
 8006fd0:	e00c      	b.n	8006fec <tcp_abandon+0xb8>
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d104      	bne.n	8006fe6 <tcp_abandon+0xb2>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68da      	ldr	r2, [r3, #12]
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	60da      	str	r2, [r3, #12]
 8006fe4:	e005      	b.n	8006ff2 <tcp_abandon+0xbe>
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	61fb      	str	r3, [r7, #28]
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1ef      	bne.n	8006fd2 <tcp_abandon+0x9e>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	60da      	str	r2, [r3, #12]
 8006ff8:	e00b      	b.n	8007012 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	8adb      	ldrh	r3, [r3, #22]
 8007002:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007004:	6879      	ldr	r1, [r7, #4]
 8007006:	4828      	ldr	r0, [pc, #160]	; (80070a8 <tcp_abandon+0x174>)
 8007008:	f000 ff7a 	bl	8007f00 <tcp_pcb_remove>
 800700c:	4b27      	ldr	r3, [pc, #156]	; (80070ac <tcp_abandon+0x178>)
 800700e:	2201      	movs	r2, #1
 8007010:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007016:	2b00      	cmp	r3, #0
 8007018:	d004      	beq.n	8007024 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701e:	4618      	mov	r0, r3
 8007020:	f000 fd1c 	bl	8007a5c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007028:	2b00      	cmp	r3, #0
 800702a:	d004      	beq.n	8007036 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007030:	4618      	mov	r0, r3
 8007032:	f000 fd13 	bl	8007a5c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800703a:	2b00      	cmp	r3, #0
 800703c:	d004      	beq.n	8007048 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007042:	4618      	mov	r0, r3
 8007044:	f000 fd0a 	bl	8007a5c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00e      	beq.n	800706c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	3304      	adds	r3, #4
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	8b12      	ldrh	r2, [r2, #24]
 8007058:	9202      	str	r2, [sp, #8]
 800705a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800705c:	9201      	str	r2, [sp, #4]
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	460b      	mov	r3, r1
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	69b9      	ldr	r1, [r7, #24]
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f004 fcc2 	bl	800b9f0 <tcp_rst>
    }
    last_state = pcb->state;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	7d1b      	ldrb	r3, [r3, #20]
 8007070:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff fd34 	bl	8006ae0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d004      	beq.n	8007088 <tcp_abandon+0x154>
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f06f 010c 	mvn.w	r1, #12
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	4798      	blx	r3
  }
}
 8007088:	3728      	adds	r7, #40	; 0x28
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	08011224 	.word	0x08011224
 8007094:	08011368 	.word	0x08011368
 8007098:	08011268 	.word	0x08011268
 800709c:	08011384 	.word	0x08011384
 80070a0:	200083b8 	.word	0x200083b8
 80070a4:	200083ac 	.word	0x200083ac
 80070a8:	200083b4 	.word	0x200083b4
 80070ac:	200083bc 	.word	0x200083bc

080070b0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80070b8:	2101      	movs	r1, #1
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7ff ff3a 	bl	8006f34 <tcp_abandon>
}
 80070c0:	bf00      	nop
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d106      	bne.n	80070e4 <tcp_update_rcv_ann_wnd+0x1c>
 80070d6:	4b25      	ldr	r3, [pc, #148]	; (800716c <tcp_update_rcv_ann_wnd+0xa4>)
 80070d8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80070dc:	4924      	ldr	r1, [pc, #144]	; (8007170 <tcp_update_rcv_ann_wnd+0xa8>)
 80070de:	4825      	ldr	r0, [pc, #148]	; (8007174 <tcp_update_rcv_ann_wnd+0xac>)
 80070e0:	f008 f862 	bl	800f1a8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80070ec:	4413      	add	r3, r2
 80070ee:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80070f8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80070fc:	bf28      	it	cs
 80070fe:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007102:	b292      	uxth	r2, r2
 8007104:	4413      	add	r3, r2
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	db08      	blt.n	8007120 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	e020      	b.n	8007162 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	dd03      	ble.n	8007136 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007134:	e014      	b.n	8007160 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007148:	d306      	bcc.n	8007158 <tcp_update_rcv_ann_wnd+0x90>
 800714a:	4b08      	ldr	r3, [pc, #32]	; (800716c <tcp_update_rcv_ann_wnd+0xa4>)
 800714c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007150:	4909      	ldr	r1, [pc, #36]	; (8007178 <tcp_update_rcv_ann_wnd+0xb0>)
 8007152:	4808      	ldr	r0, [pc, #32]	; (8007174 <tcp_update_rcv_ann_wnd+0xac>)
 8007154:	f008 f828 	bl	800f1a8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	b29a      	uxth	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007160:	2300      	movs	r3, #0
  }
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	08011224 	.word	0x08011224
 8007170:	08011480 	.word	0x08011480
 8007174:	08011268 	.word	0x08011268
 8007178:	080114a4 	.word	0x080114a4

0800717c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	460b      	mov	r3, r1
 8007186:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d107      	bne.n	800719e <tcp_recved+0x22>
 800718e:	4b1f      	ldr	r3, [pc, #124]	; (800720c <tcp_recved+0x90>)
 8007190:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007194:	491e      	ldr	r1, [pc, #120]	; (8007210 <tcp_recved+0x94>)
 8007196:	481f      	ldr	r0, [pc, #124]	; (8007214 <tcp_recved+0x98>)
 8007198:	f008 f806 	bl	800f1a8 <iprintf>
 800719c:	e032      	b.n	8007204 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	7d1b      	ldrb	r3, [r3, #20]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d106      	bne.n	80071b4 <tcp_recved+0x38>
 80071a6:	4b19      	ldr	r3, [pc, #100]	; (800720c <tcp_recved+0x90>)
 80071a8:	f240 32d2 	movw	r2, #978	; 0x3d2
 80071ac:	491a      	ldr	r1, [pc, #104]	; (8007218 <tcp_recved+0x9c>)
 80071ae:	4819      	ldr	r0, [pc, #100]	; (8007214 <tcp_recved+0x98>)
 80071b0:	f007 fffa 	bl	800f1a8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80071b8:	887b      	ldrh	r3, [r7, #2]
 80071ba:	4413      	add	r3, r2
 80071bc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80071be:	89fb      	ldrh	r3, [r7, #14]
 80071c0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80071c4:	d804      	bhi.n	80071d0 <tcp_recved+0x54>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ca:	89fa      	ldrh	r2, [r7, #14]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d204      	bcs.n	80071da <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80071d6:	851a      	strh	r2, [r3, #40]	; 0x28
 80071d8:	e002      	b.n	80071e0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	89fa      	ldrh	r2, [r7, #14]
 80071de:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7ff ff71 	bl	80070c8 <tcp_update_rcv_ann_wnd>
 80071e6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80071ee:	d309      	bcc.n	8007204 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	8b5b      	ldrh	r3, [r3, #26]
 80071f4:	f043 0302 	orr.w	r3, r3, #2
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f003 fe42 	bl	800ae88 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	08011224 	.word	0x08011224
 8007210:	080114c0 	.word	0x080114c0
 8007214:	08011268 	.word	0x08011268
 8007218:	080114d8 	.word	0x080114d8

0800721c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800721c:	b5b0      	push	{r4, r5, r7, lr}
 800721e:	b090      	sub	sp, #64	; 0x40
 8007220:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007228:	4b94      	ldr	r3, [pc, #592]	; (800747c <tcp_slowtmr+0x260>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3301      	adds	r3, #1
 800722e:	4a93      	ldr	r2, [pc, #588]	; (800747c <tcp_slowtmr+0x260>)
 8007230:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007232:	4b93      	ldr	r3, [pc, #588]	; (8007480 <tcp_slowtmr+0x264>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	3301      	adds	r3, #1
 8007238:	b2da      	uxtb	r2, r3
 800723a:	4b91      	ldr	r3, [pc, #580]	; (8007480 <tcp_slowtmr+0x264>)
 800723c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800723e:	2300      	movs	r3, #0
 8007240:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007242:	4b90      	ldr	r3, [pc, #576]	; (8007484 <tcp_slowtmr+0x268>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007248:	e29f      	b.n	800778a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800724a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724c:	7d1b      	ldrb	r3, [r3, #20]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d106      	bne.n	8007260 <tcp_slowtmr+0x44>
 8007252:	4b8d      	ldr	r3, [pc, #564]	; (8007488 <tcp_slowtmr+0x26c>)
 8007254:	f240 42be 	movw	r2, #1214	; 0x4be
 8007258:	498c      	ldr	r1, [pc, #560]	; (800748c <tcp_slowtmr+0x270>)
 800725a:	488d      	ldr	r0, [pc, #564]	; (8007490 <tcp_slowtmr+0x274>)
 800725c:	f007 ffa4 	bl	800f1a8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007262:	7d1b      	ldrb	r3, [r3, #20]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d106      	bne.n	8007276 <tcp_slowtmr+0x5a>
 8007268:	4b87      	ldr	r3, [pc, #540]	; (8007488 <tcp_slowtmr+0x26c>)
 800726a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800726e:	4989      	ldr	r1, [pc, #548]	; (8007494 <tcp_slowtmr+0x278>)
 8007270:	4887      	ldr	r0, [pc, #540]	; (8007490 <tcp_slowtmr+0x274>)
 8007272:	f007 ff99 	bl	800f1a8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007278:	7d1b      	ldrb	r3, [r3, #20]
 800727a:	2b0a      	cmp	r3, #10
 800727c:	d106      	bne.n	800728c <tcp_slowtmr+0x70>
 800727e:	4b82      	ldr	r3, [pc, #520]	; (8007488 <tcp_slowtmr+0x26c>)
 8007280:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007284:	4984      	ldr	r1, [pc, #528]	; (8007498 <tcp_slowtmr+0x27c>)
 8007286:	4882      	ldr	r0, [pc, #520]	; (8007490 <tcp_slowtmr+0x274>)
 8007288:	f007 ff8e 	bl	800f1a8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800728c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728e:	7f9a      	ldrb	r2, [r3, #30]
 8007290:	4b7b      	ldr	r3, [pc, #492]	; (8007480 <tcp_slowtmr+0x264>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	429a      	cmp	r2, r3
 8007296:	d105      	bne.n	80072a4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800729c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80072a2:	e272      	b.n	800778a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80072a4:	4b76      	ldr	r3, [pc, #472]	; (8007480 <tcp_slowtmr+0x264>)
 80072a6:	781a      	ldrb	r2, [r3, #0]
 80072a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072aa:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80072b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ba:	7d1b      	ldrb	r3, [r3, #20]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d10a      	bne.n	80072d6 <tcp_slowtmr+0xba>
 80072c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072c6:	2b05      	cmp	r3, #5
 80072c8:	d905      	bls.n	80072d6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80072ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072ce:	3301      	adds	r3, #1
 80072d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80072d4:	e11e      	b.n	8007514 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80072d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072dc:	2b0b      	cmp	r3, #11
 80072de:	d905      	bls.n	80072ec <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80072e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072e4:	3301      	adds	r3, #1
 80072e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80072ea:	e113      	b.n	8007514 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80072ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d075      	beq.n	80073e2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80072f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d006      	beq.n	800730c <tcp_slowtmr+0xf0>
 80072fe:	4b62      	ldr	r3, [pc, #392]	; (8007488 <tcp_slowtmr+0x26c>)
 8007300:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007304:	4965      	ldr	r1, [pc, #404]	; (800749c <tcp_slowtmr+0x280>)
 8007306:	4862      	ldr	r0, [pc, #392]	; (8007490 <tcp_slowtmr+0x274>)
 8007308:	f007 ff4e 	bl	800f1a8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007310:	2b00      	cmp	r3, #0
 8007312:	d106      	bne.n	8007322 <tcp_slowtmr+0x106>
 8007314:	4b5c      	ldr	r3, [pc, #368]	; (8007488 <tcp_slowtmr+0x26c>)
 8007316:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800731a:	4961      	ldr	r1, [pc, #388]	; (80074a0 <tcp_slowtmr+0x284>)
 800731c:	485c      	ldr	r0, [pc, #368]	; (8007490 <tcp_slowtmr+0x274>)
 800731e:	f007 ff43 	bl	800f1a8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007324:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007328:	2b0b      	cmp	r3, #11
 800732a:	d905      	bls.n	8007338 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800732c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007330:	3301      	adds	r3, #1
 8007332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007336:	e0ed      	b.n	8007514 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800733e:	3b01      	subs	r3, #1
 8007340:	4a58      	ldr	r2, [pc, #352]	; (80074a4 <tcp_slowtmr+0x288>)
 8007342:	5cd3      	ldrb	r3, [r2, r3]
 8007344:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007348:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800734c:	7c7a      	ldrb	r2, [r7, #17]
 800734e:	429a      	cmp	r2, r3
 8007350:	d907      	bls.n	8007362 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007354:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007358:	3301      	adds	r3, #1
 800735a:	b2da      	uxtb	r2, r3
 800735c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007364:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007368:	7c7a      	ldrb	r2, [r7, #17]
 800736a:	429a      	cmp	r2, r3
 800736c:	f200 80d2 	bhi.w	8007514 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007370:	2301      	movs	r3, #1
 8007372:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007376:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800737a:	2b00      	cmp	r3, #0
 800737c:	d108      	bne.n	8007390 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800737e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007380:	f004 fc2a 	bl	800bbd8 <tcp_zero_window_probe>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d014      	beq.n	80073b4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800738a:	2300      	movs	r3, #0
 800738c:	623b      	str	r3, [r7, #32]
 800738e:	e011      	b.n	80073b4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007392:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007396:	4619      	mov	r1, r3
 8007398:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800739a:	f003 faef 	bl	800a97c <tcp_split_unsent_seg>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d107      	bne.n	80073b4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80073a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073a6:	f003 fd6f 	bl	800ae88 <tcp_output>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80073b0:	2300      	movs	r3, #0
 80073b2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80073b4:	6a3b      	ldr	r3, [r7, #32]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 80ac 	beq.w	8007514 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80073bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80073c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80073ca:	2b06      	cmp	r3, #6
 80073cc:	f200 80a2 	bhi.w	8007514 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80073d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80073d6:	3301      	adds	r3, #1
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073dc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80073e0:	e098      	b.n	8007514 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80073e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	db0f      	blt.n	800740c <tcp_slowtmr+0x1f0>
 80073ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80073f2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d008      	beq.n	800740c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80073fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007400:	b29b      	uxth	r3, r3
 8007402:	3301      	adds	r3, #1
 8007404:	b29b      	uxth	r3, r3
 8007406:	b21a      	sxth	r2, r3
 8007408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007414:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007418:	429a      	cmp	r2, r3
 800741a:	db7b      	blt.n	8007514 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800741c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800741e:	f004 f825 	bl	800b46c <tcp_rexmit_rto_prepare>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d007      	beq.n	8007438 <tcp_slowtmr+0x21c>
 8007428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800742c:	2b00      	cmp	r3, #0
 800742e:	d171      	bne.n	8007514 <tcp_slowtmr+0x2f8>
 8007430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007434:	2b00      	cmp	r3, #0
 8007436:	d06d      	beq.n	8007514 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743a:	7d1b      	ldrb	r3, [r3, #20]
 800743c:	2b02      	cmp	r3, #2
 800743e:	d03a      	beq.n	80074b6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007442:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007446:	2b0c      	cmp	r3, #12
 8007448:	bf28      	it	cs
 800744a:	230c      	movcs	r3, #12
 800744c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800744e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007450:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007454:	10db      	asrs	r3, r3, #3
 8007456:	b21b      	sxth	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007460:	4413      	add	r3, r2
 8007462:	7efa      	ldrb	r2, [r7, #27]
 8007464:	4910      	ldr	r1, [pc, #64]	; (80074a8 <tcp_slowtmr+0x28c>)
 8007466:	5c8a      	ldrb	r2, [r1, r2]
 8007468:	4093      	lsls	r3, r2
 800746a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007472:	4293      	cmp	r3, r2
 8007474:	dc1a      	bgt.n	80074ac <tcp_slowtmr+0x290>
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	b21a      	sxth	r2, r3
 800747a:	e019      	b.n	80074b0 <tcp_slowtmr+0x294>
 800747c:	200083a8 	.word	0x200083a8
 8007480:	200083be 	.word	0x200083be
 8007484:	200083b4 	.word	0x200083b4
 8007488:	08011224 	.word	0x08011224
 800748c:	08011568 	.word	0x08011568
 8007490:	08011268 	.word	0x08011268
 8007494:	08011594 	.word	0x08011594
 8007498:	080115c0 	.word	0x080115c0
 800749c:	080115f0 	.word	0x080115f0
 80074a0:	08011624 	.word	0x08011624
 80074a4:	08013204 	.word	0x08013204
 80074a8:	080131f4 	.word	0x080131f4
 80074ac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80074b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80074b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b8:	2200      	movs	r2, #0
 80074ba:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80074bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80074c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80074c8:	4293      	cmp	r3, r2
 80074ca:	bf28      	it	cs
 80074cc:	4613      	movcs	r3, r2
 80074ce:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80074d0:	8a7b      	ldrh	r3, [r7, #18]
 80074d2:	085b      	lsrs	r3, r3, #1
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80074dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074de:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074e6:	005b      	lsls	r3, r3, #1
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d206      	bcs.n	80074fc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80074ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074f2:	005b      	lsls	r3, r3, #1
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80074fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fe:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007502:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007508:	2200      	movs	r2, #0
 800750a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800750e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007510:	f004 f81c 	bl	800b54c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007516:	7d1b      	ldrb	r3, [r3, #20]
 8007518:	2b06      	cmp	r3, #6
 800751a:	d111      	bne.n	8007540 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800751c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751e:	8b5b      	ldrh	r3, [r3, #26]
 8007520:	f003 0310 	and.w	r3, r3, #16
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00b      	beq.n	8007540 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007528:	4b9d      	ldr	r3, [pc, #628]	; (80077a0 <tcp_slowtmr+0x584>)
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b28      	cmp	r3, #40	; 0x28
 8007534:	d904      	bls.n	8007540 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800753a:	3301      	adds	r3, #1
 800753c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007542:	7a5b      	ldrb	r3, [r3, #9]
 8007544:	f003 0308 	and.w	r3, r3, #8
 8007548:	2b00      	cmp	r3, #0
 800754a:	d04c      	beq.n	80075e6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800754c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007550:	2b04      	cmp	r3, #4
 8007552:	d003      	beq.n	800755c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007556:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007558:	2b07      	cmp	r3, #7
 800755a:	d144      	bne.n	80075e6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800755c:	4b90      	ldr	r3, [pc, #576]	; (80077a0 <tcp_slowtmr+0x584>)
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800756c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8007570:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007574:	498b      	ldr	r1, [pc, #556]	; (80077a4 <tcp_slowtmr+0x588>)
 8007576:	fba1 1303 	umull	r1, r3, r1, r3
 800757a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800757c:	429a      	cmp	r2, r3
 800757e:	d90a      	bls.n	8007596 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007584:	3301      	adds	r3, #1
 8007586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800758a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800758e:	3301      	adds	r3, #1
 8007590:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007594:	e027      	b.n	80075e6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007596:	4b82      	ldr	r3, [pc, #520]	; (80077a0 <tcp_slowtmr+0x584>)
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80075a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80075a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80075ac:	4618      	mov	r0, r3
 80075ae:	4b7e      	ldr	r3, [pc, #504]	; (80077a8 <tcp_slowtmr+0x58c>)
 80075b0:	fb00 f303 	mul.w	r3, r0, r3
 80075b4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80075b6:	497b      	ldr	r1, [pc, #492]	; (80077a4 <tcp_slowtmr+0x588>)
 80075b8:	fba1 1303 	umull	r1, r3, r1, r3
 80075bc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80075be:	429a      	cmp	r2, r3
 80075c0:	d911      	bls.n	80075e6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80075c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075c4:	f004 fac8 	bl	800bb58 <tcp_keepalive>
 80075c8:	4603      	mov	r3, r0
 80075ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80075ce:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d107      	bne.n	80075e6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80075d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80075dc:	3301      	adds	r3, #1
 80075de:	b2da      	uxtb	r2, r3
 80075e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80075e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d011      	beq.n	8007612 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80075ee:	4b6c      	ldr	r3, [pc, #432]	; (80077a0 <tcp_slowtmr+0x584>)
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	1ad2      	subs	r2, r2, r3
 80075f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80075fe:	4619      	mov	r1, r3
 8007600:	460b      	mov	r3, r1
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	440b      	add	r3, r1
 8007606:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007608:	429a      	cmp	r2, r3
 800760a:	d302      	bcc.n	8007612 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800760c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800760e:	f000 fddb 	bl	80081c8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007614:	7d1b      	ldrb	r3, [r3, #20]
 8007616:	2b03      	cmp	r3, #3
 8007618:	d10b      	bne.n	8007632 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800761a:	4b61      	ldr	r3, [pc, #388]	; (80077a0 <tcp_slowtmr+0x584>)
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b28      	cmp	r3, #40	; 0x28
 8007626:	d904      	bls.n	8007632 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800762c:	3301      	adds	r3, #1
 800762e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007634:	7d1b      	ldrb	r3, [r3, #20]
 8007636:	2b09      	cmp	r3, #9
 8007638:	d10b      	bne.n	8007652 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800763a:	4b59      	ldr	r3, [pc, #356]	; (80077a0 <tcp_slowtmr+0x584>)
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	2bf0      	cmp	r3, #240	; 0xf0
 8007646:	d904      	bls.n	8007652 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8007648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800764c:	3301      	adds	r3, #1
 800764e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007656:	2b00      	cmp	r3, #0
 8007658:	d060      	beq.n	800771c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800765a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007660:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007664:	f000 fbfc 	bl	8007e60 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	2b00      	cmp	r3, #0
 800766c:	d010      	beq.n	8007690 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800766e:	4b4f      	ldr	r3, [pc, #316]	; (80077ac <tcp_slowtmr+0x590>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007674:	429a      	cmp	r2, r3
 8007676:	d106      	bne.n	8007686 <tcp_slowtmr+0x46a>
 8007678:	4b4d      	ldr	r3, [pc, #308]	; (80077b0 <tcp_slowtmr+0x594>)
 800767a:	f240 526d 	movw	r2, #1389	; 0x56d
 800767e:	494d      	ldr	r1, [pc, #308]	; (80077b4 <tcp_slowtmr+0x598>)
 8007680:	484d      	ldr	r0, [pc, #308]	; (80077b8 <tcp_slowtmr+0x59c>)
 8007682:	f007 fd91 	bl	800f1a8 <iprintf>
        prev->next = pcb->next;
 8007686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007688:	68da      	ldr	r2, [r3, #12]
 800768a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768c:	60da      	str	r2, [r3, #12]
 800768e:	e00f      	b.n	80076b0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007690:	4b46      	ldr	r3, [pc, #280]	; (80077ac <tcp_slowtmr+0x590>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007696:	429a      	cmp	r2, r3
 8007698:	d006      	beq.n	80076a8 <tcp_slowtmr+0x48c>
 800769a:	4b45      	ldr	r3, [pc, #276]	; (80077b0 <tcp_slowtmr+0x594>)
 800769c:	f240 5271 	movw	r2, #1393	; 0x571
 80076a0:	4946      	ldr	r1, [pc, #280]	; (80077bc <tcp_slowtmr+0x5a0>)
 80076a2:	4845      	ldr	r0, [pc, #276]	; (80077b8 <tcp_slowtmr+0x59c>)
 80076a4:	f007 fd80 	bl	800f1a8 <iprintf>
        tcp_active_pcbs = pcb->next;
 80076a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	4a3f      	ldr	r2, [pc, #252]	; (80077ac <tcp_slowtmr+0x590>)
 80076ae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80076b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d013      	beq.n	80076e0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80076b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80076bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076be:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80076c0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80076c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c4:	3304      	adds	r3, #4
 80076c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076c8:	8ad2      	ldrh	r2, [r2, #22]
 80076ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076cc:	8b09      	ldrh	r1, [r1, #24]
 80076ce:	9102      	str	r1, [sp, #8]
 80076d0:	9201      	str	r2, [sp, #4]
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	462b      	mov	r3, r5
 80076d6:	4622      	mov	r2, r4
 80076d8:	4601      	mov	r1, r0
 80076da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076dc:	f004 f988 	bl	800b9f0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80076e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80076e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e8:	7d1b      	ldrb	r3, [r3, #20]
 80076ea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80076ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80076f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80076f6:	6838      	ldr	r0, [r7, #0]
 80076f8:	f7ff f9f2 	bl	8006ae0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80076fc:	4b30      	ldr	r3, [pc, #192]	; (80077c0 <tcp_slowtmr+0x5a4>)
 80076fe:	2200      	movs	r2, #0
 8007700:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d004      	beq.n	8007712 <tcp_slowtmr+0x4f6>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f06f 010c 	mvn.w	r1, #12
 800770e:	68b8      	ldr	r0, [r7, #8]
 8007710:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007712:	4b2b      	ldr	r3, [pc, #172]	; (80077c0 <tcp_slowtmr+0x5a4>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d037      	beq.n	800778a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800771a:	e590      	b.n	800723e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800771c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007728:	7f1b      	ldrb	r3, [r3, #28]
 800772a:	3301      	adds	r3, #1
 800772c:	b2da      	uxtb	r2, r3
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007734:	7f1a      	ldrb	r2, [r3, #28]
 8007736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007738:	7f5b      	ldrb	r3, [r3, #29]
 800773a:	429a      	cmp	r2, r3
 800773c:	d325      	bcc.n	800778a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007740:	2200      	movs	r2, #0
 8007742:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007744:	4b1e      	ldr	r3, [pc, #120]	; (80077c0 <tcp_slowtmr+0x5a4>)
 8007746:	2200      	movs	r2, #0
 8007748:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800774a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00b      	beq.n	800776c <tcp_slowtmr+0x550>
 8007754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800775a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800775c:	6912      	ldr	r2, [r2, #16]
 800775e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007760:	4610      	mov	r0, r2
 8007762:	4798      	blx	r3
 8007764:	4603      	mov	r3, r0
 8007766:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800776a:	e002      	b.n	8007772 <tcp_slowtmr+0x556>
 800776c:	2300      	movs	r3, #0
 800776e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007772:	4b13      	ldr	r3, [pc, #76]	; (80077c0 <tcp_slowtmr+0x5a4>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d000      	beq.n	800777c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800777a:	e560      	b.n	800723e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800777c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007780:	2b00      	cmp	r3, #0
 8007782:	d102      	bne.n	800778a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8007784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007786:	f003 fb7f 	bl	800ae88 <tcp_output>
  while (pcb != NULL) {
 800778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778c:	2b00      	cmp	r3, #0
 800778e:	f47f ad5c 	bne.w	800724a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007792:	2300      	movs	r3, #0
 8007794:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007796:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <tcp_slowtmr+0x5a8>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800779c:	e067      	b.n	800786e <tcp_slowtmr+0x652>
 800779e:	bf00      	nop
 80077a0:	200083a8 	.word	0x200083a8
 80077a4:	10624dd3 	.word	0x10624dd3
 80077a8:	000124f8 	.word	0x000124f8
 80077ac:	200083b4 	.word	0x200083b4
 80077b0:	08011224 	.word	0x08011224
 80077b4:	0801165c 	.word	0x0801165c
 80077b8:	08011268 	.word	0x08011268
 80077bc:	08011688 	.word	0x08011688
 80077c0:	200083bc 	.word	0x200083bc
 80077c4:	200083b8 	.word	0x200083b8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	7d1b      	ldrb	r3, [r3, #20]
 80077cc:	2b0a      	cmp	r3, #10
 80077ce:	d006      	beq.n	80077de <tcp_slowtmr+0x5c2>
 80077d0:	4b2b      	ldr	r3, [pc, #172]	; (8007880 <tcp_slowtmr+0x664>)
 80077d2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80077d6:	492b      	ldr	r1, [pc, #172]	; (8007884 <tcp_slowtmr+0x668>)
 80077d8:	482b      	ldr	r0, [pc, #172]	; (8007888 <tcp_slowtmr+0x66c>)
 80077da:	f007 fce5 	bl	800f1a8 <iprintf>
    pcb_remove = 0;
 80077de:	2300      	movs	r3, #0
 80077e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80077e4:	4b29      	ldr	r3, [pc, #164]	; (800788c <tcp_slowtmr+0x670>)
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2bf0      	cmp	r3, #240	; 0xf0
 80077f0:	d904      	bls.n	80077fc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80077f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077f6:	3301      	adds	r3, #1
 80077f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80077fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007800:	2b00      	cmp	r3, #0
 8007802:	d02f      	beq.n	8007864 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007804:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007806:	f000 fb2b 	bl	8007e60 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	2b00      	cmp	r3, #0
 800780e:	d010      	beq.n	8007832 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007810:	4b1f      	ldr	r3, [pc, #124]	; (8007890 <tcp_slowtmr+0x674>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007816:	429a      	cmp	r2, r3
 8007818:	d106      	bne.n	8007828 <tcp_slowtmr+0x60c>
 800781a:	4b19      	ldr	r3, [pc, #100]	; (8007880 <tcp_slowtmr+0x664>)
 800781c:	f240 52af 	movw	r2, #1455	; 0x5af
 8007820:	491c      	ldr	r1, [pc, #112]	; (8007894 <tcp_slowtmr+0x678>)
 8007822:	4819      	ldr	r0, [pc, #100]	; (8007888 <tcp_slowtmr+0x66c>)
 8007824:	f007 fcc0 	bl	800f1a8 <iprintf>
        prev->next = pcb->next;
 8007828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782a:	68da      	ldr	r2, [r3, #12]
 800782c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782e:	60da      	str	r2, [r3, #12]
 8007830:	e00f      	b.n	8007852 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007832:	4b17      	ldr	r3, [pc, #92]	; (8007890 <tcp_slowtmr+0x674>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007838:	429a      	cmp	r2, r3
 800783a:	d006      	beq.n	800784a <tcp_slowtmr+0x62e>
 800783c:	4b10      	ldr	r3, [pc, #64]	; (8007880 <tcp_slowtmr+0x664>)
 800783e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007842:	4915      	ldr	r1, [pc, #84]	; (8007898 <tcp_slowtmr+0x67c>)
 8007844:	4810      	ldr	r0, [pc, #64]	; (8007888 <tcp_slowtmr+0x66c>)
 8007846:	f007 fcaf 	bl	800f1a8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800784a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	4a10      	ldr	r2, [pc, #64]	; (8007890 <tcp_slowtmr+0x674>)
 8007850:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007854:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800785c:	69f8      	ldr	r0, [r7, #28]
 800785e:	f7ff f93f 	bl	8006ae0 <tcp_free>
 8007862:	e004      	b.n	800786e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007866:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800786e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1a9      	bne.n	80077c8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8007874:	bf00      	nop
 8007876:	bf00      	nop
 8007878:	3730      	adds	r7, #48	; 0x30
 800787a:	46bd      	mov	sp, r7
 800787c:	bdb0      	pop	{r4, r5, r7, pc}
 800787e:	bf00      	nop
 8007880:	08011224 	.word	0x08011224
 8007884:	080116b4 	.word	0x080116b4
 8007888:	08011268 	.word	0x08011268
 800788c:	200083a8 	.word	0x200083a8
 8007890:	200083b8 	.word	0x200083b8
 8007894:	080116e4 	.word	0x080116e4
 8007898:	0801170c 	.word	0x0801170c

0800789c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80078a2:	4b2d      	ldr	r3, [pc, #180]	; (8007958 <tcp_fasttmr+0xbc>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	3301      	adds	r3, #1
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	4b2b      	ldr	r3, [pc, #172]	; (8007958 <tcp_fasttmr+0xbc>)
 80078ac:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80078ae:	4b2b      	ldr	r3, [pc, #172]	; (800795c <tcp_fasttmr+0xc0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80078b4:	e048      	b.n	8007948 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	7f9a      	ldrb	r2, [r3, #30]
 80078ba:	4b27      	ldr	r3, [pc, #156]	; (8007958 <tcp_fasttmr+0xbc>)
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d03f      	beq.n	8007942 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80078c2:	4b25      	ldr	r3, [pc, #148]	; (8007958 <tcp_fasttmr+0xbc>)
 80078c4:	781a      	ldrb	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	8b5b      	ldrh	r3, [r3, #26]
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d010      	beq.n	80078f8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	8b5b      	ldrh	r3, [r3, #26]
 80078da:	f043 0302 	orr.w	r3, r3, #2
 80078de:	b29a      	uxth	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f003 facf 	bl	800ae88 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	8b5b      	ldrh	r3, [r3, #26]
 80078ee:	f023 0303 	bic.w	r3, r3, #3
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	8b5b      	ldrh	r3, [r3, #26]
 80078fc:	f003 0308 	and.w	r3, r3, #8
 8007900:	2b00      	cmp	r3, #0
 8007902:	d009      	beq.n	8007918 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	8b5b      	ldrh	r3, [r3, #26]
 8007908:	f023 0308 	bic.w	r3, r3, #8
 800790c:	b29a      	uxth	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7ff fa78 	bl	8006e08 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007926:	4b0e      	ldr	r3, [pc, #56]	; (8007960 <tcp_fasttmr+0xc4>)
 8007928:	2200      	movs	r2, #0
 800792a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f819 	bl	8007964 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007932:	4b0b      	ldr	r3, [pc, #44]	; (8007960 <tcp_fasttmr+0xc4>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d000      	beq.n	800793c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800793a:	e7b8      	b.n	80078ae <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	607b      	str	r3, [r7, #4]
 8007940:	e002      	b.n	8007948 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1b3      	bne.n	80078b6 <tcp_fasttmr+0x1a>
    }
  }
}
 800794e:	bf00      	nop
 8007950:	bf00      	nop
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	200083be 	.word	0x200083be
 800795c:	200083b4 	.word	0x200083b4
 8007960:	200083bc 	.word	0x200083bc

08007964 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007964:	b590      	push	{r4, r7, lr}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d109      	bne.n	8007986 <tcp_process_refused_data+0x22>
 8007972:	4b37      	ldr	r3, [pc, #220]	; (8007a50 <tcp_process_refused_data+0xec>)
 8007974:	f240 6209 	movw	r2, #1545	; 0x609
 8007978:	4936      	ldr	r1, [pc, #216]	; (8007a54 <tcp_process_refused_data+0xf0>)
 800797a:	4837      	ldr	r0, [pc, #220]	; (8007a58 <tcp_process_refused_data+0xf4>)
 800797c:	f007 fc14 	bl	800f1a8 <iprintf>
 8007980:	f06f 030f 	mvn.w	r3, #15
 8007984:	e060      	b.n	8007a48 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800798a:	7b5b      	ldrb	r3, [r3, #13]
 800798c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007992:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00b      	beq.n	80079bc <tcp_process_refused_data+0x58>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6918      	ldr	r0, [r3, #16]
 80079ae:	2300      	movs	r3, #0
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	6879      	ldr	r1, [r7, #4]
 80079b4:	47a0      	blx	r4
 80079b6:	4603      	mov	r3, r0
 80079b8:	73fb      	strb	r3, [r7, #15]
 80079ba:	e007      	b.n	80079cc <tcp_process_refused_data+0x68>
 80079bc:	2300      	movs	r3, #0
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	6879      	ldr	r1, [r7, #4]
 80079c2:	2000      	movs	r0, #0
 80079c4:	f000 f8a4 	bl	8007b10 <tcp_recv_null>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80079cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d12a      	bne.n	8007a2a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	f003 0320 	and.w	r3, r3, #32
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d033      	beq.n	8007a46 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80079e6:	d005      	beq.n	80079f4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ec:	3301      	adds	r3, #1
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00b      	beq.n	8007a16 <tcp_process_refused_data+0xb2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6918      	ldr	r0, [r3, #16]
 8007a08:	2300      	movs	r3, #0
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	47a0      	blx	r4
 8007a10:	4603      	mov	r3, r0
 8007a12:	73fb      	strb	r3, [r7, #15]
 8007a14:	e001      	b.n	8007a1a <tcp_process_refused_data+0xb6>
 8007a16:	2300      	movs	r3, #0
 8007a18:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a1e:	f113 0f0d 	cmn.w	r3, #13
 8007a22:	d110      	bne.n	8007a46 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007a24:	f06f 030c 	mvn.w	r3, #12
 8007a28:	e00e      	b.n	8007a48 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a2e:	f113 0f0d 	cmn.w	r3, #13
 8007a32:	d102      	bne.n	8007a3a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007a34:	f06f 030c 	mvn.w	r3, #12
 8007a38:	e006      	b.n	8007a48 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007a40:	f06f 0304 	mvn.w	r3, #4
 8007a44:	e000      	b.n	8007a48 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd90      	pop	{r4, r7, pc}
 8007a50:	08011224 	.word	0x08011224
 8007a54:	08011734 	.word	0x08011734
 8007a58:	08011268 	.word	0x08011268

08007a5c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007a64:	e007      	b.n	8007a76 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f80a 	bl	8007a86 <tcp_seg_free>
    seg = next;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1f4      	bne.n	8007a66 <tcp_segs_free+0xa>
  }
}
 8007a7c:	bf00      	nop
 8007a7e:	bf00      	nop
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b082      	sub	sp, #8
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00c      	beq.n	8007aae <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d004      	beq.n	8007aa6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fe fac5 	bl	8006030 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007aa6:	6879      	ldr	r1, [r7, #4]
 8007aa8:	2004      	movs	r0, #4
 8007aaa:	f7fd fc35 	bl	8005318 <memp_free>
  }
}
 8007aae:	bf00      	nop
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
	...

08007ab8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d106      	bne.n	8007ad4 <tcp_seg_copy+0x1c>
 8007ac6:	4b0f      	ldr	r3, [pc, #60]	; (8007b04 <tcp_seg_copy+0x4c>)
 8007ac8:	f240 6282 	movw	r2, #1666	; 0x682
 8007acc:	490e      	ldr	r1, [pc, #56]	; (8007b08 <tcp_seg_copy+0x50>)
 8007ace:	480f      	ldr	r0, [pc, #60]	; (8007b0c <tcp_seg_copy+0x54>)
 8007ad0:	f007 fb6a 	bl	800f1a8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007ad4:	2004      	movs	r0, #4
 8007ad6:	f7fd fbaf 	bl	8005238 <memp_malloc>
 8007ada:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d101      	bne.n	8007ae6 <tcp_seg_copy+0x2e>
    return NULL;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e00a      	b.n	8007afc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007ae6:	2210      	movs	r2, #16
 8007ae8:	6879      	ldr	r1, [r7, #4]
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f007 fb2c 	bl	800f148 <memcpy>
  pbuf_ref(cseg->p);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fe fb3b 	bl	8006170 <pbuf_ref>
  return cseg;
 8007afa:	68fb      	ldr	r3, [r7, #12]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	08011224 	.word	0x08011224
 8007b08:	08011778 	.word	0x08011778
 8007b0c:	08011268 	.word	0x08011268

08007b10 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
 8007b1c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d109      	bne.n	8007b38 <tcp_recv_null+0x28>
 8007b24:	4b12      	ldr	r3, [pc, #72]	; (8007b70 <tcp_recv_null+0x60>)
 8007b26:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007b2a:	4912      	ldr	r1, [pc, #72]	; (8007b74 <tcp_recv_null+0x64>)
 8007b2c:	4812      	ldr	r0, [pc, #72]	; (8007b78 <tcp_recv_null+0x68>)
 8007b2e:	f007 fb3b 	bl	800f1a8 <iprintf>
 8007b32:	f06f 030f 	mvn.w	r3, #15
 8007b36:	e016      	b.n	8007b66 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d009      	beq.n	8007b52 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	891b      	ldrh	r3, [r3, #8]
 8007b42:	4619      	mov	r1, r3
 8007b44:	68b8      	ldr	r0, [r7, #8]
 8007b46:	f7ff fb19 	bl	800717c <tcp_recved>
    pbuf_free(p);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7fe fa70 	bl	8006030 <pbuf_free>
 8007b50:	e008      	b.n	8007b64 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007b52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d104      	bne.n	8007b64 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007b5a:	68b8      	ldr	r0, [r7, #8]
 8007b5c:	f7ff f9be 	bl	8006edc <tcp_close>
 8007b60:	4603      	mov	r3, r0
 8007b62:	e000      	b.n	8007b66 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	08011224 	.word	0x08011224
 8007b74:	08011794 	.word	0x08011794
 8007b78:	08011268 	.word	0x08011268

08007b7c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	4603      	mov	r3, r0
 8007b84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	db01      	blt.n	8007b92 <tcp_kill_prio+0x16>
 8007b8e:	79fb      	ldrb	r3, [r7, #7]
 8007b90:	e000      	b.n	8007b94 <tcp_kill_prio+0x18>
 8007b92:	237f      	movs	r3, #127	; 0x7f
 8007b94:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007b96:	7afb      	ldrb	r3, [r7, #11]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d034      	beq.n	8007c06 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007b9c:	7afb      	ldrb	r3, [r7, #11]
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007baa:	4b19      	ldr	r3, [pc, #100]	; (8007c10 <tcp_kill_prio+0x94>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	617b      	str	r3, [r7, #20]
 8007bb0:	e01f      	b.n	8007bf2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	7d5b      	ldrb	r3, [r3, #21]
 8007bb6:	7afa      	ldrb	r2, [r7, #11]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d80c      	bhi.n	8007bd6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007bc0:	7afa      	ldrb	r2, [r7, #11]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d112      	bne.n	8007bec <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007bc6:	4b13      	ldr	r3, [pc, #76]	; (8007c14 <tcp_kill_prio+0x98>)
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d80a      	bhi.n	8007bec <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007bd6:	4b0f      	ldr	r3, [pc, #60]	; (8007c14 <tcp_kill_prio+0x98>)
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	7d5b      	ldrb	r3, [r3, #21]
 8007bea:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	617b      	str	r3, [r7, #20]
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1dc      	bne.n	8007bb2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d004      	beq.n	8007c08 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007bfe:	6938      	ldr	r0, [r7, #16]
 8007c00:	f7ff fa56 	bl	80070b0 <tcp_abort>
 8007c04:	e000      	b.n	8007c08 <tcp_kill_prio+0x8c>
    return;
 8007c06:	bf00      	nop
  }
}
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	200083b4 	.word	0x200083b4
 8007c14:	200083a8 	.word	0x200083a8

08007c18 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	4603      	mov	r3, r0
 8007c20:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007c22:	79fb      	ldrb	r3, [r7, #7]
 8007c24:	2b08      	cmp	r3, #8
 8007c26:	d009      	beq.n	8007c3c <tcp_kill_state+0x24>
 8007c28:	79fb      	ldrb	r3, [r7, #7]
 8007c2a:	2b09      	cmp	r3, #9
 8007c2c:	d006      	beq.n	8007c3c <tcp_kill_state+0x24>
 8007c2e:	4b1a      	ldr	r3, [pc, #104]	; (8007c98 <tcp_kill_state+0x80>)
 8007c30:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007c34:	4919      	ldr	r1, [pc, #100]	; (8007c9c <tcp_kill_state+0x84>)
 8007c36:	481a      	ldr	r0, [pc, #104]	; (8007ca0 <tcp_kill_state+0x88>)
 8007c38:	f007 fab6 	bl	800f1a8 <iprintf>

  inactivity = 0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007c40:	2300      	movs	r3, #0
 8007c42:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c44:	4b17      	ldr	r3, [pc, #92]	; (8007ca4 <tcp_kill_state+0x8c>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	617b      	str	r3, [r7, #20]
 8007c4a:	e017      	b.n	8007c7c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	7d1b      	ldrb	r3, [r3, #20]
 8007c50:	79fa      	ldrb	r2, [r7, #7]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d10f      	bne.n	8007c76 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007c56:	4b14      	ldr	r3, [pc, #80]	; (8007ca8 <tcp_kill_state+0x90>)
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d807      	bhi.n	8007c76 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007c66:	4b10      	ldr	r3, [pc, #64]	; (8007ca8 <tcp_kill_state+0x90>)
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	617b      	str	r3, [r7, #20]
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1e4      	bne.n	8007c4c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d003      	beq.n	8007c90 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007c88:	2100      	movs	r1, #0
 8007c8a:	6938      	ldr	r0, [r7, #16]
 8007c8c:	f7ff f952 	bl	8006f34 <tcp_abandon>
  }
}
 8007c90:	bf00      	nop
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	08011224 	.word	0x08011224
 8007c9c:	080117b0 	.word	0x080117b0
 8007ca0:	08011268 	.word	0x08011268
 8007ca4:	200083b4 	.word	0x200083b4
 8007ca8:	200083a8 	.word	0x200083a8

08007cac <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007cba:	4b12      	ldr	r3, [pc, #72]	; (8007d04 <tcp_kill_timewait+0x58>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	e012      	b.n	8007ce8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007cc2:	4b11      	ldr	r3, [pc, #68]	; (8007d08 <tcp_kill_timewait+0x5c>)
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d807      	bhi.n	8007ce2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007cd2:	4b0d      	ldr	r3, [pc, #52]	; (8007d08 <tcp_kill_timewait+0x5c>)
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e9      	bne.n	8007cc2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d002      	beq.n	8007cfa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007cf4:	68b8      	ldr	r0, [r7, #8]
 8007cf6:	f7ff f9db 	bl	80070b0 <tcp_abort>
  }
}
 8007cfa:	bf00      	nop
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	200083b8 	.word	0x200083b8
 8007d08:	200083a8 	.word	0x200083a8

08007d0c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007d12:	4b10      	ldr	r3, [pc, #64]	; (8007d54 <tcp_handle_closepend+0x48>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007d18:	e014      	b.n	8007d44 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	8b5b      	ldrh	r3, [r3, #26]
 8007d24:	f003 0308 	and.w	r3, r3, #8
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d009      	beq.n	8007d40 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	8b5b      	ldrh	r3, [r3, #26]
 8007d30:	f023 0308 	bic.w	r3, r3, #8
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7ff f864 	bl	8006e08 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1e7      	bne.n	8007d1a <tcp_handle_closepend+0xe>
  }
}
 8007d4a:	bf00      	nop
 8007d4c:	bf00      	nop
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	200083b4 	.word	0x200083b4

08007d58 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	4603      	mov	r3, r0
 8007d60:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007d62:	2002      	movs	r0, #2
 8007d64:	f7fd fa68 	bl	8005238 <memp_malloc>
 8007d68:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d126      	bne.n	8007dbe <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007d70:	f7ff ffcc 	bl	8007d0c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007d74:	f7ff ff9a 	bl	8007cac <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007d78:	2002      	movs	r0, #2
 8007d7a:	f7fd fa5d 	bl	8005238 <memp_malloc>
 8007d7e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d11b      	bne.n	8007dbe <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007d86:	2009      	movs	r0, #9
 8007d88:	f7ff ff46 	bl	8007c18 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007d8c:	2002      	movs	r0, #2
 8007d8e:	f7fd fa53 	bl	8005238 <memp_malloc>
 8007d92:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d111      	bne.n	8007dbe <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007d9a:	2008      	movs	r0, #8
 8007d9c:	f7ff ff3c 	bl	8007c18 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007da0:	2002      	movs	r0, #2
 8007da2:	f7fd fa49 	bl	8005238 <memp_malloc>
 8007da6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d107      	bne.n	8007dbe <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007dae:	79fb      	ldrb	r3, [r7, #7]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7ff fee3 	bl	8007b7c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007db6:	2002      	movs	r0, #2
 8007db8:	f7fd fa3e 	bl	8005238 <memp_malloc>
 8007dbc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d03f      	beq.n	8007e44 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007dc4:	229c      	movs	r2, #156	; 0x9c
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f007 f9e5 	bl	800f198 <memset>
    pcb->prio = prio;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	79fa      	ldrb	r2, [r7, #7]
 8007dd2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007dda:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007de4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	22ff      	movs	r2, #255	; 0xff
 8007df2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007dfa:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2206      	movs	r2, #6
 8007e00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2206      	movs	r2, #6
 8007e08:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e10:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007e1a:	4b0d      	ldr	r3, [pc, #52]	; (8007e50 <tcp_alloc+0xf8>)
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007e22:	4b0c      	ldr	r3, [pc, #48]	; (8007e54 <tcp_alloc+0xfc>)
 8007e24:	781a      	ldrb	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007e30:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	4a08      	ldr	r2, [pc, #32]	; (8007e58 <tcp_alloc+0x100>)
 8007e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4a07      	ldr	r2, [pc, #28]	; (8007e5c <tcp_alloc+0x104>)
 8007e40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007e44:	68fb      	ldr	r3, [r7, #12]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	200083a8 	.word	0x200083a8
 8007e54:	200083be 	.word	0x200083be
 8007e58:	08007b11 	.word	0x08007b11
 8007e5c:	006ddd00 	.word	0x006ddd00

08007e60 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d107      	bne.n	8007e7e <tcp_pcb_purge+0x1e>
 8007e6e:	4b21      	ldr	r3, [pc, #132]	; (8007ef4 <tcp_pcb_purge+0x94>)
 8007e70:	f640 0251 	movw	r2, #2129	; 0x851
 8007e74:	4920      	ldr	r1, [pc, #128]	; (8007ef8 <tcp_pcb_purge+0x98>)
 8007e76:	4821      	ldr	r0, [pc, #132]	; (8007efc <tcp_pcb_purge+0x9c>)
 8007e78:	f007 f996 	bl	800f1a8 <iprintf>
 8007e7c:	e037      	b.n	8007eee <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	7d1b      	ldrb	r3, [r3, #20]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d033      	beq.n	8007eee <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007e8a:	2b0a      	cmp	r3, #10
 8007e8c:	d02f      	beq.n	8007eee <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d02b      	beq.n	8007eee <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d007      	beq.n	8007eae <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fe f8c4 	bl	8006030 <pbuf_free>
      pcb->refused_data = NULL;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d002      	beq.n	8007ebc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f986 	bl	80081c8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ec2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7ff fdc7 	bl	8007a5c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7ff fdc2 	bl	8007a5c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	66da      	str	r2, [r3, #108]	; 0x6c
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	08011224 	.word	0x08011224
 8007ef8:	08011870 	.word	0x08011870
 8007efc:	08011268 	.word	0x08011268

08007f00 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d106      	bne.n	8007f1e <tcp_pcb_remove+0x1e>
 8007f10:	4b3e      	ldr	r3, [pc, #248]	; (800800c <tcp_pcb_remove+0x10c>)
 8007f12:	f640 0283 	movw	r2, #2179	; 0x883
 8007f16:	493e      	ldr	r1, [pc, #248]	; (8008010 <tcp_pcb_remove+0x110>)
 8007f18:	483e      	ldr	r0, [pc, #248]	; (8008014 <tcp_pcb_remove+0x114>)
 8007f1a:	f007 f945 	bl	800f1a8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d106      	bne.n	8007f32 <tcp_pcb_remove+0x32>
 8007f24:	4b39      	ldr	r3, [pc, #228]	; (800800c <tcp_pcb_remove+0x10c>)
 8007f26:	f640 0284 	movw	r2, #2180	; 0x884
 8007f2a:	493b      	ldr	r1, [pc, #236]	; (8008018 <tcp_pcb_remove+0x118>)
 8007f2c:	4839      	ldr	r0, [pc, #228]	; (8008014 <tcp_pcb_remove+0x114>)
 8007f2e:	f007 f93b 	bl	800f1a8 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d105      	bne.n	8007f48 <tcp_pcb_remove+0x48>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68da      	ldr	r2, [r3, #12]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	e013      	b.n	8007f70 <tcp_pcb_remove+0x70>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	60fb      	str	r3, [r7, #12]
 8007f4e:	e00c      	b.n	8007f6a <tcp_pcb_remove+0x6a>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d104      	bne.n	8007f64 <tcp_pcb_remove+0x64>
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	60da      	str	r2, [r3, #12]
 8007f62:	e005      	b.n	8007f70 <tcp_pcb_remove+0x70>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	60fb      	str	r3, [r7, #12]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1ef      	bne.n	8007f50 <tcp_pcb_remove+0x50>
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	2200      	movs	r2, #0
 8007f74:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007f76:	6838      	ldr	r0, [r7, #0]
 8007f78:	f7ff ff72 	bl	8007e60 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	7d1b      	ldrb	r3, [r3, #20]
 8007f80:	2b0a      	cmp	r3, #10
 8007f82:	d013      	beq.n	8007fac <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d00f      	beq.n	8007fac <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	8b5b      	ldrh	r3, [r3, #26]
 8007f90:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d009      	beq.n	8007fac <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	8b5b      	ldrh	r3, [r3, #26]
 8007f9c:	f043 0302 	orr.w	r3, r3, #2
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007fa6:	6838      	ldr	r0, [r7, #0]
 8007fa8:	f002 ff6e 	bl	800ae88 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	7d1b      	ldrb	r3, [r3, #20]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d020      	beq.n	8007ff6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d006      	beq.n	8007fca <tcp_pcb_remove+0xca>
 8007fbc:	4b13      	ldr	r3, [pc, #76]	; (800800c <tcp_pcb_remove+0x10c>)
 8007fbe:	f640 0293 	movw	r2, #2195	; 0x893
 8007fc2:	4916      	ldr	r1, [pc, #88]	; (800801c <tcp_pcb_remove+0x11c>)
 8007fc4:	4813      	ldr	r0, [pc, #76]	; (8008014 <tcp_pcb_remove+0x114>)
 8007fc6:	f007 f8ef 	bl	800f1a8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d006      	beq.n	8007fe0 <tcp_pcb_remove+0xe0>
 8007fd2:	4b0e      	ldr	r3, [pc, #56]	; (800800c <tcp_pcb_remove+0x10c>)
 8007fd4:	f640 0294 	movw	r2, #2196	; 0x894
 8007fd8:	4911      	ldr	r1, [pc, #68]	; (8008020 <tcp_pcb_remove+0x120>)
 8007fda:	480e      	ldr	r0, [pc, #56]	; (8008014 <tcp_pcb_remove+0x114>)
 8007fdc:	f007 f8e4 	bl	800f1a8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d006      	beq.n	8007ff6 <tcp_pcb_remove+0xf6>
 8007fe8:	4b08      	ldr	r3, [pc, #32]	; (800800c <tcp_pcb_remove+0x10c>)
 8007fea:	f640 0296 	movw	r2, #2198	; 0x896
 8007fee:	490d      	ldr	r1, [pc, #52]	; (8008024 <tcp_pcb_remove+0x124>)
 8007ff0:	4808      	ldr	r0, [pc, #32]	; (8008014 <tcp_pcb_remove+0x114>)
 8007ff2:	f007 f8d9 	bl	800f1a8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	2200      	movs	r2, #0
 8008000:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008002:	bf00      	nop
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	08011224 	.word	0x08011224
 8008010:	0801188c 	.word	0x0801188c
 8008014:	08011268 	.word	0x08011268
 8008018:	080118a8 	.word	0x080118a8
 800801c:	080118c8 	.word	0x080118c8
 8008020:	080118e0 	.word	0x080118e0
 8008024:	080118fc 	.word	0x080118fc

08008028 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d106      	bne.n	8008044 <tcp_next_iss+0x1c>
 8008036:	4b0a      	ldr	r3, [pc, #40]	; (8008060 <tcp_next_iss+0x38>)
 8008038:	f640 02af 	movw	r2, #2223	; 0x8af
 800803c:	4909      	ldr	r1, [pc, #36]	; (8008064 <tcp_next_iss+0x3c>)
 800803e:	480a      	ldr	r0, [pc, #40]	; (8008068 <tcp_next_iss+0x40>)
 8008040:	f007 f8b2 	bl	800f1a8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008044:	4b09      	ldr	r3, [pc, #36]	; (800806c <tcp_next_iss+0x44>)
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	4b09      	ldr	r3, [pc, #36]	; (8008070 <tcp_next_iss+0x48>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4413      	add	r3, r2
 800804e:	4a07      	ldr	r2, [pc, #28]	; (800806c <tcp_next_iss+0x44>)
 8008050:	6013      	str	r3, [r2, #0]
  return iss;
 8008052:	4b06      	ldr	r3, [pc, #24]	; (800806c <tcp_next_iss+0x44>)
 8008054:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	08011224 	.word	0x08011224
 8008064:	08011914 	.word	0x08011914
 8008068:	08011268 	.word	0x08011268
 800806c:	20000024 	.word	0x20000024
 8008070:	200083a8 	.word	0x200083a8

08008074 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	4603      	mov	r3, r0
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
 8008080:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d106      	bne.n	8008096 <tcp_eff_send_mss_netif+0x22>
 8008088:	4b14      	ldr	r3, [pc, #80]	; (80080dc <tcp_eff_send_mss_netif+0x68>)
 800808a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800808e:	4914      	ldr	r1, [pc, #80]	; (80080e0 <tcp_eff_send_mss_netif+0x6c>)
 8008090:	4814      	ldr	r0, [pc, #80]	; (80080e4 <tcp_eff_send_mss_netif+0x70>)
 8008092:	f007 f889 	bl	800f1a8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d101      	bne.n	80080a0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800809c:	89fb      	ldrh	r3, [r7, #14]
 800809e:	e019      	b.n	80080d4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80080a4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80080a6:	8afb      	ldrh	r3, [r7, #22]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d012      	beq.n	80080d2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80080ac:	2328      	movs	r3, #40	; 0x28
 80080ae:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80080b0:	8afa      	ldrh	r2, [r7, #22]
 80080b2:	8abb      	ldrh	r3, [r7, #20]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d904      	bls.n	80080c2 <tcp_eff_send_mss_netif+0x4e>
 80080b8:	8afa      	ldrh	r2, [r7, #22]
 80080ba:	8abb      	ldrh	r3, [r7, #20]
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	b29b      	uxth	r3, r3
 80080c0:	e000      	b.n	80080c4 <tcp_eff_send_mss_netif+0x50>
 80080c2:	2300      	movs	r3, #0
 80080c4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80080c6:	8a7a      	ldrh	r2, [r7, #18]
 80080c8:	89fb      	ldrh	r3, [r7, #14]
 80080ca:	4293      	cmp	r3, r2
 80080cc:	bf28      	it	cs
 80080ce:	4613      	movcs	r3, r2
 80080d0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80080d2:	89fb      	ldrh	r3, [r7, #14]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3718      	adds	r7, #24
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	08011224 	.word	0x08011224
 80080e0:	08011930 	.word	0x08011930
 80080e4:	08011268 	.word	0x08011268

080080e8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d119      	bne.n	8008130 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80080fc:	4b10      	ldr	r3, [pc, #64]	; (8008140 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80080fe:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008102:	4910      	ldr	r1, [pc, #64]	; (8008144 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008104:	4810      	ldr	r0, [pc, #64]	; (8008148 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008106:	f007 f84f 	bl	800f1a8 <iprintf>

  while (pcb != NULL) {
 800810a:	e011      	b.n	8008130 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	429a      	cmp	r2, r3
 8008116:	d108      	bne.n	800812a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f7fe ffc6 	bl	80070b0 <tcp_abort>
      pcb = next;
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	60fb      	str	r3, [r7, #12]
 8008128:	e002      	b.n	8008130 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1ea      	bne.n	800810c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008136:	bf00      	nop
 8008138:	bf00      	nop
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	08011224 	.word	0x08011224
 8008144:	08011958 	.word	0x08011958
 8008148:	08011268 	.word	0x08011268

0800814c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d02a      	beq.n	80081b2 <tcp_netif_ip_addr_changed+0x66>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d026      	beq.n	80081b2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008164:	4b15      	ldr	r3, [pc, #84]	; (80081bc <tcp_netif_ip_addr_changed+0x70>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7ff ffbc 	bl	80080e8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008170:	4b13      	ldr	r3, [pc, #76]	; (80081c0 <tcp_netif_ip_addr_changed+0x74>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7ff ffb6 	bl	80080e8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d017      	beq.n	80081b2 <tcp_netif_ip_addr_changed+0x66>
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d013      	beq.n	80081b2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800818a:	4b0e      	ldr	r3, [pc, #56]	; (80081c4 <tcp_netif_ip_addr_changed+0x78>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	e00c      	b.n	80081ac <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	429a      	cmp	r2, r3
 800819c:	d103      	bne.n	80081a6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	60fb      	str	r3, [r7, #12]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1ef      	bne.n	8008192 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80081b2:	bf00      	nop
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	200083b4 	.word	0x200083b4
 80081c0:	200083ac 	.word	0x200083ac
 80081c4:	200083b0 	.word	0x200083b0

080081c8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d007      	beq.n	80081e8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081dc:	4618      	mov	r0, r3
 80081de:	f7ff fc3d 	bl	8007a5c <tcp_segs_free>
    pcb->ooseq = NULL;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80081e8:	bf00      	nop
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80081f0:	b590      	push	{r4, r7, lr}
 80081f2:	b08d      	sub	sp, #52	; 0x34
 80081f4:	af04      	add	r7, sp, #16
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d105      	bne.n	800820c <tcp_input+0x1c>
 8008200:	4b9b      	ldr	r3, [pc, #620]	; (8008470 <tcp_input+0x280>)
 8008202:	2283      	movs	r2, #131	; 0x83
 8008204:	499b      	ldr	r1, [pc, #620]	; (8008474 <tcp_input+0x284>)
 8008206:	489c      	ldr	r0, [pc, #624]	; (8008478 <tcp_input+0x288>)
 8008208:	f006 ffce 	bl	800f1a8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	4a9a      	ldr	r2, [pc, #616]	; (800847c <tcp_input+0x28c>)
 8008212:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	895b      	ldrh	r3, [r3, #10]
 8008218:	2b13      	cmp	r3, #19
 800821a:	f240 83d1 	bls.w	80089c0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800821e:	4b98      	ldr	r3, [pc, #608]	; (8008480 <tcp_input+0x290>)
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	4a97      	ldr	r2, [pc, #604]	; (8008480 <tcp_input+0x290>)
 8008224:	6812      	ldr	r2, [r2, #0]
 8008226:	4611      	mov	r1, r2
 8008228:	4618      	mov	r0, r3
 800822a:	f005 ff73 	bl	800e114 <ip4_addr_isbroadcast_u32>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	f040 83c7 	bne.w	80089c4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008236:	4b92      	ldr	r3, [pc, #584]	; (8008480 <tcp_input+0x290>)
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800823e:	2be0      	cmp	r3, #224	; 0xe0
 8008240:	f000 83c0 	beq.w	80089c4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008244:	4b8d      	ldr	r3, [pc, #564]	; (800847c <tcp_input+0x28c>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	899b      	ldrh	r3, [r3, #12]
 800824a:	b29b      	uxth	r3, r3
 800824c:	4618      	mov	r0, r3
 800824e:	f7fc fb0d 	bl	800486c <lwip_htons>
 8008252:	4603      	mov	r3, r0
 8008254:	0b1b      	lsrs	r3, r3, #12
 8008256:	b29b      	uxth	r3, r3
 8008258:	b2db      	uxtb	r3, r3
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800825e:	7cbb      	ldrb	r3, [r7, #18]
 8008260:	2b13      	cmp	r3, #19
 8008262:	f240 83b1 	bls.w	80089c8 <tcp_input+0x7d8>
 8008266:	7cbb      	ldrb	r3, [r7, #18]
 8008268:	b29a      	uxth	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	891b      	ldrh	r3, [r3, #8]
 800826e:	429a      	cmp	r2, r3
 8008270:	f200 83aa 	bhi.w	80089c8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008274:	7cbb      	ldrb	r3, [r7, #18]
 8008276:	b29b      	uxth	r3, r3
 8008278:	3b14      	subs	r3, #20
 800827a:	b29a      	uxth	r2, r3
 800827c:	4b81      	ldr	r3, [pc, #516]	; (8008484 <tcp_input+0x294>)
 800827e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008280:	4b81      	ldr	r3, [pc, #516]	; (8008488 <tcp_input+0x298>)
 8008282:	2200      	movs	r2, #0
 8008284:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	895a      	ldrh	r2, [r3, #10]
 800828a:	7cbb      	ldrb	r3, [r7, #18]
 800828c:	b29b      	uxth	r3, r3
 800828e:	429a      	cmp	r2, r3
 8008290:	d309      	bcc.n	80082a6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008292:	4b7c      	ldr	r3, [pc, #496]	; (8008484 <tcp_input+0x294>)
 8008294:	881a      	ldrh	r2, [r3, #0]
 8008296:	4b7d      	ldr	r3, [pc, #500]	; (800848c <tcp_input+0x29c>)
 8008298:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800829a:	7cbb      	ldrb	r3, [r7, #18]
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7fd fe2e 	bl	8005f00 <pbuf_remove_header>
 80082a4:	e04e      	b.n	8008344 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d105      	bne.n	80082ba <tcp_input+0xca>
 80082ae:	4b70      	ldr	r3, [pc, #448]	; (8008470 <tcp_input+0x280>)
 80082b0:	22c2      	movs	r2, #194	; 0xc2
 80082b2:	4977      	ldr	r1, [pc, #476]	; (8008490 <tcp_input+0x2a0>)
 80082b4:	4870      	ldr	r0, [pc, #448]	; (8008478 <tcp_input+0x288>)
 80082b6:	f006 ff77 	bl	800f1a8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80082ba:	2114      	movs	r1, #20
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7fd fe1f 	bl	8005f00 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	895a      	ldrh	r2, [r3, #10]
 80082c6:	4b71      	ldr	r3, [pc, #452]	; (800848c <tcp_input+0x29c>)
 80082c8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80082ca:	4b6e      	ldr	r3, [pc, #440]	; (8008484 <tcp_input+0x294>)
 80082cc:	881a      	ldrh	r2, [r3, #0]
 80082ce:	4b6f      	ldr	r3, [pc, #444]	; (800848c <tcp_input+0x29c>)
 80082d0:	881b      	ldrh	r3, [r3, #0]
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80082d6:	4b6d      	ldr	r3, [pc, #436]	; (800848c <tcp_input+0x29c>)
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	4619      	mov	r1, r3
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7fd fe0f 	bl	8005f00 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	895b      	ldrh	r3, [r3, #10]
 80082e8:	8a3a      	ldrh	r2, [r7, #16]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	f200 836e 	bhi.w	80089cc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	4a64      	ldr	r2, [pc, #400]	; (8008488 <tcp_input+0x298>)
 80082f8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	8a3a      	ldrh	r2, [r7, #16]
 8008300:	4611      	mov	r1, r2
 8008302:	4618      	mov	r0, r3
 8008304:	f7fd fdfc 	bl	8005f00 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	891a      	ldrh	r2, [r3, #8]
 800830c:	8a3b      	ldrh	r3, [r7, #16]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	b29a      	uxth	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	895b      	ldrh	r3, [r3, #10]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d005      	beq.n	800832a <tcp_input+0x13a>
 800831e:	4b54      	ldr	r3, [pc, #336]	; (8008470 <tcp_input+0x280>)
 8008320:	22df      	movs	r2, #223	; 0xdf
 8008322:	495c      	ldr	r1, [pc, #368]	; (8008494 <tcp_input+0x2a4>)
 8008324:	4854      	ldr	r0, [pc, #336]	; (8008478 <tcp_input+0x288>)
 8008326:	f006 ff3f 	bl	800f1a8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	891a      	ldrh	r2, [r3, #8]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	891b      	ldrh	r3, [r3, #8]
 8008334:	429a      	cmp	r2, r3
 8008336:	d005      	beq.n	8008344 <tcp_input+0x154>
 8008338:	4b4d      	ldr	r3, [pc, #308]	; (8008470 <tcp_input+0x280>)
 800833a:	22e0      	movs	r2, #224	; 0xe0
 800833c:	4956      	ldr	r1, [pc, #344]	; (8008498 <tcp_input+0x2a8>)
 800833e:	484e      	ldr	r0, [pc, #312]	; (8008478 <tcp_input+0x288>)
 8008340:	f006 ff32 	bl	800f1a8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008344:	4b4d      	ldr	r3, [pc, #308]	; (800847c <tcp_input+0x28c>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	b29b      	uxth	r3, r3
 800834c:	4a4b      	ldr	r2, [pc, #300]	; (800847c <tcp_input+0x28c>)
 800834e:	6814      	ldr	r4, [r2, #0]
 8008350:	4618      	mov	r0, r3
 8008352:	f7fc fa8b 	bl	800486c <lwip_htons>
 8008356:	4603      	mov	r3, r0
 8008358:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800835a:	4b48      	ldr	r3, [pc, #288]	; (800847c <tcp_input+0x28c>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	885b      	ldrh	r3, [r3, #2]
 8008360:	b29b      	uxth	r3, r3
 8008362:	4a46      	ldr	r2, [pc, #280]	; (800847c <tcp_input+0x28c>)
 8008364:	6814      	ldr	r4, [r2, #0]
 8008366:	4618      	mov	r0, r3
 8008368:	f7fc fa80 	bl	800486c <lwip_htons>
 800836c:	4603      	mov	r3, r0
 800836e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008370:	4b42      	ldr	r3, [pc, #264]	; (800847c <tcp_input+0x28c>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	4a41      	ldr	r2, [pc, #260]	; (800847c <tcp_input+0x28c>)
 8008378:	6814      	ldr	r4, [r2, #0]
 800837a:	4618      	mov	r0, r3
 800837c:	f7fc fa8b 	bl	8004896 <lwip_htonl>
 8008380:	4603      	mov	r3, r0
 8008382:	6063      	str	r3, [r4, #4]
 8008384:	6863      	ldr	r3, [r4, #4]
 8008386:	4a45      	ldr	r2, [pc, #276]	; (800849c <tcp_input+0x2ac>)
 8008388:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800838a:	4b3c      	ldr	r3, [pc, #240]	; (800847c <tcp_input+0x28c>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	4a3a      	ldr	r2, [pc, #232]	; (800847c <tcp_input+0x28c>)
 8008392:	6814      	ldr	r4, [r2, #0]
 8008394:	4618      	mov	r0, r3
 8008396:	f7fc fa7e 	bl	8004896 <lwip_htonl>
 800839a:	4603      	mov	r3, r0
 800839c:	60a3      	str	r3, [r4, #8]
 800839e:	68a3      	ldr	r3, [r4, #8]
 80083a0:	4a3f      	ldr	r2, [pc, #252]	; (80084a0 <tcp_input+0x2b0>)
 80083a2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80083a4:	4b35      	ldr	r3, [pc, #212]	; (800847c <tcp_input+0x28c>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	89db      	ldrh	r3, [r3, #14]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	4a33      	ldr	r2, [pc, #204]	; (800847c <tcp_input+0x28c>)
 80083ae:	6814      	ldr	r4, [r2, #0]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7fc fa5b 	bl	800486c <lwip_htons>
 80083b6:	4603      	mov	r3, r0
 80083b8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80083ba:	4b30      	ldr	r3, [pc, #192]	; (800847c <tcp_input+0x28c>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	899b      	ldrh	r3, [r3, #12]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fc fa52 	bl	800486c <lwip_htons>
 80083c8:	4603      	mov	r3, r0
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	4b34      	ldr	r3, [pc, #208]	; (80084a4 <tcp_input+0x2b4>)
 80083d4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	891a      	ldrh	r2, [r3, #8]
 80083da:	4b33      	ldr	r3, [pc, #204]	; (80084a8 <tcp_input+0x2b8>)
 80083dc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80083de:	4b31      	ldr	r3, [pc, #196]	; (80084a4 <tcp_input+0x2b4>)
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	f003 0303 	and.w	r3, r3, #3
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00c      	beq.n	8008404 <tcp_input+0x214>
    tcplen++;
 80083ea:	4b2f      	ldr	r3, [pc, #188]	; (80084a8 <tcp_input+0x2b8>)
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	3301      	adds	r3, #1
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	4b2d      	ldr	r3, [pc, #180]	; (80084a8 <tcp_input+0x2b8>)
 80083f4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	891a      	ldrh	r2, [r3, #8]
 80083fa:	4b2b      	ldr	r3, [pc, #172]	; (80084a8 <tcp_input+0x2b8>)
 80083fc:	881b      	ldrh	r3, [r3, #0]
 80083fe:	429a      	cmp	r2, r3
 8008400:	f200 82e6 	bhi.w	80089d0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008404:	2300      	movs	r3, #0
 8008406:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008408:	4b28      	ldr	r3, [pc, #160]	; (80084ac <tcp_input+0x2bc>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	61fb      	str	r3, [r7, #28]
 800840e:	e09d      	b.n	800854c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	7d1b      	ldrb	r3, [r3, #20]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d105      	bne.n	8008424 <tcp_input+0x234>
 8008418:	4b15      	ldr	r3, [pc, #84]	; (8008470 <tcp_input+0x280>)
 800841a:	22fb      	movs	r2, #251	; 0xfb
 800841c:	4924      	ldr	r1, [pc, #144]	; (80084b0 <tcp_input+0x2c0>)
 800841e:	4816      	ldr	r0, [pc, #88]	; (8008478 <tcp_input+0x288>)
 8008420:	f006 fec2 	bl	800f1a8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	7d1b      	ldrb	r3, [r3, #20]
 8008428:	2b0a      	cmp	r3, #10
 800842a:	d105      	bne.n	8008438 <tcp_input+0x248>
 800842c:	4b10      	ldr	r3, [pc, #64]	; (8008470 <tcp_input+0x280>)
 800842e:	22fc      	movs	r2, #252	; 0xfc
 8008430:	4920      	ldr	r1, [pc, #128]	; (80084b4 <tcp_input+0x2c4>)
 8008432:	4811      	ldr	r0, [pc, #68]	; (8008478 <tcp_input+0x288>)
 8008434:	f006 feb8 	bl	800f1a8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	7d1b      	ldrb	r3, [r3, #20]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d105      	bne.n	800844c <tcp_input+0x25c>
 8008440:	4b0b      	ldr	r3, [pc, #44]	; (8008470 <tcp_input+0x280>)
 8008442:	22fd      	movs	r2, #253	; 0xfd
 8008444:	491c      	ldr	r1, [pc, #112]	; (80084b8 <tcp_input+0x2c8>)
 8008446:	480c      	ldr	r0, [pc, #48]	; (8008478 <tcp_input+0x288>)
 8008448:	f006 feae 	bl	800f1a8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	7a1b      	ldrb	r3, [r3, #8]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d033      	beq.n	80084bc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	7a1a      	ldrb	r2, [r3, #8]
 8008458:	4b09      	ldr	r3, [pc, #36]	; (8008480 <tcp_input+0x290>)
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008460:	3301      	adds	r3, #1
 8008462:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008464:	429a      	cmp	r2, r3
 8008466:	d029      	beq.n	80084bc <tcp_input+0x2cc>
      prev = pcb;
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	61bb      	str	r3, [r7, #24]
      continue;
 800846c:	e06b      	b.n	8008546 <tcp_input+0x356>
 800846e:	bf00      	nop
 8008470:	0801198c 	.word	0x0801198c
 8008474:	080119c0 	.word	0x080119c0
 8008478:	080119d8 	.word	0x080119d8
 800847c:	200083d0 	.word	0x200083d0
 8008480:	20004dbc 	.word	0x20004dbc
 8008484:	200083d4 	.word	0x200083d4
 8008488:	200083d8 	.word	0x200083d8
 800848c:	200083d6 	.word	0x200083d6
 8008490:	08011a00 	.word	0x08011a00
 8008494:	08011a10 	.word	0x08011a10
 8008498:	08011a1c 	.word	0x08011a1c
 800849c:	200083e0 	.word	0x200083e0
 80084a0:	200083e4 	.word	0x200083e4
 80084a4:	200083ec 	.word	0x200083ec
 80084a8:	200083ea 	.word	0x200083ea
 80084ac:	200083b4 	.word	0x200083b4
 80084b0:	08011a3c 	.word	0x08011a3c
 80084b4:	08011a64 	.word	0x08011a64
 80084b8:	08011a90 	.word	0x08011a90
    }

    if (pcb->remote_port == tcphdr->src &&
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	8b1a      	ldrh	r2, [r3, #24]
 80084c0:	4b72      	ldr	r3, [pc, #456]	; (800868c <tcp_input+0x49c>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d13a      	bne.n	8008542 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	8ada      	ldrh	r2, [r3, #22]
 80084d0:	4b6e      	ldr	r3, [pc, #440]	; (800868c <tcp_input+0x49c>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	885b      	ldrh	r3, [r3, #2]
 80084d6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80084d8:	429a      	cmp	r2, r3
 80084da:	d132      	bne.n	8008542 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	4b6b      	ldr	r3, [pc, #428]	; (8008690 <tcp_input+0x4a0>)
 80084e2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d12c      	bne.n	8008542 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	4b68      	ldr	r3, [pc, #416]	; (8008690 <tcp_input+0x4a0>)
 80084ee:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d126      	bne.n	8008542 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	69fa      	ldr	r2, [r7, #28]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d106      	bne.n	800850c <tcp_input+0x31c>
 80084fe:	4b65      	ldr	r3, [pc, #404]	; (8008694 <tcp_input+0x4a4>)
 8008500:	f240 120d 	movw	r2, #269	; 0x10d
 8008504:	4964      	ldr	r1, [pc, #400]	; (8008698 <tcp_input+0x4a8>)
 8008506:	4865      	ldr	r0, [pc, #404]	; (800869c <tcp_input+0x4ac>)
 8008508:	f006 fe4e 	bl	800f1a8 <iprintf>
      if (prev != NULL) {
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00a      	beq.n	8008528 <tcp_input+0x338>
        prev->next = pcb->next;
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	68da      	ldr	r2, [r3, #12]
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800851a:	4b61      	ldr	r3, [pc, #388]	; (80086a0 <tcp_input+0x4b0>)
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008522:	4a5f      	ldr	r2, [pc, #380]	; (80086a0 <tcp_input+0x4b0>)
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	69fa      	ldr	r2, [r7, #28]
 800852e:	429a      	cmp	r2, r3
 8008530:	d111      	bne.n	8008556 <tcp_input+0x366>
 8008532:	4b58      	ldr	r3, [pc, #352]	; (8008694 <tcp_input+0x4a4>)
 8008534:	f240 1215 	movw	r2, #277	; 0x115
 8008538:	495a      	ldr	r1, [pc, #360]	; (80086a4 <tcp_input+0x4b4>)
 800853a:	4858      	ldr	r0, [pc, #352]	; (800869c <tcp_input+0x4ac>)
 800853c:	f006 fe34 	bl	800f1a8 <iprintf>
      break;
 8008540:	e009      	b.n	8008556 <tcp_input+0x366>
    }
    prev = pcb;
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	61fb      	str	r3, [r7, #28]
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	2b00      	cmp	r3, #0
 8008550:	f47f af5e 	bne.w	8008410 <tcp_input+0x220>
 8008554:	e000      	b.n	8008558 <tcp_input+0x368>
      break;
 8008556:	bf00      	nop
  }

  if (pcb == NULL) {
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	2b00      	cmp	r3, #0
 800855c:	f040 80aa 	bne.w	80086b4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008560:	4b51      	ldr	r3, [pc, #324]	; (80086a8 <tcp_input+0x4b8>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	61fb      	str	r3, [r7, #28]
 8008566:	e03f      	b.n	80085e8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	7d1b      	ldrb	r3, [r3, #20]
 800856c:	2b0a      	cmp	r3, #10
 800856e:	d006      	beq.n	800857e <tcp_input+0x38e>
 8008570:	4b48      	ldr	r3, [pc, #288]	; (8008694 <tcp_input+0x4a4>)
 8008572:	f240 121f 	movw	r2, #287	; 0x11f
 8008576:	494d      	ldr	r1, [pc, #308]	; (80086ac <tcp_input+0x4bc>)
 8008578:	4848      	ldr	r0, [pc, #288]	; (800869c <tcp_input+0x4ac>)
 800857a:	f006 fe15 	bl	800f1a8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	7a1b      	ldrb	r3, [r3, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d009      	beq.n	800859a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	7a1a      	ldrb	r2, [r3, #8]
 800858a:	4b41      	ldr	r3, [pc, #260]	; (8008690 <tcp_input+0x4a0>)
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008592:	3301      	adds	r3, #1
 8008594:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008596:	429a      	cmp	r2, r3
 8008598:	d122      	bne.n	80085e0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	8b1a      	ldrh	r2, [r3, #24]
 800859e:	4b3b      	ldr	r3, [pc, #236]	; (800868c <tcp_input+0x49c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	881b      	ldrh	r3, [r3, #0]
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d11b      	bne.n	80085e2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	8ada      	ldrh	r2, [r3, #22]
 80085ae:	4b37      	ldr	r3, [pc, #220]	; (800868c <tcp_input+0x49c>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	885b      	ldrh	r3, [r3, #2]
 80085b4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d113      	bne.n	80085e2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	4b34      	ldr	r3, [pc, #208]	; (8008690 <tcp_input+0x4a0>)
 80085c0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d10d      	bne.n	80085e2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	4b31      	ldr	r3, [pc, #196]	; (8008690 <tcp_input+0x4a0>)
 80085cc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d107      	bne.n	80085e2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80085d2:	69f8      	ldr	r0, [r7, #28]
 80085d4:	f000 fb56 	bl	8008c84 <tcp_timewait_input>
        }
        pbuf_free(p);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f7fd fd29 	bl	8006030 <pbuf_free>
        return;
 80085de:	e1fd      	b.n	80089dc <tcp_input+0x7ec>
        continue;
 80085e0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	61fb      	str	r3, [r7, #28]
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1bc      	bne.n	8008568 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80085ee:	2300      	movs	r3, #0
 80085f0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80085f2:	4b2f      	ldr	r3, [pc, #188]	; (80086b0 <tcp_input+0x4c0>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	617b      	str	r3, [r7, #20]
 80085f8:	e02a      	b.n	8008650 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	7a1b      	ldrb	r3, [r3, #8]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00c      	beq.n	800861c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	7a1a      	ldrb	r2, [r3, #8]
 8008606:	4b22      	ldr	r3, [pc, #136]	; (8008690 <tcp_input+0x4a0>)
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800860e:	3301      	adds	r3, #1
 8008610:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008612:	429a      	cmp	r2, r3
 8008614:	d002      	beq.n	800861c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	61bb      	str	r3, [r7, #24]
        continue;
 800861a:	e016      	b.n	800864a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	8ada      	ldrh	r2, [r3, #22]
 8008620:	4b1a      	ldr	r3, [pc, #104]	; (800868c <tcp_input+0x49c>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	885b      	ldrh	r3, [r3, #2]
 8008626:	b29b      	uxth	r3, r3
 8008628:	429a      	cmp	r2, r3
 800862a:	d10c      	bne.n	8008646 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	4b17      	ldr	r3, [pc, #92]	; (8008690 <tcp_input+0x4a0>)
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	429a      	cmp	r2, r3
 8008636:	d00f      	beq.n	8008658 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00d      	beq.n	800865a <tcp_input+0x46a>
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d009      	beq.n	800865a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	617b      	str	r3, [r7, #20]
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1d1      	bne.n	80085fa <tcp_input+0x40a>
 8008656:	e000      	b.n	800865a <tcp_input+0x46a>
            break;
 8008658:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d029      	beq.n	80086b4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00a      	beq.n	800867c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	68da      	ldr	r2, [r3, #12]
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800866e:	4b10      	ldr	r3, [pc, #64]	; (80086b0 <tcp_input+0x4c0>)
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008676:	4a0e      	ldr	r2, [pc, #56]	; (80086b0 <tcp_input+0x4c0>)
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800867c:	6978      	ldr	r0, [r7, #20]
 800867e:	f000 fa03 	bl	8008a88 <tcp_listen_input>
      }
      pbuf_free(p);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7fd fcd4 	bl	8006030 <pbuf_free>
      return;
 8008688:	e1a8      	b.n	80089dc <tcp_input+0x7ec>
 800868a:	bf00      	nop
 800868c:	200083d0 	.word	0x200083d0
 8008690:	20004dbc 	.word	0x20004dbc
 8008694:	0801198c 	.word	0x0801198c
 8008698:	08011ab8 	.word	0x08011ab8
 800869c:	080119d8 	.word	0x080119d8
 80086a0:	200083b4 	.word	0x200083b4
 80086a4:	08011ae4 	.word	0x08011ae4
 80086a8:	200083b8 	.word	0x200083b8
 80086ac:	08011b10 	.word	0x08011b10
 80086b0:	200083b0 	.word	0x200083b0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f000 8158 	beq.w	800896c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80086bc:	4b95      	ldr	r3, [pc, #596]	; (8008914 <tcp_input+0x724>)
 80086be:	2200      	movs	r2, #0
 80086c0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	891a      	ldrh	r2, [r3, #8]
 80086c6:	4b93      	ldr	r3, [pc, #588]	; (8008914 <tcp_input+0x724>)
 80086c8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80086ca:	4a92      	ldr	r2, [pc, #584]	; (8008914 <tcp_input+0x724>)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80086d0:	4b91      	ldr	r3, [pc, #580]	; (8008918 <tcp_input+0x728>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a8f      	ldr	r2, [pc, #572]	; (8008914 <tcp_input+0x724>)
 80086d6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80086d8:	4b90      	ldr	r3, [pc, #576]	; (800891c <tcp_input+0x72c>)
 80086da:	2200      	movs	r2, #0
 80086dc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80086de:	4b90      	ldr	r3, [pc, #576]	; (8008920 <tcp_input+0x730>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80086e4:	4b8f      	ldr	r3, [pc, #572]	; (8008924 <tcp_input+0x734>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80086ea:	4b8f      	ldr	r3, [pc, #572]	; (8008928 <tcp_input+0x738>)
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	f003 0308 	and.w	r3, r3, #8
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d006      	beq.n	8008704 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	7b5b      	ldrb	r3, [r3, #13]
 80086fa:	f043 0301 	orr.w	r3, r3, #1
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008708:	2b00      	cmp	r3, #0
 800870a:	d017      	beq.n	800873c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800870c:	69f8      	ldr	r0, [r7, #28]
 800870e:	f7ff f929 	bl	8007964 <tcp_process_refused_data>
 8008712:	4603      	mov	r3, r0
 8008714:	f113 0f0d 	cmn.w	r3, #13
 8008718:	d007      	beq.n	800872a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00c      	beq.n	800873c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008722:	4b82      	ldr	r3, [pc, #520]	; (800892c <tcp_input+0x73c>)
 8008724:	881b      	ldrh	r3, [r3, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d008      	beq.n	800873c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800872e:	2b00      	cmp	r3, #0
 8008730:	f040 80e3 	bne.w	80088fa <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008734:	69f8      	ldr	r0, [r7, #28]
 8008736:	f003 f9ad 	bl	800ba94 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800873a:	e0de      	b.n	80088fa <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800873c:	4a7c      	ldr	r2, [pc, #496]	; (8008930 <tcp_input+0x740>)
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008742:	69f8      	ldr	r0, [r7, #28]
 8008744:	f000 fb18 	bl	8008d78 <tcp_process>
 8008748:	4603      	mov	r3, r0
 800874a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800874c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008750:	f113 0f0d 	cmn.w	r3, #13
 8008754:	f000 80d3 	beq.w	80088fe <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8008758:	4b71      	ldr	r3, [pc, #452]	; (8008920 <tcp_input+0x730>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	f003 0308 	and.w	r3, r3, #8
 8008760:	2b00      	cmp	r3, #0
 8008762:	d015      	beq.n	8008790 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800876a:	2b00      	cmp	r3, #0
 800876c:	d008      	beq.n	8008780 <tcp_input+0x590>
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008774:	69fa      	ldr	r2, [r7, #28]
 8008776:	6912      	ldr	r2, [r2, #16]
 8008778:	f06f 010d 	mvn.w	r1, #13
 800877c:	4610      	mov	r0, r2
 800877e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008780:	69f9      	ldr	r1, [r7, #28]
 8008782:	486c      	ldr	r0, [pc, #432]	; (8008934 <tcp_input+0x744>)
 8008784:	f7ff fbbc 	bl	8007f00 <tcp_pcb_remove>
        tcp_free(pcb);
 8008788:	69f8      	ldr	r0, [r7, #28]
 800878a:	f7fe f9a9 	bl	8006ae0 <tcp_free>
 800878e:	e0da      	b.n	8008946 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8008790:	2300      	movs	r3, #0
 8008792:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008794:	4b63      	ldr	r3, [pc, #396]	; (8008924 <tcp_input+0x734>)
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d01d      	beq.n	80087d8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800879c:	4b61      	ldr	r3, [pc, #388]	; (8008924 <tcp_input+0x734>)
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00a      	beq.n	80087c2 <tcp_input+0x5d2>
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087b2:	69fa      	ldr	r2, [r7, #28]
 80087b4:	6910      	ldr	r0, [r2, #16]
 80087b6:	89fa      	ldrh	r2, [r7, #14]
 80087b8:	69f9      	ldr	r1, [r7, #28]
 80087ba:	4798      	blx	r3
 80087bc:	4603      	mov	r3, r0
 80087be:	74fb      	strb	r3, [r7, #19]
 80087c0:	e001      	b.n	80087c6 <tcp_input+0x5d6>
 80087c2:	2300      	movs	r3, #0
 80087c4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80087c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80087ca:	f113 0f0d 	cmn.w	r3, #13
 80087ce:	f000 8098 	beq.w	8008902 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80087d2:	4b54      	ldr	r3, [pc, #336]	; (8008924 <tcp_input+0x734>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80087d8:	69f8      	ldr	r0, [r7, #28]
 80087da:	f000 f915 	bl	8008a08 <tcp_input_delayed_close>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f040 8090 	bne.w	8008906 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80087e6:	4b4d      	ldr	r3, [pc, #308]	; (800891c <tcp_input+0x72c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d041      	beq.n	8008872 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d006      	beq.n	8008804 <tcp_input+0x614>
 80087f6:	4b50      	ldr	r3, [pc, #320]	; (8008938 <tcp_input+0x748>)
 80087f8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80087fc:	494f      	ldr	r1, [pc, #316]	; (800893c <tcp_input+0x74c>)
 80087fe:	4850      	ldr	r0, [pc, #320]	; (8008940 <tcp_input+0x750>)
 8008800:	f006 fcd2 	bl	800f1a8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	8b5b      	ldrh	r3, [r3, #26]
 8008808:	f003 0310 	and.w	r3, r3, #16
 800880c:	2b00      	cmp	r3, #0
 800880e:	d008      	beq.n	8008822 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008810:	4b42      	ldr	r3, [pc, #264]	; (800891c <tcp_input+0x72c>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4618      	mov	r0, r3
 8008816:	f7fd fc0b 	bl	8006030 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800881a:	69f8      	ldr	r0, [r7, #28]
 800881c:	f7fe fc48 	bl	80070b0 <tcp_abort>
            goto aborted;
 8008820:	e091      	b.n	8008946 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00c      	beq.n	8008846 <tcp_input+0x656>
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	6918      	ldr	r0, [r3, #16]
 8008836:	4b39      	ldr	r3, [pc, #228]	; (800891c <tcp_input+0x72c>)
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	2300      	movs	r3, #0
 800883c:	69f9      	ldr	r1, [r7, #28]
 800883e:	47a0      	blx	r4
 8008840:	4603      	mov	r3, r0
 8008842:	74fb      	strb	r3, [r7, #19]
 8008844:	e008      	b.n	8008858 <tcp_input+0x668>
 8008846:	4b35      	ldr	r3, [pc, #212]	; (800891c <tcp_input+0x72c>)
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	2300      	movs	r3, #0
 800884c:	69f9      	ldr	r1, [r7, #28]
 800884e:	2000      	movs	r0, #0
 8008850:	f7ff f95e 	bl	8007b10 <tcp_recv_null>
 8008854:	4603      	mov	r3, r0
 8008856:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008858:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800885c:	f113 0f0d 	cmn.w	r3, #13
 8008860:	d053      	beq.n	800890a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008862:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800886a:	4b2c      	ldr	r3, [pc, #176]	; (800891c <tcp_input+0x72c>)
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008872:	4b2b      	ldr	r3, [pc, #172]	; (8008920 <tcp_input+0x730>)
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	f003 0320 	and.w	r3, r3, #32
 800887a:	2b00      	cmp	r3, #0
 800887c:	d030      	beq.n	80088e0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008882:	2b00      	cmp	r3, #0
 8008884:	d009      	beq.n	800889a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800888a:	7b5a      	ldrb	r2, [r3, #13]
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008890:	f042 0220 	orr.w	r2, r2, #32
 8008894:	b2d2      	uxtb	r2, r2
 8008896:	735a      	strb	r2, [r3, #13]
 8008898:	e022      	b.n	80088e0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800889e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80088a2:	d005      	beq.n	80088b0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088a8:	3301      	adds	r3, #1
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00b      	beq.n	80088d2 <tcp_input+0x6e2>
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	6918      	ldr	r0, [r3, #16]
 80088c4:	2300      	movs	r3, #0
 80088c6:	2200      	movs	r2, #0
 80088c8:	69f9      	ldr	r1, [r7, #28]
 80088ca:	47a0      	blx	r4
 80088cc:	4603      	mov	r3, r0
 80088ce:	74fb      	strb	r3, [r7, #19]
 80088d0:	e001      	b.n	80088d6 <tcp_input+0x6e6>
 80088d2:	2300      	movs	r3, #0
 80088d4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80088d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80088da:	f113 0f0d 	cmn.w	r3, #13
 80088de:	d016      	beq.n	800890e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80088e0:	4b13      	ldr	r3, [pc, #76]	; (8008930 <tcp_input+0x740>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80088e6:	69f8      	ldr	r0, [r7, #28]
 80088e8:	f000 f88e 	bl	8008a08 <tcp_input_delayed_close>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d128      	bne.n	8008944 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80088f2:	69f8      	ldr	r0, [r7, #28]
 80088f4:	f002 fac8 	bl	800ae88 <tcp_output>
 80088f8:	e025      	b.n	8008946 <tcp_input+0x756>
        goto aborted;
 80088fa:	bf00      	nop
 80088fc:	e023      	b.n	8008946 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80088fe:	bf00      	nop
 8008900:	e021      	b.n	8008946 <tcp_input+0x756>
              goto aborted;
 8008902:	bf00      	nop
 8008904:	e01f      	b.n	8008946 <tcp_input+0x756>
          goto aborted;
 8008906:	bf00      	nop
 8008908:	e01d      	b.n	8008946 <tcp_input+0x756>
            goto aborted;
 800890a:	bf00      	nop
 800890c:	e01b      	b.n	8008946 <tcp_input+0x756>
              goto aborted;
 800890e:	bf00      	nop
 8008910:	e019      	b.n	8008946 <tcp_input+0x756>
 8008912:	bf00      	nop
 8008914:	200083c0 	.word	0x200083c0
 8008918:	200083d0 	.word	0x200083d0
 800891c:	200083f0 	.word	0x200083f0
 8008920:	200083ed 	.word	0x200083ed
 8008924:	200083e8 	.word	0x200083e8
 8008928:	200083ec 	.word	0x200083ec
 800892c:	200083ea 	.word	0x200083ea
 8008930:	200083f4 	.word	0x200083f4
 8008934:	200083b4 	.word	0x200083b4
 8008938:	0801198c 	.word	0x0801198c
 800893c:	08011b40 	.word	0x08011b40
 8008940:	080119d8 	.word	0x080119d8
          goto aborted;
 8008944:	bf00      	nop
    tcp_input_pcb = NULL;
 8008946:	4b27      	ldr	r3, [pc, #156]	; (80089e4 <tcp_input+0x7f4>)
 8008948:	2200      	movs	r2, #0
 800894a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800894c:	4b26      	ldr	r3, [pc, #152]	; (80089e8 <tcp_input+0x7f8>)
 800894e:	2200      	movs	r2, #0
 8008950:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008952:	4b26      	ldr	r3, [pc, #152]	; (80089ec <tcp_input+0x7fc>)
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d03f      	beq.n	80089da <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800895a:	4b24      	ldr	r3, [pc, #144]	; (80089ec <tcp_input+0x7fc>)
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	4618      	mov	r0, r3
 8008960:	f7fd fb66 	bl	8006030 <pbuf_free>
      inseg.p = NULL;
 8008964:	4b21      	ldr	r3, [pc, #132]	; (80089ec <tcp_input+0x7fc>)
 8008966:	2200      	movs	r2, #0
 8008968:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800896a:	e036      	b.n	80089da <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800896c:	4b20      	ldr	r3, [pc, #128]	; (80089f0 <tcp_input+0x800>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	899b      	ldrh	r3, [r3, #12]
 8008972:	b29b      	uxth	r3, r3
 8008974:	4618      	mov	r0, r3
 8008976:	f7fb ff79 	bl	800486c <lwip_htons>
 800897a:	4603      	mov	r3, r0
 800897c:	b2db      	uxtb	r3, r3
 800897e:	f003 0304 	and.w	r3, r3, #4
 8008982:	2b00      	cmp	r3, #0
 8008984:	d118      	bne.n	80089b8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008986:	4b1b      	ldr	r3, [pc, #108]	; (80089f4 <tcp_input+0x804>)
 8008988:	6819      	ldr	r1, [r3, #0]
 800898a:	4b1b      	ldr	r3, [pc, #108]	; (80089f8 <tcp_input+0x808>)
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	4b1a      	ldr	r3, [pc, #104]	; (80089fc <tcp_input+0x80c>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008996:	4b16      	ldr	r3, [pc, #88]	; (80089f0 <tcp_input+0x800>)
 8008998:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800899a:	885b      	ldrh	r3, [r3, #2]
 800899c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800899e:	4a14      	ldr	r2, [pc, #80]	; (80089f0 <tcp_input+0x800>)
 80089a0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80089a2:	8812      	ldrh	r2, [r2, #0]
 80089a4:	b292      	uxth	r2, r2
 80089a6:	9202      	str	r2, [sp, #8]
 80089a8:	9301      	str	r3, [sp, #4]
 80089aa:	4b15      	ldr	r3, [pc, #84]	; (8008a00 <tcp_input+0x810>)
 80089ac:	9300      	str	r3, [sp, #0]
 80089ae:	4b15      	ldr	r3, [pc, #84]	; (8008a04 <tcp_input+0x814>)
 80089b0:	4602      	mov	r2, r0
 80089b2:	2000      	movs	r0, #0
 80089b4:	f003 f81c 	bl	800b9f0 <tcp_rst>
    pbuf_free(p);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7fd fb39 	bl	8006030 <pbuf_free>
  return;
 80089be:	e00c      	b.n	80089da <tcp_input+0x7ea>
    goto dropped;
 80089c0:	bf00      	nop
 80089c2:	e006      	b.n	80089d2 <tcp_input+0x7e2>
    goto dropped;
 80089c4:	bf00      	nop
 80089c6:	e004      	b.n	80089d2 <tcp_input+0x7e2>
    goto dropped;
 80089c8:	bf00      	nop
 80089ca:	e002      	b.n	80089d2 <tcp_input+0x7e2>
      goto dropped;
 80089cc:	bf00      	nop
 80089ce:	e000      	b.n	80089d2 <tcp_input+0x7e2>
      goto dropped;
 80089d0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7fd fb2c 	bl	8006030 <pbuf_free>
 80089d8:	e000      	b.n	80089dc <tcp_input+0x7ec>
  return;
 80089da:	bf00      	nop
}
 80089dc:	3724      	adds	r7, #36	; 0x24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd90      	pop	{r4, r7, pc}
 80089e2:	bf00      	nop
 80089e4:	200083f4 	.word	0x200083f4
 80089e8:	200083f0 	.word	0x200083f0
 80089ec:	200083c0 	.word	0x200083c0
 80089f0:	200083d0 	.word	0x200083d0
 80089f4:	200083e4 	.word	0x200083e4
 80089f8:	200083ea 	.word	0x200083ea
 80089fc:	200083e0 	.word	0x200083e0
 8008a00:	20004dcc 	.word	0x20004dcc
 8008a04:	20004dd0 	.word	0x20004dd0

08008a08 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d106      	bne.n	8008a24 <tcp_input_delayed_close+0x1c>
 8008a16:	4b17      	ldr	r3, [pc, #92]	; (8008a74 <tcp_input_delayed_close+0x6c>)
 8008a18:	f240 225a 	movw	r2, #602	; 0x25a
 8008a1c:	4916      	ldr	r1, [pc, #88]	; (8008a78 <tcp_input_delayed_close+0x70>)
 8008a1e:	4817      	ldr	r0, [pc, #92]	; (8008a7c <tcp_input_delayed_close+0x74>)
 8008a20:	f006 fbc2 	bl	800f1a8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008a24:	4b16      	ldr	r3, [pc, #88]	; (8008a80 <tcp_input_delayed_close+0x78>)
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	f003 0310 	and.w	r3, r3, #16
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d01c      	beq.n	8008a6a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	8b5b      	ldrh	r3, [r3, #26]
 8008a34:	f003 0310 	and.w	r3, r3, #16
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10d      	bne.n	8008a58 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d008      	beq.n	8008a58 <tcp_input_delayed_close+0x50>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	6912      	ldr	r2, [r2, #16]
 8008a50:	f06f 010e 	mvn.w	r1, #14
 8008a54:	4610      	mov	r0, r2
 8008a56:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008a58:	6879      	ldr	r1, [r7, #4]
 8008a5a:	480a      	ldr	r0, [pc, #40]	; (8008a84 <tcp_input_delayed_close+0x7c>)
 8008a5c:	f7ff fa50 	bl	8007f00 <tcp_pcb_remove>
    tcp_free(pcb);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f7fe f83d 	bl	8006ae0 <tcp_free>
    return 1;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e000      	b.n	8008a6c <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	0801198c 	.word	0x0801198c
 8008a78:	08011b5c 	.word	0x08011b5c
 8008a7c:	080119d8 	.word	0x080119d8
 8008a80:	200083ed 	.word	0x200083ed
 8008a84:	200083b4 	.word	0x200083b4

08008a88 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008a88:	b590      	push	{r4, r7, lr}
 8008a8a:	b08b      	sub	sp, #44	; 0x2c
 8008a8c:	af04      	add	r7, sp, #16
 8008a8e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008a90:	4b6f      	ldr	r3, [pc, #444]	; (8008c50 <tcp_listen_input+0x1c8>)
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	f003 0304 	and.w	r3, r3, #4
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f040 80d2 	bne.w	8008c42 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d106      	bne.n	8008ab2 <tcp_listen_input+0x2a>
 8008aa4:	4b6b      	ldr	r3, [pc, #428]	; (8008c54 <tcp_listen_input+0x1cc>)
 8008aa6:	f240 2281 	movw	r2, #641	; 0x281
 8008aaa:	496b      	ldr	r1, [pc, #428]	; (8008c58 <tcp_listen_input+0x1d0>)
 8008aac:	486b      	ldr	r0, [pc, #428]	; (8008c5c <tcp_listen_input+0x1d4>)
 8008aae:	f006 fb7b 	bl	800f1a8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008ab2:	4b67      	ldr	r3, [pc, #412]	; (8008c50 <tcp_listen_input+0x1c8>)
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	f003 0310 	and.w	r3, r3, #16
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d019      	beq.n	8008af2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008abe:	4b68      	ldr	r3, [pc, #416]	; (8008c60 <tcp_listen_input+0x1d8>)
 8008ac0:	6819      	ldr	r1, [r3, #0]
 8008ac2:	4b68      	ldr	r3, [pc, #416]	; (8008c64 <tcp_listen_input+0x1dc>)
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	4b67      	ldr	r3, [pc, #412]	; (8008c68 <tcp_listen_input+0x1e0>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ace:	4b67      	ldr	r3, [pc, #412]	; (8008c6c <tcp_listen_input+0x1e4>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ad2:	885b      	ldrh	r3, [r3, #2]
 8008ad4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ad6:	4a65      	ldr	r2, [pc, #404]	; (8008c6c <tcp_listen_input+0x1e4>)
 8008ad8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ada:	8812      	ldrh	r2, [r2, #0]
 8008adc:	b292      	uxth	r2, r2
 8008ade:	9202      	str	r2, [sp, #8]
 8008ae0:	9301      	str	r3, [sp, #4]
 8008ae2:	4b63      	ldr	r3, [pc, #396]	; (8008c70 <tcp_listen_input+0x1e8>)
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	4b63      	ldr	r3, [pc, #396]	; (8008c74 <tcp_listen_input+0x1ec>)
 8008ae8:	4602      	mov	r2, r0
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f002 ff80 	bl	800b9f0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008af0:	e0a9      	b.n	8008c46 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008af2:	4b57      	ldr	r3, [pc, #348]	; (8008c50 <tcp_listen_input+0x1c8>)
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	f003 0302 	and.w	r3, r3, #2
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 80a3 	beq.w	8008c46 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	7d5b      	ldrb	r3, [r3, #21]
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7ff f927 	bl	8007d58 <tcp_alloc>
 8008b0a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d111      	bne.n	8008b36 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00a      	beq.n	8008b30 <tcp_listen_input+0xa8>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	6910      	ldr	r0, [r2, #16]
 8008b22:	f04f 32ff 	mov.w	r2, #4294967295
 8008b26:	2100      	movs	r1, #0
 8008b28:	4798      	blx	r3
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	73bb      	strb	r3, [r7, #14]
      return;
 8008b2e:	e08b      	b.n	8008c48 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008b30:	23f0      	movs	r3, #240	; 0xf0
 8008b32:	73bb      	strb	r3, [r7, #14]
      return;
 8008b34:	e088      	b.n	8008c48 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008b36:	4b50      	ldr	r3, [pc, #320]	; (8008c78 <tcp_listen_input+0x1f0>)
 8008b38:	695a      	ldr	r2, [r3, #20]
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008b3e:	4b4e      	ldr	r3, [pc, #312]	; (8008c78 <tcp_listen_input+0x1f0>)
 8008b40:	691a      	ldr	r2, [r3, #16]
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	8ada      	ldrh	r2, [r3, #22]
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008b4e:	4b47      	ldr	r3, [pc, #284]	; (8008c6c <tcp_listen_input+0x1e4>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	881b      	ldrh	r3, [r3, #0]
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	2203      	movs	r2, #3
 8008b5e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008b60:	4b41      	ldr	r3, [pc, #260]	; (8008c68 <tcp_listen_input+0x1e0>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	1c5a      	adds	r2, r3, #1
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008b72:	6978      	ldr	r0, [r7, #20]
 8008b74:	f7ff fa58 	bl	8008028 <tcp_next_iss>
 8008b78:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008b92:	4b35      	ldr	r3, [pc, #212]	; (8008c68 <tcp_listen_input+0x1e0>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	1e5a      	subs	r2, r3, #1
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	691a      	ldr	r2, [r3, #16]
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	7a5b      	ldrb	r3, [r3, #9]
 8008bae:	f003 030c 	and.w	r3, r3, #12
 8008bb2:	b2da      	uxtb	r2, r3
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	7a1a      	ldrb	r2, [r3, #8]
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008bc0:	4b2e      	ldr	r3, [pc, #184]	; (8008c7c <tcp_listen_input+0x1f4>)
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	60da      	str	r2, [r3, #12]
 8008bc8:	4a2c      	ldr	r2, [pc, #176]	; (8008c7c <tcp_listen_input+0x1f4>)
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	6013      	str	r3, [r2, #0]
 8008bce:	f003 f8d1 	bl	800bd74 <tcp_timer_needed>
 8008bd2:	4b2b      	ldr	r3, [pc, #172]	; (8008c80 <tcp_listen_input+0x1f8>)
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008bd8:	6978      	ldr	r0, [r7, #20]
 8008bda:	f001 fd8f 	bl	800a6fc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008bde:	4b23      	ldr	r3, [pc, #140]	; (8008c6c <tcp_listen_input+0x1e4>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	89db      	ldrh	r3, [r3, #14]
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	3304      	adds	r3, #4
 8008c00:	4618      	mov	r0, r3
 8008c02:	f004 ffe5 	bl	800dbd0 <ip4_route>
 8008c06:	4601      	mov	r1, r0
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f7ff fa30 	bl	8008074 <tcp_eff_send_mss_netif>
 8008c14:	4603      	mov	r3, r0
 8008c16:	461a      	mov	r2, r3
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008c1c:	2112      	movs	r1, #18
 8008c1e:	6978      	ldr	r0, [r7, #20]
 8008c20:	f002 f844 	bl	800acac <tcp_enqueue_flags>
 8008c24:	4603      	mov	r3, r0
 8008c26:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d004      	beq.n	8008c3a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008c30:	2100      	movs	r1, #0
 8008c32:	6978      	ldr	r0, [r7, #20]
 8008c34:	f7fe f97e 	bl	8006f34 <tcp_abandon>
      return;
 8008c38:	e006      	b.n	8008c48 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008c3a:	6978      	ldr	r0, [r7, #20]
 8008c3c:	f002 f924 	bl	800ae88 <tcp_output>
  return;
 8008c40:	e001      	b.n	8008c46 <tcp_listen_input+0x1be>
    return;
 8008c42:	bf00      	nop
 8008c44:	e000      	b.n	8008c48 <tcp_listen_input+0x1c0>
  return;
 8008c46:	bf00      	nop
}
 8008c48:	371c      	adds	r7, #28
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd90      	pop	{r4, r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	200083ec 	.word	0x200083ec
 8008c54:	0801198c 	.word	0x0801198c
 8008c58:	08011b84 	.word	0x08011b84
 8008c5c:	080119d8 	.word	0x080119d8
 8008c60:	200083e4 	.word	0x200083e4
 8008c64:	200083ea 	.word	0x200083ea
 8008c68:	200083e0 	.word	0x200083e0
 8008c6c:	200083d0 	.word	0x200083d0
 8008c70:	20004dcc 	.word	0x20004dcc
 8008c74:	20004dd0 	.word	0x20004dd0
 8008c78:	20004dbc 	.word	0x20004dbc
 8008c7c:	200083b4 	.word	0x200083b4
 8008c80:	200083bc 	.word	0x200083bc

08008c84 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b086      	sub	sp, #24
 8008c88:	af04      	add	r7, sp, #16
 8008c8a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008c8c:	4b2f      	ldr	r3, [pc, #188]	; (8008d4c <tcp_timewait_input+0xc8>)
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	f003 0304 	and.w	r3, r3, #4
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d153      	bne.n	8008d40 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d106      	bne.n	8008cac <tcp_timewait_input+0x28>
 8008c9e:	4b2c      	ldr	r3, [pc, #176]	; (8008d50 <tcp_timewait_input+0xcc>)
 8008ca0:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008ca4:	492b      	ldr	r1, [pc, #172]	; (8008d54 <tcp_timewait_input+0xd0>)
 8008ca6:	482c      	ldr	r0, [pc, #176]	; (8008d58 <tcp_timewait_input+0xd4>)
 8008ca8:	f006 fa7e 	bl	800f1a8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008cac:	4b27      	ldr	r3, [pc, #156]	; (8008d4c <tcp_timewait_input+0xc8>)
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	f003 0302 	and.w	r3, r3, #2
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d02a      	beq.n	8008d0e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008cb8:	4b28      	ldr	r3, [pc, #160]	; (8008d5c <tcp_timewait_input+0xd8>)
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	db2d      	blt.n	8008d22 <tcp_timewait_input+0x9e>
 8008cc6:	4b25      	ldr	r3, [pc, #148]	; (8008d5c <tcp_timewait_input+0xd8>)
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	6879      	ldr	r1, [r7, #4]
 8008cd0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008cd2:	440b      	add	r3, r1
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	dc23      	bgt.n	8008d22 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008cda:	4b21      	ldr	r3, [pc, #132]	; (8008d60 <tcp_timewait_input+0xdc>)
 8008cdc:	6819      	ldr	r1, [r3, #0]
 8008cde:	4b21      	ldr	r3, [pc, #132]	; (8008d64 <tcp_timewait_input+0xe0>)
 8008ce0:	881b      	ldrh	r3, [r3, #0]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	4b1d      	ldr	r3, [pc, #116]	; (8008d5c <tcp_timewait_input+0xd8>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008cea:	4b1f      	ldr	r3, [pc, #124]	; (8008d68 <tcp_timewait_input+0xe4>)
 8008cec:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008cee:	885b      	ldrh	r3, [r3, #2]
 8008cf0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008cf2:	4a1d      	ldr	r2, [pc, #116]	; (8008d68 <tcp_timewait_input+0xe4>)
 8008cf4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008cf6:	8812      	ldrh	r2, [r2, #0]
 8008cf8:	b292      	uxth	r2, r2
 8008cfa:	9202      	str	r2, [sp, #8]
 8008cfc:	9301      	str	r3, [sp, #4]
 8008cfe:	4b1b      	ldr	r3, [pc, #108]	; (8008d6c <tcp_timewait_input+0xe8>)
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	4b1b      	ldr	r3, [pc, #108]	; (8008d70 <tcp_timewait_input+0xec>)
 8008d04:	4602      	mov	r2, r0
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f002 fe72 	bl	800b9f0 <tcp_rst>
      return;
 8008d0c:	e01b      	b.n	8008d46 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008d0e:	4b0f      	ldr	r3, [pc, #60]	; (8008d4c <tcp_timewait_input+0xc8>)
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	f003 0301 	and.w	r3, r3, #1
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d003      	beq.n	8008d22 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008d1a:	4b16      	ldr	r3, [pc, #88]	; (8008d74 <tcp_timewait_input+0xf0>)
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008d22:	4b10      	ldr	r3, [pc, #64]	; (8008d64 <tcp_timewait_input+0xe0>)
 8008d24:	881b      	ldrh	r3, [r3, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00c      	beq.n	8008d44 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	8b5b      	ldrh	r3, [r3, #26]
 8008d2e:	f043 0302 	orr.w	r3, r3, #2
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f002 f8a5 	bl	800ae88 <tcp_output>
  }
  return;
 8008d3e:	e001      	b.n	8008d44 <tcp_timewait_input+0xc0>
    return;
 8008d40:	bf00      	nop
 8008d42:	e000      	b.n	8008d46 <tcp_timewait_input+0xc2>
  return;
 8008d44:	bf00      	nop
}
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	200083ec 	.word	0x200083ec
 8008d50:	0801198c 	.word	0x0801198c
 8008d54:	08011ba4 	.word	0x08011ba4
 8008d58:	080119d8 	.word	0x080119d8
 8008d5c:	200083e0 	.word	0x200083e0
 8008d60:	200083e4 	.word	0x200083e4
 8008d64:	200083ea 	.word	0x200083ea
 8008d68:	200083d0 	.word	0x200083d0
 8008d6c:	20004dcc 	.word	0x20004dcc
 8008d70:	20004dd0 	.word	0x20004dd0
 8008d74:	200083a8 	.word	0x200083a8

08008d78 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008d78:	b590      	push	{r4, r7, lr}
 8008d7a:	b08d      	sub	sp, #52	; 0x34
 8008d7c:	af04      	add	r7, sp, #16
 8008d7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008d80:	2300      	movs	r3, #0
 8008d82:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d106      	bne.n	8008d9c <tcp_process+0x24>
 8008d8e:	4b9d      	ldr	r3, [pc, #628]	; (8009004 <tcp_process+0x28c>)
 8008d90:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008d94:	499c      	ldr	r1, [pc, #624]	; (8009008 <tcp_process+0x290>)
 8008d96:	489d      	ldr	r0, [pc, #628]	; (800900c <tcp_process+0x294>)
 8008d98:	f006 fa06 	bl	800f1a8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008d9c:	4b9c      	ldr	r3, [pc, #624]	; (8009010 <tcp_process+0x298>)
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	f003 0304 	and.w	r3, r3, #4
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d04e      	beq.n	8008e46 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	7d1b      	ldrb	r3, [r3, #20]
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d108      	bne.n	8008dc2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008db4:	4b97      	ldr	r3, [pc, #604]	; (8009014 <tcp_process+0x29c>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d123      	bne.n	8008e04 <tcp_process+0x8c>
        acceptable = 1;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	76fb      	strb	r3, [r7, #27]
 8008dc0:	e020      	b.n	8008e04 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008dc6:	4b94      	ldr	r3, [pc, #592]	; (8009018 <tcp_process+0x2a0>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d102      	bne.n	8008dd4 <tcp_process+0x5c>
        acceptable = 1;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	76fb      	strb	r3, [r7, #27]
 8008dd2:	e017      	b.n	8008e04 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008dd4:	4b90      	ldr	r3, [pc, #576]	; (8009018 <tcp_process+0x2a0>)
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ddc:	1ad3      	subs	r3, r2, r3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	db10      	blt.n	8008e04 <tcp_process+0x8c>
 8008de2:	4b8d      	ldr	r3, [pc, #564]	; (8009018 <tcp_process+0x2a0>)
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008dee:	440b      	add	r3, r1
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	dc06      	bgt.n	8008e04 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	8b5b      	ldrh	r3, [r3, #26]
 8008dfa:	f043 0302 	orr.w	r3, r3, #2
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008e04:	7efb      	ldrb	r3, [r7, #27]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d01b      	beq.n	8008e42 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	7d1b      	ldrb	r3, [r3, #20]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d106      	bne.n	8008e20 <tcp_process+0xa8>
 8008e12:	4b7c      	ldr	r3, [pc, #496]	; (8009004 <tcp_process+0x28c>)
 8008e14:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008e18:	4980      	ldr	r1, [pc, #512]	; (800901c <tcp_process+0x2a4>)
 8008e1a:	487c      	ldr	r0, [pc, #496]	; (800900c <tcp_process+0x294>)
 8008e1c:	f006 f9c4 	bl	800f1a8 <iprintf>
      recv_flags |= TF_RESET;
 8008e20:	4b7f      	ldr	r3, [pc, #508]	; (8009020 <tcp_process+0x2a8>)
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	f043 0308 	orr.w	r3, r3, #8
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	4b7d      	ldr	r3, [pc, #500]	; (8009020 <tcp_process+0x2a8>)
 8008e2c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	8b5b      	ldrh	r3, [r3, #26]
 8008e32:	f023 0301 	bic.w	r3, r3, #1
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008e3c:	f06f 030d 	mvn.w	r3, #13
 8008e40:	e37a      	b.n	8009538 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	e378      	b.n	8009538 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008e46:	4b72      	ldr	r3, [pc, #456]	; (8009010 <tcp_process+0x298>)
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	f003 0302 	and.w	r3, r3, #2
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d010      	beq.n	8008e74 <tcp_process+0xfc>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	7d1b      	ldrb	r3, [r3, #20]
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d00c      	beq.n	8008e74 <tcp_process+0xfc>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	7d1b      	ldrb	r3, [r3, #20]
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d008      	beq.n	8008e74 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	8b5b      	ldrh	r3, [r3, #26]
 8008e66:	f043 0302 	orr.w	r3, r3, #2
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	e361      	b.n	8009538 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	8b5b      	ldrh	r3, [r3, #26]
 8008e78:	f003 0310 	and.w	r3, r3, #16
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d103      	bne.n	8008e88 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008e80:	4b68      	ldr	r3, [pc, #416]	; (8009024 <tcp_process+0x2ac>)
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f001 fc2f 	bl	800a6fc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	7d1b      	ldrb	r3, [r3, #20]
 8008ea2:	3b02      	subs	r3, #2
 8008ea4:	2b07      	cmp	r3, #7
 8008ea6:	f200 8337 	bhi.w	8009518 <tcp_process+0x7a0>
 8008eaa:	a201      	add	r2, pc, #4	; (adr r2, 8008eb0 <tcp_process+0x138>)
 8008eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb0:	08008ed1 	.word	0x08008ed1
 8008eb4:	08009101 	.word	0x08009101
 8008eb8:	08009279 	.word	0x08009279
 8008ebc:	080092a3 	.word	0x080092a3
 8008ec0:	080093c7 	.word	0x080093c7
 8008ec4:	08009279 	.word	0x08009279
 8008ec8:	08009453 	.word	0x08009453
 8008ecc:	080094e3 	.word	0x080094e3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008ed0:	4b4f      	ldr	r3, [pc, #316]	; (8009010 <tcp_process+0x298>)
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	f003 0310 	and.w	r3, r3, #16
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 80e4 	beq.w	80090a6 <tcp_process+0x32e>
 8008ede:	4b4c      	ldr	r3, [pc, #304]	; (8009010 <tcp_process+0x298>)
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	f003 0302 	and.w	r3, r3, #2
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 80dd 	beq.w	80090a6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	4b48      	ldr	r3, [pc, #288]	; (8009014 <tcp_process+0x29c>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	f040 80d5 	bne.w	80090a6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008efc:	4b46      	ldr	r3, [pc, #280]	; (8009018 <tcp_process+0x2a0>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	1c5a      	adds	r2, r3, #1
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008f0e:	4b41      	ldr	r3, [pc, #260]	; (8009014 <tcp_process+0x29c>)
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008f16:	4b44      	ldr	r3, [pc, #272]	; (8009028 <tcp_process+0x2b0>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	89db      	ldrh	r3, [r3, #14]
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008f30:	4b39      	ldr	r3, [pc, #228]	; (8009018 <tcp_process+0x2a0>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	1e5a      	subs	r2, r3, #1
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2204      	movs	r2, #4
 8008f3e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	3304      	adds	r3, #4
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f004 fe41 	bl	800dbd0 <ip4_route>
 8008f4e:	4601      	mov	r1, r0
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3304      	adds	r3, #4
 8008f54:	461a      	mov	r2, r3
 8008f56:	4620      	mov	r0, r4
 8008f58:	f7ff f88c 	bl	8008074 <tcp_eff_send_mss_netif>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	461a      	mov	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f68:	009a      	lsls	r2, r3, #2
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f6e:	005b      	lsls	r3, r3, #1
 8008f70:	f241 111c 	movw	r1, #4380	; 0x111c
 8008f74:	428b      	cmp	r3, r1
 8008f76:	bf38      	it	cc
 8008f78:	460b      	movcc	r3, r1
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d204      	bcs.n	8008f88 <tcp_process+0x210>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	e00d      	b.n	8008fa4 <tcp_process+0x22c>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f8c:	005b      	lsls	r3, r3, #1
 8008f8e:	f241 121c 	movw	r2, #4380	; 0x111c
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d904      	bls.n	8008fa0 <tcp_process+0x228>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f9a:	005b      	lsls	r3, r3, #1
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	e001      	b.n	8008fa4 <tcp_process+0x22c>
 8008fa0:	f241 131c 	movw	r3, #4380	; 0x111c
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d106      	bne.n	8008fc2 <tcp_process+0x24a>
 8008fb4:	4b13      	ldr	r3, [pc, #76]	; (8009004 <tcp_process+0x28c>)
 8008fb6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008fba:	491c      	ldr	r1, [pc, #112]	; (800902c <tcp_process+0x2b4>)
 8008fbc:	4813      	ldr	r0, [pc, #76]	; (800900c <tcp_process+0x294>)
 8008fbe:	f006 f8f3 	bl	800f1a8 <iprintf>
        --pcb->snd_queuelen;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fd6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d12a      	bne.n	8009034 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fe2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d106      	bne.n	8008ff8 <tcp_process+0x280>
 8008fea:	4b06      	ldr	r3, [pc, #24]	; (8009004 <tcp_process+0x28c>)
 8008fec:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008ff0:	490f      	ldr	r1, [pc, #60]	; (8009030 <tcp_process+0x2b8>)
 8008ff2:	4806      	ldr	r0, [pc, #24]	; (800900c <tcp_process+0x294>)
 8008ff4:	f006 f8d8 	bl	800f1a8 <iprintf>
          pcb->unsent = rseg->next;
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	66da      	str	r2, [r3, #108]	; 0x6c
 8009000:	e01c      	b.n	800903c <tcp_process+0x2c4>
 8009002:	bf00      	nop
 8009004:	0801198c 	.word	0x0801198c
 8009008:	08011bc4 	.word	0x08011bc4
 800900c:	080119d8 	.word	0x080119d8
 8009010:	200083ec 	.word	0x200083ec
 8009014:	200083e4 	.word	0x200083e4
 8009018:	200083e0 	.word	0x200083e0
 800901c:	08011be0 	.word	0x08011be0
 8009020:	200083ed 	.word	0x200083ed
 8009024:	200083a8 	.word	0x200083a8
 8009028:	200083d0 	.word	0x200083d0
 800902c:	08011c00 	.word	0x08011c00
 8009030:	08011c18 	.word	0x08011c18
        } else {
          pcb->unacked = rseg->next;
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800903c:	69f8      	ldr	r0, [r7, #28]
 800903e:	f7fe fd22 	bl	8007a86 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009046:	2b00      	cmp	r3, #0
 8009048:	d104      	bne.n	8009054 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009050:	861a      	strh	r2, [r3, #48]	; 0x30
 8009052:	e006      	b.n	8009062 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00a      	beq.n	8009082 <tcp_process+0x30a>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	6910      	ldr	r0, [r2, #16]
 8009076:	2200      	movs	r2, #0
 8009078:	6879      	ldr	r1, [r7, #4]
 800907a:	4798      	blx	r3
 800907c:	4603      	mov	r3, r0
 800907e:	76bb      	strb	r3, [r7, #26]
 8009080:	e001      	b.n	8009086 <tcp_process+0x30e>
 8009082:	2300      	movs	r3, #0
 8009084:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009086:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800908a:	f113 0f0d 	cmn.w	r3, #13
 800908e:	d102      	bne.n	8009096 <tcp_process+0x31e>
          return ERR_ABRT;
 8009090:	f06f 030c 	mvn.w	r3, #12
 8009094:	e250      	b.n	8009538 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	8b5b      	ldrh	r3, [r3, #26]
 800909a:	f043 0302 	orr.w	r3, r3, #2
 800909e:	b29a      	uxth	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80090a4:	e23a      	b.n	800951c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80090a6:	4b98      	ldr	r3, [pc, #608]	; (8009308 <tcp_process+0x590>)
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	f003 0310 	and.w	r3, r3, #16
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f000 8234 	beq.w	800951c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80090b4:	4b95      	ldr	r3, [pc, #596]	; (800930c <tcp_process+0x594>)
 80090b6:	6819      	ldr	r1, [r3, #0]
 80090b8:	4b95      	ldr	r3, [pc, #596]	; (8009310 <tcp_process+0x598>)
 80090ba:	881b      	ldrh	r3, [r3, #0]
 80090bc:	461a      	mov	r2, r3
 80090be:	4b95      	ldr	r3, [pc, #596]	; (8009314 <tcp_process+0x59c>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80090c4:	4b94      	ldr	r3, [pc, #592]	; (8009318 <tcp_process+0x5a0>)
 80090c6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80090c8:	885b      	ldrh	r3, [r3, #2]
 80090ca:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80090cc:	4a92      	ldr	r2, [pc, #584]	; (8009318 <tcp_process+0x5a0>)
 80090ce:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80090d0:	8812      	ldrh	r2, [r2, #0]
 80090d2:	b292      	uxth	r2, r2
 80090d4:	9202      	str	r2, [sp, #8]
 80090d6:	9301      	str	r3, [sp, #4]
 80090d8:	4b90      	ldr	r3, [pc, #576]	; (800931c <tcp_process+0x5a4>)
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	4b90      	ldr	r3, [pc, #576]	; (8009320 <tcp_process+0x5a8>)
 80090de:	4602      	mov	r2, r0
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f002 fc85 	bl	800b9f0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80090ec:	2b05      	cmp	r3, #5
 80090ee:	f200 8215 	bhi.w	800951c <tcp_process+0x7a4>
          pcb->rtime = 0;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f002 fa4f 	bl	800b59c <tcp_rexmit_rto>
      break;
 80090fe:	e20d      	b.n	800951c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009100:	4b81      	ldr	r3, [pc, #516]	; (8009308 <tcp_process+0x590>)
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	f003 0310 	and.w	r3, r3, #16
 8009108:	2b00      	cmp	r3, #0
 800910a:	f000 80a1 	beq.w	8009250 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800910e:	4b7f      	ldr	r3, [pc, #508]	; (800930c <tcp_process+0x594>)
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009116:	1ad3      	subs	r3, r2, r3
 8009118:	3b01      	subs	r3, #1
 800911a:	2b00      	cmp	r3, #0
 800911c:	db7e      	blt.n	800921c <tcp_process+0x4a4>
 800911e:	4b7b      	ldr	r3, [pc, #492]	; (800930c <tcp_process+0x594>)
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	2b00      	cmp	r3, #0
 800912a:	dc77      	bgt.n	800921c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2204      	movs	r2, #4
 8009130:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009136:	2b00      	cmp	r3, #0
 8009138:	d102      	bne.n	8009140 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800913a:	23fa      	movs	r3, #250	; 0xfa
 800913c:	76bb      	strb	r3, [r7, #26]
 800913e:	e01d      	b.n	800917c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009144:	699b      	ldr	r3, [r3, #24]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d106      	bne.n	8009158 <tcp_process+0x3e0>
 800914a:	4b76      	ldr	r3, [pc, #472]	; (8009324 <tcp_process+0x5ac>)
 800914c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009150:	4975      	ldr	r1, [pc, #468]	; (8009328 <tcp_process+0x5b0>)
 8009152:	4876      	ldr	r0, [pc, #472]	; (800932c <tcp_process+0x5b4>)
 8009154:	f006 f828 	bl	800f1a8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00a      	beq.n	8009178 <tcp_process+0x400>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	6910      	ldr	r0, [r2, #16]
 800916c:	2200      	movs	r2, #0
 800916e:	6879      	ldr	r1, [r7, #4]
 8009170:	4798      	blx	r3
 8009172:	4603      	mov	r3, r0
 8009174:	76bb      	strb	r3, [r7, #26]
 8009176:	e001      	b.n	800917c <tcp_process+0x404>
 8009178:	23f0      	movs	r3, #240	; 0xf0
 800917a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800917c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00a      	beq.n	800919a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009184:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009188:	f113 0f0d 	cmn.w	r3, #13
 800918c:	d002      	beq.n	8009194 <tcp_process+0x41c>
              tcp_abort(pcb);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7fd ff8e 	bl	80070b0 <tcp_abort>
            }
            return ERR_ABRT;
 8009194:	f06f 030c 	mvn.w	r3, #12
 8009198:	e1ce      	b.n	8009538 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fae0 	bl	8009760 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80091a0:	4b63      	ldr	r3, [pc, #396]	; (8009330 <tcp_process+0x5b8>)
 80091a2:	881b      	ldrh	r3, [r3, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d005      	beq.n	80091b4 <tcp_process+0x43c>
            recv_acked--;
 80091a8:	4b61      	ldr	r3, [pc, #388]	; (8009330 <tcp_process+0x5b8>)
 80091aa:	881b      	ldrh	r3, [r3, #0]
 80091ac:	3b01      	subs	r3, #1
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	4b5f      	ldr	r3, [pc, #380]	; (8009330 <tcp_process+0x5b8>)
 80091b2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80091b8:	009a      	lsls	r2, r3, #2
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80091be:	005b      	lsls	r3, r3, #1
 80091c0:	f241 111c 	movw	r1, #4380	; 0x111c
 80091c4:	428b      	cmp	r3, r1
 80091c6:	bf38      	it	cc
 80091c8:	460b      	movcc	r3, r1
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d204      	bcs.n	80091d8 <tcp_process+0x460>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	e00d      	b.n	80091f4 <tcp_process+0x47c>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80091dc:	005b      	lsls	r3, r3, #1
 80091de:	f241 121c 	movw	r2, #4380	; 0x111c
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d904      	bls.n	80091f0 <tcp_process+0x478>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80091ea:	005b      	lsls	r3, r3, #1
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	e001      	b.n	80091f4 <tcp_process+0x47c>
 80091f0:	f241 131c 	movw	r3, #4380	; 0x111c
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80091fa:	4b4e      	ldr	r3, [pc, #312]	; (8009334 <tcp_process+0x5bc>)
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	f003 0320 	and.w	r3, r3, #32
 8009202:	2b00      	cmp	r3, #0
 8009204:	d037      	beq.n	8009276 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	8b5b      	ldrh	r3, [r3, #26]
 800920a:	f043 0302 	orr.w	r3, r3, #2
 800920e:	b29a      	uxth	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2207      	movs	r2, #7
 8009218:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800921a:	e02c      	b.n	8009276 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800921c:	4b3b      	ldr	r3, [pc, #236]	; (800930c <tcp_process+0x594>)
 800921e:	6819      	ldr	r1, [r3, #0]
 8009220:	4b3b      	ldr	r3, [pc, #236]	; (8009310 <tcp_process+0x598>)
 8009222:	881b      	ldrh	r3, [r3, #0]
 8009224:	461a      	mov	r2, r3
 8009226:	4b3b      	ldr	r3, [pc, #236]	; (8009314 <tcp_process+0x59c>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800922c:	4b3a      	ldr	r3, [pc, #232]	; (8009318 <tcp_process+0x5a0>)
 800922e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009230:	885b      	ldrh	r3, [r3, #2]
 8009232:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009234:	4a38      	ldr	r2, [pc, #224]	; (8009318 <tcp_process+0x5a0>)
 8009236:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009238:	8812      	ldrh	r2, [r2, #0]
 800923a:	b292      	uxth	r2, r2
 800923c:	9202      	str	r2, [sp, #8]
 800923e:	9301      	str	r3, [sp, #4]
 8009240:	4b36      	ldr	r3, [pc, #216]	; (800931c <tcp_process+0x5a4>)
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	4b36      	ldr	r3, [pc, #216]	; (8009320 <tcp_process+0x5a8>)
 8009246:	4602      	mov	r2, r0
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f002 fbd1 	bl	800b9f0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800924e:	e167      	b.n	8009520 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009250:	4b2d      	ldr	r3, [pc, #180]	; (8009308 <tcp_process+0x590>)
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	f003 0302 	and.w	r3, r3, #2
 8009258:	2b00      	cmp	r3, #0
 800925a:	f000 8161 	beq.w	8009520 <tcp_process+0x7a8>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009262:	1e5a      	subs	r2, r3, #1
 8009264:	4b2b      	ldr	r3, [pc, #172]	; (8009314 <tcp_process+0x59c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	429a      	cmp	r2, r3
 800926a:	f040 8159 	bne.w	8009520 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f002 f9b6 	bl	800b5e0 <tcp_rexmit>
      break;
 8009274:	e154      	b.n	8009520 <tcp_process+0x7a8>
 8009276:	e153      	b.n	8009520 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fa71 	bl	8009760 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800927e:	4b2d      	ldr	r3, [pc, #180]	; (8009334 <tcp_process+0x5bc>)
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	f003 0320 	and.w	r3, r3, #32
 8009286:	2b00      	cmp	r3, #0
 8009288:	f000 814c 	beq.w	8009524 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	8b5b      	ldrh	r3, [r3, #26]
 8009290:	f043 0302 	orr.w	r3, r3, #2
 8009294:	b29a      	uxth	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2207      	movs	r2, #7
 800929e:	751a      	strb	r2, [r3, #20]
      }
      break;
 80092a0:	e140      	b.n	8009524 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 fa5c 	bl	8009760 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80092a8:	4b22      	ldr	r3, [pc, #136]	; (8009334 <tcp_process+0x5bc>)
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	f003 0320 	and.w	r3, r3, #32
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d071      	beq.n	8009398 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80092b4:	4b14      	ldr	r3, [pc, #80]	; (8009308 <tcp_process+0x590>)
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	f003 0310 	and.w	r3, r3, #16
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d060      	beq.n	8009382 <tcp_process+0x60a>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092c4:	4b11      	ldr	r3, [pc, #68]	; (800930c <tcp_process+0x594>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d15a      	bne.n	8009382 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d156      	bne.n	8009382 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	8b5b      	ldrh	r3, [r3, #26]
 80092d8:	f043 0302 	orr.w	r3, r3, #2
 80092dc:	b29a      	uxth	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f7fe fdbc 	bl	8007e60 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80092e8:	4b13      	ldr	r3, [pc, #76]	; (8009338 <tcp_process+0x5c0>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d105      	bne.n	80092fe <tcp_process+0x586>
 80092f2:	4b11      	ldr	r3, [pc, #68]	; (8009338 <tcp_process+0x5c0>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	4a0f      	ldr	r2, [pc, #60]	; (8009338 <tcp_process+0x5c0>)
 80092fa:	6013      	str	r3, [r2, #0]
 80092fc:	e02e      	b.n	800935c <tcp_process+0x5e4>
 80092fe:	4b0e      	ldr	r3, [pc, #56]	; (8009338 <tcp_process+0x5c0>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	617b      	str	r3, [r7, #20]
 8009304:	e027      	b.n	8009356 <tcp_process+0x5de>
 8009306:	bf00      	nop
 8009308:	200083ec 	.word	0x200083ec
 800930c:	200083e4 	.word	0x200083e4
 8009310:	200083ea 	.word	0x200083ea
 8009314:	200083e0 	.word	0x200083e0
 8009318:	200083d0 	.word	0x200083d0
 800931c:	20004dcc 	.word	0x20004dcc
 8009320:	20004dd0 	.word	0x20004dd0
 8009324:	0801198c 	.word	0x0801198c
 8009328:	08011c2c 	.word	0x08011c2c
 800932c:	080119d8 	.word	0x080119d8
 8009330:	200083e8 	.word	0x200083e8
 8009334:	200083ed 	.word	0x200083ed
 8009338:	200083b4 	.word	0x200083b4
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	429a      	cmp	r2, r3
 8009344:	d104      	bne.n	8009350 <tcp_process+0x5d8>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	68da      	ldr	r2, [r3, #12]
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	60da      	str	r2, [r3, #12]
 800934e:	e005      	b.n	800935c <tcp_process+0x5e4>
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	617b      	str	r3, [r7, #20]
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1ef      	bne.n	800933c <tcp_process+0x5c4>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	60da      	str	r2, [r3, #12]
 8009362:	4b77      	ldr	r3, [pc, #476]	; (8009540 <tcp_process+0x7c8>)
 8009364:	2201      	movs	r2, #1
 8009366:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	220a      	movs	r2, #10
 800936c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800936e:	4b75      	ldr	r3, [pc, #468]	; (8009544 <tcp_process+0x7cc>)
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	60da      	str	r2, [r3, #12]
 8009376:	4a73      	ldr	r2, [pc, #460]	; (8009544 <tcp_process+0x7cc>)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6013      	str	r3, [r2, #0]
 800937c:	f002 fcfa 	bl	800bd74 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009380:	e0d2      	b.n	8009528 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	8b5b      	ldrh	r3, [r3, #26]
 8009386:	f043 0302 	orr.w	r3, r3, #2
 800938a:	b29a      	uxth	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2208      	movs	r2, #8
 8009394:	751a      	strb	r2, [r3, #20]
      break;
 8009396:	e0c7      	b.n	8009528 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009398:	4b6b      	ldr	r3, [pc, #428]	; (8009548 <tcp_process+0x7d0>)
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	f003 0310 	and.w	r3, r3, #16
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 80c1 	beq.w	8009528 <tcp_process+0x7b0>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093aa:	4b68      	ldr	r3, [pc, #416]	; (800954c <tcp_process+0x7d4>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	f040 80ba 	bne.w	8009528 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f040 80b5 	bne.w	8009528 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2206      	movs	r2, #6
 80093c2:	751a      	strb	r2, [r3, #20]
      break;
 80093c4:	e0b0      	b.n	8009528 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f9ca 	bl	8009760 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80093cc:	4b60      	ldr	r3, [pc, #384]	; (8009550 <tcp_process+0x7d8>)
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	f003 0320 	and.w	r3, r3, #32
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f000 80a9 	beq.w	800952c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	8b5b      	ldrh	r3, [r3, #26]
 80093de:	f043 0302 	orr.w	r3, r3, #2
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f7fe fd39 	bl	8007e60 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80093ee:	4b59      	ldr	r3, [pc, #356]	; (8009554 <tcp_process+0x7dc>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d105      	bne.n	8009404 <tcp_process+0x68c>
 80093f8:	4b56      	ldr	r3, [pc, #344]	; (8009554 <tcp_process+0x7dc>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	4a55      	ldr	r2, [pc, #340]	; (8009554 <tcp_process+0x7dc>)
 8009400:	6013      	str	r3, [r2, #0]
 8009402:	e013      	b.n	800942c <tcp_process+0x6b4>
 8009404:	4b53      	ldr	r3, [pc, #332]	; (8009554 <tcp_process+0x7dc>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	613b      	str	r3, [r7, #16]
 800940a:	e00c      	b.n	8009426 <tcp_process+0x6ae>
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	429a      	cmp	r2, r3
 8009414:	d104      	bne.n	8009420 <tcp_process+0x6a8>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68da      	ldr	r2, [r3, #12]
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	60da      	str	r2, [r3, #12]
 800941e:	e005      	b.n	800942c <tcp_process+0x6b4>
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	613b      	str	r3, [r7, #16]
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1ef      	bne.n	800940c <tcp_process+0x694>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	60da      	str	r2, [r3, #12]
 8009432:	4b43      	ldr	r3, [pc, #268]	; (8009540 <tcp_process+0x7c8>)
 8009434:	2201      	movs	r2, #1
 8009436:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	220a      	movs	r2, #10
 800943c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800943e:	4b41      	ldr	r3, [pc, #260]	; (8009544 <tcp_process+0x7cc>)
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	60da      	str	r2, [r3, #12]
 8009446:	4a3f      	ldr	r2, [pc, #252]	; (8009544 <tcp_process+0x7cc>)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6013      	str	r3, [r2, #0]
 800944c:	f002 fc92 	bl	800bd74 <tcp_timer_needed>
      }
      break;
 8009450:	e06c      	b.n	800952c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f984 	bl	8009760 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009458:	4b3b      	ldr	r3, [pc, #236]	; (8009548 <tcp_process+0x7d0>)
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	f003 0310 	and.w	r3, r3, #16
 8009460:	2b00      	cmp	r3, #0
 8009462:	d065      	beq.n	8009530 <tcp_process+0x7b8>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009468:	4b38      	ldr	r3, [pc, #224]	; (800954c <tcp_process+0x7d4>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	429a      	cmp	r2, r3
 800946e:	d15f      	bne.n	8009530 <tcp_process+0x7b8>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009474:	2b00      	cmp	r3, #0
 8009476:	d15b      	bne.n	8009530 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f7fe fcf1 	bl	8007e60 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800947e:	4b35      	ldr	r3, [pc, #212]	; (8009554 <tcp_process+0x7dc>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	429a      	cmp	r2, r3
 8009486:	d105      	bne.n	8009494 <tcp_process+0x71c>
 8009488:	4b32      	ldr	r3, [pc, #200]	; (8009554 <tcp_process+0x7dc>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	4a31      	ldr	r2, [pc, #196]	; (8009554 <tcp_process+0x7dc>)
 8009490:	6013      	str	r3, [r2, #0]
 8009492:	e013      	b.n	80094bc <tcp_process+0x744>
 8009494:	4b2f      	ldr	r3, [pc, #188]	; (8009554 <tcp_process+0x7dc>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	60fb      	str	r3, [r7, #12]
 800949a:	e00c      	b.n	80094b6 <tcp_process+0x73e>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d104      	bne.n	80094b0 <tcp_process+0x738>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	68da      	ldr	r2, [r3, #12]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	60da      	str	r2, [r3, #12]
 80094ae:	e005      	b.n	80094bc <tcp_process+0x744>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	60fb      	str	r3, [r7, #12]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1ef      	bne.n	800949c <tcp_process+0x724>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	60da      	str	r2, [r3, #12]
 80094c2:	4b1f      	ldr	r3, [pc, #124]	; (8009540 <tcp_process+0x7c8>)
 80094c4:	2201      	movs	r2, #1
 80094c6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	220a      	movs	r2, #10
 80094cc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80094ce:	4b1d      	ldr	r3, [pc, #116]	; (8009544 <tcp_process+0x7cc>)
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	60da      	str	r2, [r3, #12]
 80094d6:	4a1b      	ldr	r2, [pc, #108]	; (8009544 <tcp_process+0x7cc>)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6013      	str	r3, [r2, #0]
 80094dc:	f002 fc4a 	bl	800bd74 <tcp_timer_needed>
      }
      break;
 80094e0:	e026      	b.n	8009530 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f93c 	bl	8009760 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80094e8:	4b17      	ldr	r3, [pc, #92]	; (8009548 <tcp_process+0x7d0>)
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	f003 0310 	and.w	r3, r3, #16
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d01f      	beq.n	8009534 <tcp_process+0x7bc>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094f8:	4b14      	ldr	r3, [pc, #80]	; (800954c <tcp_process+0x7d4>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d119      	bne.n	8009534 <tcp_process+0x7bc>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009504:	2b00      	cmp	r3, #0
 8009506:	d115      	bne.n	8009534 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009508:	4b11      	ldr	r3, [pc, #68]	; (8009550 <tcp_process+0x7d8>)
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	f043 0310 	orr.w	r3, r3, #16
 8009510:	b2da      	uxtb	r2, r3
 8009512:	4b0f      	ldr	r3, [pc, #60]	; (8009550 <tcp_process+0x7d8>)
 8009514:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009516:	e00d      	b.n	8009534 <tcp_process+0x7bc>
    default:
      break;
 8009518:	bf00      	nop
 800951a:	e00c      	b.n	8009536 <tcp_process+0x7be>
      break;
 800951c:	bf00      	nop
 800951e:	e00a      	b.n	8009536 <tcp_process+0x7be>
      break;
 8009520:	bf00      	nop
 8009522:	e008      	b.n	8009536 <tcp_process+0x7be>
      break;
 8009524:	bf00      	nop
 8009526:	e006      	b.n	8009536 <tcp_process+0x7be>
      break;
 8009528:	bf00      	nop
 800952a:	e004      	b.n	8009536 <tcp_process+0x7be>
      break;
 800952c:	bf00      	nop
 800952e:	e002      	b.n	8009536 <tcp_process+0x7be>
      break;
 8009530:	bf00      	nop
 8009532:	e000      	b.n	8009536 <tcp_process+0x7be>
      break;
 8009534:	bf00      	nop
  }
  return ERR_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3724      	adds	r7, #36	; 0x24
 800953c:	46bd      	mov	sp, r7
 800953e:	bd90      	pop	{r4, r7, pc}
 8009540:	200083bc 	.word	0x200083bc
 8009544:	200083b8 	.word	0x200083b8
 8009548:	200083ec 	.word	0x200083ec
 800954c:	200083e4 	.word	0x200083e4
 8009550:	200083ed 	.word	0x200083ed
 8009554:	200083b4 	.word	0x200083b4

08009558 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009558:	b590      	push	{r4, r7, lr}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d106      	bne.n	8009576 <tcp_oos_insert_segment+0x1e>
 8009568:	4b3b      	ldr	r3, [pc, #236]	; (8009658 <tcp_oos_insert_segment+0x100>)
 800956a:	f240 421f 	movw	r2, #1055	; 0x41f
 800956e:	493b      	ldr	r1, [pc, #236]	; (800965c <tcp_oos_insert_segment+0x104>)
 8009570:	483b      	ldr	r0, [pc, #236]	; (8009660 <tcp_oos_insert_segment+0x108>)
 8009572:	f005 fe19 	bl	800f1a8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	899b      	ldrh	r3, [r3, #12]
 800957c:	b29b      	uxth	r3, r3
 800957e:	4618      	mov	r0, r3
 8009580:	f7fb f974 	bl	800486c <lwip_htons>
 8009584:	4603      	mov	r3, r0
 8009586:	b2db      	uxtb	r3, r3
 8009588:	f003 0301 	and.w	r3, r3, #1
 800958c:	2b00      	cmp	r3, #0
 800958e:	d028      	beq.n	80095e2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009590:	6838      	ldr	r0, [r7, #0]
 8009592:	f7fe fa63 	bl	8007a5c <tcp_segs_free>
    next = NULL;
 8009596:	2300      	movs	r3, #0
 8009598:	603b      	str	r3, [r7, #0]
 800959a:	e056      	b.n	800964a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	899b      	ldrh	r3, [r3, #12]
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7fb f961 	bl	800486c <lwip_htons>
 80095aa:	4603      	mov	r3, r0
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00d      	beq.n	80095d2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	899b      	ldrh	r3, [r3, #12]
 80095bc:	b29c      	uxth	r4, r3
 80095be:	2001      	movs	r0, #1
 80095c0:	f7fb f954 	bl	800486c <lwip_htons>
 80095c4:	4603      	mov	r3, r0
 80095c6:	461a      	mov	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	4322      	orrs	r2, r4
 80095ce:	b292      	uxth	r2, r2
 80095d0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f7fe fa52 	bl	8007a86 <tcp_seg_free>
    while (next &&
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00e      	beq.n	8009606 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	891b      	ldrh	r3, [r3, #8]
 80095ec:	461a      	mov	r2, r3
 80095ee:	4b1d      	ldr	r3, [pc, #116]	; (8009664 <tcp_oos_insert_segment+0x10c>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	441a      	add	r2, r3
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	6839      	ldr	r1, [r7, #0]
 80095fc:	8909      	ldrh	r1, [r1, #8]
 80095fe:	440b      	add	r3, r1
 8009600:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009602:	2b00      	cmp	r3, #0
 8009604:	daca      	bge.n	800959c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d01e      	beq.n	800964a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	891b      	ldrh	r3, [r3, #8]
 8009610:	461a      	mov	r2, r3
 8009612:	4b14      	ldr	r3, [pc, #80]	; (8009664 <tcp_oos_insert_segment+0x10c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	441a      	add	r2, r3
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009620:	2b00      	cmp	r3, #0
 8009622:	dd12      	ble.n	800964a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	b29a      	uxth	r2, r3
 800962c:	4b0d      	ldr	r3, [pc, #52]	; (8009664 <tcp_oos_insert_segment+0x10c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	b29b      	uxth	r3, r3
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	b29a      	uxth	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	685a      	ldr	r2, [r3, #4]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	891b      	ldrh	r3, [r3, #8]
 8009642:	4619      	mov	r1, r3
 8009644:	4610      	mov	r0, r2
 8009646:	f7fc fb5b 	bl	8005d00 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	683a      	ldr	r2, [r7, #0]
 800964e:	601a      	str	r2, [r3, #0]
}
 8009650:	bf00      	nop
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	bd90      	pop	{r4, r7, pc}
 8009658:	0801198c 	.word	0x0801198c
 800965c:	08011c4c 	.word	0x08011c4c
 8009660:	080119d8 	.word	0x080119d8
 8009664:	200083e0 	.word	0x200083e0

08009668 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009668:	b5b0      	push	{r4, r5, r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
 8009674:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009676:	e03e      	b.n	80096f6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	4618      	mov	r0, r3
 8009688:	f7fc fd5a 	bl	8006140 <pbuf_clen>
 800968c:	4603      	mov	r3, r0
 800968e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009696:	8a7a      	ldrh	r2, [r7, #18]
 8009698:	429a      	cmp	r2, r3
 800969a:	d906      	bls.n	80096aa <tcp_free_acked_segments+0x42>
 800969c:	4b2a      	ldr	r3, [pc, #168]	; (8009748 <tcp_free_acked_segments+0xe0>)
 800969e:	f240 4257 	movw	r2, #1111	; 0x457
 80096a2:	492a      	ldr	r1, [pc, #168]	; (800974c <tcp_free_acked_segments+0xe4>)
 80096a4:	482a      	ldr	r0, [pc, #168]	; (8009750 <tcp_free_acked_segments+0xe8>)
 80096a6:	f005 fd7f 	bl	800f1a8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80096b0:	8a7b      	ldrh	r3, [r7, #18]
 80096b2:	1ad3      	subs	r3, r2, r3
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	891a      	ldrh	r2, [r3, #8]
 80096c0:	4b24      	ldr	r3, [pc, #144]	; (8009754 <tcp_free_acked_segments+0xec>)
 80096c2:	881b      	ldrh	r3, [r3, #0]
 80096c4:	4413      	add	r3, r2
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	4b22      	ldr	r3, [pc, #136]	; (8009754 <tcp_free_acked_segments+0xec>)
 80096ca:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80096cc:	6978      	ldr	r0, [r7, #20]
 80096ce:	f7fe f9da 	bl	8007a86 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d00c      	beq.n	80096f6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d109      	bne.n	80096f6 <tcp_free_acked_segments+0x8e>
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d106      	bne.n	80096f6 <tcp_free_acked_segments+0x8e>
 80096e8:	4b17      	ldr	r3, [pc, #92]	; (8009748 <tcp_free_acked_segments+0xe0>)
 80096ea:	f240 4261 	movw	r2, #1121	; 0x461
 80096ee:	491a      	ldr	r1, [pc, #104]	; (8009758 <tcp_free_acked_segments+0xf0>)
 80096f0:	4817      	ldr	r0, [pc, #92]	; (8009750 <tcp_free_acked_segments+0xe8>)
 80096f2:	f005 fd59 	bl	800f1a8 <iprintf>
  while (seg_list != NULL &&
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d020      	beq.n	800973e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	4618      	mov	r0, r3
 8009704:	f7fb f8c7 	bl	8004896 <lwip_htonl>
 8009708:	4604      	mov	r4, r0
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	891b      	ldrh	r3, [r3, #8]
 800970e:	461d      	mov	r5, r3
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	899b      	ldrh	r3, [r3, #12]
 8009716:	b29b      	uxth	r3, r3
 8009718:	4618      	mov	r0, r3
 800971a:	f7fb f8a7 	bl	800486c <lwip_htons>
 800971e:	4603      	mov	r3, r0
 8009720:	b2db      	uxtb	r3, r3
 8009722:	f003 0303 	and.w	r3, r3, #3
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <tcp_free_acked_segments+0xc6>
 800972a:	2301      	movs	r3, #1
 800972c:	e000      	b.n	8009730 <tcp_free_acked_segments+0xc8>
 800972e:	2300      	movs	r3, #0
 8009730:	442b      	add	r3, r5
 8009732:	18e2      	adds	r2, r4, r3
 8009734:	4b09      	ldr	r3, [pc, #36]	; (800975c <tcp_free_acked_segments+0xf4>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800973a:	2b00      	cmp	r3, #0
 800973c:	dd9c      	ble.n	8009678 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800973e:	68bb      	ldr	r3, [r7, #8]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3718      	adds	r7, #24
 8009744:	46bd      	mov	sp, r7
 8009746:	bdb0      	pop	{r4, r5, r7, pc}
 8009748:	0801198c 	.word	0x0801198c
 800974c:	08011c74 	.word	0x08011c74
 8009750:	080119d8 	.word	0x080119d8
 8009754:	200083e8 	.word	0x200083e8
 8009758:	08011c9c 	.word	0x08011c9c
 800975c:	200083e4 	.word	0x200083e4

08009760 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009760:	b5b0      	push	{r4, r5, r7, lr}
 8009762:	b094      	sub	sp, #80	; 0x50
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009768:	2300      	movs	r3, #0
 800976a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d106      	bne.n	8009780 <tcp_receive+0x20>
 8009772:	4b91      	ldr	r3, [pc, #580]	; (80099b8 <tcp_receive+0x258>)
 8009774:	f240 427b 	movw	r2, #1147	; 0x47b
 8009778:	4990      	ldr	r1, [pc, #576]	; (80099bc <tcp_receive+0x25c>)
 800977a:	4891      	ldr	r0, [pc, #580]	; (80099c0 <tcp_receive+0x260>)
 800977c:	f005 fd14 	bl	800f1a8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	7d1b      	ldrb	r3, [r3, #20]
 8009784:	2b03      	cmp	r3, #3
 8009786:	d806      	bhi.n	8009796 <tcp_receive+0x36>
 8009788:	4b8b      	ldr	r3, [pc, #556]	; (80099b8 <tcp_receive+0x258>)
 800978a:	f240 427c 	movw	r2, #1148	; 0x47c
 800978e:	498d      	ldr	r1, [pc, #564]	; (80099c4 <tcp_receive+0x264>)
 8009790:	488b      	ldr	r0, [pc, #556]	; (80099c0 <tcp_receive+0x260>)
 8009792:	f005 fd09 	bl	800f1a8 <iprintf>

  if (flags & TCP_ACK) {
 8009796:	4b8c      	ldr	r3, [pc, #560]	; (80099c8 <tcp_receive+0x268>)
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	f003 0310 	and.w	r3, r3, #16
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f000 8264 	beq.w	8009c6c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80097aa:	461a      	mov	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097b0:	4413      	add	r3, r2
 80097b2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097b8:	4b84      	ldr	r3, [pc, #528]	; (80099cc <tcp_receive+0x26c>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	1ad3      	subs	r3, r2, r3
 80097be:	2b00      	cmp	r3, #0
 80097c0:	db1b      	blt.n	80097fa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097c6:	4b81      	ldr	r3, [pc, #516]	; (80099cc <tcp_receive+0x26c>)
 80097c8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d106      	bne.n	80097dc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80097d2:	4b7f      	ldr	r3, [pc, #508]	; (80099d0 <tcp_receive+0x270>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	1ad3      	subs	r3, r2, r3
 80097d8:	2b00      	cmp	r3, #0
 80097da:	db0e      	blt.n	80097fa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80097e0:	4b7b      	ldr	r3, [pc, #492]	; (80099d0 <tcp_receive+0x270>)
 80097e2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d125      	bne.n	8009834 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80097e8:	4b7a      	ldr	r3, [pc, #488]	; (80099d4 <tcp_receive+0x274>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	89db      	ldrh	r3, [r3, #14]
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d91c      	bls.n	8009834 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80097fa:	4b76      	ldr	r3, [pc, #472]	; (80099d4 <tcp_receive+0x274>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	89db      	ldrh	r3, [r3, #14]
 8009800:	b29a      	uxth	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009814:	429a      	cmp	r2, r3
 8009816:	d205      	bcs.n	8009824 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009824:	4b69      	ldr	r3, [pc, #420]	; (80099cc <tcp_receive+0x26c>)
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800982c:	4b68      	ldr	r3, [pc, #416]	; (80099d0 <tcp_receive+0x270>)
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009834:	4b66      	ldr	r3, [pc, #408]	; (80099d0 <tcp_receive+0x270>)
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800983c:	1ad3      	subs	r3, r2, r3
 800983e:	2b00      	cmp	r3, #0
 8009840:	dc58      	bgt.n	80098f4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009842:	4b65      	ldr	r3, [pc, #404]	; (80099d8 <tcp_receive+0x278>)
 8009844:	881b      	ldrh	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d14b      	bne.n	80098e2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009854:	4413      	add	r3, r2
 8009856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009858:	429a      	cmp	r2, r3
 800985a:	d142      	bne.n	80098e2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009862:	2b00      	cmp	r3, #0
 8009864:	db3d      	blt.n	80098e2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800986a:	4b59      	ldr	r3, [pc, #356]	; (80099d0 <tcp_receive+0x270>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	429a      	cmp	r2, r3
 8009870:	d137      	bne.n	80098e2 <tcp_receive+0x182>
              found_dupack = 1;
 8009872:	2301      	movs	r3, #1
 8009874:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800987c:	2bff      	cmp	r3, #255	; 0xff
 800987e:	d007      	beq.n	8009890 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009886:	3301      	adds	r3, #1
 8009888:	b2da      	uxtb	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009896:	2b03      	cmp	r3, #3
 8009898:	d91b      	bls.n	80098d2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098a4:	4413      	add	r3, r2
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d30a      	bcc.n	80098c8 <tcp_receive+0x168>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098bc:	4413      	add	r3, r2
 80098be:	b29a      	uxth	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80098c6:	e004      	b.n	80098d2 <tcp_receive+0x172>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80098d8:	2b02      	cmp	r3, #2
 80098da:	d902      	bls.n	80098e2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f001 feeb 	bl	800b6b8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80098e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f040 8161 	bne.w	8009bac <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098f2:	e15b      	b.n	8009bac <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80098f4:	4b36      	ldr	r3, [pc, #216]	; (80099d0 <tcp_receive+0x270>)
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	3b01      	subs	r3, #1
 8009900:	2b00      	cmp	r3, #0
 8009902:	f2c0 814e 	blt.w	8009ba2 <tcp_receive+0x442>
 8009906:	4b32      	ldr	r3, [pc, #200]	; (80099d0 <tcp_receive+0x270>)
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800990e:	1ad3      	subs	r3, r2, r3
 8009910:	2b00      	cmp	r3, #0
 8009912:	f300 8146 	bgt.w	8009ba2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	8b5b      	ldrh	r3, [r3, #26]
 800991a:	f003 0304 	and.w	r3, r3, #4
 800991e:	2b00      	cmp	r3, #0
 8009920:	d010      	beq.n	8009944 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	8b5b      	ldrh	r3, [r3, #26]
 8009926:	f023 0304 	bic.w	r3, r3, #4
 800992a:	b29a      	uxth	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009952:	10db      	asrs	r3, r3, #3
 8009954:	b21b      	sxth	r3, r3
 8009956:	b29a      	uxth	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800995e:	b29b      	uxth	r3, r3
 8009960:	4413      	add	r3, r2
 8009962:	b29b      	uxth	r3, r3
 8009964:	b21a      	sxth	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800996c:	4b18      	ldr	r3, [pc, #96]	; (80099d0 <tcp_receive+0x270>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	b29a      	uxth	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009976:	b29b      	uxth	r3, r3
 8009978:	1ad3      	subs	r3, r2, r3
 800997a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009984:	4b12      	ldr	r3, [pc, #72]	; (80099d0 <tcp_receive+0x270>)
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	7d1b      	ldrb	r3, [r3, #20]
 8009990:	2b03      	cmp	r3, #3
 8009992:	f240 8097 	bls.w	8009ac4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d245      	bcs.n	8009a32 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	8b5b      	ldrh	r3, [r3, #26]
 80099aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d014      	beq.n	80099dc <tcp_receive+0x27c>
 80099b2:	2301      	movs	r3, #1
 80099b4:	e013      	b.n	80099de <tcp_receive+0x27e>
 80099b6:	bf00      	nop
 80099b8:	0801198c 	.word	0x0801198c
 80099bc:	08011cbc 	.word	0x08011cbc
 80099c0:	080119d8 	.word	0x080119d8
 80099c4:	08011cd8 	.word	0x08011cd8
 80099c8:	200083ec 	.word	0x200083ec
 80099cc:	200083e0 	.word	0x200083e0
 80099d0:	200083e4 	.word	0x200083e4
 80099d4:	200083d0 	.word	0x200083d0
 80099d8:	200083ea 	.word	0x200083ea
 80099dc:	2302      	movs	r3, #2
 80099de:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80099e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099ec:	fb12 f303 	smulbb	r3, r2, r3
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80099f4:	4293      	cmp	r3, r2
 80099f6:	bf28      	it	cs
 80099f8:	4613      	movcs	r3, r2
 80099fa:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009a02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009a04:	4413      	add	r3, r2
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d309      	bcc.n	8009a26 <tcp_receive+0x2c6>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009a18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009a1a:	4413      	add	r3, r2
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009a24:	e04e      	b.n	8009ac4 <tcp_receive+0x364>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009a30:	e048      	b.n	8009ac4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009a38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009a3a:	4413      	add	r3, r2
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d309      	bcc.n	8009a5c <tcp_receive+0x2fc>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009a4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009a50:	4413      	add	r3, r2
 8009a52:	b29a      	uxth	r2, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009a5a:	e004      	b.n	8009a66 <tcp_receive+0x306>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d326      	bcc.n	8009ac4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a96:	4413      	add	r3, r2
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d30a      	bcc.n	8009aba <tcp_receive+0x35a>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009aae:	4413      	add	r3, r2
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009ab8:	e004      	b.n	8009ac4 <tcp_receive+0x364>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ac0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009acc:	4a98      	ldr	r2, [pc, #608]	; (8009d30 <tcp_receive+0x5d0>)
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7ff fdca 	bl	8009668 <tcp_free_acked_segments>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ae2:	4a94      	ldr	r2, [pc, #592]	; (8009d34 <tcp_receive+0x5d4>)
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f7ff fdbf 	bl	8009668 <tcp_free_acked_segments>
 8009aea:	4602      	mov	r2, r0
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d104      	bne.n	8009b02 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009afe:	861a      	strh	r2, [r3, #48]	; 0x30
 8009b00:	e002      	b.n	8009b08 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d103      	bne.n	8009b1e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009b24:	4b84      	ldr	r3, [pc, #528]	; (8009d38 <tcp_receive+0x5d8>)
 8009b26:	881b      	ldrh	r3, [r3, #0]
 8009b28:	4413      	add	r3, r2
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	8b5b      	ldrh	r3, [r3, #26]
 8009b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d035      	beq.n	8009baa <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d118      	bne.n	8009b78 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00c      	beq.n	8009b68 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fa fe9b 	bl	8004896 <lwip_htonl>
 8009b60:	4603      	mov	r3, r0
 8009b62:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	dc20      	bgt.n	8009baa <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	8b5b      	ldrh	r3, [r3, #26]
 8009b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009b76:	e018      	b.n	8009baa <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7fa fe86 	bl	8004896 <lwip_htonl>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	1ae3      	subs	r3, r4, r3
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	dc0b      	bgt.n	8009baa <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	8b5b      	ldrh	r3, [r3, #26]
 8009b96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009ba0:	e003      	b.n	8009baa <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f001 ff76 	bl	800ba94 <tcp_send_empty_ack>
 8009ba8:	e000      	b.n	8009bac <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009baa:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d05b      	beq.n	8009c6c <tcp_receive+0x50c>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bb8:	4b60      	ldr	r3, [pc, #384]	; (8009d3c <tcp_receive+0x5dc>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	1ad3      	subs	r3, r2, r3
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	da54      	bge.n	8009c6c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009bc2:	4b5f      	ldr	r3, [pc, #380]	; (8009d40 <tcp_receive+0x5e0>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009bd6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009be0:	10db      	asrs	r3, r3, #3
 8009be2:	b21b      	sxth	r3, r3
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	1ad3      	subs	r3, r2, r3
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009bfa:	4413      	add	r3, r2
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	b21a      	sxth	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009c04:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	da05      	bge.n	8009c18 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009c0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009c10:	425b      	negs	r3, r3
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009c18:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009c22:	109b      	asrs	r3, r3, #2
 8009c24:	b21b      	sxth	r3, r3
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009c3c:	4413      	add	r3, r2
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	b21a      	sxth	r2, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009c4c:	10db      	asrs	r3, r3, #3
 8009c4e:	b21b      	sxth	r3, r3
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	4413      	add	r3, r2
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	b21a      	sxth	r2, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009c6c:	4b35      	ldr	r3, [pc, #212]	; (8009d44 <tcp_receive+0x5e4>)
 8009c6e:	881b      	ldrh	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f000 84e2 	beq.w	800a63a <tcp_receive+0xeda>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	7d1b      	ldrb	r3, [r3, #20]
 8009c7a:	2b06      	cmp	r3, #6
 8009c7c:	f200 84dd 	bhi.w	800a63a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c84:	4b30      	ldr	r3, [pc, #192]	; (8009d48 <tcp_receive+0x5e8>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	1ad3      	subs	r3, r2, r3
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f2c0 808f 	blt.w	8009db0 <tcp_receive+0x650>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c96:	4b2b      	ldr	r3, [pc, #172]	; (8009d44 <tcp_receive+0x5e4>)
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	4b2a      	ldr	r3, [pc, #168]	; (8009d48 <tcp_receive+0x5e8>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	440b      	add	r3, r1
 8009ca2:	1ad3      	subs	r3, r2, r3
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f300 8082 	bgt.w	8009db0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009cac:	4b27      	ldr	r3, [pc, #156]	; (8009d4c <tcp_receive+0x5ec>)
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009cb6:	4b24      	ldr	r3, [pc, #144]	; (8009d48 <tcp_receive+0x5e8>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	1ad3      	subs	r3, r2, r3
 8009cbc:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009cbe:	4b23      	ldr	r3, [pc, #140]	; (8009d4c <tcp_receive+0x5ec>)
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d106      	bne.n	8009cd4 <tcp_receive+0x574>
 8009cc6:	4b22      	ldr	r3, [pc, #136]	; (8009d50 <tcp_receive+0x5f0>)
 8009cc8:	f240 5294 	movw	r2, #1428	; 0x594
 8009ccc:	4921      	ldr	r1, [pc, #132]	; (8009d54 <tcp_receive+0x5f4>)
 8009cce:	4822      	ldr	r0, [pc, #136]	; (8009d58 <tcp_receive+0x5f8>)
 8009cd0:	f005 fa6a 	bl	800f1a8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d906      	bls.n	8009cec <tcp_receive+0x58c>
 8009cde:	4b1c      	ldr	r3, [pc, #112]	; (8009d50 <tcp_receive+0x5f0>)
 8009ce0:	f240 5295 	movw	r2, #1429	; 0x595
 8009ce4:	491d      	ldr	r1, [pc, #116]	; (8009d5c <tcp_receive+0x5fc>)
 8009ce6:	481c      	ldr	r0, [pc, #112]	; (8009d58 <tcp_receive+0x5f8>)
 8009ce8:	f005 fa5e 	bl	800f1a8 <iprintf>
      off = (u16_t)off32;
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009cf2:	4b16      	ldr	r3, [pc, #88]	; (8009d4c <tcp_receive+0x5ec>)
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	891b      	ldrh	r3, [r3, #8]
 8009cf8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d906      	bls.n	8009d0e <tcp_receive+0x5ae>
 8009d00:	4b13      	ldr	r3, [pc, #76]	; (8009d50 <tcp_receive+0x5f0>)
 8009d02:	f240 5297 	movw	r2, #1431	; 0x597
 8009d06:	4916      	ldr	r1, [pc, #88]	; (8009d60 <tcp_receive+0x600>)
 8009d08:	4813      	ldr	r0, [pc, #76]	; (8009d58 <tcp_receive+0x5f8>)
 8009d0a:	f005 fa4d 	bl	800f1a8 <iprintf>
      inseg.len -= off;
 8009d0e:	4b0f      	ldr	r3, [pc, #60]	; (8009d4c <tcp_receive+0x5ec>)
 8009d10:	891a      	ldrh	r2, [r3, #8]
 8009d12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009d16:	1ad3      	subs	r3, r2, r3
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	4b0c      	ldr	r3, [pc, #48]	; (8009d4c <tcp_receive+0x5ec>)
 8009d1c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009d1e:	4b0b      	ldr	r3, [pc, #44]	; (8009d4c <tcp_receive+0x5ec>)
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	891a      	ldrh	r2, [r3, #8]
 8009d24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009d2c:	e02a      	b.n	8009d84 <tcp_receive+0x624>
 8009d2e:	bf00      	nop
 8009d30:	08011cf4 	.word	0x08011cf4
 8009d34:	08011cfc 	.word	0x08011cfc
 8009d38:	200083e8 	.word	0x200083e8
 8009d3c:	200083e4 	.word	0x200083e4
 8009d40:	200083a8 	.word	0x200083a8
 8009d44:	200083ea 	.word	0x200083ea
 8009d48:	200083e0 	.word	0x200083e0
 8009d4c:	200083c0 	.word	0x200083c0
 8009d50:	0801198c 	.word	0x0801198c
 8009d54:	08011d04 	.word	0x08011d04
 8009d58:	080119d8 	.word	0x080119d8
 8009d5c:	08011d14 	.word	0x08011d14
 8009d60:	08011d24 	.word	0x08011d24
        off -= p->len;
 8009d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d66:	895b      	ldrh	r3, [r3, #10]
 8009d68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009d6c:	1ad3      	subs	r3, r2, r3
 8009d6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d74:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009d76:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d86:	895b      	ldrh	r3, [r3, #10]
 8009d88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d8e9      	bhi.n	8009d64 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009d90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009d94:	4619      	mov	r1, r3
 8009d96:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009d98:	f7fc f8b2 	bl	8005f00 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da0:	4a91      	ldr	r2, [pc, #580]	; (8009fe8 <tcp_receive+0x888>)
 8009da2:	6013      	str	r3, [r2, #0]
 8009da4:	4b91      	ldr	r3, [pc, #580]	; (8009fec <tcp_receive+0x88c>)
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	4a8f      	ldr	r2, [pc, #572]	; (8009fe8 <tcp_receive+0x888>)
 8009daa:	6812      	ldr	r2, [r2, #0]
 8009dac:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009dae:	e00d      	b.n	8009dcc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009db0:	4b8d      	ldr	r3, [pc, #564]	; (8009fe8 <tcp_receive+0x888>)
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	da06      	bge.n	8009dcc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	8b5b      	ldrh	r3, [r3, #26]
 8009dc2:	f043 0302 	orr.w	r3, r3, #2
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009dcc:	4b86      	ldr	r3, [pc, #536]	; (8009fe8 <tcp_receive+0x888>)
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f2c0 842a 	blt.w	800a630 <tcp_receive+0xed0>
 8009ddc:	4b82      	ldr	r3, [pc, #520]	; (8009fe8 <tcp_receive+0x888>)
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de4:	6879      	ldr	r1, [r7, #4]
 8009de6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009de8:	440b      	add	r3, r1
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	3301      	adds	r3, #1
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f300 841e 	bgt.w	800a630 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009df8:	4b7b      	ldr	r3, [pc, #492]	; (8009fe8 <tcp_receive+0x888>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	f040 829a 	bne.w	800a336 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009e02:	4b7a      	ldr	r3, [pc, #488]	; (8009fec <tcp_receive+0x88c>)
 8009e04:	891c      	ldrh	r4, [r3, #8]
 8009e06:	4b79      	ldr	r3, [pc, #484]	; (8009fec <tcp_receive+0x88c>)
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	899b      	ldrh	r3, [r3, #12]
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7fa fd2c 	bl	800486c <lwip_htons>
 8009e14:	4603      	mov	r3, r0
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	f003 0303 	and.w	r3, r3, #3
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d001      	beq.n	8009e24 <tcp_receive+0x6c4>
 8009e20:	2301      	movs	r3, #1
 8009e22:	e000      	b.n	8009e26 <tcp_receive+0x6c6>
 8009e24:	2300      	movs	r3, #0
 8009e26:	4423      	add	r3, r4
 8009e28:	b29a      	uxth	r2, r3
 8009e2a:	4b71      	ldr	r3, [pc, #452]	; (8009ff0 <tcp_receive+0x890>)
 8009e2c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009e32:	4b6f      	ldr	r3, [pc, #444]	; (8009ff0 <tcp_receive+0x890>)
 8009e34:	881b      	ldrh	r3, [r3, #0]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d275      	bcs.n	8009f26 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009e3a:	4b6c      	ldr	r3, [pc, #432]	; (8009fec <tcp_receive+0x88c>)
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	899b      	ldrh	r3, [r3, #12]
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fa fd12 	bl	800486c <lwip_htons>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	f003 0301 	and.w	r3, r3, #1
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d01f      	beq.n	8009e94 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009e54:	4b65      	ldr	r3, [pc, #404]	; (8009fec <tcp_receive+0x88c>)
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	899b      	ldrh	r3, [r3, #12]
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	b21b      	sxth	r3, r3
 8009e5e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009e62:	b21c      	sxth	r4, r3
 8009e64:	4b61      	ldr	r3, [pc, #388]	; (8009fec <tcp_receive+0x88c>)
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	899b      	ldrh	r3, [r3, #12]
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fa fcfd 	bl	800486c <lwip_htons>
 8009e72:	4603      	mov	r3, r0
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7fa fcf4 	bl	800486c <lwip_htons>
 8009e84:	4603      	mov	r3, r0
 8009e86:	b21b      	sxth	r3, r3
 8009e88:	4323      	orrs	r3, r4
 8009e8a:	b21a      	sxth	r2, r3
 8009e8c:	4b57      	ldr	r3, [pc, #348]	; (8009fec <tcp_receive+0x88c>)
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	b292      	uxth	r2, r2
 8009e92:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009e98:	4b54      	ldr	r3, [pc, #336]	; (8009fec <tcp_receive+0x88c>)
 8009e9a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009e9c:	4b53      	ldr	r3, [pc, #332]	; (8009fec <tcp_receive+0x88c>)
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	899b      	ldrh	r3, [r3, #12]
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7fa fce1 	bl	800486c <lwip_htons>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	f003 0302 	and.w	r3, r3, #2
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d005      	beq.n	8009ec2 <tcp_receive+0x762>
            inseg.len -= 1;
 8009eb6:	4b4d      	ldr	r3, [pc, #308]	; (8009fec <tcp_receive+0x88c>)
 8009eb8:	891b      	ldrh	r3, [r3, #8]
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	4b4b      	ldr	r3, [pc, #300]	; (8009fec <tcp_receive+0x88c>)
 8009ec0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009ec2:	4b4a      	ldr	r3, [pc, #296]	; (8009fec <tcp_receive+0x88c>)
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	4a49      	ldr	r2, [pc, #292]	; (8009fec <tcp_receive+0x88c>)
 8009ec8:	8912      	ldrh	r2, [r2, #8]
 8009eca:	4611      	mov	r1, r2
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7fb ff17 	bl	8005d00 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009ed2:	4b46      	ldr	r3, [pc, #280]	; (8009fec <tcp_receive+0x88c>)
 8009ed4:	891c      	ldrh	r4, [r3, #8]
 8009ed6:	4b45      	ldr	r3, [pc, #276]	; (8009fec <tcp_receive+0x88c>)
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	899b      	ldrh	r3, [r3, #12]
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7fa fcc4 	bl	800486c <lwip_htons>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	f003 0303 	and.w	r3, r3, #3
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d001      	beq.n	8009ef4 <tcp_receive+0x794>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e000      	b.n	8009ef6 <tcp_receive+0x796>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4423      	add	r3, r4
 8009ef8:	b29a      	uxth	r2, r3
 8009efa:	4b3d      	ldr	r3, [pc, #244]	; (8009ff0 <tcp_receive+0x890>)
 8009efc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009efe:	4b3c      	ldr	r3, [pc, #240]	; (8009ff0 <tcp_receive+0x890>)
 8009f00:	881b      	ldrh	r3, [r3, #0]
 8009f02:	461a      	mov	r2, r3
 8009f04:	4b38      	ldr	r3, [pc, #224]	; (8009fe8 <tcp_receive+0x888>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	441a      	add	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0e:	6879      	ldr	r1, [r7, #4]
 8009f10:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009f12:	440b      	add	r3, r1
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d006      	beq.n	8009f26 <tcp_receive+0x7c6>
 8009f18:	4b36      	ldr	r3, [pc, #216]	; (8009ff4 <tcp_receive+0x894>)
 8009f1a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009f1e:	4936      	ldr	r1, [pc, #216]	; (8009ff8 <tcp_receive+0x898>)
 8009f20:	4836      	ldr	r0, [pc, #216]	; (8009ffc <tcp_receive+0x89c>)
 8009f22:	f005 f941 	bl	800f1a8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f000 80e7 	beq.w	800a0fe <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009f30:	4b2e      	ldr	r3, [pc, #184]	; (8009fec <tcp_receive+0x88c>)
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	899b      	ldrh	r3, [r3, #12]
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7fa fc97 	bl	800486c <lwip_htons>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	f003 0301 	and.w	r3, r3, #1
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d010      	beq.n	8009f6c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009f4a:	e00a      	b.n	8009f62 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f50:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f7fd fd92 	bl	8007a86 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1f0      	bne.n	8009f4c <tcp_receive+0x7ec>
 8009f6a:	e0c8      	b.n	800a0fe <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f70:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009f72:	e052      	b.n	800a01a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	899b      	ldrh	r3, [r3, #12]
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fa fc75 	bl	800486c <lwip_htons>
 8009f82:	4603      	mov	r3, r0
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	f003 0301 	and.w	r3, r3, #1
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d03d      	beq.n	800a00a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009f8e:	4b17      	ldr	r3, [pc, #92]	; (8009fec <tcp_receive+0x88c>)
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	899b      	ldrh	r3, [r3, #12]
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fa fc68 	bl	800486c <lwip_htons>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d130      	bne.n	800a00a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009fa8:	4b10      	ldr	r3, [pc, #64]	; (8009fec <tcp_receive+0x88c>)
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	899b      	ldrh	r3, [r3, #12]
 8009fae:	b29c      	uxth	r4, r3
 8009fb0:	2001      	movs	r0, #1
 8009fb2:	f7fa fc5b 	bl	800486c <lwip_htons>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	461a      	mov	r2, r3
 8009fba:	4b0c      	ldr	r3, [pc, #48]	; (8009fec <tcp_receive+0x88c>)
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	4322      	orrs	r2, r4
 8009fc0:	b292      	uxth	r2, r2
 8009fc2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009fc4:	4b09      	ldr	r3, [pc, #36]	; (8009fec <tcp_receive+0x88c>)
 8009fc6:	891c      	ldrh	r4, [r3, #8]
 8009fc8:	4b08      	ldr	r3, [pc, #32]	; (8009fec <tcp_receive+0x88c>)
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	899b      	ldrh	r3, [r3, #12]
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7fa fc4b 	bl	800486c <lwip_htons>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	f003 0303 	and.w	r3, r3, #3
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00e      	beq.n	800a000 <tcp_receive+0x8a0>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e00d      	b.n	800a002 <tcp_receive+0x8a2>
 8009fe6:	bf00      	nop
 8009fe8:	200083e0 	.word	0x200083e0
 8009fec:	200083c0 	.word	0x200083c0
 8009ff0:	200083ea 	.word	0x200083ea
 8009ff4:	0801198c 	.word	0x0801198c
 8009ff8:	08011d34 	.word	0x08011d34
 8009ffc:	080119d8 	.word	0x080119d8
 800a000:	2300      	movs	r3, #0
 800a002:	4423      	add	r3, r4
 800a004:	b29a      	uxth	r2, r3
 800a006:	4b98      	ldr	r3, [pc, #608]	; (800a268 <tcp_receive+0xb08>)
 800a008:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a00c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a00e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a014:	6938      	ldr	r0, [r7, #16]
 800a016:	f7fd fd36 	bl	8007a86 <tcp_seg_free>
            while (next &&
 800a01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00e      	beq.n	800a03e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a020:	4b91      	ldr	r3, [pc, #580]	; (800a268 <tcp_receive+0xb08>)
 800a022:	881b      	ldrh	r3, [r3, #0]
 800a024:	461a      	mov	r2, r3
 800a026:	4b91      	ldr	r3, [pc, #580]	; (800a26c <tcp_receive+0xb0c>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	441a      	add	r2, r3
 800a02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a034:	8909      	ldrh	r1, [r1, #8]
 800a036:	440b      	add	r3, r1
 800a038:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	da9a      	bge.n	8009f74 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a040:	2b00      	cmp	r3, #0
 800a042:	d059      	beq.n	800a0f8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800a044:	4b88      	ldr	r3, [pc, #544]	; (800a268 <tcp_receive+0xb08>)
 800a046:	881b      	ldrh	r3, [r3, #0]
 800a048:	461a      	mov	r2, r3
 800a04a:	4b88      	ldr	r3, [pc, #544]	; (800a26c <tcp_receive+0xb0c>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	441a      	add	r2, r3
 800a050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a058:	2b00      	cmp	r3, #0
 800a05a:	dd4d      	ble.n	800a0f8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	b29a      	uxth	r2, r3
 800a064:	4b81      	ldr	r3, [pc, #516]	; (800a26c <tcp_receive+0xb0c>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	b29b      	uxth	r3, r3
 800a06a:	1ad3      	subs	r3, r2, r3
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	4b80      	ldr	r3, [pc, #512]	; (800a270 <tcp_receive+0xb10>)
 800a070:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a072:	4b7f      	ldr	r3, [pc, #508]	; (800a270 <tcp_receive+0xb10>)
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	899b      	ldrh	r3, [r3, #12]
 800a078:	b29b      	uxth	r3, r3
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fa fbf6 	bl	800486c <lwip_htons>
 800a080:	4603      	mov	r3, r0
 800a082:	b2db      	uxtb	r3, r3
 800a084:	f003 0302 	and.w	r3, r3, #2
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d005      	beq.n	800a098 <tcp_receive+0x938>
                inseg.len -= 1;
 800a08c:	4b78      	ldr	r3, [pc, #480]	; (800a270 <tcp_receive+0xb10>)
 800a08e:	891b      	ldrh	r3, [r3, #8]
 800a090:	3b01      	subs	r3, #1
 800a092:	b29a      	uxth	r2, r3
 800a094:	4b76      	ldr	r3, [pc, #472]	; (800a270 <tcp_receive+0xb10>)
 800a096:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a098:	4b75      	ldr	r3, [pc, #468]	; (800a270 <tcp_receive+0xb10>)
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	4a74      	ldr	r2, [pc, #464]	; (800a270 <tcp_receive+0xb10>)
 800a09e:	8912      	ldrh	r2, [r2, #8]
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fb fe2c 	bl	8005d00 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a0a8:	4b71      	ldr	r3, [pc, #452]	; (800a270 <tcp_receive+0xb10>)
 800a0aa:	891c      	ldrh	r4, [r3, #8]
 800a0ac:	4b70      	ldr	r3, [pc, #448]	; (800a270 <tcp_receive+0xb10>)
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	899b      	ldrh	r3, [r3, #12]
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7fa fbd9 	bl	800486c <lwip_htons>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	f003 0303 	and.w	r3, r3, #3
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d001      	beq.n	800a0ca <tcp_receive+0x96a>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e000      	b.n	800a0cc <tcp_receive+0x96c>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	4423      	add	r3, r4
 800a0ce:	b29a      	uxth	r2, r3
 800a0d0:	4b65      	ldr	r3, [pc, #404]	; (800a268 <tcp_receive+0xb08>)
 800a0d2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a0d4:	4b64      	ldr	r3, [pc, #400]	; (800a268 <tcp_receive+0xb08>)
 800a0d6:	881b      	ldrh	r3, [r3, #0]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	4b64      	ldr	r3, [pc, #400]	; (800a26c <tcp_receive+0xb0c>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	441a      	add	r2, r3
 800a0e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d006      	beq.n	800a0f8 <tcp_receive+0x998>
 800a0ea:	4b62      	ldr	r3, [pc, #392]	; (800a274 <tcp_receive+0xb14>)
 800a0ec:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a0f0:	4961      	ldr	r1, [pc, #388]	; (800a278 <tcp_receive+0xb18>)
 800a0f2:	4862      	ldr	r0, [pc, #392]	; (800a27c <tcp_receive+0xb1c>)
 800a0f4:	f005 f858 	bl	800f1a8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a0fc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a0fe:	4b5a      	ldr	r3, [pc, #360]	; (800a268 <tcp_receive+0xb08>)
 800a100:	881b      	ldrh	r3, [r3, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	4b59      	ldr	r3, [pc, #356]	; (800a26c <tcp_receive+0xb0c>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	441a      	add	r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a112:	4b55      	ldr	r3, [pc, #340]	; (800a268 <tcp_receive+0xb08>)
 800a114:	881b      	ldrh	r3, [r3, #0]
 800a116:	429a      	cmp	r2, r3
 800a118:	d206      	bcs.n	800a128 <tcp_receive+0x9c8>
 800a11a:	4b56      	ldr	r3, [pc, #344]	; (800a274 <tcp_receive+0xb14>)
 800a11c:	f240 6207 	movw	r2, #1543	; 0x607
 800a120:	4957      	ldr	r1, [pc, #348]	; (800a280 <tcp_receive+0xb20>)
 800a122:	4856      	ldr	r0, [pc, #344]	; (800a27c <tcp_receive+0xb1c>)
 800a124:	f005 f840 	bl	800f1a8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a12c:	4b4e      	ldr	r3, [pc, #312]	; (800a268 <tcp_receive+0xb08>)
 800a12e:	881b      	ldrh	r3, [r3, #0]
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	b29a      	uxth	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f7fc ffc5 	bl	80070c8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a13e:	4b4c      	ldr	r3, [pc, #304]	; (800a270 <tcp_receive+0xb10>)
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	891b      	ldrh	r3, [r3, #8]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d006      	beq.n	800a156 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800a148:	4b49      	ldr	r3, [pc, #292]	; (800a270 <tcp_receive+0xb10>)
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	4a4d      	ldr	r2, [pc, #308]	; (800a284 <tcp_receive+0xb24>)
 800a14e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a150:	4b47      	ldr	r3, [pc, #284]	; (800a270 <tcp_receive+0xb10>)
 800a152:	2200      	movs	r2, #0
 800a154:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a156:	4b46      	ldr	r3, [pc, #280]	; (800a270 <tcp_receive+0xb10>)
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	899b      	ldrh	r3, [r3, #12]
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fa fb84 	bl	800486c <lwip_htons>
 800a164:	4603      	mov	r3, r0
 800a166:	b2db      	uxtb	r3, r3
 800a168:	f003 0301 	and.w	r3, r3, #1
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f000 80b8 	beq.w	800a2e2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a172:	4b45      	ldr	r3, [pc, #276]	; (800a288 <tcp_receive+0xb28>)
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	f043 0320 	orr.w	r3, r3, #32
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	4b42      	ldr	r3, [pc, #264]	; (800a288 <tcp_receive+0xb28>)
 800a17e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a180:	e0af      	b.n	800a2e2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a186:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	4a36      	ldr	r2, [pc, #216]	; (800a26c <tcp_receive+0xb0c>)
 800a192:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	891b      	ldrh	r3, [r3, #8]
 800a198:	461c      	mov	r4, r3
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	899b      	ldrh	r3, [r3, #12]
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7fa fb62 	bl	800486c <lwip_htons>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	f003 0303 	and.w	r3, r3, #3
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d001      	beq.n	800a1b8 <tcp_receive+0xa58>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e000      	b.n	800a1ba <tcp_receive+0xa5a>
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	191a      	adds	r2, r3, r4
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c0:	441a      	add	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1ca:	461c      	mov	r4, r3
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	891b      	ldrh	r3, [r3, #8]
 800a1d0:	461d      	mov	r5, r3
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	899b      	ldrh	r3, [r3, #12]
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7fa fb46 	bl	800486c <lwip_htons>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	f003 0303 	and.w	r3, r3, #3
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d001      	beq.n	800a1f0 <tcp_receive+0xa90>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e000      	b.n	800a1f2 <tcp_receive+0xa92>
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	442b      	add	r3, r5
 800a1f4:	429c      	cmp	r4, r3
 800a1f6:	d206      	bcs.n	800a206 <tcp_receive+0xaa6>
 800a1f8:	4b1e      	ldr	r3, [pc, #120]	; (800a274 <tcp_receive+0xb14>)
 800a1fa:	f240 622b 	movw	r2, #1579	; 0x62b
 800a1fe:	4923      	ldr	r1, [pc, #140]	; (800a28c <tcp_receive+0xb2c>)
 800a200:	481e      	ldr	r0, [pc, #120]	; (800a27c <tcp_receive+0xb1c>)
 800a202:	f004 ffd1 	bl	800f1a8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	891b      	ldrh	r3, [r3, #8]
 800a20a:	461c      	mov	r4, r3
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	899b      	ldrh	r3, [r3, #12]
 800a212:	b29b      	uxth	r3, r3
 800a214:	4618      	mov	r0, r3
 800a216:	f7fa fb29 	bl	800486c <lwip_htons>
 800a21a:	4603      	mov	r3, r0
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	f003 0303 	and.w	r3, r3, #3
 800a222:	2b00      	cmp	r3, #0
 800a224:	d001      	beq.n	800a22a <tcp_receive+0xaca>
 800a226:	2301      	movs	r3, #1
 800a228:	e000      	b.n	800a22c <tcp_receive+0xacc>
 800a22a:	2300      	movs	r3, #0
 800a22c:	1919      	adds	r1, r3, r4
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a232:	b28b      	uxth	r3, r1
 800a234:	1ad3      	subs	r3, r2, r3
 800a236:	b29a      	uxth	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f7fc ff43 	bl	80070c8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	891b      	ldrh	r3, [r3, #8]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d028      	beq.n	800a29e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a24c:	4b0d      	ldr	r3, [pc, #52]	; (800a284 <tcp_receive+0xb24>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d01d      	beq.n	800a290 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800a254:	4b0b      	ldr	r3, [pc, #44]	; (800a284 <tcp_receive+0xb24>)
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	4619      	mov	r1, r3
 800a25e:	4610      	mov	r0, r2
 800a260:	f7fb ffa8 	bl	80061b4 <pbuf_cat>
 800a264:	e018      	b.n	800a298 <tcp_receive+0xb38>
 800a266:	bf00      	nop
 800a268:	200083ea 	.word	0x200083ea
 800a26c:	200083e0 	.word	0x200083e0
 800a270:	200083c0 	.word	0x200083c0
 800a274:	0801198c 	.word	0x0801198c
 800a278:	08011d6c 	.word	0x08011d6c
 800a27c:	080119d8 	.word	0x080119d8
 800a280:	08011da8 	.word	0x08011da8
 800a284:	200083f0 	.word	0x200083f0
 800a288:	200083ed 	.word	0x200083ed
 800a28c:	08011dc8 	.word	0x08011dc8
            } else {
              recv_data = cseg->p;
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	4a70      	ldr	r2, [pc, #448]	; (800a458 <tcp_receive+0xcf8>)
 800a296:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	2200      	movs	r2, #0
 800a29c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	899b      	ldrh	r3, [r3, #12]
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7fa fae0 	bl	800486c <lwip_htons>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	f003 0301 	and.w	r3, r3, #1
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00d      	beq.n	800a2d4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a2b8:	4b68      	ldr	r3, [pc, #416]	; (800a45c <tcp_receive+0xcfc>)
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	f043 0320 	orr.w	r3, r3, #32
 800a2c0:	b2da      	uxtb	r2, r3
 800a2c2:	4b66      	ldr	r3, [pc, #408]	; (800a45c <tcp_receive+0xcfc>)
 800a2c4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	7d1b      	ldrb	r3, [r3, #20]
 800a2ca:	2b04      	cmp	r3, #4
 800a2cc:	d102      	bne.n	800a2d4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2207      	movs	r2, #7
 800a2d2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a2dc:	68b8      	ldr	r0, [r7, #8]
 800a2de:	f7fd fbd2 	bl	8007a86 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d008      	beq.n	800a2fc <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	f43f af43 	beq.w	800a182 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	8b5b      	ldrh	r3, [r3, #26]
 800a300:	f003 0301 	and.w	r3, r3, #1
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00e      	beq.n	800a326 <tcp_receive+0xbc6>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	8b5b      	ldrh	r3, [r3, #26]
 800a30c:	f023 0301 	bic.w	r3, r3, #1
 800a310:	b29a      	uxth	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	835a      	strh	r2, [r3, #26]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	8b5b      	ldrh	r3, [r3, #26]
 800a31a:	f043 0302 	orr.w	r3, r3, #2
 800a31e:	b29a      	uxth	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a324:	e188      	b.n	800a638 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	8b5b      	ldrh	r3, [r3, #26]
 800a32a:	f043 0301 	orr.w	r3, r3, #1
 800a32e:	b29a      	uxth	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a334:	e180      	b.n	800a638 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d106      	bne.n	800a34c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a33e:	4848      	ldr	r0, [pc, #288]	; (800a460 <tcp_receive+0xd00>)
 800a340:	f7fd fbba 	bl	8007ab8 <tcp_seg_copy>
 800a344:	4602      	mov	r2, r0
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	675a      	str	r2, [r3, #116]	; 0x74
 800a34a:	e16d      	b.n	800a628 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a34c:	2300      	movs	r3, #0
 800a34e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a354:	63bb      	str	r3, [r7, #56]	; 0x38
 800a356:	e157      	b.n	800a608 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800a358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	685a      	ldr	r2, [r3, #4]
 800a35e:	4b41      	ldr	r3, [pc, #260]	; (800a464 <tcp_receive+0xd04>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	429a      	cmp	r2, r3
 800a364:	d11d      	bne.n	800a3a2 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a366:	4b3e      	ldr	r3, [pc, #248]	; (800a460 <tcp_receive+0xd00>)
 800a368:	891a      	ldrh	r2, [r3, #8]
 800a36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36c:	891b      	ldrh	r3, [r3, #8]
 800a36e:	429a      	cmp	r2, r3
 800a370:	f240 814f 	bls.w	800a612 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a374:	483a      	ldr	r0, [pc, #232]	; (800a460 <tcp_receive+0xd00>)
 800a376:	f7fd fb9f 	bl	8007ab8 <tcp_seg_copy>
 800a37a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f000 8149 	beq.w	800a616 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800a384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a386:	2b00      	cmp	r3, #0
 800a388:	d003      	beq.n	800a392 <tcp_receive+0xc32>
                    prev->next = cseg;
 800a38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	601a      	str	r2, [r3, #0]
 800a390:	e002      	b.n	800a398 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	697a      	ldr	r2, [r7, #20]
 800a396:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a398:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a39a:	6978      	ldr	r0, [r7, #20]
 800a39c:	f7ff f8dc 	bl	8009558 <tcp_oos_insert_segment>
                }
                break;
 800a3a0:	e139      	b.n	800a616 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d117      	bne.n	800a3d8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a3a8:	4b2e      	ldr	r3, [pc, #184]	; (800a464 <tcp_receive+0xd04>)
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	1ad3      	subs	r3, r2, r3
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	da57      	bge.n	800a468 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a3b8:	4829      	ldr	r0, [pc, #164]	; (800a460 <tcp_receive+0xd00>)
 800a3ba:	f7fd fb7d 	bl	8007ab8 <tcp_seg_copy>
 800a3be:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	f000 8129 	beq.w	800a61a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	69ba      	ldr	r2, [r7, #24]
 800a3cc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a3ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a3d0:	69b8      	ldr	r0, [r7, #24]
 800a3d2:	f7ff f8c1 	bl	8009558 <tcp_oos_insert_segment>
                  }
                  break;
 800a3d6:	e120      	b.n	800a61a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a3d8:	4b22      	ldr	r3, [pc, #136]	; (800a464 <tcp_receive+0xd04>)
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	3b01      	subs	r3, #1
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	db3e      	blt.n	800a468 <tcp_receive+0xd08>
 800a3ea:	4b1e      	ldr	r3, [pc, #120]	; (800a464 <tcp_receive+0xd04>)
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	1ad3      	subs	r3, r2, r3
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	dc35      	bgt.n	800a468 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a3fc:	4818      	ldr	r0, [pc, #96]	; (800a460 <tcp_receive+0xd00>)
 800a3fe:	f7fd fb5b 	bl	8007ab8 <tcp_seg_copy>
 800a402:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	2b00      	cmp	r3, #0
 800a408:	f000 8109 	beq.w	800a61e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a414:	8912      	ldrh	r2, [r2, #8]
 800a416:	441a      	add	r2, r3
 800a418:	4b12      	ldr	r3, [pc, #72]	; (800a464 <tcp_receive+0xd04>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	2b00      	cmp	r3, #0
 800a420:	dd12      	ble.n	800a448 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a422:	4b10      	ldr	r3, [pc, #64]	; (800a464 <tcp_receive+0xd04>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	b29a      	uxth	r2, r3
 800a428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	b29b      	uxth	r3, r3
 800a430:	1ad3      	subs	r3, r2, r3
 800a432:	b29a      	uxth	r2, r3
 800a434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a436:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a43a:	685a      	ldr	r2, [r3, #4]
 800a43c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a43e:	891b      	ldrh	r3, [r3, #8]
 800a440:	4619      	mov	r1, r3
 800a442:	4610      	mov	r0, r2
 800a444:	f7fb fc5c 	bl	8005d00 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a44a:	69fa      	ldr	r2, [r7, #28]
 800a44c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a44e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a450:	69f8      	ldr	r0, [r7, #28]
 800a452:	f7ff f881 	bl	8009558 <tcp_oos_insert_segment>
                  }
                  break;
 800a456:	e0e2      	b.n	800a61e <tcp_receive+0xebe>
 800a458:	200083f0 	.word	0x200083f0
 800a45c:	200083ed 	.word	0x200083ed
 800a460:	200083c0 	.word	0x200083c0
 800a464:	200083e0 	.word	0x200083e0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	f040 80c6 	bne.w	800a602 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a476:	4b80      	ldr	r3, [pc, #512]	; (800a678 <tcp_receive+0xf18>)
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a482:	2b00      	cmp	r3, #0
 800a484:	f340 80bd 	ble.w	800a602 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	899b      	ldrh	r3, [r3, #12]
 800a48e:	b29b      	uxth	r3, r3
 800a490:	4618      	mov	r0, r3
 800a492:	f7fa f9eb 	bl	800486c <lwip_htons>
 800a496:	4603      	mov	r3, r0
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	f003 0301 	and.w	r3, r3, #1
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f040 80bf 	bne.w	800a622 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a4a4:	4875      	ldr	r0, [pc, #468]	; (800a67c <tcp_receive+0xf1c>)
 800a4a6:	f7fd fb07 	bl	8007ab8 <tcp_seg_copy>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ae:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f000 80b6 	beq.w	800a626 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4c2:	8912      	ldrh	r2, [r2, #8]
 800a4c4:	441a      	add	r2, r3
 800a4c6:	4b6c      	ldr	r3, [pc, #432]	; (800a678 <tcp_receive+0xf18>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	dd12      	ble.n	800a4f6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a4d0:	4b69      	ldr	r3, [pc, #420]	; (800a678 <tcp_receive+0xf18>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	b29a      	uxth	r2, r3
 800a4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e8:	685a      	ldr	r2, [r3, #4]
 800a4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ec:	891b      	ldrh	r3, [r3, #8]
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	4610      	mov	r0, r2
 800a4f2:	f7fb fc05 	bl	8005d00 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a4f6:	4b62      	ldr	r3, [pc, #392]	; (800a680 <tcp_receive+0xf20>)
 800a4f8:	881b      	ldrh	r3, [r3, #0]
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	4b5e      	ldr	r3, [pc, #376]	; (800a678 <tcp_receive+0xf18>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	441a      	add	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a506:	6879      	ldr	r1, [r7, #4]
 800a508:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a50a:	440b      	add	r3, r1
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f340 8089 	ble.w	800a626 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	899b      	ldrh	r3, [r3, #12]
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fa f9a4 	bl	800486c <lwip_htons>
 800a524:	4603      	mov	r3, r0
 800a526:	b2db      	uxtb	r3, r3
 800a528:	f003 0301 	and.w	r3, r3, #1
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d022      	beq.n	800a576 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	899b      	ldrh	r3, [r3, #12]
 800a538:	b29b      	uxth	r3, r3
 800a53a:	b21b      	sxth	r3, r3
 800a53c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a540:	b21c      	sxth	r4, r3
 800a542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	899b      	ldrh	r3, [r3, #12]
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7fa f98d 	bl	800486c <lwip_htons>
 800a552:	4603      	mov	r3, r0
 800a554:	b2db      	uxtb	r3, r3
 800a556:	b29b      	uxth	r3, r3
 800a558:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fa f984 	bl	800486c <lwip_htons>
 800a564:	4603      	mov	r3, r0
 800a566:	b21b      	sxth	r3, r3
 800a568:	4323      	orrs	r3, r4
 800a56a:	b21a      	sxth	r2, r3
 800a56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	b292      	uxth	r2, r2
 800a574:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57a:	b29a      	uxth	r2, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a580:	4413      	add	r3, r2
 800a582:	b299      	uxth	r1, r3
 800a584:	4b3c      	ldr	r3, [pc, #240]	; (800a678 <tcp_receive+0xf18>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	b29a      	uxth	r2, r3
 800a58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	1a8a      	subs	r2, r1, r2
 800a590:	b292      	uxth	r2, r2
 800a592:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	685a      	ldr	r2, [r3, #4]
 800a59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	891b      	ldrh	r3, [r3, #8]
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	4610      	mov	r0, r2
 800a5a4:	f7fb fbac 	bl	8005d00 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	891c      	ldrh	r4, [r3, #8]
 800a5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	899b      	ldrh	r3, [r3, #12]
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7fa f957 	bl	800486c <lwip_htons>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	f003 0303 	and.w	r3, r3, #3
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d001      	beq.n	800a5ce <tcp_receive+0xe6e>
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e000      	b.n	800a5d0 <tcp_receive+0xe70>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	4423      	add	r3, r4
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	4b2a      	ldr	r3, [pc, #168]	; (800a680 <tcp_receive+0xf20>)
 800a5d6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a5d8:	4b29      	ldr	r3, [pc, #164]	; (800a680 <tcp_receive+0xf20>)
 800a5da:	881b      	ldrh	r3, [r3, #0]
 800a5dc:	461a      	mov	r2, r3
 800a5de:	4b26      	ldr	r3, [pc, #152]	; (800a678 <tcp_receive+0xf18>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	441a      	add	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e8:	6879      	ldr	r1, [r7, #4]
 800a5ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a5ec:	440b      	add	r3, r1
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d019      	beq.n	800a626 <tcp_receive+0xec6>
 800a5f2:	4b24      	ldr	r3, [pc, #144]	; (800a684 <tcp_receive+0xf24>)
 800a5f4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a5f8:	4923      	ldr	r1, [pc, #140]	; (800a688 <tcp_receive+0xf28>)
 800a5fa:	4824      	ldr	r0, [pc, #144]	; (800a68c <tcp_receive+0xf2c>)
 800a5fc:	f004 fdd4 	bl	800f1a8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a600:	e011      	b.n	800a626 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	63bb      	str	r3, [r7, #56]	; 0x38
 800a608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	f47f aea4 	bne.w	800a358 <tcp_receive+0xbf8>
 800a610:	e00a      	b.n	800a628 <tcp_receive+0xec8>
                break;
 800a612:	bf00      	nop
 800a614:	e008      	b.n	800a628 <tcp_receive+0xec8>
                break;
 800a616:	bf00      	nop
 800a618:	e006      	b.n	800a628 <tcp_receive+0xec8>
                  break;
 800a61a:	bf00      	nop
 800a61c:	e004      	b.n	800a628 <tcp_receive+0xec8>
                  break;
 800a61e:	bf00      	nop
 800a620:	e002      	b.n	800a628 <tcp_receive+0xec8>
                  break;
 800a622:	bf00      	nop
 800a624:	e000      	b.n	800a628 <tcp_receive+0xec8>
                break;
 800a626:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f001 fa33 	bl	800ba94 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a62e:	e003      	b.n	800a638 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f001 fa2f 	bl	800ba94 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a636:	e01a      	b.n	800a66e <tcp_receive+0xf0e>
 800a638:	e019      	b.n	800a66e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a63a:	4b0f      	ldr	r3, [pc, #60]	; (800a678 <tcp_receive+0xf18>)
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a642:	1ad3      	subs	r3, r2, r3
 800a644:	2b00      	cmp	r3, #0
 800a646:	db0a      	blt.n	800a65e <tcp_receive+0xefe>
 800a648:	4b0b      	ldr	r3, [pc, #44]	; (800a678 <tcp_receive+0xf18>)
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a650:	6879      	ldr	r1, [r7, #4]
 800a652:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a654:	440b      	add	r3, r1
 800a656:	1ad3      	subs	r3, r2, r3
 800a658:	3301      	adds	r3, #1
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	dd07      	ble.n	800a66e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	8b5b      	ldrh	r3, [r3, #26]
 800a662:	f043 0302 	orr.w	r3, r3, #2
 800a666:	b29a      	uxth	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a66c:	e7ff      	b.n	800a66e <tcp_receive+0xf0e>
 800a66e:	bf00      	nop
 800a670:	3750      	adds	r7, #80	; 0x50
 800a672:	46bd      	mov	sp, r7
 800a674:	bdb0      	pop	{r4, r5, r7, pc}
 800a676:	bf00      	nop
 800a678:	200083e0 	.word	0x200083e0
 800a67c:	200083c0 	.word	0x200083c0
 800a680:	200083ea 	.word	0x200083ea
 800a684:	0801198c 	.word	0x0801198c
 800a688:	08011d34 	.word	0x08011d34
 800a68c:	080119d8 	.word	0x080119d8

0800a690 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a696:	4b15      	ldr	r3, [pc, #84]	; (800a6ec <tcp_get_next_optbyte+0x5c>)
 800a698:	881b      	ldrh	r3, [r3, #0]
 800a69a:	1c5a      	adds	r2, r3, #1
 800a69c:	b291      	uxth	r1, r2
 800a69e:	4a13      	ldr	r2, [pc, #76]	; (800a6ec <tcp_get_next_optbyte+0x5c>)
 800a6a0:	8011      	strh	r1, [r2, #0]
 800a6a2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a6a4:	4b12      	ldr	r3, [pc, #72]	; (800a6f0 <tcp_get_next_optbyte+0x60>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d004      	beq.n	800a6b6 <tcp_get_next_optbyte+0x26>
 800a6ac:	4b11      	ldr	r3, [pc, #68]	; (800a6f4 <tcp_get_next_optbyte+0x64>)
 800a6ae:	881b      	ldrh	r3, [r3, #0]
 800a6b0:	88fa      	ldrh	r2, [r7, #6]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d208      	bcs.n	800a6c8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a6b6:	4b10      	ldr	r3, [pc, #64]	; (800a6f8 <tcp_get_next_optbyte+0x68>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	3314      	adds	r3, #20
 800a6bc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a6be:	88fb      	ldrh	r3, [r7, #6]
 800a6c0:	683a      	ldr	r2, [r7, #0]
 800a6c2:	4413      	add	r3, r2
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	e00b      	b.n	800a6e0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a6c8:	88fb      	ldrh	r3, [r7, #6]
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	4b09      	ldr	r3, [pc, #36]	; (800a6f4 <tcp_get_next_optbyte+0x64>)
 800a6ce:	881b      	ldrh	r3, [r3, #0]
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a6d6:	4b06      	ldr	r3, [pc, #24]	; (800a6f0 <tcp_get_next_optbyte+0x60>)
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	797b      	ldrb	r3, [r7, #5]
 800a6dc:	4413      	add	r3, r2
 800a6de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	370c      	adds	r7, #12
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr
 800a6ec:	200083dc 	.word	0x200083dc
 800a6f0:	200083d8 	.word	0x200083d8
 800a6f4:	200083d6 	.word	0x200083d6
 800a6f8:	200083d0 	.word	0x200083d0

0800a6fc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d106      	bne.n	800a718 <tcp_parseopt+0x1c>
 800a70a:	4b32      	ldr	r3, [pc, #200]	; (800a7d4 <tcp_parseopt+0xd8>)
 800a70c:	f240 727d 	movw	r2, #1917	; 0x77d
 800a710:	4931      	ldr	r1, [pc, #196]	; (800a7d8 <tcp_parseopt+0xdc>)
 800a712:	4832      	ldr	r0, [pc, #200]	; (800a7dc <tcp_parseopt+0xe0>)
 800a714:	f004 fd48 	bl	800f1a8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a718:	4b31      	ldr	r3, [pc, #196]	; (800a7e0 <tcp_parseopt+0xe4>)
 800a71a:	881b      	ldrh	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d055      	beq.n	800a7cc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a720:	4b30      	ldr	r3, [pc, #192]	; (800a7e4 <tcp_parseopt+0xe8>)
 800a722:	2200      	movs	r2, #0
 800a724:	801a      	strh	r2, [r3, #0]
 800a726:	e045      	b.n	800a7b4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a728:	f7ff ffb2 	bl	800a690 <tcp_get_next_optbyte>
 800a72c:	4603      	mov	r3, r0
 800a72e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a730:	7bfb      	ldrb	r3, [r7, #15]
 800a732:	2b02      	cmp	r3, #2
 800a734:	d006      	beq.n	800a744 <tcp_parseopt+0x48>
 800a736:	2b02      	cmp	r3, #2
 800a738:	dc2b      	bgt.n	800a792 <tcp_parseopt+0x96>
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d041      	beq.n	800a7c2 <tcp_parseopt+0xc6>
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d127      	bne.n	800a792 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a742:	e037      	b.n	800a7b4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a744:	f7ff ffa4 	bl	800a690 <tcp_get_next_optbyte>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b04      	cmp	r3, #4
 800a74c:	d13b      	bne.n	800a7c6 <tcp_parseopt+0xca>
 800a74e:	4b25      	ldr	r3, [pc, #148]	; (800a7e4 <tcp_parseopt+0xe8>)
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	3301      	adds	r3, #1
 800a754:	4a22      	ldr	r2, [pc, #136]	; (800a7e0 <tcp_parseopt+0xe4>)
 800a756:	8812      	ldrh	r2, [r2, #0]
 800a758:	4293      	cmp	r3, r2
 800a75a:	da34      	bge.n	800a7c6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a75c:	f7ff ff98 	bl	800a690 <tcp_get_next_optbyte>
 800a760:	4603      	mov	r3, r0
 800a762:	b29b      	uxth	r3, r3
 800a764:	021b      	lsls	r3, r3, #8
 800a766:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a768:	f7ff ff92 	bl	800a690 <tcp_get_next_optbyte>
 800a76c:	4603      	mov	r3, r0
 800a76e:	b29a      	uxth	r2, r3
 800a770:	89bb      	ldrh	r3, [r7, #12]
 800a772:	4313      	orrs	r3, r2
 800a774:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a776:	89bb      	ldrh	r3, [r7, #12]
 800a778:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a77c:	d804      	bhi.n	800a788 <tcp_parseopt+0x8c>
 800a77e:	89bb      	ldrh	r3, [r7, #12]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d001      	beq.n	800a788 <tcp_parseopt+0x8c>
 800a784:	89ba      	ldrh	r2, [r7, #12]
 800a786:	e001      	b.n	800a78c <tcp_parseopt+0x90>
 800a788:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a790:	e010      	b.n	800a7b4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a792:	f7ff ff7d 	bl	800a690 <tcp_get_next_optbyte>
 800a796:	4603      	mov	r3, r0
 800a798:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a79a:	7afb      	ldrb	r3, [r7, #11]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d914      	bls.n	800a7ca <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a7a0:	7afb      	ldrb	r3, [r7, #11]
 800a7a2:	b29a      	uxth	r2, r3
 800a7a4:	4b0f      	ldr	r3, [pc, #60]	; (800a7e4 <tcp_parseopt+0xe8>)
 800a7a6:	881b      	ldrh	r3, [r3, #0]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	3b02      	subs	r3, #2
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	4b0c      	ldr	r3, [pc, #48]	; (800a7e4 <tcp_parseopt+0xe8>)
 800a7b2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a7b4:	4b0b      	ldr	r3, [pc, #44]	; (800a7e4 <tcp_parseopt+0xe8>)
 800a7b6:	881a      	ldrh	r2, [r3, #0]
 800a7b8:	4b09      	ldr	r3, [pc, #36]	; (800a7e0 <tcp_parseopt+0xe4>)
 800a7ba:	881b      	ldrh	r3, [r3, #0]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d3b3      	bcc.n	800a728 <tcp_parseopt+0x2c>
 800a7c0:	e004      	b.n	800a7cc <tcp_parseopt+0xd0>
          return;
 800a7c2:	bf00      	nop
 800a7c4:	e002      	b.n	800a7cc <tcp_parseopt+0xd0>
            return;
 800a7c6:	bf00      	nop
 800a7c8:	e000      	b.n	800a7cc <tcp_parseopt+0xd0>
            return;
 800a7ca:	bf00      	nop
      }
    }
  }
}
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	0801198c 	.word	0x0801198c
 800a7d8:	08011df0 	.word	0x08011df0
 800a7dc:	080119d8 	.word	0x080119d8
 800a7e0:	200083d4 	.word	0x200083d4
 800a7e4:	200083dc 	.word	0x200083dc

0800a7e8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a7ec:	4b05      	ldr	r3, [pc, #20]	; (800a804 <tcp_trigger_input_pcb_close+0x1c>)
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	f043 0310 	orr.w	r3, r3, #16
 800a7f4:	b2da      	uxtb	r2, r3
 800a7f6:	4b03      	ldr	r3, [pc, #12]	; (800a804 <tcp_trigger_input_pcb_close+0x1c>)
 800a7f8:	701a      	strb	r2, [r3, #0]
}
 800a7fa:	bf00      	nop
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr
 800a804:	200083ed 	.word	0x200083ed

0800a808 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00a      	beq.n	800a830 <tcp_route+0x28>
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	7a1b      	ldrb	r3, [r3, #8]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d006      	beq.n	800a830 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	7a1b      	ldrb	r3, [r3, #8]
 800a826:	4618      	mov	r0, r3
 800a828:	f7fb f890 	bl	800594c <netif_get_by_index>
 800a82c:	4603      	mov	r3, r0
 800a82e:	e003      	b.n	800a838 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f003 f9cd 	bl	800dbd0 <ip4_route>
 800a836:	4603      	mov	r3, r0
  }
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3710      	adds	r7, #16
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a840:	b590      	push	{r4, r7, lr}
 800a842:	b087      	sub	sp, #28
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	603b      	str	r3, [r7, #0]
 800a84c:	4613      	mov	r3, r2
 800a84e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d105      	bne.n	800a862 <tcp_create_segment+0x22>
 800a856:	4b44      	ldr	r3, [pc, #272]	; (800a968 <tcp_create_segment+0x128>)
 800a858:	22a3      	movs	r2, #163	; 0xa3
 800a85a:	4944      	ldr	r1, [pc, #272]	; (800a96c <tcp_create_segment+0x12c>)
 800a85c:	4844      	ldr	r0, [pc, #272]	; (800a970 <tcp_create_segment+0x130>)
 800a85e:	f004 fca3 	bl	800f1a8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d105      	bne.n	800a874 <tcp_create_segment+0x34>
 800a868:	4b3f      	ldr	r3, [pc, #252]	; (800a968 <tcp_create_segment+0x128>)
 800a86a:	22a4      	movs	r2, #164	; 0xa4
 800a86c:	4941      	ldr	r1, [pc, #260]	; (800a974 <tcp_create_segment+0x134>)
 800a86e:	4840      	ldr	r0, [pc, #256]	; (800a970 <tcp_create_segment+0x130>)
 800a870:	f004 fc9a 	bl	800f1a8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a874:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	f003 0304 	and.w	r3, r3, #4
 800a880:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a882:	2004      	movs	r0, #4
 800a884:	f7fa fcd8 	bl	8005238 <memp_malloc>
 800a888:	6138      	str	r0, [r7, #16]
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d104      	bne.n	800a89a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a890:	68b8      	ldr	r0, [r7, #8]
 800a892:	f7fb fbcd 	bl	8006030 <pbuf_free>
    return NULL;
 800a896:	2300      	movs	r3, #0
 800a898:	e061      	b.n	800a95e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a8a0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	891a      	ldrh	r2, [r3, #8]
 800a8b2:	7dfb      	ldrb	r3, [r7, #23]
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d205      	bcs.n	800a8c6 <tcp_create_segment+0x86>
 800a8ba:	4b2b      	ldr	r3, [pc, #172]	; (800a968 <tcp_create_segment+0x128>)
 800a8bc:	22b0      	movs	r2, #176	; 0xb0
 800a8be:	492e      	ldr	r1, [pc, #184]	; (800a978 <tcp_create_segment+0x138>)
 800a8c0:	482b      	ldr	r0, [pc, #172]	; (800a970 <tcp_create_segment+0x130>)
 800a8c2:	f004 fc71 	bl	800f1a8 <iprintf>
  seg->len = p->tot_len - optlen;
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	891a      	ldrh	r2, [r3, #8]
 800a8ca:	7dfb      	ldrb	r3, [r7, #23]
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	1ad3      	subs	r3, r2, r3
 800a8d0:	b29a      	uxth	r2, r3
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a8d6:	2114      	movs	r1, #20
 800a8d8:	68b8      	ldr	r0, [r7, #8]
 800a8da:	f7fb fb01 	bl	8005ee0 <pbuf_add_header>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d004      	beq.n	800a8ee <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a8e4:	6938      	ldr	r0, [r7, #16]
 800a8e6:	f7fd f8ce 	bl	8007a86 <tcp_seg_free>
    return NULL;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	e037      	b.n	800a95e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	685a      	ldr	r2, [r3, #4]
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	8ada      	ldrh	r2, [r3, #22]
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	68dc      	ldr	r4, [r3, #12]
 800a900:	4610      	mov	r0, r2
 800a902:	f7f9 ffb3 	bl	800486c <lwip_htons>
 800a906:	4603      	mov	r3, r0
 800a908:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	8b1a      	ldrh	r2, [r3, #24]
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	68dc      	ldr	r4, [r3, #12]
 800a912:	4610      	mov	r0, r2
 800a914:	f7f9 ffaa 	bl	800486c <lwip_htons>
 800a918:	4603      	mov	r3, r0
 800a91a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	68dc      	ldr	r4, [r3, #12]
 800a920:	6838      	ldr	r0, [r7, #0]
 800a922:	f7f9 ffb8 	bl	8004896 <lwip_htonl>
 800a926:	4603      	mov	r3, r0
 800a928:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a92a:	7dfb      	ldrb	r3, [r7, #23]
 800a92c:	089b      	lsrs	r3, r3, #2
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	b29b      	uxth	r3, r3
 800a932:	3305      	adds	r3, #5
 800a934:	b29b      	uxth	r3, r3
 800a936:	031b      	lsls	r3, r3, #12
 800a938:	b29a      	uxth	r2, r3
 800a93a:	79fb      	ldrb	r3, [r7, #7]
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	4313      	orrs	r3, r2
 800a940:	b29a      	uxth	r2, r3
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	68dc      	ldr	r4, [r3, #12]
 800a946:	4610      	mov	r0, r2
 800a948:	f7f9 ff90 	bl	800486c <lwip_htons>
 800a94c:	4603      	mov	r3, r0
 800a94e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	2200      	movs	r2, #0
 800a956:	749a      	strb	r2, [r3, #18]
 800a958:	2200      	movs	r2, #0
 800a95a:	74da      	strb	r2, [r3, #19]
  return seg;
 800a95c:	693b      	ldr	r3, [r7, #16]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	371c      	adds	r7, #28
 800a962:	46bd      	mov	sp, r7
 800a964:	bd90      	pop	{r4, r7, pc}
 800a966:	bf00      	nop
 800a968:	08011e0c 	.word	0x08011e0c
 800a96c:	08011e40 	.word	0x08011e40
 800a970:	08011e60 	.word	0x08011e60
 800a974:	08011e88 	.word	0x08011e88
 800a978:	08011eac 	.word	0x08011eac

0800a97c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a97c:	b590      	push	{r4, r7, lr}
 800a97e:	b08b      	sub	sp, #44	; 0x2c
 800a980:	af02      	add	r7, sp, #8
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	460b      	mov	r3, r1
 800a986:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a988:	2300      	movs	r3, #0
 800a98a:	61fb      	str	r3, [r7, #28]
 800a98c:	2300      	movs	r3, #0
 800a98e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a990:	2300      	movs	r3, #0
 800a992:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d106      	bne.n	800a9a8 <tcp_split_unsent_seg+0x2c>
 800a99a:	4b95      	ldr	r3, [pc, #596]	; (800abf0 <tcp_split_unsent_seg+0x274>)
 800a99c:	f240 324b 	movw	r2, #843	; 0x34b
 800a9a0:	4994      	ldr	r1, [pc, #592]	; (800abf4 <tcp_split_unsent_seg+0x278>)
 800a9a2:	4895      	ldr	r0, [pc, #596]	; (800abf8 <tcp_split_unsent_seg+0x27c>)
 800a9a4:	f004 fc00 	bl	800f1a8 <iprintf>

  useg = pcb->unsent;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9ac:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d102      	bne.n	800a9ba <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a9b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9b8:	e116      	b.n	800abe8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a9ba:	887b      	ldrh	r3, [r7, #2]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d109      	bne.n	800a9d4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a9c0:	4b8b      	ldr	r3, [pc, #556]	; (800abf0 <tcp_split_unsent_seg+0x274>)
 800a9c2:	f240 3253 	movw	r2, #851	; 0x353
 800a9c6:	498d      	ldr	r1, [pc, #564]	; (800abfc <tcp_split_unsent_seg+0x280>)
 800a9c8:	488b      	ldr	r0, [pc, #556]	; (800abf8 <tcp_split_unsent_seg+0x27c>)
 800a9ca:	f004 fbed 	bl	800f1a8 <iprintf>
    return ERR_VAL;
 800a9ce:	f06f 0305 	mvn.w	r3, #5
 800a9d2:	e109      	b.n	800abe8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	891b      	ldrh	r3, [r3, #8]
 800a9d8:	887a      	ldrh	r2, [r7, #2]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d301      	bcc.n	800a9e2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	e102      	b.n	800abe8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9e6:	887a      	ldrh	r2, [r7, #2]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d906      	bls.n	800a9fa <tcp_split_unsent_seg+0x7e>
 800a9ec:	4b80      	ldr	r3, [pc, #512]	; (800abf0 <tcp_split_unsent_seg+0x274>)
 800a9ee:	f240 325b 	movw	r2, #859	; 0x35b
 800a9f2:	4983      	ldr	r1, [pc, #524]	; (800ac00 <tcp_split_unsent_seg+0x284>)
 800a9f4:	4880      	ldr	r0, [pc, #512]	; (800abf8 <tcp_split_unsent_seg+0x27c>)
 800a9f6:	f004 fbd7 	bl	800f1a8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	891b      	ldrh	r3, [r3, #8]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d106      	bne.n	800aa10 <tcp_split_unsent_seg+0x94>
 800aa02:	4b7b      	ldr	r3, [pc, #492]	; (800abf0 <tcp_split_unsent_seg+0x274>)
 800aa04:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800aa08:	497e      	ldr	r1, [pc, #504]	; (800ac04 <tcp_split_unsent_seg+0x288>)
 800aa0a:	487b      	ldr	r0, [pc, #492]	; (800abf8 <tcp_split_unsent_seg+0x27c>)
 800aa0c:	f004 fbcc 	bl	800f1a8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	7a9b      	ldrb	r3, [r3, #10]
 800aa14:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800aa16:	7bfb      	ldrb	r3, [r7, #15]
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	f003 0304 	and.w	r3, r3, #4
 800aa20:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	891a      	ldrh	r2, [r3, #8]
 800aa26:	887b      	ldrh	r3, [r7, #2]
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800aa2c:	7bbb      	ldrb	r3, [r7, #14]
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	89bb      	ldrh	r3, [r7, #12]
 800aa32:	4413      	add	r3, r2
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	f44f 7220 	mov.w	r2, #640	; 0x280
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	2036      	movs	r0, #54	; 0x36
 800aa3e:	f7fb f801 	bl	8005a44 <pbuf_alloc>
 800aa42:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	f000 80b7 	beq.w	800abba <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	891a      	ldrh	r2, [r3, #8]
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	891b      	ldrh	r3, [r3, #8]
 800aa56:	1ad3      	subs	r3, r2, r3
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	887b      	ldrh	r3, [r7, #2]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	6858      	ldr	r0, [r3, #4]
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	685a      	ldr	r2, [r3, #4]
 800aa68:	7bbb      	ldrb	r3, [r7, #14]
 800aa6a:	18d1      	adds	r1, r2, r3
 800aa6c:	897b      	ldrh	r3, [r7, #10]
 800aa6e:	89ba      	ldrh	r2, [r7, #12]
 800aa70:	f7fb fcd8 	bl	8006424 <pbuf_copy_partial>
 800aa74:	4603      	mov	r3, r0
 800aa76:	461a      	mov	r2, r3
 800aa78:	89bb      	ldrh	r3, [r7, #12]
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	f040 809f 	bne.w	800abbe <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	68db      	ldr	r3, [r3, #12]
 800aa84:	899b      	ldrh	r3, [r3, #12]
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7f9 feef 	bl	800486c <lwip_htons>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa96:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800aa98:	2300      	movs	r3, #0
 800aa9a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800aa9c:	7efb      	ldrb	r3, [r7, #27]
 800aa9e:	f003 0308 	and.w	r3, r3, #8
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d007      	beq.n	800aab6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800aaa6:	7efb      	ldrb	r3, [r7, #27]
 800aaa8:	f023 0308 	bic.w	r3, r3, #8
 800aaac:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800aaae:	7ebb      	ldrb	r3, [r7, #26]
 800aab0:	f043 0308 	orr.w	r3, r3, #8
 800aab4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800aab6:	7efb      	ldrb	r3, [r7, #27]
 800aab8:	f003 0301 	and.w	r3, r3, #1
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d007      	beq.n	800aad0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800aac0:	7efb      	ldrb	r3, [r7, #27]
 800aac2:	f023 0301 	bic.w	r3, r3, #1
 800aac6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800aac8:	7ebb      	ldrb	r3, [r7, #26]
 800aaca:	f043 0301 	orr.w	r3, r3, #1
 800aace:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7f9 fedd 	bl	8004896 <lwip_htonl>
 800aadc:	4602      	mov	r2, r0
 800aade:	887b      	ldrh	r3, [r7, #2]
 800aae0:	18d1      	adds	r1, r2, r3
 800aae2:	7eba      	ldrb	r2, [r7, #26]
 800aae4:	7bfb      	ldrb	r3, [r7, #15]
 800aae6:	9300      	str	r3, [sp, #0]
 800aae8:	460b      	mov	r3, r1
 800aaea:	6939      	ldr	r1, [r7, #16]
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f7ff fea7 	bl	800a840 <tcp_create_segment>
 800aaf2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d063      	beq.n	800abc2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7fb fb1e 	bl	8006140 <pbuf_clen>
 800ab04:	4603      	mov	r3, r0
 800ab06:	461a      	mov	r2, r3
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ab0e:	1a9b      	subs	r3, r3, r2
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	6858      	ldr	r0, [r3, #4]
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	891a      	ldrh	r2, [r3, #8]
 800ab22:	89bb      	ldrh	r3, [r7, #12]
 800ab24:	1ad3      	subs	r3, r2, r3
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	4619      	mov	r1, r3
 800ab2a:	f7fb f8e9 	bl	8005d00 <pbuf_realloc>
  useg->len -= remainder;
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	891a      	ldrh	r2, [r3, #8]
 800ab32:	89bb      	ldrh	r3, [r7, #12]
 800ab34:	1ad3      	subs	r3, r2, r3
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	899b      	ldrh	r3, [r3, #12]
 800ab42:	b29c      	uxth	r4, r3
 800ab44:	7efb      	ldrb	r3, [r7, #27]
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7f9 fe8f 	bl	800486c <lwip_htons>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	461a      	mov	r2, r3
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	68db      	ldr	r3, [r3, #12]
 800ab56:	4322      	orrs	r2, r4
 800ab58:	b292      	uxth	r2, r2
 800ab5a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fb faed 	bl	8006140 <pbuf_clen>
 800ab66:	4603      	mov	r3, r0
 800ab68:	461a      	mov	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ab70:	4413      	add	r3, r2
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fb fade 	bl	8006140 <pbuf_clen>
 800ab84:	4603      	mov	r3, r0
 800ab86:	461a      	mov	r2, r3
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ab8e:	4413      	add	r3, r2
 800ab90:	b29a      	uxth	r2, r3
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	69fa      	ldr	r2, [r7, #28]
 800aba4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d103      	bne.n	800abb6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800abb6:	2300      	movs	r3, #0
 800abb8:	e016      	b.n	800abe8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800abba:	bf00      	nop
 800abbc:	e002      	b.n	800abc4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800abbe:	bf00      	nop
 800abc0:	e000      	b.n	800abc4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800abc2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d006      	beq.n	800abd8 <tcp_split_unsent_seg+0x25c>
 800abca:	4b09      	ldr	r3, [pc, #36]	; (800abf0 <tcp_split_unsent_seg+0x274>)
 800abcc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800abd0:	490d      	ldr	r1, [pc, #52]	; (800ac08 <tcp_split_unsent_seg+0x28c>)
 800abd2:	4809      	ldr	r0, [pc, #36]	; (800abf8 <tcp_split_unsent_seg+0x27c>)
 800abd4:	f004 fae8 	bl	800f1a8 <iprintf>
  if (p != NULL) {
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d002      	beq.n	800abe4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800abde:	6938      	ldr	r0, [r7, #16]
 800abe0:	f7fb fa26 	bl	8006030 <pbuf_free>
  }

  return ERR_MEM;
 800abe4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3724      	adds	r7, #36	; 0x24
 800abec:	46bd      	mov	sp, r7
 800abee:	bd90      	pop	{r4, r7, pc}
 800abf0:	08011e0c 	.word	0x08011e0c
 800abf4:	080121a0 	.word	0x080121a0
 800abf8:	08011e60 	.word	0x08011e60
 800abfc:	080121c4 	.word	0x080121c4
 800ac00:	080121e8 	.word	0x080121e8
 800ac04:	080121f8 	.word	0x080121f8
 800ac08:	08012208 	.word	0x08012208

0800ac0c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ac0c:	b590      	push	{r4, r7, lr}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d106      	bne.n	800ac28 <tcp_send_fin+0x1c>
 800ac1a:	4b21      	ldr	r3, [pc, #132]	; (800aca0 <tcp_send_fin+0x94>)
 800ac1c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ac20:	4920      	ldr	r1, [pc, #128]	; (800aca4 <tcp_send_fin+0x98>)
 800ac22:	4821      	ldr	r0, [pc, #132]	; (800aca8 <tcp_send_fin+0x9c>)
 800ac24:	f004 fac0 	bl	800f1a8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d02e      	beq.n	800ac8e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac34:	60fb      	str	r3, [r7, #12]
 800ac36:	e002      	b.n	800ac3e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d1f8      	bne.n	800ac38 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	899b      	ldrh	r3, [r3, #12]
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7f9 fe0c 	bl	800486c <lwip_htons>
 800ac54:	4603      	mov	r3, r0
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	f003 0307 	and.w	r3, r3, #7
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d116      	bne.n	800ac8e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	68db      	ldr	r3, [r3, #12]
 800ac64:	899b      	ldrh	r3, [r3, #12]
 800ac66:	b29c      	uxth	r4, r3
 800ac68:	2001      	movs	r0, #1
 800ac6a:	f7f9 fdff 	bl	800486c <lwip_htons>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	461a      	mov	r2, r3
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	4322      	orrs	r2, r4
 800ac78:	b292      	uxth	r2, r2
 800ac7a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	8b5b      	ldrh	r3, [r3, #26]
 800ac80:	f043 0320 	orr.w	r3, r3, #32
 800ac84:	b29a      	uxth	r2, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	e004      	b.n	800ac98 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ac8e:	2101      	movs	r1, #1
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 f80b 	bl	800acac <tcp_enqueue_flags>
 800ac96:	4603      	mov	r3, r0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3714      	adds	r7, #20
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd90      	pop	{r4, r7, pc}
 800aca0:	08011e0c 	.word	0x08011e0c
 800aca4:	08012214 	.word	0x08012214
 800aca8:	08011e60 	.word	0x08011e60

0800acac <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b08a      	sub	sp, #40	; 0x28
 800acb0:	af02      	add	r7, sp, #8
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	460b      	mov	r3, r1
 800acb6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800acb8:	2300      	movs	r3, #0
 800acba:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800acbc:	2300      	movs	r3, #0
 800acbe:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800acc0:	78fb      	ldrb	r3, [r7, #3]
 800acc2:	f003 0303 	and.w	r3, r3, #3
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d106      	bne.n	800acd8 <tcp_enqueue_flags+0x2c>
 800acca:	4b67      	ldr	r3, [pc, #412]	; (800ae68 <tcp_enqueue_flags+0x1bc>)
 800accc:	f240 4211 	movw	r2, #1041	; 0x411
 800acd0:	4966      	ldr	r1, [pc, #408]	; (800ae6c <tcp_enqueue_flags+0x1c0>)
 800acd2:	4867      	ldr	r0, [pc, #412]	; (800ae70 <tcp_enqueue_flags+0x1c4>)
 800acd4:	f004 fa68 	bl	800f1a8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d106      	bne.n	800acec <tcp_enqueue_flags+0x40>
 800acde:	4b62      	ldr	r3, [pc, #392]	; (800ae68 <tcp_enqueue_flags+0x1bc>)
 800ace0:	f240 4213 	movw	r2, #1043	; 0x413
 800ace4:	4963      	ldr	r1, [pc, #396]	; (800ae74 <tcp_enqueue_flags+0x1c8>)
 800ace6:	4862      	ldr	r0, [pc, #392]	; (800ae70 <tcp_enqueue_flags+0x1c4>)
 800ace8:	f004 fa5e 	bl	800f1a8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800acec:	78fb      	ldrb	r3, [r7, #3]
 800acee:	f003 0302 	and.w	r3, r3, #2
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d001      	beq.n	800acfa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800acf6:	2301      	movs	r3, #1
 800acf8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800acfa:	7ffb      	ldrb	r3, [r7, #31]
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	f003 0304 	and.w	r3, r3, #4
 800ad04:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ad06:	7dfb      	ldrb	r3, [r7, #23]
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ad0e:	4619      	mov	r1, r3
 800ad10:	2036      	movs	r0, #54	; 0x36
 800ad12:	f7fa fe97 	bl	8005a44 <pbuf_alloc>
 800ad16:	6138      	str	r0, [r7, #16]
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d109      	bne.n	800ad32 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	8b5b      	ldrh	r3, [r3, #26]
 800ad22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad26:	b29a      	uxth	r2, r3
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ad2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad30:	e095      	b.n	800ae5e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	895a      	ldrh	r2, [r3, #10]
 800ad36:	7dfb      	ldrb	r3, [r7, #23]
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d206      	bcs.n	800ad4c <tcp_enqueue_flags+0xa0>
 800ad3e:	4b4a      	ldr	r3, [pc, #296]	; (800ae68 <tcp_enqueue_flags+0x1bc>)
 800ad40:	f240 4239 	movw	r2, #1081	; 0x439
 800ad44:	494c      	ldr	r1, [pc, #304]	; (800ae78 <tcp_enqueue_flags+0x1cc>)
 800ad46:	484a      	ldr	r0, [pc, #296]	; (800ae70 <tcp_enqueue_flags+0x1c4>)
 800ad48:	f004 fa2e 	bl	800f1a8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ad50:	78fa      	ldrb	r2, [r7, #3]
 800ad52:	7ffb      	ldrb	r3, [r7, #31]
 800ad54:	9300      	str	r3, [sp, #0]
 800ad56:	460b      	mov	r3, r1
 800ad58:	6939      	ldr	r1, [r7, #16]
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f7ff fd70 	bl	800a840 <tcp_create_segment>
 800ad60:	60f8      	str	r0, [r7, #12]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d109      	bne.n	800ad7c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	8b5b      	ldrh	r3, [r3, #26]
 800ad6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad70:	b29a      	uxth	r2, r3
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ad76:	f04f 33ff 	mov.w	r3, #4294967295
 800ad7a:	e070      	b.n	800ae5e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	f003 0303 	and.w	r3, r3, #3
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d006      	beq.n	800ad96 <tcp_enqueue_flags+0xea>
 800ad88:	4b37      	ldr	r3, [pc, #220]	; (800ae68 <tcp_enqueue_flags+0x1bc>)
 800ad8a:	f240 4242 	movw	r2, #1090	; 0x442
 800ad8e:	493b      	ldr	r1, [pc, #236]	; (800ae7c <tcp_enqueue_flags+0x1d0>)
 800ad90:	4837      	ldr	r0, [pc, #220]	; (800ae70 <tcp_enqueue_flags+0x1c4>)
 800ad92:	f004 fa09 	bl	800f1a8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	891b      	ldrh	r3, [r3, #8]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d006      	beq.n	800adac <tcp_enqueue_flags+0x100>
 800ad9e:	4b32      	ldr	r3, [pc, #200]	; (800ae68 <tcp_enqueue_flags+0x1bc>)
 800ada0:	f240 4243 	movw	r2, #1091	; 0x443
 800ada4:	4936      	ldr	r1, [pc, #216]	; (800ae80 <tcp_enqueue_flags+0x1d4>)
 800ada6:	4832      	ldr	r0, [pc, #200]	; (800ae70 <tcp_enqueue_flags+0x1c4>)
 800ada8:	f004 f9fe 	bl	800f1a8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d103      	bne.n	800adbc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	66da      	str	r2, [r3, #108]	; 0x6c
 800adba:	e00d      	b.n	800add8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adc0:	61bb      	str	r3, [r7, #24]
 800adc2:	e002      	b.n	800adca <tcp_enqueue_flags+0x11e>
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	61bb      	str	r3, [r7, #24]
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1f8      	bne.n	800adc4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	68fa      	ldr	r2, [r7, #12]
 800add6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2200      	movs	r2, #0
 800addc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ade0:	78fb      	ldrb	r3, [r7, #3]
 800ade2:	f003 0302 	and.w	r3, r3, #2
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d104      	bne.n	800adf4 <tcp_enqueue_flags+0x148>
 800adea:	78fb      	ldrb	r3, [r7, #3]
 800adec:	f003 0301 	and.w	r3, r3, #1
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d004      	beq.n	800adfe <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adf8:	1c5a      	adds	r2, r3, #1
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800adfe:	78fb      	ldrb	r3, [r7, #3]
 800ae00:	f003 0301 	and.w	r3, r3, #1
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d006      	beq.n	800ae16 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	8b5b      	ldrh	r3, [r3, #26]
 800ae0c:	f043 0320 	orr.w	r3, r3, #32
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7fb f990 	bl	8006140 <pbuf_clen>
 800ae20:	4603      	mov	r3, r0
 800ae22:	461a      	mov	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ae2a:	4413      	add	r3, r2
 800ae2c:	b29a      	uxth	r2, r3
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d00e      	beq.n	800ae5c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d10a      	bne.n	800ae5c <tcp_enqueue_flags+0x1b0>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d106      	bne.n	800ae5c <tcp_enqueue_flags+0x1b0>
 800ae4e:	4b06      	ldr	r3, [pc, #24]	; (800ae68 <tcp_enqueue_flags+0x1bc>)
 800ae50:	f240 4265 	movw	r2, #1125	; 0x465
 800ae54:	490b      	ldr	r1, [pc, #44]	; (800ae84 <tcp_enqueue_flags+0x1d8>)
 800ae56:	4806      	ldr	r0, [pc, #24]	; (800ae70 <tcp_enqueue_flags+0x1c4>)
 800ae58:	f004 f9a6 	bl	800f1a8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3720      	adds	r7, #32
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	08011e0c 	.word	0x08011e0c
 800ae6c:	08012230 	.word	0x08012230
 800ae70:	08011e60 	.word	0x08011e60
 800ae74:	08012288 	.word	0x08012288
 800ae78:	080122a8 	.word	0x080122a8
 800ae7c:	080122e4 	.word	0x080122e4
 800ae80:	080122fc 	.word	0x080122fc
 800ae84:	08012328 	.word	0x08012328

0800ae88 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ae88:	b5b0      	push	{r4, r5, r7, lr}
 800ae8a:	b08a      	sub	sp, #40	; 0x28
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d106      	bne.n	800aea4 <tcp_output+0x1c>
 800ae96:	4b8a      	ldr	r3, [pc, #552]	; (800b0c0 <tcp_output+0x238>)
 800ae98:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ae9c:	4989      	ldr	r1, [pc, #548]	; (800b0c4 <tcp_output+0x23c>)
 800ae9e:	488a      	ldr	r0, [pc, #552]	; (800b0c8 <tcp_output+0x240>)
 800aea0:	f004 f982 	bl	800f1a8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	7d1b      	ldrb	r3, [r3, #20]
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d106      	bne.n	800aeba <tcp_output+0x32>
 800aeac:	4b84      	ldr	r3, [pc, #528]	; (800b0c0 <tcp_output+0x238>)
 800aeae:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800aeb2:	4986      	ldr	r1, [pc, #536]	; (800b0cc <tcp_output+0x244>)
 800aeb4:	4884      	ldr	r0, [pc, #528]	; (800b0c8 <tcp_output+0x240>)
 800aeb6:	f004 f977 	bl	800f1a8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800aeba:	4b85      	ldr	r3, [pc, #532]	; (800b0d0 <tcp_output+0x248>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d101      	bne.n	800aec8 <tcp_output+0x40>
    return ERR_OK;
 800aec4:	2300      	movs	r3, #0
 800aec6:	e1ce      	b.n	800b266 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aed4:	4293      	cmp	r3, r2
 800aed6:	bf28      	it	cs
 800aed8:	4613      	movcs	r3, r2
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aee2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800aee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d10b      	bne.n	800af02 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	8b5b      	ldrh	r3, [r3, #26]
 800aeee:	f003 0302 	and.w	r3, r3, #2
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f000 81aa 	beq.w	800b24c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fdcb 	bl	800ba94 <tcp_send_empty_ack>
 800aefe:	4603      	mov	r3, r0
 800af00:	e1b1      	b.n	800b266 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800af02:	6879      	ldr	r1, [r7, #4]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	3304      	adds	r3, #4
 800af08:	461a      	mov	r2, r3
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f7ff fc7c 	bl	800a808 <tcp_route>
 800af10:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d102      	bne.n	800af1e <tcp_output+0x96>
    return ERR_RTE;
 800af18:	f06f 0303 	mvn.w	r3, #3
 800af1c:	e1a3      	b.n	800b266 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d003      	beq.n	800af2c <tcp_output+0xa4>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d111      	bne.n	800af50 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d002      	beq.n	800af38 <tcp_output+0xb0>
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	3304      	adds	r3, #4
 800af36:	e000      	b.n	800af3a <tcp_output+0xb2>
 800af38:	2300      	movs	r3, #0
 800af3a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d102      	bne.n	800af48 <tcp_output+0xc0>
      return ERR_RTE;
 800af42:	f06f 0303 	mvn.w	r3, #3
 800af46:	e18e      	b.n	800b266 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800af50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	4618      	mov	r0, r3
 800af58:	f7f9 fc9d 	bl	8004896 <lwip_htonl>
 800af5c:	4602      	mov	r2, r0
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af62:	1ad3      	subs	r3, r2, r3
 800af64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af66:	8912      	ldrh	r2, [r2, #8]
 800af68:	4413      	add	r3, r2
 800af6a:	69ba      	ldr	r2, [r7, #24]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d227      	bcs.n	800afc0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800af76:	461a      	mov	r2, r3
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d114      	bne.n	800afa8 <tcp_output+0x120>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af82:	2b00      	cmp	r3, #0
 800af84:	d110      	bne.n	800afa8 <tcp_output+0x120>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d10b      	bne.n	800afa8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	8b5b      	ldrh	r3, [r3, #26]
 800afac:	f003 0302 	and.w	r3, r3, #2
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f000 814d 	beq.w	800b250 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 fd6c 	bl	800ba94 <tcp_send_empty_ack>
 800afbc:	4603      	mov	r3, r0
 800afbe:	e152      	b.n	800b266 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afcc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800afce:	6a3b      	ldr	r3, [r7, #32]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	f000 811c 	beq.w	800b20e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800afd6:	e002      	b.n	800afde <tcp_output+0x156>
 800afd8:	6a3b      	ldr	r3, [r7, #32]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	623b      	str	r3, [r7, #32]
 800afde:	6a3b      	ldr	r3, [r7, #32]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d1f8      	bne.n	800afd8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800afe6:	e112      	b.n	800b20e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800afe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	899b      	ldrh	r3, [r3, #12]
 800afee:	b29b      	uxth	r3, r3
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7f9 fc3b 	bl	800486c <lwip_htons>
 800aff6:	4603      	mov	r3, r0
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	f003 0304 	and.w	r3, r3, #4
 800affe:	2b00      	cmp	r3, #0
 800b000:	d006      	beq.n	800b010 <tcp_output+0x188>
 800b002:	4b2f      	ldr	r3, [pc, #188]	; (800b0c0 <tcp_output+0x238>)
 800b004:	f240 5236 	movw	r2, #1334	; 0x536
 800b008:	4932      	ldr	r1, [pc, #200]	; (800b0d4 <tcp_output+0x24c>)
 800b00a:	482f      	ldr	r0, [pc, #188]	; (800b0c8 <tcp_output+0x240>)
 800b00c:	f004 f8cc 	bl	800f1a8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b014:	2b00      	cmp	r3, #0
 800b016:	d01f      	beq.n	800b058 <tcp_output+0x1d0>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	8b5b      	ldrh	r3, [r3, #26]
 800b01c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b020:	2b00      	cmp	r3, #0
 800b022:	d119      	bne.n	800b058 <tcp_output+0x1d0>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d00b      	beq.n	800b044 <tcp_output+0x1bc>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d110      	bne.n	800b058 <tcp_output+0x1d0>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b03a:	891a      	ldrh	r2, [r3, #8]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b040:	429a      	cmp	r2, r3
 800b042:	d209      	bcs.n	800b058 <tcp_output+0x1d0>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d004      	beq.n	800b058 <tcp_output+0x1d0>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b054:	2b08      	cmp	r3, #8
 800b056:	d901      	bls.n	800b05c <tcp_output+0x1d4>
 800b058:	2301      	movs	r3, #1
 800b05a:	e000      	b.n	800b05e <tcp_output+0x1d6>
 800b05c:	2300      	movs	r3, #0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d106      	bne.n	800b070 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	8b5b      	ldrh	r3, [r3, #26]
 800b066:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f000 80e4 	beq.w	800b238 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	7d1b      	ldrb	r3, [r3, #20]
 800b074:	2b02      	cmp	r3, #2
 800b076:	d00d      	beq.n	800b094 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	899b      	ldrh	r3, [r3, #12]
 800b07e:	b29c      	uxth	r4, r3
 800b080:	2010      	movs	r0, #16
 800b082:	f7f9 fbf3 	bl	800486c <lwip_htons>
 800b086:	4603      	mov	r3, r0
 800b088:	461a      	mov	r2, r3
 800b08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	4322      	orrs	r2, r4
 800b090:	b292      	uxth	r2, r2
 800b092:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b094:	697a      	ldr	r2, [r7, #20]
 800b096:	6879      	ldr	r1, [r7, #4]
 800b098:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b09a:	f000 f909 	bl	800b2b0 <tcp_output_segment>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b0a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d016      	beq.n	800b0d8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	8b5b      	ldrh	r3, [r3, #26]
 800b0ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0b2:	b29a      	uxth	r2, r3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	835a      	strh	r2, [r3, #26]
      return err;
 800b0b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0bc:	e0d3      	b.n	800b266 <tcp_output+0x3de>
 800b0be:	bf00      	nop
 800b0c0:	08011e0c 	.word	0x08011e0c
 800b0c4:	08012350 	.word	0x08012350
 800b0c8:	08011e60 	.word	0x08011e60
 800b0cc:	08012368 	.word	0x08012368
 800b0d0:	200083f4 	.word	0x200083f4
 800b0d4:	08012390 	.word	0x08012390
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	7d1b      	ldrb	r3, [r3, #20]
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	d006      	beq.n	800b0f6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	8b5b      	ldrh	r3, [r3, #26]
 800b0ec:	f023 0303 	bic.w	r3, r3, #3
 800b0f0:	b29a      	uxth	r2, r3
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7f9 fbca 	bl	8004896 <lwip_htonl>
 800b102:	4604      	mov	r4, r0
 800b104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b106:	891b      	ldrh	r3, [r3, #8]
 800b108:	461d      	mov	r5, r3
 800b10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	899b      	ldrh	r3, [r3, #12]
 800b110:	b29b      	uxth	r3, r3
 800b112:	4618      	mov	r0, r3
 800b114:	f7f9 fbaa 	bl	800486c <lwip_htons>
 800b118:	4603      	mov	r3, r0
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	f003 0303 	and.w	r3, r3, #3
 800b120:	2b00      	cmp	r3, #0
 800b122:	d001      	beq.n	800b128 <tcp_output+0x2a0>
 800b124:	2301      	movs	r3, #1
 800b126:	e000      	b.n	800b12a <tcp_output+0x2a2>
 800b128:	2300      	movs	r3, #0
 800b12a:	442b      	add	r3, r5
 800b12c:	4423      	add	r3, r4
 800b12e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	1ad3      	subs	r3, r2, r3
 800b138:	2b00      	cmp	r3, #0
 800b13a:	da02      	bge.n	800b142 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	68ba      	ldr	r2, [r7, #8]
 800b140:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b144:	891b      	ldrh	r3, [r3, #8]
 800b146:	461c      	mov	r4, r3
 800b148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	899b      	ldrh	r3, [r3, #12]
 800b14e:	b29b      	uxth	r3, r3
 800b150:	4618      	mov	r0, r3
 800b152:	f7f9 fb8b 	bl	800486c <lwip_htons>
 800b156:	4603      	mov	r3, r0
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	f003 0303 	and.w	r3, r3, #3
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d001      	beq.n	800b166 <tcp_output+0x2de>
 800b162:	2301      	movs	r3, #1
 800b164:	e000      	b.n	800b168 <tcp_output+0x2e0>
 800b166:	2300      	movs	r3, #0
 800b168:	4423      	add	r3, r4
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d049      	beq.n	800b202 <tcp_output+0x37a>
      seg->next = NULL;
 800b16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b170:	2200      	movs	r2, #0
 800b172:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d105      	bne.n	800b188 <tcp_output+0x300>
        pcb->unacked = seg;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b180:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800b182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b184:	623b      	str	r3, [r7, #32]
 800b186:	e03f      	b.n	800b208 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	4618      	mov	r0, r3
 800b190:	f7f9 fb81 	bl	8004896 <lwip_htonl>
 800b194:	4604      	mov	r4, r0
 800b196:	6a3b      	ldr	r3, [r7, #32]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7f9 fb7a 	bl	8004896 <lwip_htonl>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	1ae3      	subs	r3, r4, r3
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	da24      	bge.n	800b1f4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	3370      	adds	r3, #112	; 0x70
 800b1ae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b1b0:	e002      	b.n	800b1b8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d011      	beq.n	800b1e4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7f9 fb64 	bl	8004896 <lwip_htonl>
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7f9 fb5d 	bl	8004896 <lwip_htonl>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	dbe6      	blt.n	800b1b2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ea:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1f0:	601a      	str	r2, [r3, #0]
 800b1f2:	e009      	b.n	800b208 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b1f4:	6a3b      	ldr	r3, [r7, #32]
 800b1f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1f8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b1fa:	6a3b      	ldr	r3, [r7, #32]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	623b      	str	r3, [r7, #32]
 800b200:	e002      	b.n	800b208 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b202:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b204:	f7fc fc3f 	bl	8007a86 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b20c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b210:	2b00      	cmp	r3, #0
 800b212:	d012      	beq.n	800b23a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7f9 fb3b 	bl	8004896 <lwip_htonl>
 800b220:	4602      	mov	r2, r0
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b226:	1ad3      	subs	r3, r2, r3
 800b228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b22a:	8912      	ldrh	r2, [r2, #8]
 800b22c:	4413      	add	r3, r2
  while (seg != NULL &&
 800b22e:	69ba      	ldr	r2, [r7, #24]
 800b230:	429a      	cmp	r2, r3
 800b232:	f4bf aed9 	bcs.w	800afe8 <tcp_output+0x160>
 800b236:	e000      	b.n	800b23a <tcp_output+0x3b2>
      break;
 800b238:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d108      	bne.n	800b254 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2200      	movs	r2, #0
 800b246:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800b24a:	e004      	b.n	800b256 <tcp_output+0x3ce>
    goto output_done;
 800b24c:	bf00      	nop
 800b24e:	e002      	b.n	800b256 <tcp_output+0x3ce>
    goto output_done;
 800b250:	bf00      	nop
 800b252:	e000      	b.n	800b256 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b254:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	8b5b      	ldrh	r3, [r3, #26]
 800b25a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b25e:	b29a      	uxth	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3728      	adds	r7, #40	; 0x28
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bdb0      	pop	{r4, r5, r7, pc}
 800b26e:	bf00      	nop

0800b270 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d106      	bne.n	800b28c <tcp_output_segment_busy+0x1c>
 800b27e:	4b09      	ldr	r3, [pc, #36]	; (800b2a4 <tcp_output_segment_busy+0x34>)
 800b280:	f240 529a 	movw	r2, #1434	; 0x59a
 800b284:	4908      	ldr	r1, [pc, #32]	; (800b2a8 <tcp_output_segment_busy+0x38>)
 800b286:	4809      	ldr	r0, [pc, #36]	; (800b2ac <tcp_output_segment_busy+0x3c>)
 800b288:	f003 ff8e 	bl	800f1a8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	7b9b      	ldrb	r3, [r3, #14]
 800b292:	2b01      	cmp	r3, #1
 800b294:	d001      	beq.n	800b29a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b296:	2301      	movs	r3, #1
 800b298:	e000      	b.n	800b29c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b29a:	2300      	movs	r3, #0
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3708      	adds	r7, #8
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	08011e0c 	.word	0x08011e0c
 800b2a8:	080123a8 	.word	0x080123a8
 800b2ac:	08011e60 	.word	0x08011e60

0800b2b0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b2b0:	b5b0      	push	{r4, r5, r7, lr}
 800b2b2:	b08c      	sub	sp, #48	; 0x30
 800b2b4:	af04      	add	r7, sp, #16
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d106      	bne.n	800b2d0 <tcp_output_segment+0x20>
 800b2c2:	4b63      	ldr	r3, [pc, #396]	; (800b450 <tcp_output_segment+0x1a0>)
 800b2c4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b2c8:	4962      	ldr	r1, [pc, #392]	; (800b454 <tcp_output_segment+0x1a4>)
 800b2ca:	4863      	ldr	r0, [pc, #396]	; (800b458 <tcp_output_segment+0x1a8>)
 800b2cc:	f003 ff6c 	bl	800f1a8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d106      	bne.n	800b2e4 <tcp_output_segment+0x34>
 800b2d6:	4b5e      	ldr	r3, [pc, #376]	; (800b450 <tcp_output_segment+0x1a0>)
 800b2d8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b2dc:	495f      	ldr	r1, [pc, #380]	; (800b45c <tcp_output_segment+0x1ac>)
 800b2de:	485e      	ldr	r0, [pc, #376]	; (800b458 <tcp_output_segment+0x1a8>)
 800b2e0:	f003 ff62 	bl	800f1a8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d106      	bne.n	800b2f8 <tcp_output_segment+0x48>
 800b2ea:	4b59      	ldr	r3, [pc, #356]	; (800b450 <tcp_output_segment+0x1a0>)
 800b2ec:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b2f0:	495b      	ldr	r1, [pc, #364]	; (800b460 <tcp_output_segment+0x1b0>)
 800b2f2:	4859      	ldr	r0, [pc, #356]	; (800b458 <tcp_output_segment+0x1a8>)
 800b2f4:	f003 ff58 	bl	800f1a8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f7ff ffb9 	bl	800b270 <tcp_output_segment_busy>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d001      	beq.n	800b308 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b304:	2300      	movs	r3, #0
 800b306:	e09f      	b.n	800b448 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	68dc      	ldr	r4, [r3, #12]
 800b310:	4610      	mov	r0, r2
 800b312:	f7f9 fac0 	bl	8004896 <lwip_htonl>
 800b316:	4603      	mov	r3, r0
 800b318:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	68dc      	ldr	r4, [r3, #12]
 800b322:	4610      	mov	r0, r2
 800b324:	f7f9 faa2 	bl	800486c <lwip_htons>
 800b328:	4603      	mov	r3, r0
 800b32a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b330:	68ba      	ldr	r2, [r7, #8]
 800b332:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b334:	441a      	add	r2, r3
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	3314      	adds	r3, #20
 800b340:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	7a9b      	ldrb	r3, [r3, #10]
 800b346:	f003 0301 	and.w	r3, r3, #1
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d015      	beq.n	800b37a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	3304      	adds	r3, #4
 800b352:	461a      	mov	r2, r3
 800b354:	6879      	ldr	r1, [r7, #4]
 800b356:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b35a:	f7fc fe8b 	bl	8008074 <tcp_eff_send_mss_netif>
 800b35e:	4603      	mov	r3, r0
 800b360:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b362:	8b7b      	ldrh	r3, [r7, #26]
 800b364:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b368:	4618      	mov	r0, r3
 800b36a:	f7f9 fa94 	bl	8004896 <lwip_htonl>
 800b36e:	4602      	mov	r2, r0
 800b370:	69fb      	ldr	r3, [r7, #28]
 800b372:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	3304      	adds	r3, #4
 800b378:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b380:	2b00      	cmp	r3, #0
 800b382:	da02      	bge.n	800b38a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	2200      	movs	r2, #0
 800b388:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d10c      	bne.n	800b3ac <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b392:	4b34      	ldr	r3, [pc, #208]	; (800b464 <tcp_output_segment+0x1b4>)
 800b394:	681a      	ldr	r2, [r3, #0]
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7f9 fa78 	bl	8004896 <lwip_htonl>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	68da      	ldr	r2, [r3, #12]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	8959      	ldrh	r1, [r3, #10]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	8b3a      	ldrh	r2, [r7, #24]
 800b3c6:	1a8a      	subs	r2, r1, r2
 800b3c8:	b292      	uxth	r2, r2
 800b3ca:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	8919      	ldrh	r1, [r3, #8]
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	8b3a      	ldrh	r2, [r7, #24]
 800b3d8:	1a8a      	subs	r2, r1, r2
 800b3da:	b292      	uxth	r2, r2
 800b3dc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	68d2      	ldr	r2, [r2, #12]
 800b3e6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	741a      	strb	r2, [r3, #16]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	f103 0214 	add.w	r2, r3, #20
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	7a9b      	ldrb	r3, [r3, #10]
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	f003 0304 	and.w	r3, r3, #4
 800b406:	4413      	add	r3, r2
 800b408:	69fa      	ldr	r2, [r7, #28]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d006      	beq.n	800b41c <tcp_output_segment+0x16c>
 800b40e:	4b10      	ldr	r3, [pc, #64]	; (800b450 <tcp_output_segment+0x1a0>)
 800b410:	f240 621c 	movw	r2, #1564	; 0x61c
 800b414:	4914      	ldr	r1, [pc, #80]	; (800b468 <tcp_output_segment+0x1b8>)
 800b416:	4810      	ldr	r0, [pc, #64]	; (800b458 <tcp_output_segment+0x1a8>)
 800b418:	f003 fec6 	bl	800f1a8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6858      	ldr	r0, [r3, #4]
 800b420:	68b9      	ldr	r1, [r7, #8]
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	1d1c      	adds	r4, r3, #4
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	7add      	ldrb	r5, [r3, #11]
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	7a9b      	ldrb	r3, [r3, #10]
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	9202      	str	r2, [sp, #8]
 800b432:	2206      	movs	r2, #6
 800b434:	9201      	str	r2, [sp, #4]
 800b436:	9300      	str	r3, [sp, #0]
 800b438:	462b      	mov	r3, r5
 800b43a:	4622      	mov	r2, r4
 800b43c:	f002 fd92 	bl	800df64 <ip4_output_if>
 800b440:	4603      	mov	r3, r0
 800b442:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b444:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3720      	adds	r7, #32
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bdb0      	pop	{r4, r5, r7, pc}
 800b450:	08011e0c 	.word	0x08011e0c
 800b454:	080123d0 	.word	0x080123d0
 800b458:	08011e60 	.word	0x08011e60
 800b45c:	080123f0 	.word	0x080123f0
 800b460:	08012410 	.word	0x08012410
 800b464:	200083a8 	.word	0x200083a8
 800b468:	08012434 	.word	0x08012434

0800b46c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b46c:	b5b0      	push	{r4, r5, r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d106      	bne.n	800b488 <tcp_rexmit_rto_prepare+0x1c>
 800b47a:	4b31      	ldr	r3, [pc, #196]	; (800b540 <tcp_rexmit_rto_prepare+0xd4>)
 800b47c:	f240 6263 	movw	r2, #1635	; 0x663
 800b480:	4930      	ldr	r1, [pc, #192]	; (800b544 <tcp_rexmit_rto_prepare+0xd8>)
 800b482:	4831      	ldr	r0, [pc, #196]	; (800b548 <tcp_rexmit_rto_prepare+0xdc>)
 800b484:	f003 fe90 	bl	800f1a8 <iprintf>

  if (pcb->unacked == NULL) {
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d102      	bne.n	800b496 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b490:	f06f 0305 	mvn.w	r3, #5
 800b494:	e050      	b.n	800b538 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b49a:	60fb      	str	r3, [r7, #12]
 800b49c:	e00b      	b.n	800b4b6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	f7ff fee6 	bl	800b270 <tcp_output_segment_busy>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d002      	beq.n	800b4b0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b4aa:	f06f 0305 	mvn.w	r3, #5
 800b4ae:	e043      	b.n	800b538 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	60fb      	str	r3, [r7, #12]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d1ef      	bne.n	800b49e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b4be:	68f8      	ldr	r0, [r7, #12]
 800b4c0:	f7ff fed6 	bl	800b270 <tcp_output_segment_busy>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d002      	beq.n	800b4d0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b4ca:	f06f 0305 	mvn.w	r3, #5
 800b4ce:	e033      	b.n	800b538 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	8b5b      	ldrh	r3, [r3, #26]
 800b4ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7f9 f9cb 	bl	8004896 <lwip_htonl>
 800b500:	4604      	mov	r4, r0
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	891b      	ldrh	r3, [r3, #8]
 800b506:	461d      	mov	r5, r3
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	899b      	ldrh	r3, [r3, #12]
 800b50e:	b29b      	uxth	r3, r3
 800b510:	4618      	mov	r0, r3
 800b512:	f7f9 f9ab 	bl	800486c <lwip_htons>
 800b516:	4603      	mov	r3, r0
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	f003 0303 	and.w	r3, r3, #3
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d001      	beq.n	800b526 <tcp_rexmit_rto_prepare+0xba>
 800b522:	2301      	movs	r3, #1
 800b524:	e000      	b.n	800b528 <tcp_rexmit_rto_prepare+0xbc>
 800b526:	2300      	movs	r3, #0
 800b528:	442b      	add	r3, r5
 800b52a:	18e2      	adds	r2, r4, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bdb0      	pop	{r4, r5, r7, pc}
 800b540:	08011e0c 	.word	0x08011e0c
 800b544:	08012448 	.word	0x08012448
 800b548:	08011e60 	.word	0x08011e60

0800b54c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d106      	bne.n	800b568 <tcp_rexmit_rto_commit+0x1c>
 800b55a:	4b0d      	ldr	r3, [pc, #52]	; (800b590 <tcp_rexmit_rto_commit+0x44>)
 800b55c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b560:	490c      	ldr	r1, [pc, #48]	; (800b594 <tcp_rexmit_rto_commit+0x48>)
 800b562:	480d      	ldr	r0, [pc, #52]	; (800b598 <tcp_rexmit_rto_commit+0x4c>)
 800b564:	f003 fe20 	bl	800f1a8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b56e:	2bff      	cmp	r3, #255	; 0xff
 800b570:	d007      	beq.n	800b582 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b578:	3301      	adds	r3, #1
 800b57a:	b2da      	uxtb	r2, r3
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f7ff fc80 	bl	800ae88 <tcp_output>
}
 800b588:	bf00      	nop
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	08011e0c 	.word	0x08011e0c
 800b594:	0801246c 	.word	0x0801246c
 800b598:	08011e60 	.word	0x08011e60

0800b59c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d106      	bne.n	800b5b8 <tcp_rexmit_rto+0x1c>
 800b5aa:	4b0a      	ldr	r3, [pc, #40]	; (800b5d4 <tcp_rexmit_rto+0x38>)
 800b5ac:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b5b0:	4909      	ldr	r1, [pc, #36]	; (800b5d8 <tcp_rexmit_rto+0x3c>)
 800b5b2:	480a      	ldr	r0, [pc, #40]	; (800b5dc <tcp_rexmit_rto+0x40>)
 800b5b4:	f003 fdf8 	bl	800f1a8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f7ff ff57 	bl	800b46c <tcp_rexmit_rto_prepare>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d102      	bne.n	800b5ca <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f7ff ffc1 	bl	800b54c <tcp_rexmit_rto_commit>
  }
}
 800b5ca:	bf00      	nop
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	08011e0c 	.word	0x08011e0c
 800b5d8:	08012490 	.word	0x08012490
 800b5dc:	08011e60 	.word	0x08011e60

0800b5e0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b5e0:	b590      	push	{r4, r7, lr}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d106      	bne.n	800b5fc <tcp_rexmit+0x1c>
 800b5ee:	4b2f      	ldr	r3, [pc, #188]	; (800b6ac <tcp_rexmit+0xcc>)
 800b5f0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b5f4:	492e      	ldr	r1, [pc, #184]	; (800b6b0 <tcp_rexmit+0xd0>)
 800b5f6:	482f      	ldr	r0, [pc, #188]	; (800b6b4 <tcp_rexmit+0xd4>)
 800b5f8:	f003 fdd6 	bl	800f1a8 <iprintf>

  if (pcb->unacked == NULL) {
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b600:	2b00      	cmp	r3, #0
 800b602:	d102      	bne.n	800b60a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b604:	f06f 0305 	mvn.w	r3, #5
 800b608:	e04c      	b.n	800b6a4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b60e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b610:	68b8      	ldr	r0, [r7, #8]
 800b612:	f7ff fe2d 	bl	800b270 <tcp_output_segment_busy>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d002      	beq.n	800b622 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b61c:	f06f 0305 	mvn.w	r3, #5
 800b620:	e040      	b.n	800b6a4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	336c      	adds	r3, #108	; 0x6c
 800b62e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b630:	e002      	b.n	800b638 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d011      	beq.n	800b664 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	4618      	mov	r0, r3
 800b64a:	f7f9 f924 	bl	8004896 <lwip_htonl>
 800b64e:	4604      	mov	r4, r0
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	4618      	mov	r0, r3
 800b658:	f7f9 f91d 	bl	8004896 <lwip_htonl>
 800b65c:	4603      	mov	r3, r0
 800b65e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b660:	2b00      	cmp	r3, #0
 800b662:	dbe6      	blt.n	800b632 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	68ba      	ldr	r2, [r7, #8]
 800b670:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d103      	bne.n	800b682 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b688:	2bff      	cmp	r3, #255	; 0xff
 800b68a:	d007      	beq.n	800b69c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b692:	3301      	adds	r3, #1
 800b694:	b2da      	uxtb	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b6a2:	2300      	movs	r3, #0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3714      	adds	r7, #20
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd90      	pop	{r4, r7, pc}
 800b6ac:	08011e0c 	.word	0x08011e0c
 800b6b0:	080124ac 	.word	0x080124ac
 800b6b4:	08011e60 	.word	0x08011e60

0800b6b8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d106      	bne.n	800b6d4 <tcp_rexmit_fast+0x1c>
 800b6c6:	4b2a      	ldr	r3, [pc, #168]	; (800b770 <tcp_rexmit_fast+0xb8>)
 800b6c8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b6cc:	4929      	ldr	r1, [pc, #164]	; (800b774 <tcp_rexmit_fast+0xbc>)
 800b6ce:	482a      	ldr	r0, [pc, #168]	; (800b778 <tcp_rexmit_fast+0xc0>)
 800b6d0:	f003 fd6a 	bl	800f1a8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d044      	beq.n	800b766 <tcp_rexmit_fast+0xae>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	8b5b      	ldrh	r3, [r3, #26]
 800b6e0:	f003 0304 	and.w	r3, r3, #4
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d13e      	bne.n	800b766 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f7ff ff79 	bl	800b5e0 <tcp_rexmit>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d138      	bne.n	800b766 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b700:	4293      	cmp	r3, r2
 800b702:	bf28      	it	cs
 800b704:	4613      	movcs	r3, r2
 800b706:	b29b      	uxth	r3, r3
 800b708:	0fda      	lsrs	r2, r3, #31
 800b70a:	4413      	add	r3, r2
 800b70c:	105b      	asrs	r3, r3, #1
 800b70e:	b29a      	uxth	r2, r3
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b71c:	461a      	mov	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b722:	005b      	lsls	r3, r3, #1
 800b724:	429a      	cmp	r2, r3
 800b726:	d206      	bcs.n	800b736 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b72c:	005b      	lsls	r3, r3, #1
 800b72e:	b29a      	uxth	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b740:	4619      	mov	r1, r3
 800b742:	0049      	lsls	r1, r1, #1
 800b744:	440b      	add	r3, r1
 800b746:	b29b      	uxth	r3, r3
 800b748:	4413      	add	r3, r2
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	8b5b      	ldrh	r3, [r3, #26]
 800b756:	f043 0304 	orr.w	r3, r3, #4
 800b75a:	b29a      	uxth	r2, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b766:	bf00      	nop
 800b768:	3708      	adds	r7, #8
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	08011e0c 	.word	0x08011e0c
 800b774:	080124c4 	.word	0x080124c4
 800b778:	08011e60 	.word	0x08011e60

0800b77c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	607b      	str	r3, [r7, #4]
 800b786:	460b      	mov	r3, r1
 800b788:	817b      	strh	r3, [r7, #10]
 800b78a:	4613      	mov	r3, r2
 800b78c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b78e:	897a      	ldrh	r2, [r7, #10]
 800b790:	893b      	ldrh	r3, [r7, #8]
 800b792:	4413      	add	r3, r2
 800b794:	b29b      	uxth	r3, r3
 800b796:	3314      	adds	r3, #20
 800b798:	b29b      	uxth	r3, r3
 800b79a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b79e:	4619      	mov	r1, r3
 800b7a0:	2022      	movs	r0, #34	; 0x22
 800b7a2:	f7fa f94f 	bl	8005a44 <pbuf_alloc>
 800b7a6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d04d      	beq.n	800b84a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b7ae:	897b      	ldrh	r3, [r7, #10]
 800b7b0:	3313      	adds	r3, #19
 800b7b2:	697a      	ldr	r2, [r7, #20]
 800b7b4:	8952      	ldrh	r2, [r2, #10]
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	db06      	blt.n	800b7c8 <tcp_output_alloc_header_common+0x4c>
 800b7ba:	4b26      	ldr	r3, [pc, #152]	; (800b854 <tcp_output_alloc_header_common+0xd8>)
 800b7bc:	f240 7223 	movw	r2, #1827	; 0x723
 800b7c0:	4925      	ldr	r1, [pc, #148]	; (800b858 <tcp_output_alloc_header_common+0xdc>)
 800b7c2:	4826      	ldr	r0, [pc, #152]	; (800b85c <tcp_output_alloc_header_common+0xe0>)
 800b7c4:	f003 fcf0 	bl	800f1a8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b7ce:	8c3b      	ldrh	r3, [r7, #32]
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7f9 f84b 	bl	800486c <lwip_htons>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	461a      	mov	r2, r3
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b7de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7f9 f843 	bl	800486c <lwip_htons>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f7f9 f84e 	bl	8004896 <lwip_htonl>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b800:	897b      	ldrh	r3, [r7, #10]
 800b802:	089b      	lsrs	r3, r3, #2
 800b804:	b29b      	uxth	r3, r3
 800b806:	3305      	adds	r3, #5
 800b808:	b29b      	uxth	r3, r3
 800b80a:	031b      	lsls	r3, r3, #12
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b812:	b29b      	uxth	r3, r3
 800b814:	4313      	orrs	r3, r2
 800b816:	b29b      	uxth	r3, r3
 800b818:	4618      	mov	r0, r3
 800b81a:	f7f9 f827 	bl	800486c <lwip_htons>
 800b81e:	4603      	mov	r3, r0
 800b820:	461a      	mov	r2, r3
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b826:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b828:	4618      	mov	r0, r3
 800b82a:	f7f9 f81f 	bl	800486c <lwip_htons>
 800b82e:	4603      	mov	r3, r0
 800b830:	461a      	mov	r2, r3
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	2200      	movs	r2, #0
 800b83a:	741a      	strb	r2, [r3, #16]
 800b83c:	2200      	movs	r2, #0
 800b83e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	2200      	movs	r2, #0
 800b844:	749a      	strb	r2, [r3, #18]
 800b846:	2200      	movs	r2, #0
 800b848:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b84a:	697b      	ldr	r3, [r7, #20]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3718      	adds	r7, #24
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	08011e0c 	.word	0x08011e0c
 800b858:	080124e4 	.word	0x080124e4
 800b85c:	08011e60 	.word	0x08011e60

0800b860 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b860:	b5b0      	push	{r4, r5, r7, lr}
 800b862:	b08a      	sub	sp, #40	; 0x28
 800b864:	af04      	add	r7, sp, #16
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	607b      	str	r3, [r7, #4]
 800b86a:	460b      	mov	r3, r1
 800b86c:	817b      	strh	r3, [r7, #10]
 800b86e:	4613      	mov	r3, r2
 800b870:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d106      	bne.n	800b886 <tcp_output_alloc_header+0x26>
 800b878:	4b15      	ldr	r3, [pc, #84]	; (800b8d0 <tcp_output_alloc_header+0x70>)
 800b87a:	f240 7242 	movw	r2, #1858	; 0x742
 800b87e:	4915      	ldr	r1, [pc, #84]	; (800b8d4 <tcp_output_alloc_header+0x74>)
 800b880:	4815      	ldr	r0, [pc, #84]	; (800b8d8 <tcp_output_alloc_header+0x78>)
 800b882:	f003 fc91 	bl	800f1a8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	8adb      	ldrh	r3, [r3, #22]
 800b88e:	68fa      	ldr	r2, [r7, #12]
 800b890:	8b12      	ldrh	r2, [r2, #24]
 800b892:	68f9      	ldr	r1, [r7, #12]
 800b894:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b896:	893d      	ldrh	r5, [r7, #8]
 800b898:	897c      	ldrh	r4, [r7, #10]
 800b89a:	9103      	str	r1, [sp, #12]
 800b89c:	2110      	movs	r1, #16
 800b89e:	9102      	str	r1, [sp, #8]
 800b8a0:	9201      	str	r2, [sp, #4]
 800b8a2:	9300      	str	r3, [sp, #0]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	462a      	mov	r2, r5
 800b8a8:	4621      	mov	r1, r4
 800b8aa:	f7ff ff67 	bl	800b77c <tcp_output_alloc_header_common>
 800b8ae:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d006      	beq.n	800b8c4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ba:	68fa      	ldr	r2, [r7, #12]
 800b8bc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b8be:	441a      	add	r2, r3
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b8c4:	697b      	ldr	r3, [r7, #20]
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3718      	adds	r7, #24
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bdb0      	pop	{r4, r5, r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	08011e0c 	.word	0x08011e0c
 800b8d4:	08012514 	.word	0x08012514
 800b8d8:	08011e60 	.word	0x08011e60

0800b8dc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b088      	sub	sp, #32
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	4611      	mov	r1, r2
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	71fb      	strb	r3, [r7, #7]
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d106      	bne.n	800b90a <tcp_output_fill_options+0x2e>
 800b8fc:	4b13      	ldr	r3, [pc, #76]	; (800b94c <tcp_output_fill_options+0x70>)
 800b8fe:	f240 7256 	movw	r2, #1878	; 0x756
 800b902:	4913      	ldr	r1, [pc, #76]	; (800b950 <tcp_output_fill_options+0x74>)
 800b904:	4813      	ldr	r0, [pc, #76]	; (800b954 <tcp_output_fill_options+0x78>)
 800b906:	f003 fc4f 	bl	800f1a8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b910:	69bb      	ldr	r3, [r7, #24]
 800b912:	3314      	adds	r3, #20
 800b914:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	f103 0214 	add.w	r2, r3, #20
 800b91c:	8bfb      	ldrh	r3, [r7, #30]
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4619      	mov	r1, r3
 800b922:	79fb      	ldrb	r3, [r7, #7]
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	f003 0304 	and.w	r3, r3, #4
 800b92a:	440b      	add	r3, r1
 800b92c:	4413      	add	r3, r2
 800b92e:	697a      	ldr	r2, [r7, #20]
 800b930:	429a      	cmp	r2, r3
 800b932:	d006      	beq.n	800b942 <tcp_output_fill_options+0x66>
 800b934:	4b05      	ldr	r3, [pc, #20]	; (800b94c <tcp_output_fill_options+0x70>)
 800b936:	f240 7275 	movw	r2, #1909	; 0x775
 800b93a:	4907      	ldr	r1, [pc, #28]	; (800b958 <tcp_output_fill_options+0x7c>)
 800b93c:	4805      	ldr	r0, [pc, #20]	; (800b954 <tcp_output_fill_options+0x78>)
 800b93e:	f003 fc33 	bl	800f1a8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b942:	bf00      	nop
 800b944:	3720      	adds	r7, #32
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	08011e0c 	.word	0x08011e0c
 800b950:	0801253c 	.word	0x0801253c
 800b954:	08011e60 	.word	0x08011e60
 800b958:	08012434 	.word	0x08012434

0800b95c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b08a      	sub	sp, #40	; 0x28
 800b960:	af04      	add	r7, sp, #16
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	607a      	str	r2, [r7, #4]
 800b968:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d106      	bne.n	800b97e <tcp_output_control_segment+0x22>
 800b970:	4b1c      	ldr	r3, [pc, #112]	; (800b9e4 <tcp_output_control_segment+0x88>)
 800b972:	f240 7287 	movw	r2, #1927	; 0x787
 800b976:	491c      	ldr	r1, [pc, #112]	; (800b9e8 <tcp_output_control_segment+0x8c>)
 800b978:	481c      	ldr	r0, [pc, #112]	; (800b9ec <tcp_output_control_segment+0x90>)
 800b97a:	f003 fc15 	bl	800f1a8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	6879      	ldr	r1, [r7, #4]
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f7fe ff40 	bl	800a808 <tcp_route>
 800b988:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d102      	bne.n	800b996 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b990:	23fc      	movs	r3, #252	; 0xfc
 800b992:	75fb      	strb	r3, [r7, #23]
 800b994:	e01c      	b.n	800b9d0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d006      	beq.n	800b9aa <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	7adb      	ldrb	r3, [r3, #11]
 800b9a0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	7a9b      	ldrb	r3, [r3, #10]
 800b9a6:	757b      	strb	r3, [r7, #21]
 800b9a8:	e003      	b.n	800b9b2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b9aa:	23ff      	movs	r3, #255	; 0xff
 800b9ac:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b9b2:	7dba      	ldrb	r2, [r7, #22]
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	9302      	str	r3, [sp, #8]
 800b9b8:	2306      	movs	r3, #6
 800b9ba:	9301      	str	r3, [sp, #4]
 800b9bc:	7d7b      	ldrb	r3, [r7, #21]
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	683a      	ldr	r2, [r7, #0]
 800b9c4:	6879      	ldr	r1, [r7, #4]
 800b9c6:	68b8      	ldr	r0, [r7, #8]
 800b9c8:	f002 facc 	bl	800df64 <ip4_output_if>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b9d0:	68b8      	ldr	r0, [r7, #8]
 800b9d2:	f7fa fb2d 	bl	8006030 <pbuf_free>
  return err;
 800b9d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3718      	adds	r7, #24
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	08011e0c 	.word	0x08011e0c
 800b9e8:	08012564 	.word	0x08012564
 800b9ec:	08011e60 	.word	0x08011e60

0800b9f0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b9f0:	b590      	push	{r4, r7, lr}
 800b9f2:	b08b      	sub	sp, #44	; 0x2c
 800b9f4:	af04      	add	r7, sp, #16
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	60b9      	str	r1, [r7, #8]
 800b9fa:	607a      	str	r2, [r7, #4]
 800b9fc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d106      	bne.n	800ba12 <tcp_rst+0x22>
 800ba04:	4b1f      	ldr	r3, [pc, #124]	; (800ba84 <tcp_rst+0x94>)
 800ba06:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800ba0a:	491f      	ldr	r1, [pc, #124]	; (800ba88 <tcp_rst+0x98>)
 800ba0c:	481f      	ldr	r0, [pc, #124]	; (800ba8c <tcp_rst+0x9c>)
 800ba0e:	f003 fbcb 	bl	800f1a8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ba12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d106      	bne.n	800ba26 <tcp_rst+0x36>
 800ba18:	4b1a      	ldr	r3, [pc, #104]	; (800ba84 <tcp_rst+0x94>)
 800ba1a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ba1e:	491c      	ldr	r1, [pc, #112]	; (800ba90 <tcp_rst+0xa0>)
 800ba20:	481a      	ldr	r0, [pc, #104]	; (800ba8c <tcp_rst+0x9c>)
 800ba22:	f003 fbc1 	bl	800f1a8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ba26:	2300      	movs	r3, #0
 800ba28:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ba2a:	f246 0308 	movw	r3, #24584	; 0x6008
 800ba2e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ba30:	7dfb      	ldrb	r3, [r7, #23]
 800ba32:	b29c      	uxth	r4, r3
 800ba34:	68b8      	ldr	r0, [r7, #8]
 800ba36:	f7f8 ff2e 	bl	8004896 <lwip_htonl>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	8abb      	ldrh	r3, [r7, #20]
 800ba3e:	9303      	str	r3, [sp, #12]
 800ba40:	2314      	movs	r3, #20
 800ba42:	9302      	str	r3, [sp, #8]
 800ba44:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ba46:	9301      	str	r3, [sp, #4]
 800ba48:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	4613      	mov	r3, r2
 800ba4e:	2200      	movs	r2, #0
 800ba50:	4621      	mov	r1, r4
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f7ff fe92 	bl	800b77c <tcp_output_alloc_header_common>
 800ba58:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d00c      	beq.n	800ba7a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ba60:	7dfb      	ldrb	r3, [r7, #23]
 800ba62:	2200      	movs	r2, #0
 800ba64:	6939      	ldr	r1, [r7, #16]
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	f7ff ff38 	bl	800b8dc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ba6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6e:	683a      	ldr	r2, [r7, #0]
 800ba70:	6939      	ldr	r1, [r7, #16]
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	f7ff ff72 	bl	800b95c <tcp_output_control_segment>
 800ba78:	e000      	b.n	800ba7c <tcp_rst+0x8c>
    return;
 800ba7a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ba7c:	371c      	adds	r7, #28
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd90      	pop	{r4, r7, pc}
 800ba82:	bf00      	nop
 800ba84:	08011e0c 	.word	0x08011e0c
 800ba88:	08012590 	.word	0x08012590
 800ba8c:	08011e60 	.word	0x08011e60
 800ba90:	080125ac 	.word	0x080125ac

0800ba94 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ba94:	b590      	push	{r4, r7, lr}
 800ba96:	b087      	sub	sp, #28
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800baa0:	2300      	movs	r3, #0
 800baa2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d106      	bne.n	800bab8 <tcp_send_empty_ack+0x24>
 800baaa:	4b28      	ldr	r3, [pc, #160]	; (800bb4c <tcp_send_empty_ack+0xb8>)
 800baac:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800bab0:	4927      	ldr	r1, [pc, #156]	; (800bb50 <tcp_send_empty_ack+0xbc>)
 800bab2:	4828      	ldr	r0, [pc, #160]	; (800bb54 <tcp_send_empty_ack+0xc0>)
 800bab4:	f003 fb78 	bl	800f1a8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bab8:	7dfb      	ldrb	r3, [r7, #23]
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	b2db      	uxtb	r3, r3
 800babe:	f003 0304 	and.w	r3, r3, #4
 800bac2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800bac4:	7d7b      	ldrb	r3, [r7, #21]
 800bac6:	b29c      	uxth	r4, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bacc:	4618      	mov	r0, r3
 800bace:	f7f8 fee2 	bl	8004896 <lwip_htonl>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2200      	movs	r2, #0
 800bad6:	4621      	mov	r1, r4
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f7ff fec1 	bl	800b860 <tcp_output_alloc_header>
 800bade:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d109      	bne.n	800bafa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	8b5b      	ldrh	r3, [r3, #26]
 800baea:	f043 0303 	orr.w	r3, r3, #3
 800baee:	b29a      	uxth	r2, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800baf4:	f06f 0301 	mvn.w	r3, #1
 800baf8:	e023      	b.n	800bb42 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800bafa:	7dbb      	ldrb	r3, [r7, #22]
 800bafc:	7dfa      	ldrb	r2, [r7, #23]
 800bafe:	6939      	ldr	r1, [r7, #16]
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f7ff feeb 	bl	800b8dc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	3304      	adds	r3, #4
 800bb0c:	6939      	ldr	r1, [r7, #16]
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f7ff ff24 	bl	800b95c <tcp_output_control_segment>
 800bb14:	4603      	mov	r3, r0
 800bb16:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bb18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d007      	beq.n	800bb30 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	8b5b      	ldrh	r3, [r3, #26]
 800bb24:	f043 0303 	orr.w	r3, r3, #3
 800bb28:	b29a      	uxth	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	835a      	strh	r2, [r3, #26]
 800bb2e:	e006      	b.n	800bb3e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	8b5b      	ldrh	r3, [r3, #26]
 800bb34:	f023 0303 	bic.w	r3, r3, #3
 800bb38:	b29a      	uxth	r2, r3
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800bb3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	371c      	adds	r7, #28
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd90      	pop	{r4, r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	08011e0c 	.word	0x08011e0c
 800bb50:	080125c8 	.word	0x080125c8
 800bb54:	08011e60 	.word	0x08011e60

0800bb58 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800bb58:	b590      	push	{r4, r7, lr}
 800bb5a:	b087      	sub	sp, #28
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bb60:	2300      	movs	r3, #0
 800bb62:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d106      	bne.n	800bb78 <tcp_keepalive+0x20>
 800bb6a:	4b18      	ldr	r3, [pc, #96]	; (800bbcc <tcp_keepalive+0x74>)
 800bb6c:	f640 0224 	movw	r2, #2084	; 0x824
 800bb70:	4917      	ldr	r1, [pc, #92]	; (800bbd0 <tcp_keepalive+0x78>)
 800bb72:	4818      	ldr	r0, [pc, #96]	; (800bbd4 <tcp_keepalive+0x7c>)
 800bb74:	f003 fb18 	bl	800f1a8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800bb78:	7dfb      	ldrb	r3, [r7, #23]
 800bb7a:	b29c      	uxth	r4, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb80:	3b01      	subs	r3, #1
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7f8 fe87 	bl	8004896 <lwip_htonl>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	4621      	mov	r1, r4
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f7ff fe66 	bl	800b860 <tcp_output_alloc_header>
 800bb94:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d102      	bne.n	800bba2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800bb9c:	f04f 33ff 	mov.w	r3, #4294967295
 800bba0:	e010      	b.n	800bbc4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bba2:	7dfb      	ldrb	r3, [r7, #23]
 800bba4:	2200      	movs	r2, #0
 800bba6:	6939      	ldr	r1, [r7, #16]
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f7ff fe97 	bl	800b8dc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	3304      	adds	r3, #4
 800bbb4:	6939      	ldr	r1, [r7, #16]
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f7ff fed0 	bl	800b95c <tcp_output_control_segment>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bbc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	371c      	adds	r7, #28
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd90      	pop	{r4, r7, pc}
 800bbcc:	08011e0c 	.word	0x08011e0c
 800bbd0:	080125e8 	.word	0x080125e8
 800bbd4:	08011e60 	.word	0x08011e60

0800bbd8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800bbd8:	b590      	push	{r4, r7, lr}
 800bbda:	b08b      	sub	sp, #44	; 0x2c
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d106      	bne.n	800bbfa <tcp_zero_window_probe+0x22>
 800bbec:	4b4c      	ldr	r3, [pc, #304]	; (800bd20 <tcp_zero_window_probe+0x148>)
 800bbee:	f640 024f 	movw	r2, #2127	; 0x84f
 800bbf2:	494c      	ldr	r1, [pc, #304]	; (800bd24 <tcp_zero_window_probe+0x14c>)
 800bbf4:	484c      	ldr	r0, [pc, #304]	; (800bd28 <tcp_zero_window_probe+0x150>)
 800bbf6:	f003 fad7 	bl	800f1a8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbfe:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800bc00:	6a3b      	ldr	r3, [r7, #32]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d101      	bne.n	800bc0a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800bc06:	2300      	movs	r3, #0
 800bc08:	e086      	b.n	800bd18 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bc10:	2bff      	cmp	r3, #255	; 0xff
 800bc12:	d007      	beq.n	800bc24 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	b2da      	uxtb	r2, r3
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bc24:	6a3b      	ldr	r3, [r7, #32]
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	899b      	ldrh	r3, [r3, #12]
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7f8 fe1d 	bl	800486c <lwip_htons>
 800bc32:	4603      	mov	r3, r0
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	f003 0301 	and.w	r3, r3, #1
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d005      	beq.n	800bc4a <tcp_zero_window_probe+0x72>
 800bc3e:	6a3b      	ldr	r3, [r7, #32]
 800bc40:	891b      	ldrh	r3, [r3, #8]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d101      	bne.n	800bc4a <tcp_zero_window_probe+0x72>
 800bc46:	2301      	movs	r3, #1
 800bc48:	e000      	b.n	800bc4c <tcp_zero_window_probe+0x74>
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800bc4e:	7ffb      	ldrb	r3, [r7, #31]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	bf0c      	ite	eq
 800bc54:	2301      	moveq	r3, #1
 800bc56:	2300      	movne	r3, #0
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bc5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc60:	b299      	uxth	r1, r3
 800bc62:	6a3b      	ldr	r3, [r7, #32]
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	8bba      	ldrh	r2, [r7, #28]
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f7ff fdf8 	bl	800b860 <tcp_output_alloc_header>
 800bc70:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800bc72:	69bb      	ldr	r3, [r7, #24]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d102      	bne.n	800bc7e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800bc78:	f04f 33ff 	mov.w	r3, #4294967295
 800bc7c:	e04c      	b.n	800bd18 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800bc84:	7ffb      	ldrb	r3, [r7, #31]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d011      	beq.n	800bcae <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	899b      	ldrh	r3, [r3, #12]
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	b21b      	sxth	r3, r3
 800bc92:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bc96:	b21c      	sxth	r4, r3
 800bc98:	2011      	movs	r0, #17
 800bc9a:	f7f8 fde7 	bl	800486c <lwip_htons>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	b21b      	sxth	r3, r3
 800bca2:	4323      	orrs	r3, r4
 800bca4:	b21b      	sxth	r3, r3
 800bca6:	b29a      	uxth	r2, r3
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	819a      	strh	r2, [r3, #12]
 800bcac:	e010      	b.n	800bcd0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	3314      	adds	r3, #20
 800bcb4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bcb6:	6a3b      	ldr	r3, [r7, #32]
 800bcb8:	6858      	ldr	r0, [r3, #4]
 800bcba:	6a3b      	ldr	r3, [r7, #32]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	891a      	ldrh	r2, [r3, #8]
 800bcc0:	6a3b      	ldr	r3, [r7, #32]
 800bcc2:	891b      	ldrh	r3, [r3, #8]
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	2201      	movs	r2, #1
 800bcca:	6939      	ldr	r1, [r7, #16]
 800bccc:	f7fa fbaa 	bl	8006424 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bcd0:	6a3b      	ldr	r3, [r7, #32]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7f8 fddd 	bl	8004896 <lwip_htonl>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	3301      	adds	r3, #1
 800bce0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	1ad3      	subs	r3, r2, r3
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	da02      	bge.n	800bcf4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bcf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	69b9      	ldr	r1, [r7, #24]
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f7ff fded 	bl	800b8dc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	3304      	adds	r3, #4
 800bd08:	69b9      	ldr	r1, [r7, #24]
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f7ff fe26 	bl	800b95c <tcp_output_control_segment>
 800bd10:	4603      	mov	r3, r0
 800bd12:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bd14:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	372c      	adds	r7, #44	; 0x2c
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd90      	pop	{r4, r7, pc}
 800bd20:	08011e0c 	.word	0x08011e0c
 800bd24:	08012604 	.word	0x08012604
 800bd28:	08011e60 	.word	0x08011e60

0800bd2c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800bd34:	f7fa ff0c 	bl	8006b50 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bd38:	4b0a      	ldr	r3, [pc, #40]	; (800bd64 <tcpip_tcp_timer+0x38>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d103      	bne.n	800bd48 <tcpip_tcp_timer+0x1c>
 800bd40:	4b09      	ldr	r3, [pc, #36]	; (800bd68 <tcpip_tcp_timer+0x3c>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d005      	beq.n	800bd54 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bd48:	2200      	movs	r2, #0
 800bd4a:	4908      	ldr	r1, [pc, #32]	; (800bd6c <tcpip_tcp_timer+0x40>)
 800bd4c:	20fa      	movs	r0, #250	; 0xfa
 800bd4e:	f000 f8f3 	bl	800bf38 <sys_timeout>
 800bd52:	e003      	b.n	800bd5c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800bd54:	4b06      	ldr	r3, [pc, #24]	; (800bd70 <tcpip_tcp_timer+0x44>)
 800bd56:	2200      	movs	r2, #0
 800bd58:	601a      	str	r2, [r3, #0]
  }
}
 800bd5a:	bf00      	nop
 800bd5c:	bf00      	nop
 800bd5e:	3708      	adds	r7, #8
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	200083b4 	.word	0x200083b4
 800bd68:	200083b8 	.word	0x200083b8
 800bd6c:	0800bd2d 	.word	0x0800bd2d
 800bd70:	20008400 	.word	0x20008400

0800bd74 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bd78:	4b0a      	ldr	r3, [pc, #40]	; (800bda4 <tcp_timer_needed+0x30>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d10f      	bne.n	800bda0 <tcp_timer_needed+0x2c>
 800bd80:	4b09      	ldr	r3, [pc, #36]	; (800bda8 <tcp_timer_needed+0x34>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d103      	bne.n	800bd90 <tcp_timer_needed+0x1c>
 800bd88:	4b08      	ldr	r3, [pc, #32]	; (800bdac <tcp_timer_needed+0x38>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d007      	beq.n	800bda0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800bd90:	4b04      	ldr	r3, [pc, #16]	; (800bda4 <tcp_timer_needed+0x30>)
 800bd92:	2201      	movs	r2, #1
 800bd94:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bd96:	2200      	movs	r2, #0
 800bd98:	4905      	ldr	r1, [pc, #20]	; (800bdb0 <tcp_timer_needed+0x3c>)
 800bd9a:	20fa      	movs	r0, #250	; 0xfa
 800bd9c:	f000 f8cc 	bl	800bf38 <sys_timeout>
  }
}
 800bda0:	bf00      	nop
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	20008400 	.word	0x20008400
 800bda8:	200083b4 	.word	0x200083b4
 800bdac:	200083b8 	.word	0x200083b8
 800bdb0:	0800bd2d 	.word	0x0800bd2d

0800bdb4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bdc0:	2007      	movs	r0, #7
 800bdc2:	f7f9 fa39 	bl	8005238 <memp_malloc>
 800bdc6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d109      	bne.n	800bde2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d151      	bne.n	800be78 <sys_timeout_abs+0xc4>
 800bdd4:	4b2a      	ldr	r3, [pc, #168]	; (800be80 <sys_timeout_abs+0xcc>)
 800bdd6:	22be      	movs	r2, #190	; 0xbe
 800bdd8:	492a      	ldr	r1, [pc, #168]	; (800be84 <sys_timeout_abs+0xd0>)
 800bdda:	482b      	ldr	r0, [pc, #172]	; (800be88 <sys_timeout_abs+0xd4>)
 800bddc:	f003 f9e4 	bl	800f1a8 <iprintf>
    return;
 800bde0:	e04a      	b.n	800be78 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	2200      	movs	r2, #0
 800bde6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	68ba      	ldr	r2, [r7, #8]
 800bdec:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800bdfa:	4b24      	ldr	r3, [pc, #144]	; (800be8c <sys_timeout_abs+0xd8>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d103      	bne.n	800be0a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800be02:	4a22      	ldr	r2, [pc, #136]	; (800be8c <sys_timeout_abs+0xd8>)
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	6013      	str	r3, [r2, #0]
    return;
 800be08:	e037      	b.n	800be7a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	685a      	ldr	r2, [r3, #4]
 800be0e:	4b1f      	ldr	r3, [pc, #124]	; (800be8c <sys_timeout_abs+0xd8>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	1ad3      	subs	r3, r2, r3
 800be16:	0fdb      	lsrs	r3, r3, #31
 800be18:	f003 0301 	and.w	r3, r3, #1
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d007      	beq.n	800be32 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800be22:	4b1a      	ldr	r3, [pc, #104]	; (800be8c <sys_timeout_abs+0xd8>)
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800be2a:	4a18      	ldr	r2, [pc, #96]	; (800be8c <sys_timeout_abs+0xd8>)
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	6013      	str	r3, [r2, #0]
 800be30:	e023      	b.n	800be7a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800be32:	4b16      	ldr	r3, [pc, #88]	; (800be8c <sys_timeout_abs+0xd8>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	617b      	str	r3, [r7, #20]
 800be38:	e01a      	b.n	800be70 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00b      	beq.n	800be5a <sys_timeout_abs+0xa6>
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	685a      	ldr	r2, [r3, #4]
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	1ad3      	subs	r3, r2, r3
 800be4e:	0fdb      	lsrs	r3, r3, #31
 800be50:	f003 0301 	and.w	r3, r3, #1
 800be54:	b2db      	uxtb	r3, r3
 800be56:	2b00      	cmp	r3, #0
 800be58:	d007      	beq.n	800be6a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	693a      	ldr	r2, [r7, #16]
 800be66:	601a      	str	r2, [r3, #0]
        break;
 800be68:	e007      	b.n	800be7a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	617b      	str	r3, [r7, #20]
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d1e1      	bne.n	800be3a <sys_timeout_abs+0x86>
 800be76:	e000      	b.n	800be7a <sys_timeout_abs+0xc6>
    return;
 800be78:	bf00      	nop
      }
    }
  }
}
 800be7a:	3718      	adds	r7, #24
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	08012628 	.word	0x08012628
 800be84:	0801265c 	.word	0x0801265c
 800be88:	0801269c 	.word	0x0801269c
 800be8c:	200083f8 	.word	0x200083f8

0800be90 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b086      	sub	sp, #24
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	4798      	blx	r3

  now = sys_now();
 800bea2:	f7f8 fae3 	bl	800446c <sys_now>
 800bea6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	4b0f      	ldr	r3, [pc, #60]	; (800beec <lwip_cyclic_timer+0x5c>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4413      	add	r3, r2
 800beb2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800beb4:	68fa      	ldr	r2, [r7, #12]
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	1ad3      	subs	r3, r2, r3
 800beba:	0fdb      	lsrs	r3, r3, #31
 800bebc:	f003 0301 	and.w	r3, r3, #1
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d009      	beq.n	800beda <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	4413      	add	r3, r2
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	4907      	ldr	r1, [pc, #28]	; (800bef0 <lwip_cyclic_timer+0x60>)
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7ff ff6e 	bl	800bdb4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800bed8:	e004      	b.n	800bee4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	4904      	ldr	r1, [pc, #16]	; (800bef0 <lwip_cyclic_timer+0x60>)
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	f7ff ff68 	bl	800bdb4 <sys_timeout_abs>
}
 800bee4:	bf00      	nop
 800bee6:	3718      	adds	r7, #24
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	200083fc 	.word	0x200083fc
 800bef0:	0800be91 	.word	0x0800be91

0800bef4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800befa:	2301      	movs	r3, #1
 800befc:	607b      	str	r3, [r7, #4]
 800befe:	e00e      	b.n	800bf1e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bf00:	4a0b      	ldr	r2, [pc, #44]	; (800bf30 <sys_timeouts_init+0x3c>)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	00db      	lsls	r3, r3, #3
 800bf0c:	4a08      	ldr	r2, [pc, #32]	; (800bf30 <sys_timeouts_init+0x3c>)
 800bf0e:	4413      	add	r3, r2
 800bf10:	461a      	mov	r2, r3
 800bf12:	4908      	ldr	r1, [pc, #32]	; (800bf34 <sys_timeouts_init+0x40>)
 800bf14:	f000 f810 	bl	800bf38 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	607b      	str	r3, [r7, #4]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d9ed      	bls.n	800bf00 <sys_timeouts_init+0xc>
  }
}
 800bf24:	bf00      	nop
 800bf26:	bf00      	nop
 800bf28:	3708      	adds	r7, #8
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	0801321c 	.word	0x0801321c
 800bf34:	0800be91 	.word	0x0800be91

0800bf38 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b086      	sub	sp, #24
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf4a:	d306      	bcc.n	800bf5a <sys_timeout+0x22>
 800bf4c:	4b0a      	ldr	r3, [pc, #40]	; (800bf78 <sys_timeout+0x40>)
 800bf4e:	f240 1229 	movw	r2, #297	; 0x129
 800bf52:	490a      	ldr	r1, [pc, #40]	; (800bf7c <sys_timeout+0x44>)
 800bf54:	480a      	ldr	r0, [pc, #40]	; (800bf80 <sys_timeout+0x48>)
 800bf56:	f003 f927 	bl	800f1a8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bf5a:	f7f8 fa87 	bl	800446c <sys_now>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	4413      	add	r3, r2
 800bf64:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	68b9      	ldr	r1, [r7, #8]
 800bf6a:	6978      	ldr	r0, [r7, #20]
 800bf6c:	f7ff ff22 	bl	800bdb4 <sys_timeout_abs>
#endif
}
 800bf70:	bf00      	nop
 800bf72:	3718      	adds	r7, #24
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	08012628 	.word	0x08012628
 800bf7c:	080126c4 	.word	0x080126c4
 800bf80:	0801269c 	.word	0x0801269c

0800bf84 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bf8a:	f7f8 fa6f 	bl	800446c <sys_now>
 800bf8e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800bf90:	4b1a      	ldr	r3, [pc, #104]	; (800bffc <sys_check_timeouts+0x78>)
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d001      	beq.n	800bf9e <sys_check_timeouts+0x1a>
 800bf9a:	f7f9 fcfd 	bl	8005998 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800bf9e:	4b18      	ldr	r3, [pc, #96]	; (800c000 <sys_check_timeouts+0x7c>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d022      	beq.n	800bff0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	68fa      	ldr	r2, [r7, #12]
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	0fdb      	lsrs	r3, r3, #31
 800bfb4:	f003 0301 	and.w	r3, r3, #1
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d11a      	bne.n	800bff4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4a0f      	ldr	r2, [pc, #60]	; (800c000 <sys_check_timeouts+0x7c>)
 800bfc4:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	689b      	ldr	r3, [r3, #8]
 800bfca:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	4a0b      	ldr	r2, [pc, #44]	; (800c004 <sys_check_timeouts+0x80>)
 800bfd8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bfda:	68b9      	ldr	r1, [r7, #8]
 800bfdc:	2007      	movs	r0, #7
 800bfde:	f7f9 f99b 	bl	8005318 <memp_free>
    if (handler != NULL) {
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d0d3      	beq.n	800bf90 <sys_check_timeouts+0xc>
      handler(arg);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6838      	ldr	r0, [r7, #0]
 800bfec:	4798      	blx	r3
  do {
 800bfee:	e7cf      	b.n	800bf90 <sys_check_timeouts+0xc>
      return;
 800bff0:	bf00      	nop
 800bff2:	e000      	b.n	800bff6 <sys_check_timeouts+0x72>
      return;
 800bff4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bff6:	3710      	adds	r7, #16
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	200083a1 	.word	0x200083a1
 800c000:	200083f8 	.word	0x200083f8
 800c004:	200083fc 	.word	0x200083fc

0800c008 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c00c:	f003 f8e4 	bl	800f1d8 <rand>
 800c010:	4603      	mov	r3, r0
 800c012:	b29b      	uxth	r3, r3
 800c014:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c018:	b29b      	uxth	r3, r3
 800c01a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c01e:	b29a      	uxth	r2, r3
 800c020:	4b01      	ldr	r3, [pc, #4]	; (800c028 <udp_init+0x20>)
 800c022:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c024:	bf00      	nop
 800c026:	bd80      	pop	{r7, pc}
 800c028:	20000028 	.word	0x20000028

0800c02c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b083      	sub	sp, #12
 800c030:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800c032:	2300      	movs	r3, #0
 800c034:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c036:	4b17      	ldr	r3, [pc, #92]	; (800c094 <udp_new_port+0x68>)
 800c038:	881b      	ldrh	r3, [r3, #0]
 800c03a:	1c5a      	adds	r2, r3, #1
 800c03c:	b291      	uxth	r1, r2
 800c03e:	4a15      	ldr	r2, [pc, #84]	; (800c094 <udp_new_port+0x68>)
 800c040:	8011      	strh	r1, [r2, #0]
 800c042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c046:	4293      	cmp	r3, r2
 800c048:	d103      	bne.n	800c052 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c04a:	4b12      	ldr	r3, [pc, #72]	; (800c094 <udp_new_port+0x68>)
 800c04c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c050:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c052:	4b11      	ldr	r3, [pc, #68]	; (800c098 <udp_new_port+0x6c>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	603b      	str	r3, [r7, #0]
 800c058:	e011      	b.n	800c07e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	8a5a      	ldrh	r2, [r3, #18]
 800c05e:	4b0d      	ldr	r3, [pc, #52]	; (800c094 <udp_new_port+0x68>)
 800c060:	881b      	ldrh	r3, [r3, #0]
 800c062:	429a      	cmp	r2, r3
 800c064:	d108      	bne.n	800c078 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c066:	88fb      	ldrh	r3, [r7, #6]
 800c068:	3301      	adds	r3, #1
 800c06a:	80fb      	strh	r3, [r7, #6]
 800c06c:	88fb      	ldrh	r3, [r7, #6]
 800c06e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c072:	d3e0      	bcc.n	800c036 <udp_new_port+0xa>
        return 0;
 800c074:	2300      	movs	r3, #0
 800c076:	e007      	b.n	800c088 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	603b      	str	r3, [r7, #0]
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d1ea      	bne.n	800c05a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800c084:	4b03      	ldr	r3, [pc, #12]	; (800c094 <udp_new_port+0x68>)
 800c086:	881b      	ldrh	r3, [r3, #0]
}
 800c088:	4618      	mov	r0, r3
 800c08a:	370c      	adds	r7, #12
 800c08c:	46bd      	mov	sp, r7
 800c08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c092:	4770      	bx	lr
 800c094:	20000028 	.word	0x20000028
 800c098:	20008404 	.word	0x20008404

0800c09c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d105      	bne.n	800c0bc <udp_input_local_match+0x20>
 800c0b0:	4b27      	ldr	r3, [pc, #156]	; (800c150 <udp_input_local_match+0xb4>)
 800c0b2:	2287      	movs	r2, #135	; 0x87
 800c0b4:	4927      	ldr	r1, [pc, #156]	; (800c154 <udp_input_local_match+0xb8>)
 800c0b6:	4828      	ldr	r0, [pc, #160]	; (800c158 <udp_input_local_match+0xbc>)
 800c0b8:	f003 f876 	bl	800f1a8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d105      	bne.n	800c0ce <udp_input_local_match+0x32>
 800c0c2:	4b23      	ldr	r3, [pc, #140]	; (800c150 <udp_input_local_match+0xb4>)
 800c0c4:	2288      	movs	r2, #136	; 0x88
 800c0c6:	4925      	ldr	r1, [pc, #148]	; (800c15c <udp_input_local_match+0xc0>)
 800c0c8:	4823      	ldr	r0, [pc, #140]	; (800c158 <udp_input_local_match+0xbc>)
 800c0ca:	f003 f86d 	bl	800f1a8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	7a1b      	ldrb	r3, [r3, #8]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d00b      	beq.n	800c0ee <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	7a1a      	ldrb	r2, [r3, #8]
 800c0da:	4b21      	ldr	r3, [pc, #132]	; (800c160 <udp_input_local_match+0xc4>)
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d001      	beq.n	800c0ee <udp_input_local_match+0x52>
    return 0;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	e02b      	b.n	800c146 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c0ee:	79fb      	ldrb	r3, [r7, #7]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d018      	beq.n	800c126 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d013      	beq.n	800c122 <udp_input_local_match+0x86>
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00f      	beq.n	800c122 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c102:	4b17      	ldr	r3, [pc, #92]	; (800c160 <udp_input_local_match+0xc4>)
 800c104:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c10a:	d00a      	beq.n	800c122 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	4b13      	ldr	r3, [pc, #76]	; (800c160 <udp_input_local_match+0xc4>)
 800c112:	695b      	ldr	r3, [r3, #20]
 800c114:	405a      	eors	r2, r3
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	3308      	adds	r3, #8
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d110      	bne.n	800c144 <udp_input_local_match+0xa8>
          return 1;
 800c122:	2301      	movs	r3, #1
 800c124:	e00f      	b.n	800c146 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d009      	beq.n	800c140 <udp_input_local_match+0xa4>
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d005      	beq.n	800c140 <udp_input_local_match+0xa4>
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681a      	ldr	r2, [r3, #0]
 800c138:	4b09      	ldr	r3, [pc, #36]	; (800c160 <udp_input_local_match+0xc4>)
 800c13a:	695b      	ldr	r3, [r3, #20]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d101      	bne.n	800c144 <udp_input_local_match+0xa8>
        return 1;
 800c140:	2301      	movs	r3, #1
 800c142:	e000      	b.n	800c146 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c144:	2300      	movs	r3, #0
}
 800c146:	4618      	mov	r0, r3
 800c148:	3710      	adds	r7, #16
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	08012710 	.word	0x08012710
 800c154:	08012740 	.word	0x08012740
 800c158:	08012764 	.word	0x08012764
 800c15c:	0801278c 	.word	0x0801278c
 800c160:	20004dbc 	.word	0x20004dbc

0800c164 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c164:	b590      	push	{r4, r7, lr}
 800c166:	b08d      	sub	sp, #52	; 0x34
 800c168:	af02      	add	r7, sp, #8
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c16e:	2300      	movs	r3, #0
 800c170:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d105      	bne.n	800c184 <udp_input+0x20>
 800c178:	4b7c      	ldr	r3, [pc, #496]	; (800c36c <udp_input+0x208>)
 800c17a:	22cf      	movs	r2, #207	; 0xcf
 800c17c:	497c      	ldr	r1, [pc, #496]	; (800c370 <udp_input+0x20c>)
 800c17e:	487d      	ldr	r0, [pc, #500]	; (800c374 <udp_input+0x210>)
 800c180:	f003 f812 	bl	800f1a8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d105      	bne.n	800c196 <udp_input+0x32>
 800c18a:	4b78      	ldr	r3, [pc, #480]	; (800c36c <udp_input+0x208>)
 800c18c:	22d0      	movs	r2, #208	; 0xd0
 800c18e:	497a      	ldr	r1, [pc, #488]	; (800c378 <udp_input+0x214>)
 800c190:	4878      	ldr	r0, [pc, #480]	; (800c374 <udp_input+0x210>)
 800c192:	f003 f809 	bl	800f1a8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	895b      	ldrh	r3, [r3, #10]
 800c19a:	2b07      	cmp	r3, #7
 800c19c:	d803      	bhi.n	800c1a6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f7f9 ff46 	bl	8006030 <pbuf_free>
    goto end;
 800c1a4:	e0de      	b.n	800c364 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c1ac:	4b73      	ldr	r3, [pc, #460]	; (800c37c <udp_input+0x218>)
 800c1ae:	695b      	ldr	r3, [r3, #20]
 800c1b0:	4a72      	ldr	r2, [pc, #456]	; (800c37c <udp_input+0x218>)
 800c1b2:	6812      	ldr	r2, [r2, #0]
 800c1b4:	4611      	mov	r1, r2
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f001 ffac 	bl	800e114 <ip4_addr_isbroadcast_u32>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	881b      	ldrh	r3, [r3, #0]
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7f8 fb50 	bl	800486c <lwip_htons>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	885b      	ldrh	r3, [r3, #2]
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7f8 fb48 	bl	800486c <lwip_htons>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1ec:	4b64      	ldr	r3, [pc, #400]	; (800c380 <udp_input+0x21c>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	627b      	str	r3, [r7, #36]	; 0x24
 800c1f2:	e054      	b.n	800c29e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f6:	8a5b      	ldrh	r3, [r3, #18]
 800c1f8:	89fa      	ldrh	r2, [r7, #14]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d14a      	bne.n	800c294 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c1fe:	7cfb      	ldrb	r3, [r7, #19]
 800c200:	461a      	mov	r2, r3
 800c202:	6839      	ldr	r1, [r7, #0]
 800c204:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c206:	f7ff ff49 	bl	800c09c <udp_input_local_match>
 800c20a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d041      	beq.n	800c294 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c212:	7c1b      	ldrb	r3, [r3, #16]
 800c214:	f003 0304 	and.w	r3, r3, #4
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d11d      	bne.n	800c258 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d102      	bne.n	800c228 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c224:	61fb      	str	r3, [r7, #28]
 800c226:	e017      	b.n	800c258 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c228:	7cfb      	ldrb	r3, [r7, #19]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d014      	beq.n	800c258 <udp_input+0xf4>
 800c22e:	4b53      	ldr	r3, [pc, #332]	; (800c37c <udp_input+0x218>)
 800c230:	695b      	ldr	r3, [r3, #20]
 800c232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c236:	d10f      	bne.n	800c258 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	3304      	adds	r3, #4
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	429a      	cmp	r2, r3
 800c244:	d008      	beq.n	800c258 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	3304      	adds	r3, #4
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	429a      	cmp	r2, r3
 800c252:	d101      	bne.n	800c258 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c256:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25a:	8a9b      	ldrh	r3, [r3, #20]
 800c25c:	8a3a      	ldrh	r2, [r7, #16]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d118      	bne.n	800c294 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c264:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c266:	2b00      	cmp	r3, #0
 800c268:	d005      	beq.n	800c276 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26c:	685a      	ldr	r2, [r3, #4]
 800c26e:	4b43      	ldr	r3, [pc, #268]	; (800c37c <udp_input+0x218>)
 800c270:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c272:	429a      	cmp	r2, r3
 800c274:	d10e      	bne.n	800c294 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c276:	6a3b      	ldr	r3, [r7, #32]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d014      	beq.n	800c2a6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27e:	68da      	ldr	r2, [r3, #12]
 800c280:	6a3b      	ldr	r3, [r7, #32]
 800c282:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c284:	4b3e      	ldr	r3, [pc, #248]	; (800c380 <udp_input+0x21c>)
 800c286:	681a      	ldr	r2, [r3, #0]
 800c288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c28c:	4a3c      	ldr	r2, [pc, #240]	; (800c380 <udp_input+0x21c>)
 800c28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c290:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c292:	e008      	b.n	800c2a6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800c294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c296:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	627b      	str	r3, [r7, #36]	; 0x24
 800c29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d1a7      	bne.n	800c1f4 <udp_input+0x90>
 800c2a4:	e000      	b.n	800c2a8 <udp_input+0x144>
        break;
 800c2a6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d101      	bne.n	800c2b2 <udp_input+0x14e>
    pcb = uncon_pcb;
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d002      	beq.n	800c2be <udp_input+0x15a>
    for_us = 1;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	76fb      	strb	r3, [r7, #27]
 800c2bc:	e00a      	b.n	800c2d4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	3304      	adds	r3, #4
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	4b2d      	ldr	r3, [pc, #180]	; (800c37c <udp_input+0x218>)
 800c2c6:	695b      	ldr	r3, [r3, #20]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	bf0c      	ite	eq
 800c2cc:	2301      	moveq	r3, #1
 800c2ce:	2300      	movne	r3, #0
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c2d4:	7efb      	ldrb	r3, [r7, #27]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d041      	beq.n	800c35e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c2da:	2108      	movs	r1, #8
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f7f9 fe0f 	bl	8005f00 <pbuf_remove_header>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d00a      	beq.n	800c2fe <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c2e8:	4b20      	ldr	r3, [pc, #128]	; (800c36c <udp_input+0x208>)
 800c2ea:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c2ee:	4925      	ldr	r1, [pc, #148]	; (800c384 <udp_input+0x220>)
 800c2f0:	4820      	ldr	r0, [pc, #128]	; (800c374 <udp_input+0x210>)
 800c2f2:	f002 ff59 	bl	800f1a8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f7f9 fe9a 	bl	8006030 <pbuf_free>
      goto end;
 800c2fc:	e032      	b.n	800c364 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c300:	2b00      	cmp	r3, #0
 800c302:	d012      	beq.n	800c32a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c306:	699b      	ldr	r3, [r3, #24]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d00a      	beq.n	800c322 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30e:	699c      	ldr	r4, [r3, #24]
 800c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c312:	69d8      	ldr	r0, [r3, #28]
 800c314:	8a3b      	ldrh	r3, [r7, #16]
 800c316:	9300      	str	r3, [sp, #0]
 800c318:	4b1b      	ldr	r3, [pc, #108]	; (800c388 <udp_input+0x224>)
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c31e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c320:	e021      	b.n	800c366 <udp_input+0x202>
        pbuf_free(p);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f7f9 fe84 	bl	8006030 <pbuf_free>
        goto end;
 800c328:	e01c      	b.n	800c364 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c32a:	7cfb      	ldrb	r3, [r7, #19]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d112      	bne.n	800c356 <udp_input+0x1f2>
 800c330:	4b12      	ldr	r3, [pc, #72]	; (800c37c <udp_input+0x218>)
 800c332:	695b      	ldr	r3, [r3, #20]
 800c334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c338:	2be0      	cmp	r3, #224	; 0xe0
 800c33a:	d00c      	beq.n	800c356 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c33c:	4b0f      	ldr	r3, [pc, #60]	; (800c37c <udp_input+0x218>)
 800c33e:	899b      	ldrh	r3, [r3, #12]
 800c340:	3308      	adds	r3, #8
 800c342:	b29b      	uxth	r3, r3
 800c344:	b21b      	sxth	r3, r3
 800c346:	4619      	mov	r1, r3
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f7f9 fe5e 	bl	800600a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c34e:	2103      	movs	r1, #3
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f001 fbb3 	bl	800dabc <icmp_dest_unreach>
      pbuf_free(p);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7f9 fe6a 	bl	8006030 <pbuf_free>
  return;
 800c35c:	e003      	b.n	800c366 <udp_input+0x202>
    pbuf_free(p);
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f7f9 fe66 	bl	8006030 <pbuf_free>
  return;
 800c364:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c366:	372c      	adds	r7, #44	; 0x2c
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd90      	pop	{r4, r7, pc}
 800c36c:	08012710 	.word	0x08012710
 800c370:	080127b4 	.word	0x080127b4
 800c374:	08012764 	.word	0x08012764
 800c378:	080127cc 	.word	0x080127cc
 800c37c:	20004dbc 	.word	0x20004dbc
 800c380:	20008404 	.word	0x20008404
 800c384:	080127e8 	.word	0x080127e8
 800c388:	20004dcc 	.word	0x20004dcc

0800c38c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b082      	sub	sp, #8
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d109      	bne.n	800c3b0 <udp_send+0x24>
 800c39c:	4b11      	ldr	r3, [pc, #68]	; (800c3e4 <udp_send+0x58>)
 800c39e:	f240 12d5 	movw	r2, #469	; 0x1d5
 800c3a2:	4911      	ldr	r1, [pc, #68]	; (800c3e8 <udp_send+0x5c>)
 800c3a4:	4811      	ldr	r0, [pc, #68]	; (800c3ec <udp_send+0x60>)
 800c3a6:	f002 feff 	bl	800f1a8 <iprintf>
 800c3aa:	f06f 030f 	mvn.w	r3, #15
 800c3ae:	e015      	b.n	800c3dc <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d109      	bne.n	800c3ca <udp_send+0x3e>
 800c3b6:	4b0b      	ldr	r3, [pc, #44]	; (800c3e4 <udp_send+0x58>)
 800c3b8:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800c3bc:	490c      	ldr	r1, [pc, #48]	; (800c3f0 <udp_send+0x64>)
 800c3be:	480b      	ldr	r0, [pc, #44]	; (800c3ec <udp_send+0x60>)
 800c3c0:	f002 fef2 	bl	800f1a8 <iprintf>
 800c3c4:	f06f 030f 	mvn.w	r3, #15
 800c3c8:	e008      	b.n	800c3dc <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	1d1a      	adds	r2, r3, #4
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	8a9b      	ldrh	r3, [r3, #20]
 800c3d2:	6839      	ldr	r1, [r7, #0]
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f000 f80d 	bl	800c3f4 <udp_sendto>
 800c3da:	4603      	mov	r3, r0
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3708      	adds	r7, #8
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	08012710 	.word	0x08012710
 800c3e8:	08012804 	.word	0x08012804
 800c3ec:	08012764 	.word	0x08012764
 800c3f0:	0801281c 	.word	0x0801281c

0800c3f4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b088      	sub	sp, #32
 800c3f8:	af02      	add	r7, sp, #8
 800c3fa:	60f8      	str	r0, [r7, #12]
 800c3fc:	60b9      	str	r1, [r7, #8]
 800c3fe:	607a      	str	r2, [r7, #4]
 800c400:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d109      	bne.n	800c41c <udp_sendto+0x28>
 800c408:	4b23      	ldr	r3, [pc, #140]	; (800c498 <udp_sendto+0xa4>)
 800c40a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c40e:	4923      	ldr	r1, [pc, #140]	; (800c49c <udp_sendto+0xa8>)
 800c410:	4823      	ldr	r0, [pc, #140]	; (800c4a0 <udp_sendto+0xac>)
 800c412:	f002 fec9 	bl	800f1a8 <iprintf>
 800c416:	f06f 030f 	mvn.w	r3, #15
 800c41a:	e038      	b.n	800c48e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d109      	bne.n	800c436 <udp_sendto+0x42>
 800c422:	4b1d      	ldr	r3, [pc, #116]	; (800c498 <udp_sendto+0xa4>)
 800c424:	f240 2219 	movw	r2, #537	; 0x219
 800c428:	491e      	ldr	r1, [pc, #120]	; (800c4a4 <udp_sendto+0xb0>)
 800c42a:	481d      	ldr	r0, [pc, #116]	; (800c4a0 <udp_sendto+0xac>)
 800c42c:	f002 febc 	bl	800f1a8 <iprintf>
 800c430:	f06f 030f 	mvn.w	r3, #15
 800c434:	e02b      	b.n	800c48e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d109      	bne.n	800c450 <udp_sendto+0x5c>
 800c43c:	4b16      	ldr	r3, [pc, #88]	; (800c498 <udp_sendto+0xa4>)
 800c43e:	f240 221a 	movw	r2, #538	; 0x21a
 800c442:	4919      	ldr	r1, [pc, #100]	; (800c4a8 <udp_sendto+0xb4>)
 800c444:	4816      	ldr	r0, [pc, #88]	; (800c4a0 <udp_sendto+0xac>)
 800c446:	f002 feaf 	bl	800f1a8 <iprintf>
 800c44a:	f06f 030f 	mvn.w	r3, #15
 800c44e:	e01e      	b.n	800c48e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	7a1b      	ldrb	r3, [r3, #8]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d006      	beq.n	800c466 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	7a1b      	ldrb	r3, [r3, #8]
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7f9 fa75 	bl	800594c <netif_get_by_index>
 800c462:	6178      	str	r0, [r7, #20]
 800c464:	e003      	b.n	800c46e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f001 fbb2 	bl	800dbd0 <ip4_route>
 800c46c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d102      	bne.n	800c47a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800c474:	f06f 0303 	mvn.w	r3, #3
 800c478:	e009      	b.n	800c48e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800c47a:	887a      	ldrh	r2, [r7, #2]
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	9300      	str	r3, [sp, #0]
 800c480:	4613      	mov	r3, r2
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	68b9      	ldr	r1, [r7, #8]
 800c486:	68f8      	ldr	r0, [r7, #12]
 800c488:	f000 f810 	bl	800c4ac <udp_sendto_if>
 800c48c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3718      	adds	r7, #24
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	08012710 	.word	0x08012710
 800c49c:	08012834 	.word	0x08012834
 800c4a0:	08012764 	.word	0x08012764
 800c4a4:	0801284c 	.word	0x0801284c
 800c4a8:	08012868 	.word	0x08012868

0800c4ac <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b088      	sub	sp, #32
 800c4b0:	af02      	add	r7, sp, #8
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	607a      	str	r2, [r7, #4]
 800c4b8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d109      	bne.n	800c4d4 <udp_sendto_if+0x28>
 800c4c0:	4b2e      	ldr	r3, [pc, #184]	; (800c57c <udp_sendto_if+0xd0>)
 800c4c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c4c6:	492e      	ldr	r1, [pc, #184]	; (800c580 <udp_sendto_if+0xd4>)
 800c4c8:	482e      	ldr	r0, [pc, #184]	; (800c584 <udp_sendto_if+0xd8>)
 800c4ca:	f002 fe6d 	bl	800f1a8 <iprintf>
 800c4ce:	f06f 030f 	mvn.w	r3, #15
 800c4d2:	e04f      	b.n	800c574 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d109      	bne.n	800c4ee <udp_sendto_if+0x42>
 800c4da:	4b28      	ldr	r3, [pc, #160]	; (800c57c <udp_sendto_if+0xd0>)
 800c4dc:	f240 2281 	movw	r2, #641	; 0x281
 800c4e0:	4929      	ldr	r1, [pc, #164]	; (800c588 <udp_sendto_if+0xdc>)
 800c4e2:	4828      	ldr	r0, [pc, #160]	; (800c584 <udp_sendto_if+0xd8>)
 800c4e4:	f002 fe60 	bl	800f1a8 <iprintf>
 800c4e8:	f06f 030f 	mvn.w	r3, #15
 800c4ec:	e042      	b.n	800c574 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d109      	bne.n	800c508 <udp_sendto_if+0x5c>
 800c4f4:	4b21      	ldr	r3, [pc, #132]	; (800c57c <udp_sendto_if+0xd0>)
 800c4f6:	f240 2282 	movw	r2, #642	; 0x282
 800c4fa:	4924      	ldr	r1, [pc, #144]	; (800c58c <udp_sendto_if+0xe0>)
 800c4fc:	4821      	ldr	r0, [pc, #132]	; (800c584 <udp_sendto_if+0xd8>)
 800c4fe:	f002 fe53 	bl	800f1a8 <iprintf>
 800c502:	f06f 030f 	mvn.w	r3, #15
 800c506:	e035      	b.n	800c574 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c508:	6a3b      	ldr	r3, [r7, #32]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d109      	bne.n	800c522 <udp_sendto_if+0x76>
 800c50e:	4b1b      	ldr	r3, [pc, #108]	; (800c57c <udp_sendto_if+0xd0>)
 800c510:	f240 2283 	movw	r2, #643	; 0x283
 800c514:	491e      	ldr	r1, [pc, #120]	; (800c590 <udp_sendto_if+0xe4>)
 800c516:	481b      	ldr	r0, [pc, #108]	; (800c584 <udp_sendto_if+0xd8>)
 800c518:	f002 fe46 	bl	800f1a8 <iprintf>
 800c51c:	f06f 030f 	mvn.w	r3, #15
 800c520:	e028      	b.n	800c574 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d009      	beq.n	800c53c <udp_sendto_if+0x90>
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d005      	beq.n	800c53c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c538:	2be0      	cmp	r3, #224	; 0xe0
 800c53a:	d103      	bne.n	800c544 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c53c:	6a3b      	ldr	r3, [r7, #32]
 800c53e:	3304      	adds	r3, #4
 800c540:	617b      	str	r3, [r7, #20]
 800c542:	e00b      	b.n	800c55c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	6a3b      	ldr	r3, [r7, #32]
 800c54a:	3304      	adds	r3, #4
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d002      	beq.n	800c558 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c552:	f06f 0303 	mvn.w	r3, #3
 800c556:	e00d      	b.n	800c574 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c55c:	887a      	ldrh	r2, [r7, #2]
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	9301      	str	r3, [sp, #4]
 800c562:	6a3b      	ldr	r3, [r7, #32]
 800c564:	9300      	str	r3, [sp, #0]
 800c566:	4613      	mov	r3, r2
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	68b9      	ldr	r1, [r7, #8]
 800c56c:	68f8      	ldr	r0, [r7, #12]
 800c56e:	f000 f811 	bl	800c594 <udp_sendto_if_src>
 800c572:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c574:	4618      	mov	r0, r3
 800c576:	3718      	adds	r7, #24
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	08012710 	.word	0x08012710
 800c580:	08012884 	.word	0x08012884
 800c584:	08012764 	.word	0x08012764
 800c588:	080128a0 	.word	0x080128a0
 800c58c:	080128bc 	.word	0x080128bc
 800c590:	080128dc 	.word	0x080128dc

0800c594 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b08c      	sub	sp, #48	; 0x30
 800c598:	af04      	add	r7, sp, #16
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	607a      	str	r2, [r7, #4]
 800c5a0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d109      	bne.n	800c5bc <udp_sendto_if_src+0x28>
 800c5a8:	4b65      	ldr	r3, [pc, #404]	; (800c740 <udp_sendto_if_src+0x1ac>)
 800c5aa:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c5ae:	4965      	ldr	r1, [pc, #404]	; (800c744 <udp_sendto_if_src+0x1b0>)
 800c5b0:	4865      	ldr	r0, [pc, #404]	; (800c748 <udp_sendto_if_src+0x1b4>)
 800c5b2:	f002 fdf9 	bl	800f1a8 <iprintf>
 800c5b6:	f06f 030f 	mvn.w	r3, #15
 800c5ba:	e0bc      	b.n	800c736 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d109      	bne.n	800c5d6 <udp_sendto_if_src+0x42>
 800c5c2:	4b5f      	ldr	r3, [pc, #380]	; (800c740 <udp_sendto_if_src+0x1ac>)
 800c5c4:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c5c8:	4960      	ldr	r1, [pc, #384]	; (800c74c <udp_sendto_if_src+0x1b8>)
 800c5ca:	485f      	ldr	r0, [pc, #380]	; (800c748 <udp_sendto_if_src+0x1b4>)
 800c5cc:	f002 fdec 	bl	800f1a8 <iprintf>
 800c5d0:	f06f 030f 	mvn.w	r3, #15
 800c5d4:	e0af      	b.n	800c736 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d109      	bne.n	800c5f0 <udp_sendto_if_src+0x5c>
 800c5dc:	4b58      	ldr	r3, [pc, #352]	; (800c740 <udp_sendto_if_src+0x1ac>)
 800c5de:	f240 22d3 	movw	r2, #723	; 0x2d3
 800c5e2:	495b      	ldr	r1, [pc, #364]	; (800c750 <udp_sendto_if_src+0x1bc>)
 800c5e4:	4858      	ldr	r0, [pc, #352]	; (800c748 <udp_sendto_if_src+0x1b4>)
 800c5e6:	f002 fddf 	bl	800f1a8 <iprintf>
 800c5ea:	f06f 030f 	mvn.w	r3, #15
 800c5ee:	e0a2      	b.n	800c736 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d109      	bne.n	800c60a <udp_sendto_if_src+0x76>
 800c5f6:	4b52      	ldr	r3, [pc, #328]	; (800c740 <udp_sendto_if_src+0x1ac>)
 800c5f8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c5fc:	4955      	ldr	r1, [pc, #340]	; (800c754 <udp_sendto_if_src+0x1c0>)
 800c5fe:	4852      	ldr	r0, [pc, #328]	; (800c748 <udp_sendto_if_src+0x1b4>)
 800c600:	f002 fdd2 	bl	800f1a8 <iprintf>
 800c604:	f06f 030f 	mvn.w	r3, #15
 800c608:	e095      	b.n	800c736 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d109      	bne.n	800c624 <udp_sendto_if_src+0x90>
 800c610:	4b4b      	ldr	r3, [pc, #300]	; (800c740 <udp_sendto_if_src+0x1ac>)
 800c612:	f240 22d5 	movw	r2, #725	; 0x2d5
 800c616:	4950      	ldr	r1, [pc, #320]	; (800c758 <udp_sendto_if_src+0x1c4>)
 800c618:	484b      	ldr	r0, [pc, #300]	; (800c748 <udp_sendto_if_src+0x1b4>)
 800c61a:	f002 fdc5 	bl	800f1a8 <iprintf>
 800c61e:	f06f 030f 	mvn.w	r3, #15
 800c622:	e088      	b.n	800c736 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	8a5b      	ldrh	r3, [r3, #18]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d10f      	bne.n	800c64c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c62c:	68f9      	ldr	r1, [r7, #12]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	8a5b      	ldrh	r3, [r3, #18]
 800c632:	461a      	mov	r2, r3
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	f000 f893 	bl	800c760 <udp_bind>
 800c63a:	4603      	mov	r3, r0
 800c63c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800c63e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d002      	beq.n	800c64c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800c646:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c64a:	e074      	b.n	800c736 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	891b      	ldrh	r3, [r3, #8]
 800c650:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800c654:	4293      	cmp	r3, r2
 800c656:	d902      	bls.n	800c65e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800c658:	f04f 33ff 	mov.w	r3, #4294967295
 800c65c:	e06b      	b.n	800c736 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c65e:	2108      	movs	r1, #8
 800c660:	68b8      	ldr	r0, [r7, #8]
 800c662:	f7f9 fc3d 	bl	8005ee0 <pbuf_add_header>
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d015      	beq.n	800c698 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c66c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c670:	2108      	movs	r1, #8
 800c672:	2022      	movs	r0, #34	; 0x22
 800c674:	f7f9 f9e6 	bl	8005a44 <pbuf_alloc>
 800c678:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c67a:	69fb      	ldr	r3, [r7, #28]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d102      	bne.n	800c686 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c680:	f04f 33ff 	mov.w	r3, #4294967295
 800c684:	e057      	b.n	800c736 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	891b      	ldrh	r3, [r3, #8]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d006      	beq.n	800c69c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c68e:	68b9      	ldr	r1, [r7, #8]
 800c690:	69f8      	ldr	r0, [r7, #28]
 800c692:	f7f9 fde5 	bl	8006260 <pbuf_chain>
 800c696:	e001      	b.n	800c69c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	895b      	ldrh	r3, [r3, #10]
 800c6a0:	2b07      	cmp	r3, #7
 800c6a2:	d806      	bhi.n	800c6b2 <udp_sendto_if_src+0x11e>
 800c6a4:	4b26      	ldr	r3, [pc, #152]	; (800c740 <udp_sendto_if_src+0x1ac>)
 800c6a6:	f240 320d 	movw	r2, #781	; 0x30d
 800c6aa:	492c      	ldr	r1, [pc, #176]	; (800c75c <udp_sendto_if_src+0x1c8>)
 800c6ac:	4826      	ldr	r0, [pc, #152]	; (800c748 <udp_sendto_if_src+0x1b4>)
 800c6ae:	f002 fd7b 	bl	800f1a8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c6b2:	69fb      	ldr	r3, [r7, #28]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	8a5b      	ldrh	r3, [r3, #18]
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f7f8 f8d5 	bl	800486c <lwip_htons>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c6ca:	887b      	ldrh	r3, [r7, #2]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7f8 f8cd 	bl	800486c <lwip_htons>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	719a      	strb	r2, [r3, #6]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	891b      	ldrh	r3, [r3, #8]
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7f8 f8bf 	bl	800486c <lwip_htons>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c6f6:	2311      	movs	r3, #17
 800c6f8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	7adb      	ldrb	r3, [r3, #11]
 800c6fe:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	7a9b      	ldrb	r3, [r3, #10]
 800c704:	7cb9      	ldrb	r1, [r7, #18]
 800c706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c708:	9202      	str	r2, [sp, #8]
 800c70a:	7cfa      	ldrb	r2, [r7, #19]
 800c70c:	9201      	str	r2, [sp, #4]
 800c70e:	9300      	str	r3, [sp, #0]
 800c710:	460b      	mov	r3, r1
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c716:	69f8      	ldr	r0, [r7, #28]
 800c718:	f001 fc4e 	bl	800dfb8 <ip4_output_if_src>
 800c71c:	4603      	mov	r3, r0
 800c71e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800c720:	69fa      	ldr	r2, [r7, #28]
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	429a      	cmp	r2, r3
 800c726:	d004      	beq.n	800c732 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800c728:	69f8      	ldr	r0, [r7, #28]
 800c72a:	f7f9 fc81 	bl	8006030 <pbuf_free>
    q = NULL;
 800c72e:	2300      	movs	r3, #0
 800c730:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800c732:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800c736:	4618      	mov	r0, r3
 800c738:	3720      	adds	r7, #32
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	08012710 	.word	0x08012710
 800c744:	080128fc 	.word	0x080128fc
 800c748:	08012764 	.word	0x08012764
 800c74c:	0801291c 	.word	0x0801291c
 800c750:	0801293c 	.word	0x0801293c
 800c754:	08012960 	.word	0x08012960
 800c758:	08012984 	.word	0x08012984
 800c75c:	080129a8 	.word	0x080129a8

0800c760 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b086      	sub	sp, #24
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	4613      	mov	r3, r2
 800c76c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d101      	bne.n	800c778 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c774:	4b39      	ldr	r3, [pc, #228]	; (800c85c <udp_bind+0xfc>)
 800c776:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d109      	bne.n	800c792 <udp_bind+0x32>
 800c77e:	4b38      	ldr	r3, [pc, #224]	; (800c860 <udp_bind+0x100>)
 800c780:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c784:	4937      	ldr	r1, [pc, #220]	; (800c864 <udp_bind+0x104>)
 800c786:	4838      	ldr	r0, [pc, #224]	; (800c868 <udp_bind+0x108>)
 800c788:	f002 fd0e 	bl	800f1a8 <iprintf>
 800c78c:	f06f 030f 	mvn.w	r3, #15
 800c790:	e060      	b.n	800c854 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c792:	2300      	movs	r3, #0
 800c794:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c796:	4b35      	ldr	r3, [pc, #212]	; (800c86c <udp_bind+0x10c>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	617b      	str	r3, [r7, #20]
 800c79c:	e009      	b.n	800c7b2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c79e:	68fa      	ldr	r2, [r7, #12]
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d102      	bne.n	800c7ac <udp_bind+0x4c>
      rebind = 1;
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	74fb      	strb	r3, [r7, #19]
      break;
 800c7aa:	e005      	b.n	800c7b8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	68db      	ldr	r3, [r3, #12]
 800c7b0:	617b      	str	r3, [r7, #20]
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d1f2      	bne.n	800c79e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c7b8:	88fb      	ldrh	r3, [r7, #6]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d109      	bne.n	800c7d2 <udp_bind+0x72>
    port = udp_new_port();
 800c7be:	f7ff fc35 	bl	800c02c <udp_new_port>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c7c6:	88fb      	ldrh	r3, [r7, #6]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d12c      	bne.n	800c826 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c7cc:	f06f 0307 	mvn.w	r3, #7
 800c7d0:	e040      	b.n	800c854 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c7d2:	4b26      	ldr	r3, [pc, #152]	; (800c86c <udp_bind+0x10c>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	617b      	str	r3, [r7, #20]
 800c7d8:	e022      	b.n	800c820 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c7da:	68fa      	ldr	r2, [r7, #12]
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d01b      	beq.n	800c81a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	8a5b      	ldrh	r3, [r3, #18]
 800c7e6:	88fa      	ldrh	r2, [r7, #6]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d116      	bne.n	800c81a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d00d      	beq.n	800c814 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00a      	beq.n	800c814 <udp_bind+0xb4>
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d006      	beq.n	800c814 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c806:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d003      	beq.n	800c814 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d102      	bne.n	800c81a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c814:	f06f 0307 	mvn.w	r3, #7
 800c818:	e01c      	b.n	800c854 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	617b      	str	r3, [r7, #20]
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d1d9      	bne.n	800c7da <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d002      	beq.n	800c832 <udp_bind+0xd2>
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	e000      	b.n	800c834 <udp_bind+0xd4>
 800c832:	2300      	movs	r3, #0
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	88fa      	ldrh	r2, [r7, #6]
 800c83c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c83e:	7cfb      	ldrb	r3, [r7, #19]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d106      	bne.n	800c852 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c844:	4b09      	ldr	r3, [pc, #36]	; (800c86c <udp_bind+0x10c>)
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c84c:	4a07      	ldr	r2, [pc, #28]	; (800c86c <udp_bind+0x10c>)
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c852:	2300      	movs	r3, #0
}
 800c854:	4618      	mov	r0, r3
 800c856:	3718      	adds	r7, #24
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}
 800c85c:	08013234 	.word	0x08013234
 800c860:	08012710 	.word	0x08012710
 800c864:	080129d8 	.word	0x080129d8
 800c868:	08012764 	.word	0x08012764
 800c86c:	20008404 	.word	0x20008404

0800c870 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b086      	sub	sp, #24
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	4613      	mov	r3, r2
 800c87c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d109      	bne.n	800c898 <udp_connect+0x28>
 800c884:	4b2c      	ldr	r3, [pc, #176]	; (800c938 <udp_connect+0xc8>)
 800c886:	f240 4235 	movw	r2, #1077	; 0x435
 800c88a:	492c      	ldr	r1, [pc, #176]	; (800c93c <udp_connect+0xcc>)
 800c88c:	482c      	ldr	r0, [pc, #176]	; (800c940 <udp_connect+0xd0>)
 800c88e:	f002 fc8b 	bl	800f1a8 <iprintf>
 800c892:	f06f 030f 	mvn.w	r3, #15
 800c896:	e04b      	b.n	800c930 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d109      	bne.n	800c8b2 <udp_connect+0x42>
 800c89e:	4b26      	ldr	r3, [pc, #152]	; (800c938 <udp_connect+0xc8>)
 800c8a0:	f240 4236 	movw	r2, #1078	; 0x436
 800c8a4:	4927      	ldr	r1, [pc, #156]	; (800c944 <udp_connect+0xd4>)
 800c8a6:	4826      	ldr	r0, [pc, #152]	; (800c940 <udp_connect+0xd0>)
 800c8a8:	f002 fc7e 	bl	800f1a8 <iprintf>
 800c8ac:	f06f 030f 	mvn.w	r3, #15
 800c8b0:	e03e      	b.n	800c930 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	8a5b      	ldrh	r3, [r3, #18]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d10f      	bne.n	800c8da <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c8ba:	68f9      	ldr	r1, [r7, #12]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	8a5b      	ldrh	r3, [r3, #18]
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	68f8      	ldr	r0, [r7, #12]
 800c8c4:	f7ff ff4c 	bl	800c760 <udp_bind>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c8cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d002      	beq.n	800c8da <udp_connect+0x6a>
      return err;
 800c8d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c8d8:	e02a      	b.n	800c930 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d002      	beq.n	800c8e6 <udp_connect+0x76>
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	e000      	b.n	800c8e8 <udp_connect+0x78>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	88fa      	ldrh	r2, [r7, #6]
 800c8f0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	7c1b      	ldrb	r3, [r3, #16]
 800c8f6:	f043 0304 	orr.w	r3, r3, #4
 800c8fa:	b2da      	uxtb	r2, r3
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c900:	4b11      	ldr	r3, [pc, #68]	; (800c948 <udp_connect+0xd8>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	617b      	str	r3, [r7, #20]
 800c906:	e008      	b.n	800c91a <udp_connect+0xaa>
    if (pcb == ipcb) {
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d101      	bne.n	800c914 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800c910:	2300      	movs	r3, #0
 800c912:	e00d      	b.n	800c930 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	617b      	str	r3, [r7, #20]
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d1f3      	bne.n	800c908 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800c920:	4b09      	ldr	r3, [pc, #36]	; (800c948 <udp_connect+0xd8>)
 800c922:	681a      	ldr	r2, [r3, #0]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800c928:	4a07      	ldr	r2, [pc, #28]	; (800c948 <udp_connect+0xd8>)
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800c92e:	2300      	movs	r3, #0
}
 800c930:	4618      	mov	r0, r3
 800c932:	3718      	adds	r7, #24
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}
 800c938:	08012710 	.word	0x08012710
 800c93c:	080129f0 	.word	0x080129f0
 800c940:	08012764 	.word	0x08012764
 800c944:	08012a0c 	.word	0x08012a0c
 800c948:	20008404 	.word	0x20008404

0800c94c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d107      	bne.n	800c96e <udp_recv+0x22>
 800c95e:	4b08      	ldr	r3, [pc, #32]	; (800c980 <udp_recv+0x34>)
 800c960:	f240 428a 	movw	r2, #1162	; 0x48a
 800c964:	4907      	ldr	r1, [pc, #28]	; (800c984 <udp_recv+0x38>)
 800c966:	4808      	ldr	r0, [pc, #32]	; (800c988 <udp_recv+0x3c>)
 800c968:	f002 fc1e 	bl	800f1a8 <iprintf>
 800c96c:	e005      	b.n	800c97a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	68ba      	ldr	r2, [r7, #8]
 800c972:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	687a      	ldr	r2, [r7, #4]
 800c978:	61da      	str	r2, [r3, #28]
}
 800c97a:	3710      	adds	r7, #16
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	08012710 	.word	0x08012710
 800c984:	08012a44 	.word	0x08012a44
 800c988:	08012764 	.word	0x08012764

0800c98c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c992:	2001      	movs	r0, #1
 800c994:	f7f8 fc50 	bl	8005238 <memp_malloc>
 800c998:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d007      	beq.n	800c9b0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c9a0:	2220      	movs	r2, #32
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f002 fbf7 	bl	800f198 <memset>
    pcb->ttl = UDP_TTL;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	22ff      	movs	r2, #255	; 0xff
 800c9ae:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c9b0:	687b      	ldr	r3, [r7, #4]
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3708      	adds	r7, #8
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
	...

0800c9bc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d01e      	beq.n	800ca0a <udp_netif_ip_addr_changed+0x4e>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d01a      	beq.n	800ca0a <udp_netif_ip_addr_changed+0x4e>
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d017      	beq.n	800ca0a <udp_netif_ip_addr_changed+0x4e>
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d013      	beq.n	800ca0a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c9e2:	4b0d      	ldr	r3, [pc, #52]	; (800ca18 <udp_netif_ip_addr_changed+0x5c>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	60fb      	str	r3, [r7, #12]
 800c9e8:	e00c      	b.n	800ca04 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681a      	ldr	r2, [r3, #0]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d103      	bne.n	800c9fe <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	60fb      	str	r3, [r7, #12]
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d1ef      	bne.n	800c9ea <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ca0a:	bf00      	nop
 800ca0c:	3714      	adds	r7, #20
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr
 800ca16:	bf00      	nop
 800ca18:	20008404 	.word	0x20008404

0800ca1c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ca24:	4915      	ldr	r1, [pc, #84]	; (800ca7c <etharp_free_entry+0x60>)
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	4613      	mov	r3, r2
 800ca2a:	005b      	lsls	r3, r3, #1
 800ca2c:	4413      	add	r3, r2
 800ca2e:	00db      	lsls	r3, r3, #3
 800ca30:	440b      	add	r3, r1
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d013      	beq.n	800ca60 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ca38:	4910      	ldr	r1, [pc, #64]	; (800ca7c <etharp_free_entry+0x60>)
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	4613      	mov	r3, r2
 800ca3e:	005b      	lsls	r3, r3, #1
 800ca40:	4413      	add	r3, r2
 800ca42:	00db      	lsls	r3, r3, #3
 800ca44:	440b      	add	r3, r1
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7f9 faf1 	bl	8006030 <pbuf_free>
    arp_table[i].q = NULL;
 800ca4e:	490b      	ldr	r1, [pc, #44]	; (800ca7c <etharp_free_entry+0x60>)
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	4613      	mov	r3, r2
 800ca54:	005b      	lsls	r3, r3, #1
 800ca56:	4413      	add	r3, r2
 800ca58:	00db      	lsls	r3, r3, #3
 800ca5a:	440b      	add	r3, r1
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ca60:	4906      	ldr	r1, [pc, #24]	; (800ca7c <etharp_free_entry+0x60>)
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	4613      	mov	r3, r2
 800ca66:	005b      	lsls	r3, r3, #1
 800ca68:	4413      	add	r3, r2
 800ca6a:	00db      	lsls	r3, r3, #3
 800ca6c:	440b      	add	r3, r1
 800ca6e:	3314      	adds	r3, #20
 800ca70:	2200      	movs	r2, #0
 800ca72:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ca74:	bf00      	nop
 800ca76:	3708      	adds	r7, #8
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	20008408 	.word	0x20008408

0800ca80 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ca86:	2300      	movs	r3, #0
 800ca88:	607b      	str	r3, [r7, #4]
 800ca8a:	e096      	b.n	800cbba <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ca8c:	494f      	ldr	r1, [pc, #316]	; (800cbcc <etharp_tmr+0x14c>)
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	4613      	mov	r3, r2
 800ca92:	005b      	lsls	r3, r3, #1
 800ca94:	4413      	add	r3, r2
 800ca96:	00db      	lsls	r3, r3, #3
 800ca98:	440b      	add	r3, r1
 800ca9a:	3314      	adds	r3, #20
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800caa0:	78fb      	ldrb	r3, [r7, #3]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	f000 8086 	beq.w	800cbb4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800caa8:	4948      	ldr	r1, [pc, #288]	; (800cbcc <etharp_tmr+0x14c>)
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	4613      	mov	r3, r2
 800caae:	005b      	lsls	r3, r3, #1
 800cab0:	4413      	add	r3, r2
 800cab2:	00db      	lsls	r3, r3, #3
 800cab4:	440b      	add	r3, r1
 800cab6:	3312      	adds	r3, #18
 800cab8:	881b      	ldrh	r3, [r3, #0]
 800caba:	3301      	adds	r3, #1
 800cabc:	b298      	uxth	r0, r3
 800cabe:	4943      	ldr	r1, [pc, #268]	; (800cbcc <etharp_tmr+0x14c>)
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	4613      	mov	r3, r2
 800cac4:	005b      	lsls	r3, r3, #1
 800cac6:	4413      	add	r3, r2
 800cac8:	00db      	lsls	r3, r3, #3
 800caca:	440b      	add	r3, r1
 800cacc:	3312      	adds	r3, #18
 800cace:	4602      	mov	r2, r0
 800cad0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cad2:	493e      	ldr	r1, [pc, #248]	; (800cbcc <etharp_tmr+0x14c>)
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	4613      	mov	r3, r2
 800cad8:	005b      	lsls	r3, r3, #1
 800cada:	4413      	add	r3, r2
 800cadc:	00db      	lsls	r3, r3, #3
 800cade:	440b      	add	r3, r1
 800cae0:	3312      	adds	r3, #18
 800cae2:	881b      	ldrh	r3, [r3, #0]
 800cae4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cae8:	d215      	bcs.n	800cb16 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800caea:	4938      	ldr	r1, [pc, #224]	; (800cbcc <etharp_tmr+0x14c>)
 800caec:	687a      	ldr	r2, [r7, #4]
 800caee:	4613      	mov	r3, r2
 800caf0:	005b      	lsls	r3, r3, #1
 800caf2:	4413      	add	r3, r2
 800caf4:	00db      	lsls	r3, r3, #3
 800caf6:	440b      	add	r3, r1
 800caf8:	3314      	adds	r3, #20
 800cafa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d10e      	bne.n	800cb1e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800cb00:	4932      	ldr	r1, [pc, #200]	; (800cbcc <etharp_tmr+0x14c>)
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	4613      	mov	r3, r2
 800cb06:	005b      	lsls	r3, r3, #1
 800cb08:	4413      	add	r3, r2
 800cb0a:	00db      	lsls	r3, r3, #3
 800cb0c:	440b      	add	r3, r1
 800cb0e:	3312      	adds	r3, #18
 800cb10:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cb12:	2b04      	cmp	r3, #4
 800cb14:	d903      	bls.n	800cb1e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f7ff ff80 	bl	800ca1c <etharp_free_entry>
 800cb1c:	e04a      	b.n	800cbb4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800cb1e:	492b      	ldr	r1, [pc, #172]	; (800cbcc <etharp_tmr+0x14c>)
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	4613      	mov	r3, r2
 800cb24:	005b      	lsls	r3, r3, #1
 800cb26:	4413      	add	r3, r2
 800cb28:	00db      	lsls	r3, r3, #3
 800cb2a:	440b      	add	r3, r1
 800cb2c:	3314      	adds	r3, #20
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	2b03      	cmp	r3, #3
 800cb32:	d10a      	bne.n	800cb4a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800cb34:	4925      	ldr	r1, [pc, #148]	; (800cbcc <etharp_tmr+0x14c>)
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	4613      	mov	r3, r2
 800cb3a:	005b      	lsls	r3, r3, #1
 800cb3c:	4413      	add	r3, r2
 800cb3e:	00db      	lsls	r3, r3, #3
 800cb40:	440b      	add	r3, r1
 800cb42:	3314      	adds	r3, #20
 800cb44:	2204      	movs	r2, #4
 800cb46:	701a      	strb	r2, [r3, #0]
 800cb48:	e034      	b.n	800cbb4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800cb4a:	4920      	ldr	r1, [pc, #128]	; (800cbcc <etharp_tmr+0x14c>)
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	4613      	mov	r3, r2
 800cb50:	005b      	lsls	r3, r3, #1
 800cb52:	4413      	add	r3, r2
 800cb54:	00db      	lsls	r3, r3, #3
 800cb56:	440b      	add	r3, r1
 800cb58:	3314      	adds	r3, #20
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	2b04      	cmp	r3, #4
 800cb5e:	d10a      	bne.n	800cb76 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800cb60:	491a      	ldr	r1, [pc, #104]	; (800cbcc <etharp_tmr+0x14c>)
 800cb62:	687a      	ldr	r2, [r7, #4]
 800cb64:	4613      	mov	r3, r2
 800cb66:	005b      	lsls	r3, r3, #1
 800cb68:	4413      	add	r3, r2
 800cb6a:	00db      	lsls	r3, r3, #3
 800cb6c:	440b      	add	r3, r1
 800cb6e:	3314      	adds	r3, #20
 800cb70:	2202      	movs	r2, #2
 800cb72:	701a      	strb	r2, [r3, #0]
 800cb74:	e01e      	b.n	800cbb4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cb76:	4915      	ldr	r1, [pc, #84]	; (800cbcc <etharp_tmr+0x14c>)
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	4613      	mov	r3, r2
 800cb7c:	005b      	lsls	r3, r3, #1
 800cb7e:	4413      	add	r3, r2
 800cb80:	00db      	lsls	r3, r3, #3
 800cb82:	440b      	add	r3, r1
 800cb84:	3314      	adds	r3, #20
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	d113      	bne.n	800cbb4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800cb8c:	490f      	ldr	r1, [pc, #60]	; (800cbcc <etharp_tmr+0x14c>)
 800cb8e:	687a      	ldr	r2, [r7, #4]
 800cb90:	4613      	mov	r3, r2
 800cb92:	005b      	lsls	r3, r3, #1
 800cb94:	4413      	add	r3, r2
 800cb96:	00db      	lsls	r3, r3, #3
 800cb98:	440b      	add	r3, r1
 800cb9a:	3308      	adds	r3, #8
 800cb9c:	6818      	ldr	r0, [r3, #0]
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	4613      	mov	r3, r2
 800cba2:	005b      	lsls	r3, r3, #1
 800cba4:	4413      	add	r3, r2
 800cba6:	00db      	lsls	r3, r3, #3
 800cba8:	4a08      	ldr	r2, [pc, #32]	; (800cbcc <etharp_tmr+0x14c>)
 800cbaa:	4413      	add	r3, r2
 800cbac:	3304      	adds	r3, #4
 800cbae:	4619      	mov	r1, r3
 800cbb0:	f000 fe6e 	bl	800d890 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	607b      	str	r3, [r7, #4]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2b09      	cmp	r3, #9
 800cbbe:	f77f af65 	ble.w	800ca8c <etharp_tmr+0xc>
      }
    }
  }
}
 800cbc2:	bf00      	nop
 800cbc4:	bf00      	nop
 800cbc6:	3708      	adds	r7, #8
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	20008408 	.word	0x20008408

0800cbd0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b08a      	sub	sp, #40	; 0x28
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	60f8      	str	r0, [r7, #12]
 800cbd8:	460b      	mov	r3, r1
 800cbda:	607a      	str	r2, [r7, #4]
 800cbdc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cbde:	230a      	movs	r3, #10
 800cbe0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cbe2:	230a      	movs	r3, #10
 800cbe4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800cbe6:	230a      	movs	r3, #10
 800cbe8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800cbea:	2300      	movs	r3, #0
 800cbec:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800cbee:	230a      	movs	r3, #10
 800cbf0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	83bb      	strh	r3, [r7, #28]
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	837b      	strh	r3, [r7, #26]
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cbfe:	2300      	movs	r3, #0
 800cc00:	843b      	strh	r3, [r7, #32]
 800cc02:	e0ae      	b.n	800cd62 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cc04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc08:	49a6      	ldr	r1, [pc, #664]	; (800cea4 <etharp_find_entry+0x2d4>)
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	005b      	lsls	r3, r3, #1
 800cc0e:	4413      	add	r3, r2
 800cc10:	00db      	lsls	r3, r3, #3
 800cc12:	440b      	add	r3, r1
 800cc14:	3314      	adds	r3, #20
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cc1a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cc1e:	2b0a      	cmp	r3, #10
 800cc20:	d105      	bne.n	800cc2e <etharp_find_entry+0x5e>
 800cc22:	7dfb      	ldrb	r3, [r7, #23]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d102      	bne.n	800cc2e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cc28:	8c3b      	ldrh	r3, [r7, #32]
 800cc2a:	847b      	strh	r3, [r7, #34]	; 0x22
 800cc2c:	e095      	b.n	800cd5a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cc2e:	7dfb      	ldrb	r3, [r7, #23]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	f000 8092 	beq.w	800cd5a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cc36:	7dfb      	ldrb	r3, [r7, #23]
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d009      	beq.n	800cc50 <etharp_find_entry+0x80>
 800cc3c:	7dfb      	ldrb	r3, [r7, #23]
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d806      	bhi.n	800cc50 <etharp_find_entry+0x80>
 800cc42:	4b99      	ldr	r3, [pc, #612]	; (800cea8 <etharp_find_entry+0x2d8>)
 800cc44:	f240 1223 	movw	r2, #291	; 0x123
 800cc48:	4998      	ldr	r1, [pc, #608]	; (800ceac <etharp_find_entry+0x2dc>)
 800cc4a:	4899      	ldr	r0, [pc, #612]	; (800ceb0 <etharp_find_entry+0x2e0>)
 800cc4c:	f002 faac 	bl	800f1a8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d020      	beq.n	800cc98 <etharp_find_entry+0xc8>
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	6819      	ldr	r1, [r3, #0]
 800cc5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc5e:	4891      	ldr	r0, [pc, #580]	; (800cea4 <etharp_find_entry+0x2d4>)
 800cc60:	4613      	mov	r3, r2
 800cc62:	005b      	lsls	r3, r3, #1
 800cc64:	4413      	add	r3, r2
 800cc66:	00db      	lsls	r3, r3, #3
 800cc68:	4403      	add	r3, r0
 800cc6a:	3304      	adds	r3, #4
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4299      	cmp	r1, r3
 800cc70:	d112      	bne.n	800cc98 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00c      	beq.n	800cc92 <etharp_find_entry+0xc2>
 800cc78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc7c:	4989      	ldr	r1, [pc, #548]	; (800cea4 <etharp_find_entry+0x2d4>)
 800cc7e:	4613      	mov	r3, r2
 800cc80:	005b      	lsls	r3, r3, #1
 800cc82:	4413      	add	r3, r2
 800cc84:	00db      	lsls	r3, r3, #3
 800cc86:	440b      	add	r3, r1
 800cc88:	3308      	adds	r3, #8
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d102      	bne.n	800cc98 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cc92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cc96:	e100      	b.n	800ce9a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cc98:	7dfb      	ldrb	r3, [r7, #23]
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	d140      	bne.n	800cd20 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cc9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cca2:	4980      	ldr	r1, [pc, #512]	; (800cea4 <etharp_find_entry+0x2d4>)
 800cca4:	4613      	mov	r3, r2
 800cca6:	005b      	lsls	r3, r3, #1
 800cca8:	4413      	add	r3, r2
 800ccaa:	00db      	lsls	r3, r3, #3
 800ccac:	440b      	add	r3, r1
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d01a      	beq.n	800ccea <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ccb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ccb8:	497a      	ldr	r1, [pc, #488]	; (800cea4 <etharp_find_entry+0x2d4>)
 800ccba:	4613      	mov	r3, r2
 800ccbc:	005b      	lsls	r3, r3, #1
 800ccbe:	4413      	add	r3, r2
 800ccc0:	00db      	lsls	r3, r3, #3
 800ccc2:	440b      	add	r3, r1
 800ccc4:	3312      	adds	r3, #18
 800ccc6:	881b      	ldrh	r3, [r3, #0]
 800ccc8:	8bba      	ldrh	r2, [r7, #28]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d845      	bhi.n	800cd5a <etharp_find_entry+0x18a>
            old_queue = i;
 800ccce:	8c3b      	ldrh	r3, [r7, #32]
 800ccd0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ccd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ccd6:	4973      	ldr	r1, [pc, #460]	; (800cea4 <etharp_find_entry+0x2d4>)
 800ccd8:	4613      	mov	r3, r2
 800ccda:	005b      	lsls	r3, r3, #1
 800ccdc:	4413      	add	r3, r2
 800ccde:	00db      	lsls	r3, r3, #3
 800cce0:	440b      	add	r3, r1
 800cce2:	3312      	adds	r3, #18
 800cce4:	881b      	ldrh	r3, [r3, #0]
 800cce6:	83bb      	strh	r3, [r7, #28]
 800cce8:	e037      	b.n	800cd5a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ccea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ccee:	496d      	ldr	r1, [pc, #436]	; (800cea4 <etharp_find_entry+0x2d4>)
 800ccf0:	4613      	mov	r3, r2
 800ccf2:	005b      	lsls	r3, r3, #1
 800ccf4:	4413      	add	r3, r2
 800ccf6:	00db      	lsls	r3, r3, #3
 800ccf8:	440b      	add	r3, r1
 800ccfa:	3312      	adds	r3, #18
 800ccfc:	881b      	ldrh	r3, [r3, #0]
 800ccfe:	8b7a      	ldrh	r2, [r7, #26]
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d82a      	bhi.n	800cd5a <etharp_find_entry+0x18a>
            old_pending = i;
 800cd04:	8c3b      	ldrh	r3, [r7, #32]
 800cd06:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800cd08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd0c:	4965      	ldr	r1, [pc, #404]	; (800cea4 <etharp_find_entry+0x2d4>)
 800cd0e:	4613      	mov	r3, r2
 800cd10:	005b      	lsls	r3, r3, #1
 800cd12:	4413      	add	r3, r2
 800cd14:	00db      	lsls	r3, r3, #3
 800cd16:	440b      	add	r3, r1
 800cd18:	3312      	adds	r3, #18
 800cd1a:	881b      	ldrh	r3, [r3, #0]
 800cd1c:	837b      	strh	r3, [r7, #26]
 800cd1e:	e01c      	b.n	800cd5a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800cd20:	7dfb      	ldrb	r3, [r7, #23]
 800cd22:	2b01      	cmp	r3, #1
 800cd24:	d919      	bls.n	800cd5a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800cd26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd2a:	495e      	ldr	r1, [pc, #376]	; (800cea4 <etharp_find_entry+0x2d4>)
 800cd2c:	4613      	mov	r3, r2
 800cd2e:	005b      	lsls	r3, r3, #1
 800cd30:	4413      	add	r3, r2
 800cd32:	00db      	lsls	r3, r3, #3
 800cd34:	440b      	add	r3, r1
 800cd36:	3312      	adds	r3, #18
 800cd38:	881b      	ldrh	r3, [r3, #0]
 800cd3a:	8b3a      	ldrh	r2, [r7, #24]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d80c      	bhi.n	800cd5a <etharp_find_entry+0x18a>
            old_stable = i;
 800cd40:	8c3b      	ldrh	r3, [r7, #32]
 800cd42:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800cd44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd48:	4956      	ldr	r1, [pc, #344]	; (800cea4 <etharp_find_entry+0x2d4>)
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	005b      	lsls	r3, r3, #1
 800cd4e:	4413      	add	r3, r2
 800cd50:	00db      	lsls	r3, r3, #3
 800cd52:	440b      	add	r3, r1
 800cd54:	3312      	adds	r3, #18
 800cd56:	881b      	ldrh	r3, [r3, #0]
 800cd58:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd5a:	8c3b      	ldrh	r3, [r7, #32]
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	843b      	strh	r3, [r7, #32]
 800cd62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cd66:	2b09      	cmp	r3, #9
 800cd68:	f77f af4c 	ble.w	800cc04 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cd6c:	7afb      	ldrb	r3, [r7, #11]
 800cd6e:	f003 0302 	and.w	r3, r3, #2
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d108      	bne.n	800cd88 <etharp_find_entry+0x1b8>
 800cd76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cd7a:	2b0a      	cmp	r3, #10
 800cd7c:	d107      	bne.n	800cd8e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800cd7e:	7afb      	ldrb	r3, [r7, #11]
 800cd80:	f003 0301 	and.w	r3, r3, #1
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d102      	bne.n	800cd8e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cd88:	f04f 33ff 	mov.w	r3, #4294967295
 800cd8c:	e085      	b.n	800ce9a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800cd8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cd92:	2b09      	cmp	r3, #9
 800cd94:	dc02      	bgt.n	800cd9c <etharp_find_entry+0x1cc>
    i = empty;
 800cd96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd98:	843b      	strh	r3, [r7, #32]
 800cd9a:	e039      	b.n	800ce10 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800cd9c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cda0:	2b09      	cmp	r3, #9
 800cda2:	dc14      	bgt.n	800cdce <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800cda4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cda6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800cda8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdac:	493d      	ldr	r1, [pc, #244]	; (800cea4 <etharp_find_entry+0x2d4>)
 800cdae:	4613      	mov	r3, r2
 800cdb0:	005b      	lsls	r3, r3, #1
 800cdb2:	4413      	add	r3, r2
 800cdb4:	00db      	lsls	r3, r3, #3
 800cdb6:	440b      	add	r3, r1
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d018      	beq.n	800cdf0 <etharp_find_entry+0x220>
 800cdbe:	4b3a      	ldr	r3, [pc, #232]	; (800cea8 <etharp_find_entry+0x2d8>)
 800cdc0:	f240 126d 	movw	r2, #365	; 0x16d
 800cdc4:	493b      	ldr	r1, [pc, #236]	; (800ceb4 <etharp_find_entry+0x2e4>)
 800cdc6:	483a      	ldr	r0, [pc, #232]	; (800ceb0 <etharp_find_entry+0x2e0>)
 800cdc8:	f002 f9ee 	bl	800f1a8 <iprintf>
 800cdcc:	e010      	b.n	800cdf0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800cdce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cdd2:	2b09      	cmp	r3, #9
 800cdd4:	dc02      	bgt.n	800cddc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800cdd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cdd8:	843b      	strh	r3, [r7, #32]
 800cdda:	e009      	b.n	800cdf0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800cddc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cde0:	2b09      	cmp	r3, #9
 800cde2:	dc02      	bgt.n	800cdea <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800cde4:	8bfb      	ldrh	r3, [r7, #30]
 800cde6:	843b      	strh	r3, [r7, #32]
 800cde8:	e002      	b.n	800cdf0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800cdea:	f04f 33ff 	mov.w	r3, #4294967295
 800cdee:	e054      	b.n	800ce9a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cdf0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cdf4:	2b09      	cmp	r3, #9
 800cdf6:	dd06      	ble.n	800ce06 <etharp_find_entry+0x236>
 800cdf8:	4b2b      	ldr	r3, [pc, #172]	; (800cea8 <etharp_find_entry+0x2d8>)
 800cdfa:	f240 127f 	movw	r2, #383	; 0x17f
 800cdfe:	492e      	ldr	r1, [pc, #184]	; (800ceb8 <etharp_find_entry+0x2e8>)
 800ce00:	482b      	ldr	r0, [pc, #172]	; (800ceb0 <etharp_find_entry+0x2e0>)
 800ce02:	f002 f9d1 	bl	800f1a8 <iprintf>
    etharp_free_entry(i);
 800ce06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7ff fe06 	bl	800ca1c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ce10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ce14:	2b09      	cmp	r3, #9
 800ce16:	dd06      	ble.n	800ce26 <etharp_find_entry+0x256>
 800ce18:	4b23      	ldr	r3, [pc, #140]	; (800cea8 <etharp_find_entry+0x2d8>)
 800ce1a:	f240 1283 	movw	r2, #387	; 0x183
 800ce1e:	4926      	ldr	r1, [pc, #152]	; (800ceb8 <etharp_find_entry+0x2e8>)
 800ce20:	4823      	ldr	r0, [pc, #140]	; (800ceb0 <etharp_find_entry+0x2e0>)
 800ce22:	f002 f9c1 	bl	800f1a8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ce26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce2a:	491e      	ldr	r1, [pc, #120]	; (800cea4 <etharp_find_entry+0x2d4>)
 800ce2c:	4613      	mov	r3, r2
 800ce2e:	005b      	lsls	r3, r3, #1
 800ce30:	4413      	add	r3, r2
 800ce32:	00db      	lsls	r3, r3, #3
 800ce34:	440b      	add	r3, r1
 800ce36:	3314      	adds	r3, #20
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d006      	beq.n	800ce4c <etharp_find_entry+0x27c>
 800ce3e:	4b1a      	ldr	r3, [pc, #104]	; (800cea8 <etharp_find_entry+0x2d8>)
 800ce40:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ce44:	491d      	ldr	r1, [pc, #116]	; (800cebc <etharp_find_entry+0x2ec>)
 800ce46:	481a      	ldr	r0, [pc, #104]	; (800ceb0 <etharp_find_entry+0x2e0>)
 800ce48:	f002 f9ae 	bl	800f1a8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d00b      	beq.n	800ce6a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ce52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	6819      	ldr	r1, [r3, #0]
 800ce5a:	4812      	ldr	r0, [pc, #72]	; (800cea4 <etharp_find_entry+0x2d4>)
 800ce5c:	4613      	mov	r3, r2
 800ce5e:	005b      	lsls	r3, r3, #1
 800ce60:	4413      	add	r3, r2
 800ce62:	00db      	lsls	r3, r3, #3
 800ce64:	4403      	add	r3, r0
 800ce66:	3304      	adds	r3, #4
 800ce68:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ce6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce6e:	490d      	ldr	r1, [pc, #52]	; (800cea4 <etharp_find_entry+0x2d4>)
 800ce70:	4613      	mov	r3, r2
 800ce72:	005b      	lsls	r3, r3, #1
 800ce74:	4413      	add	r3, r2
 800ce76:	00db      	lsls	r3, r3, #3
 800ce78:	440b      	add	r3, r1
 800ce7a:	3312      	adds	r3, #18
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ce80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce84:	4907      	ldr	r1, [pc, #28]	; (800cea4 <etharp_find_entry+0x2d4>)
 800ce86:	4613      	mov	r3, r2
 800ce88:	005b      	lsls	r3, r3, #1
 800ce8a:	4413      	add	r3, r2
 800ce8c:	00db      	lsls	r3, r3, #3
 800ce8e:	440b      	add	r3, r1
 800ce90:	3308      	adds	r3, #8
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ce96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3728      	adds	r7, #40	; 0x28
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	20008408 	.word	0x20008408
 800cea8:	08012a74 	.word	0x08012a74
 800ceac:	08012aac 	.word	0x08012aac
 800ceb0:	08012aec 	.word	0x08012aec
 800ceb4:	08012b14 	.word	0x08012b14
 800ceb8:	08012b2c 	.word	0x08012b2c
 800cebc:	08012b40 	.word	0x08012b40

0800cec0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b088      	sub	sp, #32
 800cec4:	af02      	add	r7, sp, #8
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	60b9      	str	r1, [r7, #8]
 800ceca:	607a      	str	r2, [r7, #4]
 800cecc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ced4:	2b06      	cmp	r3, #6
 800ced6:	d006      	beq.n	800cee6 <etharp_update_arp_entry+0x26>
 800ced8:	4b48      	ldr	r3, [pc, #288]	; (800cffc <etharp_update_arp_entry+0x13c>)
 800ceda:	f240 12a9 	movw	r2, #425	; 0x1a9
 800cede:	4948      	ldr	r1, [pc, #288]	; (800d000 <etharp_update_arp_entry+0x140>)
 800cee0:	4848      	ldr	r0, [pc, #288]	; (800d004 <etharp_update_arp_entry+0x144>)
 800cee2:	f002 f961 	bl	800f1a8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d012      	beq.n	800cf12 <etharp_update_arp_entry+0x52>
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d00e      	beq.n	800cf12 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	68f9      	ldr	r1, [r7, #12]
 800cefa:	4618      	mov	r0, r3
 800cefc:	f001 f90a 	bl	800e114 <ip4_addr_isbroadcast_u32>
 800cf00:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d105      	bne.n	800cf12 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cf0e:	2be0      	cmp	r3, #224	; 0xe0
 800cf10:	d102      	bne.n	800cf18 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cf12:	f06f 030f 	mvn.w	r3, #15
 800cf16:	e06c      	b.n	800cff2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800cf18:	78fb      	ldrb	r3, [r7, #3]
 800cf1a:	68fa      	ldr	r2, [r7, #12]
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	68b8      	ldr	r0, [r7, #8]
 800cf20:	f7ff fe56 	bl	800cbd0 <etharp_find_entry>
 800cf24:	4603      	mov	r3, r0
 800cf26:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800cf28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	da02      	bge.n	800cf36 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800cf30:	8afb      	ldrh	r3, [r7, #22]
 800cf32:	b25b      	sxtb	r3, r3
 800cf34:	e05d      	b.n	800cff2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800cf36:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf3a:	4933      	ldr	r1, [pc, #204]	; (800d008 <etharp_update_arp_entry+0x148>)
 800cf3c:	4613      	mov	r3, r2
 800cf3e:	005b      	lsls	r3, r3, #1
 800cf40:	4413      	add	r3, r2
 800cf42:	00db      	lsls	r3, r3, #3
 800cf44:	440b      	add	r3, r1
 800cf46:	3314      	adds	r3, #20
 800cf48:	2202      	movs	r2, #2
 800cf4a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800cf4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf50:	492d      	ldr	r1, [pc, #180]	; (800d008 <etharp_update_arp_entry+0x148>)
 800cf52:	4613      	mov	r3, r2
 800cf54:	005b      	lsls	r3, r3, #1
 800cf56:	4413      	add	r3, r2
 800cf58:	00db      	lsls	r3, r3, #3
 800cf5a:	440b      	add	r3, r1
 800cf5c:	3308      	adds	r3, #8
 800cf5e:	68fa      	ldr	r2, [r7, #12]
 800cf60:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800cf62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf66:	4613      	mov	r3, r2
 800cf68:	005b      	lsls	r3, r3, #1
 800cf6a:	4413      	add	r3, r2
 800cf6c:	00db      	lsls	r3, r3, #3
 800cf6e:	3308      	adds	r3, #8
 800cf70:	4a25      	ldr	r2, [pc, #148]	; (800d008 <etharp_update_arp_entry+0x148>)
 800cf72:	4413      	add	r3, r2
 800cf74:	3304      	adds	r3, #4
 800cf76:	2206      	movs	r2, #6
 800cf78:	6879      	ldr	r1, [r7, #4]
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f002 f8e4 	bl	800f148 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800cf80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf84:	4920      	ldr	r1, [pc, #128]	; (800d008 <etharp_update_arp_entry+0x148>)
 800cf86:	4613      	mov	r3, r2
 800cf88:	005b      	lsls	r3, r3, #1
 800cf8a:	4413      	add	r3, r2
 800cf8c:	00db      	lsls	r3, r3, #3
 800cf8e:	440b      	add	r3, r1
 800cf90:	3312      	adds	r3, #18
 800cf92:	2200      	movs	r2, #0
 800cf94:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800cf96:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf9a:	491b      	ldr	r1, [pc, #108]	; (800d008 <etharp_update_arp_entry+0x148>)
 800cf9c:	4613      	mov	r3, r2
 800cf9e:	005b      	lsls	r3, r3, #1
 800cfa0:	4413      	add	r3, r2
 800cfa2:	00db      	lsls	r3, r3, #3
 800cfa4:	440b      	add	r3, r1
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d021      	beq.n	800cff0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800cfac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cfb0:	4915      	ldr	r1, [pc, #84]	; (800d008 <etharp_update_arp_entry+0x148>)
 800cfb2:	4613      	mov	r3, r2
 800cfb4:	005b      	lsls	r3, r3, #1
 800cfb6:	4413      	add	r3, r2
 800cfb8:	00db      	lsls	r3, r3, #3
 800cfba:	440b      	add	r3, r1
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800cfc0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cfc4:	4910      	ldr	r1, [pc, #64]	; (800d008 <etharp_update_arp_entry+0x148>)
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	005b      	lsls	r3, r3, #1
 800cfca:	4413      	add	r3, r2
 800cfcc:	00db      	lsls	r3, r3, #3
 800cfce:	440b      	add	r3, r1
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cfda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cfde:	9300      	str	r3, [sp, #0]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6939      	ldr	r1, [r7, #16]
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f002 f833 	bl	800f050 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800cfea:	6938      	ldr	r0, [r7, #16]
 800cfec:	f7f9 f820 	bl	8006030 <pbuf_free>
  }
  return ERR_OK;
 800cff0:	2300      	movs	r3, #0
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3718      	adds	r7, #24
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	08012a74 	.word	0x08012a74
 800d000:	08012b6c 	.word	0x08012b6c
 800d004:	08012aec 	.word	0x08012aec
 800d008:	20008408 	.word	0x20008408

0800d00c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b084      	sub	sp, #16
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d014:	2300      	movs	r3, #0
 800d016:	60fb      	str	r3, [r7, #12]
 800d018:	e01e      	b.n	800d058 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d01a:	4913      	ldr	r1, [pc, #76]	; (800d068 <etharp_cleanup_netif+0x5c>)
 800d01c:	68fa      	ldr	r2, [r7, #12]
 800d01e:	4613      	mov	r3, r2
 800d020:	005b      	lsls	r3, r3, #1
 800d022:	4413      	add	r3, r2
 800d024:	00db      	lsls	r3, r3, #3
 800d026:	440b      	add	r3, r1
 800d028:	3314      	adds	r3, #20
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d02e:	7afb      	ldrb	r3, [r7, #11]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d00e      	beq.n	800d052 <etharp_cleanup_netif+0x46>
 800d034:	490c      	ldr	r1, [pc, #48]	; (800d068 <etharp_cleanup_netif+0x5c>)
 800d036:	68fa      	ldr	r2, [r7, #12]
 800d038:	4613      	mov	r3, r2
 800d03a:	005b      	lsls	r3, r3, #1
 800d03c:	4413      	add	r3, r2
 800d03e:	00db      	lsls	r3, r3, #3
 800d040:	440b      	add	r3, r1
 800d042:	3308      	adds	r3, #8
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	429a      	cmp	r2, r3
 800d04a:	d102      	bne.n	800d052 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d04c:	68f8      	ldr	r0, [r7, #12]
 800d04e:	f7ff fce5 	bl	800ca1c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	3301      	adds	r3, #1
 800d056:	60fb      	str	r3, [r7, #12]
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2b09      	cmp	r3, #9
 800d05c:	dddd      	ble.n	800d01a <etharp_cleanup_netif+0xe>
    }
  }
}
 800d05e:	bf00      	nop
 800d060:	bf00      	nop
 800d062:	3710      	adds	r7, #16
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}
 800d068:	20008408 	.word	0x20008408

0800d06c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d06c:	b5b0      	push	{r4, r5, r7, lr}
 800d06e:	b08a      	sub	sp, #40	; 0x28
 800d070:	af04      	add	r7, sp, #16
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d107      	bne.n	800d08c <etharp_input+0x20>
 800d07c:	4b3d      	ldr	r3, [pc, #244]	; (800d174 <etharp_input+0x108>)
 800d07e:	f240 228a 	movw	r2, #650	; 0x28a
 800d082:	493d      	ldr	r1, [pc, #244]	; (800d178 <etharp_input+0x10c>)
 800d084:	483d      	ldr	r0, [pc, #244]	; (800d17c <etharp_input+0x110>)
 800d086:	f002 f88f 	bl	800f1a8 <iprintf>
 800d08a:	e06f      	b.n	800d16c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	881b      	ldrh	r3, [r3, #0]
 800d096:	b29b      	uxth	r3, r3
 800d098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d09c:	d10c      	bne.n	800d0b8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d0a2:	2b06      	cmp	r3, #6
 800d0a4:	d108      	bne.n	800d0b8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d0aa:	2b04      	cmp	r3, #4
 800d0ac:	d104      	bne.n	800d0b8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	885b      	ldrh	r3, [r3, #2]
 800d0b2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d0b4:	2b08      	cmp	r3, #8
 800d0b6:	d003      	beq.n	800d0c0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f7f8 ffb9 	bl	8006030 <pbuf_free>
    return;
 800d0be:	e055      	b.n	800d16c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	330e      	adds	r3, #14
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	3318      	adds	r3, #24
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	3304      	adds	r3, #4
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d102      	bne.n	800d0e0 <etharp_input+0x74>
    for_us = 0;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	75fb      	strb	r3, [r7, #23]
 800d0de:	e009      	b.n	800d0f4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d0e0:	68ba      	ldr	r2, [r7, #8]
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	3304      	adds	r3, #4
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	bf0c      	ite	eq
 800d0ec:	2301      	moveq	r3, #1
 800d0ee:	2300      	movne	r3, #0
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	f103 0208 	add.w	r2, r3, #8
 800d0fa:	7dfb      	ldrb	r3, [r7, #23]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d001      	beq.n	800d104 <etharp_input+0x98>
 800d100:	2301      	movs	r3, #1
 800d102:	e000      	b.n	800d106 <etharp_input+0x9a>
 800d104:	2302      	movs	r3, #2
 800d106:	f107 010c 	add.w	r1, r7, #12
 800d10a:	6838      	ldr	r0, [r7, #0]
 800d10c:	f7ff fed8 	bl	800cec0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	88db      	ldrh	r3, [r3, #6]
 800d114:	b29b      	uxth	r3, r3
 800d116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d11a:	d003      	beq.n	800d124 <etharp_input+0xb8>
 800d11c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d120:	d01e      	beq.n	800d160 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d122:	e020      	b.n	800d166 <etharp_input+0xfa>
      if (for_us) {
 800d124:	7dfb      	ldrb	r3, [r7, #23]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d01c      	beq.n	800d164 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d140:	693a      	ldr	r2, [r7, #16]
 800d142:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d144:	2102      	movs	r1, #2
 800d146:	9103      	str	r1, [sp, #12]
 800d148:	f107 010c 	add.w	r1, r7, #12
 800d14c:	9102      	str	r1, [sp, #8]
 800d14e:	9201      	str	r2, [sp, #4]
 800d150:	9300      	str	r3, [sp, #0]
 800d152:	462b      	mov	r3, r5
 800d154:	4622      	mov	r2, r4
 800d156:	4601      	mov	r1, r0
 800d158:	6838      	ldr	r0, [r7, #0]
 800d15a:	f000 faeb 	bl	800d734 <etharp_raw>
      break;
 800d15e:	e001      	b.n	800d164 <etharp_input+0xf8>
      break;
 800d160:	bf00      	nop
 800d162:	e000      	b.n	800d166 <etharp_input+0xfa>
      break;
 800d164:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f7f8 ff62 	bl	8006030 <pbuf_free>
}
 800d16c:	3718      	adds	r7, #24
 800d16e:	46bd      	mov	sp, r7
 800d170:	bdb0      	pop	{r4, r5, r7, pc}
 800d172:	bf00      	nop
 800d174:	08012a74 	.word	0x08012a74
 800d178:	08012bc4 	.word	0x08012bc4
 800d17c:	08012aec 	.word	0x08012aec

0800d180 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b086      	sub	sp, #24
 800d184:	af02      	add	r7, sp, #8
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	4613      	mov	r3, r2
 800d18c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d18e:	79fa      	ldrb	r2, [r7, #7]
 800d190:	4944      	ldr	r1, [pc, #272]	; (800d2a4 <etharp_output_to_arp_index+0x124>)
 800d192:	4613      	mov	r3, r2
 800d194:	005b      	lsls	r3, r3, #1
 800d196:	4413      	add	r3, r2
 800d198:	00db      	lsls	r3, r3, #3
 800d19a:	440b      	add	r3, r1
 800d19c:	3314      	adds	r3, #20
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d806      	bhi.n	800d1b2 <etharp_output_to_arp_index+0x32>
 800d1a4:	4b40      	ldr	r3, [pc, #256]	; (800d2a8 <etharp_output_to_arp_index+0x128>)
 800d1a6:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d1aa:	4940      	ldr	r1, [pc, #256]	; (800d2ac <etharp_output_to_arp_index+0x12c>)
 800d1ac:	4840      	ldr	r0, [pc, #256]	; (800d2b0 <etharp_output_to_arp_index+0x130>)
 800d1ae:	f001 fffb 	bl	800f1a8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d1b2:	79fa      	ldrb	r2, [r7, #7]
 800d1b4:	493b      	ldr	r1, [pc, #236]	; (800d2a4 <etharp_output_to_arp_index+0x124>)
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	005b      	lsls	r3, r3, #1
 800d1ba:	4413      	add	r3, r2
 800d1bc:	00db      	lsls	r3, r3, #3
 800d1be:	440b      	add	r3, r1
 800d1c0:	3314      	adds	r3, #20
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	2b02      	cmp	r3, #2
 800d1c6:	d153      	bne.n	800d270 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d1c8:	79fa      	ldrb	r2, [r7, #7]
 800d1ca:	4936      	ldr	r1, [pc, #216]	; (800d2a4 <etharp_output_to_arp_index+0x124>)
 800d1cc:	4613      	mov	r3, r2
 800d1ce:	005b      	lsls	r3, r3, #1
 800d1d0:	4413      	add	r3, r2
 800d1d2:	00db      	lsls	r3, r3, #3
 800d1d4:	440b      	add	r3, r1
 800d1d6:	3312      	adds	r3, #18
 800d1d8:	881b      	ldrh	r3, [r3, #0]
 800d1da:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d1de:	d919      	bls.n	800d214 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d1e0:	79fa      	ldrb	r2, [r7, #7]
 800d1e2:	4613      	mov	r3, r2
 800d1e4:	005b      	lsls	r3, r3, #1
 800d1e6:	4413      	add	r3, r2
 800d1e8:	00db      	lsls	r3, r3, #3
 800d1ea:	4a2e      	ldr	r2, [pc, #184]	; (800d2a4 <etharp_output_to_arp_index+0x124>)
 800d1ec:	4413      	add	r3, r2
 800d1ee:	3304      	adds	r3, #4
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	68f8      	ldr	r0, [r7, #12]
 800d1f4:	f000 fb4c 	bl	800d890 <etharp_request>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d138      	bne.n	800d270 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d1fe:	79fa      	ldrb	r2, [r7, #7]
 800d200:	4928      	ldr	r1, [pc, #160]	; (800d2a4 <etharp_output_to_arp_index+0x124>)
 800d202:	4613      	mov	r3, r2
 800d204:	005b      	lsls	r3, r3, #1
 800d206:	4413      	add	r3, r2
 800d208:	00db      	lsls	r3, r3, #3
 800d20a:	440b      	add	r3, r1
 800d20c:	3314      	adds	r3, #20
 800d20e:	2203      	movs	r2, #3
 800d210:	701a      	strb	r2, [r3, #0]
 800d212:	e02d      	b.n	800d270 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d214:	79fa      	ldrb	r2, [r7, #7]
 800d216:	4923      	ldr	r1, [pc, #140]	; (800d2a4 <etharp_output_to_arp_index+0x124>)
 800d218:	4613      	mov	r3, r2
 800d21a:	005b      	lsls	r3, r3, #1
 800d21c:	4413      	add	r3, r2
 800d21e:	00db      	lsls	r3, r3, #3
 800d220:	440b      	add	r3, r1
 800d222:	3312      	adds	r3, #18
 800d224:	881b      	ldrh	r3, [r3, #0]
 800d226:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d22a:	d321      	bcc.n	800d270 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d22c:	79fa      	ldrb	r2, [r7, #7]
 800d22e:	4613      	mov	r3, r2
 800d230:	005b      	lsls	r3, r3, #1
 800d232:	4413      	add	r3, r2
 800d234:	00db      	lsls	r3, r3, #3
 800d236:	4a1b      	ldr	r2, [pc, #108]	; (800d2a4 <etharp_output_to_arp_index+0x124>)
 800d238:	4413      	add	r3, r2
 800d23a:	1d19      	adds	r1, r3, #4
 800d23c:	79fa      	ldrb	r2, [r7, #7]
 800d23e:	4613      	mov	r3, r2
 800d240:	005b      	lsls	r3, r3, #1
 800d242:	4413      	add	r3, r2
 800d244:	00db      	lsls	r3, r3, #3
 800d246:	3308      	adds	r3, #8
 800d248:	4a16      	ldr	r2, [pc, #88]	; (800d2a4 <etharp_output_to_arp_index+0x124>)
 800d24a:	4413      	add	r3, r2
 800d24c:	3304      	adds	r3, #4
 800d24e:	461a      	mov	r2, r3
 800d250:	68f8      	ldr	r0, [r7, #12]
 800d252:	f000 fafb 	bl	800d84c <etharp_request_dst>
 800d256:	4603      	mov	r3, r0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d109      	bne.n	800d270 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d25c:	79fa      	ldrb	r2, [r7, #7]
 800d25e:	4911      	ldr	r1, [pc, #68]	; (800d2a4 <etharp_output_to_arp_index+0x124>)
 800d260:	4613      	mov	r3, r2
 800d262:	005b      	lsls	r3, r3, #1
 800d264:	4413      	add	r3, r2
 800d266:	00db      	lsls	r3, r3, #3
 800d268:	440b      	add	r3, r1
 800d26a:	3314      	adds	r3, #20
 800d26c:	2203      	movs	r2, #3
 800d26e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800d276:	79fa      	ldrb	r2, [r7, #7]
 800d278:	4613      	mov	r3, r2
 800d27a:	005b      	lsls	r3, r3, #1
 800d27c:	4413      	add	r3, r2
 800d27e:	00db      	lsls	r3, r3, #3
 800d280:	3308      	adds	r3, #8
 800d282:	4a08      	ldr	r2, [pc, #32]	; (800d2a4 <etharp_output_to_arp_index+0x124>)
 800d284:	4413      	add	r3, r2
 800d286:	3304      	adds	r3, #4
 800d288:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d28c:	9200      	str	r2, [sp, #0]
 800d28e:	460a      	mov	r2, r1
 800d290:	68b9      	ldr	r1, [r7, #8]
 800d292:	68f8      	ldr	r0, [r7, #12]
 800d294:	f001 fedc 	bl	800f050 <ethernet_output>
 800d298:	4603      	mov	r3, r0
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3710      	adds	r7, #16
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	20008408 	.word	0x20008408
 800d2a8:	08012a74 	.word	0x08012a74
 800d2ac:	08012be4 	.word	0x08012be4
 800d2b0:	08012aec 	.word	0x08012aec

0800d2b4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b08a      	sub	sp, #40	; 0x28
 800d2b8:	af02      	add	r7, sp, #8
 800d2ba:	60f8      	str	r0, [r7, #12]
 800d2bc:	60b9      	str	r1, [r7, #8]
 800d2be:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d106      	bne.n	800d2d8 <etharp_output+0x24>
 800d2ca:	4b73      	ldr	r3, [pc, #460]	; (800d498 <etharp_output+0x1e4>)
 800d2cc:	f240 321e 	movw	r2, #798	; 0x31e
 800d2d0:	4972      	ldr	r1, [pc, #456]	; (800d49c <etharp_output+0x1e8>)
 800d2d2:	4873      	ldr	r0, [pc, #460]	; (800d4a0 <etharp_output+0x1ec>)
 800d2d4:	f001 ff68 	bl	800f1a8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d106      	bne.n	800d2ec <etharp_output+0x38>
 800d2de:	4b6e      	ldr	r3, [pc, #440]	; (800d498 <etharp_output+0x1e4>)
 800d2e0:	f240 321f 	movw	r2, #799	; 0x31f
 800d2e4:	496f      	ldr	r1, [pc, #444]	; (800d4a4 <etharp_output+0x1f0>)
 800d2e6:	486e      	ldr	r0, [pc, #440]	; (800d4a0 <etharp_output+0x1ec>)
 800d2e8:	f001 ff5e 	bl	800f1a8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d106      	bne.n	800d300 <etharp_output+0x4c>
 800d2f2:	4b69      	ldr	r3, [pc, #420]	; (800d498 <etharp_output+0x1e4>)
 800d2f4:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d2f8:	496b      	ldr	r1, [pc, #428]	; (800d4a8 <etharp_output+0x1f4>)
 800d2fa:	4869      	ldr	r0, [pc, #420]	; (800d4a0 <etharp_output+0x1ec>)
 800d2fc:	f001 ff54 	bl	800f1a8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	68f9      	ldr	r1, [r7, #12]
 800d306:	4618      	mov	r0, r3
 800d308:	f000 ff04 	bl	800e114 <ip4_addr_isbroadcast_u32>
 800d30c:	4603      	mov	r3, r0
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d002      	beq.n	800d318 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d312:	4b66      	ldr	r3, [pc, #408]	; (800d4ac <etharp_output+0x1f8>)
 800d314:	61fb      	str	r3, [r7, #28]
 800d316:	e0af      	b.n	800d478 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d320:	2be0      	cmp	r3, #224	; 0xe0
 800d322:	d118      	bne.n	800d356 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d324:	2301      	movs	r3, #1
 800d326:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d328:	2300      	movs	r3, #0
 800d32a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d32c:	235e      	movs	r3, #94	; 0x5e
 800d32e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	3301      	adds	r3, #1
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	3302      	adds	r3, #2
 800d342:	781b      	ldrb	r3, [r3, #0]
 800d344:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	3303      	adds	r3, #3
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d34e:	f107 0310 	add.w	r3, r7, #16
 800d352:	61fb      	str	r3, [r7, #28]
 800d354:	e090      	b.n	800d478 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	3304      	adds	r3, #4
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	405a      	eors	r2, r3
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	3308      	adds	r3, #8
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	4013      	ands	r3, r2
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d012      	beq.n	800d394 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d374:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d378:	4293      	cmp	r3, r2
 800d37a:	d00b      	beq.n	800d394 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	330c      	adds	r3, #12
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d003      	beq.n	800d38e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	330c      	adds	r3, #12
 800d38a:	61bb      	str	r3, [r7, #24]
 800d38c:	e002      	b.n	800d394 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d38e:	f06f 0303 	mvn.w	r3, #3
 800d392:	e07d      	b.n	800d490 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d394:	4b46      	ldr	r3, [pc, #280]	; (800d4b0 <etharp_output+0x1fc>)
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	4619      	mov	r1, r3
 800d39a:	4a46      	ldr	r2, [pc, #280]	; (800d4b4 <etharp_output+0x200>)
 800d39c:	460b      	mov	r3, r1
 800d39e:	005b      	lsls	r3, r3, #1
 800d3a0:	440b      	add	r3, r1
 800d3a2:	00db      	lsls	r3, r3, #3
 800d3a4:	4413      	add	r3, r2
 800d3a6:	3314      	adds	r3, #20
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d925      	bls.n	800d3fa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d3ae:	4b40      	ldr	r3, [pc, #256]	; (800d4b0 <etharp_output+0x1fc>)
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	4a3f      	ldr	r2, [pc, #252]	; (800d4b4 <etharp_output+0x200>)
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	005b      	lsls	r3, r3, #1
 800d3ba:	440b      	add	r3, r1
 800d3bc:	00db      	lsls	r3, r3, #3
 800d3be:	4413      	add	r3, r2
 800d3c0:	3308      	adds	r3, #8
 800d3c2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d3c4:	68fa      	ldr	r2, [r7, #12]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d117      	bne.n	800d3fa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	4b38      	ldr	r3, [pc, #224]	; (800d4b0 <etharp_output+0x1fc>)
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	4937      	ldr	r1, [pc, #220]	; (800d4b4 <etharp_output+0x200>)
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	005b      	lsls	r3, r3, #1
 800d3da:	4403      	add	r3, r0
 800d3dc:	00db      	lsls	r3, r3, #3
 800d3de:	440b      	add	r3, r1
 800d3e0:	3304      	adds	r3, #4
 800d3e2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d108      	bne.n	800d3fa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d3e8:	4b31      	ldr	r3, [pc, #196]	; (800d4b0 <etharp_output+0x1fc>)
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	461a      	mov	r2, r3
 800d3ee:	68b9      	ldr	r1, [r7, #8]
 800d3f0:	68f8      	ldr	r0, [r7, #12]
 800d3f2:	f7ff fec5 	bl	800d180 <etharp_output_to_arp_index>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	e04a      	b.n	800d490 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	75fb      	strb	r3, [r7, #23]
 800d3fe:	e031      	b.n	800d464 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d400:	7dfa      	ldrb	r2, [r7, #23]
 800d402:	492c      	ldr	r1, [pc, #176]	; (800d4b4 <etharp_output+0x200>)
 800d404:	4613      	mov	r3, r2
 800d406:	005b      	lsls	r3, r3, #1
 800d408:	4413      	add	r3, r2
 800d40a:	00db      	lsls	r3, r3, #3
 800d40c:	440b      	add	r3, r1
 800d40e:	3314      	adds	r3, #20
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	2b01      	cmp	r3, #1
 800d414:	d923      	bls.n	800d45e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d416:	7dfa      	ldrb	r2, [r7, #23]
 800d418:	4926      	ldr	r1, [pc, #152]	; (800d4b4 <etharp_output+0x200>)
 800d41a:	4613      	mov	r3, r2
 800d41c:	005b      	lsls	r3, r3, #1
 800d41e:	4413      	add	r3, r2
 800d420:	00db      	lsls	r3, r3, #3
 800d422:	440b      	add	r3, r1
 800d424:	3308      	adds	r3, #8
 800d426:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d428:	68fa      	ldr	r2, [r7, #12]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d117      	bne.n	800d45e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d42e:	69bb      	ldr	r3, [r7, #24]
 800d430:	6819      	ldr	r1, [r3, #0]
 800d432:	7dfa      	ldrb	r2, [r7, #23]
 800d434:	481f      	ldr	r0, [pc, #124]	; (800d4b4 <etharp_output+0x200>)
 800d436:	4613      	mov	r3, r2
 800d438:	005b      	lsls	r3, r3, #1
 800d43a:	4413      	add	r3, r2
 800d43c:	00db      	lsls	r3, r3, #3
 800d43e:	4403      	add	r3, r0
 800d440:	3304      	adds	r3, #4
 800d442:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d444:	4299      	cmp	r1, r3
 800d446:	d10a      	bne.n	800d45e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d448:	4a19      	ldr	r2, [pc, #100]	; (800d4b0 <etharp_output+0x1fc>)
 800d44a:	7dfb      	ldrb	r3, [r7, #23]
 800d44c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d44e:	7dfb      	ldrb	r3, [r7, #23]
 800d450:	461a      	mov	r2, r3
 800d452:	68b9      	ldr	r1, [r7, #8]
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	f7ff fe93 	bl	800d180 <etharp_output_to_arp_index>
 800d45a:	4603      	mov	r3, r0
 800d45c:	e018      	b.n	800d490 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d45e:	7dfb      	ldrb	r3, [r7, #23]
 800d460:	3301      	adds	r3, #1
 800d462:	75fb      	strb	r3, [r7, #23]
 800d464:	7dfb      	ldrb	r3, [r7, #23]
 800d466:	2b09      	cmp	r3, #9
 800d468:	d9ca      	bls.n	800d400 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d46a:	68ba      	ldr	r2, [r7, #8]
 800d46c:	69b9      	ldr	r1, [r7, #24]
 800d46e:	68f8      	ldr	r0, [r7, #12]
 800d470:	f000 f822 	bl	800d4b8 <etharp_query>
 800d474:	4603      	mov	r3, r0
 800d476:	e00b      	b.n	800d490 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d47e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d482:	9300      	str	r3, [sp, #0]
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	68b9      	ldr	r1, [r7, #8]
 800d488:	68f8      	ldr	r0, [r7, #12]
 800d48a:	f001 fde1 	bl	800f050 <ethernet_output>
 800d48e:	4603      	mov	r3, r0
}
 800d490:	4618      	mov	r0, r3
 800d492:	3720      	adds	r7, #32
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	08012a74 	.word	0x08012a74
 800d49c:	08012bc4 	.word	0x08012bc4
 800d4a0:	08012aec 	.word	0x08012aec
 800d4a4:	08012c14 	.word	0x08012c14
 800d4a8:	08012bb4 	.word	0x08012bb4
 800d4ac:	08013238 	.word	0x08013238
 800d4b0:	200084f8 	.word	0x200084f8
 800d4b4:	20008408 	.word	0x20008408

0800d4b8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b08c      	sub	sp, #48	; 0x30
 800d4bc:	af02      	add	r7, sp, #8
 800d4be:	60f8      	str	r0, [r7, #12]
 800d4c0:	60b9      	str	r1, [r7, #8]
 800d4c2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	3326      	adds	r3, #38	; 0x26
 800d4c8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d4ca:	23ff      	movs	r3, #255	; 0xff
 800d4cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	68f9      	ldr	r1, [r7, #12]
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f000 fe1a 	bl	800e114 <ip4_addr_isbroadcast_u32>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d10c      	bne.n	800d500 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d4ee:	2be0      	cmp	r3, #224	; 0xe0
 800d4f0:	d006      	beq.n	800d500 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d003      	beq.n	800d500 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d102      	bne.n	800d506 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d500:	f06f 030f 	mvn.w	r3, #15
 800d504:	e101      	b.n	800d70a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d506:	68fa      	ldr	r2, [r7, #12]
 800d508:	2101      	movs	r1, #1
 800d50a:	68b8      	ldr	r0, [r7, #8]
 800d50c:	f7ff fb60 	bl	800cbd0 <etharp_find_entry>
 800d510:	4603      	mov	r3, r0
 800d512:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d514:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	da02      	bge.n	800d522 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d51c:	8a7b      	ldrh	r3, [r7, #18]
 800d51e:	b25b      	sxtb	r3, r3
 800d520:	e0f3      	b.n	800d70a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d522:	8a7b      	ldrh	r3, [r7, #18]
 800d524:	2b7e      	cmp	r3, #126	; 0x7e
 800d526:	d906      	bls.n	800d536 <etharp_query+0x7e>
 800d528:	4b7a      	ldr	r3, [pc, #488]	; (800d714 <etharp_query+0x25c>)
 800d52a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d52e:	497a      	ldr	r1, [pc, #488]	; (800d718 <etharp_query+0x260>)
 800d530:	487a      	ldr	r0, [pc, #488]	; (800d71c <etharp_query+0x264>)
 800d532:	f001 fe39 	bl	800f1a8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d536:	8a7b      	ldrh	r3, [r7, #18]
 800d538:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d53a:	7c7a      	ldrb	r2, [r7, #17]
 800d53c:	4978      	ldr	r1, [pc, #480]	; (800d720 <etharp_query+0x268>)
 800d53e:	4613      	mov	r3, r2
 800d540:	005b      	lsls	r3, r3, #1
 800d542:	4413      	add	r3, r2
 800d544:	00db      	lsls	r3, r3, #3
 800d546:	440b      	add	r3, r1
 800d548:	3314      	adds	r3, #20
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d115      	bne.n	800d57c <etharp_query+0xc4>
    is_new_entry = 1;
 800d550:	2301      	movs	r3, #1
 800d552:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d554:	7c7a      	ldrb	r2, [r7, #17]
 800d556:	4972      	ldr	r1, [pc, #456]	; (800d720 <etharp_query+0x268>)
 800d558:	4613      	mov	r3, r2
 800d55a:	005b      	lsls	r3, r3, #1
 800d55c:	4413      	add	r3, r2
 800d55e:	00db      	lsls	r3, r3, #3
 800d560:	440b      	add	r3, r1
 800d562:	3314      	adds	r3, #20
 800d564:	2201      	movs	r2, #1
 800d566:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d568:	7c7a      	ldrb	r2, [r7, #17]
 800d56a:	496d      	ldr	r1, [pc, #436]	; (800d720 <etharp_query+0x268>)
 800d56c:	4613      	mov	r3, r2
 800d56e:	005b      	lsls	r3, r3, #1
 800d570:	4413      	add	r3, r2
 800d572:	00db      	lsls	r3, r3, #3
 800d574:	440b      	add	r3, r1
 800d576:	3308      	adds	r3, #8
 800d578:	68fa      	ldr	r2, [r7, #12]
 800d57a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d57c:	7c7a      	ldrb	r2, [r7, #17]
 800d57e:	4968      	ldr	r1, [pc, #416]	; (800d720 <etharp_query+0x268>)
 800d580:	4613      	mov	r3, r2
 800d582:	005b      	lsls	r3, r3, #1
 800d584:	4413      	add	r3, r2
 800d586:	00db      	lsls	r3, r3, #3
 800d588:	440b      	add	r3, r1
 800d58a:	3314      	adds	r3, #20
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d011      	beq.n	800d5b6 <etharp_query+0xfe>
 800d592:	7c7a      	ldrb	r2, [r7, #17]
 800d594:	4962      	ldr	r1, [pc, #392]	; (800d720 <etharp_query+0x268>)
 800d596:	4613      	mov	r3, r2
 800d598:	005b      	lsls	r3, r3, #1
 800d59a:	4413      	add	r3, r2
 800d59c:	00db      	lsls	r3, r3, #3
 800d59e:	440b      	add	r3, r1
 800d5a0:	3314      	adds	r3, #20
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	2b01      	cmp	r3, #1
 800d5a6:	d806      	bhi.n	800d5b6 <etharp_query+0xfe>
 800d5a8:	4b5a      	ldr	r3, [pc, #360]	; (800d714 <etharp_query+0x25c>)
 800d5aa:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d5ae:	495d      	ldr	r1, [pc, #372]	; (800d724 <etharp_query+0x26c>)
 800d5b0:	485a      	ldr	r0, [pc, #360]	; (800d71c <etharp_query+0x264>)
 800d5b2:	f001 fdf9 	bl	800f1a8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d5b6:	6a3b      	ldr	r3, [r7, #32]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d102      	bne.n	800d5c2 <etharp_query+0x10a>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d10c      	bne.n	800d5dc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d5c2:	68b9      	ldr	r1, [r7, #8]
 800d5c4:	68f8      	ldr	r0, [r7, #12]
 800d5c6:	f000 f963 	bl	800d890 <etharp_request>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d102      	bne.n	800d5dc <etharp_query+0x124>
      return result;
 800d5d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d5da:	e096      	b.n	800d70a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d106      	bne.n	800d5f0 <etharp_query+0x138>
 800d5e2:	4b4c      	ldr	r3, [pc, #304]	; (800d714 <etharp_query+0x25c>)
 800d5e4:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d5e8:	494f      	ldr	r1, [pc, #316]	; (800d728 <etharp_query+0x270>)
 800d5ea:	484c      	ldr	r0, [pc, #304]	; (800d71c <etharp_query+0x264>)
 800d5ec:	f001 fddc 	bl	800f1a8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d5f0:	7c7a      	ldrb	r2, [r7, #17]
 800d5f2:	494b      	ldr	r1, [pc, #300]	; (800d720 <etharp_query+0x268>)
 800d5f4:	4613      	mov	r3, r2
 800d5f6:	005b      	lsls	r3, r3, #1
 800d5f8:	4413      	add	r3, r2
 800d5fa:	00db      	lsls	r3, r3, #3
 800d5fc:	440b      	add	r3, r1
 800d5fe:	3314      	adds	r3, #20
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	2b01      	cmp	r3, #1
 800d604:	d917      	bls.n	800d636 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d606:	4a49      	ldr	r2, [pc, #292]	; (800d72c <etharp_query+0x274>)
 800d608:	7c7b      	ldrb	r3, [r7, #17]
 800d60a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d60c:	7c7a      	ldrb	r2, [r7, #17]
 800d60e:	4613      	mov	r3, r2
 800d610:	005b      	lsls	r3, r3, #1
 800d612:	4413      	add	r3, r2
 800d614:	00db      	lsls	r3, r3, #3
 800d616:	3308      	adds	r3, #8
 800d618:	4a41      	ldr	r2, [pc, #260]	; (800d720 <etharp_query+0x268>)
 800d61a:	4413      	add	r3, r2
 800d61c:	3304      	adds	r3, #4
 800d61e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d622:	9200      	str	r2, [sp, #0]
 800d624:	697a      	ldr	r2, [r7, #20]
 800d626:	6879      	ldr	r1, [r7, #4]
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	f001 fd11 	bl	800f050 <ethernet_output>
 800d62e:	4603      	mov	r3, r0
 800d630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d634:	e067      	b.n	800d706 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d636:	7c7a      	ldrb	r2, [r7, #17]
 800d638:	4939      	ldr	r1, [pc, #228]	; (800d720 <etharp_query+0x268>)
 800d63a:	4613      	mov	r3, r2
 800d63c:	005b      	lsls	r3, r3, #1
 800d63e:	4413      	add	r3, r2
 800d640:	00db      	lsls	r3, r3, #3
 800d642:	440b      	add	r3, r1
 800d644:	3314      	adds	r3, #20
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	2b01      	cmp	r3, #1
 800d64a:	d15c      	bne.n	800d706 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d64c:	2300      	movs	r3, #0
 800d64e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d654:	e01c      	b.n	800d690 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	895a      	ldrh	r2, [r3, #10]
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	891b      	ldrh	r3, [r3, #8]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d10a      	bne.n	800d678 <etharp_query+0x1c0>
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d006      	beq.n	800d678 <etharp_query+0x1c0>
 800d66a:	4b2a      	ldr	r3, [pc, #168]	; (800d714 <etharp_query+0x25c>)
 800d66c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d670:	492f      	ldr	r1, [pc, #188]	; (800d730 <etharp_query+0x278>)
 800d672:	482a      	ldr	r0, [pc, #168]	; (800d71c <etharp_query+0x264>)
 800d674:	f001 fd98 	bl	800f1a8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	7b1b      	ldrb	r3, [r3, #12]
 800d67c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d680:	2b00      	cmp	r3, #0
 800d682:	d002      	beq.n	800d68a <etharp_query+0x1d2>
        copy_needed = 1;
 800d684:	2301      	movs	r3, #1
 800d686:	61bb      	str	r3, [r7, #24]
        break;
 800d688:	e005      	b.n	800d696 <etharp_query+0x1de>
      }
      p = p->next;
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d690:	69fb      	ldr	r3, [r7, #28]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d1df      	bne.n	800d656 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d696:	69bb      	ldr	r3, [r7, #24]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d007      	beq.n	800d6ac <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d69c:	687a      	ldr	r2, [r7, #4]
 800d69e:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d6a2:	200e      	movs	r0, #14
 800d6a4:	f7f8 ffc2 	bl	800662c <pbuf_clone>
 800d6a8:	61f8      	str	r0, [r7, #28]
 800d6aa:	e004      	b.n	800d6b6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d6b0:	69f8      	ldr	r0, [r7, #28]
 800d6b2:	f7f8 fd5d 	bl	8006170 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d6b6:	69fb      	ldr	r3, [r7, #28]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d021      	beq.n	800d700 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d6bc:	7c7a      	ldrb	r2, [r7, #17]
 800d6be:	4918      	ldr	r1, [pc, #96]	; (800d720 <etharp_query+0x268>)
 800d6c0:	4613      	mov	r3, r2
 800d6c2:	005b      	lsls	r3, r3, #1
 800d6c4:	4413      	add	r3, r2
 800d6c6:	00db      	lsls	r3, r3, #3
 800d6c8:	440b      	add	r3, r1
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d00a      	beq.n	800d6e6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d6d0:	7c7a      	ldrb	r2, [r7, #17]
 800d6d2:	4913      	ldr	r1, [pc, #76]	; (800d720 <etharp_query+0x268>)
 800d6d4:	4613      	mov	r3, r2
 800d6d6:	005b      	lsls	r3, r3, #1
 800d6d8:	4413      	add	r3, r2
 800d6da:	00db      	lsls	r3, r3, #3
 800d6dc:	440b      	add	r3, r1
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7f8 fca5 	bl	8006030 <pbuf_free>
      }
      arp_table[i].q = p;
 800d6e6:	7c7a      	ldrb	r2, [r7, #17]
 800d6e8:	490d      	ldr	r1, [pc, #52]	; (800d720 <etharp_query+0x268>)
 800d6ea:	4613      	mov	r3, r2
 800d6ec:	005b      	lsls	r3, r3, #1
 800d6ee:	4413      	add	r3, r2
 800d6f0:	00db      	lsls	r3, r3, #3
 800d6f2:	440b      	add	r3, r1
 800d6f4:	69fa      	ldr	r2, [r7, #28]
 800d6f6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d6fe:	e002      	b.n	800d706 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d700:	23ff      	movs	r3, #255	; 0xff
 800d702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d706:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3728      	adds	r7, #40	; 0x28
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	08012a74 	.word	0x08012a74
 800d718:	08012c20 	.word	0x08012c20
 800d71c:	08012aec 	.word	0x08012aec
 800d720:	20008408 	.word	0x20008408
 800d724:	08012c30 	.word	0x08012c30
 800d728:	08012c14 	.word	0x08012c14
 800d72c:	200084f8 	.word	0x200084f8
 800d730:	08012c58 	.word	0x08012c58

0800d734 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b08a      	sub	sp, #40	; 0x28
 800d738:	af02      	add	r7, sp, #8
 800d73a:	60f8      	str	r0, [r7, #12]
 800d73c:	60b9      	str	r1, [r7, #8]
 800d73e:	607a      	str	r2, [r7, #4]
 800d740:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d742:	2300      	movs	r3, #0
 800d744:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d106      	bne.n	800d75a <etharp_raw+0x26>
 800d74c:	4b3a      	ldr	r3, [pc, #232]	; (800d838 <etharp_raw+0x104>)
 800d74e:	f240 4257 	movw	r2, #1111	; 0x457
 800d752:	493a      	ldr	r1, [pc, #232]	; (800d83c <etharp_raw+0x108>)
 800d754:	483a      	ldr	r0, [pc, #232]	; (800d840 <etharp_raw+0x10c>)
 800d756:	f001 fd27 	bl	800f1a8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d75a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d75e:	211c      	movs	r1, #28
 800d760:	200e      	movs	r0, #14
 800d762:	f7f8 f96f 	bl	8005a44 <pbuf_alloc>
 800d766:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d768:	69bb      	ldr	r3, [r7, #24]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d102      	bne.n	800d774 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d76e:	f04f 33ff 	mov.w	r3, #4294967295
 800d772:	e05d      	b.n	800d830 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d774:	69bb      	ldr	r3, [r7, #24]
 800d776:	895b      	ldrh	r3, [r3, #10]
 800d778:	2b1b      	cmp	r3, #27
 800d77a:	d806      	bhi.n	800d78a <etharp_raw+0x56>
 800d77c:	4b2e      	ldr	r3, [pc, #184]	; (800d838 <etharp_raw+0x104>)
 800d77e:	f240 4262 	movw	r2, #1122	; 0x462
 800d782:	4930      	ldr	r1, [pc, #192]	; (800d844 <etharp_raw+0x110>)
 800d784:	482e      	ldr	r0, [pc, #184]	; (800d840 <etharp_raw+0x10c>)
 800d786:	f001 fd0f 	bl	800f1a8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d78a:	69bb      	ldr	r3, [r7, #24]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d790:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d792:	4618      	mov	r0, r3
 800d794:	f7f7 f86a 	bl	800486c <lwip_htons>
 800d798:	4603      	mov	r3, r0
 800d79a:	461a      	mov	r2, r3
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d7a6:	2b06      	cmp	r3, #6
 800d7a8:	d006      	beq.n	800d7b8 <etharp_raw+0x84>
 800d7aa:	4b23      	ldr	r3, [pc, #140]	; (800d838 <etharp_raw+0x104>)
 800d7ac:	f240 4269 	movw	r2, #1129	; 0x469
 800d7b0:	4925      	ldr	r1, [pc, #148]	; (800d848 <etharp_raw+0x114>)
 800d7b2:	4823      	ldr	r0, [pc, #140]	; (800d840 <etharp_raw+0x10c>)
 800d7b4:	f001 fcf8 	bl	800f1a8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	3308      	adds	r3, #8
 800d7bc:	2206      	movs	r2, #6
 800d7be:	6839      	ldr	r1, [r7, #0]
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f001 fcc1 	bl	800f148 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	3312      	adds	r3, #18
 800d7ca:	2206      	movs	r2, #6
 800d7cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f001 fcba 	bl	800f148 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	330e      	adds	r3, #14
 800d7d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7da:	6812      	ldr	r2, [r2, #0]
 800d7dc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	3318      	adds	r3, #24
 800d7e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7e4:	6812      	ldr	r2, [r2, #0]
 800d7e6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	701a      	strb	r2, [r3, #0]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f042 0201 	orr.w	r2, r2, #1
 800d7f4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	f042 0208 	orr.w	r2, r2, #8
 800d7fe:	709a      	strb	r2, [r3, #2]
 800d800:	2200      	movs	r2, #0
 800d802:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	2206      	movs	r2, #6
 800d808:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	2204      	movs	r2, #4
 800d80e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d810:	f640 0306 	movw	r3, #2054	; 0x806
 800d814:	9300      	str	r3, [sp, #0]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	68ba      	ldr	r2, [r7, #8]
 800d81a:	69b9      	ldr	r1, [r7, #24]
 800d81c:	68f8      	ldr	r0, [r7, #12]
 800d81e:	f001 fc17 	bl	800f050 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d822:	69b8      	ldr	r0, [r7, #24]
 800d824:	f7f8 fc04 	bl	8006030 <pbuf_free>
  p = NULL;
 800d828:	2300      	movs	r3, #0
 800d82a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d82c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d830:	4618      	mov	r0, r3
 800d832:	3720      	adds	r7, #32
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	08012a74 	.word	0x08012a74
 800d83c:	08012bc4 	.word	0x08012bc4
 800d840:	08012aec 	.word	0x08012aec
 800d844:	08012c74 	.word	0x08012c74
 800d848:	08012ca8 	.word	0x08012ca8

0800d84c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b088      	sub	sp, #32
 800d850:	af04      	add	r7, sp, #16
 800d852:	60f8      	str	r0, [r7, #12]
 800d854:	60b9      	str	r1, [r7, #8]
 800d856:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d868:	2201      	movs	r2, #1
 800d86a:	9203      	str	r2, [sp, #12]
 800d86c:	68ba      	ldr	r2, [r7, #8]
 800d86e:	9202      	str	r2, [sp, #8]
 800d870:	4a06      	ldr	r2, [pc, #24]	; (800d88c <etharp_request_dst+0x40>)
 800d872:	9201      	str	r2, [sp, #4]
 800d874:	9300      	str	r3, [sp, #0]
 800d876:	4603      	mov	r3, r0
 800d878:	687a      	ldr	r2, [r7, #4]
 800d87a:	68f8      	ldr	r0, [r7, #12]
 800d87c:	f7ff ff5a 	bl	800d734 <etharp_raw>
 800d880:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d882:	4618      	mov	r0, r3
 800d884:	3710      	adds	r7, #16
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	08013240 	.word	0x08013240

0800d890 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b082      	sub	sp, #8
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d89a:	4a05      	ldr	r2, [pc, #20]	; (800d8b0 <etharp_request+0x20>)
 800d89c:	6839      	ldr	r1, [r7, #0]
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f7ff ffd4 	bl	800d84c <etharp_request_dst>
 800d8a4:	4603      	mov	r3, r0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3708      	adds	r7, #8
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	bf00      	nop
 800d8b0:	08013238 	.word	0x08013238

0800d8b4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b08e      	sub	sp, #56	; 0x38
 800d8b8:	af04      	add	r7, sp, #16
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d8be:	4b79      	ldr	r3, [pc, #484]	; (800daa4 <icmp_input+0x1f0>)
 800d8c0:	689b      	ldr	r3, [r3, #8]
 800d8c2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	f003 030f 	and.w	r3, r3, #15
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	009b      	lsls	r3, r3, #2
 800d8d0:	b2db      	uxtb	r3, r3
 800d8d2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d8d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8d6:	2b13      	cmp	r3, #19
 800d8d8:	f240 80cd 	bls.w	800da76 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	895b      	ldrh	r3, [r3, #10]
 800d8e0:	2b03      	cmp	r3, #3
 800d8e2:	f240 80ca 	bls.w	800da7a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d8f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	f000 80b7 	beq.w	800da68 <icmp_input+0x1b4>
 800d8fa:	2b08      	cmp	r3, #8
 800d8fc:	f040 80b7 	bne.w	800da6e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d900:	4b69      	ldr	r3, [pc, #420]	; (800daa8 <icmp_input+0x1f4>)
 800d902:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d904:	4b67      	ldr	r3, [pc, #412]	; (800daa4 <icmp_input+0x1f0>)
 800d906:	695b      	ldr	r3, [r3, #20]
 800d908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d90c:	2be0      	cmp	r3, #224	; 0xe0
 800d90e:	f000 80bb 	beq.w	800da88 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d912:	4b64      	ldr	r3, [pc, #400]	; (800daa4 <icmp_input+0x1f0>)
 800d914:	695b      	ldr	r3, [r3, #20]
 800d916:	4a63      	ldr	r2, [pc, #396]	; (800daa4 <icmp_input+0x1f0>)
 800d918:	6812      	ldr	r2, [r2, #0]
 800d91a:	4611      	mov	r1, r2
 800d91c:	4618      	mov	r0, r3
 800d91e:	f000 fbf9 	bl	800e114 <ip4_addr_isbroadcast_u32>
 800d922:	4603      	mov	r3, r0
 800d924:	2b00      	cmp	r3, #0
 800d926:	f040 80b1 	bne.w	800da8c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	891b      	ldrh	r3, [r3, #8]
 800d92e:	2b07      	cmp	r3, #7
 800d930:	f240 80a5 	bls.w	800da7e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d934:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d936:	330e      	adds	r3, #14
 800d938:	4619      	mov	r1, r3
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f7f8 fad0 	bl	8005ee0 <pbuf_add_header>
 800d940:	4603      	mov	r3, r0
 800d942:	2b00      	cmp	r3, #0
 800d944:	d04b      	beq.n	800d9de <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	891a      	ldrh	r2, [r3, #8]
 800d94a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d94c:	4413      	add	r3, r2
 800d94e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	891b      	ldrh	r3, [r3, #8]
 800d954:	8b7a      	ldrh	r2, [r7, #26]
 800d956:	429a      	cmp	r2, r3
 800d958:	f0c0 809a 	bcc.w	800da90 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d95c:	8b7b      	ldrh	r3, [r7, #26]
 800d95e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d962:	4619      	mov	r1, r3
 800d964:	200e      	movs	r0, #14
 800d966:	f7f8 f86d 	bl	8005a44 <pbuf_alloc>
 800d96a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	f000 8090 	beq.w	800da94 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	895b      	ldrh	r3, [r3, #10]
 800d978:	461a      	mov	r2, r3
 800d97a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d97c:	3308      	adds	r3, #8
 800d97e:	429a      	cmp	r2, r3
 800d980:	d203      	bcs.n	800d98a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d982:	6978      	ldr	r0, [r7, #20]
 800d984:	f7f8 fb54 	bl	8006030 <pbuf_free>
          goto icmperr;
 800d988:	e085      	b.n	800da96 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d992:	4618      	mov	r0, r3
 800d994:	f001 fbd8 	bl	800f148 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d998:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d99a:	4619      	mov	r1, r3
 800d99c:	6978      	ldr	r0, [r7, #20]
 800d99e:	f7f8 faaf 	bl	8005f00 <pbuf_remove_header>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d009      	beq.n	800d9bc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d9a8:	4b40      	ldr	r3, [pc, #256]	; (800daac <icmp_input+0x1f8>)
 800d9aa:	22b6      	movs	r2, #182	; 0xb6
 800d9ac:	4940      	ldr	r1, [pc, #256]	; (800dab0 <icmp_input+0x1fc>)
 800d9ae:	4841      	ldr	r0, [pc, #260]	; (800dab4 <icmp_input+0x200>)
 800d9b0:	f001 fbfa 	bl	800f1a8 <iprintf>
          pbuf_free(r);
 800d9b4:	6978      	ldr	r0, [r7, #20]
 800d9b6:	f7f8 fb3b 	bl	8006030 <pbuf_free>
          goto icmperr;
 800d9ba:	e06c      	b.n	800da96 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d9bc:	6879      	ldr	r1, [r7, #4]
 800d9be:	6978      	ldr	r0, [r7, #20]
 800d9c0:	f7f8 fc5e 	bl	8006280 <pbuf_copy>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d003      	beq.n	800d9d2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d9ca:	6978      	ldr	r0, [r7, #20]
 800d9cc:	f7f8 fb30 	bl	8006030 <pbuf_free>
          goto icmperr;
 800d9d0:	e061      	b.n	800da96 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f7f8 fb2c 	bl	8006030 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	607b      	str	r3, [r7, #4]
 800d9dc:	e00f      	b.n	800d9fe <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d9de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d9e0:	330e      	adds	r3, #14
 800d9e2:	4619      	mov	r1, r3
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f7f8 fa8b 	bl	8005f00 <pbuf_remove_header>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d006      	beq.n	800d9fe <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d9f0:	4b2e      	ldr	r3, [pc, #184]	; (800daac <icmp_input+0x1f8>)
 800d9f2:	22c7      	movs	r2, #199	; 0xc7
 800d9f4:	4930      	ldr	r1, [pc, #192]	; (800dab8 <icmp_input+0x204>)
 800d9f6:	482f      	ldr	r0, [pc, #188]	; (800dab4 <icmp_input+0x200>)
 800d9f8:	f001 fbd6 	bl	800f1a8 <iprintf>
          goto icmperr;
 800d9fc:	e04b      	b.n	800da96 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800da04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da06:	4619      	mov	r1, r3
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f7f8 fa69 	bl	8005ee0 <pbuf_add_header>
 800da0e:	4603      	mov	r3, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d12b      	bne.n	800da6c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800da1a:	69fb      	ldr	r3, [r7, #28]
 800da1c:	681a      	ldr	r2, [r3, #0]
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800da22:	4b20      	ldr	r3, [pc, #128]	; (800daa4 <icmp_input+0x1f0>)
 800da24:	691a      	ldr	r2, [r3, #16]
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	2200      	movs	r2, #0
 800da2e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	2200      	movs	r2, #0
 800da34:	709a      	strb	r2, [r3, #2]
 800da36:	2200      	movs	r2, #0
 800da38:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	22ff      	movs	r2, #255	; 0xff
 800da3e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2200      	movs	r2, #0
 800da44:	729a      	strb	r2, [r3, #10]
 800da46:	2200      	movs	r2, #0
 800da48:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	9302      	str	r3, [sp, #8]
 800da4e:	2301      	movs	r3, #1
 800da50:	9301      	str	r3, [sp, #4]
 800da52:	2300      	movs	r3, #0
 800da54:	9300      	str	r3, [sp, #0]
 800da56:	23ff      	movs	r3, #255	; 0xff
 800da58:	2200      	movs	r2, #0
 800da5a:	69f9      	ldr	r1, [r7, #28]
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f000 fa81 	bl	800df64 <ip4_output_if>
 800da62:	4603      	mov	r3, r0
 800da64:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800da66:	e001      	b.n	800da6c <icmp_input+0x1b8>
      break;
 800da68:	bf00      	nop
 800da6a:	e000      	b.n	800da6e <icmp_input+0x1ba>
      break;
 800da6c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f7f8 fade 	bl	8006030 <pbuf_free>
  return;
 800da74:	e013      	b.n	800da9e <icmp_input+0x1ea>
    goto lenerr;
 800da76:	bf00      	nop
 800da78:	e002      	b.n	800da80 <icmp_input+0x1cc>
    goto lenerr;
 800da7a:	bf00      	nop
 800da7c:	e000      	b.n	800da80 <icmp_input+0x1cc>
        goto lenerr;
 800da7e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f7f8 fad5 	bl	8006030 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800da86:	e00a      	b.n	800da9e <icmp_input+0x1ea>
        goto icmperr;
 800da88:	bf00      	nop
 800da8a:	e004      	b.n	800da96 <icmp_input+0x1e2>
        goto icmperr;
 800da8c:	bf00      	nop
 800da8e:	e002      	b.n	800da96 <icmp_input+0x1e2>
          goto icmperr;
 800da90:	bf00      	nop
 800da92:	e000      	b.n	800da96 <icmp_input+0x1e2>
          goto icmperr;
 800da94:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f7f8 faca 	bl	8006030 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800da9c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800da9e:	3728      	adds	r7, #40	; 0x28
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}
 800daa4:	20004dbc 	.word	0x20004dbc
 800daa8:	20004dd0 	.word	0x20004dd0
 800daac:	08012cec 	.word	0x08012cec
 800dab0:	08012d24 	.word	0x08012d24
 800dab4:	08012d5c 	.word	0x08012d5c
 800dab8:	08012d84 	.word	0x08012d84

0800dabc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b082      	sub	sp, #8
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	460b      	mov	r3, r1
 800dac6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dac8:	78fb      	ldrb	r3, [r7, #3]
 800daca:	461a      	mov	r2, r3
 800dacc:	2103      	movs	r1, #3
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f000 f814 	bl	800dafc <icmp_send_response>
}
 800dad4:	bf00      	nop
 800dad6:	3708      	adds	r7, #8
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	460b      	mov	r3, r1
 800dae6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800dae8:	78fb      	ldrb	r3, [r7, #3]
 800daea:	461a      	mov	r2, r3
 800daec:	210b      	movs	r1, #11
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f000 f804 	bl	800dafc <icmp_send_response>
}
 800daf4:	bf00      	nop
 800daf6:	3708      	adds	r7, #8
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b08c      	sub	sp, #48	; 0x30
 800db00:	af04      	add	r7, sp, #16
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	460b      	mov	r3, r1
 800db06:	70fb      	strb	r3, [r7, #3]
 800db08:	4613      	mov	r3, r2
 800db0a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800db0c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800db10:	2124      	movs	r1, #36	; 0x24
 800db12:	2022      	movs	r0, #34	; 0x22
 800db14:	f7f7 ff96 	bl	8005a44 <pbuf_alloc>
 800db18:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800db1a:	69fb      	ldr	r3, [r7, #28]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d04c      	beq.n	800dbba <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800db20:	69fb      	ldr	r3, [r7, #28]
 800db22:	895b      	ldrh	r3, [r3, #10]
 800db24:	2b23      	cmp	r3, #35	; 0x23
 800db26:	d806      	bhi.n	800db36 <icmp_send_response+0x3a>
 800db28:	4b26      	ldr	r3, [pc, #152]	; (800dbc4 <icmp_send_response+0xc8>)
 800db2a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800db2e:	4926      	ldr	r1, [pc, #152]	; (800dbc8 <icmp_send_response+0xcc>)
 800db30:	4826      	ldr	r0, [pc, #152]	; (800dbcc <icmp_send_response+0xd0>)
 800db32:	f001 fb39 	bl	800f1a8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800db3c:	69fb      	ldr	r3, [r7, #28]
 800db3e:	685b      	ldr	r3, [r3, #4]
 800db40:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	78fa      	ldrb	r2, [r7, #3]
 800db46:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	78ba      	ldrb	r2, [r7, #2]
 800db4c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	2200      	movs	r2, #0
 800db52:	711a      	strb	r2, [r3, #4]
 800db54:	2200      	movs	r2, #0
 800db56:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	2200      	movs	r2, #0
 800db5c:	719a      	strb	r2, [r3, #6]
 800db5e:	2200      	movs	r2, #0
 800db60:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800db62:	69fb      	ldr	r3, [r7, #28]
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	f103 0008 	add.w	r0, r3, #8
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	221c      	movs	r2, #28
 800db70:	4619      	mov	r1, r3
 800db72:	f001 fae9 	bl	800f148 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800db76:	69bb      	ldr	r3, [r7, #24]
 800db78:	68db      	ldr	r3, [r3, #12]
 800db7a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800db7c:	f107 030c 	add.w	r3, r7, #12
 800db80:	4618      	mov	r0, r3
 800db82:	f000 f825 	bl	800dbd0 <ip4_route>
 800db86:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d011      	beq.n	800dbb2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	2200      	movs	r2, #0
 800db92:	709a      	strb	r2, [r3, #2]
 800db94:	2200      	movs	r2, #0
 800db96:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800db98:	f107 020c 	add.w	r2, r7, #12
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	9302      	str	r3, [sp, #8]
 800dba0:	2301      	movs	r3, #1
 800dba2:	9301      	str	r3, [sp, #4]
 800dba4:	2300      	movs	r3, #0
 800dba6:	9300      	str	r3, [sp, #0]
 800dba8:	23ff      	movs	r3, #255	; 0xff
 800dbaa:	2100      	movs	r1, #0
 800dbac:	69f8      	ldr	r0, [r7, #28]
 800dbae:	f000 f9d9 	bl	800df64 <ip4_output_if>
  }
  pbuf_free(q);
 800dbb2:	69f8      	ldr	r0, [r7, #28]
 800dbb4:	f7f8 fa3c 	bl	8006030 <pbuf_free>
 800dbb8:	e000      	b.n	800dbbc <icmp_send_response+0xc0>
    return;
 800dbba:	bf00      	nop
}
 800dbbc:	3720      	adds	r7, #32
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	08012cec 	.word	0x08012cec
 800dbc8:	08012db8 	.word	0x08012db8
 800dbcc:	08012d5c 	.word	0x08012d5c

0800dbd0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b085      	sub	sp, #20
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800dbd8:	4b33      	ldr	r3, [pc, #204]	; (800dca8 <ip4_route+0xd8>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	60fb      	str	r3, [r7, #12]
 800dbde:	e036      	b.n	800dc4e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dbe6:	f003 0301 	and.w	r3, r3, #1
 800dbea:	b2db      	uxtb	r3, r3
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d02b      	beq.n	800dc48 <ip4_route+0x78>
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dbf6:	089b      	lsrs	r3, r3, #2
 800dbf8:	f003 0301 	and.w	r3, r3, #1
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d022      	beq.n	800dc48 <ip4_route+0x78>
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	3304      	adds	r3, #4
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d01d      	beq.n	800dc48 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681a      	ldr	r2, [r3, #0]
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	3304      	adds	r3, #4
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	405a      	eors	r2, r3
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	3308      	adds	r3, #8
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	4013      	ands	r3, r2
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d101      	bne.n	800dc28 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	e038      	b.n	800dc9a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dc2e:	f003 0302 	and.w	r3, r3, #2
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d108      	bne.n	800dc48 <ip4_route+0x78>
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681a      	ldr	r2, [r3, #0]
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	330c      	adds	r3, #12
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d101      	bne.n	800dc48 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	e028      	b.n	800dc9a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	60fb      	str	r3, [r7, #12]
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d1c5      	bne.n	800dbe0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dc54:	4b15      	ldr	r3, [pc, #84]	; (800dcac <ip4_route+0xdc>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d01a      	beq.n	800dc92 <ip4_route+0xc2>
 800dc5c:	4b13      	ldr	r3, [pc, #76]	; (800dcac <ip4_route+0xdc>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dc64:	f003 0301 	and.w	r3, r3, #1
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d012      	beq.n	800dc92 <ip4_route+0xc2>
 800dc6c:	4b0f      	ldr	r3, [pc, #60]	; (800dcac <ip4_route+0xdc>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dc74:	f003 0304 	and.w	r3, r3, #4
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00a      	beq.n	800dc92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dc7c:	4b0b      	ldr	r3, [pc, #44]	; (800dcac <ip4_route+0xdc>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	3304      	adds	r3, #4
 800dc82:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d004      	beq.n	800dc92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	2b7f      	cmp	r3, #127	; 0x7f
 800dc90:	d101      	bne.n	800dc96 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800dc92:	2300      	movs	r3, #0
 800dc94:	e001      	b.n	800dc9a <ip4_route+0xca>
  }

  return netif_default;
 800dc96:	4b05      	ldr	r3, [pc, #20]	; (800dcac <ip4_route+0xdc>)
 800dc98:	681b      	ldr	r3, [r3, #0]
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3714      	adds	r7, #20
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca4:	4770      	bx	lr
 800dca6:	bf00      	nop
 800dca8:	20008398 	.word	0x20008398
 800dcac:	2000839c 	.word	0x2000839c

0800dcb0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dcbe:	f003 0301 	and.w	r3, r3, #1
 800dcc2:	b2db      	uxtb	r3, r3
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d016      	beq.n	800dcf6 <ip4_input_accept+0x46>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	3304      	adds	r3, #4
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d011      	beq.n	800dcf6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dcd2:	4b0b      	ldr	r3, [pc, #44]	; (800dd00 <ip4_input_accept+0x50>)
 800dcd4:	695a      	ldr	r2, [r3, #20]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	3304      	adds	r3, #4
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	d008      	beq.n	800dcf2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800dce0:	4b07      	ldr	r3, [pc, #28]	; (800dd00 <ip4_input_accept+0x50>)
 800dce2:	695b      	ldr	r3, [r3, #20]
 800dce4:	6879      	ldr	r1, [r7, #4]
 800dce6:	4618      	mov	r0, r3
 800dce8:	f000 fa14 	bl	800e114 <ip4_addr_isbroadcast_u32>
 800dcec:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d001      	beq.n	800dcf6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	e000      	b.n	800dcf8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800dcf6:	2300      	movs	r3, #0
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3708      	adds	r7, #8
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}
 800dd00:	20004dbc 	.word	0x20004dbc

0800dd04 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b086      	sub	sp, #24
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	091b      	lsrs	r3, r3, #4
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	2b04      	cmp	r3, #4
 800dd1e:	d004      	beq.n	800dd2a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f7f8 f985 	bl	8006030 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800dd26:	2300      	movs	r3, #0
 800dd28:	e114      	b.n	800df54 <ip4_input+0x250>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	f003 030f 	and.w	r3, r3, #15
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	009b      	lsls	r3, r3, #2
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	885b      	ldrh	r3, [r3, #2]
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7f6 fd93 	bl	800486c <lwip_htons>
 800dd46:	4603      	mov	r3, r0
 800dd48:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	891b      	ldrh	r3, [r3, #8]
 800dd4e:	89ba      	ldrh	r2, [r7, #12]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d204      	bcs.n	800dd5e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800dd54:	89bb      	ldrh	r3, [r7, #12]
 800dd56:	4619      	mov	r1, r3
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f7f7 ffd1 	bl	8005d00 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	895b      	ldrh	r3, [r3, #10]
 800dd62:	89fa      	ldrh	r2, [r7, #14]
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d807      	bhi.n	800dd78 <ip4_input+0x74>
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	891b      	ldrh	r3, [r3, #8]
 800dd6c:	89ba      	ldrh	r2, [r7, #12]
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d802      	bhi.n	800dd78 <ip4_input+0x74>
 800dd72:	89fb      	ldrh	r3, [r7, #14]
 800dd74:	2b13      	cmp	r3, #19
 800dd76:	d804      	bhi.n	800dd82 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f7f8 f959 	bl	8006030 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	e0e8      	b.n	800df54 <ip4_input+0x250>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	691b      	ldr	r3, [r3, #16]
 800dd86:	4a75      	ldr	r2, [pc, #468]	; (800df5c <ip4_input+0x258>)
 800dd88:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	68db      	ldr	r3, [r3, #12]
 800dd8e:	4a73      	ldr	r2, [pc, #460]	; (800df5c <ip4_input+0x258>)
 800dd90:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dd92:	4b72      	ldr	r3, [pc, #456]	; (800df5c <ip4_input+0x258>)
 800dd94:	695b      	ldr	r3, [r3, #20]
 800dd96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd9a:	2be0      	cmp	r3, #224	; 0xe0
 800dd9c:	d112      	bne.n	800ddc4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dda4:	f003 0301 	and.w	r3, r3, #1
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d007      	beq.n	800ddbe <ip4_input+0xba>
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	3304      	adds	r3, #4
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d002      	beq.n	800ddbe <ip4_input+0xba>
      netif = inp;
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	613b      	str	r3, [r7, #16]
 800ddbc:	e02a      	b.n	800de14 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	613b      	str	r3, [r7, #16]
 800ddc2:	e027      	b.n	800de14 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ddc4:	6838      	ldr	r0, [r7, #0]
 800ddc6:	f7ff ff73 	bl	800dcb0 <ip4_input_accept>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d002      	beq.n	800ddd6 <ip4_input+0xd2>
      netif = inp;
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	613b      	str	r3, [r7, #16]
 800ddd4:	e01e      	b.n	800de14 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ddda:	4b60      	ldr	r3, [pc, #384]	; (800df5c <ip4_input+0x258>)
 800dddc:	695b      	ldr	r3, [r3, #20]
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	2b7f      	cmp	r3, #127	; 0x7f
 800dde2:	d017      	beq.n	800de14 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800dde4:	4b5e      	ldr	r3, [pc, #376]	; (800df60 <ip4_input+0x25c>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	613b      	str	r3, [r7, #16]
 800ddea:	e00e      	b.n	800de0a <ip4_input+0x106>
          if (netif == inp) {
 800ddec:	693a      	ldr	r2, [r7, #16]
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d006      	beq.n	800de02 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800ddf4:	6938      	ldr	r0, [r7, #16]
 800ddf6:	f7ff ff5b 	bl	800dcb0 <ip4_input_accept>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d108      	bne.n	800de12 <ip4_input+0x10e>
 800de00:	e000      	b.n	800de04 <ip4_input+0x100>
            continue;
 800de02:	bf00      	nop
        NETIF_FOREACH(netif) {
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	613b      	str	r3, [r7, #16]
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d1ed      	bne.n	800ddec <ip4_input+0xe8>
 800de10:	e000      	b.n	800de14 <ip4_input+0x110>
            break;
 800de12:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800de14:	4b51      	ldr	r3, [pc, #324]	; (800df5c <ip4_input+0x258>)
 800de16:	691b      	ldr	r3, [r3, #16]
 800de18:	6839      	ldr	r1, [r7, #0]
 800de1a:	4618      	mov	r0, r3
 800de1c:	f000 f97a 	bl	800e114 <ip4_addr_isbroadcast_u32>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	d105      	bne.n	800de32 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800de26:	4b4d      	ldr	r3, [pc, #308]	; (800df5c <ip4_input+0x258>)
 800de28:	691b      	ldr	r3, [r3, #16]
 800de2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800de2e:	2be0      	cmp	r3, #224	; 0xe0
 800de30:	d104      	bne.n	800de3c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f7f8 f8fc 	bl	8006030 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800de38:	2300      	movs	r3, #0
 800de3a:	e08b      	b.n	800df54 <ip4_input+0x250>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d104      	bne.n	800de4c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f7f8 f8f4 	bl	8006030 <pbuf_free>
    return ERR_OK;
 800de48:	2300      	movs	r3, #0
 800de4a:	e083      	b.n	800df54 <ip4_input+0x250>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	88db      	ldrh	r3, [r3, #6]
 800de50:	b29b      	uxth	r3, r3
 800de52:	461a      	mov	r2, r3
 800de54:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800de58:	4013      	ands	r3, r2
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d00b      	beq.n	800de76 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f000 fd2e 	bl	800e8c0 <ip4_reass>
 800de64:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d101      	bne.n	800de70 <ip4_input+0x16c>
      return ERR_OK;
 800de6c:	2300      	movs	r3, #0
 800de6e:	e071      	b.n	800df54 <ip4_input+0x250>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800de76:	4a39      	ldr	r2, [pc, #228]	; (800df5c <ip4_input+0x258>)
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800de7c:	4a37      	ldr	r2, [pc, #220]	; (800df5c <ip4_input+0x258>)
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800de82:	4a36      	ldr	r2, [pc, #216]	; (800df5c <ip4_input+0x258>)
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	f003 030f 	and.w	r3, r3, #15
 800de90:	b2db      	uxtb	r3, r3
 800de92:	009b      	lsls	r3, r3, #2
 800de94:	b2db      	uxtb	r3, r3
 800de96:	b29a      	uxth	r2, r3
 800de98:	4b30      	ldr	r3, [pc, #192]	; (800df5c <ip4_input+0x258>)
 800de9a:	819a      	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 800de9c:	6839      	ldr	r1, [r7, #0]
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f7f8 fc30 	bl	8006704 <raw_input>
 800dea4:	4603      	mov	r3, r0
 800dea6:	72fb      	strb	r3, [r7, #11]
  if (raw_status != RAW_INPUT_EATEN)
 800dea8:	7afb      	ldrb	r3, [r7, #11]
 800deaa:	2b01      	cmp	r3, #1
 800deac:	d03e      	beq.n	800df2c <ip4_input+0x228>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800deae:	89fb      	ldrh	r3, [r7, #14]
 800deb0:	4619      	mov	r1, r3
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f7f8 f824 	bl	8005f00 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	7a5b      	ldrb	r3, [r3, #9]
 800debc:	2b11      	cmp	r3, #17
 800debe:	d006      	beq.n	800dece <ip4_input+0x1ca>
 800dec0:	2b11      	cmp	r3, #17
 800dec2:	dc13      	bgt.n	800deec <ip4_input+0x1e8>
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	d00c      	beq.n	800dee2 <ip4_input+0x1de>
 800dec8:	2b06      	cmp	r3, #6
 800deca:	d005      	beq.n	800ded8 <ip4_input+0x1d4>
 800decc:	e00e      	b.n	800deec <ip4_input+0x1e8>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800dece:	6839      	ldr	r1, [r7, #0]
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f7fe f947 	bl	800c164 <udp_input>
        break;
 800ded6:	e02a      	b.n	800df2e <ip4_input+0x22a>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800ded8:	6839      	ldr	r1, [r7, #0]
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f7fa f988 	bl	80081f0 <tcp_input>
        break;
 800dee0:	e025      	b.n	800df2e <ip4_input+0x22a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800dee2:	6839      	ldr	r1, [r7, #0]
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f7ff fce5 	bl	800d8b4 <icmp_input>
        break;
 800deea:	e020      	b.n	800df2e <ip4_input+0x22a>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 800deec:	7afb      	ldrb	r3, [r7, #11]
 800deee:	2b02      	cmp	r3, #2
 800def0:	d018      	beq.n	800df24 <ip4_input+0x220>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800def2:	4b1a      	ldr	r3, [pc, #104]	; (800df5c <ip4_input+0x258>)
 800def4:	695b      	ldr	r3, [r3, #20]
 800def6:	6939      	ldr	r1, [r7, #16]
 800def8:	4618      	mov	r0, r3
 800defa:	f000 f90b 	bl	800e114 <ip4_addr_isbroadcast_u32>
 800defe:	4603      	mov	r3, r0
 800df00:	2b00      	cmp	r3, #0
 800df02:	d10f      	bne.n	800df24 <ip4_input+0x220>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800df04:	4b15      	ldr	r3, [pc, #84]	; (800df5c <ip4_input+0x258>)
 800df06:	695b      	ldr	r3, [r3, #20]
 800df08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800df0c:	2be0      	cmp	r3, #224	; 0xe0
 800df0e:	d009      	beq.n	800df24 <ip4_input+0x220>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800df10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800df14:	4619      	mov	r1, r3
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f7f8 f877 	bl	800600a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800df1c:	2102      	movs	r1, #2
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f7ff fdcc 	bl	800dabc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f7f8 f883 	bl	8006030 <pbuf_free>
        break;
 800df2a:	e000      	b.n	800df2e <ip4_input+0x22a>
    }
  }
 800df2c:	bf00      	nop

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800df2e:	4b0b      	ldr	r3, [pc, #44]	; (800df5c <ip4_input+0x258>)
 800df30:	2200      	movs	r2, #0
 800df32:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800df34:	4b09      	ldr	r3, [pc, #36]	; (800df5c <ip4_input+0x258>)
 800df36:	2200      	movs	r2, #0
 800df38:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800df3a:	4b08      	ldr	r3, [pc, #32]	; (800df5c <ip4_input+0x258>)
 800df3c:	2200      	movs	r2, #0
 800df3e:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800df40:	4b06      	ldr	r3, [pc, #24]	; (800df5c <ip4_input+0x258>)
 800df42:	2200      	movs	r2, #0
 800df44:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800df46:	4b05      	ldr	r3, [pc, #20]	; (800df5c <ip4_input+0x258>)
 800df48:	2200      	movs	r2, #0
 800df4a:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800df4c:	4b03      	ldr	r3, [pc, #12]	; (800df5c <ip4_input+0x258>)
 800df4e:	2200      	movs	r2, #0
 800df50:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800df52:	2300      	movs	r3, #0
}
 800df54:	4618      	mov	r0, r3
 800df56:	3718      	adds	r7, #24
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}
 800df5c:	20004dbc 	.word	0x20004dbc
 800df60:	20008398 	.word	0x20008398

0800df64 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b08a      	sub	sp, #40	; 0x28
 800df68:	af04      	add	r7, sp, #16
 800df6a:	60f8      	str	r0, [r7, #12]
 800df6c:	60b9      	str	r1, [r7, #8]
 800df6e:	607a      	str	r2, [r7, #4]
 800df70:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d009      	beq.n	800df90 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d003      	beq.n	800df8a <ip4_output_if+0x26>
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d102      	bne.n	800df90 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800df8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8c:	3304      	adds	r3, #4
 800df8e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800df90:	78fa      	ldrb	r2, [r7, #3]
 800df92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df94:	9302      	str	r3, [sp, #8]
 800df96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800df9a:	9301      	str	r3, [sp, #4]
 800df9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dfa0:	9300      	str	r3, [sp, #0]
 800dfa2:	4613      	mov	r3, r2
 800dfa4:	687a      	ldr	r2, [r7, #4]
 800dfa6:	6979      	ldr	r1, [r7, #20]
 800dfa8:	68f8      	ldr	r0, [r7, #12]
 800dfaa:	f000 f805 	bl	800dfb8 <ip4_output_if_src>
 800dfae:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3718      	adds	r7, #24
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}

0800dfb8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b088      	sub	sp, #32
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	60f8      	str	r0, [r7, #12]
 800dfc0:	60b9      	str	r1, [r7, #8]
 800dfc2:	607a      	str	r2, [r7, #4]
 800dfc4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	7b9b      	ldrb	r3, [r3, #14]
 800dfca:	2b01      	cmp	r3, #1
 800dfcc:	d006      	beq.n	800dfdc <ip4_output_if_src+0x24>
 800dfce:	4b4b      	ldr	r3, [pc, #300]	; (800e0fc <ip4_output_if_src+0x144>)
 800dfd0:	f44f 7255 	mov.w	r2, #852	; 0x354
 800dfd4:	494a      	ldr	r1, [pc, #296]	; (800e100 <ip4_output_if_src+0x148>)
 800dfd6:	484b      	ldr	r0, [pc, #300]	; (800e104 <ip4_output_if_src+0x14c>)
 800dfd8:	f001 f8e6 	bl	800f1a8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d060      	beq.n	800e0a4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800dfe2:	2314      	movs	r3, #20
 800dfe4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800dfe6:	2114      	movs	r1, #20
 800dfe8:	68f8      	ldr	r0, [r7, #12]
 800dfea:	f7f7 ff79 	bl	8005ee0 <pbuf_add_header>
 800dfee:	4603      	mov	r3, r0
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d002      	beq.n	800dffa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dff4:	f06f 0301 	mvn.w	r3, #1
 800dff8:	e07c      	b.n	800e0f4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	895b      	ldrh	r3, [r3, #10]
 800e004:	2b13      	cmp	r3, #19
 800e006:	d806      	bhi.n	800e016 <ip4_output_if_src+0x5e>
 800e008:	4b3c      	ldr	r3, [pc, #240]	; (800e0fc <ip4_output_if_src+0x144>)
 800e00a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e00e:	493e      	ldr	r1, [pc, #248]	; (800e108 <ip4_output_if_src+0x150>)
 800e010:	483c      	ldr	r0, [pc, #240]	; (800e104 <ip4_output_if_src+0x14c>)
 800e012:	f001 f8c9 	bl	800f1a8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e016:	69fb      	ldr	r3, [r7, #28]
 800e018:	78fa      	ldrb	r2, [r7, #3]
 800e01a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e022:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681a      	ldr	r2, [r3, #0]
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e02c:	8b7b      	ldrh	r3, [r7, #26]
 800e02e:	089b      	lsrs	r3, r3, #2
 800e030:	b29b      	uxth	r3, r3
 800e032:	b2db      	uxtb	r3, r3
 800e034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e038:	b2da      	uxtb	r2, r3
 800e03a:	69fb      	ldr	r3, [r7, #28]
 800e03c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e03e:	69fb      	ldr	r3, [r7, #28]
 800e040:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e044:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	891b      	ldrh	r3, [r3, #8]
 800e04a:	4618      	mov	r0, r3
 800e04c:	f7f6 fc0e 	bl	800486c <lwip_htons>
 800e050:	4603      	mov	r3, r0
 800e052:	461a      	mov	r2, r3
 800e054:	69fb      	ldr	r3, [r7, #28]
 800e056:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	2200      	movs	r2, #0
 800e05c:	719a      	strb	r2, [r3, #6]
 800e05e:	2200      	movs	r2, #0
 800e060:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e062:	4b2a      	ldr	r3, [pc, #168]	; (800e10c <ip4_output_if_src+0x154>)
 800e064:	881b      	ldrh	r3, [r3, #0]
 800e066:	4618      	mov	r0, r3
 800e068:	f7f6 fc00 	bl	800486c <lwip_htons>
 800e06c:	4603      	mov	r3, r0
 800e06e:	461a      	mov	r2, r3
 800e070:	69fb      	ldr	r3, [r7, #28]
 800e072:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e074:	4b25      	ldr	r3, [pc, #148]	; (800e10c <ip4_output_if_src+0x154>)
 800e076:	881b      	ldrh	r3, [r3, #0]
 800e078:	3301      	adds	r3, #1
 800e07a:	b29a      	uxth	r2, r3
 800e07c:	4b23      	ldr	r3, [pc, #140]	; (800e10c <ip4_output_if_src+0x154>)
 800e07e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d104      	bne.n	800e090 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e086:	4b22      	ldr	r3, [pc, #136]	; (800e110 <ip4_output_if_src+0x158>)
 800e088:	681a      	ldr	r2, [r3, #0]
 800e08a:	69fb      	ldr	r3, [r7, #28]
 800e08c:	60da      	str	r2, [r3, #12]
 800e08e:	e003      	b.n	800e098 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	681a      	ldr	r2, [r3, #0]
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e098:	69fb      	ldr	r3, [r7, #28]
 800e09a:	2200      	movs	r2, #0
 800e09c:	729a      	strb	r2, [r3, #10]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	72da      	strb	r2, [r3, #11]
 800e0a2:	e00f      	b.n	800e0c4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	895b      	ldrh	r3, [r3, #10]
 800e0a8:	2b13      	cmp	r3, #19
 800e0aa:	d802      	bhi.n	800e0b2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e0ac:	f06f 0301 	mvn.w	r3, #1
 800e0b0:	e020      	b.n	800e0f4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e0b8:	69fb      	ldr	r3, [r7, #28]
 800e0ba:	691b      	ldr	r3, [r3, #16]
 800e0bc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e0be:	f107 0314 	add.w	r3, r7, #20
 800e0c2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d00c      	beq.n	800e0e6 <ip4_output_if_src+0x12e>
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	891a      	ldrh	r2, [r3, #8]
 800e0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d906      	bls.n	800e0e6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e0d8:	687a      	ldr	r2, [r7, #4]
 800e0da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e0dc:	68f8      	ldr	r0, [r7, #12]
 800e0de:	f000 fde3 	bl	800eca8 <ip4_frag>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	e006      	b.n	800e0f4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e8:	695b      	ldr	r3, [r3, #20]
 800e0ea:	687a      	ldr	r2, [r7, #4]
 800e0ec:	68f9      	ldr	r1, [r7, #12]
 800e0ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0f0:	4798      	blx	r3
 800e0f2:	4603      	mov	r3, r0
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3720      	adds	r7, #32
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}
 800e0fc:	08012de4 	.word	0x08012de4
 800e100:	08012e18 	.word	0x08012e18
 800e104:	08012e24 	.word	0x08012e24
 800e108:	08012e4c 	.word	0x08012e4c
 800e10c:	200084fa 	.word	0x200084fa
 800e110:	08013234 	.word	0x08013234

0800e114 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e114:	b480      	push	{r7}
 800e116:	b085      	sub	sp, #20
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e128:	d002      	beq.n	800e130 <ip4_addr_isbroadcast_u32+0x1c>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d101      	bne.n	800e134 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e130:	2301      	movs	r3, #1
 800e132:	e02a      	b.n	800e18a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e13a:	f003 0302 	and.w	r3, r3, #2
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d101      	bne.n	800e146 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e142:	2300      	movs	r3, #0
 800e144:	e021      	b.n	800e18a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	3304      	adds	r3, #4
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	687a      	ldr	r2, [r7, #4]
 800e14e:	429a      	cmp	r2, r3
 800e150:	d101      	bne.n	800e156 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e152:	2300      	movs	r3, #0
 800e154:	e019      	b.n	800e18a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e156:	68fa      	ldr	r2, [r7, #12]
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	3304      	adds	r3, #4
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	405a      	eors	r2, r3
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	3308      	adds	r3, #8
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	4013      	ands	r3, r2
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d10d      	bne.n	800e188 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	3308      	adds	r3, #8
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	43da      	mvns	r2, r3
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	3308      	adds	r3, #8
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e180:	429a      	cmp	r2, r3
 800e182:	d101      	bne.n	800e188 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e184:	2301      	movs	r3, #1
 800e186:	e000      	b.n	800e18a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e188:	2300      	movs	r3, #0
  }
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3714      	adds	r7, #20
 800e18e:	46bd      	mov	sp, r7
 800e190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e194:	4770      	bx	lr
	...

0800e198 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800e1a0:	2210      	movs	r2, #16
 800e1a2:	4904      	ldr	r1, [pc, #16]	; (800e1b4 <ip4addr_ntoa+0x1c>)
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f000 f807 	bl	800e1b8 <ip4addr_ntoa_r>
 800e1aa:	4603      	mov	r3, r0
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3708      	adds	r7, #8
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	200084fc 	.word	0x200084fc

0800e1b8 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b08d      	sub	sp, #52	; 0x34
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	60b9      	str	r1, [r7, #8]
 800e1c2:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800e1d2:	f107 0318 	add.w	r3, r7, #24
 800e1d6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800e1d8:	2300      	movs	r3, #0
 800e1da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e1de:	e058      	b.n	800e292 <ip4addr_ntoa_r+0xda>
    i = 0;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800e1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e8:	781a      	ldrb	r2, [r3, #0]
 800e1ea:	4b32      	ldr	r3, [pc, #200]	; (800e2b4 <ip4addr_ntoa_r+0xfc>)
 800e1ec:	fba3 1302 	umull	r1, r3, r3, r2
 800e1f0:	08d9      	lsrs	r1, r3, #3
 800e1f2:	460b      	mov	r3, r1
 800e1f4:	009b      	lsls	r3, r3, #2
 800e1f6:	440b      	add	r3, r1
 800e1f8:	005b      	lsls	r3, r3, #1
 800e1fa:	1ad3      	subs	r3, r2, r3
 800e1fc:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800e1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	4a2c      	ldr	r2, [pc, #176]	; (800e2b4 <ip4addr_ntoa_r+0xfc>)
 800e204:	fba2 2303 	umull	r2, r3, r2, r3
 800e208:	08db      	lsrs	r3, r3, #3
 800e20a:	b2da      	uxtb	r2, r3
 800e20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800e210:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e214:	1c5a      	adds	r2, r3, #1
 800e216:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800e21a:	4619      	mov	r1, r3
 800e21c:	7ffb      	ldrb	r3, [r7, #31]
 800e21e:	3330      	adds	r3, #48	; 0x30
 800e220:	b2da      	uxtb	r2, r3
 800e222:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800e226:	443b      	add	r3, r7
 800e228:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800e22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d1d8      	bne.n	800e1e6 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800e234:	e011      	b.n	800e25a <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800e236:	6a3b      	ldr	r3, [r7, #32]
 800e238:	1c5a      	adds	r2, r3, #1
 800e23a:	623a      	str	r2, [r7, #32]
 800e23c:	687a      	ldr	r2, [r7, #4]
 800e23e:	429a      	cmp	r2, r3
 800e240:	dc01      	bgt.n	800e246 <ip4addr_ntoa_r+0x8e>
        return NULL;
 800e242:	2300      	movs	r3, #0
 800e244:	e030      	b.n	800e2a8 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800e246:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e24c:	1c59      	adds	r1, r3, #1
 800e24e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e250:	3230      	adds	r2, #48	; 0x30
 800e252:	443a      	add	r2, r7
 800e254:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800e258:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800e25a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e25e:	1e5a      	subs	r2, r3, #1
 800e260:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800e264:	2b00      	cmp	r3, #0
 800e266:	d1e6      	bne.n	800e236 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800e268:	6a3b      	ldr	r3, [r7, #32]
 800e26a:	1c5a      	adds	r2, r3, #1
 800e26c:	623a      	str	r2, [r7, #32]
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	429a      	cmp	r2, r3
 800e272:	dc01      	bgt.n	800e278 <ip4addr_ntoa_r+0xc0>
      return NULL;
 800e274:	2300      	movs	r3, #0
 800e276:	e017      	b.n	800e2a8 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800e278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27a:	1c5a      	adds	r2, r3, #1
 800e27c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e27e:	222e      	movs	r2, #46	; 0x2e
 800e280:	701a      	strb	r2, [r3, #0]
    ap++;
 800e282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e284:	3301      	adds	r3, #1
 800e286:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800e288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e28c:	3301      	adds	r3, #1
 800e28e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e296:	2b03      	cmp	r3, #3
 800e298:	d9a2      	bls.n	800e1e0 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800e29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29c:	3b01      	subs	r3, #1
 800e29e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	701a      	strb	r2, [r3, #0]
  return buf;
 800e2a6:	68bb      	ldr	r3, [r7, #8]
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3734      	adds	r7, #52	; 0x34
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr
 800e2b4:	cccccccd 	.word	0xcccccccd

0800e2b8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b084      	sub	sp, #16
 800e2bc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e2c2:	4b12      	ldr	r3, [pc, #72]	; (800e30c <ip_reass_tmr+0x54>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e2c8:	e018      	b.n	800e2fc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	7fdb      	ldrb	r3, [r3, #31]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d00b      	beq.n	800e2ea <ip_reass_tmr+0x32>
      r->timer--;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	7fdb      	ldrb	r3, [r3, #31]
 800e2d6:	3b01      	subs	r3, #1
 800e2d8:	b2da      	uxtb	r2, r3
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	60fb      	str	r3, [r7, #12]
 800e2e8:	e008      	b.n	800e2fc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e2f4:	68b9      	ldr	r1, [r7, #8]
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f000 f80a 	bl	800e310 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d1e3      	bne.n	800e2ca <ip_reass_tmr+0x12>
    }
  }
}
 800e302:	bf00      	nop
 800e304:	bf00      	nop
 800e306:	3710      	adds	r7, #16
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	2000850c 	.word	0x2000850c

0800e310 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b088      	sub	sp, #32
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e31a:	2300      	movs	r3, #0
 800e31c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e31e:	683a      	ldr	r2, [r7, #0]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	429a      	cmp	r2, r3
 800e324:	d105      	bne.n	800e332 <ip_reass_free_complete_datagram+0x22>
 800e326:	4b45      	ldr	r3, [pc, #276]	; (800e43c <ip_reass_free_complete_datagram+0x12c>)
 800e328:	22ab      	movs	r2, #171	; 0xab
 800e32a:	4945      	ldr	r1, [pc, #276]	; (800e440 <ip_reass_free_complete_datagram+0x130>)
 800e32c:	4845      	ldr	r0, [pc, #276]	; (800e444 <ip_reass_free_complete_datagram+0x134>)
 800e32e:	f000 ff3b 	bl	800f1a8 <iprintf>
  if (prev != NULL) {
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d00a      	beq.n	800e34e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	687a      	ldr	r2, [r7, #4]
 800e33e:	429a      	cmp	r2, r3
 800e340:	d005      	beq.n	800e34e <ip_reass_free_complete_datagram+0x3e>
 800e342:	4b3e      	ldr	r3, [pc, #248]	; (800e43c <ip_reass_free_complete_datagram+0x12c>)
 800e344:	22ad      	movs	r2, #173	; 0xad
 800e346:	4940      	ldr	r1, [pc, #256]	; (800e448 <ip_reass_free_complete_datagram+0x138>)
 800e348:	483e      	ldr	r0, [pc, #248]	; (800e444 <ip_reass_free_complete_datagram+0x134>)
 800e34a:	f000 ff2d 	bl	800f1a8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	685b      	ldr	r3, [r3, #4]
 800e354:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	889b      	ldrh	r3, [r3, #4]
 800e35a:	b29b      	uxth	r3, r3
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d12a      	bne.n	800e3b6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e36e:	69bb      	ldr	r3, [r7, #24]
 800e370:	6858      	ldr	r0, [r3, #4]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	3308      	adds	r3, #8
 800e376:	2214      	movs	r2, #20
 800e378:	4619      	mov	r1, r3
 800e37a:	f000 fee5 	bl	800f148 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e37e:	2101      	movs	r1, #1
 800e380:	69b8      	ldr	r0, [r7, #24]
 800e382:	f7ff fbab 	bl	800dadc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e386:	69b8      	ldr	r0, [r7, #24]
 800e388:	f7f7 feda 	bl	8006140 <pbuf_clen>
 800e38c:	4603      	mov	r3, r0
 800e38e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e390:	8bfa      	ldrh	r2, [r7, #30]
 800e392:	8a7b      	ldrh	r3, [r7, #18]
 800e394:	4413      	add	r3, r2
 800e396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e39a:	db05      	blt.n	800e3a8 <ip_reass_free_complete_datagram+0x98>
 800e39c:	4b27      	ldr	r3, [pc, #156]	; (800e43c <ip_reass_free_complete_datagram+0x12c>)
 800e39e:	22bc      	movs	r2, #188	; 0xbc
 800e3a0:	492a      	ldr	r1, [pc, #168]	; (800e44c <ip_reass_free_complete_datagram+0x13c>)
 800e3a2:	4828      	ldr	r0, [pc, #160]	; (800e444 <ip_reass_free_complete_datagram+0x134>)
 800e3a4:	f000 ff00 	bl	800f1a8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e3a8:	8bfa      	ldrh	r2, [r7, #30]
 800e3aa:	8a7b      	ldrh	r3, [r7, #18]
 800e3ac:	4413      	add	r3, r2
 800e3ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e3b0:	69b8      	ldr	r0, [r7, #24]
 800e3b2:	f7f7 fe3d 	bl	8006030 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	685b      	ldr	r3, [r3, #4]
 800e3ba:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e3bc:	e01f      	b.n	800e3fe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e3be:	69bb      	ldr	r3, [r7, #24]
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e3c4:	69bb      	ldr	r3, [r7, #24]
 800e3c6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e3ce:	68f8      	ldr	r0, [r7, #12]
 800e3d0:	f7f7 feb6 	bl	8006140 <pbuf_clen>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e3d8:	8bfa      	ldrh	r2, [r7, #30]
 800e3da:	8a7b      	ldrh	r3, [r7, #18]
 800e3dc:	4413      	add	r3, r2
 800e3de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3e2:	db05      	blt.n	800e3f0 <ip_reass_free_complete_datagram+0xe0>
 800e3e4:	4b15      	ldr	r3, [pc, #84]	; (800e43c <ip_reass_free_complete_datagram+0x12c>)
 800e3e6:	22cc      	movs	r2, #204	; 0xcc
 800e3e8:	4918      	ldr	r1, [pc, #96]	; (800e44c <ip_reass_free_complete_datagram+0x13c>)
 800e3ea:	4816      	ldr	r0, [pc, #88]	; (800e444 <ip_reass_free_complete_datagram+0x134>)
 800e3ec:	f000 fedc 	bl	800f1a8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e3f0:	8bfa      	ldrh	r2, [r7, #30]
 800e3f2:	8a7b      	ldrh	r3, [r7, #18]
 800e3f4:	4413      	add	r3, r2
 800e3f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e3f8:	68f8      	ldr	r0, [r7, #12]
 800e3fa:	f7f7 fe19 	bl	8006030 <pbuf_free>
  while (p != NULL) {
 800e3fe:	69bb      	ldr	r3, [r7, #24]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d1dc      	bne.n	800e3be <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e404:	6839      	ldr	r1, [r7, #0]
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f000 f8c2 	bl	800e590 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e40c:	4b10      	ldr	r3, [pc, #64]	; (800e450 <ip_reass_free_complete_datagram+0x140>)
 800e40e:	881b      	ldrh	r3, [r3, #0]
 800e410:	8bfa      	ldrh	r2, [r7, #30]
 800e412:	429a      	cmp	r2, r3
 800e414:	d905      	bls.n	800e422 <ip_reass_free_complete_datagram+0x112>
 800e416:	4b09      	ldr	r3, [pc, #36]	; (800e43c <ip_reass_free_complete_datagram+0x12c>)
 800e418:	22d2      	movs	r2, #210	; 0xd2
 800e41a:	490e      	ldr	r1, [pc, #56]	; (800e454 <ip_reass_free_complete_datagram+0x144>)
 800e41c:	4809      	ldr	r0, [pc, #36]	; (800e444 <ip_reass_free_complete_datagram+0x134>)
 800e41e:	f000 fec3 	bl	800f1a8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e422:	4b0b      	ldr	r3, [pc, #44]	; (800e450 <ip_reass_free_complete_datagram+0x140>)
 800e424:	881a      	ldrh	r2, [r3, #0]
 800e426:	8bfb      	ldrh	r3, [r7, #30]
 800e428:	1ad3      	subs	r3, r2, r3
 800e42a:	b29a      	uxth	r2, r3
 800e42c:	4b08      	ldr	r3, [pc, #32]	; (800e450 <ip_reass_free_complete_datagram+0x140>)
 800e42e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e430:	8bfb      	ldrh	r3, [r7, #30]
}
 800e432:	4618      	mov	r0, r3
 800e434:	3720      	adds	r7, #32
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	08012e7c 	.word	0x08012e7c
 800e440:	08012eb8 	.word	0x08012eb8
 800e444:	08012ec4 	.word	0x08012ec4
 800e448:	08012eec 	.word	0x08012eec
 800e44c:	08012f00 	.word	0x08012f00
 800e450:	20008510 	.word	0x20008510
 800e454:	08012f20 	.word	0x08012f20

0800e458 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b08a      	sub	sp, #40	; 0x28
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e462:	2300      	movs	r3, #0
 800e464:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e466:	2300      	movs	r3, #0
 800e468:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e46a:	2300      	movs	r3, #0
 800e46c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e46e:	2300      	movs	r3, #0
 800e470:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e472:	2300      	movs	r3, #0
 800e474:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e476:	4b28      	ldr	r3, [pc, #160]	; (800e518 <ip_reass_remove_oldest_datagram+0xc0>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e47c:	e030      	b.n	800e4e0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e480:	695a      	ldr	r2, [r3, #20]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	68db      	ldr	r3, [r3, #12]
 800e486:	429a      	cmp	r2, r3
 800e488:	d10c      	bne.n	800e4a4 <ip_reass_remove_oldest_datagram+0x4c>
 800e48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48c:	699a      	ldr	r2, [r3, #24]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	691b      	ldr	r3, [r3, #16]
 800e492:	429a      	cmp	r2, r3
 800e494:	d106      	bne.n	800e4a4 <ip_reass_remove_oldest_datagram+0x4c>
 800e496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e498:	899a      	ldrh	r2, [r3, #12]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	889b      	ldrh	r3, [r3, #4]
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d014      	beq.n	800e4ce <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e4aa:	6a3b      	ldr	r3, [r7, #32]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d104      	bne.n	800e4ba <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e4b4:	69fb      	ldr	r3, [r7, #28]
 800e4b6:	61bb      	str	r3, [r7, #24]
 800e4b8:	e009      	b.n	800e4ce <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4bc:	7fda      	ldrb	r2, [r3, #31]
 800e4be:	6a3b      	ldr	r3, [r7, #32]
 800e4c0:	7fdb      	ldrb	r3, [r3, #31]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d803      	bhi.n	800e4ce <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e4ca:	69fb      	ldr	r3, [r7, #28]
 800e4cc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d001      	beq.n	800e4da <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d1cb      	bne.n	800e47e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e4e6:	6a3b      	ldr	r3, [r7, #32]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d008      	beq.n	800e4fe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e4ec:	69b9      	ldr	r1, [r7, #24]
 800e4ee:	6a38      	ldr	r0, [r7, #32]
 800e4f0:	f7ff ff0e 	bl	800e310 <ip_reass_free_complete_datagram>
 800e4f4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e4f6:	697a      	ldr	r2, [r7, #20]
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	4413      	add	r3, r2
 800e4fc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e4fe:	697a      	ldr	r2, [r7, #20]
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	429a      	cmp	r2, r3
 800e504:	da02      	bge.n	800e50c <ip_reass_remove_oldest_datagram+0xb4>
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	2b01      	cmp	r3, #1
 800e50a:	dcac      	bgt.n	800e466 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e50c:	697b      	ldr	r3, [r7, #20]
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3728      	adds	r7, #40	; 0x28
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
 800e516:	bf00      	nop
 800e518:	2000850c 	.word	0x2000850c

0800e51c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b084      	sub	sp, #16
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e526:	2005      	movs	r0, #5
 800e528:	f7f6 fe86 	bl	8005238 <memp_malloc>
 800e52c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d110      	bne.n	800e556 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e534:	6839      	ldr	r1, [r7, #0]
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f7ff ff8e 	bl	800e458 <ip_reass_remove_oldest_datagram>
 800e53c:	4602      	mov	r2, r0
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	4293      	cmp	r3, r2
 800e542:	dc03      	bgt.n	800e54c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e544:	2005      	movs	r0, #5
 800e546:	f7f6 fe77 	bl	8005238 <memp_malloc>
 800e54a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d101      	bne.n	800e556 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e552:	2300      	movs	r3, #0
 800e554:	e016      	b.n	800e584 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e556:	2220      	movs	r2, #32
 800e558:	2100      	movs	r1, #0
 800e55a:	68f8      	ldr	r0, [r7, #12]
 800e55c:	f000 fe1c 	bl	800f198 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	220f      	movs	r2, #15
 800e564:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e566:	4b09      	ldr	r3, [pc, #36]	; (800e58c <ip_reass_enqueue_new_datagram+0x70>)
 800e568:	681a      	ldr	r2, [r3, #0]
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e56e:	4a07      	ldr	r2, [pc, #28]	; (800e58c <ip_reass_enqueue_new_datagram+0x70>)
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	3308      	adds	r3, #8
 800e578:	2214      	movs	r2, #20
 800e57a:	6879      	ldr	r1, [r7, #4]
 800e57c:	4618      	mov	r0, r3
 800e57e:	f000 fde3 	bl	800f148 <memcpy>
  return ipr;
 800e582:	68fb      	ldr	r3, [r7, #12]
}
 800e584:	4618      	mov	r0, r3
 800e586:	3710      	adds	r7, #16
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	2000850c 	.word	0x2000850c

0800e590 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e59a:	4b10      	ldr	r3, [pc, #64]	; (800e5dc <ip_reass_dequeue_datagram+0x4c>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	687a      	ldr	r2, [r7, #4]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d104      	bne.n	800e5ae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4a0c      	ldr	r2, [pc, #48]	; (800e5dc <ip_reass_dequeue_datagram+0x4c>)
 800e5aa:	6013      	str	r3, [r2, #0]
 800e5ac:	e00d      	b.n	800e5ca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d106      	bne.n	800e5c2 <ip_reass_dequeue_datagram+0x32>
 800e5b4:	4b0a      	ldr	r3, [pc, #40]	; (800e5e0 <ip_reass_dequeue_datagram+0x50>)
 800e5b6:	f240 1245 	movw	r2, #325	; 0x145
 800e5ba:	490a      	ldr	r1, [pc, #40]	; (800e5e4 <ip_reass_dequeue_datagram+0x54>)
 800e5bc:	480a      	ldr	r0, [pc, #40]	; (800e5e8 <ip_reass_dequeue_datagram+0x58>)
 800e5be:	f000 fdf3 	bl	800f1a8 <iprintf>
    prev->next = ipr->next;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681a      	ldr	r2, [r3, #0]
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e5ca:	6879      	ldr	r1, [r7, #4]
 800e5cc:	2005      	movs	r0, #5
 800e5ce:	f7f6 fea3 	bl	8005318 <memp_free>
}
 800e5d2:	bf00      	nop
 800e5d4:	3708      	adds	r7, #8
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
 800e5da:	bf00      	nop
 800e5dc:	2000850c 	.word	0x2000850c
 800e5e0:	08012e7c 	.word	0x08012e7c
 800e5e4:	08012f44 	.word	0x08012f44
 800e5e8:	08012ec4 	.word	0x08012ec4

0800e5ec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b08c      	sub	sp, #48	; 0x30
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	60f8      	str	r0, [r7, #12]
 800e5f4:	60b9      	str	r1, [r7, #8]
 800e5f6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e606:	69fb      	ldr	r3, [r7, #28]
 800e608:	885b      	ldrh	r3, [r3, #2]
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	4618      	mov	r0, r3
 800e60e:	f7f6 f92d 	bl	800486c <lwip_htons>
 800e612:	4603      	mov	r3, r0
 800e614:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e616:	69fb      	ldr	r3, [r7, #28]
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	f003 030f 	and.w	r3, r3, #15
 800e61e:	b2db      	uxtb	r3, r3
 800e620:	009b      	lsls	r3, r3, #2
 800e622:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e624:	7e7b      	ldrb	r3, [r7, #25]
 800e626:	b29b      	uxth	r3, r3
 800e628:	8b7a      	ldrh	r2, [r7, #26]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d202      	bcs.n	800e634 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e62e:	f04f 33ff 	mov.w	r3, #4294967295
 800e632:	e135      	b.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e634:	7e7b      	ldrb	r3, [r7, #25]
 800e636:	b29b      	uxth	r3, r3
 800e638:	8b7a      	ldrh	r2, [r7, #26]
 800e63a:	1ad3      	subs	r3, r2, r3
 800e63c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e63e:	69fb      	ldr	r3, [r7, #28]
 800e640:	88db      	ldrh	r3, [r3, #6]
 800e642:	b29b      	uxth	r3, r3
 800e644:	4618      	mov	r0, r3
 800e646:	f7f6 f911 	bl	800486c <lwip_htons>
 800e64a:	4603      	mov	r3, r0
 800e64c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e650:	b29b      	uxth	r3, r3
 800e652:	00db      	lsls	r3, r3, #3
 800e654:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65e:	2200      	movs	r2, #0
 800e660:	701a      	strb	r2, [r3, #0]
 800e662:	2200      	movs	r2, #0
 800e664:	705a      	strb	r2, [r3, #1]
 800e666:	2200      	movs	r2, #0
 800e668:	709a      	strb	r2, [r3, #2]
 800e66a:	2200      	movs	r2, #0
 800e66c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e670:	8afa      	ldrh	r2, [r7, #22]
 800e672:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e674:	8afa      	ldrh	r2, [r7, #22]
 800e676:	8b7b      	ldrh	r3, [r7, #26]
 800e678:	4413      	add	r3, r2
 800e67a:	b29a      	uxth	r2, r3
 800e67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e682:	88db      	ldrh	r3, [r3, #6]
 800e684:	b29b      	uxth	r3, r3
 800e686:	8afa      	ldrh	r2, [r7, #22]
 800e688:	429a      	cmp	r2, r3
 800e68a:	d902      	bls.n	800e692 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e68c:	f04f 33ff 	mov.w	r3, #4294967295
 800e690:	e106      	b.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	685b      	ldr	r3, [r3, #4]
 800e696:	627b      	str	r3, [r7, #36]	; 0x24
 800e698:	e068      	b.n	800e76c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a2:	889b      	ldrh	r3, [r3, #4]
 800e6a4:	b29a      	uxth	r2, r3
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	889b      	ldrh	r3, [r3, #4]
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d235      	bcs.n	800e71c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d020      	beq.n	800e6fe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6be:	889b      	ldrh	r3, [r3, #4]
 800e6c0:	b29a      	uxth	r2, r3
 800e6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c4:	88db      	ldrh	r3, [r3, #6]
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d307      	bcc.n	800e6dc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ce:	88db      	ldrh	r3, [r3, #6]
 800e6d0:	b29a      	uxth	r2, r3
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	889b      	ldrh	r3, [r3, #4]
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d902      	bls.n	800e6e2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e6dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e6e0:	e0de      	b.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e4:	68ba      	ldr	r2, [r7, #8]
 800e6e6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ea:	88db      	ldrh	r3, [r3, #6]
 800e6ec:	b29a      	uxth	r2, r3
 800e6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f0:	889b      	ldrh	r3, [r3, #4]
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d03d      	beq.n	800e774 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e6fc:	e03a      	b.n	800e774 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e700:	88db      	ldrh	r3, [r3, #6]
 800e702:	b29a      	uxth	r2, r3
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	889b      	ldrh	r3, [r3, #4]
 800e708:	b29b      	uxth	r3, r3
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d902      	bls.n	800e714 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e70e:	f04f 33ff 	mov.w	r3, #4294967295
 800e712:	e0c5      	b.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	68ba      	ldr	r2, [r7, #8]
 800e718:	605a      	str	r2, [r3, #4]
      break;
 800e71a:	e02b      	b.n	800e774 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e71e:	889b      	ldrh	r3, [r3, #4]
 800e720:	b29a      	uxth	r2, r3
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	889b      	ldrh	r3, [r3, #4]
 800e726:	b29b      	uxth	r3, r3
 800e728:	429a      	cmp	r2, r3
 800e72a:	d102      	bne.n	800e732 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e72c:	f04f 33ff 	mov.w	r3, #4294967295
 800e730:	e0b6      	b.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e734:	889b      	ldrh	r3, [r3, #4]
 800e736:	b29a      	uxth	r2, r3
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	88db      	ldrh	r3, [r3, #6]
 800e73c:	b29b      	uxth	r3, r3
 800e73e:	429a      	cmp	r2, r3
 800e740:	d202      	bcs.n	800e748 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e742:	f04f 33ff 	mov.w	r3, #4294967295
 800e746:	e0ab      	b.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d009      	beq.n	800e762 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e750:	88db      	ldrh	r3, [r3, #6]
 800e752:	b29a      	uxth	r2, r3
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	889b      	ldrh	r3, [r3, #4]
 800e758:	b29b      	uxth	r3, r3
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d001      	beq.n	800e762 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e75e:	2300      	movs	r3, #0
 800e760:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d193      	bne.n	800e69a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e772:	e000      	b.n	800e776 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e774:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d12d      	bne.n	800e7d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d01c      	beq.n	800e7bc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e784:	88db      	ldrh	r3, [r3, #6]
 800e786:	b29a      	uxth	r2, r3
 800e788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78a:	889b      	ldrh	r3, [r3, #4]
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	429a      	cmp	r2, r3
 800e790:	d906      	bls.n	800e7a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e792:	4b45      	ldr	r3, [pc, #276]	; (800e8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e794:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e798:	4944      	ldr	r1, [pc, #272]	; (800e8ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e79a:	4845      	ldr	r0, [pc, #276]	; (800e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e79c:	f000 fd04 	bl	800f1a8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a2:	68ba      	ldr	r2, [r7, #8]
 800e7a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a8:	88db      	ldrh	r3, [r3, #6]
 800e7aa:	b29a      	uxth	r2, r3
 800e7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ae:	889b      	ldrh	r3, [r3, #4]
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d010      	beq.n	800e7d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	623b      	str	r3, [r7, #32]
 800e7ba:	e00d      	b.n	800e7d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	685b      	ldr	r3, [r3, #4]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d006      	beq.n	800e7d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e7c4:	4b38      	ldr	r3, [pc, #224]	; (800e8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e7c6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e7ca:	493a      	ldr	r1, [pc, #232]	; (800e8b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e7cc:	4838      	ldr	r0, [pc, #224]	; (800e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e7ce:	f000 fceb 	bl	800f1a8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	68ba      	ldr	r2, [r7, #8]
 800e7d6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d105      	bne.n	800e7ea <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	7f9b      	ldrb	r3, [r3, #30]
 800e7e2:	f003 0301 	and.w	r3, r3, #1
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d059      	beq.n	800e89e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e7ea:	6a3b      	ldr	r3, [r7, #32]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d04f      	beq.n	800e890 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d006      	beq.n	800e806 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	685b      	ldr	r3, [r3, #4]
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	889b      	ldrh	r3, [r3, #4]
 800e800:	b29b      	uxth	r3, r3
 800e802:	2b00      	cmp	r3, #0
 800e804:	d002      	beq.n	800e80c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e806:	2300      	movs	r3, #0
 800e808:	623b      	str	r3, [r7, #32]
 800e80a:	e041      	b.n	800e890 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e80e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e816:	e012      	b.n	800e83e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e820:	88db      	ldrh	r3, [r3, #6]
 800e822:	b29a      	uxth	r2, r3
 800e824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e826:	889b      	ldrh	r3, [r3, #4]
 800e828:	b29b      	uxth	r3, r3
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d002      	beq.n	800e834 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e82e:	2300      	movs	r3, #0
 800e830:	623b      	str	r3, [r7, #32]
            break;
 800e832:	e007      	b.n	800e844 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e836:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e840:	2b00      	cmp	r3, #0
 800e842:	d1e9      	bne.n	800e818 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e844:	6a3b      	ldr	r3, [r7, #32]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d022      	beq.n	800e890 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d106      	bne.n	800e860 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e852:	4b15      	ldr	r3, [pc, #84]	; (800e8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e854:	f240 12df 	movw	r2, #479	; 0x1df
 800e858:	4917      	ldr	r1, [pc, #92]	; (800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e85a:	4815      	ldr	r0, [pc, #84]	; (800e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e85c:	f000 fca4 	bl	800f1a8 <iprintf>
          LWIP_ASSERT("sanity check",
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	685b      	ldr	r3, [r3, #4]
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e868:	429a      	cmp	r2, r3
 800e86a:	d106      	bne.n	800e87a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e86c:	4b0e      	ldr	r3, [pc, #56]	; (800e8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e86e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e872:	4911      	ldr	r1, [pc, #68]	; (800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e874:	480e      	ldr	r0, [pc, #56]	; (800e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e876:	f000 fc97 	bl	800f1a8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d006      	beq.n	800e890 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e882:	4b09      	ldr	r3, [pc, #36]	; (800e8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e884:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e888:	490c      	ldr	r1, [pc, #48]	; (800e8bc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e88a:	4809      	ldr	r0, [pc, #36]	; (800e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e88c:	f000 fc8c 	bl	800f1a8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e890:	6a3b      	ldr	r3, [r7, #32]
 800e892:	2b00      	cmp	r3, #0
 800e894:	bf14      	ite	ne
 800e896:	2301      	movne	r3, #1
 800e898:	2300      	moveq	r3, #0
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	e000      	b.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e89e:	2300      	movs	r3, #0
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3730      	adds	r7, #48	; 0x30
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	08012e7c 	.word	0x08012e7c
 800e8ac:	08012f60 	.word	0x08012f60
 800e8b0:	08012ec4 	.word	0x08012ec4
 800e8b4:	08012f80 	.word	0x08012f80
 800e8b8:	08012fb8 	.word	0x08012fb8
 800e8bc:	08012fc8 	.word	0x08012fc8

0800e8c0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b08e      	sub	sp, #56	; 0x38
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	685b      	ldr	r3, [r3, #4]
 800e8cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	f003 030f 	and.w	r3, r3, #15
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	b2db      	uxtb	r3, r3
 800e8dc:	2b14      	cmp	r3, #20
 800e8de:	f040 8171 	bne.w	800ebc4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e4:	88db      	ldrh	r3, [r3, #6]
 800e8e6:	b29b      	uxth	r3, r3
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7f5 ffbf 	bl	800486c <lwip_htons>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	00db      	lsls	r3, r3, #3
 800e8f8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fc:	885b      	ldrh	r3, [r3, #2]
 800e8fe:	b29b      	uxth	r3, r3
 800e900:	4618      	mov	r0, r3
 800e902:	f7f5 ffb3 	bl	800486c <lwip_htons>
 800e906:	4603      	mov	r3, r0
 800e908:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	f003 030f 	and.w	r3, r3, #15
 800e912:	b2db      	uxtb	r3, r3
 800e914:	009b      	lsls	r3, r3, #2
 800e916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e91a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e91e:	b29b      	uxth	r3, r3
 800e920:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e922:	429a      	cmp	r2, r3
 800e924:	f0c0 8150 	bcc.w	800ebc8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e928:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e92c:	b29b      	uxth	r3, r3
 800e92e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e930:	1ad3      	subs	r3, r2, r3
 800e932:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f7f7 fc03 	bl	8006140 <pbuf_clen>
 800e93a:	4603      	mov	r3, r0
 800e93c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e93e:	4b8c      	ldr	r3, [pc, #560]	; (800eb70 <ip4_reass+0x2b0>)
 800e940:	881b      	ldrh	r3, [r3, #0]
 800e942:	461a      	mov	r2, r3
 800e944:	8c3b      	ldrh	r3, [r7, #32]
 800e946:	4413      	add	r3, r2
 800e948:	2b0a      	cmp	r3, #10
 800e94a:	dd10      	ble.n	800e96e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e94c:	8c3b      	ldrh	r3, [r7, #32]
 800e94e:	4619      	mov	r1, r3
 800e950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e952:	f7ff fd81 	bl	800e458 <ip_reass_remove_oldest_datagram>
 800e956:	4603      	mov	r3, r0
 800e958:	2b00      	cmp	r3, #0
 800e95a:	f000 8137 	beq.w	800ebcc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e95e:	4b84      	ldr	r3, [pc, #528]	; (800eb70 <ip4_reass+0x2b0>)
 800e960:	881b      	ldrh	r3, [r3, #0]
 800e962:	461a      	mov	r2, r3
 800e964:	8c3b      	ldrh	r3, [r7, #32]
 800e966:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e968:	2b0a      	cmp	r3, #10
 800e96a:	f300 812f 	bgt.w	800ebcc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e96e:	4b81      	ldr	r3, [pc, #516]	; (800eb74 <ip4_reass+0x2b4>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	633b      	str	r3, [r7, #48]	; 0x30
 800e974:	e015      	b.n	800e9a2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e978:	695a      	ldr	r2, [r3, #20]
 800e97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97c:	68db      	ldr	r3, [r3, #12]
 800e97e:	429a      	cmp	r2, r3
 800e980:	d10c      	bne.n	800e99c <ip4_reass+0xdc>
 800e982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e984:	699a      	ldr	r2, [r3, #24]
 800e986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e988:	691b      	ldr	r3, [r3, #16]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d106      	bne.n	800e99c <ip4_reass+0xdc>
 800e98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e990:	899a      	ldrh	r2, [r3, #12]
 800e992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e994:	889b      	ldrh	r3, [r3, #4]
 800e996:	b29b      	uxth	r3, r3
 800e998:	429a      	cmp	r2, r3
 800e99a:	d006      	beq.n	800e9aa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	633b      	str	r3, [r7, #48]	; 0x30
 800e9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d1e6      	bne.n	800e976 <ip4_reass+0xb6>
 800e9a8:	e000      	b.n	800e9ac <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e9aa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d109      	bne.n	800e9c6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e9b2:	8c3b      	ldrh	r3, [r7, #32]
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9b8:	f7ff fdb0 	bl	800e51c <ip_reass_enqueue_new_datagram>
 800e9bc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d11c      	bne.n	800e9fe <ip4_reass+0x13e>
      goto nullreturn;
 800e9c4:	e105      	b.n	800ebd2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c8:	88db      	ldrh	r3, [r3, #6]
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f7f5 ff4d 	bl	800486c <lwip_htons>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d110      	bne.n	800e9fe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9de:	89db      	ldrh	r3, [r3, #14]
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f7f5 ff43 	bl	800486c <lwip_htons>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d006      	beq.n	800e9fe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f2:	3308      	adds	r3, #8
 800e9f4:	2214      	movs	r2, #20
 800e9f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f000 fba5 	bl	800f148 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea00:	88db      	ldrh	r3, [r3, #6]
 800ea02:	b29b      	uxth	r3, r3
 800ea04:	f003 0320 	and.w	r3, r3, #32
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	bf0c      	ite	eq
 800ea0c:	2301      	moveq	r3, #1
 800ea0e:	2300      	movne	r3, #0
 800ea10:	b2db      	uxtb	r3, r3
 800ea12:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ea14:	69fb      	ldr	r3, [r7, #28]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d00e      	beq.n	800ea38 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ea1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea1e:	4413      	add	r3, r2
 800ea20:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ea22:	8b7a      	ldrh	r2, [r7, #26]
 800ea24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ea26:	429a      	cmp	r2, r3
 800ea28:	f0c0 80a0 	bcc.w	800eb6c <ip4_reass+0x2ac>
 800ea2c:	8b7b      	ldrh	r3, [r7, #26]
 800ea2e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ea32:	4293      	cmp	r3, r2
 800ea34:	f200 809a 	bhi.w	800eb6c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ea38:	69fa      	ldr	r2, [r7, #28]
 800ea3a:	6879      	ldr	r1, [r7, #4]
 800ea3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea3e:	f7ff fdd5 	bl	800e5ec <ip_reass_chain_frag_into_datagram_and_validate>
 800ea42:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea4a:	f000 809b 	beq.w	800eb84 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ea4e:	4b48      	ldr	r3, [pc, #288]	; (800eb70 <ip4_reass+0x2b0>)
 800ea50:	881a      	ldrh	r2, [r3, #0]
 800ea52:	8c3b      	ldrh	r3, [r7, #32]
 800ea54:	4413      	add	r3, r2
 800ea56:	b29a      	uxth	r2, r3
 800ea58:	4b45      	ldr	r3, [pc, #276]	; (800eb70 <ip4_reass+0x2b0>)
 800ea5a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ea5c:	69fb      	ldr	r3, [r7, #28]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d00d      	beq.n	800ea7e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ea62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea66:	4413      	add	r3, r2
 800ea68:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ea6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea6c:	8a7a      	ldrh	r2, [r7, #18]
 800ea6e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ea70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea72:	7f9b      	ldrb	r3, [r3, #30]
 800ea74:	f043 0301 	orr.w	r3, r3, #1
 800ea78:	b2da      	uxtb	r2, r3
 800ea7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea7c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	d171      	bne.n	800eb68 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ea84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea86:	8b9b      	ldrh	r3, [r3, #28]
 800ea88:	3314      	adds	r3, #20
 800ea8a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ea8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ea96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea98:	685b      	ldr	r3, [r3, #4]
 800ea9a:	685b      	ldr	r3, [r3, #4]
 800ea9c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ea9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa0:	3308      	adds	r3, #8
 800eaa2:	2214      	movs	r2, #20
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eaa8:	f000 fb4e 	bl	800f148 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800eaac:	8a3b      	ldrh	r3, [r7, #16]
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7f5 fedc 	bl	800486c <lwip_htons>
 800eab4:	4603      	mov	r3, r0
 800eab6:	461a      	mov	r2, r3
 800eab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800eabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eabe:	2200      	movs	r2, #0
 800eac0:	719a      	strb	r2, [r3, #6]
 800eac2:	2200      	movs	r2, #0
 800eac4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800eac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac8:	2200      	movs	r2, #0
 800eaca:	729a      	strb	r2, [r3, #10]
 800eacc:	2200      	movs	r2, #0
 800eace:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ead0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ead6:	e00d      	b.n	800eaf4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ead8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eada:	685b      	ldr	r3, [r3, #4]
 800eadc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800eade:	2114      	movs	r1, #20
 800eae0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eae2:	f7f7 fa0d 	bl	8005f00 <pbuf_remove_header>
      pbuf_cat(p, r);
 800eae6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f7f7 fb63 	bl	80061b4 <pbuf_cat>
      r = iprh->next_pbuf;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800eaf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d1ee      	bne.n	800ead8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800eafa:	4b1e      	ldr	r3, [pc, #120]	; (800eb74 <ip4_reass+0x2b4>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d102      	bne.n	800eb0a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800eb04:	2300      	movs	r3, #0
 800eb06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb08:	e010      	b.n	800eb2c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eb0a:	4b1a      	ldr	r3, [pc, #104]	; (800eb74 <ip4_reass+0x2b4>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb10:	e007      	b.n	800eb22 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800eb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d006      	beq.n	800eb2a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d1f4      	bne.n	800eb12 <ip4_reass+0x252>
 800eb28:	e000      	b.n	800eb2c <ip4_reass+0x26c>
          break;
 800eb2a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800eb2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb30:	f7ff fd2e 	bl	800e590 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f7f7 fb03 	bl	8006140 <pbuf_clen>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800eb3e:	4b0c      	ldr	r3, [pc, #48]	; (800eb70 <ip4_reass+0x2b0>)
 800eb40:	881b      	ldrh	r3, [r3, #0]
 800eb42:	8c3a      	ldrh	r2, [r7, #32]
 800eb44:	429a      	cmp	r2, r3
 800eb46:	d906      	bls.n	800eb56 <ip4_reass+0x296>
 800eb48:	4b0b      	ldr	r3, [pc, #44]	; (800eb78 <ip4_reass+0x2b8>)
 800eb4a:	f240 229b 	movw	r2, #667	; 0x29b
 800eb4e:	490b      	ldr	r1, [pc, #44]	; (800eb7c <ip4_reass+0x2bc>)
 800eb50:	480b      	ldr	r0, [pc, #44]	; (800eb80 <ip4_reass+0x2c0>)
 800eb52:	f000 fb29 	bl	800f1a8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800eb56:	4b06      	ldr	r3, [pc, #24]	; (800eb70 <ip4_reass+0x2b0>)
 800eb58:	881a      	ldrh	r2, [r3, #0]
 800eb5a:	8c3b      	ldrh	r3, [r7, #32]
 800eb5c:	1ad3      	subs	r3, r2, r3
 800eb5e:	b29a      	uxth	r2, r3
 800eb60:	4b03      	ldr	r3, [pc, #12]	; (800eb70 <ip4_reass+0x2b0>)
 800eb62:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	e038      	b.n	800ebda <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	e036      	b.n	800ebda <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800eb6c:	bf00      	nop
 800eb6e:	e00a      	b.n	800eb86 <ip4_reass+0x2c6>
 800eb70:	20008510 	.word	0x20008510
 800eb74:	2000850c 	.word	0x2000850c
 800eb78:	08012e7c 	.word	0x08012e7c
 800eb7c:	08012fec 	.word	0x08012fec
 800eb80:	08012ec4 	.word	0x08012ec4
    goto nullreturn_ipr;
 800eb84:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800eb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d106      	bne.n	800eb9a <ip4_reass+0x2da>
 800eb8c:	4b15      	ldr	r3, [pc, #84]	; (800ebe4 <ip4_reass+0x324>)
 800eb8e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800eb92:	4915      	ldr	r1, [pc, #84]	; (800ebe8 <ip4_reass+0x328>)
 800eb94:	4815      	ldr	r0, [pc, #84]	; (800ebec <ip4_reass+0x32c>)
 800eb96:	f000 fb07 	bl	800f1a8 <iprintf>
  if (ipr->p == NULL) {
 800eb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d116      	bne.n	800ebd0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800eba2:	4b13      	ldr	r3, [pc, #76]	; (800ebf0 <ip4_reass+0x330>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	d006      	beq.n	800ebba <ip4_reass+0x2fa>
 800ebac:	4b0d      	ldr	r3, [pc, #52]	; (800ebe4 <ip4_reass+0x324>)
 800ebae:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ebb2:	4910      	ldr	r1, [pc, #64]	; (800ebf4 <ip4_reass+0x334>)
 800ebb4:	480d      	ldr	r0, [pc, #52]	; (800ebec <ip4_reass+0x32c>)
 800ebb6:	f000 faf7 	bl	800f1a8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ebba:	2100      	movs	r1, #0
 800ebbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebbe:	f7ff fce7 	bl	800e590 <ip_reass_dequeue_datagram>
 800ebc2:	e006      	b.n	800ebd2 <ip4_reass+0x312>
    goto nullreturn;
 800ebc4:	bf00      	nop
 800ebc6:	e004      	b.n	800ebd2 <ip4_reass+0x312>
    goto nullreturn;
 800ebc8:	bf00      	nop
 800ebca:	e002      	b.n	800ebd2 <ip4_reass+0x312>
      goto nullreturn;
 800ebcc:	bf00      	nop
 800ebce:	e000      	b.n	800ebd2 <ip4_reass+0x312>
  }

nullreturn:
 800ebd0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f7f7 fa2c 	bl	8006030 <pbuf_free>
  return NULL;
 800ebd8:	2300      	movs	r3, #0
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3738      	adds	r7, #56	; 0x38
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	08012e7c 	.word	0x08012e7c
 800ebe8:	08013008 	.word	0x08013008
 800ebec:	08012ec4 	.word	0x08012ec4
 800ebf0:	2000850c 	.word	0x2000850c
 800ebf4:	08013014 	.word	0x08013014

0800ebf8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ebfc:	2006      	movs	r0, #6
 800ebfe:	f7f6 fb1b 	bl	8005238 <memp_malloc>
 800ec02:	4603      	mov	r3, r0
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	bd80      	pop	{r7, pc}

0800ec08 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b082      	sub	sp, #8
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d106      	bne.n	800ec24 <ip_frag_free_pbuf_custom_ref+0x1c>
 800ec16:	4b07      	ldr	r3, [pc, #28]	; (800ec34 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ec18:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800ec1c:	4906      	ldr	r1, [pc, #24]	; (800ec38 <ip_frag_free_pbuf_custom_ref+0x30>)
 800ec1e:	4807      	ldr	r0, [pc, #28]	; (800ec3c <ip_frag_free_pbuf_custom_ref+0x34>)
 800ec20:	f000 fac2 	bl	800f1a8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ec24:	6879      	ldr	r1, [r7, #4]
 800ec26:	2006      	movs	r0, #6
 800ec28:	f7f6 fb76 	bl	8005318 <memp_free>
}
 800ec2c:	bf00      	nop
 800ec2e:	3708      	adds	r7, #8
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}
 800ec34:	08012e7c 	.word	0x08012e7c
 800ec38:	08013034 	.word	0x08013034
 800ec3c:	08012ec4 	.word	0x08012ec4

0800ec40 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b084      	sub	sp, #16
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d106      	bne.n	800ec60 <ipfrag_free_pbuf_custom+0x20>
 800ec52:	4b11      	ldr	r3, [pc, #68]	; (800ec98 <ipfrag_free_pbuf_custom+0x58>)
 800ec54:	f240 22ce 	movw	r2, #718	; 0x2ce
 800ec58:	4910      	ldr	r1, [pc, #64]	; (800ec9c <ipfrag_free_pbuf_custom+0x5c>)
 800ec5a:	4811      	ldr	r0, [pc, #68]	; (800eca0 <ipfrag_free_pbuf_custom+0x60>)
 800ec5c:	f000 faa4 	bl	800f1a8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ec60:	68fa      	ldr	r2, [r7, #12]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d006      	beq.n	800ec76 <ipfrag_free_pbuf_custom+0x36>
 800ec68:	4b0b      	ldr	r3, [pc, #44]	; (800ec98 <ipfrag_free_pbuf_custom+0x58>)
 800ec6a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ec6e:	490d      	ldr	r1, [pc, #52]	; (800eca4 <ipfrag_free_pbuf_custom+0x64>)
 800ec70:	480b      	ldr	r0, [pc, #44]	; (800eca0 <ipfrag_free_pbuf_custom+0x60>)
 800ec72:	f000 fa99 	bl	800f1a8 <iprintf>
  if (pcr->original != NULL) {
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	695b      	ldr	r3, [r3, #20]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d004      	beq.n	800ec88 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	695b      	ldr	r3, [r3, #20]
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7f7 f9d4 	bl	8006030 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ec88:	68f8      	ldr	r0, [r7, #12]
 800ec8a:	f7ff ffbd 	bl	800ec08 <ip_frag_free_pbuf_custom_ref>
}
 800ec8e:	bf00      	nop
 800ec90:	3710      	adds	r7, #16
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	08012e7c 	.word	0x08012e7c
 800ec9c:	08013040 	.word	0x08013040
 800eca0:	08012ec4 	.word	0x08012ec4
 800eca4:	0801304c 	.word	0x0801304c

0800eca8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b094      	sub	sp, #80	; 0x50
 800ecac:	af02      	add	r7, sp, #8
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ecbe:	3b14      	subs	r3, #20
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	da00      	bge.n	800ecc6 <ip4_frag+0x1e>
 800ecc4:	3307      	adds	r3, #7
 800ecc6:	10db      	asrs	r3, r3, #3
 800ecc8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ecca:	2314      	movs	r3, #20
 800eccc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ecd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecd6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ecd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	f003 030f 	and.w	r3, r3, #15
 800ece0:	b2db      	uxtb	r3, r3
 800ece2:	009b      	lsls	r3, r3, #2
 800ece4:	b2db      	uxtb	r3, r3
 800ece6:	2b14      	cmp	r3, #20
 800ece8:	d002      	beq.n	800ecf0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ecea:	f06f 0305 	mvn.w	r3, #5
 800ecee:	e110      	b.n	800ef12 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	895b      	ldrh	r3, [r3, #10]
 800ecf4:	2b13      	cmp	r3, #19
 800ecf6:	d809      	bhi.n	800ed0c <ip4_frag+0x64>
 800ecf8:	4b88      	ldr	r3, [pc, #544]	; (800ef1c <ip4_frag+0x274>)
 800ecfa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ecfe:	4988      	ldr	r1, [pc, #544]	; (800ef20 <ip4_frag+0x278>)
 800ed00:	4888      	ldr	r0, [pc, #544]	; (800ef24 <ip4_frag+0x27c>)
 800ed02:	f000 fa51 	bl	800f1a8 <iprintf>
 800ed06:	f06f 0305 	mvn.w	r3, #5
 800ed0a:	e102      	b.n	800ef12 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ed0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed0e:	88db      	ldrh	r3, [r3, #6]
 800ed10:	b29b      	uxth	r3, r3
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7f5 fdaa 	bl	800486c <lwip_htons>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ed1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ed26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ed2c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	891b      	ldrh	r3, [r3, #8]
 800ed32:	3b14      	subs	r3, #20
 800ed34:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ed38:	e0e1      	b.n	800eefe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ed3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ed3c:	00db      	lsls	r3, r3, #3
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ed44:	4293      	cmp	r3, r2
 800ed46:	bf28      	it	cs
 800ed48:	4613      	movcs	r3, r2
 800ed4a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ed4c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ed50:	2114      	movs	r1, #20
 800ed52:	200e      	movs	r0, #14
 800ed54:	f7f6 fe76 	bl	8005a44 <pbuf_alloc>
 800ed58:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800ed5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	f000 80d5 	beq.w	800ef0c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ed62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed64:	895b      	ldrh	r3, [r3, #10]
 800ed66:	2b13      	cmp	r3, #19
 800ed68:	d806      	bhi.n	800ed78 <ip4_frag+0xd0>
 800ed6a:	4b6c      	ldr	r3, [pc, #432]	; (800ef1c <ip4_frag+0x274>)
 800ed6c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800ed70:	496d      	ldr	r1, [pc, #436]	; (800ef28 <ip4_frag+0x280>)
 800ed72:	486c      	ldr	r0, [pc, #432]	; (800ef24 <ip4_frag+0x27c>)
 800ed74:	f000 fa18 	bl	800f1a8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ed78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed7a:	685b      	ldr	r3, [r3, #4]
 800ed7c:	2214      	movs	r2, #20
 800ed7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ed80:	4618      	mov	r0, r3
 800ed82:	f000 f9e1 	bl	800f148 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ed86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800ed8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ed8e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800ed92:	e064      	b.n	800ee5e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	895a      	ldrh	r2, [r3, #10]
 800ed98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ed9a:	1ad3      	subs	r3, r2, r3
 800ed9c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	895b      	ldrh	r3, [r3, #10]
 800eda2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d906      	bls.n	800edb6 <ip4_frag+0x10e>
 800eda8:	4b5c      	ldr	r3, [pc, #368]	; (800ef1c <ip4_frag+0x274>)
 800edaa:	f240 322d 	movw	r2, #813	; 0x32d
 800edae:	495f      	ldr	r1, [pc, #380]	; (800ef2c <ip4_frag+0x284>)
 800edb0:	485c      	ldr	r0, [pc, #368]	; (800ef24 <ip4_frag+0x27c>)
 800edb2:	f000 f9f9 	bl	800f1a8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800edb6:	8bfa      	ldrh	r2, [r7, #30]
 800edb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800edbc:	4293      	cmp	r3, r2
 800edbe:	bf28      	it	cs
 800edc0:	4613      	movcs	r3, r2
 800edc2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800edc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d105      	bne.n	800edda <ip4_frag+0x132>
        poff = 0;
 800edce:	2300      	movs	r3, #0
 800edd0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	60fb      	str	r3, [r7, #12]
        continue;
 800edd8:	e041      	b.n	800ee5e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800edda:	f7ff ff0d 	bl	800ebf8 <ip_frag_alloc_pbuf_custom_ref>
 800edde:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800ede0:	69bb      	ldr	r3, [r7, #24]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d103      	bne.n	800edee <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ede6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ede8:	f7f7 f922 	bl	8006030 <pbuf_free>
        goto memerr;
 800edec:	e08f      	b.n	800ef0e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800edee:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800edf4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800edf6:	4413      	add	r3, r2
 800edf8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800edfc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ee00:	9201      	str	r2, [sp, #4]
 800ee02:	9300      	str	r3, [sp, #0]
 800ee04:	4603      	mov	r3, r0
 800ee06:	2241      	movs	r2, #65	; 0x41
 800ee08:	2000      	movs	r0, #0
 800ee0a:	f7f6 ff45 	bl	8005c98 <pbuf_alloced_custom>
 800ee0e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d106      	bne.n	800ee24 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ee16:	69b8      	ldr	r0, [r7, #24]
 800ee18:	f7ff fef6 	bl	800ec08 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ee1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee1e:	f7f7 f907 	bl	8006030 <pbuf_free>
        goto memerr;
 800ee22:	e074      	b.n	800ef0e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ee24:	68f8      	ldr	r0, [r7, #12]
 800ee26:	f7f7 f9a3 	bl	8006170 <pbuf_ref>
      pcr->original = p;
 800ee2a:	69bb      	ldr	r3, [r7, #24]
 800ee2c:	68fa      	ldr	r2, [r7, #12]
 800ee2e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ee30:	69bb      	ldr	r3, [r7, #24]
 800ee32:	4a3f      	ldr	r2, [pc, #252]	; (800ef30 <ip4_frag+0x288>)
 800ee34:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ee36:	6979      	ldr	r1, [r7, #20]
 800ee38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee3a:	f7f7 f9bb 	bl	80061b4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ee3e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800ee42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ee46:	1ad3      	subs	r3, r2, r3
 800ee48:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800ee4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d004      	beq.n	800ee5e <ip4_frag+0x1b6>
        poff = 0;
 800ee54:	2300      	movs	r3, #0
 800ee56:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ee5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d196      	bne.n	800ed94 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ee66:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ee68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ee6c:	4413      	add	r3, r2
 800ee6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ee74:	f1a3 0213 	sub.w	r2, r3, #19
 800ee78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	bfcc      	ite	gt
 800ee80:	2301      	movgt	r3, #1
 800ee82:	2300      	movle	r3, #0
 800ee84:	b2db      	uxtb	r3, r3
 800ee86:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ee88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ee8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee90:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800ee92:	6a3b      	ldr	r3, [r7, #32]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d002      	beq.n	800ee9e <ip4_frag+0x1f6>
 800ee98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d003      	beq.n	800eea6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800ee9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eea0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800eea4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800eea6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7f5 fcdf 	bl	800486c <lwip_htons>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	461a      	mov	r2, r3
 800eeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800eeb6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eeb8:	3314      	adds	r3, #20
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7f5 fcd5 	bl	800486c <lwip_htons>
 800eec2:	4603      	mov	r3, r0
 800eec4:	461a      	mov	r2, r3
 800eec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800eeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eecc:	2200      	movs	r2, #0
 800eece:	729a      	strb	r2, [r3, #10]
 800eed0:	2200      	movs	r2, #0
 800eed2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	695b      	ldr	r3, [r3, #20]
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eedc:	68b8      	ldr	r0, [r7, #8]
 800eede:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800eee0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eee2:	f7f7 f8a5 	bl	8006030 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800eee6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eeea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eeec:	1ad3      	subs	r3, r2, r3
 800eeee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800eef2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800eef6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eef8:	4413      	add	r3, r2
 800eefa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800eefe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	f47f af19 	bne.w	800ed3a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	e002      	b.n	800ef12 <ip4_frag+0x26a>
      goto memerr;
 800ef0c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ef0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	3748      	adds	r7, #72	; 0x48
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}
 800ef1a:	bf00      	nop
 800ef1c:	08012e7c 	.word	0x08012e7c
 800ef20:	08013058 	.word	0x08013058
 800ef24:	08012ec4 	.word	0x08012ec4
 800ef28:	08013074 	.word	0x08013074
 800ef2c:	08013094 	.word	0x08013094
 800ef30:	0800ec41 	.word	0x0800ec41

0800ef34 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b086      	sub	sp, #24
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ef3e:	230e      	movs	r3, #14
 800ef40:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	895b      	ldrh	r3, [r3, #10]
 800ef46:	2b0e      	cmp	r3, #14
 800ef48:	d96e      	bls.n	800f028 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	7bdb      	ldrb	r3, [r3, #15]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d106      	bne.n	800ef60 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef58:	3301      	adds	r3, #1
 800ef5a:	b2da      	uxtb	r2, r3
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	685b      	ldr	r3, [r3, #4]
 800ef64:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	7b1a      	ldrb	r2, [r3, #12]
 800ef6a:	7b5b      	ldrb	r3, [r3, #13]
 800ef6c:	021b      	lsls	r3, r3, #8
 800ef6e:	4313      	orrs	r3, r2
 800ef70:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	781b      	ldrb	r3, [r3, #0]
 800ef76:	f003 0301 	and.w	r3, r3, #1
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d023      	beq.n	800efc6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	781b      	ldrb	r3, [r3, #0]
 800ef82:	2b01      	cmp	r3, #1
 800ef84:	d10f      	bne.n	800efa6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	785b      	ldrb	r3, [r3, #1]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d11b      	bne.n	800efc6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ef92:	2b5e      	cmp	r3, #94	; 0x5e
 800ef94:	d117      	bne.n	800efc6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	7b5b      	ldrb	r3, [r3, #13]
 800ef9a:	f043 0310 	orr.w	r3, r3, #16
 800ef9e:	b2da      	uxtb	r2, r3
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	735a      	strb	r2, [r3, #13]
 800efa4:	e00f      	b.n	800efc6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	2206      	movs	r2, #6
 800efaa:	4928      	ldr	r1, [pc, #160]	; (800f04c <ethernet_input+0x118>)
 800efac:	4618      	mov	r0, r3
 800efae:	f000 f8bb 	bl	800f128 <memcmp>
 800efb2:	4603      	mov	r3, r0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d106      	bne.n	800efc6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	7b5b      	ldrb	r3, [r3, #13]
 800efbc:	f043 0308 	orr.w	r3, r3, #8
 800efc0:	b2da      	uxtb	r2, r3
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800efc6:	89fb      	ldrh	r3, [r7, #14]
 800efc8:	2b08      	cmp	r3, #8
 800efca:	d003      	beq.n	800efd4 <ethernet_input+0xa0>
 800efcc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800efd0:	d014      	beq.n	800effc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800efd2:	e032      	b.n	800f03a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800efda:	f003 0308 	and.w	r3, r3, #8
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d024      	beq.n	800f02c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800efe2:	8afb      	ldrh	r3, [r7, #22]
 800efe4:	4619      	mov	r1, r3
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f7f6 ff8a 	bl	8005f00 <pbuf_remove_header>
 800efec:	4603      	mov	r3, r0
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d11e      	bne.n	800f030 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800eff2:	6839      	ldr	r1, [r7, #0]
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f7fe fe85 	bl	800dd04 <ip4_input>
      break;
 800effa:	e013      	b.n	800f024 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f002:	f003 0308 	and.w	r3, r3, #8
 800f006:	2b00      	cmp	r3, #0
 800f008:	d014      	beq.n	800f034 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f00a:	8afb      	ldrh	r3, [r7, #22]
 800f00c:	4619      	mov	r1, r3
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f7f6 ff76 	bl	8005f00 <pbuf_remove_header>
 800f014:	4603      	mov	r3, r0
 800f016:	2b00      	cmp	r3, #0
 800f018:	d10e      	bne.n	800f038 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f01a:	6839      	ldr	r1, [r7, #0]
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f7fe f825 	bl	800d06c <etharp_input>
      break;
 800f022:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f024:	2300      	movs	r3, #0
 800f026:	e00c      	b.n	800f042 <ethernet_input+0x10e>
    goto free_and_return;
 800f028:	bf00      	nop
 800f02a:	e006      	b.n	800f03a <ethernet_input+0x106>
        goto free_and_return;
 800f02c:	bf00      	nop
 800f02e:	e004      	b.n	800f03a <ethernet_input+0x106>
        goto free_and_return;
 800f030:	bf00      	nop
 800f032:	e002      	b.n	800f03a <ethernet_input+0x106>
        goto free_and_return;
 800f034:	bf00      	nop
 800f036:	e000      	b.n	800f03a <ethernet_input+0x106>
        goto free_and_return;
 800f038:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f7f6 fff8 	bl	8006030 <pbuf_free>
  return ERR_OK;
 800f040:	2300      	movs	r3, #0
}
 800f042:	4618      	mov	r0, r3
 800f044:	3718      	adds	r7, #24
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	08013238 	.word	0x08013238

0800f050 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f050:	b580      	push	{r7, lr}
 800f052:	b086      	sub	sp, #24
 800f054:	af00      	add	r7, sp, #0
 800f056:	60f8      	str	r0, [r7, #12]
 800f058:	60b9      	str	r1, [r7, #8]
 800f05a:	607a      	str	r2, [r7, #4]
 800f05c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f05e:	8c3b      	ldrh	r3, [r7, #32]
 800f060:	4618      	mov	r0, r3
 800f062:	f7f5 fc03 	bl	800486c <lwip_htons>
 800f066:	4603      	mov	r3, r0
 800f068:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f06a:	210e      	movs	r1, #14
 800f06c:	68b8      	ldr	r0, [r7, #8]
 800f06e:	f7f6 ff37 	bl	8005ee0 <pbuf_add_header>
 800f072:	4603      	mov	r3, r0
 800f074:	2b00      	cmp	r3, #0
 800f076:	d125      	bne.n	800f0c4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	685b      	ldr	r3, [r3, #4]
 800f07c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	8afa      	ldrh	r2, [r7, #22]
 800f082:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	2206      	movs	r2, #6
 800f088:	6839      	ldr	r1, [r7, #0]
 800f08a:	4618      	mov	r0, r3
 800f08c:	f000 f85c 	bl	800f148 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	3306      	adds	r3, #6
 800f094:	2206      	movs	r2, #6
 800f096:	6879      	ldr	r1, [r7, #4]
 800f098:	4618      	mov	r0, r3
 800f09a:	f000 f855 	bl	800f148 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f0a4:	2b06      	cmp	r3, #6
 800f0a6:	d006      	beq.n	800f0b6 <ethernet_output+0x66>
 800f0a8:	4b0a      	ldr	r3, [pc, #40]	; (800f0d4 <ethernet_output+0x84>)
 800f0aa:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f0ae:	490a      	ldr	r1, [pc, #40]	; (800f0d8 <ethernet_output+0x88>)
 800f0b0:	480a      	ldr	r0, [pc, #40]	; (800f0dc <ethernet_output+0x8c>)
 800f0b2:	f000 f879 	bl	800f1a8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	699b      	ldr	r3, [r3, #24]
 800f0ba:	68b9      	ldr	r1, [r7, #8]
 800f0bc:	68f8      	ldr	r0, [r7, #12]
 800f0be:	4798      	blx	r3
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	e002      	b.n	800f0ca <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f0c4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f0c6:	f06f 0301 	mvn.w	r3, #1
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3718      	adds	r7, #24
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	080130a4 	.word	0x080130a4
 800f0d8:	080130dc 	.word	0x080130dc
 800f0dc:	08013110 	.word	0x08013110

0800f0e0 <__libc_init_array>:
 800f0e0:	b570      	push	{r4, r5, r6, lr}
 800f0e2:	4d0d      	ldr	r5, [pc, #52]	; (800f118 <__libc_init_array+0x38>)
 800f0e4:	4c0d      	ldr	r4, [pc, #52]	; (800f11c <__libc_init_array+0x3c>)
 800f0e6:	1b64      	subs	r4, r4, r5
 800f0e8:	10a4      	asrs	r4, r4, #2
 800f0ea:	2600      	movs	r6, #0
 800f0ec:	42a6      	cmp	r6, r4
 800f0ee:	d109      	bne.n	800f104 <__libc_init_array+0x24>
 800f0f0:	4d0b      	ldr	r5, [pc, #44]	; (800f120 <__libc_init_array+0x40>)
 800f0f2:	4c0c      	ldr	r4, [pc, #48]	; (800f124 <__libc_init_array+0x44>)
 800f0f4:	f001 fa70 	bl	80105d8 <_init>
 800f0f8:	1b64      	subs	r4, r4, r5
 800f0fa:	10a4      	asrs	r4, r4, #2
 800f0fc:	2600      	movs	r6, #0
 800f0fe:	42a6      	cmp	r6, r4
 800f100:	d105      	bne.n	800f10e <__libc_init_array+0x2e>
 800f102:	bd70      	pop	{r4, r5, r6, pc}
 800f104:	f855 3b04 	ldr.w	r3, [r5], #4
 800f108:	4798      	blx	r3
 800f10a:	3601      	adds	r6, #1
 800f10c:	e7ee      	b.n	800f0ec <__libc_init_array+0xc>
 800f10e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f112:	4798      	blx	r3
 800f114:	3601      	adds	r6, #1
 800f116:	e7f2      	b.n	800f0fe <__libc_init_array+0x1e>
 800f118:	08013398 	.word	0x08013398
 800f11c:	08013398 	.word	0x08013398
 800f120:	08013398 	.word	0x08013398
 800f124:	0801339c 	.word	0x0801339c

0800f128 <memcmp>:
 800f128:	b510      	push	{r4, lr}
 800f12a:	3901      	subs	r1, #1
 800f12c:	4402      	add	r2, r0
 800f12e:	4290      	cmp	r0, r2
 800f130:	d101      	bne.n	800f136 <memcmp+0xe>
 800f132:	2000      	movs	r0, #0
 800f134:	e005      	b.n	800f142 <memcmp+0x1a>
 800f136:	7803      	ldrb	r3, [r0, #0]
 800f138:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f13c:	42a3      	cmp	r3, r4
 800f13e:	d001      	beq.n	800f144 <memcmp+0x1c>
 800f140:	1b18      	subs	r0, r3, r4
 800f142:	bd10      	pop	{r4, pc}
 800f144:	3001      	adds	r0, #1
 800f146:	e7f2      	b.n	800f12e <memcmp+0x6>

0800f148 <memcpy>:
 800f148:	440a      	add	r2, r1
 800f14a:	4291      	cmp	r1, r2
 800f14c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f150:	d100      	bne.n	800f154 <memcpy+0xc>
 800f152:	4770      	bx	lr
 800f154:	b510      	push	{r4, lr}
 800f156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f15a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f15e:	4291      	cmp	r1, r2
 800f160:	d1f9      	bne.n	800f156 <memcpy+0xe>
 800f162:	bd10      	pop	{r4, pc}

0800f164 <memmove>:
 800f164:	4288      	cmp	r0, r1
 800f166:	b510      	push	{r4, lr}
 800f168:	eb01 0402 	add.w	r4, r1, r2
 800f16c:	d902      	bls.n	800f174 <memmove+0x10>
 800f16e:	4284      	cmp	r4, r0
 800f170:	4623      	mov	r3, r4
 800f172:	d807      	bhi.n	800f184 <memmove+0x20>
 800f174:	1e43      	subs	r3, r0, #1
 800f176:	42a1      	cmp	r1, r4
 800f178:	d008      	beq.n	800f18c <memmove+0x28>
 800f17a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f17e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f182:	e7f8      	b.n	800f176 <memmove+0x12>
 800f184:	4402      	add	r2, r0
 800f186:	4601      	mov	r1, r0
 800f188:	428a      	cmp	r2, r1
 800f18a:	d100      	bne.n	800f18e <memmove+0x2a>
 800f18c:	bd10      	pop	{r4, pc}
 800f18e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f192:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f196:	e7f7      	b.n	800f188 <memmove+0x24>

0800f198 <memset>:
 800f198:	4402      	add	r2, r0
 800f19a:	4603      	mov	r3, r0
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d100      	bne.n	800f1a2 <memset+0xa>
 800f1a0:	4770      	bx	lr
 800f1a2:	f803 1b01 	strb.w	r1, [r3], #1
 800f1a6:	e7f9      	b.n	800f19c <memset+0x4>

0800f1a8 <iprintf>:
 800f1a8:	b40f      	push	{r0, r1, r2, r3}
 800f1aa:	4b0a      	ldr	r3, [pc, #40]	; (800f1d4 <iprintf+0x2c>)
 800f1ac:	b513      	push	{r0, r1, r4, lr}
 800f1ae:	681c      	ldr	r4, [r3, #0]
 800f1b0:	b124      	cbz	r4, 800f1bc <iprintf+0x14>
 800f1b2:	69a3      	ldr	r3, [r4, #24]
 800f1b4:	b913      	cbnz	r3, 800f1bc <iprintf+0x14>
 800f1b6:	4620      	mov	r0, r4
 800f1b8:	f000 f8f6 	bl	800f3a8 <__sinit>
 800f1bc:	ab05      	add	r3, sp, #20
 800f1be:	9a04      	ldr	r2, [sp, #16]
 800f1c0:	68a1      	ldr	r1, [r4, #8]
 800f1c2:	9301      	str	r3, [sp, #4]
 800f1c4:	4620      	mov	r0, r4
 800f1c6:	f000 fc0f 	bl	800f9e8 <_vfiprintf_r>
 800f1ca:	b002      	add	sp, #8
 800f1cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1d0:	b004      	add	sp, #16
 800f1d2:	4770      	bx	lr
 800f1d4:	2000002c 	.word	0x2000002c

0800f1d8 <rand>:
 800f1d8:	4b16      	ldr	r3, [pc, #88]	; (800f234 <rand+0x5c>)
 800f1da:	b510      	push	{r4, lr}
 800f1dc:	681c      	ldr	r4, [r3, #0]
 800f1de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f1e0:	b9b3      	cbnz	r3, 800f210 <rand+0x38>
 800f1e2:	2018      	movs	r0, #24
 800f1e4:	f000 f992 	bl	800f50c <malloc>
 800f1e8:	63a0      	str	r0, [r4, #56]	; 0x38
 800f1ea:	b928      	cbnz	r0, 800f1f8 <rand+0x20>
 800f1ec:	4602      	mov	r2, r0
 800f1ee:	4b12      	ldr	r3, [pc, #72]	; (800f238 <rand+0x60>)
 800f1f0:	4812      	ldr	r0, [pc, #72]	; (800f23c <rand+0x64>)
 800f1f2:	214e      	movs	r1, #78	; 0x4e
 800f1f4:	f000 f862 	bl	800f2bc <__assert_func>
 800f1f8:	4a11      	ldr	r2, [pc, #68]	; (800f240 <rand+0x68>)
 800f1fa:	4b12      	ldr	r3, [pc, #72]	; (800f244 <rand+0x6c>)
 800f1fc:	e9c0 2300 	strd	r2, r3, [r0]
 800f200:	4b11      	ldr	r3, [pc, #68]	; (800f248 <rand+0x70>)
 800f202:	6083      	str	r3, [r0, #8]
 800f204:	230b      	movs	r3, #11
 800f206:	8183      	strh	r3, [r0, #12]
 800f208:	2201      	movs	r2, #1
 800f20a:	2300      	movs	r3, #0
 800f20c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f210:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800f212:	4a0e      	ldr	r2, [pc, #56]	; (800f24c <rand+0x74>)
 800f214:	6920      	ldr	r0, [r4, #16]
 800f216:	6963      	ldr	r3, [r4, #20]
 800f218:	490d      	ldr	r1, [pc, #52]	; (800f250 <rand+0x78>)
 800f21a:	4342      	muls	r2, r0
 800f21c:	fb01 2203 	mla	r2, r1, r3, r2
 800f220:	fba0 0101 	umull	r0, r1, r0, r1
 800f224:	1c43      	adds	r3, r0, #1
 800f226:	eb42 0001 	adc.w	r0, r2, r1
 800f22a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800f22e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f232:	bd10      	pop	{r4, pc}
 800f234:	2000002c 	.word	0x2000002c
 800f238:	0801324c 	.word	0x0801324c
 800f23c:	08013263 	.word	0x08013263
 800f240:	abcd330e 	.word	0xabcd330e
 800f244:	e66d1234 	.word	0xe66d1234
 800f248:	0005deec 	.word	0x0005deec
 800f24c:	5851f42d 	.word	0x5851f42d
 800f250:	4c957f2d 	.word	0x4c957f2d

0800f254 <siprintf>:
 800f254:	b40e      	push	{r1, r2, r3}
 800f256:	b500      	push	{lr}
 800f258:	b09c      	sub	sp, #112	; 0x70
 800f25a:	ab1d      	add	r3, sp, #116	; 0x74
 800f25c:	9002      	str	r0, [sp, #8]
 800f25e:	9006      	str	r0, [sp, #24]
 800f260:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f264:	4809      	ldr	r0, [pc, #36]	; (800f28c <siprintf+0x38>)
 800f266:	9107      	str	r1, [sp, #28]
 800f268:	9104      	str	r1, [sp, #16]
 800f26a:	4909      	ldr	r1, [pc, #36]	; (800f290 <siprintf+0x3c>)
 800f26c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f270:	9105      	str	r1, [sp, #20]
 800f272:	6800      	ldr	r0, [r0, #0]
 800f274:	9301      	str	r3, [sp, #4]
 800f276:	a902      	add	r1, sp, #8
 800f278:	f000 fa8c 	bl	800f794 <_svfiprintf_r>
 800f27c:	9b02      	ldr	r3, [sp, #8]
 800f27e:	2200      	movs	r2, #0
 800f280:	701a      	strb	r2, [r3, #0]
 800f282:	b01c      	add	sp, #112	; 0x70
 800f284:	f85d eb04 	ldr.w	lr, [sp], #4
 800f288:	b003      	add	sp, #12
 800f28a:	4770      	bx	lr
 800f28c:	2000002c 	.word	0x2000002c
 800f290:	ffff0208 	.word	0xffff0208

0800f294 <strncpy>:
 800f294:	b510      	push	{r4, lr}
 800f296:	3901      	subs	r1, #1
 800f298:	4603      	mov	r3, r0
 800f29a:	b132      	cbz	r2, 800f2aa <strncpy+0x16>
 800f29c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f2a0:	f803 4b01 	strb.w	r4, [r3], #1
 800f2a4:	3a01      	subs	r2, #1
 800f2a6:	2c00      	cmp	r4, #0
 800f2a8:	d1f7      	bne.n	800f29a <strncpy+0x6>
 800f2aa:	441a      	add	r2, r3
 800f2ac:	2100      	movs	r1, #0
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	d100      	bne.n	800f2b4 <strncpy+0x20>
 800f2b2:	bd10      	pop	{r4, pc}
 800f2b4:	f803 1b01 	strb.w	r1, [r3], #1
 800f2b8:	e7f9      	b.n	800f2ae <strncpy+0x1a>
	...

0800f2bc <__assert_func>:
 800f2bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f2be:	4614      	mov	r4, r2
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	4b09      	ldr	r3, [pc, #36]	; (800f2e8 <__assert_func+0x2c>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	4605      	mov	r5, r0
 800f2c8:	68d8      	ldr	r0, [r3, #12]
 800f2ca:	b14c      	cbz	r4, 800f2e0 <__assert_func+0x24>
 800f2cc:	4b07      	ldr	r3, [pc, #28]	; (800f2ec <__assert_func+0x30>)
 800f2ce:	9100      	str	r1, [sp, #0]
 800f2d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f2d4:	4906      	ldr	r1, [pc, #24]	; (800f2f0 <__assert_func+0x34>)
 800f2d6:	462b      	mov	r3, r5
 800f2d8:	f000 f8e4 	bl	800f4a4 <fiprintf>
 800f2dc:	f000 ff6e 	bl	80101bc <abort>
 800f2e0:	4b04      	ldr	r3, [pc, #16]	; (800f2f4 <__assert_func+0x38>)
 800f2e2:	461c      	mov	r4, r3
 800f2e4:	e7f3      	b.n	800f2ce <__assert_func+0x12>
 800f2e6:	bf00      	nop
 800f2e8:	2000002c 	.word	0x2000002c
 800f2ec:	080132be 	.word	0x080132be
 800f2f0:	080132cb 	.word	0x080132cb
 800f2f4:	080132f9 	.word	0x080132f9

0800f2f8 <std>:
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	b510      	push	{r4, lr}
 800f2fc:	4604      	mov	r4, r0
 800f2fe:	e9c0 3300 	strd	r3, r3, [r0]
 800f302:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f306:	6083      	str	r3, [r0, #8]
 800f308:	8181      	strh	r1, [r0, #12]
 800f30a:	6643      	str	r3, [r0, #100]	; 0x64
 800f30c:	81c2      	strh	r2, [r0, #14]
 800f30e:	6183      	str	r3, [r0, #24]
 800f310:	4619      	mov	r1, r3
 800f312:	2208      	movs	r2, #8
 800f314:	305c      	adds	r0, #92	; 0x5c
 800f316:	f7ff ff3f 	bl	800f198 <memset>
 800f31a:	4b05      	ldr	r3, [pc, #20]	; (800f330 <std+0x38>)
 800f31c:	6263      	str	r3, [r4, #36]	; 0x24
 800f31e:	4b05      	ldr	r3, [pc, #20]	; (800f334 <std+0x3c>)
 800f320:	62a3      	str	r3, [r4, #40]	; 0x28
 800f322:	4b05      	ldr	r3, [pc, #20]	; (800f338 <std+0x40>)
 800f324:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f326:	4b05      	ldr	r3, [pc, #20]	; (800f33c <std+0x44>)
 800f328:	6224      	str	r4, [r4, #32]
 800f32a:	6323      	str	r3, [r4, #48]	; 0x30
 800f32c:	bd10      	pop	{r4, pc}
 800f32e:	bf00      	nop
 800f330:	0800ff91 	.word	0x0800ff91
 800f334:	0800ffb3 	.word	0x0800ffb3
 800f338:	0800ffeb 	.word	0x0800ffeb
 800f33c:	0801000f 	.word	0x0801000f

0800f340 <_cleanup_r>:
 800f340:	4901      	ldr	r1, [pc, #4]	; (800f348 <_cleanup_r+0x8>)
 800f342:	f000 b8c1 	b.w	800f4c8 <_fwalk_reent>
 800f346:	bf00      	nop
 800f348:	080102f9 	.word	0x080102f9

0800f34c <__sfmoreglue>:
 800f34c:	b570      	push	{r4, r5, r6, lr}
 800f34e:	2268      	movs	r2, #104	; 0x68
 800f350:	1e4d      	subs	r5, r1, #1
 800f352:	4355      	muls	r5, r2
 800f354:	460e      	mov	r6, r1
 800f356:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f35a:	f000 f94b 	bl	800f5f4 <_malloc_r>
 800f35e:	4604      	mov	r4, r0
 800f360:	b140      	cbz	r0, 800f374 <__sfmoreglue+0x28>
 800f362:	2100      	movs	r1, #0
 800f364:	e9c0 1600 	strd	r1, r6, [r0]
 800f368:	300c      	adds	r0, #12
 800f36a:	60a0      	str	r0, [r4, #8]
 800f36c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f370:	f7ff ff12 	bl	800f198 <memset>
 800f374:	4620      	mov	r0, r4
 800f376:	bd70      	pop	{r4, r5, r6, pc}

0800f378 <__sfp_lock_acquire>:
 800f378:	4801      	ldr	r0, [pc, #4]	; (800f380 <__sfp_lock_acquire+0x8>)
 800f37a:	f000 b8c5 	b.w	800f508 <__retarget_lock_acquire_recursive>
 800f37e:	bf00      	nop
 800f380:	20008519 	.word	0x20008519

0800f384 <__sfp_lock_release>:
 800f384:	4801      	ldr	r0, [pc, #4]	; (800f38c <__sfp_lock_release+0x8>)
 800f386:	f000 b8c0 	b.w	800f50a <__retarget_lock_release_recursive>
 800f38a:	bf00      	nop
 800f38c:	20008519 	.word	0x20008519

0800f390 <__sinit_lock_acquire>:
 800f390:	4801      	ldr	r0, [pc, #4]	; (800f398 <__sinit_lock_acquire+0x8>)
 800f392:	f000 b8b9 	b.w	800f508 <__retarget_lock_acquire_recursive>
 800f396:	bf00      	nop
 800f398:	2000851a 	.word	0x2000851a

0800f39c <__sinit_lock_release>:
 800f39c:	4801      	ldr	r0, [pc, #4]	; (800f3a4 <__sinit_lock_release+0x8>)
 800f39e:	f000 b8b4 	b.w	800f50a <__retarget_lock_release_recursive>
 800f3a2:	bf00      	nop
 800f3a4:	2000851a 	.word	0x2000851a

0800f3a8 <__sinit>:
 800f3a8:	b510      	push	{r4, lr}
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	f7ff fff0 	bl	800f390 <__sinit_lock_acquire>
 800f3b0:	69a3      	ldr	r3, [r4, #24]
 800f3b2:	b11b      	cbz	r3, 800f3bc <__sinit+0x14>
 800f3b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3b8:	f7ff bff0 	b.w	800f39c <__sinit_lock_release>
 800f3bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f3c0:	6523      	str	r3, [r4, #80]	; 0x50
 800f3c2:	4b13      	ldr	r3, [pc, #76]	; (800f410 <__sinit+0x68>)
 800f3c4:	4a13      	ldr	r2, [pc, #76]	; (800f414 <__sinit+0x6c>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800f3ca:	42a3      	cmp	r3, r4
 800f3cc:	bf04      	itt	eq
 800f3ce:	2301      	moveq	r3, #1
 800f3d0:	61a3      	streq	r3, [r4, #24]
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	f000 f820 	bl	800f418 <__sfp>
 800f3d8:	6060      	str	r0, [r4, #4]
 800f3da:	4620      	mov	r0, r4
 800f3dc:	f000 f81c 	bl	800f418 <__sfp>
 800f3e0:	60a0      	str	r0, [r4, #8]
 800f3e2:	4620      	mov	r0, r4
 800f3e4:	f000 f818 	bl	800f418 <__sfp>
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	60e0      	str	r0, [r4, #12]
 800f3ec:	2104      	movs	r1, #4
 800f3ee:	6860      	ldr	r0, [r4, #4]
 800f3f0:	f7ff ff82 	bl	800f2f8 <std>
 800f3f4:	68a0      	ldr	r0, [r4, #8]
 800f3f6:	2201      	movs	r2, #1
 800f3f8:	2109      	movs	r1, #9
 800f3fa:	f7ff ff7d 	bl	800f2f8 <std>
 800f3fe:	68e0      	ldr	r0, [r4, #12]
 800f400:	2202      	movs	r2, #2
 800f402:	2112      	movs	r1, #18
 800f404:	f7ff ff78 	bl	800f2f8 <std>
 800f408:	2301      	movs	r3, #1
 800f40a:	61a3      	str	r3, [r4, #24]
 800f40c:	e7d2      	b.n	800f3b4 <__sinit+0xc>
 800f40e:	bf00      	nop
 800f410:	08013248 	.word	0x08013248
 800f414:	0800f341 	.word	0x0800f341

0800f418 <__sfp>:
 800f418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f41a:	4607      	mov	r7, r0
 800f41c:	f7ff ffac 	bl	800f378 <__sfp_lock_acquire>
 800f420:	4b1e      	ldr	r3, [pc, #120]	; (800f49c <__sfp+0x84>)
 800f422:	681e      	ldr	r6, [r3, #0]
 800f424:	69b3      	ldr	r3, [r6, #24]
 800f426:	b913      	cbnz	r3, 800f42e <__sfp+0x16>
 800f428:	4630      	mov	r0, r6
 800f42a:	f7ff ffbd 	bl	800f3a8 <__sinit>
 800f42e:	3648      	adds	r6, #72	; 0x48
 800f430:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f434:	3b01      	subs	r3, #1
 800f436:	d503      	bpl.n	800f440 <__sfp+0x28>
 800f438:	6833      	ldr	r3, [r6, #0]
 800f43a:	b30b      	cbz	r3, 800f480 <__sfp+0x68>
 800f43c:	6836      	ldr	r6, [r6, #0]
 800f43e:	e7f7      	b.n	800f430 <__sfp+0x18>
 800f440:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f444:	b9d5      	cbnz	r5, 800f47c <__sfp+0x64>
 800f446:	4b16      	ldr	r3, [pc, #88]	; (800f4a0 <__sfp+0x88>)
 800f448:	60e3      	str	r3, [r4, #12]
 800f44a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f44e:	6665      	str	r5, [r4, #100]	; 0x64
 800f450:	f000 f859 	bl	800f506 <__retarget_lock_init_recursive>
 800f454:	f7ff ff96 	bl	800f384 <__sfp_lock_release>
 800f458:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f45c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f460:	6025      	str	r5, [r4, #0]
 800f462:	61a5      	str	r5, [r4, #24]
 800f464:	2208      	movs	r2, #8
 800f466:	4629      	mov	r1, r5
 800f468:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f46c:	f7ff fe94 	bl	800f198 <memset>
 800f470:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f474:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f478:	4620      	mov	r0, r4
 800f47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f47c:	3468      	adds	r4, #104	; 0x68
 800f47e:	e7d9      	b.n	800f434 <__sfp+0x1c>
 800f480:	2104      	movs	r1, #4
 800f482:	4638      	mov	r0, r7
 800f484:	f7ff ff62 	bl	800f34c <__sfmoreglue>
 800f488:	4604      	mov	r4, r0
 800f48a:	6030      	str	r0, [r6, #0]
 800f48c:	2800      	cmp	r0, #0
 800f48e:	d1d5      	bne.n	800f43c <__sfp+0x24>
 800f490:	f7ff ff78 	bl	800f384 <__sfp_lock_release>
 800f494:	230c      	movs	r3, #12
 800f496:	603b      	str	r3, [r7, #0]
 800f498:	e7ee      	b.n	800f478 <__sfp+0x60>
 800f49a:	bf00      	nop
 800f49c:	08013248 	.word	0x08013248
 800f4a0:	ffff0001 	.word	0xffff0001

0800f4a4 <fiprintf>:
 800f4a4:	b40e      	push	{r1, r2, r3}
 800f4a6:	b503      	push	{r0, r1, lr}
 800f4a8:	4601      	mov	r1, r0
 800f4aa:	ab03      	add	r3, sp, #12
 800f4ac:	4805      	ldr	r0, [pc, #20]	; (800f4c4 <fiprintf+0x20>)
 800f4ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4b2:	6800      	ldr	r0, [r0, #0]
 800f4b4:	9301      	str	r3, [sp, #4]
 800f4b6:	f000 fa97 	bl	800f9e8 <_vfiprintf_r>
 800f4ba:	b002      	add	sp, #8
 800f4bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4c0:	b003      	add	sp, #12
 800f4c2:	4770      	bx	lr
 800f4c4:	2000002c 	.word	0x2000002c

0800f4c8 <_fwalk_reent>:
 800f4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4cc:	4606      	mov	r6, r0
 800f4ce:	4688      	mov	r8, r1
 800f4d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f4d4:	2700      	movs	r7, #0
 800f4d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f4da:	f1b9 0901 	subs.w	r9, r9, #1
 800f4de:	d505      	bpl.n	800f4ec <_fwalk_reent+0x24>
 800f4e0:	6824      	ldr	r4, [r4, #0]
 800f4e2:	2c00      	cmp	r4, #0
 800f4e4:	d1f7      	bne.n	800f4d6 <_fwalk_reent+0xe>
 800f4e6:	4638      	mov	r0, r7
 800f4e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4ec:	89ab      	ldrh	r3, [r5, #12]
 800f4ee:	2b01      	cmp	r3, #1
 800f4f0:	d907      	bls.n	800f502 <_fwalk_reent+0x3a>
 800f4f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f4f6:	3301      	adds	r3, #1
 800f4f8:	d003      	beq.n	800f502 <_fwalk_reent+0x3a>
 800f4fa:	4629      	mov	r1, r5
 800f4fc:	4630      	mov	r0, r6
 800f4fe:	47c0      	blx	r8
 800f500:	4307      	orrs	r7, r0
 800f502:	3568      	adds	r5, #104	; 0x68
 800f504:	e7e9      	b.n	800f4da <_fwalk_reent+0x12>

0800f506 <__retarget_lock_init_recursive>:
 800f506:	4770      	bx	lr

0800f508 <__retarget_lock_acquire_recursive>:
 800f508:	4770      	bx	lr

0800f50a <__retarget_lock_release_recursive>:
 800f50a:	4770      	bx	lr

0800f50c <malloc>:
 800f50c:	4b02      	ldr	r3, [pc, #8]	; (800f518 <malloc+0xc>)
 800f50e:	4601      	mov	r1, r0
 800f510:	6818      	ldr	r0, [r3, #0]
 800f512:	f000 b86f 	b.w	800f5f4 <_malloc_r>
 800f516:	bf00      	nop
 800f518:	2000002c 	.word	0x2000002c

0800f51c <_free_r>:
 800f51c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f51e:	2900      	cmp	r1, #0
 800f520:	d044      	beq.n	800f5ac <_free_r+0x90>
 800f522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f526:	9001      	str	r0, [sp, #4]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	f1a1 0404 	sub.w	r4, r1, #4
 800f52e:	bfb8      	it	lt
 800f530:	18e4      	addlt	r4, r4, r3
 800f532:	f000 ff95 	bl	8010460 <__malloc_lock>
 800f536:	4a1e      	ldr	r2, [pc, #120]	; (800f5b0 <_free_r+0x94>)
 800f538:	9801      	ldr	r0, [sp, #4]
 800f53a:	6813      	ldr	r3, [r2, #0]
 800f53c:	b933      	cbnz	r3, 800f54c <_free_r+0x30>
 800f53e:	6063      	str	r3, [r4, #4]
 800f540:	6014      	str	r4, [r2, #0]
 800f542:	b003      	add	sp, #12
 800f544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f548:	f000 bf90 	b.w	801046c <__malloc_unlock>
 800f54c:	42a3      	cmp	r3, r4
 800f54e:	d908      	bls.n	800f562 <_free_r+0x46>
 800f550:	6825      	ldr	r5, [r4, #0]
 800f552:	1961      	adds	r1, r4, r5
 800f554:	428b      	cmp	r3, r1
 800f556:	bf01      	itttt	eq
 800f558:	6819      	ldreq	r1, [r3, #0]
 800f55a:	685b      	ldreq	r3, [r3, #4]
 800f55c:	1949      	addeq	r1, r1, r5
 800f55e:	6021      	streq	r1, [r4, #0]
 800f560:	e7ed      	b.n	800f53e <_free_r+0x22>
 800f562:	461a      	mov	r2, r3
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	b10b      	cbz	r3, 800f56c <_free_r+0x50>
 800f568:	42a3      	cmp	r3, r4
 800f56a:	d9fa      	bls.n	800f562 <_free_r+0x46>
 800f56c:	6811      	ldr	r1, [r2, #0]
 800f56e:	1855      	adds	r5, r2, r1
 800f570:	42a5      	cmp	r5, r4
 800f572:	d10b      	bne.n	800f58c <_free_r+0x70>
 800f574:	6824      	ldr	r4, [r4, #0]
 800f576:	4421      	add	r1, r4
 800f578:	1854      	adds	r4, r2, r1
 800f57a:	42a3      	cmp	r3, r4
 800f57c:	6011      	str	r1, [r2, #0]
 800f57e:	d1e0      	bne.n	800f542 <_free_r+0x26>
 800f580:	681c      	ldr	r4, [r3, #0]
 800f582:	685b      	ldr	r3, [r3, #4]
 800f584:	6053      	str	r3, [r2, #4]
 800f586:	4421      	add	r1, r4
 800f588:	6011      	str	r1, [r2, #0]
 800f58a:	e7da      	b.n	800f542 <_free_r+0x26>
 800f58c:	d902      	bls.n	800f594 <_free_r+0x78>
 800f58e:	230c      	movs	r3, #12
 800f590:	6003      	str	r3, [r0, #0]
 800f592:	e7d6      	b.n	800f542 <_free_r+0x26>
 800f594:	6825      	ldr	r5, [r4, #0]
 800f596:	1961      	adds	r1, r4, r5
 800f598:	428b      	cmp	r3, r1
 800f59a:	bf04      	itt	eq
 800f59c:	6819      	ldreq	r1, [r3, #0]
 800f59e:	685b      	ldreq	r3, [r3, #4]
 800f5a0:	6063      	str	r3, [r4, #4]
 800f5a2:	bf04      	itt	eq
 800f5a4:	1949      	addeq	r1, r1, r5
 800f5a6:	6021      	streq	r1, [r4, #0]
 800f5a8:	6054      	str	r4, [r2, #4]
 800f5aa:	e7ca      	b.n	800f542 <_free_r+0x26>
 800f5ac:	b003      	add	sp, #12
 800f5ae:	bd30      	pop	{r4, r5, pc}
 800f5b0:	2000851c 	.word	0x2000851c

0800f5b4 <sbrk_aligned>:
 800f5b4:	b570      	push	{r4, r5, r6, lr}
 800f5b6:	4e0e      	ldr	r6, [pc, #56]	; (800f5f0 <sbrk_aligned+0x3c>)
 800f5b8:	460c      	mov	r4, r1
 800f5ba:	6831      	ldr	r1, [r6, #0]
 800f5bc:	4605      	mov	r5, r0
 800f5be:	b911      	cbnz	r1, 800f5c6 <sbrk_aligned+0x12>
 800f5c0:	f000 fcd6 	bl	800ff70 <_sbrk_r>
 800f5c4:	6030      	str	r0, [r6, #0]
 800f5c6:	4621      	mov	r1, r4
 800f5c8:	4628      	mov	r0, r5
 800f5ca:	f000 fcd1 	bl	800ff70 <_sbrk_r>
 800f5ce:	1c43      	adds	r3, r0, #1
 800f5d0:	d00a      	beq.n	800f5e8 <sbrk_aligned+0x34>
 800f5d2:	1cc4      	adds	r4, r0, #3
 800f5d4:	f024 0403 	bic.w	r4, r4, #3
 800f5d8:	42a0      	cmp	r0, r4
 800f5da:	d007      	beq.n	800f5ec <sbrk_aligned+0x38>
 800f5dc:	1a21      	subs	r1, r4, r0
 800f5de:	4628      	mov	r0, r5
 800f5e0:	f000 fcc6 	bl	800ff70 <_sbrk_r>
 800f5e4:	3001      	adds	r0, #1
 800f5e6:	d101      	bne.n	800f5ec <sbrk_aligned+0x38>
 800f5e8:	f04f 34ff 	mov.w	r4, #4294967295
 800f5ec:	4620      	mov	r0, r4
 800f5ee:	bd70      	pop	{r4, r5, r6, pc}
 800f5f0:	20008520 	.word	0x20008520

0800f5f4 <_malloc_r>:
 800f5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5f8:	1ccd      	adds	r5, r1, #3
 800f5fa:	f025 0503 	bic.w	r5, r5, #3
 800f5fe:	3508      	adds	r5, #8
 800f600:	2d0c      	cmp	r5, #12
 800f602:	bf38      	it	cc
 800f604:	250c      	movcc	r5, #12
 800f606:	2d00      	cmp	r5, #0
 800f608:	4607      	mov	r7, r0
 800f60a:	db01      	blt.n	800f610 <_malloc_r+0x1c>
 800f60c:	42a9      	cmp	r1, r5
 800f60e:	d905      	bls.n	800f61c <_malloc_r+0x28>
 800f610:	230c      	movs	r3, #12
 800f612:	603b      	str	r3, [r7, #0]
 800f614:	2600      	movs	r6, #0
 800f616:	4630      	mov	r0, r6
 800f618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f61c:	4e2e      	ldr	r6, [pc, #184]	; (800f6d8 <_malloc_r+0xe4>)
 800f61e:	f000 ff1f 	bl	8010460 <__malloc_lock>
 800f622:	6833      	ldr	r3, [r6, #0]
 800f624:	461c      	mov	r4, r3
 800f626:	bb34      	cbnz	r4, 800f676 <_malloc_r+0x82>
 800f628:	4629      	mov	r1, r5
 800f62a:	4638      	mov	r0, r7
 800f62c:	f7ff ffc2 	bl	800f5b4 <sbrk_aligned>
 800f630:	1c43      	adds	r3, r0, #1
 800f632:	4604      	mov	r4, r0
 800f634:	d14d      	bne.n	800f6d2 <_malloc_r+0xde>
 800f636:	6834      	ldr	r4, [r6, #0]
 800f638:	4626      	mov	r6, r4
 800f63a:	2e00      	cmp	r6, #0
 800f63c:	d140      	bne.n	800f6c0 <_malloc_r+0xcc>
 800f63e:	6823      	ldr	r3, [r4, #0]
 800f640:	4631      	mov	r1, r6
 800f642:	4638      	mov	r0, r7
 800f644:	eb04 0803 	add.w	r8, r4, r3
 800f648:	f000 fc92 	bl	800ff70 <_sbrk_r>
 800f64c:	4580      	cmp	r8, r0
 800f64e:	d13a      	bne.n	800f6c6 <_malloc_r+0xd2>
 800f650:	6821      	ldr	r1, [r4, #0]
 800f652:	3503      	adds	r5, #3
 800f654:	1a6d      	subs	r5, r5, r1
 800f656:	f025 0503 	bic.w	r5, r5, #3
 800f65a:	3508      	adds	r5, #8
 800f65c:	2d0c      	cmp	r5, #12
 800f65e:	bf38      	it	cc
 800f660:	250c      	movcc	r5, #12
 800f662:	4629      	mov	r1, r5
 800f664:	4638      	mov	r0, r7
 800f666:	f7ff ffa5 	bl	800f5b4 <sbrk_aligned>
 800f66a:	3001      	adds	r0, #1
 800f66c:	d02b      	beq.n	800f6c6 <_malloc_r+0xd2>
 800f66e:	6823      	ldr	r3, [r4, #0]
 800f670:	442b      	add	r3, r5
 800f672:	6023      	str	r3, [r4, #0]
 800f674:	e00e      	b.n	800f694 <_malloc_r+0xa0>
 800f676:	6822      	ldr	r2, [r4, #0]
 800f678:	1b52      	subs	r2, r2, r5
 800f67a:	d41e      	bmi.n	800f6ba <_malloc_r+0xc6>
 800f67c:	2a0b      	cmp	r2, #11
 800f67e:	d916      	bls.n	800f6ae <_malloc_r+0xba>
 800f680:	1961      	adds	r1, r4, r5
 800f682:	42a3      	cmp	r3, r4
 800f684:	6025      	str	r5, [r4, #0]
 800f686:	bf18      	it	ne
 800f688:	6059      	strne	r1, [r3, #4]
 800f68a:	6863      	ldr	r3, [r4, #4]
 800f68c:	bf08      	it	eq
 800f68e:	6031      	streq	r1, [r6, #0]
 800f690:	5162      	str	r2, [r4, r5]
 800f692:	604b      	str	r3, [r1, #4]
 800f694:	4638      	mov	r0, r7
 800f696:	f104 060b 	add.w	r6, r4, #11
 800f69a:	f000 fee7 	bl	801046c <__malloc_unlock>
 800f69e:	f026 0607 	bic.w	r6, r6, #7
 800f6a2:	1d23      	adds	r3, r4, #4
 800f6a4:	1af2      	subs	r2, r6, r3
 800f6a6:	d0b6      	beq.n	800f616 <_malloc_r+0x22>
 800f6a8:	1b9b      	subs	r3, r3, r6
 800f6aa:	50a3      	str	r3, [r4, r2]
 800f6ac:	e7b3      	b.n	800f616 <_malloc_r+0x22>
 800f6ae:	6862      	ldr	r2, [r4, #4]
 800f6b0:	42a3      	cmp	r3, r4
 800f6b2:	bf0c      	ite	eq
 800f6b4:	6032      	streq	r2, [r6, #0]
 800f6b6:	605a      	strne	r2, [r3, #4]
 800f6b8:	e7ec      	b.n	800f694 <_malloc_r+0xa0>
 800f6ba:	4623      	mov	r3, r4
 800f6bc:	6864      	ldr	r4, [r4, #4]
 800f6be:	e7b2      	b.n	800f626 <_malloc_r+0x32>
 800f6c0:	4634      	mov	r4, r6
 800f6c2:	6876      	ldr	r6, [r6, #4]
 800f6c4:	e7b9      	b.n	800f63a <_malloc_r+0x46>
 800f6c6:	230c      	movs	r3, #12
 800f6c8:	603b      	str	r3, [r7, #0]
 800f6ca:	4638      	mov	r0, r7
 800f6cc:	f000 fece 	bl	801046c <__malloc_unlock>
 800f6d0:	e7a1      	b.n	800f616 <_malloc_r+0x22>
 800f6d2:	6025      	str	r5, [r4, #0]
 800f6d4:	e7de      	b.n	800f694 <_malloc_r+0xa0>
 800f6d6:	bf00      	nop
 800f6d8:	2000851c 	.word	0x2000851c

0800f6dc <__ssputs_r>:
 800f6dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6e0:	688e      	ldr	r6, [r1, #8]
 800f6e2:	429e      	cmp	r6, r3
 800f6e4:	4682      	mov	sl, r0
 800f6e6:	460c      	mov	r4, r1
 800f6e8:	4690      	mov	r8, r2
 800f6ea:	461f      	mov	r7, r3
 800f6ec:	d838      	bhi.n	800f760 <__ssputs_r+0x84>
 800f6ee:	898a      	ldrh	r2, [r1, #12]
 800f6f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f6f4:	d032      	beq.n	800f75c <__ssputs_r+0x80>
 800f6f6:	6825      	ldr	r5, [r4, #0]
 800f6f8:	6909      	ldr	r1, [r1, #16]
 800f6fa:	eba5 0901 	sub.w	r9, r5, r1
 800f6fe:	6965      	ldr	r5, [r4, #20]
 800f700:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f704:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f708:	3301      	adds	r3, #1
 800f70a:	444b      	add	r3, r9
 800f70c:	106d      	asrs	r5, r5, #1
 800f70e:	429d      	cmp	r5, r3
 800f710:	bf38      	it	cc
 800f712:	461d      	movcc	r5, r3
 800f714:	0553      	lsls	r3, r2, #21
 800f716:	d531      	bpl.n	800f77c <__ssputs_r+0xa0>
 800f718:	4629      	mov	r1, r5
 800f71a:	f7ff ff6b 	bl	800f5f4 <_malloc_r>
 800f71e:	4606      	mov	r6, r0
 800f720:	b950      	cbnz	r0, 800f738 <__ssputs_r+0x5c>
 800f722:	230c      	movs	r3, #12
 800f724:	f8ca 3000 	str.w	r3, [sl]
 800f728:	89a3      	ldrh	r3, [r4, #12]
 800f72a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f72e:	81a3      	strh	r3, [r4, #12]
 800f730:	f04f 30ff 	mov.w	r0, #4294967295
 800f734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f738:	6921      	ldr	r1, [r4, #16]
 800f73a:	464a      	mov	r2, r9
 800f73c:	f7ff fd04 	bl	800f148 <memcpy>
 800f740:	89a3      	ldrh	r3, [r4, #12]
 800f742:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f74a:	81a3      	strh	r3, [r4, #12]
 800f74c:	6126      	str	r6, [r4, #16]
 800f74e:	6165      	str	r5, [r4, #20]
 800f750:	444e      	add	r6, r9
 800f752:	eba5 0509 	sub.w	r5, r5, r9
 800f756:	6026      	str	r6, [r4, #0]
 800f758:	60a5      	str	r5, [r4, #8]
 800f75a:	463e      	mov	r6, r7
 800f75c:	42be      	cmp	r6, r7
 800f75e:	d900      	bls.n	800f762 <__ssputs_r+0x86>
 800f760:	463e      	mov	r6, r7
 800f762:	6820      	ldr	r0, [r4, #0]
 800f764:	4632      	mov	r2, r6
 800f766:	4641      	mov	r1, r8
 800f768:	f7ff fcfc 	bl	800f164 <memmove>
 800f76c:	68a3      	ldr	r3, [r4, #8]
 800f76e:	1b9b      	subs	r3, r3, r6
 800f770:	60a3      	str	r3, [r4, #8]
 800f772:	6823      	ldr	r3, [r4, #0]
 800f774:	4433      	add	r3, r6
 800f776:	6023      	str	r3, [r4, #0]
 800f778:	2000      	movs	r0, #0
 800f77a:	e7db      	b.n	800f734 <__ssputs_r+0x58>
 800f77c:	462a      	mov	r2, r5
 800f77e:	f000 fe7b 	bl	8010478 <_realloc_r>
 800f782:	4606      	mov	r6, r0
 800f784:	2800      	cmp	r0, #0
 800f786:	d1e1      	bne.n	800f74c <__ssputs_r+0x70>
 800f788:	6921      	ldr	r1, [r4, #16]
 800f78a:	4650      	mov	r0, sl
 800f78c:	f7ff fec6 	bl	800f51c <_free_r>
 800f790:	e7c7      	b.n	800f722 <__ssputs_r+0x46>
	...

0800f794 <_svfiprintf_r>:
 800f794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f798:	4698      	mov	r8, r3
 800f79a:	898b      	ldrh	r3, [r1, #12]
 800f79c:	061b      	lsls	r3, r3, #24
 800f79e:	b09d      	sub	sp, #116	; 0x74
 800f7a0:	4607      	mov	r7, r0
 800f7a2:	460d      	mov	r5, r1
 800f7a4:	4614      	mov	r4, r2
 800f7a6:	d50e      	bpl.n	800f7c6 <_svfiprintf_r+0x32>
 800f7a8:	690b      	ldr	r3, [r1, #16]
 800f7aa:	b963      	cbnz	r3, 800f7c6 <_svfiprintf_r+0x32>
 800f7ac:	2140      	movs	r1, #64	; 0x40
 800f7ae:	f7ff ff21 	bl	800f5f4 <_malloc_r>
 800f7b2:	6028      	str	r0, [r5, #0]
 800f7b4:	6128      	str	r0, [r5, #16]
 800f7b6:	b920      	cbnz	r0, 800f7c2 <_svfiprintf_r+0x2e>
 800f7b8:	230c      	movs	r3, #12
 800f7ba:	603b      	str	r3, [r7, #0]
 800f7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f7c0:	e0d1      	b.n	800f966 <_svfiprintf_r+0x1d2>
 800f7c2:	2340      	movs	r3, #64	; 0x40
 800f7c4:	616b      	str	r3, [r5, #20]
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	9309      	str	r3, [sp, #36]	; 0x24
 800f7ca:	2320      	movs	r3, #32
 800f7cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f7d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7d4:	2330      	movs	r3, #48	; 0x30
 800f7d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f980 <_svfiprintf_r+0x1ec>
 800f7da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f7de:	f04f 0901 	mov.w	r9, #1
 800f7e2:	4623      	mov	r3, r4
 800f7e4:	469a      	mov	sl, r3
 800f7e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7ea:	b10a      	cbz	r2, 800f7f0 <_svfiprintf_r+0x5c>
 800f7ec:	2a25      	cmp	r2, #37	; 0x25
 800f7ee:	d1f9      	bne.n	800f7e4 <_svfiprintf_r+0x50>
 800f7f0:	ebba 0b04 	subs.w	fp, sl, r4
 800f7f4:	d00b      	beq.n	800f80e <_svfiprintf_r+0x7a>
 800f7f6:	465b      	mov	r3, fp
 800f7f8:	4622      	mov	r2, r4
 800f7fa:	4629      	mov	r1, r5
 800f7fc:	4638      	mov	r0, r7
 800f7fe:	f7ff ff6d 	bl	800f6dc <__ssputs_r>
 800f802:	3001      	adds	r0, #1
 800f804:	f000 80aa 	beq.w	800f95c <_svfiprintf_r+0x1c8>
 800f808:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f80a:	445a      	add	r2, fp
 800f80c:	9209      	str	r2, [sp, #36]	; 0x24
 800f80e:	f89a 3000 	ldrb.w	r3, [sl]
 800f812:	2b00      	cmp	r3, #0
 800f814:	f000 80a2 	beq.w	800f95c <_svfiprintf_r+0x1c8>
 800f818:	2300      	movs	r3, #0
 800f81a:	f04f 32ff 	mov.w	r2, #4294967295
 800f81e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f822:	f10a 0a01 	add.w	sl, sl, #1
 800f826:	9304      	str	r3, [sp, #16]
 800f828:	9307      	str	r3, [sp, #28]
 800f82a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f82e:	931a      	str	r3, [sp, #104]	; 0x68
 800f830:	4654      	mov	r4, sl
 800f832:	2205      	movs	r2, #5
 800f834:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f838:	4851      	ldr	r0, [pc, #324]	; (800f980 <_svfiprintf_r+0x1ec>)
 800f83a:	f7f0 fcc9 	bl	80001d0 <memchr>
 800f83e:	9a04      	ldr	r2, [sp, #16]
 800f840:	b9d8      	cbnz	r0, 800f87a <_svfiprintf_r+0xe6>
 800f842:	06d0      	lsls	r0, r2, #27
 800f844:	bf44      	itt	mi
 800f846:	2320      	movmi	r3, #32
 800f848:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f84c:	0711      	lsls	r1, r2, #28
 800f84e:	bf44      	itt	mi
 800f850:	232b      	movmi	r3, #43	; 0x2b
 800f852:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f856:	f89a 3000 	ldrb.w	r3, [sl]
 800f85a:	2b2a      	cmp	r3, #42	; 0x2a
 800f85c:	d015      	beq.n	800f88a <_svfiprintf_r+0xf6>
 800f85e:	9a07      	ldr	r2, [sp, #28]
 800f860:	4654      	mov	r4, sl
 800f862:	2000      	movs	r0, #0
 800f864:	f04f 0c0a 	mov.w	ip, #10
 800f868:	4621      	mov	r1, r4
 800f86a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f86e:	3b30      	subs	r3, #48	; 0x30
 800f870:	2b09      	cmp	r3, #9
 800f872:	d94e      	bls.n	800f912 <_svfiprintf_r+0x17e>
 800f874:	b1b0      	cbz	r0, 800f8a4 <_svfiprintf_r+0x110>
 800f876:	9207      	str	r2, [sp, #28]
 800f878:	e014      	b.n	800f8a4 <_svfiprintf_r+0x110>
 800f87a:	eba0 0308 	sub.w	r3, r0, r8
 800f87e:	fa09 f303 	lsl.w	r3, r9, r3
 800f882:	4313      	orrs	r3, r2
 800f884:	9304      	str	r3, [sp, #16]
 800f886:	46a2      	mov	sl, r4
 800f888:	e7d2      	b.n	800f830 <_svfiprintf_r+0x9c>
 800f88a:	9b03      	ldr	r3, [sp, #12]
 800f88c:	1d19      	adds	r1, r3, #4
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	9103      	str	r1, [sp, #12]
 800f892:	2b00      	cmp	r3, #0
 800f894:	bfbb      	ittet	lt
 800f896:	425b      	neglt	r3, r3
 800f898:	f042 0202 	orrlt.w	r2, r2, #2
 800f89c:	9307      	strge	r3, [sp, #28]
 800f89e:	9307      	strlt	r3, [sp, #28]
 800f8a0:	bfb8      	it	lt
 800f8a2:	9204      	strlt	r2, [sp, #16]
 800f8a4:	7823      	ldrb	r3, [r4, #0]
 800f8a6:	2b2e      	cmp	r3, #46	; 0x2e
 800f8a8:	d10c      	bne.n	800f8c4 <_svfiprintf_r+0x130>
 800f8aa:	7863      	ldrb	r3, [r4, #1]
 800f8ac:	2b2a      	cmp	r3, #42	; 0x2a
 800f8ae:	d135      	bne.n	800f91c <_svfiprintf_r+0x188>
 800f8b0:	9b03      	ldr	r3, [sp, #12]
 800f8b2:	1d1a      	adds	r2, r3, #4
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	9203      	str	r2, [sp, #12]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	bfb8      	it	lt
 800f8bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800f8c0:	3402      	adds	r4, #2
 800f8c2:	9305      	str	r3, [sp, #20]
 800f8c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f990 <_svfiprintf_r+0x1fc>
 800f8c8:	7821      	ldrb	r1, [r4, #0]
 800f8ca:	2203      	movs	r2, #3
 800f8cc:	4650      	mov	r0, sl
 800f8ce:	f7f0 fc7f 	bl	80001d0 <memchr>
 800f8d2:	b140      	cbz	r0, 800f8e6 <_svfiprintf_r+0x152>
 800f8d4:	2340      	movs	r3, #64	; 0x40
 800f8d6:	eba0 000a 	sub.w	r0, r0, sl
 800f8da:	fa03 f000 	lsl.w	r0, r3, r0
 800f8de:	9b04      	ldr	r3, [sp, #16]
 800f8e0:	4303      	orrs	r3, r0
 800f8e2:	3401      	adds	r4, #1
 800f8e4:	9304      	str	r3, [sp, #16]
 800f8e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8ea:	4826      	ldr	r0, [pc, #152]	; (800f984 <_svfiprintf_r+0x1f0>)
 800f8ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f8f0:	2206      	movs	r2, #6
 800f8f2:	f7f0 fc6d 	bl	80001d0 <memchr>
 800f8f6:	2800      	cmp	r0, #0
 800f8f8:	d038      	beq.n	800f96c <_svfiprintf_r+0x1d8>
 800f8fa:	4b23      	ldr	r3, [pc, #140]	; (800f988 <_svfiprintf_r+0x1f4>)
 800f8fc:	bb1b      	cbnz	r3, 800f946 <_svfiprintf_r+0x1b2>
 800f8fe:	9b03      	ldr	r3, [sp, #12]
 800f900:	3307      	adds	r3, #7
 800f902:	f023 0307 	bic.w	r3, r3, #7
 800f906:	3308      	adds	r3, #8
 800f908:	9303      	str	r3, [sp, #12]
 800f90a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f90c:	4433      	add	r3, r6
 800f90e:	9309      	str	r3, [sp, #36]	; 0x24
 800f910:	e767      	b.n	800f7e2 <_svfiprintf_r+0x4e>
 800f912:	fb0c 3202 	mla	r2, ip, r2, r3
 800f916:	460c      	mov	r4, r1
 800f918:	2001      	movs	r0, #1
 800f91a:	e7a5      	b.n	800f868 <_svfiprintf_r+0xd4>
 800f91c:	2300      	movs	r3, #0
 800f91e:	3401      	adds	r4, #1
 800f920:	9305      	str	r3, [sp, #20]
 800f922:	4619      	mov	r1, r3
 800f924:	f04f 0c0a 	mov.w	ip, #10
 800f928:	4620      	mov	r0, r4
 800f92a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f92e:	3a30      	subs	r2, #48	; 0x30
 800f930:	2a09      	cmp	r2, #9
 800f932:	d903      	bls.n	800f93c <_svfiprintf_r+0x1a8>
 800f934:	2b00      	cmp	r3, #0
 800f936:	d0c5      	beq.n	800f8c4 <_svfiprintf_r+0x130>
 800f938:	9105      	str	r1, [sp, #20]
 800f93a:	e7c3      	b.n	800f8c4 <_svfiprintf_r+0x130>
 800f93c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f940:	4604      	mov	r4, r0
 800f942:	2301      	movs	r3, #1
 800f944:	e7f0      	b.n	800f928 <_svfiprintf_r+0x194>
 800f946:	ab03      	add	r3, sp, #12
 800f948:	9300      	str	r3, [sp, #0]
 800f94a:	462a      	mov	r2, r5
 800f94c:	4b0f      	ldr	r3, [pc, #60]	; (800f98c <_svfiprintf_r+0x1f8>)
 800f94e:	a904      	add	r1, sp, #16
 800f950:	4638      	mov	r0, r7
 800f952:	f3af 8000 	nop.w
 800f956:	1c42      	adds	r2, r0, #1
 800f958:	4606      	mov	r6, r0
 800f95a:	d1d6      	bne.n	800f90a <_svfiprintf_r+0x176>
 800f95c:	89ab      	ldrh	r3, [r5, #12]
 800f95e:	065b      	lsls	r3, r3, #25
 800f960:	f53f af2c 	bmi.w	800f7bc <_svfiprintf_r+0x28>
 800f964:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f966:	b01d      	add	sp, #116	; 0x74
 800f968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f96c:	ab03      	add	r3, sp, #12
 800f96e:	9300      	str	r3, [sp, #0]
 800f970:	462a      	mov	r2, r5
 800f972:	4b06      	ldr	r3, [pc, #24]	; (800f98c <_svfiprintf_r+0x1f8>)
 800f974:	a904      	add	r1, sp, #16
 800f976:	4638      	mov	r0, r7
 800f978:	f000 f9d4 	bl	800fd24 <_printf_i>
 800f97c:	e7eb      	b.n	800f956 <_svfiprintf_r+0x1c2>
 800f97e:	bf00      	nop
 800f980:	0801335c 	.word	0x0801335c
 800f984:	08013366 	.word	0x08013366
 800f988:	00000000 	.word	0x00000000
 800f98c:	0800f6dd 	.word	0x0800f6dd
 800f990:	08013362 	.word	0x08013362

0800f994 <__sfputc_r>:
 800f994:	6893      	ldr	r3, [r2, #8]
 800f996:	3b01      	subs	r3, #1
 800f998:	2b00      	cmp	r3, #0
 800f99a:	b410      	push	{r4}
 800f99c:	6093      	str	r3, [r2, #8]
 800f99e:	da08      	bge.n	800f9b2 <__sfputc_r+0x1e>
 800f9a0:	6994      	ldr	r4, [r2, #24]
 800f9a2:	42a3      	cmp	r3, r4
 800f9a4:	db01      	blt.n	800f9aa <__sfputc_r+0x16>
 800f9a6:	290a      	cmp	r1, #10
 800f9a8:	d103      	bne.n	800f9b2 <__sfputc_r+0x1e>
 800f9aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9ae:	f000 bb33 	b.w	8010018 <__swbuf_r>
 800f9b2:	6813      	ldr	r3, [r2, #0]
 800f9b4:	1c58      	adds	r0, r3, #1
 800f9b6:	6010      	str	r0, [r2, #0]
 800f9b8:	7019      	strb	r1, [r3, #0]
 800f9ba:	4608      	mov	r0, r1
 800f9bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9c0:	4770      	bx	lr

0800f9c2 <__sfputs_r>:
 800f9c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9c4:	4606      	mov	r6, r0
 800f9c6:	460f      	mov	r7, r1
 800f9c8:	4614      	mov	r4, r2
 800f9ca:	18d5      	adds	r5, r2, r3
 800f9cc:	42ac      	cmp	r4, r5
 800f9ce:	d101      	bne.n	800f9d4 <__sfputs_r+0x12>
 800f9d0:	2000      	movs	r0, #0
 800f9d2:	e007      	b.n	800f9e4 <__sfputs_r+0x22>
 800f9d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9d8:	463a      	mov	r2, r7
 800f9da:	4630      	mov	r0, r6
 800f9dc:	f7ff ffda 	bl	800f994 <__sfputc_r>
 800f9e0:	1c43      	adds	r3, r0, #1
 800f9e2:	d1f3      	bne.n	800f9cc <__sfputs_r+0xa>
 800f9e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f9e8 <_vfiprintf_r>:
 800f9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ec:	460d      	mov	r5, r1
 800f9ee:	b09d      	sub	sp, #116	; 0x74
 800f9f0:	4614      	mov	r4, r2
 800f9f2:	4698      	mov	r8, r3
 800f9f4:	4606      	mov	r6, r0
 800f9f6:	b118      	cbz	r0, 800fa00 <_vfiprintf_r+0x18>
 800f9f8:	6983      	ldr	r3, [r0, #24]
 800f9fa:	b90b      	cbnz	r3, 800fa00 <_vfiprintf_r+0x18>
 800f9fc:	f7ff fcd4 	bl	800f3a8 <__sinit>
 800fa00:	4b89      	ldr	r3, [pc, #548]	; (800fc28 <_vfiprintf_r+0x240>)
 800fa02:	429d      	cmp	r5, r3
 800fa04:	d11b      	bne.n	800fa3e <_vfiprintf_r+0x56>
 800fa06:	6875      	ldr	r5, [r6, #4]
 800fa08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa0a:	07d9      	lsls	r1, r3, #31
 800fa0c:	d405      	bmi.n	800fa1a <_vfiprintf_r+0x32>
 800fa0e:	89ab      	ldrh	r3, [r5, #12]
 800fa10:	059a      	lsls	r2, r3, #22
 800fa12:	d402      	bmi.n	800fa1a <_vfiprintf_r+0x32>
 800fa14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa16:	f7ff fd77 	bl	800f508 <__retarget_lock_acquire_recursive>
 800fa1a:	89ab      	ldrh	r3, [r5, #12]
 800fa1c:	071b      	lsls	r3, r3, #28
 800fa1e:	d501      	bpl.n	800fa24 <_vfiprintf_r+0x3c>
 800fa20:	692b      	ldr	r3, [r5, #16]
 800fa22:	b9eb      	cbnz	r3, 800fa60 <_vfiprintf_r+0x78>
 800fa24:	4629      	mov	r1, r5
 800fa26:	4630      	mov	r0, r6
 800fa28:	f000 fb5a 	bl	80100e0 <__swsetup_r>
 800fa2c:	b1c0      	cbz	r0, 800fa60 <_vfiprintf_r+0x78>
 800fa2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa30:	07dc      	lsls	r4, r3, #31
 800fa32:	d50e      	bpl.n	800fa52 <_vfiprintf_r+0x6a>
 800fa34:	f04f 30ff 	mov.w	r0, #4294967295
 800fa38:	b01d      	add	sp, #116	; 0x74
 800fa3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa3e:	4b7b      	ldr	r3, [pc, #492]	; (800fc2c <_vfiprintf_r+0x244>)
 800fa40:	429d      	cmp	r5, r3
 800fa42:	d101      	bne.n	800fa48 <_vfiprintf_r+0x60>
 800fa44:	68b5      	ldr	r5, [r6, #8]
 800fa46:	e7df      	b.n	800fa08 <_vfiprintf_r+0x20>
 800fa48:	4b79      	ldr	r3, [pc, #484]	; (800fc30 <_vfiprintf_r+0x248>)
 800fa4a:	429d      	cmp	r5, r3
 800fa4c:	bf08      	it	eq
 800fa4e:	68f5      	ldreq	r5, [r6, #12]
 800fa50:	e7da      	b.n	800fa08 <_vfiprintf_r+0x20>
 800fa52:	89ab      	ldrh	r3, [r5, #12]
 800fa54:	0598      	lsls	r0, r3, #22
 800fa56:	d4ed      	bmi.n	800fa34 <_vfiprintf_r+0x4c>
 800fa58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa5a:	f7ff fd56 	bl	800f50a <__retarget_lock_release_recursive>
 800fa5e:	e7e9      	b.n	800fa34 <_vfiprintf_r+0x4c>
 800fa60:	2300      	movs	r3, #0
 800fa62:	9309      	str	r3, [sp, #36]	; 0x24
 800fa64:	2320      	movs	r3, #32
 800fa66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa6e:	2330      	movs	r3, #48	; 0x30
 800fa70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fc34 <_vfiprintf_r+0x24c>
 800fa74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa78:	f04f 0901 	mov.w	r9, #1
 800fa7c:	4623      	mov	r3, r4
 800fa7e:	469a      	mov	sl, r3
 800fa80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa84:	b10a      	cbz	r2, 800fa8a <_vfiprintf_r+0xa2>
 800fa86:	2a25      	cmp	r2, #37	; 0x25
 800fa88:	d1f9      	bne.n	800fa7e <_vfiprintf_r+0x96>
 800fa8a:	ebba 0b04 	subs.w	fp, sl, r4
 800fa8e:	d00b      	beq.n	800faa8 <_vfiprintf_r+0xc0>
 800fa90:	465b      	mov	r3, fp
 800fa92:	4622      	mov	r2, r4
 800fa94:	4629      	mov	r1, r5
 800fa96:	4630      	mov	r0, r6
 800fa98:	f7ff ff93 	bl	800f9c2 <__sfputs_r>
 800fa9c:	3001      	adds	r0, #1
 800fa9e:	f000 80aa 	beq.w	800fbf6 <_vfiprintf_r+0x20e>
 800faa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800faa4:	445a      	add	r2, fp
 800faa6:	9209      	str	r2, [sp, #36]	; 0x24
 800faa8:	f89a 3000 	ldrb.w	r3, [sl]
 800faac:	2b00      	cmp	r3, #0
 800faae:	f000 80a2 	beq.w	800fbf6 <_vfiprintf_r+0x20e>
 800fab2:	2300      	movs	r3, #0
 800fab4:	f04f 32ff 	mov.w	r2, #4294967295
 800fab8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fabc:	f10a 0a01 	add.w	sl, sl, #1
 800fac0:	9304      	str	r3, [sp, #16]
 800fac2:	9307      	str	r3, [sp, #28]
 800fac4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fac8:	931a      	str	r3, [sp, #104]	; 0x68
 800faca:	4654      	mov	r4, sl
 800facc:	2205      	movs	r2, #5
 800face:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fad2:	4858      	ldr	r0, [pc, #352]	; (800fc34 <_vfiprintf_r+0x24c>)
 800fad4:	f7f0 fb7c 	bl	80001d0 <memchr>
 800fad8:	9a04      	ldr	r2, [sp, #16]
 800fada:	b9d8      	cbnz	r0, 800fb14 <_vfiprintf_r+0x12c>
 800fadc:	06d1      	lsls	r1, r2, #27
 800fade:	bf44      	itt	mi
 800fae0:	2320      	movmi	r3, #32
 800fae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fae6:	0713      	lsls	r3, r2, #28
 800fae8:	bf44      	itt	mi
 800faea:	232b      	movmi	r3, #43	; 0x2b
 800faec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800faf0:	f89a 3000 	ldrb.w	r3, [sl]
 800faf4:	2b2a      	cmp	r3, #42	; 0x2a
 800faf6:	d015      	beq.n	800fb24 <_vfiprintf_r+0x13c>
 800faf8:	9a07      	ldr	r2, [sp, #28]
 800fafa:	4654      	mov	r4, sl
 800fafc:	2000      	movs	r0, #0
 800fafe:	f04f 0c0a 	mov.w	ip, #10
 800fb02:	4621      	mov	r1, r4
 800fb04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb08:	3b30      	subs	r3, #48	; 0x30
 800fb0a:	2b09      	cmp	r3, #9
 800fb0c:	d94e      	bls.n	800fbac <_vfiprintf_r+0x1c4>
 800fb0e:	b1b0      	cbz	r0, 800fb3e <_vfiprintf_r+0x156>
 800fb10:	9207      	str	r2, [sp, #28]
 800fb12:	e014      	b.n	800fb3e <_vfiprintf_r+0x156>
 800fb14:	eba0 0308 	sub.w	r3, r0, r8
 800fb18:	fa09 f303 	lsl.w	r3, r9, r3
 800fb1c:	4313      	orrs	r3, r2
 800fb1e:	9304      	str	r3, [sp, #16]
 800fb20:	46a2      	mov	sl, r4
 800fb22:	e7d2      	b.n	800faca <_vfiprintf_r+0xe2>
 800fb24:	9b03      	ldr	r3, [sp, #12]
 800fb26:	1d19      	adds	r1, r3, #4
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	9103      	str	r1, [sp, #12]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	bfbb      	ittet	lt
 800fb30:	425b      	neglt	r3, r3
 800fb32:	f042 0202 	orrlt.w	r2, r2, #2
 800fb36:	9307      	strge	r3, [sp, #28]
 800fb38:	9307      	strlt	r3, [sp, #28]
 800fb3a:	bfb8      	it	lt
 800fb3c:	9204      	strlt	r2, [sp, #16]
 800fb3e:	7823      	ldrb	r3, [r4, #0]
 800fb40:	2b2e      	cmp	r3, #46	; 0x2e
 800fb42:	d10c      	bne.n	800fb5e <_vfiprintf_r+0x176>
 800fb44:	7863      	ldrb	r3, [r4, #1]
 800fb46:	2b2a      	cmp	r3, #42	; 0x2a
 800fb48:	d135      	bne.n	800fbb6 <_vfiprintf_r+0x1ce>
 800fb4a:	9b03      	ldr	r3, [sp, #12]
 800fb4c:	1d1a      	adds	r2, r3, #4
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	9203      	str	r2, [sp, #12]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	bfb8      	it	lt
 800fb56:	f04f 33ff 	movlt.w	r3, #4294967295
 800fb5a:	3402      	adds	r4, #2
 800fb5c:	9305      	str	r3, [sp, #20]
 800fb5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fc44 <_vfiprintf_r+0x25c>
 800fb62:	7821      	ldrb	r1, [r4, #0]
 800fb64:	2203      	movs	r2, #3
 800fb66:	4650      	mov	r0, sl
 800fb68:	f7f0 fb32 	bl	80001d0 <memchr>
 800fb6c:	b140      	cbz	r0, 800fb80 <_vfiprintf_r+0x198>
 800fb6e:	2340      	movs	r3, #64	; 0x40
 800fb70:	eba0 000a 	sub.w	r0, r0, sl
 800fb74:	fa03 f000 	lsl.w	r0, r3, r0
 800fb78:	9b04      	ldr	r3, [sp, #16]
 800fb7a:	4303      	orrs	r3, r0
 800fb7c:	3401      	adds	r4, #1
 800fb7e:	9304      	str	r3, [sp, #16]
 800fb80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb84:	482c      	ldr	r0, [pc, #176]	; (800fc38 <_vfiprintf_r+0x250>)
 800fb86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb8a:	2206      	movs	r2, #6
 800fb8c:	f7f0 fb20 	bl	80001d0 <memchr>
 800fb90:	2800      	cmp	r0, #0
 800fb92:	d03f      	beq.n	800fc14 <_vfiprintf_r+0x22c>
 800fb94:	4b29      	ldr	r3, [pc, #164]	; (800fc3c <_vfiprintf_r+0x254>)
 800fb96:	bb1b      	cbnz	r3, 800fbe0 <_vfiprintf_r+0x1f8>
 800fb98:	9b03      	ldr	r3, [sp, #12]
 800fb9a:	3307      	adds	r3, #7
 800fb9c:	f023 0307 	bic.w	r3, r3, #7
 800fba0:	3308      	adds	r3, #8
 800fba2:	9303      	str	r3, [sp, #12]
 800fba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fba6:	443b      	add	r3, r7
 800fba8:	9309      	str	r3, [sp, #36]	; 0x24
 800fbaa:	e767      	b.n	800fa7c <_vfiprintf_r+0x94>
 800fbac:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbb0:	460c      	mov	r4, r1
 800fbb2:	2001      	movs	r0, #1
 800fbb4:	e7a5      	b.n	800fb02 <_vfiprintf_r+0x11a>
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	3401      	adds	r4, #1
 800fbba:	9305      	str	r3, [sp, #20]
 800fbbc:	4619      	mov	r1, r3
 800fbbe:	f04f 0c0a 	mov.w	ip, #10
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbc8:	3a30      	subs	r2, #48	; 0x30
 800fbca:	2a09      	cmp	r2, #9
 800fbcc:	d903      	bls.n	800fbd6 <_vfiprintf_r+0x1ee>
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d0c5      	beq.n	800fb5e <_vfiprintf_r+0x176>
 800fbd2:	9105      	str	r1, [sp, #20]
 800fbd4:	e7c3      	b.n	800fb5e <_vfiprintf_r+0x176>
 800fbd6:	fb0c 2101 	mla	r1, ip, r1, r2
 800fbda:	4604      	mov	r4, r0
 800fbdc:	2301      	movs	r3, #1
 800fbde:	e7f0      	b.n	800fbc2 <_vfiprintf_r+0x1da>
 800fbe0:	ab03      	add	r3, sp, #12
 800fbe2:	9300      	str	r3, [sp, #0]
 800fbe4:	462a      	mov	r2, r5
 800fbe6:	4b16      	ldr	r3, [pc, #88]	; (800fc40 <_vfiprintf_r+0x258>)
 800fbe8:	a904      	add	r1, sp, #16
 800fbea:	4630      	mov	r0, r6
 800fbec:	f3af 8000 	nop.w
 800fbf0:	4607      	mov	r7, r0
 800fbf2:	1c78      	adds	r0, r7, #1
 800fbf4:	d1d6      	bne.n	800fba4 <_vfiprintf_r+0x1bc>
 800fbf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fbf8:	07d9      	lsls	r1, r3, #31
 800fbfa:	d405      	bmi.n	800fc08 <_vfiprintf_r+0x220>
 800fbfc:	89ab      	ldrh	r3, [r5, #12]
 800fbfe:	059a      	lsls	r2, r3, #22
 800fc00:	d402      	bmi.n	800fc08 <_vfiprintf_r+0x220>
 800fc02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc04:	f7ff fc81 	bl	800f50a <__retarget_lock_release_recursive>
 800fc08:	89ab      	ldrh	r3, [r5, #12]
 800fc0a:	065b      	lsls	r3, r3, #25
 800fc0c:	f53f af12 	bmi.w	800fa34 <_vfiprintf_r+0x4c>
 800fc10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc12:	e711      	b.n	800fa38 <_vfiprintf_r+0x50>
 800fc14:	ab03      	add	r3, sp, #12
 800fc16:	9300      	str	r3, [sp, #0]
 800fc18:	462a      	mov	r2, r5
 800fc1a:	4b09      	ldr	r3, [pc, #36]	; (800fc40 <_vfiprintf_r+0x258>)
 800fc1c:	a904      	add	r1, sp, #16
 800fc1e:	4630      	mov	r0, r6
 800fc20:	f000 f880 	bl	800fd24 <_printf_i>
 800fc24:	e7e4      	b.n	800fbf0 <_vfiprintf_r+0x208>
 800fc26:	bf00      	nop
 800fc28:	0801331c 	.word	0x0801331c
 800fc2c:	0801333c 	.word	0x0801333c
 800fc30:	080132fc 	.word	0x080132fc
 800fc34:	0801335c 	.word	0x0801335c
 800fc38:	08013366 	.word	0x08013366
 800fc3c:	00000000 	.word	0x00000000
 800fc40:	0800f9c3 	.word	0x0800f9c3
 800fc44:	08013362 	.word	0x08013362

0800fc48 <_printf_common>:
 800fc48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc4c:	4616      	mov	r6, r2
 800fc4e:	4699      	mov	r9, r3
 800fc50:	688a      	ldr	r2, [r1, #8]
 800fc52:	690b      	ldr	r3, [r1, #16]
 800fc54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fc58:	4293      	cmp	r3, r2
 800fc5a:	bfb8      	it	lt
 800fc5c:	4613      	movlt	r3, r2
 800fc5e:	6033      	str	r3, [r6, #0]
 800fc60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fc64:	4607      	mov	r7, r0
 800fc66:	460c      	mov	r4, r1
 800fc68:	b10a      	cbz	r2, 800fc6e <_printf_common+0x26>
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	6033      	str	r3, [r6, #0]
 800fc6e:	6823      	ldr	r3, [r4, #0]
 800fc70:	0699      	lsls	r1, r3, #26
 800fc72:	bf42      	ittt	mi
 800fc74:	6833      	ldrmi	r3, [r6, #0]
 800fc76:	3302      	addmi	r3, #2
 800fc78:	6033      	strmi	r3, [r6, #0]
 800fc7a:	6825      	ldr	r5, [r4, #0]
 800fc7c:	f015 0506 	ands.w	r5, r5, #6
 800fc80:	d106      	bne.n	800fc90 <_printf_common+0x48>
 800fc82:	f104 0a19 	add.w	sl, r4, #25
 800fc86:	68e3      	ldr	r3, [r4, #12]
 800fc88:	6832      	ldr	r2, [r6, #0]
 800fc8a:	1a9b      	subs	r3, r3, r2
 800fc8c:	42ab      	cmp	r3, r5
 800fc8e:	dc26      	bgt.n	800fcde <_printf_common+0x96>
 800fc90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fc94:	1e13      	subs	r3, r2, #0
 800fc96:	6822      	ldr	r2, [r4, #0]
 800fc98:	bf18      	it	ne
 800fc9a:	2301      	movne	r3, #1
 800fc9c:	0692      	lsls	r2, r2, #26
 800fc9e:	d42b      	bmi.n	800fcf8 <_printf_common+0xb0>
 800fca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fca4:	4649      	mov	r1, r9
 800fca6:	4638      	mov	r0, r7
 800fca8:	47c0      	blx	r8
 800fcaa:	3001      	adds	r0, #1
 800fcac:	d01e      	beq.n	800fcec <_printf_common+0xa4>
 800fcae:	6823      	ldr	r3, [r4, #0]
 800fcb0:	68e5      	ldr	r5, [r4, #12]
 800fcb2:	6832      	ldr	r2, [r6, #0]
 800fcb4:	f003 0306 	and.w	r3, r3, #6
 800fcb8:	2b04      	cmp	r3, #4
 800fcba:	bf08      	it	eq
 800fcbc:	1aad      	subeq	r5, r5, r2
 800fcbe:	68a3      	ldr	r3, [r4, #8]
 800fcc0:	6922      	ldr	r2, [r4, #16]
 800fcc2:	bf0c      	ite	eq
 800fcc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fcc8:	2500      	movne	r5, #0
 800fcca:	4293      	cmp	r3, r2
 800fccc:	bfc4      	itt	gt
 800fcce:	1a9b      	subgt	r3, r3, r2
 800fcd0:	18ed      	addgt	r5, r5, r3
 800fcd2:	2600      	movs	r6, #0
 800fcd4:	341a      	adds	r4, #26
 800fcd6:	42b5      	cmp	r5, r6
 800fcd8:	d11a      	bne.n	800fd10 <_printf_common+0xc8>
 800fcda:	2000      	movs	r0, #0
 800fcdc:	e008      	b.n	800fcf0 <_printf_common+0xa8>
 800fcde:	2301      	movs	r3, #1
 800fce0:	4652      	mov	r2, sl
 800fce2:	4649      	mov	r1, r9
 800fce4:	4638      	mov	r0, r7
 800fce6:	47c0      	blx	r8
 800fce8:	3001      	adds	r0, #1
 800fcea:	d103      	bne.n	800fcf4 <_printf_common+0xac>
 800fcec:	f04f 30ff 	mov.w	r0, #4294967295
 800fcf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcf4:	3501      	adds	r5, #1
 800fcf6:	e7c6      	b.n	800fc86 <_printf_common+0x3e>
 800fcf8:	18e1      	adds	r1, r4, r3
 800fcfa:	1c5a      	adds	r2, r3, #1
 800fcfc:	2030      	movs	r0, #48	; 0x30
 800fcfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd02:	4422      	add	r2, r4
 800fd04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fd08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd0c:	3302      	adds	r3, #2
 800fd0e:	e7c7      	b.n	800fca0 <_printf_common+0x58>
 800fd10:	2301      	movs	r3, #1
 800fd12:	4622      	mov	r2, r4
 800fd14:	4649      	mov	r1, r9
 800fd16:	4638      	mov	r0, r7
 800fd18:	47c0      	blx	r8
 800fd1a:	3001      	adds	r0, #1
 800fd1c:	d0e6      	beq.n	800fcec <_printf_common+0xa4>
 800fd1e:	3601      	adds	r6, #1
 800fd20:	e7d9      	b.n	800fcd6 <_printf_common+0x8e>
	...

0800fd24 <_printf_i>:
 800fd24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd28:	7e0f      	ldrb	r7, [r1, #24]
 800fd2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fd2c:	2f78      	cmp	r7, #120	; 0x78
 800fd2e:	4691      	mov	r9, r2
 800fd30:	4680      	mov	r8, r0
 800fd32:	460c      	mov	r4, r1
 800fd34:	469a      	mov	sl, r3
 800fd36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fd3a:	d807      	bhi.n	800fd4c <_printf_i+0x28>
 800fd3c:	2f62      	cmp	r7, #98	; 0x62
 800fd3e:	d80a      	bhi.n	800fd56 <_printf_i+0x32>
 800fd40:	2f00      	cmp	r7, #0
 800fd42:	f000 80d8 	beq.w	800fef6 <_printf_i+0x1d2>
 800fd46:	2f58      	cmp	r7, #88	; 0x58
 800fd48:	f000 80a3 	beq.w	800fe92 <_printf_i+0x16e>
 800fd4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fd54:	e03a      	b.n	800fdcc <_printf_i+0xa8>
 800fd56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fd5a:	2b15      	cmp	r3, #21
 800fd5c:	d8f6      	bhi.n	800fd4c <_printf_i+0x28>
 800fd5e:	a101      	add	r1, pc, #4	; (adr r1, 800fd64 <_printf_i+0x40>)
 800fd60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd64:	0800fdbd 	.word	0x0800fdbd
 800fd68:	0800fdd1 	.word	0x0800fdd1
 800fd6c:	0800fd4d 	.word	0x0800fd4d
 800fd70:	0800fd4d 	.word	0x0800fd4d
 800fd74:	0800fd4d 	.word	0x0800fd4d
 800fd78:	0800fd4d 	.word	0x0800fd4d
 800fd7c:	0800fdd1 	.word	0x0800fdd1
 800fd80:	0800fd4d 	.word	0x0800fd4d
 800fd84:	0800fd4d 	.word	0x0800fd4d
 800fd88:	0800fd4d 	.word	0x0800fd4d
 800fd8c:	0800fd4d 	.word	0x0800fd4d
 800fd90:	0800fedd 	.word	0x0800fedd
 800fd94:	0800fe01 	.word	0x0800fe01
 800fd98:	0800febf 	.word	0x0800febf
 800fd9c:	0800fd4d 	.word	0x0800fd4d
 800fda0:	0800fd4d 	.word	0x0800fd4d
 800fda4:	0800feff 	.word	0x0800feff
 800fda8:	0800fd4d 	.word	0x0800fd4d
 800fdac:	0800fe01 	.word	0x0800fe01
 800fdb0:	0800fd4d 	.word	0x0800fd4d
 800fdb4:	0800fd4d 	.word	0x0800fd4d
 800fdb8:	0800fec7 	.word	0x0800fec7
 800fdbc:	682b      	ldr	r3, [r5, #0]
 800fdbe:	1d1a      	adds	r2, r3, #4
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	602a      	str	r2, [r5, #0]
 800fdc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fdc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fdcc:	2301      	movs	r3, #1
 800fdce:	e0a3      	b.n	800ff18 <_printf_i+0x1f4>
 800fdd0:	6820      	ldr	r0, [r4, #0]
 800fdd2:	6829      	ldr	r1, [r5, #0]
 800fdd4:	0606      	lsls	r6, r0, #24
 800fdd6:	f101 0304 	add.w	r3, r1, #4
 800fdda:	d50a      	bpl.n	800fdf2 <_printf_i+0xce>
 800fddc:	680e      	ldr	r6, [r1, #0]
 800fdde:	602b      	str	r3, [r5, #0]
 800fde0:	2e00      	cmp	r6, #0
 800fde2:	da03      	bge.n	800fdec <_printf_i+0xc8>
 800fde4:	232d      	movs	r3, #45	; 0x2d
 800fde6:	4276      	negs	r6, r6
 800fde8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdec:	485e      	ldr	r0, [pc, #376]	; (800ff68 <_printf_i+0x244>)
 800fdee:	230a      	movs	r3, #10
 800fdf0:	e019      	b.n	800fe26 <_printf_i+0x102>
 800fdf2:	680e      	ldr	r6, [r1, #0]
 800fdf4:	602b      	str	r3, [r5, #0]
 800fdf6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fdfa:	bf18      	it	ne
 800fdfc:	b236      	sxthne	r6, r6
 800fdfe:	e7ef      	b.n	800fde0 <_printf_i+0xbc>
 800fe00:	682b      	ldr	r3, [r5, #0]
 800fe02:	6820      	ldr	r0, [r4, #0]
 800fe04:	1d19      	adds	r1, r3, #4
 800fe06:	6029      	str	r1, [r5, #0]
 800fe08:	0601      	lsls	r1, r0, #24
 800fe0a:	d501      	bpl.n	800fe10 <_printf_i+0xec>
 800fe0c:	681e      	ldr	r6, [r3, #0]
 800fe0e:	e002      	b.n	800fe16 <_printf_i+0xf2>
 800fe10:	0646      	lsls	r6, r0, #25
 800fe12:	d5fb      	bpl.n	800fe0c <_printf_i+0xe8>
 800fe14:	881e      	ldrh	r6, [r3, #0]
 800fe16:	4854      	ldr	r0, [pc, #336]	; (800ff68 <_printf_i+0x244>)
 800fe18:	2f6f      	cmp	r7, #111	; 0x6f
 800fe1a:	bf0c      	ite	eq
 800fe1c:	2308      	moveq	r3, #8
 800fe1e:	230a      	movne	r3, #10
 800fe20:	2100      	movs	r1, #0
 800fe22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fe26:	6865      	ldr	r5, [r4, #4]
 800fe28:	60a5      	str	r5, [r4, #8]
 800fe2a:	2d00      	cmp	r5, #0
 800fe2c:	bfa2      	ittt	ge
 800fe2e:	6821      	ldrge	r1, [r4, #0]
 800fe30:	f021 0104 	bicge.w	r1, r1, #4
 800fe34:	6021      	strge	r1, [r4, #0]
 800fe36:	b90e      	cbnz	r6, 800fe3c <_printf_i+0x118>
 800fe38:	2d00      	cmp	r5, #0
 800fe3a:	d04d      	beq.n	800fed8 <_printf_i+0x1b4>
 800fe3c:	4615      	mov	r5, r2
 800fe3e:	fbb6 f1f3 	udiv	r1, r6, r3
 800fe42:	fb03 6711 	mls	r7, r3, r1, r6
 800fe46:	5dc7      	ldrb	r7, [r0, r7]
 800fe48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fe4c:	4637      	mov	r7, r6
 800fe4e:	42bb      	cmp	r3, r7
 800fe50:	460e      	mov	r6, r1
 800fe52:	d9f4      	bls.n	800fe3e <_printf_i+0x11a>
 800fe54:	2b08      	cmp	r3, #8
 800fe56:	d10b      	bne.n	800fe70 <_printf_i+0x14c>
 800fe58:	6823      	ldr	r3, [r4, #0]
 800fe5a:	07de      	lsls	r6, r3, #31
 800fe5c:	d508      	bpl.n	800fe70 <_printf_i+0x14c>
 800fe5e:	6923      	ldr	r3, [r4, #16]
 800fe60:	6861      	ldr	r1, [r4, #4]
 800fe62:	4299      	cmp	r1, r3
 800fe64:	bfde      	ittt	le
 800fe66:	2330      	movle	r3, #48	; 0x30
 800fe68:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fe6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fe70:	1b52      	subs	r2, r2, r5
 800fe72:	6122      	str	r2, [r4, #16]
 800fe74:	f8cd a000 	str.w	sl, [sp]
 800fe78:	464b      	mov	r3, r9
 800fe7a:	aa03      	add	r2, sp, #12
 800fe7c:	4621      	mov	r1, r4
 800fe7e:	4640      	mov	r0, r8
 800fe80:	f7ff fee2 	bl	800fc48 <_printf_common>
 800fe84:	3001      	adds	r0, #1
 800fe86:	d14c      	bne.n	800ff22 <_printf_i+0x1fe>
 800fe88:	f04f 30ff 	mov.w	r0, #4294967295
 800fe8c:	b004      	add	sp, #16
 800fe8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe92:	4835      	ldr	r0, [pc, #212]	; (800ff68 <_printf_i+0x244>)
 800fe94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fe98:	6829      	ldr	r1, [r5, #0]
 800fe9a:	6823      	ldr	r3, [r4, #0]
 800fe9c:	f851 6b04 	ldr.w	r6, [r1], #4
 800fea0:	6029      	str	r1, [r5, #0]
 800fea2:	061d      	lsls	r5, r3, #24
 800fea4:	d514      	bpl.n	800fed0 <_printf_i+0x1ac>
 800fea6:	07df      	lsls	r7, r3, #31
 800fea8:	bf44      	itt	mi
 800feaa:	f043 0320 	orrmi.w	r3, r3, #32
 800feae:	6023      	strmi	r3, [r4, #0]
 800feb0:	b91e      	cbnz	r6, 800feba <_printf_i+0x196>
 800feb2:	6823      	ldr	r3, [r4, #0]
 800feb4:	f023 0320 	bic.w	r3, r3, #32
 800feb8:	6023      	str	r3, [r4, #0]
 800feba:	2310      	movs	r3, #16
 800febc:	e7b0      	b.n	800fe20 <_printf_i+0xfc>
 800febe:	6823      	ldr	r3, [r4, #0]
 800fec0:	f043 0320 	orr.w	r3, r3, #32
 800fec4:	6023      	str	r3, [r4, #0]
 800fec6:	2378      	movs	r3, #120	; 0x78
 800fec8:	4828      	ldr	r0, [pc, #160]	; (800ff6c <_printf_i+0x248>)
 800feca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fece:	e7e3      	b.n	800fe98 <_printf_i+0x174>
 800fed0:	0659      	lsls	r1, r3, #25
 800fed2:	bf48      	it	mi
 800fed4:	b2b6      	uxthmi	r6, r6
 800fed6:	e7e6      	b.n	800fea6 <_printf_i+0x182>
 800fed8:	4615      	mov	r5, r2
 800feda:	e7bb      	b.n	800fe54 <_printf_i+0x130>
 800fedc:	682b      	ldr	r3, [r5, #0]
 800fede:	6826      	ldr	r6, [r4, #0]
 800fee0:	6961      	ldr	r1, [r4, #20]
 800fee2:	1d18      	adds	r0, r3, #4
 800fee4:	6028      	str	r0, [r5, #0]
 800fee6:	0635      	lsls	r5, r6, #24
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	d501      	bpl.n	800fef0 <_printf_i+0x1cc>
 800feec:	6019      	str	r1, [r3, #0]
 800feee:	e002      	b.n	800fef6 <_printf_i+0x1d2>
 800fef0:	0670      	lsls	r0, r6, #25
 800fef2:	d5fb      	bpl.n	800feec <_printf_i+0x1c8>
 800fef4:	8019      	strh	r1, [r3, #0]
 800fef6:	2300      	movs	r3, #0
 800fef8:	6123      	str	r3, [r4, #16]
 800fefa:	4615      	mov	r5, r2
 800fefc:	e7ba      	b.n	800fe74 <_printf_i+0x150>
 800fefe:	682b      	ldr	r3, [r5, #0]
 800ff00:	1d1a      	adds	r2, r3, #4
 800ff02:	602a      	str	r2, [r5, #0]
 800ff04:	681d      	ldr	r5, [r3, #0]
 800ff06:	6862      	ldr	r2, [r4, #4]
 800ff08:	2100      	movs	r1, #0
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	f7f0 f960 	bl	80001d0 <memchr>
 800ff10:	b108      	cbz	r0, 800ff16 <_printf_i+0x1f2>
 800ff12:	1b40      	subs	r0, r0, r5
 800ff14:	6060      	str	r0, [r4, #4]
 800ff16:	6863      	ldr	r3, [r4, #4]
 800ff18:	6123      	str	r3, [r4, #16]
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff20:	e7a8      	b.n	800fe74 <_printf_i+0x150>
 800ff22:	6923      	ldr	r3, [r4, #16]
 800ff24:	462a      	mov	r2, r5
 800ff26:	4649      	mov	r1, r9
 800ff28:	4640      	mov	r0, r8
 800ff2a:	47d0      	blx	sl
 800ff2c:	3001      	adds	r0, #1
 800ff2e:	d0ab      	beq.n	800fe88 <_printf_i+0x164>
 800ff30:	6823      	ldr	r3, [r4, #0]
 800ff32:	079b      	lsls	r3, r3, #30
 800ff34:	d413      	bmi.n	800ff5e <_printf_i+0x23a>
 800ff36:	68e0      	ldr	r0, [r4, #12]
 800ff38:	9b03      	ldr	r3, [sp, #12]
 800ff3a:	4298      	cmp	r0, r3
 800ff3c:	bfb8      	it	lt
 800ff3e:	4618      	movlt	r0, r3
 800ff40:	e7a4      	b.n	800fe8c <_printf_i+0x168>
 800ff42:	2301      	movs	r3, #1
 800ff44:	4632      	mov	r2, r6
 800ff46:	4649      	mov	r1, r9
 800ff48:	4640      	mov	r0, r8
 800ff4a:	47d0      	blx	sl
 800ff4c:	3001      	adds	r0, #1
 800ff4e:	d09b      	beq.n	800fe88 <_printf_i+0x164>
 800ff50:	3501      	adds	r5, #1
 800ff52:	68e3      	ldr	r3, [r4, #12]
 800ff54:	9903      	ldr	r1, [sp, #12]
 800ff56:	1a5b      	subs	r3, r3, r1
 800ff58:	42ab      	cmp	r3, r5
 800ff5a:	dcf2      	bgt.n	800ff42 <_printf_i+0x21e>
 800ff5c:	e7eb      	b.n	800ff36 <_printf_i+0x212>
 800ff5e:	2500      	movs	r5, #0
 800ff60:	f104 0619 	add.w	r6, r4, #25
 800ff64:	e7f5      	b.n	800ff52 <_printf_i+0x22e>
 800ff66:	bf00      	nop
 800ff68:	0801336d 	.word	0x0801336d
 800ff6c:	0801337e 	.word	0x0801337e

0800ff70 <_sbrk_r>:
 800ff70:	b538      	push	{r3, r4, r5, lr}
 800ff72:	4d06      	ldr	r5, [pc, #24]	; (800ff8c <_sbrk_r+0x1c>)
 800ff74:	2300      	movs	r3, #0
 800ff76:	4604      	mov	r4, r0
 800ff78:	4608      	mov	r0, r1
 800ff7a:	602b      	str	r3, [r5, #0]
 800ff7c:	f7f0 ffc0 	bl	8000f00 <_sbrk>
 800ff80:	1c43      	adds	r3, r0, #1
 800ff82:	d102      	bne.n	800ff8a <_sbrk_r+0x1a>
 800ff84:	682b      	ldr	r3, [r5, #0]
 800ff86:	b103      	cbz	r3, 800ff8a <_sbrk_r+0x1a>
 800ff88:	6023      	str	r3, [r4, #0]
 800ff8a:	bd38      	pop	{r3, r4, r5, pc}
 800ff8c:	20008514 	.word	0x20008514

0800ff90 <__sread>:
 800ff90:	b510      	push	{r4, lr}
 800ff92:	460c      	mov	r4, r1
 800ff94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff98:	f000 fa9e 	bl	80104d8 <_read_r>
 800ff9c:	2800      	cmp	r0, #0
 800ff9e:	bfab      	itete	ge
 800ffa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ffa2:	89a3      	ldrhlt	r3, [r4, #12]
 800ffa4:	181b      	addge	r3, r3, r0
 800ffa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ffaa:	bfac      	ite	ge
 800ffac:	6563      	strge	r3, [r4, #84]	; 0x54
 800ffae:	81a3      	strhlt	r3, [r4, #12]
 800ffb0:	bd10      	pop	{r4, pc}

0800ffb2 <__swrite>:
 800ffb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffb6:	461f      	mov	r7, r3
 800ffb8:	898b      	ldrh	r3, [r1, #12]
 800ffba:	05db      	lsls	r3, r3, #23
 800ffbc:	4605      	mov	r5, r0
 800ffbe:	460c      	mov	r4, r1
 800ffc0:	4616      	mov	r6, r2
 800ffc2:	d505      	bpl.n	800ffd0 <__swrite+0x1e>
 800ffc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffc8:	2302      	movs	r3, #2
 800ffca:	2200      	movs	r2, #0
 800ffcc:	f000 f9d0 	bl	8010370 <_lseek_r>
 800ffd0:	89a3      	ldrh	r3, [r4, #12]
 800ffd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ffda:	81a3      	strh	r3, [r4, #12]
 800ffdc:	4632      	mov	r2, r6
 800ffde:	463b      	mov	r3, r7
 800ffe0:	4628      	mov	r0, r5
 800ffe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffe6:	f000 b869 	b.w	80100bc <_write_r>

0800ffea <__sseek>:
 800ffea:	b510      	push	{r4, lr}
 800ffec:	460c      	mov	r4, r1
 800ffee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fff2:	f000 f9bd 	bl	8010370 <_lseek_r>
 800fff6:	1c43      	adds	r3, r0, #1
 800fff8:	89a3      	ldrh	r3, [r4, #12]
 800fffa:	bf15      	itete	ne
 800fffc:	6560      	strne	r0, [r4, #84]	; 0x54
 800fffe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010002:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010006:	81a3      	strheq	r3, [r4, #12]
 8010008:	bf18      	it	ne
 801000a:	81a3      	strhne	r3, [r4, #12]
 801000c:	bd10      	pop	{r4, pc}

0801000e <__sclose>:
 801000e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010012:	f000 b8db 	b.w	80101cc <_close_r>
	...

08010018 <__swbuf_r>:
 8010018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801001a:	460e      	mov	r6, r1
 801001c:	4614      	mov	r4, r2
 801001e:	4605      	mov	r5, r0
 8010020:	b118      	cbz	r0, 801002a <__swbuf_r+0x12>
 8010022:	6983      	ldr	r3, [r0, #24]
 8010024:	b90b      	cbnz	r3, 801002a <__swbuf_r+0x12>
 8010026:	f7ff f9bf 	bl	800f3a8 <__sinit>
 801002a:	4b21      	ldr	r3, [pc, #132]	; (80100b0 <__swbuf_r+0x98>)
 801002c:	429c      	cmp	r4, r3
 801002e:	d12b      	bne.n	8010088 <__swbuf_r+0x70>
 8010030:	686c      	ldr	r4, [r5, #4]
 8010032:	69a3      	ldr	r3, [r4, #24]
 8010034:	60a3      	str	r3, [r4, #8]
 8010036:	89a3      	ldrh	r3, [r4, #12]
 8010038:	071a      	lsls	r2, r3, #28
 801003a:	d52f      	bpl.n	801009c <__swbuf_r+0x84>
 801003c:	6923      	ldr	r3, [r4, #16]
 801003e:	b36b      	cbz	r3, 801009c <__swbuf_r+0x84>
 8010040:	6923      	ldr	r3, [r4, #16]
 8010042:	6820      	ldr	r0, [r4, #0]
 8010044:	1ac0      	subs	r0, r0, r3
 8010046:	6963      	ldr	r3, [r4, #20]
 8010048:	b2f6      	uxtb	r6, r6
 801004a:	4283      	cmp	r3, r0
 801004c:	4637      	mov	r7, r6
 801004e:	dc04      	bgt.n	801005a <__swbuf_r+0x42>
 8010050:	4621      	mov	r1, r4
 8010052:	4628      	mov	r0, r5
 8010054:	f000 f950 	bl	80102f8 <_fflush_r>
 8010058:	bb30      	cbnz	r0, 80100a8 <__swbuf_r+0x90>
 801005a:	68a3      	ldr	r3, [r4, #8]
 801005c:	3b01      	subs	r3, #1
 801005e:	60a3      	str	r3, [r4, #8]
 8010060:	6823      	ldr	r3, [r4, #0]
 8010062:	1c5a      	adds	r2, r3, #1
 8010064:	6022      	str	r2, [r4, #0]
 8010066:	701e      	strb	r6, [r3, #0]
 8010068:	6963      	ldr	r3, [r4, #20]
 801006a:	3001      	adds	r0, #1
 801006c:	4283      	cmp	r3, r0
 801006e:	d004      	beq.n	801007a <__swbuf_r+0x62>
 8010070:	89a3      	ldrh	r3, [r4, #12]
 8010072:	07db      	lsls	r3, r3, #31
 8010074:	d506      	bpl.n	8010084 <__swbuf_r+0x6c>
 8010076:	2e0a      	cmp	r6, #10
 8010078:	d104      	bne.n	8010084 <__swbuf_r+0x6c>
 801007a:	4621      	mov	r1, r4
 801007c:	4628      	mov	r0, r5
 801007e:	f000 f93b 	bl	80102f8 <_fflush_r>
 8010082:	b988      	cbnz	r0, 80100a8 <__swbuf_r+0x90>
 8010084:	4638      	mov	r0, r7
 8010086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010088:	4b0a      	ldr	r3, [pc, #40]	; (80100b4 <__swbuf_r+0x9c>)
 801008a:	429c      	cmp	r4, r3
 801008c:	d101      	bne.n	8010092 <__swbuf_r+0x7a>
 801008e:	68ac      	ldr	r4, [r5, #8]
 8010090:	e7cf      	b.n	8010032 <__swbuf_r+0x1a>
 8010092:	4b09      	ldr	r3, [pc, #36]	; (80100b8 <__swbuf_r+0xa0>)
 8010094:	429c      	cmp	r4, r3
 8010096:	bf08      	it	eq
 8010098:	68ec      	ldreq	r4, [r5, #12]
 801009a:	e7ca      	b.n	8010032 <__swbuf_r+0x1a>
 801009c:	4621      	mov	r1, r4
 801009e:	4628      	mov	r0, r5
 80100a0:	f000 f81e 	bl	80100e0 <__swsetup_r>
 80100a4:	2800      	cmp	r0, #0
 80100a6:	d0cb      	beq.n	8010040 <__swbuf_r+0x28>
 80100a8:	f04f 37ff 	mov.w	r7, #4294967295
 80100ac:	e7ea      	b.n	8010084 <__swbuf_r+0x6c>
 80100ae:	bf00      	nop
 80100b0:	0801331c 	.word	0x0801331c
 80100b4:	0801333c 	.word	0x0801333c
 80100b8:	080132fc 	.word	0x080132fc

080100bc <_write_r>:
 80100bc:	b538      	push	{r3, r4, r5, lr}
 80100be:	4d07      	ldr	r5, [pc, #28]	; (80100dc <_write_r+0x20>)
 80100c0:	4604      	mov	r4, r0
 80100c2:	4608      	mov	r0, r1
 80100c4:	4611      	mov	r1, r2
 80100c6:	2200      	movs	r2, #0
 80100c8:	602a      	str	r2, [r5, #0]
 80100ca:	461a      	mov	r2, r3
 80100cc:	f7f0 fec7 	bl	8000e5e <_write>
 80100d0:	1c43      	adds	r3, r0, #1
 80100d2:	d102      	bne.n	80100da <_write_r+0x1e>
 80100d4:	682b      	ldr	r3, [r5, #0]
 80100d6:	b103      	cbz	r3, 80100da <_write_r+0x1e>
 80100d8:	6023      	str	r3, [r4, #0]
 80100da:	bd38      	pop	{r3, r4, r5, pc}
 80100dc:	20008514 	.word	0x20008514

080100e0 <__swsetup_r>:
 80100e0:	4b32      	ldr	r3, [pc, #200]	; (80101ac <__swsetup_r+0xcc>)
 80100e2:	b570      	push	{r4, r5, r6, lr}
 80100e4:	681d      	ldr	r5, [r3, #0]
 80100e6:	4606      	mov	r6, r0
 80100e8:	460c      	mov	r4, r1
 80100ea:	b125      	cbz	r5, 80100f6 <__swsetup_r+0x16>
 80100ec:	69ab      	ldr	r3, [r5, #24]
 80100ee:	b913      	cbnz	r3, 80100f6 <__swsetup_r+0x16>
 80100f0:	4628      	mov	r0, r5
 80100f2:	f7ff f959 	bl	800f3a8 <__sinit>
 80100f6:	4b2e      	ldr	r3, [pc, #184]	; (80101b0 <__swsetup_r+0xd0>)
 80100f8:	429c      	cmp	r4, r3
 80100fa:	d10f      	bne.n	801011c <__swsetup_r+0x3c>
 80100fc:	686c      	ldr	r4, [r5, #4]
 80100fe:	89a3      	ldrh	r3, [r4, #12]
 8010100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010104:	0719      	lsls	r1, r3, #28
 8010106:	d42c      	bmi.n	8010162 <__swsetup_r+0x82>
 8010108:	06dd      	lsls	r5, r3, #27
 801010a:	d411      	bmi.n	8010130 <__swsetup_r+0x50>
 801010c:	2309      	movs	r3, #9
 801010e:	6033      	str	r3, [r6, #0]
 8010110:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010114:	81a3      	strh	r3, [r4, #12]
 8010116:	f04f 30ff 	mov.w	r0, #4294967295
 801011a:	e03e      	b.n	801019a <__swsetup_r+0xba>
 801011c:	4b25      	ldr	r3, [pc, #148]	; (80101b4 <__swsetup_r+0xd4>)
 801011e:	429c      	cmp	r4, r3
 8010120:	d101      	bne.n	8010126 <__swsetup_r+0x46>
 8010122:	68ac      	ldr	r4, [r5, #8]
 8010124:	e7eb      	b.n	80100fe <__swsetup_r+0x1e>
 8010126:	4b24      	ldr	r3, [pc, #144]	; (80101b8 <__swsetup_r+0xd8>)
 8010128:	429c      	cmp	r4, r3
 801012a:	bf08      	it	eq
 801012c:	68ec      	ldreq	r4, [r5, #12]
 801012e:	e7e6      	b.n	80100fe <__swsetup_r+0x1e>
 8010130:	0758      	lsls	r0, r3, #29
 8010132:	d512      	bpl.n	801015a <__swsetup_r+0x7a>
 8010134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010136:	b141      	cbz	r1, 801014a <__swsetup_r+0x6a>
 8010138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801013c:	4299      	cmp	r1, r3
 801013e:	d002      	beq.n	8010146 <__swsetup_r+0x66>
 8010140:	4630      	mov	r0, r6
 8010142:	f7ff f9eb 	bl	800f51c <_free_r>
 8010146:	2300      	movs	r3, #0
 8010148:	6363      	str	r3, [r4, #52]	; 0x34
 801014a:	89a3      	ldrh	r3, [r4, #12]
 801014c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010150:	81a3      	strh	r3, [r4, #12]
 8010152:	2300      	movs	r3, #0
 8010154:	6063      	str	r3, [r4, #4]
 8010156:	6923      	ldr	r3, [r4, #16]
 8010158:	6023      	str	r3, [r4, #0]
 801015a:	89a3      	ldrh	r3, [r4, #12]
 801015c:	f043 0308 	orr.w	r3, r3, #8
 8010160:	81a3      	strh	r3, [r4, #12]
 8010162:	6923      	ldr	r3, [r4, #16]
 8010164:	b94b      	cbnz	r3, 801017a <__swsetup_r+0x9a>
 8010166:	89a3      	ldrh	r3, [r4, #12]
 8010168:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801016c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010170:	d003      	beq.n	801017a <__swsetup_r+0x9a>
 8010172:	4621      	mov	r1, r4
 8010174:	4630      	mov	r0, r6
 8010176:	f000 f933 	bl	80103e0 <__smakebuf_r>
 801017a:	89a0      	ldrh	r0, [r4, #12]
 801017c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010180:	f010 0301 	ands.w	r3, r0, #1
 8010184:	d00a      	beq.n	801019c <__swsetup_r+0xbc>
 8010186:	2300      	movs	r3, #0
 8010188:	60a3      	str	r3, [r4, #8]
 801018a:	6963      	ldr	r3, [r4, #20]
 801018c:	425b      	negs	r3, r3
 801018e:	61a3      	str	r3, [r4, #24]
 8010190:	6923      	ldr	r3, [r4, #16]
 8010192:	b943      	cbnz	r3, 80101a6 <__swsetup_r+0xc6>
 8010194:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010198:	d1ba      	bne.n	8010110 <__swsetup_r+0x30>
 801019a:	bd70      	pop	{r4, r5, r6, pc}
 801019c:	0781      	lsls	r1, r0, #30
 801019e:	bf58      	it	pl
 80101a0:	6963      	ldrpl	r3, [r4, #20]
 80101a2:	60a3      	str	r3, [r4, #8]
 80101a4:	e7f4      	b.n	8010190 <__swsetup_r+0xb0>
 80101a6:	2000      	movs	r0, #0
 80101a8:	e7f7      	b.n	801019a <__swsetup_r+0xba>
 80101aa:	bf00      	nop
 80101ac:	2000002c 	.word	0x2000002c
 80101b0:	0801331c 	.word	0x0801331c
 80101b4:	0801333c 	.word	0x0801333c
 80101b8:	080132fc 	.word	0x080132fc

080101bc <abort>:
 80101bc:	b508      	push	{r3, lr}
 80101be:	2006      	movs	r0, #6
 80101c0:	f000 f9c4 	bl	801054c <raise>
 80101c4:	2001      	movs	r0, #1
 80101c6:	f7f0 fe23 	bl	8000e10 <_exit>
	...

080101cc <_close_r>:
 80101cc:	b538      	push	{r3, r4, r5, lr}
 80101ce:	4d06      	ldr	r5, [pc, #24]	; (80101e8 <_close_r+0x1c>)
 80101d0:	2300      	movs	r3, #0
 80101d2:	4604      	mov	r4, r0
 80101d4:	4608      	mov	r0, r1
 80101d6:	602b      	str	r3, [r5, #0]
 80101d8:	f7f0 fe5d 	bl	8000e96 <_close>
 80101dc:	1c43      	adds	r3, r0, #1
 80101de:	d102      	bne.n	80101e6 <_close_r+0x1a>
 80101e0:	682b      	ldr	r3, [r5, #0]
 80101e2:	b103      	cbz	r3, 80101e6 <_close_r+0x1a>
 80101e4:	6023      	str	r3, [r4, #0]
 80101e6:	bd38      	pop	{r3, r4, r5, pc}
 80101e8:	20008514 	.word	0x20008514

080101ec <__sflush_r>:
 80101ec:	898a      	ldrh	r2, [r1, #12]
 80101ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101f2:	4605      	mov	r5, r0
 80101f4:	0710      	lsls	r0, r2, #28
 80101f6:	460c      	mov	r4, r1
 80101f8:	d458      	bmi.n	80102ac <__sflush_r+0xc0>
 80101fa:	684b      	ldr	r3, [r1, #4]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	dc05      	bgt.n	801020c <__sflush_r+0x20>
 8010200:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010202:	2b00      	cmp	r3, #0
 8010204:	dc02      	bgt.n	801020c <__sflush_r+0x20>
 8010206:	2000      	movs	r0, #0
 8010208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801020c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801020e:	2e00      	cmp	r6, #0
 8010210:	d0f9      	beq.n	8010206 <__sflush_r+0x1a>
 8010212:	2300      	movs	r3, #0
 8010214:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010218:	682f      	ldr	r7, [r5, #0]
 801021a:	602b      	str	r3, [r5, #0]
 801021c:	d032      	beq.n	8010284 <__sflush_r+0x98>
 801021e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010220:	89a3      	ldrh	r3, [r4, #12]
 8010222:	075a      	lsls	r2, r3, #29
 8010224:	d505      	bpl.n	8010232 <__sflush_r+0x46>
 8010226:	6863      	ldr	r3, [r4, #4]
 8010228:	1ac0      	subs	r0, r0, r3
 801022a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801022c:	b10b      	cbz	r3, 8010232 <__sflush_r+0x46>
 801022e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010230:	1ac0      	subs	r0, r0, r3
 8010232:	2300      	movs	r3, #0
 8010234:	4602      	mov	r2, r0
 8010236:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010238:	6a21      	ldr	r1, [r4, #32]
 801023a:	4628      	mov	r0, r5
 801023c:	47b0      	blx	r6
 801023e:	1c43      	adds	r3, r0, #1
 8010240:	89a3      	ldrh	r3, [r4, #12]
 8010242:	d106      	bne.n	8010252 <__sflush_r+0x66>
 8010244:	6829      	ldr	r1, [r5, #0]
 8010246:	291d      	cmp	r1, #29
 8010248:	d82c      	bhi.n	80102a4 <__sflush_r+0xb8>
 801024a:	4a2a      	ldr	r2, [pc, #168]	; (80102f4 <__sflush_r+0x108>)
 801024c:	40ca      	lsrs	r2, r1
 801024e:	07d6      	lsls	r6, r2, #31
 8010250:	d528      	bpl.n	80102a4 <__sflush_r+0xb8>
 8010252:	2200      	movs	r2, #0
 8010254:	6062      	str	r2, [r4, #4]
 8010256:	04d9      	lsls	r1, r3, #19
 8010258:	6922      	ldr	r2, [r4, #16]
 801025a:	6022      	str	r2, [r4, #0]
 801025c:	d504      	bpl.n	8010268 <__sflush_r+0x7c>
 801025e:	1c42      	adds	r2, r0, #1
 8010260:	d101      	bne.n	8010266 <__sflush_r+0x7a>
 8010262:	682b      	ldr	r3, [r5, #0]
 8010264:	b903      	cbnz	r3, 8010268 <__sflush_r+0x7c>
 8010266:	6560      	str	r0, [r4, #84]	; 0x54
 8010268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801026a:	602f      	str	r7, [r5, #0]
 801026c:	2900      	cmp	r1, #0
 801026e:	d0ca      	beq.n	8010206 <__sflush_r+0x1a>
 8010270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010274:	4299      	cmp	r1, r3
 8010276:	d002      	beq.n	801027e <__sflush_r+0x92>
 8010278:	4628      	mov	r0, r5
 801027a:	f7ff f94f 	bl	800f51c <_free_r>
 801027e:	2000      	movs	r0, #0
 8010280:	6360      	str	r0, [r4, #52]	; 0x34
 8010282:	e7c1      	b.n	8010208 <__sflush_r+0x1c>
 8010284:	6a21      	ldr	r1, [r4, #32]
 8010286:	2301      	movs	r3, #1
 8010288:	4628      	mov	r0, r5
 801028a:	47b0      	blx	r6
 801028c:	1c41      	adds	r1, r0, #1
 801028e:	d1c7      	bne.n	8010220 <__sflush_r+0x34>
 8010290:	682b      	ldr	r3, [r5, #0]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d0c4      	beq.n	8010220 <__sflush_r+0x34>
 8010296:	2b1d      	cmp	r3, #29
 8010298:	d001      	beq.n	801029e <__sflush_r+0xb2>
 801029a:	2b16      	cmp	r3, #22
 801029c:	d101      	bne.n	80102a2 <__sflush_r+0xb6>
 801029e:	602f      	str	r7, [r5, #0]
 80102a0:	e7b1      	b.n	8010206 <__sflush_r+0x1a>
 80102a2:	89a3      	ldrh	r3, [r4, #12]
 80102a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102a8:	81a3      	strh	r3, [r4, #12]
 80102aa:	e7ad      	b.n	8010208 <__sflush_r+0x1c>
 80102ac:	690f      	ldr	r7, [r1, #16]
 80102ae:	2f00      	cmp	r7, #0
 80102b0:	d0a9      	beq.n	8010206 <__sflush_r+0x1a>
 80102b2:	0793      	lsls	r3, r2, #30
 80102b4:	680e      	ldr	r6, [r1, #0]
 80102b6:	bf08      	it	eq
 80102b8:	694b      	ldreq	r3, [r1, #20]
 80102ba:	600f      	str	r7, [r1, #0]
 80102bc:	bf18      	it	ne
 80102be:	2300      	movne	r3, #0
 80102c0:	eba6 0807 	sub.w	r8, r6, r7
 80102c4:	608b      	str	r3, [r1, #8]
 80102c6:	f1b8 0f00 	cmp.w	r8, #0
 80102ca:	dd9c      	ble.n	8010206 <__sflush_r+0x1a>
 80102cc:	6a21      	ldr	r1, [r4, #32]
 80102ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80102d0:	4643      	mov	r3, r8
 80102d2:	463a      	mov	r2, r7
 80102d4:	4628      	mov	r0, r5
 80102d6:	47b0      	blx	r6
 80102d8:	2800      	cmp	r0, #0
 80102da:	dc06      	bgt.n	80102ea <__sflush_r+0xfe>
 80102dc:	89a3      	ldrh	r3, [r4, #12]
 80102de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102e2:	81a3      	strh	r3, [r4, #12]
 80102e4:	f04f 30ff 	mov.w	r0, #4294967295
 80102e8:	e78e      	b.n	8010208 <__sflush_r+0x1c>
 80102ea:	4407      	add	r7, r0
 80102ec:	eba8 0800 	sub.w	r8, r8, r0
 80102f0:	e7e9      	b.n	80102c6 <__sflush_r+0xda>
 80102f2:	bf00      	nop
 80102f4:	20400001 	.word	0x20400001

080102f8 <_fflush_r>:
 80102f8:	b538      	push	{r3, r4, r5, lr}
 80102fa:	690b      	ldr	r3, [r1, #16]
 80102fc:	4605      	mov	r5, r0
 80102fe:	460c      	mov	r4, r1
 8010300:	b913      	cbnz	r3, 8010308 <_fflush_r+0x10>
 8010302:	2500      	movs	r5, #0
 8010304:	4628      	mov	r0, r5
 8010306:	bd38      	pop	{r3, r4, r5, pc}
 8010308:	b118      	cbz	r0, 8010312 <_fflush_r+0x1a>
 801030a:	6983      	ldr	r3, [r0, #24]
 801030c:	b90b      	cbnz	r3, 8010312 <_fflush_r+0x1a>
 801030e:	f7ff f84b 	bl	800f3a8 <__sinit>
 8010312:	4b14      	ldr	r3, [pc, #80]	; (8010364 <_fflush_r+0x6c>)
 8010314:	429c      	cmp	r4, r3
 8010316:	d11b      	bne.n	8010350 <_fflush_r+0x58>
 8010318:	686c      	ldr	r4, [r5, #4]
 801031a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d0ef      	beq.n	8010302 <_fflush_r+0xa>
 8010322:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010324:	07d0      	lsls	r0, r2, #31
 8010326:	d404      	bmi.n	8010332 <_fflush_r+0x3a>
 8010328:	0599      	lsls	r1, r3, #22
 801032a:	d402      	bmi.n	8010332 <_fflush_r+0x3a>
 801032c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801032e:	f7ff f8eb 	bl	800f508 <__retarget_lock_acquire_recursive>
 8010332:	4628      	mov	r0, r5
 8010334:	4621      	mov	r1, r4
 8010336:	f7ff ff59 	bl	80101ec <__sflush_r>
 801033a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801033c:	07da      	lsls	r2, r3, #31
 801033e:	4605      	mov	r5, r0
 8010340:	d4e0      	bmi.n	8010304 <_fflush_r+0xc>
 8010342:	89a3      	ldrh	r3, [r4, #12]
 8010344:	059b      	lsls	r3, r3, #22
 8010346:	d4dd      	bmi.n	8010304 <_fflush_r+0xc>
 8010348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801034a:	f7ff f8de 	bl	800f50a <__retarget_lock_release_recursive>
 801034e:	e7d9      	b.n	8010304 <_fflush_r+0xc>
 8010350:	4b05      	ldr	r3, [pc, #20]	; (8010368 <_fflush_r+0x70>)
 8010352:	429c      	cmp	r4, r3
 8010354:	d101      	bne.n	801035a <_fflush_r+0x62>
 8010356:	68ac      	ldr	r4, [r5, #8]
 8010358:	e7df      	b.n	801031a <_fflush_r+0x22>
 801035a:	4b04      	ldr	r3, [pc, #16]	; (801036c <_fflush_r+0x74>)
 801035c:	429c      	cmp	r4, r3
 801035e:	bf08      	it	eq
 8010360:	68ec      	ldreq	r4, [r5, #12]
 8010362:	e7da      	b.n	801031a <_fflush_r+0x22>
 8010364:	0801331c 	.word	0x0801331c
 8010368:	0801333c 	.word	0x0801333c
 801036c:	080132fc 	.word	0x080132fc

08010370 <_lseek_r>:
 8010370:	b538      	push	{r3, r4, r5, lr}
 8010372:	4d07      	ldr	r5, [pc, #28]	; (8010390 <_lseek_r+0x20>)
 8010374:	4604      	mov	r4, r0
 8010376:	4608      	mov	r0, r1
 8010378:	4611      	mov	r1, r2
 801037a:	2200      	movs	r2, #0
 801037c:	602a      	str	r2, [r5, #0]
 801037e:	461a      	mov	r2, r3
 8010380:	f7f0 fdb0 	bl	8000ee4 <_lseek>
 8010384:	1c43      	adds	r3, r0, #1
 8010386:	d102      	bne.n	801038e <_lseek_r+0x1e>
 8010388:	682b      	ldr	r3, [r5, #0]
 801038a:	b103      	cbz	r3, 801038e <_lseek_r+0x1e>
 801038c:	6023      	str	r3, [r4, #0]
 801038e:	bd38      	pop	{r3, r4, r5, pc}
 8010390:	20008514 	.word	0x20008514

08010394 <__swhatbuf_r>:
 8010394:	b570      	push	{r4, r5, r6, lr}
 8010396:	460e      	mov	r6, r1
 8010398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801039c:	2900      	cmp	r1, #0
 801039e:	b096      	sub	sp, #88	; 0x58
 80103a0:	4614      	mov	r4, r2
 80103a2:	461d      	mov	r5, r3
 80103a4:	da08      	bge.n	80103b8 <__swhatbuf_r+0x24>
 80103a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80103aa:	2200      	movs	r2, #0
 80103ac:	602a      	str	r2, [r5, #0]
 80103ae:	061a      	lsls	r2, r3, #24
 80103b0:	d410      	bmi.n	80103d4 <__swhatbuf_r+0x40>
 80103b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103b6:	e00e      	b.n	80103d6 <__swhatbuf_r+0x42>
 80103b8:	466a      	mov	r2, sp
 80103ba:	f000 f8e3 	bl	8010584 <_fstat_r>
 80103be:	2800      	cmp	r0, #0
 80103c0:	dbf1      	blt.n	80103a6 <__swhatbuf_r+0x12>
 80103c2:	9a01      	ldr	r2, [sp, #4]
 80103c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80103c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80103cc:	425a      	negs	r2, r3
 80103ce:	415a      	adcs	r2, r3
 80103d0:	602a      	str	r2, [r5, #0]
 80103d2:	e7ee      	b.n	80103b2 <__swhatbuf_r+0x1e>
 80103d4:	2340      	movs	r3, #64	; 0x40
 80103d6:	2000      	movs	r0, #0
 80103d8:	6023      	str	r3, [r4, #0]
 80103da:	b016      	add	sp, #88	; 0x58
 80103dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080103e0 <__smakebuf_r>:
 80103e0:	898b      	ldrh	r3, [r1, #12]
 80103e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80103e4:	079d      	lsls	r5, r3, #30
 80103e6:	4606      	mov	r6, r0
 80103e8:	460c      	mov	r4, r1
 80103ea:	d507      	bpl.n	80103fc <__smakebuf_r+0x1c>
 80103ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80103f0:	6023      	str	r3, [r4, #0]
 80103f2:	6123      	str	r3, [r4, #16]
 80103f4:	2301      	movs	r3, #1
 80103f6:	6163      	str	r3, [r4, #20]
 80103f8:	b002      	add	sp, #8
 80103fa:	bd70      	pop	{r4, r5, r6, pc}
 80103fc:	ab01      	add	r3, sp, #4
 80103fe:	466a      	mov	r2, sp
 8010400:	f7ff ffc8 	bl	8010394 <__swhatbuf_r>
 8010404:	9900      	ldr	r1, [sp, #0]
 8010406:	4605      	mov	r5, r0
 8010408:	4630      	mov	r0, r6
 801040a:	f7ff f8f3 	bl	800f5f4 <_malloc_r>
 801040e:	b948      	cbnz	r0, 8010424 <__smakebuf_r+0x44>
 8010410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010414:	059a      	lsls	r2, r3, #22
 8010416:	d4ef      	bmi.n	80103f8 <__smakebuf_r+0x18>
 8010418:	f023 0303 	bic.w	r3, r3, #3
 801041c:	f043 0302 	orr.w	r3, r3, #2
 8010420:	81a3      	strh	r3, [r4, #12]
 8010422:	e7e3      	b.n	80103ec <__smakebuf_r+0xc>
 8010424:	4b0d      	ldr	r3, [pc, #52]	; (801045c <__smakebuf_r+0x7c>)
 8010426:	62b3      	str	r3, [r6, #40]	; 0x28
 8010428:	89a3      	ldrh	r3, [r4, #12]
 801042a:	6020      	str	r0, [r4, #0]
 801042c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010430:	81a3      	strh	r3, [r4, #12]
 8010432:	9b00      	ldr	r3, [sp, #0]
 8010434:	6163      	str	r3, [r4, #20]
 8010436:	9b01      	ldr	r3, [sp, #4]
 8010438:	6120      	str	r0, [r4, #16]
 801043a:	b15b      	cbz	r3, 8010454 <__smakebuf_r+0x74>
 801043c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010440:	4630      	mov	r0, r6
 8010442:	f000 f8b1 	bl	80105a8 <_isatty_r>
 8010446:	b128      	cbz	r0, 8010454 <__smakebuf_r+0x74>
 8010448:	89a3      	ldrh	r3, [r4, #12]
 801044a:	f023 0303 	bic.w	r3, r3, #3
 801044e:	f043 0301 	orr.w	r3, r3, #1
 8010452:	81a3      	strh	r3, [r4, #12]
 8010454:	89a0      	ldrh	r0, [r4, #12]
 8010456:	4305      	orrs	r5, r0
 8010458:	81a5      	strh	r5, [r4, #12]
 801045a:	e7cd      	b.n	80103f8 <__smakebuf_r+0x18>
 801045c:	0800f341 	.word	0x0800f341

08010460 <__malloc_lock>:
 8010460:	4801      	ldr	r0, [pc, #4]	; (8010468 <__malloc_lock+0x8>)
 8010462:	f7ff b851 	b.w	800f508 <__retarget_lock_acquire_recursive>
 8010466:	bf00      	nop
 8010468:	20008518 	.word	0x20008518

0801046c <__malloc_unlock>:
 801046c:	4801      	ldr	r0, [pc, #4]	; (8010474 <__malloc_unlock+0x8>)
 801046e:	f7ff b84c 	b.w	800f50a <__retarget_lock_release_recursive>
 8010472:	bf00      	nop
 8010474:	20008518 	.word	0x20008518

08010478 <_realloc_r>:
 8010478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801047c:	4680      	mov	r8, r0
 801047e:	4614      	mov	r4, r2
 8010480:	460e      	mov	r6, r1
 8010482:	b921      	cbnz	r1, 801048e <_realloc_r+0x16>
 8010484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010488:	4611      	mov	r1, r2
 801048a:	f7ff b8b3 	b.w	800f5f4 <_malloc_r>
 801048e:	b92a      	cbnz	r2, 801049c <_realloc_r+0x24>
 8010490:	f7ff f844 	bl	800f51c <_free_r>
 8010494:	4625      	mov	r5, r4
 8010496:	4628      	mov	r0, r5
 8010498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801049c:	f000 f894 	bl	80105c8 <_malloc_usable_size_r>
 80104a0:	4284      	cmp	r4, r0
 80104a2:	4607      	mov	r7, r0
 80104a4:	d802      	bhi.n	80104ac <_realloc_r+0x34>
 80104a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80104aa:	d812      	bhi.n	80104d2 <_realloc_r+0x5a>
 80104ac:	4621      	mov	r1, r4
 80104ae:	4640      	mov	r0, r8
 80104b0:	f7ff f8a0 	bl	800f5f4 <_malloc_r>
 80104b4:	4605      	mov	r5, r0
 80104b6:	2800      	cmp	r0, #0
 80104b8:	d0ed      	beq.n	8010496 <_realloc_r+0x1e>
 80104ba:	42bc      	cmp	r4, r7
 80104bc:	4622      	mov	r2, r4
 80104be:	4631      	mov	r1, r6
 80104c0:	bf28      	it	cs
 80104c2:	463a      	movcs	r2, r7
 80104c4:	f7fe fe40 	bl	800f148 <memcpy>
 80104c8:	4631      	mov	r1, r6
 80104ca:	4640      	mov	r0, r8
 80104cc:	f7ff f826 	bl	800f51c <_free_r>
 80104d0:	e7e1      	b.n	8010496 <_realloc_r+0x1e>
 80104d2:	4635      	mov	r5, r6
 80104d4:	e7df      	b.n	8010496 <_realloc_r+0x1e>
	...

080104d8 <_read_r>:
 80104d8:	b538      	push	{r3, r4, r5, lr}
 80104da:	4d07      	ldr	r5, [pc, #28]	; (80104f8 <_read_r+0x20>)
 80104dc:	4604      	mov	r4, r0
 80104de:	4608      	mov	r0, r1
 80104e0:	4611      	mov	r1, r2
 80104e2:	2200      	movs	r2, #0
 80104e4:	602a      	str	r2, [r5, #0]
 80104e6:	461a      	mov	r2, r3
 80104e8:	f7f0 fc9c 	bl	8000e24 <_read>
 80104ec:	1c43      	adds	r3, r0, #1
 80104ee:	d102      	bne.n	80104f6 <_read_r+0x1e>
 80104f0:	682b      	ldr	r3, [r5, #0]
 80104f2:	b103      	cbz	r3, 80104f6 <_read_r+0x1e>
 80104f4:	6023      	str	r3, [r4, #0]
 80104f6:	bd38      	pop	{r3, r4, r5, pc}
 80104f8:	20008514 	.word	0x20008514

080104fc <_raise_r>:
 80104fc:	291f      	cmp	r1, #31
 80104fe:	b538      	push	{r3, r4, r5, lr}
 8010500:	4604      	mov	r4, r0
 8010502:	460d      	mov	r5, r1
 8010504:	d904      	bls.n	8010510 <_raise_r+0x14>
 8010506:	2316      	movs	r3, #22
 8010508:	6003      	str	r3, [r0, #0]
 801050a:	f04f 30ff 	mov.w	r0, #4294967295
 801050e:	bd38      	pop	{r3, r4, r5, pc}
 8010510:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010512:	b112      	cbz	r2, 801051a <_raise_r+0x1e>
 8010514:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010518:	b94b      	cbnz	r3, 801052e <_raise_r+0x32>
 801051a:	4620      	mov	r0, r4
 801051c:	f000 f830 	bl	8010580 <_getpid_r>
 8010520:	462a      	mov	r2, r5
 8010522:	4601      	mov	r1, r0
 8010524:	4620      	mov	r0, r4
 8010526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801052a:	f000 b817 	b.w	801055c <_kill_r>
 801052e:	2b01      	cmp	r3, #1
 8010530:	d00a      	beq.n	8010548 <_raise_r+0x4c>
 8010532:	1c59      	adds	r1, r3, #1
 8010534:	d103      	bne.n	801053e <_raise_r+0x42>
 8010536:	2316      	movs	r3, #22
 8010538:	6003      	str	r3, [r0, #0]
 801053a:	2001      	movs	r0, #1
 801053c:	e7e7      	b.n	801050e <_raise_r+0x12>
 801053e:	2400      	movs	r4, #0
 8010540:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010544:	4628      	mov	r0, r5
 8010546:	4798      	blx	r3
 8010548:	2000      	movs	r0, #0
 801054a:	e7e0      	b.n	801050e <_raise_r+0x12>

0801054c <raise>:
 801054c:	4b02      	ldr	r3, [pc, #8]	; (8010558 <raise+0xc>)
 801054e:	4601      	mov	r1, r0
 8010550:	6818      	ldr	r0, [r3, #0]
 8010552:	f7ff bfd3 	b.w	80104fc <_raise_r>
 8010556:	bf00      	nop
 8010558:	2000002c 	.word	0x2000002c

0801055c <_kill_r>:
 801055c:	b538      	push	{r3, r4, r5, lr}
 801055e:	4d07      	ldr	r5, [pc, #28]	; (801057c <_kill_r+0x20>)
 8010560:	2300      	movs	r3, #0
 8010562:	4604      	mov	r4, r0
 8010564:	4608      	mov	r0, r1
 8010566:	4611      	mov	r1, r2
 8010568:	602b      	str	r3, [r5, #0]
 801056a:	f7f0 fc3f 	bl	8000dec <_kill>
 801056e:	1c43      	adds	r3, r0, #1
 8010570:	d102      	bne.n	8010578 <_kill_r+0x1c>
 8010572:	682b      	ldr	r3, [r5, #0]
 8010574:	b103      	cbz	r3, 8010578 <_kill_r+0x1c>
 8010576:	6023      	str	r3, [r4, #0]
 8010578:	bd38      	pop	{r3, r4, r5, pc}
 801057a:	bf00      	nop
 801057c:	20008514 	.word	0x20008514

08010580 <_getpid_r>:
 8010580:	f7f0 bc2c 	b.w	8000ddc <_getpid>

08010584 <_fstat_r>:
 8010584:	b538      	push	{r3, r4, r5, lr}
 8010586:	4d07      	ldr	r5, [pc, #28]	; (80105a4 <_fstat_r+0x20>)
 8010588:	2300      	movs	r3, #0
 801058a:	4604      	mov	r4, r0
 801058c:	4608      	mov	r0, r1
 801058e:	4611      	mov	r1, r2
 8010590:	602b      	str	r3, [r5, #0]
 8010592:	f7f0 fc8c 	bl	8000eae <_fstat>
 8010596:	1c43      	adds	r3, r0, #1
 8010598:	d102      	bne.n	80105a0 <_fstat_r+0x1c>
 801059a:	682b      	ldr	r3, [r5, #0]
 801059c:	b103      	cbz	r3, 80105a0 <_fstat_r+0x1c>
 801059e:	6023      	str	r3, [r4, #0]
 80105a0:	bd38      	pop	{r3, r4, r5, pc}
 80105a2:	bf00      	nop
 80105a4:	20008514 	.word	0x20008514

080105a8 <_isatty_r>:
 80105a8:	b538      	push	{r3, r4, r5, lr}
 80105aa:	4d06      	ldr	r5, [pc, #24]	; (80105c4 <_isatty_r+0x1c>)
 80105ac:	2300      	movs	r3, #0
 80105ae:	4604      	mov	r4, r0
 80105b0:	4608      	mov	r0, r1
 80105b2:	602b      	str	r3, [r5, #0]
 80105b4:	f7f0 fc8b 	bl	8000ece <_isatty>
 80105b8:	1c43      	adds	r3, r0, #1
 80105ba:	d102      	bne.n	80105c2 <_isatty_r+0x1a>
 80105bc:	682b      	ldr	r3, [r5, #0]
 80105be:	b103      	cbz	r3, 80105c2 <_isatty_r+0x1a>
 80105c0:	6023      	str	r3, [r4, #0]
 80105c2:	bd38      	pop	{r3, r4, r5, pc}
 80105c4:	20008514 	.word	0x20008514

080105c8 <_malloc_usable_size_r>:
 80105c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105cc:	1f18      	subs	r0, r3, #4
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	bfbc      	itt	lt
 80105d2:	580b      	ldrlt	r3, [r1, r0]
 80105d4:	18c0      	addlt	r0, r0, r3
 80105d6:	4770      	bx	lr

080105d8 <_init>:
 80105d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105da:	bf00      	nop
 80105dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105de:	bc08      	pop	{r3}
 80105e0:	469e      	mov	lr, r3
 80105e2:	4770      	bx	lr

080105e4 <_fini>:
 80105e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105e6:	bf00      	nop
 80105e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105ea:	bc08      	pop	{r3}
 80105ec:	469e      	mov	lr, r3
 80105ee:	4770      	bx	lr
